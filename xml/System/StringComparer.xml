<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="StringComparer.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-81070f4" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e344e59-9d8e-481b-978a-09f2e01be86c4526a2be99a0d71cadf77bf33e7a741674b5dea4.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4526a2be99a0d71cadf77bf33e7a741674b5dea4</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9e3295b6cc303a611a73a84c4b27f9da792ad0d</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/26/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.StringComparer">
          <source>Represents a string comparison operation that uses specific case and culture-based or ordinal comparison rules.</source>
          <target state="translated">Reprezentuje operacja porównywania ciągów, korzystającym z konkretnego przypadku i reguły kultury lub liczby porządkowej porównania.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.StringComparer">
          <source>An object derived from the <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> class embodies string-based comparison, equality, and hash code operations that take into account both case and culture-specific comparison rules.</source>
          <target state="translated">Obiekt pochodną <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> klasy zawiera ciąg na podstawie porównania równości, operacje i wyznaczania wartości skrótu kodu uwzględniające wielkość oraz specyficzne dla kultury porównanie reguł.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.StringComparer">
          <source>You can use the <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> class to create a type-specific comparison to sort the elements in a generic collection.</source>
          <target state="translated">Można użyć <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> klasy w celu utworzenia porównanie określonego typu sortowania elementów w zbiorze ogólnym.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.StringComparer">
          <source>Classes such as <ph id="ph1">&lt;xref:System.Collections.Hashtable&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.SortedList&gt;</ph>, and <ph id="ph4">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> use the <ph id="ph5">&lt;xref:System.StringComparer&gt;</ph> class for sorting purposes.</source>
          <target state="translated">Klas takich jak <ph id="ph1">&lt;xref:System.Collections.Hashtable&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.SortedList&gt;</ph>, i <ph id="ph4">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> użyj <ph id="ph5">&lt;xref:System.StringComparer&gt;</ph> klasy na potrzeby sortowania.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.StringComparer">
          <source>A comparison operation that is represented by the <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> class is defined to be either case-sensitive or case-insensitive, and use either word (culture-sensitive) or ordinal (culture-insensitive) comparison rules.</source>
          <target state="translated">Operacja porównania, która jest reprezentowana przez <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> klasa jest zdefiniowana z uwzględnieniem wielkości liter lub bez uwzględniania wielkości liter, oraz używanie program Microsoft word (zależne od kultury) lub reguł porządkowych porównania (niezależne od kultury).</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.StringComparer">
          <source>For more information about word and ordinal comparison rules, see <ph id="ph1">&lt;xref:System.Globalization.CompareOptions?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Aby uzyskać więcej informacji na temat programu word i reguł porządkowych porównanie, zobacz <ph id="ph1">&lt;xref:System.Globalization.CompareOptions?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.StringComparer">
          <source>Implemented Properties</source>
          <target state="translated">Zaimplementowane właściwości</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.StringComparer">
          <source>You might be confused about how to use the <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> class properties because of a seeming contradiction.</source>
          <target state="translated">Może być pomylone o sposobie używania <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> właściwościami klasy z powodu seeming sprzeczności.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.StringComparer">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> class is declared <ph id="ph2">`abstract`</ph> (<ph id="ph3">`MustInherit`</ph> in Visual Basic), which means its members can be invoked only on an object of a class derived from the <ph id="ph4">&lt;xref:System.StringComparer&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> Zadeklarowana jest klasa <ph id="ph2">`abstract`</ph> (<ph id="ph3">`MustInherit`</ph> w języku Visual Basic), co oznacza jego elementów członkowskich może być wywoływany tylko w obiekcie klasy pochodzącej od <ph id="ph4">&lt;xref:System.StringComparer&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.StringComparer">
          <source>The contradiction is that each property of the <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> class is declared <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> in Visual Basic), which means the property can be invoked without first creating a derived class.</source>
          <target state="translated">Sprzeczności oznacza, że każda właściwość <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> zadeklarowana jest klasa <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> w języku Visual Basic), co oznacza, że właściwość może być wywołany bez tworzenia klasy pochodnej.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.StringComparer">
          <source>You can call a <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> property directly because each property actually returns an instance of an anonymous class that is derived from the <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> class.</source>
          <target state="translated">Możesz wywołać <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> właściwości bezpośrednio, ponieważ każda właściwość faktycznie Zwraca wystąpienie klasy anonimowe, która jest pochodną <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.StringComparer">
          <source>Consequently, the type of each property value is <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph>, which is the base class of the anonymous class, not the type of the anonymous class itself.</source>
          <target state="translated">W rezultacie jest typ wartości właściwości <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph>, który nie jest klasa podstawowa klasy anonimowego typu anonimowego klasy sam.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.StringComparer">
          <source>Each <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> class property returns a <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> object that supports predefined case and comparison rules.</source>
          <target state="translated">Każdy <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> klasy zwraca <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> obiekt, który obsługuje wstępnie zdefiniowanych reguł wielkość liter i porównania.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.StringComparer">
          <source>The following example demonstrates the properties and the <ph id="ph1">&lt;xref:System.StringComparer.Create%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> class.</source>
          <target state="translated">W poniższym przykładzie pokazano właściwości i <ph id="ph1">&lt;xref:System.StringComparer.Create%2A&gt;</ph> metody <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.StringComparer">
          <source>The example illustrates how different <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> objects sort three versions of the Latin letter I.</source>
          <target state="translated">Pokazano w przykładzie różnych <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> obiektów sortowania trzy wersje Latin litera I.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.StringComparer.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> class.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="T:System.StringComparer">
          <source>Compares two objects or strings and returns an indication of their relative sort order.</source>
          <target state="translated">Porównuje dwa obiekty lub ciągi i zwraca wskazanie ich kolejność sortowania względną.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source>An object to compare to <bpt id="p1">&lt;c&gt;</bpt>y<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Obiekt do porównania <bpt id="p1">&lt;c&gt;</bpt>y<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source>An object to compare to <bpt id="p1">&lt;c&gt;</bpt>x<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Obiekt do porównania <bpt id="p1">&lt;c&gt;</bpt>x<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source>When overridden in a derived class, compares two objects and returns an indication of their relative sort order.</source>
          <target state="translated">W przypadku przesłonięcia w klasie pochodnej, porównuje dwa obiekty i zwraca wskazanie ich kolejność sortowania względną.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source>A signed integer that indicates the relative values of <ph id="ph1">&lt;paramref name="x" /&gt;</ph> and <ph id="ph2">&lt;paramref name="y" /&gt;</ph>, as shown in the following table.</source>
          <target state="translated">Całkowita wskazująca wartości <ph id="ph1">&lt;paramref name="x" /&gt;</ph> i <ph id="ph2">&lt;paramref name="y" /&gt;</ph>, jak pokazano w poniższej tabeli.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Wartość</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Meaning</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Znaczenie</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Less than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Mniejsza od zera.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="x" /&gt;</ph> precedes  <ph id="ph4">&lt;paramref name="y" /&gt;</ph> in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="x" /&gt;</ph> poprzedza <ph id="ph4">&lt;paramref name="y" /&gt;</ph> w kolejności sortowania.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="x" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and <ph id="ph3">&lt;paramref name="y" /&gt;</ph> is not <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="x" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> i <ph id="ph3">&lt;paramref name="y" /&gt;</ph> nie jest <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="x" /&gt;</ph> is equal to <ph id="ph4">&lt;paramref name="y" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="x" /&gt;</ph> jest równa <ph id="ph4">&lt;paramref name="y" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="x" /&gt;</ph> and <ph id="ph2">&lt;paramref name="y" /&gt;</ph> are both <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="x" /&gt;</ph> i <ph id="ph2">&lt;paramref name="y" /&gt;</ph> są <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Greater than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Większa niż zero</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="x" /&gt;</ph> follows <ph id="ph4">&lt;paramref name="y" /&gt;</ph> in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="x" /&gt;</ph> następuje <ph id="ph4">&lt;paramref name="y" /&gt;</ph> w kolejności sortowania.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="y" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and <ph id="ph3">&lt;paramref name="x" /&gt;</ph> is not <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="y" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> i <ph id="ph3">&lt;paramref name="x" /&gt;</ph> nie jest <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType&gt;</ph> method is slightly more efficient than the <ph id="ph2">&lt;xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType&gt;</ph> method because no conversion of the <ph id="ph3">`x`</ph> and <ph id="ph4">`y`</ph> arguments is needed to perform the comparison.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType&gt;</ph> Jest nieco bardziej wydajna niż metoda <ph id="ph2">&lt;xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType&gt;</ph> metody ponieważ konwersja <ph id="ph3">`x`</ph> i <ph id="ph4">`y`</ph> argumentów jest potrzebne do porównania.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source>Neither <ph id="ph1">&lt;paramref name="x" /&gt;</ph> nor <ph id="ph2">&lt;paramref name="y" /&gt;</ph> is a <ph id="ph3">&lt;see cref="T:System.String" /&gt;</ph> object, and neither <ph id="ph4">&lt;paramref name="x" /&gt;</ph> nor <ph id="ph5">&lt;paramref name="y" /&gt;</ph> implements the <ph id="ph6">&lt;see cref="T:System.IComparable" /&gt;</ph> interface.</source>
          <target state="translated">Ani <ph id="ph1">&lt;paramref name="x" /&gt;</ph> ani <ph id="ph2">&lt;paramref name="y" /&gt;</ph> jest <ph id="ph3">&lt;see cref="T:System.String" /&gt;</ph> obiektu, a nie <ph id="ph4">&lt;paramref name="x" /&gt;</ph> ani <ph id="ph5">&lt;paramref name="y" /&gt;</ph> implementuje <ph id="ph6">&lt;see cref="T:System.IComparable" /&gt;</ph> interfejsu.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source>A string to compare to <bpt id="p1">&lt;c&gt;</bpt>y<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Ciąg do porównania <bpt id="p1">&lt;c&gt;</bpt>y<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source>A string to compare to <bpt id="p1">&lt;c&gt;</bpt>x<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Ciąg do porównania <bpt id="p1">&lt;c&gt;</bpt>x<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source>When overridden in a derived class, compares two strings and returns an indication of their relative sort order.</source>
          <target state="translated">W przypadku przesłonięcia w klasie pochodnej, porównuje dwa ciągi i zwraca wskazanie ich kolejność sortowania względną.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source>A signed integer that indicates the relative values of <ph id="ph1">&lt;paramref name="x" /&gt;</ph> and <ph id="ph2">&lt;paramref name="y" /&gt;</ph>, as shown in the following table.</source>
          <target state="translated">Całkowita wskazująca wartości <ph id="ph1">&lt;paramref name="x" /&gt;</ph> i <ph id="ph2">&lt;paramref name="y" /&gt;</ph>, jak pokazano w poniższej tabeli.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Wartość</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Meaning</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Znaczenie</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Less than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Mniejsza od zera.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="x" /&gt;</ph> precedes <ph id="ph4">&lt;paramref name="y" /&gt;</ph> in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="x" /&gt;</ph> poprzedza <ph id="ph4">&lt;paramref name="y" /&gt;</ph> w kolejności sortowania.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="x" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and <ph id="ph3">&lt;paramref name="y" /&gt;</ph> is not <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="x" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> i <ph id="ph3">&lt;paramref name="y" /&gt;</ph> nie jest <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="x" /&gt;</ph> is equal to <ph id="ph4">&lt;paramref name="y" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="x" /&gt;</ph> jest równa <ph id="ph4">&lt;paramref name="y" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="x" /&gt;</ph> and <ph id="ph2">&lt;paramref name="y" /&gt;</ph> are both <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="x" /&gt;</ph> i <ph id="ph2">&lt;paramref name="y" /&gt;</ph> są <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Greater than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Większa niż zero</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="x" /&gt;</ph> follows <ph id="ph4">&lt;paramref name="y" /&gt;</ph> in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="x" /&gt;</ph> następuje <ph id="ph4">&lt;paramref name="y" /&gt;</ph> w kolejności sortowania.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="y" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and <ph id="ph3">&lt;paramref name="x" /&gt;</ph> is not <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="y" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph> i <ph id="ph3">&lt;paramref name="x" /&gt;</ph> nie jest <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType&gt;</ph> method is slightly more efficient than the <ph id="ph2">&lt;xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType&gt;</ph> method because no conversion of the <ph id="ph3">`x`</ph> and <ph id="ph4">`y`</ph> arguments is needed to perform the comparison.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType&gt;</ph> Jest nieco bardziej wydajna niż metoda <ph id="ph2">&lt;xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType&gt;</ph> metody ponieważ konwersja <ph id="ph3">`x`</ph> i <ph id="ph4">`y`</ph> argumentów jest potrzebne do porównania.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)">
          <source>A culture whose linguistic rules are used to perform a string comparison.</source>
          <target state="translated">Kultura, których językowe zasady są używane do przeprowadzenia porównania ciągów.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to specify that comparison operations be case-insensitive; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to specify that comparison operations be case-sensitive.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Aby określić operacje porównania bez uwzględniania wielkości liter; <ph id="ph2">&lt;see langword="false" /&gt;</ph> Aby określić, że porównanie operacje być uwzględniana wielkość liter.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object that compares strings according to the rules of a specified culture.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> obiekt, który porównuje ciągi zgodnie z regułami określonej kultury.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)">
          <source>A new <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object that performs string comparisons according to the comparison rules used by the <ph id="ph2">&lt;paramref name="culture" /&gt;</ph> parameter and the case rule specified by the <ph id="ph3">&lt;paramref name="ignoreCase" /&gt;</ph> parameter.</source>
          <target state="translated">Nowy <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> obiekt, który wykonuje porównania ciągu zgodnie z regułami porównania używane przez <ph id="ph2">&lt;paramref name="culture" /&gt;</ph> parametr i wielkość określona przez reguła <ph id="ph3">&lt;paramref name="ignoreCase" /&gt;</ph> parametru.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)">
          <source>The following code example demonstrates the properties and the <ph id="ph1">&lt;xref:System.StringComparer.Create%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> class.</source>
          <target state="translated">Poniższy przykład kodu pokazuje właściwości i <ph id="ph1">&lt;xref:System.StringComparer.Create%2A&gt;</ph> metody <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)">
          <source>The example illustrates how different <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> objects sort three versions of the Latin letter I.</source>
          <target state="translated">Pokazano w przykładzie różnych <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> obiektów sortowania trzy wersje Latin litera I.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="culture" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="culture" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="P:System.StringComparer.CurrentCulture">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object that performs a case-sensitive string comparison using the word comparison rules of the current culture.</source>
          <target state="translated">Pobiera <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> obiekt, który wykonuje porównanie ciągu z uwzględnieniem wielkości liter, przy użyciu reguł porównania word bieżącej kultury.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCulture">
          <source>A new <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object.</source>
          <target state="translated">Nowy <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCulture">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> returned by the <ph id="ph2">&lt;xref:System.StringComparer.CurrentCulture%2A&gt;</ph> property can be used when strings are linguistically relevant.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> Zwrócony przez <ph id="ph2">&lt;xref:System.StringComparer.CurrentCulture%2A&gt;</ph> właściwość może być używana, gdy zależnej istotnych ciągów.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCulture">
          <source>For example, if strings are displayed to the user, or if strings are the result of user interaction, culture-sensitive string comparison should be used to order the string data.</source>
          <target state="translated">Na przykład jeśli ciągi są wyświetlane dla użytkownika lub jeśli ciągi są wyniku interakcji z użytkownikiem, porównanie ciągu z uwzględnieniem kultury powinien służyć do kolejność danych ciągu.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCulture">
          <source>The current culture is the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object associated with the current thread.</source>
          <target state="translated">Bieżąca kultura jest <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> obiekt skojarzony z bieżącego wątku.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCulture">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer.CurrentCulture%2A&gt;</ph> property actually returns an instance of an anonymous class derived from the <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer.CurrentCulture%2A&gt;</ph> Właściwość faktycznie Zwraca wystąpienie klasy anonimowe pochodzące z <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCulture">
          <source>Each call to the <ph id="ph1">&lt;xref:System.StringComparer.CurrentCulture%2A&gt;</ph> property <ph id="ph2">`get`</ph> accessor returns a new <ph id="ph3">&lt;xref:System.StringComparer&gt;</ph> object, as the following code shows.</source>
          <target state="translated">Każde wywołanie <ph id="ph1">&lt;xref:System.StringComparer.CurrentCulture%2A&gt;</ph> właściwości <ph id="ph2">`get`</ph> akcesor zwraca nową <ph id="ph3">&lt;xref:System.StringComparer&gt;</ph> obiektu, jak przedstawiono na poniższym kodem.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCulture">
          <source>To improve performance, you can store the <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> object in a local variable rather than retrieve the value of the <ph id="ph2">&lt;xref:System.StringComparer.CurrentCulture%2A&gt;</ph> property multiple times.</source>
          <target state="translated">Aby zwiększyć wydajność, można przechowywać <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> obiekt w zmiennej lokalnej, a nie pobrać wartość <ph id="ph2">&lt;xref:System.StringComparer.CurrentCulture%2A&gt;</ph> właściwości wiele razy.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCulture">
          <source>The following code example demonstrates the properties and the <ph id="ph1">&lt;xref:System.StringComparer.Create%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> class.</source>
          <target state="translated">Poniższy przykład kodu pokazuje właściwości i <ph id="ph1">&lt;xref:System.StringComparer.Create%2A&gt;</ph> metody <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCulture">
          <source>The example illustrates how different <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> objects sort three versions of the Latin letter I.</source>
          <target state="translated">Pokazano w przykładzie różnych <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> obiektów sortowania trzy wersje Latin litera I.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="P:System.StringComparer.CurrentCultureIgnoreCase">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object that performs case-insensitive string comparisons using the word comparison rules of the current culture.</source>
          <target state="translated">Pobiera <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> obiekt, który wykonuje porównania bez uwzględniania wielkości liter ciągu przy użyciu reguł porównania word bieżącej kultury.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCultureIgnoreCase">
          <source>A new <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object.</source>
          <target state="translated">Nowy <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCultureIgnoreCase">
          <source>The current culture is the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object associated with the current thread.</source>
          <target state="translated">Bieżąca kultura jest <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> obiekt skojarzony z bieżącego wątku.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCultureIgnoreCase">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> returned by the <ph id="ph2">&lt;xref:System.StringComparer.CurrentCultureIgnoreCase%2A&gt;</ph> property can be used when strings are linguistically relevant but their case is not.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> Zwrócony przez <ph id="ph2">&lt;xref:System.StringComparer.CurrentCultureIgnoreCase%2A&gt;</ph> podczas zależnej istotnych ciągów, ale ich przypadku nie można użyć właściwości.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCultureIgnoreCase">
          <source>For example, if strings are displayed to the user but case is unimportant, culture-sensitive, case-insensitive string comparison should be used to order the string data.</source>
          <target state="translated">Na przykład jeśli ciągi są wyświetlane dla użytkownika, ale wielkość liter jest bez znaczenia, zależne od kultury, porównania bez uwzględniania wielkości liter ciąg powinien służyć do kolejność danych ciągu.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCultureIgnoreCase">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer.CurrentCultureIgnoreCase%2A&gt;</ph> property actually returns an instance of an anonymous class derived from the <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer.CurrentCultureIgnoreCase%2A&gt;</ph> Właściwość faktycznie Zwraca wystąpienie klasy anonimowe pochodzące z <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCultureIgnoreCase">
          <source>Each call to the <ph id="ph1">&lt;xref:System.StringComparer.CurrentCultureIgnoreCase%2A&gt;</ph> property <ph id="ph2">`get`</ph> accessor returns a new <ph id="ph3">&lt;xref:System.StringComparer&gt;</ph> object, as the following code shows.</source>
          <target state="translated">Każde wywołanie <ph id="ph1">&lt;xref:System.StringComparer.CurrentCultureIgnoreCase%2A&gt;</ph> właściwości <ph id="ph2">`get`</ph> akcesor zwraca nową <ph id="ph3">&lt;xref:System.StringComparer&gt;</ph> obiektu, jak przedstawiono na poniższym kodem.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCultureIgnoreCase">
          <source>To improve performance, you can store the <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> object in a local variable rather than retrieve the value of the <ph id="ph2">&lt;xref:System.StringComparer.CurrentCultureIgnoreCase%2A&gt;</ph> property multiple times.</source>
          <target state="translated">Aby zwiększyć wydajność, można przechowywać <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> obiekt w zmiennej lokalnej, a nie pobrać wartość <ph id="ph2">&lt;xref:System.StringComparer.CurrentCultureIgnoreCase%2A&gt;</ph> właściwości wiele razy.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="T:System.StringComparer">
          <source>When overridden in a derived class, indicates whether two objects or strings are equal.</source>
          <target state="translated">W przypadku przesłonięcia w klasie pochodnej, wskazuje, czy dwa obiekty lub ciągi są takie same.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Equals(System.Object,System.Object)">
          <source>An object to compare to <bpt id="p1">&lt;c&gt;</bpt>y<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Obiekt do porównania <bpt id="p1">&lt;c&gt;</bpt>y<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Equals(System.Object,System.Object)">
          <source>An object to compare to <bpt id="p1">&lt;c&gt;</bpt>x<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Obiekt do porównania <bpt id="p1">&lt;c&gt;</bpt>x<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Equals(System.Object,System.Object)">
          <source>When overridden in a derived class, indicates whether two objects are equal.</source>
          <target state="translated">W przypadku przesłonięcia w klasie pochodnej, wskazuje, czy dwa obiekty są takie same.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Equals(System.Object,System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="x" /&gt;</ph> and <ph id="ph3">&lt;paramref name="y" /&gt;</ph> refer to the same object, or <ph id="ph4">&lt;paramref name="x" /&gt;</ph> and <ph id="ph5">&lt;paramref name="y" /&gt;</ph> are both the same type of object and those objects are equal, or both <ph id="ph6">&lt;paramref name="x" /&gt;</ph> and <ph id="ph7">&lt;paramref name="y" /&gt;</ph> are <ph id="ph8">&lt;see langword="null" /&gt;</ph>; otherwise, <ph id="ph9">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli <ph id="ph2">&lt;paramref name="x" /&gt;</ph> i <ph id="ph3">&lt;paramref name="y" /&gt;</ph> odwoływać się do tego samego obiektu lub <ph id="ph4">&lt;paramref name="x" /&gt;</ph> i <ph id="ph5">&lt;paramref name="y" /&gt;</ph> są obie tego samego typu obiektu i te obiekty są takie same, lub obie <ph id="ph6">&lt;paramref name="x" /&gt;</ph> i <ph id="ph7">&lt;paramref name="y" /&gt;</ph> są <ph id="ph8">&lt;see langword="null" /&gt;</ph>; w przeciwnym razie <ph id="ph9">&lt;see langword="false" /&gt;</ph> .</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.Equals(System.Object,System.Object)">
          <source>Because the runtime does not have to unbox <ph id="ph1">`x`</ph> or <ph id="ph2">`y`</ph> if they are value types or attempt to downcast <ph id="ph3">`x`</ph> or <ph id="ph4">`y`</ph> to strings if they are reference types, the <ph id="ph5">&lt;xref:System.StringComparer.Equals%28System.String%2CSystem.String%29&gt;</ph> method may be slightly more efficient than the <ph id="ph6">&lt;xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29&gt;</ph> method.</source>
          <target state="translated">Ponieważ środowisko uruchomieniowe nie trzeba unbox — <ph id="ph1">`x`</ph> lub <ph id="ph2">`y`</ph> typów wartości lub spróbować do przypisanie elementu podrzędnego <ph id="ph3">`x`</ph> lub <ph id="ph4">`y`</ph> do ciągów, jeśli są one typy referencyjne <ph id="ph5">&lt;xref:System.StringComparer.Equals%28System.String%2CSystem.String%29&gt;</ph> metoda może być nieco bardziej efektywne niż <ph id="ph6">&lt;xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Equals(System.String,System.String)">
          <source>A string to compare to <bpt id="p1">&lt;c&gt;</bpt>y<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Ciąg do porównania <bpt id="p1">&lt;c&gt;</bpt>y<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Equals(System.String,System.String)">
          <source>A string to compare to <bpt id="p1">&lt;c&gt;</bpt>x<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Ciąg do porównania <bpt id="p1">&lt;c&gt;</bpt>x<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Equals(System.String,System.String)">
          <source>When overridden in a derived class, indicates whether two strings are equal.</source>
          <target state="translated">W przypadku przesłonięcia w klasie pochodnej, wskazuje, czy dwa ciągi są takie same.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Equals(System.String,System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="x" /&gt;</ph> and <ph id="ph3">&lt;paramref name="y" /&gt;</ph> refer to the same object, or <ph id="ph4">&lt;paramref name="x" /&gt;</ph> and <ph id="ph5">&lt;paramref name="y" /&gt;</ph> are equal, or <ph id="ph6">&lt;paramref name="x" /&gt;</ph> and <ph id="ph7">&lt;paramref name="y" /&gt;</ph> are <ph id="ph8">&lt;see langword="null" /&gt;</ph>; otherwise, <ph id="ph9">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli <ph id="ph2">&lt;paramref name="x" /&gt;</ph> i <ph id="ph3">&lt;paramref name="y" /&gt;</ph> odwoływać się do tego samego obiektu lub <ph id="ph4">&lt;paramref name="x" /&gt;</ph> i <ph id="ph5">&lt;paramref name="y" /&gt;</ph> są takie same, lub <ph id="ph6">&lt;paramref name="x" /&gt;</ph> i <ph id="ph7">&lt;paramref name="y" /&gt;</ph> są <ph id="ph8">&lt;see langword="null" /&gt;</ph>; w przeciwnym razie <ph id="ph9">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.Equals(System.String,System.String)">
          <source>Because the runtime does not have to unbox <ph id="ph1">`x`</ph> or <ph id="ph2">`y`</ph> if they are value types or attempt to downcast <ph id="ph3">`x`</ph> or <ph id="ph4">`y`</ph> to strings if they are reference types, the <ph id="ph5">&lt;xref:System.StringComparer.Equals%28System.String%2CSystem.String%29&gt;</ph> method may be slightly more efficient than the <ph id="ph6">&lt;xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29&gt;</ph> method.</source>
          <target state="translated">Ponieważ środowisko uruchomieniowe nie trzeba unbox — <ph id="ph1">`x`</ph> lub <ph id="ph2">`y`</ph> typów wartości lub spróbować do przypisanie elementu podrzędnego <ph id="ph3">`x`</ph> lub <ph id="ph4">`y`</ph> do ciągów, jeśli są one typy referencyjne <ph id="ph5">&lt;xref:System.StringComparer.Equals%28System.String%2CSystem.String%29&gt;</ph> metoda może być nieco bardziej efektywne niż <ph id="ph6">&lt;xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="T:System.StringComparer">
          <source>When overridden in a derived class, gets the hash code for the current <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object.</source>
          <target state="translated">W przypadku przesłonięcia w klasie pochodnej pobiera wartość skrótu dla bieżącego <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.StringComparer.GetHashCode(System.Object)">
          <source>An object.</source>
          <target state="translated">Obiekt.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.StringComparer.GetHashCode(System.Object)">
          <source>When overridden in a derived class, gets the hash code for the specified object.</source>
          <target state="translated">W przypadku przesłonięcia w klasie pochodnej pobiera wartość skrótu dla określonego obiektu.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.StringComparer.GetHashCode(System.Object)">
          <source>A 32-bit signed hash code calculated from the value of the <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter.</source>
          <target state="translated">32-bitowej podpisanej skrótu obliczana na podstawie wartości <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parametru.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.GetHashCode(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer.GetHashCode%28System.String%29&gt;</ph> method is more efficient than the <ph id="ph2">&lt;xref:System.StringComparer.GetHashCode%2A&gt;</ph> method because the <ph id="ph3">`obj`</ph> parameter does not have to be unboxed to perform the operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer.GetHashCode%28System.String%29&gt;</ph> Jest bardziej wydajna niż metoda <ph id="ph2">&lt;xref:System.StringComparer.GetHashCode%2A&gt;</ph> metody ponieważ <ph id="ph3">`obj`</ph> parametru nie musi być rozpakowany do wykonania tej operacji.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.GetHashCode(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer.GetHashCode%28System.Object%29&gt;</ph> method allocates an amount of memory that is proportional to the size of <ph id="ph2">`obj`</ph> to calculate the hash code of <ph id="ph3">`obj`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer.GetHashCode%28System.Object%29&gt;</ph> Metody przydziela ilość pamięci, która jest proporcjonalny do rozmiaru <ph id="ph2">`obj`</ph> do obliczania skrótu <ph id="ph3">`obj`</ph>.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.GetHashCode(System.Object)">
          <source>In the case of large strings, trying to retrieve the hash code can throw an <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">W przypadku dużych ciągów próby pobrania skrótu może zgłosić <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.GetHashCode(System.Object)">
          <source>Instead, you can use an alternate algorithm that allocates a fixed amount of memory when calculating hash codes.</source>
          <target state="translated">Zamiast tego można użyć alternatywnego algorytmu, który przydziela stałej ilości pamięci podczas obliczania skrótu.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.GetHashCode(System.Object)">
          <source>To use this algorithm, add the <bpt id="p1">[</bpt>&lt;NetFx45_CultureAwareComparerGetHashCode_LongStrings&gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md)</ept> element to the <bpt id="p2">[</bpt><ph id="ph1">\&lt;</ph>runtime&gt;<ept id="p2">](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)</ept> section of your application's configuration file.</source>
          <target state="translated">Aby używać tego algorytmu, Dodaj <bpt id="p1">[</bpt>&lt; netfx45_cultureawarecomparergethashcode_longstrings — &gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md)</ept> elementu <bpt id="p2">[</bpt> <ph id="ph1">\&lt;</ph>runtime &gt;<ept id="p2">](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)</ept> sekcji pliku konfiguracji aplikacji.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.StringComparer.GetHashCode(System.Object)">
          <source>Not enough memory is available to allocate the buffer that is required to compute the hash code.</source>
          <target state="translated">Dostępne do alokacji buforu, który jest wymagany do Oblicz wartość skrótu jest za mało pamięci.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.StringComparer.GetHashCode(System.Object)">
          <source><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.StringComparer.GetHashCode(System.Object)">
          <source>Not enough memory is available to allocate the buffer that is required to compute the hash code.</source>
          <target state="translated">Dostępne do alokacji buforu, który jest wymagany do Oblicz wartość skrótu jest za mało pamięci.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.StringComparer.GetHashCode(System.String)">
          <source>A string.</source>
          <target state="translated">Ciąg.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.StringComparer.GetHashCode(System.String)">
          <source>When overridden in a derived class, gets the hash code for the specified string.</source>
          <target state="translated">W przypadku przesłonięcia w klasie pochodnej pobiera wartość skrótu dla określonego ciągu.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.StringComparer.GetHashCode(System.String)">
          <source>A 32-bit signed hash code calculated from the value of the <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter.</source>
          <target state="translated">32-bitowej podpisanej skrótu obliczana na podstawie wartości <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parametru.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.GetHashCode(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer.GetHashCode%28System.String%29&gt;</ph> method is more efficient than the <ph id="ph2">&lt;xref:System.StringComparer.GetHashCode%28System.Object%29&gt;</ph> method because the <ph id="ph3">`obj`</ph> parameter does not have to be unboxed to perform the operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer.GetHashCode%28System.String%29&gt;</ph> Jest bardziej wydajna niż metoda <ph id="ph2">&lt;xref:System.StringComparer.GetHashCode%28System.Object%29&gt;</ph> metody ponieważ <ph id="ph3">`obj`</ph> parametru nie musi być rozpakowany do wykonania tej operacji.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.GetHashCode(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer.GetHashCode%28System.String%29&gt;</ph> method allocates an amount of memory that is proportional to the size of <ph id="ph2">`obj`</ph> to calculate the hash code of <ph id="ph3">`obj`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer.GetHashCode%28System.String%29&gt;</ph> Metody przydziela ilość pamięci, która jest proporcjonalny do rozmiaru <ph id="ph2">`obj`</ph> do obliczania skrótu <ph id="ph3">`obj`</ph>.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.GetHashCode(System.String)">
          <source>In the case of large strings, trying to retrieve the hash code can throw an <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">W przypadku dużych ciągów próby pobrania skrótu może zgłosić <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.GetHashCode(System.String)">
          <source>Instead, you can use an alternate algorithm that allocates a fixed amount of memory when calculating hash codes.</source>
          <target state="translated">Zamiast tego można użyć alternatywnego algorytmu, który przydziela stałej ilości pamięci podczas obliczania skrótu.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.GetHashCode(System.String)">
          <source>To use this algorithm, add the <bpt id="p1">[</bpt>&lt;NetFx45_CultureAwareComparerGetHashCode_LongStrings&gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md)</ept> element to the <bpt id="p2">[</bpt><ph id="ph1">\&lt;</ph>runtime&gt;<ept id="p2">](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)</ept> section of your application's configuration file.</source>
          <target state="translated">Aby używać tego algorytmu, Dodaj <bpt id="p1">[</bpt>&lt; netfx45_cultureawarecomparergethashcode_longstrings — &gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md)</ept> elementu <bpt id="p2">[</bpt> <ph id="ph1">\&lt;</ph>runtime &gt;<ept id="p2">](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)</ept> sekcji pliku konfiguracji aplikacji.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.StringComparer.GetHashCode(System.String)">
          <source>Not enough memory is available to allocate the buffer that is required to compute the hash code.</source>
          <target state="translated">Dostępne do alokacji buforu, który jest wymagany do Oblicz wartość skrótu jest za mało pamięci.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.StringComparer.GetHashCode(System.String)">
          <source><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.StringComparer.GetHashCode(System.String)">
          <source>Not enough memory is available to allocate the buffer that is required to compute the hash code.</source>
          <target state="translated">Dostępne do alokacji buforu, który jest wymagany do Oblicz wartość skrótu jest za mało pamięci.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="P:System.StringComparer.InvariantCulture">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object that performs a case-sensitive string comparison using the word comparison rules of the invariant culture.</source>
          <target state="translated">Pobiera <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> obiekt, który przeprowadza porównanie ciągu z uwzględnieniem wielkości liter przy użyciu reguł porównania word Niezmienna kultura.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.InvariantCulture">
          <source>A new <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object.</source>
          <target state="translated">Nowy <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.InvariantCulture">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> returned by the <ph id="ph2">&lt;xref:System.StringComparer.InvariantCulture%2A&gt;</ph> property compares strings in a linguistically relevant manner, but it is not suitable for display in any particular culture.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> Zwrócony przez <ph id="ph2">&lt;xref:System.StringComparer.InvariantCulture%2A&gt;</ph> właściwości porównuje ciągi w sposób zależnej istotne, ale nie nadaje się do wyświetlenia w dowolnej określonej kultury.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.InvariantCulture">
          <source>Its major application is to order strings in a way that will be identical across cultures.</source>
          <target state="translated">Jego najważniejszych aplikacji jest kolejności ciągów w taki sposób, który musi być taka sama we kultur.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.InvariantCulture">
          <source>The invariant culture is the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object returned by the <ph id="ph2">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A&gt;</ph> property.</source>
          <target state="translated">Niezmienna kultura jest <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> obiektu zwróconego przez <ph id="ph2">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.InvariantCulture">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer.InvariantCulture%2A&gt;</ph> property actually returns an instance of an anonymous class derived from the <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer.InvariantCulture%2A&gt;</ph> Właściwość faktycznie Zwraca wystąpienie klasy anonimowe pochodzące z <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.InvariantCulture">
          <source>The following code example demonstrates the properties and the <ph id="ph1">&lt;xref:System.StringComparer.Create%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> class.</source>
          <target state="translated">Poniższy przykład kodu pokazuje właściwości i <ph id="ph1">&lt;xref:System.StringComparer.Create%2A&gt;</ph> metody <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.InvariantCulture">
          <source>The example illustrates how different <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> objects sort three versions of the Latin letter I.</source>
          <target state="translated">Pokazano w przykładzie różnych <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> obiektów sortowania trzy wersje Latin litera I.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="P:System.StringComparer.InvariantCultureIgnoreCase">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object that performs a case-insensitive string comparison using the word comparison rules of the invariant culture.</source>
          <target state="translated">Pobiera <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> obiekt, który wykonuje porównania bez uwzględniania wielkości liter ciągów za pomocą zasad porównania word Niezmienna kultura.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.InvariantCultureIgnoreCase">
          <source>A new <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object.</source>
          <target state="translated">Nowy <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.InvariantCultureIgnoreCase">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> returned by the <ph id="ph2">&lt;xref:System.StringComparer.InvariantCultureIgnoreCase%2A&gt;</ph> property compares strings in a linguistically relevant manner that ignores case, but it is not suitable for display in any particular culture.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> Zwrócony przez <ph id="ph2">&lt;xref:System.StringComparer.InvariantCultureIgnoreCase%2A&gt;</ph> właściwości porównuje ciągi w sposób zależnej odpowiednich ignoruje wielkość liter, ale nie nadaje się do wyświetlenia w dowolnej określonej kultury.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.InvariantCultureIgnoreCase">
          <source>Its major application is to order strings in a way that will be identical across cultures.</source>
          <target state="translated">Jego najważniejszych aplikacji jest kolejności ciągów w taki sposób, który musi być taka sama we kultur.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.InvariantCultureIgnoreCase">
          <source>The invariant culture is the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object returned by the <ph id="ph2">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A&gt;</ph> property.</source>
          <target state="translated">Niezmienna kultura jest <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> obiektu zwróconego przez <ph id="ph2">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.InvariantCultureIgnoreCase">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer.InvariantCultureIgnoreCase%2A&gt;</ph> property actually returns an instance of an anonymous class derived from the <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer.InvariantCultureIgnoreCase%2A&gt;</ph> Właściwość faktycznie Zwraca wystąpienie klasy anonimowe pochodzące z <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="P:System.StringComparer.Ordinal">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object that performs a case-sensitive ordinal string comparison.</source>
          <target state="translated">Pobiera <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> obiekt, który wykonuje porównania ciągów porządkowej z uwzględnieniem wielkości liter.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.Ordinal">
          <source>A <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.Ordinal">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> returned by the <ph id="ph2">&lt;xref:System.StringComparer.Ordinal%2A&gt;</ph> property performs a simple byte comparison that is independent of language.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> Zwrócony przez <ph id="ph2">&lt;xref:System.StringComparer.Ordinal%2A&gt;</ph> właściwości wykonuje porównanie jednobajtowych, która jest niezależna od języka.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.Ordinal">
          <source>This is most appropriate when comparing strings that are generated programmatically or when comparing case-sensitive resources such as passwords.</source>
          <target state="translated">Jest to najbardziej odpowiednia w przypadku, gdy porównywanie ciągów, które są generowane programistycznie lub gdy porównanie z uwzględnieniem wielkości liter zasoby, takie jak hasła.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.Ordinal">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer.Ordinal%2A&gt;</ph> property actually returns an instance of an anonymous class derived from the <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer.Ordinal%2A&gt;</ph> Właściwość faktycznie Zwraca wystąpienie klasy anonimowe pochodzące z <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.Ordinal">
          <source>The following code example demonstrates the properties and the <ph id="ph1">&lt;xref:System.StringComparer.Create%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> class.</source>
          <target state="translated">Poniższy przykład kodu pokazuje właściwości i <ph id="ph1">&lt;xref:System.StringComparer.Create%2A&gt;</ph> metody <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.Ordinal">
          <source>The example illustrates how different <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> objects sort three versions of the Latin letter I.</source>
          <target state="translated">Pokazano w przykładzie różnych <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> obiektów sortowania trzy wersje Latin litera I.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="P:System.StringComparer.OrdinalIgnoreCase">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object that performs a case-insensitive ordinal string comparison.</source>
          <target state="translated">Pobiera <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> obiektu, który wykonuje porównania ciągów porządkowych bez uwzględniania wielkości liter.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.OrdinalIgnoreCase">
          <source>A <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.OrdinalIgnoreCase">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> returned by the <ph id="ph2">&lt;xref:System.StringComparer.OrdinalIgnoreCase%2A&gt;</ph> property treats the characters in the strings to compare as if they were converted to uppercase using the conventions of the invariant culture, and then performs a simple byte comparison that is independent of language.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> Zwrócony przez <ph id="ph2">&lt;xref:System.StringComparer.OrdinalIgnoreCase%2A&gt;</ph> właściwości traktuje znaków w ciągach do porównania tak, jakby były one przekonwertowane na wielkie litery przy użyciu konwencji Niezmienna kultura, a następnie wykonuje porównania jednobajtowych, która jest niezależna od język.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.OrdinalIgnoreCase">
          <source>This is most appropriate when comparing strings that are generated programmatically or when comparing case-insensitive resources such as paths and filenames.</source>
          <target state="translated">Jest to najbardziej odpowiednia w przypadku, gdy porównywanie ciągów, które są generowane programistycznie lub gdy porównywanie bez uwzględniania wielkości liter zasobów, takich jak ścieżki i nazwy plików.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.OrdinalIgnoreCase">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer.OrdinalIgnoreCase%2A&gt;</ph> property actually returns an instance of an anonymous class derived from the <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer.OrdinalIgnoreCase%2A&gt;</ph> Właściwość faktycznie Zwraca wystąpienie klasy anonimowe pochodzące z <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.OrdinalIgnoreCase">
          <source>The following code example demonstrates the properties and the <ph id="ph1">&lt;xref:System.StringComparer.Create%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> class.</source>
          <target state="translated">Poniższy przykład kodu pokazuje właściwości i <ph id="ph1">&lt;xref:System.StringComparer.Create%2A&gt;</ph> metody <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.OrdinalIgnoreCase">
          <source>The example illustrates how different <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> objects sort three versions of the Latin letter I.</source>
          <target state="translated">Pokazano w przykładzie różnych <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> obiektów sortowania trzy wersje Latin litera I.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>