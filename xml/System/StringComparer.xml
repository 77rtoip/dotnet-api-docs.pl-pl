<Type Name="StringComparer" FullName="System.StringComparer">
  <TypeSignature Language="C#" Value="public abstract class StringComparer : System.Collections.Generic.IComparer&lt;string&gt;, System.Collections.Generic.IEqualityComparer&lt;string&gt;, System.Collections.IComparer, System.Collections.IEqualityComparer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit StringComparer extends System.Object implements class System.Collections.Generic.IComparer`1&lt;string&gt;, class System.Collections.Generic.IEqualityComparer`1&lt;string&gt;, class System.Collections.IComparer, class System.Collections.IEqualityComparer" />
  <TypeSignature Language="DocId" Value="T:System.StringComparer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class StringComparer&#xA;Implements IComparer, IComparer(Of String), IEqualityComparer, IEqualityComparer(Of String)" />
  <TypeSignature Language="C++ CLI" Value="public ref class StringComparer abstract : System::Collections::Generic::IComparer&lt;System::String ^&gt;, System::Collections::Generic::IEqualityComparer&lt;System::String ^&gt;, System::Collections::IComparer, System::Collections::IEqualityComparer" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IComparer&lt;System.String&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEqualityComparer&lt;System.String&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IComparer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEqualityComparer</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="1df25-101">Reprezentuje operacja porównywania ciągów, korzystającym z konkretnego przypadku i reguły kultury lub liczby porządkowej porównania.</span><span class="sxs-lookup"><span data-stu-id="1df25-101">Represents a string comparison operation that uses specific case and culture-based or ordinal comparison rules.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1df25-102">Obiekt pochodną <xref:System.StringComparer> klasy zawiera ciąg na podstawie porównania równości, operacje i wyznaczania wartości skrótu kodu uwzględniające wielkość oraz specyficzne dla kultury porównanie reguł.</span><span class="sxs-lookup"><span data-stu-id="1df25-102">An object derived from the <xref:System.StringComparer> class embodies string-based comparison, equality, and hash code operations that take into account both case and culture-specific comparison rules.</span></span> <span data-ttu-id="1df25-103">Można użyć <xref:System.StringComparer> klasy w celu utworzenia porównanie określonego typu sortowania elementów w zbiorze ogólnym.</span><span class="sxs-lookup"><span data-stu-id="1df25-103">You can use the <xref:System.StringComparer> class to create a type-specific comparison to sort the elements in a generic collection.</span></span> <span data-ttu-id="1df25-104">Klas takich jak <xref:System.Collections.Hashtable>, <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.SortedList>, i <xref:System.Collections.Generic.SortedList%602> użyj <xref:System.StringComparer> klasy na potrzeby sortowania.</span><span class="sxs-lookup"><span data-stu-id="1df25-104">Classes such as <xref:System.Collections.Hashtable>, <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.SortedList>, and <xref:System.Collections.Generic.SortedList%602> use the <xref:System.StringComparer> class for sorting purposes.</span></span>  
  
 <span data-ttu-id="1df25-105">Operacja porównania, która jest reprezentowana przez <xref:System.StringComparer> klasa jest zdefiniowana z uwzględnieniem wielkości liter lub bez uwzględniania wielkości liter, oraz używanie program Microsoft word (zależne od kultury) lub reguł porządkowych porównania (niezależne od kultury).</span><span class="sxs-lookup"><span data-stu-id="1df25-105">A comparison operation that is represented by the <xref:System.StringComparer> class is defined to be either case-sensitive or case-insensitive, and use either word (culture-sensitive) or ordinal (culture-insensitive) comparison rules.</span></span> <span data-ttu-id="1df25-106">Aby uzyskać więcej informacji na temat programu word i reguł porządkowych porównanie, zobacz <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="1df25-106">For more information about word and ordinal comparison rules, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>  
  
## <a name="implemented-properties"></a><span data-ttu-id="1df25-107">Zaimplementowane właściwości</span><span class="sxs-lookup"><span data-stu-id="1df25-107">Implemented Properties</span></span>  
 <span data-ttu-id="1df25-108">Może być pomylone o sposobie używania <xref:System.StringComparer> właściwościami klasy z powodu seeming sprzeczności.</span><span class="sxs-lookup"><span data-stu-id="1df25-108">You might be confused about how to use the <xref:System.StringComparer> class properties because of a seeming contradiction.</span></span> <span data-ttu-id="1df25-109"><xref:System.StringComparer> Zadeklarowana jest klasa `abstract` (`MustInherit` w języku Visual Basic), co oznacza jego elementów członkowskich może być wywoływany tylko w obiekcie klasy pochodzącej od <xref:System.StringComparer> klasy.</span><span class="sxs-lookup"><span data-stu-id="1df25-109">The <xref:System.StringComparer> class is declared `abstract` (`MustInherit` in Visual Basic), which means its members can be invoked only on an object of a class derived from the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="1df25-110">Sprzeczności oznacza, że każda właściwość <xref:System.StringComparer> zadeklarowana jest klasa `static` (`Shared` w języku Visual Basic), co oznacza, że właściwość może być wywołany bez tworzenia klasy pochodnej.</span><span class="sxs-lookup"><span data-stu-id="1df25-110">The contradiction is that each property of the <xref:System.StringComparer> class is declared `static` (`Shared` in Visual Basic), which means the property can be invoked without first creating a derived class.</span></span>  
  
 <span data-ttu-id="1df25-111">Możesz wywołać <xref:System.StringComparer> właściwości bezpośrednio, ponieważ każda właściwość faktycznie Zwraca wystąpienie klasy anonimowe, która jest pochodną <xref:System.StringComparer> klasy.</span><span class="sxs-lookup"><span data-stu-id="1df25-111">You can call a <xref:System.StringComparer> property directly because each property actually returns an instance of an anonymous class that is derived from the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="1df25-112">W rezultacie jest typ wartości właściwości <xref:System.StringComparer>, który nie jest klasa podstawowa klasy anonimowego typu anonimowego klasy sam.</span><span class="sxs-lookup"><span data-stu-id="1df25-112">Consequently, the type of each property value is <xref:System.StringComparer>, which is the base class of the anonymous class, not the type of the anonymous class itself.</span></span> <span data-ttu-id="1df25-113">Każdy <xref:System.StringComparer> klasy zwraca <xref:System.StringComparer> obiekt, który obsługuje wstępnie zdefiniowanych reguł wielkość liter i porównania.</span><span class="sxs-lookup"><span data-stu-id="1df25-113">Each <xref:System.StringComparer> class property returns a <xref:System.StringComparer> object that supports predefined case and comparison rules.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1df25-114">W poniższym przykładzie pokazano właściwości i <xref:System.StringComparer.Create%2A> metody <xref:System.StringComparer> klasy.</span><span class="sxs-lookup"><span data-stu-id="1df25-114">The following example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="1df25-115">Pokazano w przykładzie różnych <xref:System.StringComparer> obiektów sortowania trzy wersje Latin litera I.</span><span class="sxs-lookup"><span data-stu-id="1df25-115">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.String" />
    <altmember cref="T:System.Globalization.CompareOptions" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected StringComparer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; StringComparer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1df25-116">Inicjuje nowe wystąpienie klasy <see cref="T:System.StringComparer" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="1df25-116">Initializes a new instance of the <see cref="T:System.StringComparer" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Compare">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1df25-117">Porównuje dwa obiekty lub ciągi i zwraca wskazanie ich kolejność sortowania względną.</span><span class="sxs-lookup"><span data-stu-id="1df25-117">Compares two objects or strings and returns an indication of their relative sort order.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public int Compare (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Compare(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Compare (x As Object, y As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::Object ^ x, System::Object ^ y);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IComparer.Compare(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="1df25-118">Obiekt do porównania <c>y</c>.</span><span class="sxs-lookup"><span data-stu-id="1df25-118">An object to compare to <c>y</c>.</span></span></param>
        <param name="y"><span data-ttu-id="1df25-119">Obiekt do porównania <c>x</c>.</span><span class="sxs-lookup"><span data-stu-id="1df25-119">An object to compare to <c>x</c>.</span></span></param>
        <summary><span data-ttu-id="1df25-120">W przypadku przesłonięcia w klasie pochodnej, porównuje dwa obiekty i zwraca wskazanie ich kolejność sortowania względną.</span><span class="sxs-lookup"><span data-stu-id="1df25-120">When overridden in a derived class, compares two objects and returns an indication of their relative sort order.</span></span></summary>
        <returns><span data-ttu-id="1df25-121">Całkowita wskazująca wartości <paramref name="x" /> i <paramref name="y" />, jak pokazano w poniższej tabeli.</span><span class="sxs-lookup"><span data-stu-id="1df25-121">A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="1df25-122"><list type="table"><listheader><term> Wartość</span><span class="sxs-lookup"><span data-stu-id="1df25-122"><list type="table"><listheader><term> Value</span></span>  
  
 <span data-ttu-id="1df25-123"></term><description> Znaczenie</span><span class="sxs-lookup"><span data-stu-id="1df25-123"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="1df25-124"></description></listheader><item><term> Mniejsza od zera.</span><span class="sxs-lookup"><span data-stu-id="1df25-124"></description></listheader><item><term> Less than zero</span></span>  
  
 <span data-ttu-id="1df25-125"></term><description><paramref name="x" /> poprzedza <paramref name="y" /> w kolejności sortowania.</span><span class="sxs-lookup"><span data-stu-id="1df25-125"></term><description><paramref name="x" /> precedes  <paramref name="y" /> in the sort order.</span></span>  
  
 <span data-ttu-id="1df25-126">—lub—</span><span class="sxs-lookup"><span data-stu-id="1df25-126">-or-</span></span>  
  
 <span data-ttu-id="1df25-127"><paramref name="x" /> jest <see langword="null" /> i <paramref name="y" /> nie jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="1df25-127"><paramref name="x" /> is <see langword="null" /> and <paramref name="y" /> is not <see langword="null" />.</span></span>  
  
 <span data-ttu-id="1df25-128"></description></item><item><term> Zero</span><span class="sxs-lookup"><span data-stu-id="1df25-128"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="1df25-129"></term><description><paramref name="x" /> jest równa <paramref name="y" />.</span><span class="sxs-lookup"><span data-stu-id="1df25-129"></term><description><paramref name="x" /> is equal to <paramref name="y" />.</span></span>  
  
 <span data-ttu-id="1df25-130">—lub—</span><span class="sxs-lookup"><span data-stu-id="1df25-130">-or-</span></span>  
  
 <span data-ttu-id="1df25-131"><paramref name="x" /> i <paramref name="y" /> są <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="1df25-131"><paramref name="x" /> and <paramref name="y" /> are both <see langword="null" />.</span></span>  
  
 <span data-ttu-id="1df25-132"></description></item><item><term> Większa niż zero</span><span class="sxs-lookup"><span data-stu-id="1df25-132"></description></item><item><term> Greater than zero</span></span>  
  
 <span data-ttu-id="1df25-133"></term><description><paramref name="x" /> następuje <paramref name="y" /> w kolejności sortowania.</span><span class="sxs-lookup"><span data-stu-id="1df25-133"></term><description><paramref name="x" /> follows <paramref name="y" /> in the sort order.</span></span>  
  
 <span data-ttu-id="1df25-134">—lub—</span><span class="sxs-lookup"><span data-stu-id="1df25-134">-or-</span></span>  
  
 <span data-ttu-id="1df25-135"><paramref name="y" /> jest <see langword="null" /> i <paramref name="x" /> nie jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="1df25-135"><paramref name="y" /> is <see langword="null" /> and <paramref name="x" /> is not <see langword="null" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1df25-136"><xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> Jest nieco bardziej wydajna niż metoda <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType> metody ponieważ konwersja `x` i `y` argumentów jest potrzebne do porównania.</span><span class="sxs-lookup"><span data-stu-id="1df25-136">The <xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> method is slightly more efficient than the <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType> method because no conversion of the `x` and `y` arguments is needed to perform the comparison.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1df25-137">Ani <paramref name="x" /> ani <paramref name="y" /> jest <see cref="T:System.String" /> obiektu, a nie <paramref name="x" /> ani <paramref name="y" /> implementuje <see cref="T:System.IComparable" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="1df25-137">Neither <paramref name="x" /> nor <paramref name="y" /> is a <see cref="T:System.String" /> object, and neither <paramref name="x" /> nor <paramref name="y" /> implements the <see cref="T:System.IComparable" /> interface.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public abstract int Compare (string x, string y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string x, string y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Compare(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Compare (x As String, y As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int Compare(System::String ^ x, System::String ^ y);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IComparer`1.Compare(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.String" />
        <Parameter Name="y" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="1df25-138">Ciąg do porównania <c>y</c>.</span><span class="sxs-lookup"><span data-stu-id="1df25-138">A string to compare to <c>y</c>.</span></span></param>
        <param name="y"><span data-ttu-id="1df25-139">Ciąg do porównania <c>x</c>.</span><span class="sxs-lookup"><span data-stu-id="1df25-139">A string to compare to <c>x</c>.</span></span></param>
        <summary><span data-ttu-id="1df25-140">W przypadku przesłonięcia w klasie pochodnej, porównuje dwa ciągi i zwraca wskazanie ich kolejność sortowania względną.</span><span class="sxs-lookup"><span data-stu-id="1df25-140">When overridden in a derived class, compares two strings and returns an indication of their relative sort order.</span></span></summary>
        <returns><span data-ttu-id="1df25-141">Całkowita wskazująca wartości <paramref name="x" /> i <paramref name="y" />, jak pokazano w poniższej tabeli.</span><span class="sxs-lookup"><span data-stu-id="1df25-141">A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="1df25-142"><list type="table"><listheader><term> Wartość</span><span class="sxs-lookup"><span data-stu-id="1df25-142"><list type="table"><listheader><term> Value</span></span>  
  
 <span data-ttu-id="1df25-143"></term><description> Znaczenie</span><span class="sxs-lookup"><span data-stu-id="1df25-143"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="1df25-144"></description></listheader><item><term> Mniejsza od zera.</span><span class="sxs-lookup"><span data-stu-id="1df25-144"></description></listheader><item><term> Less than zero</span></span>  
  
 <span data-ttu-id="1df25-145"></term><description><paramref name="x" /> poprzedza <paramref name="y" /> w kolejności sortowania.</span><span class="sxs-lookup"><span data-stu-id="1df25-145"></term><description><paramref name="x" /> precedes <paramref name="y" /> in the sort order.</span></span>  
  
 <span data-ttu-id="1df25-146">—lub—</span><span class="sxs-lookup"><span data-stu-id="1df25-146">-or-</span></span>  
  
 <span data-ttu-id="1df25-147"><paramref name="x" /> jest <see langword="null" /> i <paramref name="y" /> nie jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="1df25-147"><paramref name="x" /> is <see langword="null" /> and <paramref name="y" /> is not <see langword="null" />.</span></span>  
  
 <span data-ttu-id="1df25-148"></description></item><item><term> Zero</span><span class="sxs-lookup"><span data-stu-id="1df25-148"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="1df25-149"></term><description><paramref name="x" /> jest równa <paramref name="y" />.</span><span class="sxs-lookup"><span data-stu-id="1df25-149"></term><description><paramref name="x" /> is equal to <paramref name="y" />.</span></span>  
  
 <span data-ttu-id="1df25-150">—lub—</span><span class="sxs-lookup"><span data-stu-id="1df25-150">-or-</span></span>  
  
 <span data-ttu-id="1df25-151"><paramref name="x" /> i <paramref name="y" /> są <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="1df25-151"><paramref name="x" /> and <paramref name="y" /> are both <see langword="null" />.</span></span>  
  
 <span data-ttu-id="1df25-152"></description></item><item><term> Większa niż zero</span><span class="sxs-lookup"><span data-stu-id="1df25-152"></description></item><item><term> Greater than zero</span></span>  
  
 <span data-ttu-id="1df25-153"></term><description><paramref name="x" /> następuje <paramref name="y" /> w kolejności sortowania.</span><span class="sxs-lookup"><span data-stu-id="1df25-153"></term><description><paramref name="x" /> follows <paramref name="y" /> in the sort order.</span></span>  
  
 <span data-ttu-id="1df25-154">—lub—</span><span class="sxs-lookup"><span data-stu-id="1df25-154">-or-</span></span>  
  
 <span data-ttu-id="1df25-155"><paramref name="y" /> jest <see langword="null" /> i <paramref name="x" /> nie jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="1df25-155"><paramref name="y" /> is <see langword="null" /> and <paramref name="x" /> is not <see langword="null" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1df25-156"><xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> Jest nieco bardziej wydajna niż metoda <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType> metody ponieważ konwersja `x` i `y` argumentów jest potrzebne do porównania.</span><span class="sxs-lookup"><span data-stu-id="1df25-156">The <xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> method is slightly more efficient than the <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType> method because no conversion of the `x` and `y` arguments is needed to perform the comparison.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static StringComparer Create (System.Globalization.CultureInfo culture, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.StringComparer Create(class System.Globalization.CultureInfo culture, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (culture As CultureInfo, ignoreCase As Boolean) As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static StringComparer ^ Create(System::Globalization::CultureInfo ^ culture, bool ignoreCase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="1df25-157">Kultura, których językowe zasady są używane do przeprowadzenia porównania ciągów.</span><span class="sxs-lookup"><span data-stu-id="1df25-157">A culture whose linguistic rules are used to perform a string comparison.</span></span></param>
        <param name="ignoreCase">
          <span data-ttu-id="1df25-158"><see langword="true" /> Aby określić operacje porównania bez uwzględniania wielkości liter; <see langword="false" /> Aby określić, że porównanie operacje być uwzględniana wielkość liter.</span><span class="sxs-lookup"><span data-stu-id="1df25-158"><see langword="true" /> to specify that comparison operations be case-insensitive; <see langword="false" /> to specify that comparison operations be case-sensitive.</span></span></param>
        <summary><span data-ttu-id="1df25-159">Tworzy <see cref="T:System.StringComparer" /> obiekt, który porównuje ciągi zgodnie z regułami określonej kultury.</span><span class="sxs-lookup"><span data-stu-id="1df25-159">Creates a <see cref="T:System.StringComparer" /> object that compares strings according to the rules of a specified culture.</span></span></summary>
        <returns><span data-ttu-id="1df25-160">Nowy <see cref="T:System.StringComparer" /> obiekt, który wykonuje porównania ciągu zgodnie z regułami porównania używane przez <paramref name="culture" /> parametr i wielkość określona przez reguła <paramref name="ignoreCase" /> parametru.</span><span class="sxs-lookup"><span data-stu-id="1df25-160">A new <see cref="T:System.StringComparer" /> object that performs string comparisons according to the comparison rules used by the <paramref name="culture" /> parameter and the case rule specified by the <paramref name="ignoreCase" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1df25-161">Poniższy przykład kodu pokazuje właściwości i <xref:System.StringComparer.Create%2A> metody <xref:System.StringComparer> klasy.</span><span class="sxs-lookup"><span data-stu-id="1df25-161">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="1df25-162">Pokazano w przykładzie różnych <xref:System.StringComparer> obiektów sortowania trzy wersje Latin litera I.</span><span class="sxs-lookup"><span data-stu-id="1df25-162">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1df25-163"><paramref name="culture" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="1df25-163"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static StringComparer Create (System.Globalization.CultureInfo culture, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.StringComparer Create(class System.Globalization.CultureInfo culture, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (culture As CultureInfo, options As CompareOptions) As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static StringComparer ^ Create(System::Globalization::CultureInfo ^ culture, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="culture">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentCulture">
      <MemberSignature Language="C#" Value="public static StringComparer CurrentCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer CurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.CurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentCulture As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ CurrentCulture { StringComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1df25-164">Pobiera <see cref="T:System.StringComparer" /> obiekt, który wykonuje porównanie ciągu z uwzględnieniem wielkości liter, przy użyciu reguł porównania word bieżącej kultury.</span><span class="sxs-lookup"><span data-stu-id="1df25-164">Gets a <see cref="T:System.StringComparer" /> object that performs a case-sensitive string comparison using the word comparison rules of the current culture.</span></span></summary>
        <value><span data-ttu-id="1df25-165">Nowy <see cref="T:System.StringComparer" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="1df25-165">A new <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1df25-166"><xref:System.StringComparer> Zwrócony przez <xref:System.StringComparer.CurrentCulture%2A> właściwość może być używana, gdy zależnej istotnych ciągów.</span><span class="sxs-lookup"><span data-stu-id="1df25-166">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.CurrentCulture%2A> property can be used when strings are linguistically relevant.</span></span> <span data-ttu-id="1df25-167">Na przykład jeśli ciągi są wyświetlane dla użytkownika lub jeśli ciągi są wyniku interakcji z użytkownikiem, porównanie ciągu z uwzględnieniem kultury powinien służyć do kolejność danych ciągu.</span><span class="sxs-lookup"><span data-stu-id="1df25-167">For example, if strings are displayed to the user, or if strings are the result of user interaction, culture-sensitive string comparison should be used to order the string data.</span></span>  
  
 <span data-ttu-id="1df25-168">Bieżąca kultura jest <xref:System.Globalization.CultureInfo> obiekt skojarzony z bieżącego wątku.</span><span class="sxs-lookup"><span data-stu-id="1df25-168">The current culture is the <xref:System.Globalization.CultureInfo> object associated with the current thread.</span></span>  
  
 <span data-ttu-id="1df25-169"><xref:System.StringComparer.CurrentCulture%2A> Właściwość faktycznie Zwraca wystąpienie klasy anonimowe pochodzące z <xref:System.StringComparer> klasy.</span><span class="sxs-lookup"><span data-stu-id="1df25-169">The <xref:System.StringComparer.CurrentCulture%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
 <span data-ttu-id="1df25-170">Każde wywołanie <xref:System.StringComparer.CurrentCulture%2A> właściwości `get` akcesor zwraca nową <xref:System.StringComparer> obiektu, jak przedstawiono na poniższym kodem.</span><span class="sxs-lookup"><span data-stu-id="1df25-170">Each call to the <xref:System.StringComparer.CurrentCulture%2A> property `get` accessor returns a new <xref:System.StringComparer> object, as the following code shows.</span></span>  
  
 [!code-csharp[System.StringComparer.CurrentCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/cs/CompareObjects.cs#1)]
 [!code-vb[System.StringComparer.CurrentCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/vb/CompareObjects.vb#1)]  
  
 <span data-ttu-id="1df25-171">Aby zwiększyć wydajność, można przechowywać <xref:System.StringComparer> obiekt w zmiennej lokalnej, a nie pobrać wartość <xref:System.StringComparer.CurrentCulture%2A> właściwości wiele razy.</span><span class="sxs-lookup"><span data-stu-id="1df25-171">To improve performance, you can store the <xref:System.StringComparer> object in a local variable rather than retrieve the value of the <xref:System.StringComparer.CurrentCulture%2A> property multiple times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1df25-172">Poniższy przykład kodu pokazuje właściwości i <xref:System.StringComparer.Create%2A> metody <xref:System.StringComparer> klasy.</span><span class="sxs-lookup"><span data-stu-id="1df25-172">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="1df25-173">Pokazano w przykładzie różnych <xref:System.StringComparer> obiektów sortowania trzy wersje Latin litera I.</span><span class="sxs-lookup"><span data-stu-id="1df25-173">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentCultureIgnoreCase">
      <MemberSignature Language="C#" Value="public static StringComparer CurrentCultureIgnoreCase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer CurrentCultureIgnoreCase" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.CurrentCultureIgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentCultureIgnoreCase As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ CurrentCultureIgnoreCase { StringComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1df25-174">Pobiera <see cref="T:System.StringComparer" /> obiekt, który wykonuje porównania bez uwzględniania wielkości liter ciągu przy użyciu reguł porównania word bieżącej kultury.</span><span class="sxs-lookup"><span data-stu-id="1df25-174">Gets a <see cref="T:System.StringComparer" /> object that performs case-insensitive string comparisons using the word comparison rules of the current culture.</span></span></summary>
        <value><span data-ttu-id="1df25-175">Nowy <see cref="T:System.StringComparer" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="1df25-175">A new <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1df25-176">Bieżąca kultura jest <xref:System.Globalization.CultureInfo> obiekt skojarzony z bieżącego wątku.</span><span class="sxs-lookup"><span data-stu-id="1df25-176">The current culture is the <xref:System.Globalization.CultureInfo> object associated with the current thread.</span></span>  
  
 <span data-ttu-id="1df25-177"><xref:System.StringComparer> Zwrócony przez <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> podczas zależnej istotnych ciągów, ale ich przypadku nie można użyć właściwości.</span><span class="sxs-lookup"><span data-stu-id="1df25-177">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property can be used when strings are linguistically relevant but their case is not.</span></span> <span data-ttu-id="1df25-178">Na przykład jeśli ciągi są wyświetlane dla użytkownika, ale wielkość liter jest bez znaczenia, zależne od kultury, porównania bez uwzględniania wielkości liter ciąg powinien służyć do kolejność danych ciągu.</span><span class="sxs-lookup"><span data-stu-id="1df25-178">For example, if strings are displayed to the user but case is unimportant, culture-sensitive, case-insensitive string comparison should be used to order the string data.</span></span>  
  
 <span data-ttu-id="1df25-179"><xref:System.StringComparer.CurrentCultureIgnoreCase%2A> Właściwość faktycznie Zwraca wystąpienie klasy anonimowe pochodzące z <xref:System.StringComparer> klasy.</span><span class="sxs-lookup"><span data-stu-id="1df25-179">The <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
 <span data-ttu-id="1df25-180">Każde wywołanie <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> właściwości `get` akcesor zwraca nową <xref:System.StringComparer> obiektu, jak przedstawiono na poniższym kodem.</span><span class="sxs-lookup"><span data-stu-id="1df25-180">Each call to the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property `get` accessor returns a new <xref:System.StringComparer> object, as the following code shows.</span></span>  
  
 [!code-csharp[System.StringComparer.CurrentCulture#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/cs/CompareObjects.cs#2)]
 [!code-vb[System.StringComparer.CurrentCulture#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/vb/CompareObjects.vb#2)]  
  
 <span data-ttu-id="1df25-181">Aby zwiększyć wydajność, można przechowywać <xref:System.StringComparer> obiekt w zmiennej lokalnej, a nie pobrać wartość <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> właściwości wiele razy.</span><span class="sxs-lookup"><span data-stu-id="1df25-181">To improve performance, you can store the <xref:System.StringComparer> object in a local variable rather than retrieve the value of the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property multiple times.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1df25-182">W przypadku przesłonięcia w klasie pochodnej, wskazuje, czy dwa obiekty lub ciągi są takie same.</span><span class="sxs-lookup"><span data-stu-id="1df25-182">When overridden in a derived class, indicates whether two objects or strings are equal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Equals(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (x As Object, y As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Object ^ x, System::Object ^ y);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="1df25-183">Obiekt do porównania <c>y</c>.</span><span class="sxs-lookup"><span data-stu-id="1df25-183">An object to compare to <c>y</c>.</span></span></param>
        <param name="y"><span data-ttu-id="1df25-184">Obiekt do porównania <c>x</c>.</span><span class="sxs-lookup"><span data-stu-id="1df25-184">An object to compare to <c>x</c>.</span></span></param>
        <summary><span data-ttu-id="1df25-185">W przypadku przesłonięcia w klasie pochodnej, wskazuje, czy dwa obiekty są takie same.</span><span class="sxs-lookup"><span data-stu-id="1df25-185">When overridden in a derived class, indicates whether two objects are equal.</span></span></summary>
        <returns>
          <span data-ttu-id="1df25-186"><see langword="true" /> Jeśli <paramref name="x" /> i <paramref name="y" /> odwoływać się do tego samego obiektu lub <paramref name="x" /> i <paramref name="y" /> są obie tego samego typu obiektu i te obiekty są takie same, lub obie <paramref name="x" /> i <paramref name="y" /> są <see langword="null" />; w przeciwnym razie <see langword="false" /> .</span><span class="sxs-lookup"><span data-stu-id="1df25-186"><see langword="true" /> if <paramref name="x" /> and <paramref name="y" /> refer to the same object, or <paramref name="x" /> and <paramref name="y" /> are both the same type of object and those objects are equal, or both <paramref name="x" /> and <paramref name="y" /> are <see langword="null" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1df25-187">Ponieważ środowisko uruchomieniowe nie trzeba unbox — `x` lub `y` typów wartości lub spróbować do przypisanie elementu podrzędnego `x` lub `y` do ciągów, jeśli są one typy referencyjne <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> metoda może być nieco bardziej efektywne niż <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> metody.</span><span class="sxs-lookup"><span data-stu-id="1df25-187">Because the runtime does not have to unbox `x` or `y` if they are value types or attempt to downcast `x` or `y` to strings if they are reference types, the <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> method may be slightly more efficient than the <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public abstract bool Equals (string x, string y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(string x, string y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Equals(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Equals (x As String, y As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Equals(System::String ^ x, System::String ^ y);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.String" />
        <Parameter Name="y" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="1df25-188">Ciąg do porównania <c>y</c>.</span><span class="sxs-lookup"><span data-stu-id="1df25-188">A string to compare to <c>y</c>.</span></span></param>
        <param name="y"><span data-ttu-id="1df25-189">Ciąg do porównania <c>x</c>.</span><span class="sxs-lookup"><span data-stu-id="1df25-189">A string to compare to <c>x</c>.</span></span></param>
        <summary><span data-ttu-id="1df25-190">W przypadku przesłonięcia w klasie pochodnej, wskazuje, czy dwa ciągi są takie same.</span><span class="sxs-lookup"><span data-stu-id="1df25-190">When overridden in a derived class, indicates whether two strings are equal.</span></span></summary>
        <returns>
          <span data-ttu-id="1df25-191"><see langword="true" /> Jeśli <paramref name="x" /> i <paramref name="y" /> odwoływać się do tego samego obiektu lub <paramref name="x" /> i <paramref name="y" /> są takie same, lub <paramref name="x" /> i <paramref name="y" /> są <see langword="null" />; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1df25-191"><see langword="true" /> if <paramref name="x" /> and <paramref name="y" /> refer to the same object, or <paramref name="x" /> and <paramref name="y" /> are equal, or <paramref name="x" /> and <paramref name="y" /> are <see langword="null" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1df25-192">Ponieważ środowisko uruchomieniowe nie trzeba unbox — `x` lub `y` typów wartości lub spróbować do przypisanie elementu podrzędnego `x` lub `y` do ciągów, jeśli są one typy referencyjne <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> metoda może być nieco bardziej efektywne niż <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> metody.</span><span class="sxs-lookup"><span data-stu-id="1df25-192">Because the runtime does not have to unbox `x` or `y` if they are value types or attempt to downcast `x` or `y` to strings if they are reference types, the <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> method may be slightly more efficient than the <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromComparison">
      <MemberSignature Language="C#" Value="public static StringComparer FromComparison (StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.StringComparer FromComparison(valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.FromComparison(System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromComparison (comparisonType As StringComparison) As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static StringComparer ^ FromComparison(StringComparison comparisonType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="comparisonType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetHashCode">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1df25-193">W przypadku przesłonięcia w klasie pochodnej pobiera wartość skrótu dla bieżącego <see cref="T:System.StringComparer" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="1df25-193">When overridden in a derived class, gets the hash code for the current <see cref="T:System.StringComparer" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public int GetHashCode (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.GetHashCode(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHashCode (obj As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetHashCode(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.GetHashCode(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="1df25-194">Obiekt.</span><span class="sxs-lookup"><span data-stu-id="1df25-194">An object.</span></span></param>
        <summary><span data-ttu-id="1df25-195">W przypadku przesłonięcia w klasie pochodnej pobiera wartość skrótu dla określonego obiektu.</span><span class="sxs-lookup"><span data-stu-id="1df25-195">When overridden in a derived class, gets the hash code for the specified object.</span></span></summary>
        <returns><span data-ttu-id="1df25-196">32-bitowej podpisanej skrótu obliczana na podstawie wartości <paramref name="obj" /> parametru.</span><span class="sxs-lookup"><span data-stu-id="1df25-196">A 32-bit signed hash code calculated from the value of the <paramref name="obj" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1df25-197"><xref:System.StringComparer.GetHashCode%28System.String%29> Jest bardziej wydajna niż metoda <xref:System.StringComparer.GetHashCode%2A> metody ponieważ `obj` parametru nie musi być rozpakowany do wykonania tej operacji.</span><span class="sxs-lookup"><span data-stu-id="1df25-197">The <xref:System.StringComparer.GetHashCode%28System.String%29> method is more efficient than the <xref:System.StringComparer.GetHashCode%2A> method because the `obj` parameter does not have to be unboxed to perform the operation.</span></span>  
  
 <span data-ttu-id="1df25-198"><xref:System.StringComparer.GetHashCode%28System.Object%29> Metody przydziela ilość pamięci, która jest proporcjonalny do rozmiaru `obj` do obliczania skrótu `obj`.</span><span class="sxs-lookup"><span data-stu-id="1df25-198">The <xref:System.StringComparer.GetHashCode%28System.Object%29> method allocates an amount of memory that is proportional to the size of `obj` to calculate the hash code of `obj`.</span></span> <span data-ttu-id="1df25-199">W przypadku dużych ciągów próby pobrania skrótu może zgłosić <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="1df25-199">In the case of large strings, trying to retrieve the hash code can throw an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="1df25-200">Zamiast tego można użyć alternatywnego algorytmu, który przydziela stałej ilości pamięci podczas obliczania skrótu.</span><span class="sxs-lookup"><span data-stu-id="1df25-200">Instead, you can use an alternate algorithm that allocates a fixed amount of memory when calculating hash codes.</span></span> <span data-ttu-id="1df25-201">Aby używać tego algorytmu, Dodaj [< netfx45_cultureawarecomparergethashcode_longstrings — >](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) elementu [ \<runtime >](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) sekcji pliku konfiguracji aplikacji.</span><span class="sxs-lookup"><span data-stu-id="1df25-201">To use this algorithm, add the [<NetFx45_CultureAwareComparerGetHashCode_LongStrings>](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) element to the [\<runtime>](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of your application's configuration file.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1df25-202">Dostępne do alokacji buforu, który jest wymagany do Oblicz wartość skrótu jest za mało pamięci.</span><span class="sxs-lookup"><span data-stu-id="1df25-202">Not enough memory is available to allocate the buffer that is required to compute the hash code.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1df25-203"><paramref name="obj" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="1df25-203"><paramref name="obj" /> is <see langword="null" />.</span></span></exception>
        <exception cref="  &#xA;            T:System.ArgumentException"><span data-ttu-id="1df25-204">Dostępne do alokacji buforu, który jest wymagany do Oblicz wartość skrótu jest za mało pamięci.</span><span class="sxs-lookup"><span data-stu-id="1df25-204">Not enough memory is available to allocate the buffer that is required to compute the hash code.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public abstract int GetHashCode (string obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(string obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.GetHashCode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetHashCode (obj As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetHashCode(System::String ^ obj);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="1df25-205">Ciąg.</span><span class="sxs-lookup"><span data-stu-id="1df25-205">A string.</span></span></param>
        <summary><span data-ttu-id="1df25-206">W przypadku przesłonięcia w klasie pochodnej pobiera wartość skrótu dla określonego ciągu.</span><span class="sxs-lookup"><span data-stu-id="1df25-206">When overridden in a derived class, gets the hash code for the specified string.</span></span></summary>
        <returns><span data-ttu-id="1df25-207">32-bitowej podpisanej skrótu obliczana na podstawie wartości <paramref name="obj" /> parametru.</span><span class="sxs-lookup"><span data-stu-id="1df25-207">A 32-bit signed hash code calculated from the value of the <paramref name="obj" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1df25-208"><xref:System.StringComparer.GetHashCode%28System.String%29> Jest bardziej wydajna niż metoda <xref:System.StringComparer.GetHashCode%28System.Object%29> metody ponieważ `obj` parametru nie musi być rozpakowany do wykonania tej operacji.</span><span class="sxs-lookup"><span data-stu-id="1df25-208">The <xref:System.StringComparer.GetHashCode%28System.String%29> method is more efficient than the <xref:System.StringComparer.GetHashCode%28System.Object%29> method because the `obj` parameter does not have to be unboxed to perform the operation.</span></span>  
  
 <span data-ttu-id="1df25-209"><xref:System.StringComparer.GetHashCode%28System.String%29> Metody przydziela ilość pamięci, która jest proporcjonalny do rozmiaru `obj` do obliczania skrótu `obj`.</span><span class="sxs-lookup"><span data-stu-id="1df25-209">The <xref:System.StringComparer.GetHashCode%28System.String%29> method allocates an amount of memory that is proportional to the size of `obj` to calculate the hash code of `obj`.</span></span> <span data-ttu-id="1df25-210">W przypadku dużych ciągów próby pobrania skrótu może zgłosić <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="1df25-210">In the case of large strings, trying to retrieve the hash code can throw an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="1df25-211">Zamiast tego można użyć alternatywnego algorytmu, który przydziela stałej ilości pamięci podczas obliczania skrótu.</span><span class="sxs-lookup"><span data-stu-id="1df25-211">Instead, you can use an alternate algorithm that allocates a fixed amount of memory when calculating hash codes.</span></span> <span data-ttu-id="1df25-212">Aby używać tego algorytmu, Dodaj [< netfx45_cultureawarecomparergethashcode_longstrings — >](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) elementu [ \<runtime >](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) sekcji pliku konfiguracji aplikacji.</span><span class="sxs-lookup"><span data-stu-id="1df25-212">To use this algorithm, add the [<NetFx45_CultureAwareComparerGetHashCode_LongStrings>](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) element to the [\<runtime>](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of your application's configuration file.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1df25-213">Dostępne do alokacji buforu, który jest wymagany do Oblicz wartość skrótu jest za mało pamięci.</span><span class="sxs-lookup"><span data-stu-id="1df25-213">Not enough memory is available to allocate the buffer that is required to compute the hash code.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1df25-214"><paramref name="obj" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="1df25-214"><paramref name="obj" /> is <see langword="null" />.</span></span></exception>
        <exception cref="  &#xA;            T:System.ArgumentException"><span data-ttu-id="1df25-215">Dostępne do alokacji buforu, który jest wymagany do Oblicz wartość skrótu jest za mało pamięci.</span><span class="sxs-lookup"><span data-stu-id="1df25-215">Not enough memory is available to allocate the buffer that is required to compute the hash code.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="InvariantCulture">
      <MemberSignature Language="C#" Value="public static StringComparer InvariantCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer InvariantCulture" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.InvariantCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantCulture As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ InvariantCulture { StringComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1df25-216">Pobiera <see cref="T:System.StringComparer" /> obiekt, który przeprowadza porównanie ciągu z uwzględnieniem wielkości liter przy użyciu reguł porównania word Niezmienna kultura.</span><span class="sxs-lookup"><span data-stu-id="1df25-216">Gets a <see cref="T:System.StringComparer" /> object that performs a case-sensitive string comparison using the word comparison rules of the invariant culture.</span></span></summary>
        <value><span data-ttu-id="1df25-217">Nowy <see cref="T:System.StringComparer" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="1df25-217">A new <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1df25-218"><xref:System.StringComparer> Zwrócony przez <xref:System.StringComparer.InvariantCulture%2A> właściwości porównuje ciągi w sposób zależnej istotne, ale nie nadaje się do wyświetlenia w dowolnej określonej kultury.</span><span class="sxs-lookup"><span data-stu-id="1df25-218">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.InvariantCulture%2A> property compares strings in a linguistically relevant manner, but it is not suitable for display in any particular culture.</span></span> <span data-ttu-id="1df25-219">Jego najważniejszych aplikacji jest kolejności ciągów w taki sposób, który musi być taka sama we kultur.</span><span class="sxs-lookup"><span data-stu-id="1df25-219">Its major application is to order strings in a way that will be identical across cultures.</span></span>  
  
 <span data-ttu-id="1df25-220">Niezmienna kultura jest <xref:System.Globalization.CultureInfo> obiektu zwróconego przez <xref:System.Globalization.CultureInfo.InvariantCulture%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="1df25-220">The invariant culture is the <xref:System.Globalization.CultureInfo> object returned by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property.</span></span>  
  
 <span data-ttu-id="1df25-221"><xref:System.StringComparer.InvariantCulture%2A> Właściwość faktycznie Zwraca wystąpienie klasy anonimowe pochodzące z <xref:System.StringComparer> klasy.</span><span class="sxs-lookup"><span data-stu-id="1df25-221">The <xref:System.StringComparer.InvariantCulture%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1df25-222">Poniższy przykład kodu pokazuje właściwości i <xref:System.StringComparer.Create%2A> metody <xref:System.StringComparer> klasy.</span><span class="sxs-lookup"><span data-stu-id="1df25-222">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="1df25-223">Pokazano w przykładzie różnych <xref:System.StringComparer> obiektów sortowania trzy wersje Latin litera I.</span><span class="sxs-lookup"><span data-stu-id="1df25-223">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvariantCultureIgnoreCase">
      <MemberSignature Language="C#" Value="public static StringComparer InvariantCultureIgnoreCase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer InvariantCultureIgnoreCase" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.InvariantCultureIgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantCultureIgnoreCase As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ InvariantCultureIgnoreCase { StringComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1df25-224">Pobiera <see cref="T:System.StringComparer" /> obiekt, który wykonuje porównania bez uwzględniania wielkości liter ciągów za pomocą zasad porównania word Niezmienna kultura.</span><span class="sxs-lookup"><span data-stu-id="1df25-224">Gets a <see cref="T:System.StringComparer" /> object that performs a case-insensitive string comparison using the word comparison rules of the invariant culture.</span></span></summary>
        <value><span data-ttu-id="1df25-225">Nowy <see cref="T:System.StringComparer" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="1df25-225">A new <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1df25-226"><xref:System.StringComparer> Zwrócony przez <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> właściwości porównuje ciągi w sposób zależnej odpowiednich ignoruje wielkość liter, ale nie nadaje się do wyświetlenia w dowolnej określonej kultury.</span><span class="sxs-lookup"><span data-stu-id="1df25-226">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> property compares strings in a linguistically relevant manner that ignores case, but it is not suitable for display in any particular culture.</span></span> <span data-ttu-id="1df25-227">Jego najważniejszych aplikacji jest kolejności ciągów w taki sposób, który musi być taka sama we kultur.</span><span class="sxs-lookup"><span data-stu-id="1df25-227">Its major application is to order strings in a way that will be identical across cultures.</span></span>  
  
 <span data-ttu-id="1df25-228">Niezmienna kultura jest <xref:System.Globalization.CultureInfo> obiektu zwróconego przez <xref:System.Globalization.CultureInfo.InvariantCulture%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="1df25-228">The invariant culture is the <xref:System.Globalization.CultureInfo> object returned by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property.</span></span>  
  
 <span data-ttu-id="1df25-229"><xref:System.StringComparer.InvariantCultureIgnoreCase%2A> Właściwość faktycznie Zwraca wystąpienie klasy anonimowe pochodzące z <xref:System.StringComparer> klasy.</span><span class="sxs-lookup"><span data-stu-id="1df25-229">The <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ordinal">
      <MemberSignature Language="C#" Value="public static StringComparer Ordinal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer Ordinal" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.Ordinal" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Ordinal As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ Ordinal { StringComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1df25-230">Pobiera <see cref="T:System.StringComparer" /> obiekt, który wykonuje porównania ciągów porządkowej z uwzględnieniem wielkości liter.</span><span class="sxs-lookup"><span data-stu-id="1df25-230">Gets a <see cref="T:System.StringComparer" /> object that performs a case-sensitive ordinal string comparison.</span></span></summary>
        <value><span data-ttu-id="1df25-231">A <see cref="T:System.StringComparer" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="1df25-231">A <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1df25-232"><xref:System.StringComparer> Zwrócony przez <xref:System.StringComparer.Ordinal%2A> właściwości wykonuje porównanie jednobajtowych, która jest niezależna od języka.</span><span class="sxs-lookup"><span data-stu-id="1df25-232">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.Ordinal%2A> property performs a simple byte comparison that is independent of language.</span></span> <span data-ttu-id="1df25-233">Jest to najbardziej odpowiednia w przypadku, gdy porównywanie ciągów, które są generowane programistycznie lub gdy porównanie z uwzględnieniem wielkości liter zasoby, takie jak hasła.</span><span class="sxs-lookup"><span data-stu-id="1df25-233">This is most appropriate when comparing strings that are generated programmatically or when comparing case-sensitive resources such as passwords.</span></span>  
  
 <span data-ttu-id="1df25-234"><xref:System.StringComparer.Ordinal%2A> Właściwość faktycznie Zwraca wystąpienie klasy anonimowe pochodzące z <xref:System.StringComparer> klasy.</span><span class="sxs-lookup"><span data-stu-id="1df25-234">The <xref:System.StringComparer.Ordinal%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1df25-235">Poniższy przykład kodu pokazuje właściwości i <xref:System.StringComparer.Create%2A> metody <xref:System.StringComparer> klasy.</span><span class="sxs-lookup"><span data-stu-id="1df25-235">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="1df25-236">Pokazano w przykładzie różnych <xref:System.StringComparer> obiektów sortowania trzy wersje Latin litera I.</span><span class="sxs-lookup"><span data-stu-id="1df25-236">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrdinalIgnoreCase">
      <MemberSignature Language="C#" Value="public static StringComparer OrdinalIgnoreCase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer OrdinalIgnoreCase" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.OrdinalIgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property OrdinalIgnoreCase As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ OrdinalIgnoreCase { StringComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1df25-237">Pobiera <see cref="T:System.StringComparer" /> obiektu, który wykonuje porównania ciągów porządkowych bez uwzględniania wielkości liter.</span><span class="sxs-lookup"><span data-stu-id="1df25-237">Gets a <see cref="T:System.StringComparer" /> object that performs a case-insensitive ordinal string comparison.</span></span></summary>
        <value><span data-ttu-id="1df25-238">A <see cref="T:System.StringComparer" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="1df25-238">A <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1df25-239"><xref:System.StringComparer> Zwrócony przez <xref:System.StringComparer.OrdinalIgnoreCase%2A> właściwości traktuje znaków w ciągach do porównania tak, jakby były one przekonwertowane na wielkie litery przy użyciu konwencji Niezmienna kultura, a następnie wykonuje porównania jednobajtowych, która jest niezależna od język.</span><span class="sxs-lookup"><span data-stu-id="1df25-239">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.OrdinalIgnoreCase%2A> property treats the characters in the strings to compare as if they were converted to uppercase using the conventions of the invariant culture, and then performs a simple byte comparison that is independent of language.</span></span> <span data-ttu-id="1df25-240">Jest to najbardziej odpowiednia w przypadku, gdy porównywanie ciągów, które są generowane programistycznie lub gdy porównywanie bez uwzględniania wielkości liter zasobów, takich jak ścieżki i nazwy plików.</span><span class="sxs-lookup"><span data-stu-id="1df25-240">This is most appropriate when comparing strings that are generated programmatically or when comparing case-insensitive resources such as paths and filenames.</span></span>  
  
 <span data-ttu-id="1df25-241"><xref:System.StringComparer.OrdinalIgnoreCase%2A> Właściwość faktycznie Zwraca wystąpienie klasy anonimowe pochodzące z <xref:System.StringComparer> klasy.</span><span class="sxs-lookup"><span data-stu-id="1df25-241">The <xref:System.StringComparer.OrdinalIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1df25-242">Poniższy przykład kodu pokazuje właściwości i <xref:System.StringComparer.Create%2A> metody <xref:System.StringComparer> klasy.</span><span class="sxs-lookup"><span data-stu-id="1df25-242">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="1df25-243">Pokazano w przykładzie różnych <xref:System.StringComparer> obiektów sortowania trzy wersje Latin litera I.</span><span class="sxs-lookup"><span data-stu-id="1df25-243">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IComparer.Compare">
      <MemberSignature Language="C#" Value="int IComparer.Compare (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IComparer.Compare(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.System#Collections#IComparer#Compare(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Compare (x As Object, y As Object) As Integer Implements IComparer.Compare" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IComparer.Compare(System::Object ^ x, System::Object ^ y) = System::Collections::IComparer::Compare;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IComparer.Compare(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEqualityComparer.Equals">
      <MemberSignature Language="C#" Value="bool IEqualityComparer.Equals (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IEqualityComparer.Equals(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (x As Object, y As Object) As Boolean Implements IEqualityComparer.Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IEqualityComparer.Equals(System::Object ^ x, System::Object ^ y) = System::Collections::IEqualityComparer::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEqualityComparer.GetHashCode">
      <MemberSignature Language="C#" Value="int IEqualityComparer.GetHashCode (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IEqualityComparer.GetHashCode(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function GetHashCode (obj As Object) As Integer Implements IEqualityComparer.GetHashCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IEqualityComparer.GetHashCode(System::Object ^ obj) = System::Collections::IEqualityComparer::GetHashCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.GetHashCode(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>