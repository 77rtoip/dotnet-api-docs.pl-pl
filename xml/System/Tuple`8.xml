<Type Name="Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;" FullName="System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="748dd4b2ec95cbd704aabcd790b51dc2d7fe169a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30744422" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt; : IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Tuple`8&lt;T1, T2, T3, T4, T5, T6, T7, TRest&gt; extends System.Object implements class System.Collections.IStructuralComparable, class System.Collections.IStructuralEquatable, class System.IComparable" />
  <TypeSignature Language="DocId" Value="T:System.Tuple`8" />
  <TypeSignature Language="VB.NET" Value="Public Class Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest)&#xA;Implements IComparable, IStructuralComparable, IStructuralEquatable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename TRest&gt;&#xA;public ref class Tuple : IComparable, System::Collections::IStructuralComparable, System::Collections::IStructuralEquatable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1" />
    <TypeParameter Name="T2" />
    <TypeParameter Name="T3" />
    <TypeParameter Name="T4" />
    <TypeParameter Name="T5" />
    <TypeParameter Name="T6" />
    <TypeParameter Name="T7" />
    <TypeParameter Name="TRest" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IStructuralComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IStructuralEquatable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T1">Typ pierwszego składnika spójnej kolekcji.</typeparam>
    <typeparam name="T2">Typ drugiego składnika spójnej kolekcji.</typeparam>
    <typeparam name="T3">Typ trzeciego składnika spójnej kolekcji.</typeparam>
    <typeparam name="T4">Typ czwartego składnika spójnej kolekcji.</typeparam>
    <typeparam name="T5">Typ piątego składnika spójnej kolekcji.</typeparam>
    <typeparam name="T6">Typ szóstego składnika spójnej kolekcji.</typeparam>
    <typeparam name="T7">Typ siódmego składnika spójnej kolekcji.</typeparam>
    <typeparam name="TRest">Wszelkie ogólny <see langword="Tuple" /> obiektu, który definiuje typy spójna kolekcja znajdująca się na pozostałych składników.</typeparam>
    <summary>Reprezentuje *n*- spójnej kolekcji, której *n* jest 8 lub nowszego.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Spójna kolekcja to struktura danych, która ma określoną liczbę i kolejność wartości. <xref:System.Tuple%608> Klasy reprezentuje *n*- krotki z co najmniej ośmiu składników.  
  
 Można utworzyć wystąpienia <xref:System.Tuple%608> obiektu o dokładnie osiem składników przez wywołanie metody statycznych <xref:System.Tuple.Create%2A?displayProperty=nameWithType> metody. Poniższy przykład tworzy 8-krotka (octuple) zawierający liczb pierwszych, które są mniej niż 20. Należy pamiętać, używa wnioskowanie o typie, aby określić typ każdego składnika.  
  
 [!code-csharp[System.Tuple.Create#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/createntuple.cs#17)]
 [!code-vb[System.Tuple.Create#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/createntuple.vb#17)]  
  
 Można również tworzenia wystąpienia obiektu spójnej kolekcji n z co najmniej ośmiu składników, wywołując <xref:System.Tuple%608.%23ctor%2A> konstruktora. W poniższym przykładzie użyto <xref:System.Tuple%608.%23ctor%2A> konstruktora w celu utworzenia krotka 8 odpowiada utworzony w poprzednim przykładzie spójnej kolekcji.  
  
 [!code-csharp[System.Tuple\`8.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.class/cs/octuple1.cs#1)]
 [!code-vb[System.Tuple\`8.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.class/vb/octuple1.vb#1)]  
  
> [!NOTE]
>  Aby utworzyć krotka n z dziewięciu lub więcej składników, należy wywołać <xref:System.Tuple%608.%23ctor%2A> konstruktora. Metody statyczne fabryki <xref:System.Tuple> klasa nie obsługuje tworzenia `Tuple` obiekty o więcej niż osiem składników.  
  
 Można utworzyć wystąpienia n krotka, która ma co najmniej osiem składników z <xref:System.Tuple%608.%23ctor%2A> konstruktora, podaj ogólnego `Tuple` obiekt jako `rest` parametr, aby zdefiniować ósmego za pośrednictwem *n*th składniki spójnej kolekcji. Przez zagnieżdżanie ogólnego `Tuple` obiektów w ten sposób można utworzyć spójnych kolekcji zawierający bez praktyczne ograniczenia liczby jego składniki.  
  
 Poniższy przykład tworzy krotka 17 zawierający dane populacji dla miasta z Detroit, Michigan, dla każdego national spisu z 1860 do 2000. Pierwszy składnik spójnej kolekcji jest nazwą miasta. Drugi składnik jest data rozpoczęcia serii danych, a trzeci składnik jest populacji na datę rozpoczęcia. Każdy składnik kolejnych zawiera populacji odstępach dekadę. 17 tuple jest tworzony przez zagnieżdżanie <xref:System.Tuple%603> obiektów wewnątrz <xref:System.Tuple%608> obiektu. (Czyli, <xref:System.Tuple%603> obiektu jest podana jako wartość `rest` parametru w <xref:System.Tuple%608> konstruktora klasy.) To <xref:System.Tuple%608> obiektu z kolei zagnieżdżone w zewnętrznym <xref:System.Tuple%608> obiektu. (To, <xref:System.Tuple%608> obiektu jest podana jako wartość `rest` parametru w zewnętrznego <xref:System.Tuple%608> konstruktora klasy obiektu.)  
  
 [!code-csharp[System.Tuple.Create#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/example.cs#19)]
 [!code-vb[System.Tuple.Create#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/example.vb#19)]  
  
 Można pobrać wartość krotki najpierw siedmiu składników za pomocą tylko do odczytu <xref:System.Tuple%607.Item1%2A>, <xref:System.Tuple%607.Item2%2A>, <xref:System.Tuple%607.Item3%2A>, <xref:System.Tuple%607.Item4%2A>, <xref:System.Tuple%607.Item5%2A>, <xref:System.Tuple%607.Item6%2A>, i <xref:System.Tuple%607.Item7%2A> wystąpienia właściwości. Dodatkowe składniki są zagnieżdżone i mogą być pobierane z <xref:System.Tuple%608.Rest%2A> właściwości. W poprzednim przykładzie <xref:System.Tuple%608.Item1%2A> za pośrednictwem <xref:System.Tuple%608.Item7%2A> właściwości pobrać od pierwszego siódmego składniki spójnej kolekcji. 8 za pomocą czternastego składniki znajdują się w spójnej kolekcji, która jest zagnieżdżona w drugiej a są reprezentowane przez `Rest.Item1` za pośrednictwem `Rest.Item7` właściwości. Piętnasta za pomocą siedemnasta składniki znajdują się w zagnieżdżonym na trzeci poziom spójnej kolekcji i są reprezentowane przez `Rest.Rest.Item1` chociaż `Rest.Rest.Item3` właściwości.  
  
 Spójne kolekcje są powszechnie wykorzystywane na cztery różne sposoby:  
  
-   Reprezentowanie jednego zestawu danych. Na przykład spójna kolekcja może reprezentować rekord bazy danych, a jej składniki mogą reprezentować poszczególne pola rekordu.  
  
-   Zapewnienie łatwego dostępu do zestawu danych i możliwości wykonywania w nim różnych operacji.  
  
-   Aby zwrócić wartości wielu z metody bez użycia `out` parametrów (C#) lub `ByRef` parametry (w języku Visual Basic). Na przykład poprzednim przykładzie zwraca jego obliczona statystyk, oraz nazwę miejscowości <xref:System.Tuple%607> obiektu.  
  
-   Przekazywanie wielu wartości do metody za pomocą jednego parametru. Na przykład <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> metoda ma jeden parametr, który pozwala na określanie jedną wartość do metody, która wykonuje wątek przy uruchamianiu. Jeśli podasz <xref:System.Tuple%607> obiekt jako argument metody, możesz podać procedury uruchomienia wątku z siedmiu elementów danych.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Tuple" />
    <altmember cref="T:System.Tuple`1" />
    <altmember cref="T:System.Tuple`2" />
    <altmember cref="T:System.Tuple`3" />
    <altmember cref="T:System.Tuple`4" />
    <altmember cref="T:System.Tuple`5" />
    <altmember cref="T:System.Tuple`6" />
    <altmember cref="T:System.Tuple`7" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Tuple (T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T1 item1, !T2 item2, !T3 item3, !T4 item4, !T5 item5, !T6 item6, !T7 item7, !TRest rest) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (item1 As T1, item2 As T2, item3 As T3, item4 As T4, item5 As T5, item6 As T6, item7 As T7, rest As TRest)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="item1" Type="T1" />
        <Parameter Name="item2" Type="T2" />
        <Parameter Name="item3" Type="T3" />
        <Parameter Name="item4" Type="T4" />
        <Parameter Name="item5" Type="T5" />
        <Parameter Name="item6" Type="T6" />
        <Parameter Name="item7" Type="T7" />
        <Parameter Name="rest" Type="TRest" />
      </Parameters>
      <Docs>
        <param name="item1">Wartość pierwszego składnika spójnej kolekcji.</param>
        <param name="item2">Wartość drugiego składnika spójnej kolekcji.</param>
        <param name="item3">Wartość trzeciego składnika spójnej kolekcji.</param>
        <param name="item4">Wartość czwartego składnika spójnej kolekcji.</param>
        <param name="item5">Wartość piątego składnika spójnej kolekcji.</param>
        <param name="item6">Wartość krotki szóstego składnika.</param>
        <param name="item7">Wartość krotki siódmego składnika.</param>
        <param name="rest">Wszelkie ogólny <see langword="Tuple" /> obiekt, który zawiera wartości spójna kolekcja znajdująca się na pozostałych składników.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Tuple`8" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można również użyć statycznych <xref:System.Tuple.Create%2A?displayProperty=nameWithType> metody do tworzenia wystąpienia obiektu 8-krotki (octuple) bez konieczności jawnego określania typów jego składniki. W poniższym przykładzie użyto <xref:System.Tuple.Create%2A?displayProperty=nameWithType> metody do tworzenia wystąpienia obiektu 8 krotka liczb pierwszych, które są mniej niż 20.  
  
 [!code-csharp[System.Tuple.Create#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/createntuple.cs#17)]
 [!code-vb[System.Tuple.Create#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/createntuple.vb#17)]  
  
 Jest to równoważne następujące wywołanie do <xref:System.Tuple%607.%23ctor%2A> konstruktora klasy.  
  
 [!code-csharp[System.Tuple\`8.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.class/cs/octuple1.cs#1)]
 [!code-vb[System.Tuple\`8.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.class/vb/octuple1.vb#1)]  
  
 Jednak statycznych <xref:System.Tuple.Create%2A?displayProperty=nameWithType> nie można użyć metody, aby utworzyć obiekt spójnej kolekcji o więcej niż osiem składników.  
  
 Korzystając z <xref:System.Tuple%608.%23ctor%2A> konstruktora w celu utworzenia krotka n z co najmniej ośmiu składniki używane `rest` parametr w celu utworzenia zagnieżdżonych n elementowej, który ma od jednej do siedmiu składników. Za pomocą kolejnych poziomów zagnieżdżenia, można utworzyć n krotki z nieograniczoną liczbę składników. Na przykład, aby utworzyć krotka 25, można utworzyć wystąpienia <xref:System.Tuple%608> obiekt z trzech poziomów zagnieżdżenia, w następujący sposób:  
  
-   Najbardziej zewnętrznego <xref:System.Tuple%608> obiekt zawiera składniki siódmego okres od pierwszego. Jego <xref:System.Tuple%608.Rest%2A> właściwości zapewnia dostęp do <xref:System.Tuple%608> obiektu pierwszego poziomu zagnieżdżenia.  
  
-   Zagnieżdżone peryferyjnych <xref:System.Tuple%608> ósmego za pośrednictwem czternastego składników, zawiera obiekt i jego <xref:System.Tuple%608.Rest%2A> właściwości zapewnia dostęp do <xref:System.Tuple%608> obiektu na drugi poziom zagnieżdżenia.  
  
-   <xref:System.Tuple%608> Obiekt na drugi poziom zagnieżdżenia zawiera piętnastego za pośrednictwem składników dwudziestego pierwszego i jego <xref:System.Tuple%608.Rest%2A> właściwości zapewnia dostęp do <xref:System.Tuple%604> obiektu na trzeci poziom zagnieżdżenia.  
  
-   Najbardziej Krotka jest <xref:System.Tuple%604> obiekt, który zawiera składniki dwudziestego piątego do dwudziestego drugiego.  
  
   
  
## Examples  
 Poniższy przykład tworzy krotka 17 zawierający dane populacji dla miasta z Detroit, Michigan, dla każdego spisu z 1860 do 2000. Pierwszy składnik spójnej kolekcji jest nazwą miasta. Drugi składnik jest data rozpoczęcia serii danych, a trzeci składnik jest populacji na datę rozpoczęcia. Każdy składnik kolejnych zawiera populacji odstępach dekadę. W przykładzie użyto dwóch warstw zagnieżdżenia do utworzenia spójnej kolekcji 17: definiuje krotka 7 którego innych za pośrednictwem składników siódmego zawierają dane populacji dla 1860 za pośrednictwem 1900 zagnieżdżonych 7-spójnych kolekcji zawierający dane populacji dla 1910 za pośrednictwem 1970, i wewnętrzny zagnieżdżone krotki 3 zawierający dane populacji dla 1980 do 2000.  
  
 [!code-csharp[System.Tuple.Create#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/example.cs#19)]
 [!code-vb[System.Tuple.Create#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/example.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="rest" /> nie jest rodzajowa <see langword="Tuple" /> obiektu.</exception>
        <altmember cref="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Obiekt, który ma zostać porównany z tym wystąpieniem.</param>
        <summary>Zwraca wartość wskazującą, czy bieżący <see cref="T:System.Tuple`8" /> obiekt jest taki sam jak określony obiekt.</summary>
        <returns>
          <see langword="true" /> Jeśli bieżące wystąpienie jest taki sam jak określony obiekt; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `obj` Parametr jest traktowany jako taki sam, jak bieżące wystąpienie, jeśli spełnia wszystkie następujące warunki:  
  
-   Jest <xref:System.Tuple%608> obiektu.  
  
-   Ma taką samą całkowitą liczbę składników, które są tego samego typu jak bieżące wystąpienie.  
  
-   Jego składniki (łącznie z ich elementów zagnieżdżonych) są takie same jak bieżące wystąpienie. Równość jest określana przez domyślna funkcja porównująca równości dla każdego składnika.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano pięć <xref:System.Tuple%608> obiektów, które zawierają liczby pierwsze. Porównuje pierwszy obiekt z każdym pozostałe obiekty. Jak przedstawiono na dane wyjściowe, tylko pierwszy i ostatni <xref:System.Tuple%608> obiekty są takie same, ponieważ mają one taką samą liczbę elementów z identycznymi wartościami.  
  
 [!code-csharp[System.Tuple\`8.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.equals/cs/equals1.cs#1)]
 [!code-vb[System.Tuple\`8.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Oblicza wartość skrótu dla bieżącego <see cref="T:System.Tuple`8" /> obiektu.</summary>
        <returns>Kod skrótu 32-bitowej liczby całkowitej ze znakiem.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item1">
      <MemberSignature Language="C#" Value="public T1 Item1 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T1 Item1" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item1" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item1 As T1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T1 Item1 { T1 get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T1</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość bieżącego <see cref="T:System.Tuple`8" /> pierwszy składnik obiektu.</summary>
        <value>Wartość bieżącego <see cref="T:System.Tuple`8" /> pierwszy składnik obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dynamiczne można określić typu <xref:System.Tuple%608.Item1%2A> składnika w jeden z dwóch sposobów:  
  
-   Wywołując `GetType` metody na wartość, która jest zwracana w wyniku <xref:System.Tuple%608.Item1%2A> właściwości.  
  
-   Pobierając <xref:System.Type> obiekt, który reprezentuje <xref:System.Tuple%608> obiektu i pobierania pierwszego elementu z tablicy, która jest zwracana przez jego <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> metody.  
  
   
  
## Examples  
 W poniższym przykładzie nastąpi utworzenie obiektu 17-elementowej spójnej kolekcji zawierającego dane o ludności miasta Detroit (stan Michigan) w latach 1860-2000. Pierwszy składnik krotki 17 jest nazwą miasta. W przykładzie użyto <xref:System.Tuple%608.Item1%2A> właściwość, aby wyświetlić nazwę miejscowości w nagłówku tabeli przed wyświetleniem danych wypełniania.  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item2">
      <MemberSignature Language="C#" Value="public T2 Item2 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T2 Item2" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item2" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item2 As T2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T2 Item2 { T2 get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T2</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość bieżącego <see cref="T:System.Tuple`8" /> drugi składnik obiektu.</summary>
        <value>Wartość bieżącego <see cref="T:System.Tuple`8" /> drugi składnik obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dynamiczne można określić typu <xref:System.Tuple%608.Item2%2A> składnika w jeden z dwóch sposobów:  
  
-   Wywołując `GetType` metody na wartość, która jest zwracana w wyniku <xref:System.Tuple%608.Item2%2A> właściwości.  
  
-   Pobierając <xref:System.Type> obiekt, który reprezentuje <xref:System.Tuple%608> obiektu i pobierania drugiego elementu z tablicy, która jest zwracana przez jego <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> metody.  
  
   
  
## Examples  
 W poniższym przykładzie nastąpi utworzenie obiektu 17-elementowej spójnej kolekcji zawierającego dane o ludności miasta Detroit (stan Michigan) w latach 1860-2000. Drugi składnik krotki 17 jest pierwszym roku serii danych. Przykład przypisuje wartość <xref:System.Tuple%608.Item2%2A> właściwości do zmiennej, a następnie używa to zmienną do reprezentowania roku, w których dane są wyświetlane.  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item3">
      <MemberSignature Language="C#" Value="public T3 Item3 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T3 Item3" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item3" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item3 As T3" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T3 Item3 { T3 get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T3</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość bieżącego <see cref="T:System.Tuple`8" /> trzecim składnikiem obiektu.</summary>
        <value>Wartość bieżącego <see cref="T:System.Tuple`8" /> trzecim składnikiem obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dynamiczne można określić typu <xref:System.Tuple%608.Item3%2A> składnika w jeden z dwóch sposobów:  
  
-   Wywołując `GetType` metody na wartość, która jest zwracana w wyniku <xref:System.Tuple%608.Item3%2A> właściwości.  
  
-   Pobierając <xref:System.Type> obiekt, który reprezentuje <xref:System.Tuple%608> obiektu i pobierania trzeciego elementu z tablicy, która jest zwracana przez jego <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> metody.  
  
   
  
## Examples  
 W poniższym przykładzie nastąpi utworzenie obiektu 17-elementowej spójnej kolekcji zawierającego dane o ludności miasta Detroit (stan Michigan) w latach 1860-2000. Trzecim składnikiem krotki 17 jest populacji w 1860. W przykładzie użyto <xref:System.Tuple%608.Item3%2A> właściwości do wyświetlania wartości populacji i obliczyć roczne szybkość zmian populacji między 1860 i 1870.  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item4">
      <MemberSignature Language="C#" Value="public T4 Item4 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T4 Item4" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item4" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item4 As T4" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T4 Item4 { T4 get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T4</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość bieżącego <see cref="T:System.Tuple`8" /> czwartym składnikiem obiektu.</summary>
        <value>Wartość bieżącego <see cref="T:System.Tuple`8" /> czwartym składnikiem obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dynamiczne można określić typu <xref:System.Tuple%608.Item4%2A> składnika w jeden z dwóch sposobów:  
  
-   Wywołując `GetType` metody na wartość, która jest zwracana w wyniku <xref:System.Tuple%608.Item4%2A> właściwości.  
  
-   Pobierając <xref:System.Type> obiekt, który reprezentuje <xref:System.Tuple%608> obiektu i pobierania czwartym elementem z tablicy, która jest zwracana przez jego <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> metody.  
  
   
  
## Examples  
 W poniższym przykładzie nastąpi utworzenie obiektu 17-elementowej spójnej kolekcji zawierającego dane o ludności miasta Detroit (stan Michigan) w latach 1860-2000. Czwartym składnikiem krotki 17 jest populacji w 1870. W przykładzie użyto <xref:System.Tuple%608.Item4%2A> właściwości do wyświetlania wartości populacji i roczne szybkość zmian populacji między 1870 i 1880 obliczania.  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item5">
      <MemberSignature Language="C#" Value="public T5 Item5 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T5 Item5" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item5" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item5 As T5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T5 Item5 { T5 get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T5</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość bieżącego <see cref="T:System.Tuple`8" /> piątym składnikiem obiektu.</summary>
        <value>Wartość bieżącego <see cref="T:System.Tuple`8" /> piątym składnikiem obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dynamiczne można określić typu <xref:System.Tuple%608.Item5%2A> składnika w jeden z dwóch sposobów:  
  
-   Wywołując `GetType` metody na wartość, która jest zwracana w wyniku <xref:System.Tuple%608.Item5%2A> właściwości.  
  
-   Pobierając <xref:System.Type> obiekt, który reprezentuje <xref:System.Tuple%608> obiektu i pobierania piątej elementu z tablicy, która jest zwracana przez jego <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> metody.  
  
   
  
## Examples  
 W poniższym przykładzie nastąpi utworzenie obiektu 17-elementowej spójnej kolekcji zawierającego dane o ludności miasta Detroit (stan Michigan) w latach 1860-2000. Piątym składnikiem krotki 17 jest populacji w 1880. W przykładzie użyto <xref:System.Tuple%608.Item5%2A> właściwości do wyświetlania wartości populacji i roczne szybkość zmian populacji między 1880 i 1890 obliczania.  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item6">
      <MemberSignature Language="C#" Value="public T6 Item6 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T6 Item6" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item6" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item6 As T6" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T6 Item6 { T6 get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T6</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość bieżącego <see cref="T:System.Tuple`8" /> składnika szóstego obiektu.</summary>
        <value>Wartość bieżącego <see cref="T:System.Tuple`8" /> składnika szóstego obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dynamiczne można określić typu <xref:System.Tuple%608.Item6%2A> składnika w jeden z dwóch sposobów:  
  
-   Wywołując `GetType` metody na wartość, która jest zwracana w wyniku <xref:System.Tuple%608.Item6%2A> właściwości.  
  
-   Pobierając <xref:System.Type> obiekt, który reprezentuje <xref:System.Tuple%608> obiektu i pobierania szóstego elementu z tablicy, która jest zwracana przez jego <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> metody.  
  
   
  
## Examples  
 W poniższym przykładzie nastąpi utworzenie obiektu 17-elementowej spójnej kolekcji zawierającego dane o ludności miasta Detroit (stan Michigan) w latach 1860-2000. Szóstym składnika krotki 17 jest populacji w 1890. W przykładzie użyto <xref:System.Tuple%608.Item6%2A> właściwości do wyświetlania wartości populacji i obliczyć roczne szybkość zmian populacji między 1890 i 1900 roku.  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item7">
      <MemberSignature Language="C#" Value="public T7 Item7 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T7 Item7" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item7" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item7 As T7" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T7 Item7 { T7 get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T7</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość bieżącego <see cref="T:System.Tuple`8" /> składnika siódmego obiektu.</summary>
        <value>Wartość bieżącego <see cref="T:System.Tuple`8" /> składnika siódmego obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dynamiczne można określić typu <xref:System.Tuple%608.Item7%2A> składnika w jeden z dwóch sposobów:  
  
-   Wywołując `GetType` metody na wartość, która jest zwracana w wyniku <xref:System.Tuple%608.Item7%2A> właściwości.  
  
-   Pobierając <xref:System.Type> obiekt, który reprezentuje <xref:System.Tuple%608> obiektu i pobierania siódmego elementu z tablicy, która jest zwracana przez jego <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> metody.  
  
   
  
## Examples  
 W poniższym przykładzie nastąpi utworzenie obiektu 17-elementowej spójnej kolekcji zawierającego dane o ludności miasta Detroit (stan Michigan) w latach 1860-2000. Siódmego składnika krotki 17 jest populacji w 1900 roku. W przykładzie użyto <xref:System.Tuple%608.Item7%2A> właściwości do wyświetlania wartości populacji i obliczyć roczne szybkość zmian populacji między 1900 a 1910.  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rest">
      <MemberSignature Language="C#" Value="public TRest Rest { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TRest Rest" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Rest" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Rest As TRest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TRest Rest { TRest get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TRest</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera bieżący <see cref="T:System.Tuple`8" /> obiektu na pozostałych składników.</summary>
        <value>Wartość bieżącego <see cref="T:System.Tuple`8" /> obiektu na pozostałych składników.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Tuple%608.Rest%2A> Właściwość zwraca zagnieżdżoną `Tuple` obiekt, który zezwala na dostęp do ósmego jednak *n*th składniki spójnej kolekcji. W zależności od całkowita liczba elementów w spójnej kolekcji, można pobrać wartości ósmego za pośrednictwem czternastego składników z zagnieżdżone `Tuple` obiektu <xref:System.Tuple%608.Item1%2A> za pośrednictwem <xref:System.Tuple%608.Item7%2A> właściwości. Następnie można użyć <xref:System.Tuple%608.Rest%2A> właściwość zagnieżdżoną <xref:System.Tuple%608> obiekt, aby pobrać `Tuple` obiektu na następny poziom zagnieżdżenia.  
  
 Dynamiczne można określić liczbę składników w zagnieżdżonych `Tuple` obiektu, który jest zwracany przez <xref:System.Tuple%608.Rest%2A> właściwości wyodrębniając cyfrą z nazwy typu. Poniższy przykład stanowi ilustrację.  
  
 [!code-vb[System.Tuple\`8.Item1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/rest.vb#2)]  
  
   
  
## Examples  
 W poniższym przykładzie nastąpi utworzenie obiektu 17-elementowej spójnej kolekcji zawierającego dane o ludności miasta Detroit (stan Michigan) w latach 1860-2000. Siódmego składnika krotki 17 jest populacji w 1900 roku. W przykładzie użyto <xref:System.Tuple%608.Rest%2A> właściwość do pobierania wartości ósmego za pośrednictwem czternastego składników, a używa <xref:System.Tuple%608.Rest%2A> właściwości zagnieżdżone <xref:System.Tuple%608> obiektu można pobrać wartości pozostałych składników.  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IStructuralComparable.CompareTo (object other, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralComparable.CompareTo(object other, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (other As Object, comparer As IComparer) As Integer Implements IStructuralComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralComparable.CompareTo(System::Object ^ other, System::Collections::IComparer ^ comparer) = System::Collections::IStructuralComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="other">Obiekt, który ma zostać porównany z bieżącym wystąpieniem.</param>
        <param name="comparer">Obiekt dostarczający niestandardowe reguły na potrzeby porównania.</param>
        <summary>Porównuje bieżący <see cref="T:System.Tuple`8" /> obiektu określony obiekt przy użyciu określona funkcja porównująca i zwraca liczbę całkowitą, która wskazuje, czy bieżący obiekt jest przed, po lub w tym samym miejscu określony obiekt w kolejności sortowania.</summary>
        <returns>Całkowita wskazująca pozycję tego wystąpienia i <paramref name="other" /> w porządku sortowania, jak pokazano w poniższej tabeli.  
  
 <list type="table"><listheader><term> Wartość  
  
 </term><description> Opis elementu  
  
 </description></listheader><item><term> Ujemna liczba całkowita  
  
 </term><description> To wystąpienie poprzedza <paramref name="other" />.  
  
 </description></item><item><term> Zero  
  
 </term><description> To wystąpienie i <paramref name="other" /> mieć to samo położenie w kolejności sortowania.  
  
 </description></item><item><term> Dodatnia liczba całkowita  
  
 </term><description> Następuje to wystąpienie <paramref name="other" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element członkowski jest jawną implementacją interfejsu. Można go używać tylko wtedy, gdy <xref:System.Tuple%608> wystąpienia jest rzutowane na <xref:System.Collections.IStructuralComparable> interfejsu.  
  
 Ta metoda pozwala zdefiniować dostosowane porównania <xref:System.Tuple%608> obiektów. Na przykład można użyć tej metody do zlecenia <xref:System.Tuple%608> obiektów na podstawie wartości z określonego składnika.  
  
 Mimo że tę metodę można wywołać bezpośrednio, najczęściej jest wywoływana przez sortowanie kolekcji metod, które obejmują <xref:System.Collections.IComparer> parametry porządkowania elementów członkowskich kolekcji. Na przykład jest wywoływana przez <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType> — metoda i <xref:System.Collections.SortedList.Add%2A> metody <xref:System.Collections.SortedList> obiekt, który zostanie uruchomiony przy użyciu <xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType> konstruktora.  
  
> [!CAUTION]
>  <xref:System.Tuple%608.System%23Collections%23IStructuralComparable%23CompareTo%2A> Metoda jest przeznaczona do użycia w operacji sortowania. Nie należy jej używać, gdy głównym celem porównania jest ustalenie, czy dwa obiekty są sobie równe. Aby ustalić, czy dwa obiekty są takie same, należy wywołać <xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład tworzy tablicę <xref:System.Tuple%608> obiektów, które zawierają dane populacji cztery miejscowości USA z 1940 do 2000. Pierwszy składnik octuple jest nazwą miasta. Pozostałe składniki sześciu reprezentować populacji odstępach 10 lat od 1940 do 2000.  
  
 `PopulationComparer` Klasa udostępnia <xref:System.Collections.IComparer> implementację, która umożliwia tablicy octuples sortowania za pomocą jednej z jego składników. Dwie wartości są dostarczane do `PopulationComparer` klasy w swoich konstruktorach: położenie składnika, który definiuje kolejność sortowania i <xref:System.Boolean> wartość, która wskazuje, czy obiekty krotki mają być sortowane w kolejności rosnącej lub malejącej.  
  
 Przykładzie następnie wyświetla elementy w tablicy w kolejności nieposortowane, sortowane według trzecim składnikiem (populacji 1950) i wyświetla je, sortowane według składnika ósmego (populacji 2000) i wyświetla je.  
  
 [!code-csharp[System.Tuple\`8.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.compareto/cs/compareto2.cs#2)]
 [!code-vb[System.Tuple\`8.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.compareto/vb/compareto2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="other" /> nie jest <see cref="T:System.Tuple`8" /> obiektu.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.Equals">
      <MemberSignature Language="C#" Value="bool IStructuralEquatable.Equals (object other, System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IStructuralEquatable.Equals(object other, class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (other As Object, comparer As IEqualityComparer) As Boolean Implements IStructuralEquatable.Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IStructuralEquatable.Equals(System::Object ^ other, System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="other">Obiekt, który ma zostać porównany z tym wystąpieniem.</param>
        <param name="comparer">Obiekt definiujący metodę służącą ocenie, czy dwa obiekty są sobie równe.</param>
        <summary>Zwraca wartość wskazującą, czy bieżący <see cref="T:System.Tuple`8" /> obiekt jest taki sam jak określony obiekt na podstawie metody porównania określony.</summary>
        <returns>
          <see langword="true" /> Jeśli bieżące wystąpienie jest taki sam jak określony obiekt; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Tuple%608> wystąpienia jest rzutowane na <xref:System.Collections.IStructuralEquatable> interfejsu.  
  
 <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType> Implementacji jest wywoływana tylko wtedy, gdy `other` nie jest `null`, jeśli można pomyślnie rzutowanie (C#) i przekonwertować (w języku Visual Basic) <xref:System.Tuple%608> obiektu, który ma taką samą całkowitą liczbę składników (włącznie z zawartymi w zagnieżdżonych `Tuple` obiektów) tego samego typu jak bieżące wystąpienie. <xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29> Metoda przekazuje pierwszy <xref:System.Tuple%608.Item1%2A> wartości <xref:System.Tuple%608> obiekty do porównania z <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType> implementacji. Jeśli wywołanie tej metody zwraca `true`, metoda jest wywoływana ponownie i przekazany <xref:System.Tuple%608.Item2%2A> wartości dwa <xref:System.Tuple%608> obiektów. Ten proces jest kontynuowany do momentu wywołania metody, które zwraca `false` podczas porównywania konkretną parą wartości lub dwa <xref:System.Tuple%608.Rest%2A> wartości są przekazywane do metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.GetHashCode">
      <MemberSignature Language="C#" Value="int IStructuralEquatable.GetHashCode (System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralEquatable.GetHashCode(class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function GetHashCode (comparer As IEqualityComparer) As Integer Implements IStructuralEquatable.GetHashCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralEquatable.GetHashCode(System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::GetHashCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="comparer">Obiekt których <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> metody oblicza wartość skrótu bieżącego <see cref="T:System.Tuple`8" /> obiektu.</param>
        <summary>Oblicza wartość skrótu dla bieżącego <see cref="T:System.Tuple`8" /> obiektu za pomocą metody określonej obliczeń.</summary>
        <returns>Kod skrótu 32-bitowej liczby całkowitej ze znakiem.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Tuple%608> wystąpienia jest rzutowane na <xref:System.Collections.IStructuralEquatable> interfejsu.  
  
 Metoda opakowuje po prostu wywołanie `comparer` obiektu <xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType> implementacji.  
  
 Algorytm używany do obliczania skrótu ma zwracać taki sam skrót dla dwóch <xref:System.Tuple%608> obiektów, które są traktowane jako równe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (obj As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ obj) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Obiekt, który ma zostać porównany z bieżącym wystąpieniem.</param>
        <summary>Porównuje bieżący <see cref="T:System.Tuple`8" /> obiekt do określonego obiektu i zwraca liczbę całkowitą, która wskazuje, czy bieżący obiekt jest przed, po lub w tym samym miejscu określony obiekt w kolejności sortowania.</summary>
        <returns>Całkowita wskazująca pozycję tego wystąpienia i <paramref name="obj" /> w porządku sortowania, jak pokazano w poniższej tabeli.  
  
 <list type="table"><listheader><term> Wartość  
  
 </term><description> Opis elementu  
  
 </description></listheader><item><term> Ujemna liczba całkowita  
  
 </term><description> To wystąpienie poprzedza <paramref name="obj" />.  
  
 </description></item><item><term> Zero  
  
 </term><description> To wystąpienie i <paramref name="obj" /> mieć to samo położenie w kolejności sortowania.  
  
 </description></item><item><term> Dodatnia liczba całkowita  
  
 </term><description> Następuje to wystąpienie <paramref name="obj" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Tuple%608> wystąpienia jest rzutowane na <xref:System.IComparable> interfejsu.  
  
 Ta metoda zapewnia <xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType> implementację <xref:System.Tuple%608> klasy. Mimo że można bezpośrednio wywołać metody, najczęściej jest wywoływana przez przeciążeń domyślne sortowanie kolekcji metod, takich jak <xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType> i <xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType>, porządkowania elementów członkowskich kolekcji.  
  
> [!CAUTION]
>  <xref:System.Tuple%608.System%23IComparable%23CompareTo%2A> Metoda jest przeznaczona do użycia w operacji sortowania. Nie należy jej używać, gdy głównym celem porównania jest ustalenie, czy dwa obiekty są sobie równe. Aby ustalić, czy dwa obiekty są takie same, należy wywołać <xref:System.Tuple%608.Equals%28System.Object%29?displayProperty=nameWithType> metody.  
  
 Ta metoda używa domyślna funkcja porównująca obiekt do porównania poszczególnych składników.  
  
   
  
## Examples  
 Poniższy przykład tworzy tablicę octuples, których składniki są liczb całkowitych, które zawiera zakresu liczb pierwszych. Przykładzie wyświetla elementy tablicy w kolejności nieposortowane, sortuje tablicy, a następnie wyświetla tablicy posortowane. Dane wyjściowe zawierają posortowane według tablicy <xref:System.Tuple%608.Item1%2A>, lub pierwszy składnik spójnej kolekcji. Należy pamiętać, że przykładzie nie mogą bezpośrednio wywoływać <xref:System.Tuple%608.System%23IComparable%23CompareTo%28System.Object%29> metody. Ta metoda jest wywoływana przez niejawnie <xref:System.Array.Sort%28System.Array%29> metody dla każdego elementu w tablicy.  
  
 [!code-csharp[System.Tuple\`8.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.compareto/cs/compareto1.cs#1)]
 [!code-vb[System.Tuple\`8.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.compareto/vb/compareto1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="obj" /> nie jest <see cref="T:System.Tuple`8" /> obiektu.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.CompilerServices.ITuple.Item">
      <MemberSignature Language="C#" Value="object System.Runtime.CompilerServices.ITuple.Item[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Runtime.CompilerServices.ITuple.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Item(index As Integer) As Object Implements ITuple.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Runtime.CompilerServices.ITuple.Item[int] { System::Object ^ get(int index); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.CompilerServices.ITuple.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Określony indeks <see langword="Tuple" /> elementu. <c>Indeks</c> można z zakresu od 0 do <see langword="Item1" /> na mniejszy niż liczba elementów w jeden <see langword="Tuple" />.</param>
        <summary>Pobiera wartość określonego <see langword="Tuple" /> elementu.</summary>
        <value>Wartość <see langword="Tuple" /> elementu w określonej pozycji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType> Właściwość jest jawnej implementacji interfejsu. Aby wywołać go, należy rzutowania lub konwersji <xref:System.Tuple%608> do obiektu <xref:System.Runtime.CompilerServices.ITuple> obiektu interfejsu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">
          <paramref name="index" /> jest mniejsza niż 0.  
  
 —lub—  
  
 <paramref name="index" /> jest większe lub równe <see cref="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.CompilerServices.ITuple.Length">
      <MemberSignature Language="C#" Value="int System.Runtime.CompilerServices.ITuple.Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Runtime.CompilerServices.ITuple.Length" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Length As Integer Implements ITuple.Length" />
      <MemberSignature Language="C++ CLI" Value="property int System.Runtime.CompilerServices.ITuple.Length { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.CompilerServices.ITuple.Length</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę elementów w <see langword="Tuple" />.</summary>
        <value>Liczba elementów w <see langword="Tuple" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Length%2A> Właściwość jest jawnej implementacji interfejsu. Aby wywołać go, należy rzutowania lub konwersji <xref:System.Tuple%608> typ <xref:System.Runtime.CompilerServices.ITuple> obiektu interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca ciąg reprezentujący wartość to <see cref="T:System.Tuple`8" /> wystąpienia.</summary>
        <returns>Reprezentacja ciągu <see cref="T:System.Tuple`8" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Długość ciągu zwróconego przez tę metodę ma postać (*Item1*, *Item2*, *Item3*, *Item4*, `Item5, Item6, Item7`, * Item8 —*...), gdzie *Item1*, *Item2*, *Item3*, *Item4*, *Item5*, *Item6*, i *Item7* reprezentują wartości <xref:System.Tuple%608.Item1%2A>, <xref:System.Tuple%608.Item2%2A>, <xref:System.Tuple%608.Item3%2A>, <xref:System.Tuple%608.Item4%2A>, <xref:System.Tuple%608.Item5%2A>, <xref:System.Tuple%608.Item6%2A>, i <xref:System.Tuple%608.Item7%2A> właściwości. *Item8 —* reprezentuje wartość <xref:System.Tuple%608> obiektu `Next.Item1` właściwości. Wykonaj wartość dodatkowe składniki zagnieżdżonych *item8 —*. Jeśli dowolna z wartości właściwości jest `null`, jest reprezentowany jako <xref:System.String.Empty?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Poniższy przykład tworzy krotka 17 zawierający dane populacji dla miasta z Detroit, Michigan, z 1860 do 1900. Następnie używa <xref:System.Tuple%608.ToString%2A> metodę w celu wyświetlenia danych spójnej kolekcji.  
  
 [!code-csharp[System.Tuple\`8.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.tostring/cs/tostring1.cs#1)]
 [!code-vb[System.Tuple\`8.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.tostring/vb/tostring1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>