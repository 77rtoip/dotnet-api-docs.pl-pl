<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Tuple`8.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5748dd4b2ec95cbd704aabcd790b51dc2d7fe169a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">748dd4b2ec95cbd704aabcd790b51dc2d7fe169a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The type of the tuple's first component.</source>
          <target state="translated">Typ pierwszego składnika spójnej kolekcji.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The type of the tuple's second component.</source>
          <target state="translated">Typ drugiego składnika spójnej kolekcji.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The type of the tuple's third component.</source>
          <target state="translated">Typ trzeciego składnika spójnej kolekcji.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The type of the tuple's fourth component.</source>
          <target state="translated">Typ czwartego składnika spójnej kolekcji.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The type of the tuple's fifth component.</source>
          <target state="translated">Typ piątego składnika spójnej kolekcji.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The type of the tuple's sixth component.</source>
          <target state="translated">Typ szóstego składnika spójnej kolekcji.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The type of the tuple's seventh component.</source>
          <target state="translated">Typ siódmego składnika spójnej kolekcji.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>Any generic <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> object that defines the types of the tuple's remaining components.</source>
          <target state="translated">Wszelkie ogólny <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> obiektu, który definiuje typy spójna kolekcja znajdująca się na pozostałych składników.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="T:System.Tuple`8">
          <source>Represents an <bpt id="p1">*</bpt>n<ept id="p1">*</ept>-tuple, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is 8 or greater.</source>
          <target state="translated">Reprezentuje <bpt id="p1">*</bpt>n<ept id="p1">*</ept>- spójnej kolekcji, której <bpt id="p2">*</bpt>n<ept id="p2">*</ept> jest 8 lub nowszego.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>A tuple is a data structure that has a specific number and sequence of values.</source>
          <target state="translated">Spójna kolekcja to struktura danych, która ma określoną liczbę i kolejność wartości.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> class represents an <bpt id="p1">*</bpt>n<ept id="p1">*</ept>-tuple that has eight or more components.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> Klasy reprezentuje <bpt id="p1">*</bpt>n<ept id="p1">*</ept>- krotki z co najmniej ośmiu składników.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>You can instantiate a <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object with exactly eight components by calling the static <ph id="ph2">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Można utworzyć wystąpienia <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> obiektu o dokładnie osiem składników przez wywołanie metody statycznych <ph id="ph2">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The following example creates an 8-tuple (octuple) that contains prime numbers that are less than 20.</source>
          <target state="translated">Poniższy przykład tworzy 8-krotka (octuple) zawierający liczb pierwszych, które są mniej niż 20.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>Note that it uses type inference to determine the type of each component.</source>
          <target state="translated">Należy pamiętać, używa wnioskowanie o typie, aby określić typ każdego składnika.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>You can also instantiate an n-tuple object with eight or more components by calling the <ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph> constructor.</source>
          <target state="translated">Można również tworzenia wystąpienia obiektu spójnej kolekcji n z co najmniej ośmiu składników, wywołując <ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph> konstruktora.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph> constructor to create an 8-tuple that is equivalent to the tuple created in the previous example.</source>
          <target state="translated">W poniższym przykładzie użyto <ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph> konstruktora w celu utworzenia krotka 8 odpowiada utworzony w poprzednim przykładzie spójnej kolekcji.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>To create an n-tuple with nine or more components, you must call the  <ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph> constructor.</source>
          <target state="translated">Aby utworzyć krotka n z dziewięciu lub więcej składników, należy wywołać <ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph> konstruktora.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The static factory methods of the <ph id="ph1">&lt;xref:System.Tuple&gt;</ph> class do not support the creation of <ph id="ph2">`Tuple`</ph> objects with more than eight components.</source>
          <target state="translated">Metody statyczne fabryki <ph id="ph1">&lt;xref:System.Tuple&gt;</ph> klasa nie obsługuje tworzenia <ph id="ph2">`Tuple`</ph> obiekty o więcej niż osiem składników.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>To instantiate an n-tuple that has eight or more components with the <ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph> constructor, you supply a generic <ph id="ph2">`Tuple`</ph> object as the <ph id="ph3">`rest`</ph> parameter to define the eighth through <bpt id="p1">*</bpt>n<ept id="p1">*</ept>th components of the tuple.</source>
          <target state="translated">Można utworzyć wystąpienia n krotka, która ma co najmniej osiem składników z <ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph> konstruktora, podaj ogólnego <ph id="ph2">`Tuple`</ph> obiekt jako <ph id="ph3">`rest`</ph> parametr, aby zdefiniować ósmego za pośrednictwem <bpt id="p1">*</bpt>n<ept id="p1">*</ept>th składniki spójnej kolekcji.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>By nesting generic <ph id="ph1">`Tuple`</ph> objects in this way, you can create a tuple that has no practical limitation on the number of its components.</source>
          <target state="translated">Przez zagnieżdżanie ogólnego <ph id="ph1">`Tuple`</ph> obiektów w ten sposób można utworzyć spójnych kolekcji zawierający bez praktyczne ograniczenia liczby jego składniki.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The following example creates a 17-tuple that contains population data for the city of Detroit, Michigan, for each national census from 1860 to 2000.</source>
          <target state="translated">Poniższy przykład tworzy krotka 17 zawierający dane populacji dla miasta z Detroit, Michigan, dla każdego national spisu z 1860 do 2000.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The first component of the tuple is the city name.</source>
          <target state="translated">Pierwszy składnik spójnej kolekcji jest nazwą miasta.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The second component is the start date of the data series, and the third component is the population at the start date.</source>
          <target state="translated">Drugi składnik jest data rozpoczęcia serii danych, a trzeci składnik jest populacji na datę rozpoczęcia.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>Each subsequent component provides the population at decade intervals.</source>
          <target state="translated">Każdy składnik kolejnych zawiera populacji odstępach dekadę.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The 17-tuple is created by nesting a <ph id="ph1">&lt;xref:System.Tuple%603&gt;</ph> object inside a <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object.</source>
          <target state="translated">17 tuple jest tworzony przez zagnieżdżanie <ph id="ph1">&lt;xref:System.Tuple%603&gt;</ph> obiektów wewnątrz <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>(That is, the <ph id="ph1">&lt;xref:System.Tuple%603&gt;</ph> object is supplied as the value of the <ph id="ph2">`rest`</ph> parameter in the <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> class constructor.) This <ph id="ph4">&lt;xref:System.Tuple%608&gt;</ph> object is, in turn, nested in an outer <ph id="ph5">&lt;xref:System.Tuple%608&gt;</ph> object.</source>
          <target state="translated">(Czyli, <ph id="ph1">&lt;xref:System.Tuple%603&gt;</ph> obiektu jest podana jako wartość <ph id="ph2">`rest`</ph> parametru w <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> konstruktora klasy.) To <ph id="ph4">&lt;xref:System.Tuple%608&gt;</ph> obiektu z kolei zagnieżdżone w zewnętrznym <ph id="ph5">&lt;xref:System.Tuple%608&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>(That is, the <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object is supplied as the value of the <ph id="ph2">`rest`</ph> parameter in the outer <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> object's class constructor.)</source>
          <target state="translated">(To, <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> obiektu jest podana jako wartość <ph id="ph2">`rest`</ph> parametru w zewnętrznego <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> konstruktora klasy obiektu.)</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>You can retrieve the value of the tuple's first seven components by using the read-only <ph id="ph1">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Tuple%607.Item3%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Tuple%607.Item4%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Tuple%607.Item5%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Tuple%607.Item6%2A&gt;</ph>, and <ph id="ph7">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph> instance properties.</source>
          <target state="translated">Można pobrać wartość krotki najpierw siedmiu składników za pomocą tylko do odczytu <ph id="ph1">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Tuple%607.Item3%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Tuple%607.Item4%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Tuple%607.Item5%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Tuple%607.Item6%2A&gt;</ph>, i <ph id="ph7">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph> wystąpienia właściwości.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>Any additional components are nested and can be retrieved from the <ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property.</source>
          <target state="translated">Dodatkowe składniki są zagnieżdżone i mogą być pobierane z <ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>In the previous example, the <ph id="ph1">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> through <ph id="ph2">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> properties retrieve the first through seventh components of the tuple.</source>
          <target state="translated">W poprzednim przykładzie <ph id="ph1">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> za pośrednictwem <ph id="ph2">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> właściwości pobrać od pierwszego siódmego składniki spójnej kolekcji.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The eighth through fourteenth components are contained in the tuple that is nested at the second level, and are represented by the <ph id="ph1">`Rest.Item1`</ph> through <ph id="ph2">`Rest.Item7`</ph> properties.</source>
          <target state="translated">8 za pomocą czternastego składniki znajdują się w spójnej kolekcji, która jest zagnieżdżona w drugiej a są reprezentowane przez <ph id="ph1">`Rest.Item1`</ph> za pośrednictwem <ph id="ph2">`Rest.Item7`</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The fifteenth through seventeenth components are contained in the tuple that is nested at the third level, and are represented by the <ph id="ph1">`Rest.Rest.Item1`</ph> though <ph id="ph2">`Rest.Rest.Item3`</ph> properties.</source>
          <target state="translated">Piętnasta za pomocą siedemnasta składniki znajdują się w zagnieżdżonym na trzeci poziom spójnej kolekcji i są reprezentowane przez <ph id="ph1">`Rest.Rest.Item1`</ph> chociaż <ph id="ph2">`Rest.Rest.Item3`</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>Tuples are commonly used in four different ways:</source>
          <target state="translated">Spójne kolekcje są powszechnie wykorzystywane na cztery różne sposoby:</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>To represent a single set of data.</source>
          <target state="translated">Reprezentowanie jednego zestawu danych.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>For example, a tuple can represent a database record, and its components can represent individual fields of the record.</source>
          <target state="translated">Na przykład spójna kolekcja może reprezentować rekord bazy danych, a jej składniki mogą reprezentować poszczególne pola rekordu.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>To provide easy access to, and manipulation of, a data set.</source>
          <target state="translated">Zapewnienie łatwego dostępu do zestawu danych i możliwości wykonywania w nim różnych operacji.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>To return multiple values from a method without the use of <ph id="ph1">`out`</ph> parameters (in C#) or <ph id="ph2">`ByRef`</ph> parameters (in Visual Basic).</source>
          <target state="translated">Aby zwrócić wartości wielu z metody bez użycia <ph id="ph1">`out`</ph> parametrów (C#) lub <ph id="ph2">`ByRef`</ph> parametry (w języku Visual Basic).</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>For example, the previous example returns its computed statistics, along with the city name, in a <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> object.</source>
          <target state="translated">Na przykład poprzednim przykładzie zwraca jego obliczona statystyk, oraz nazwę miejscowości <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>To pass multiple values to a method through a single parameter.</source>
          <target state="translated">Przekazywanie wielu wartości do metody za pomocą jednego parametru.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>For example, the <ph id="ph1">&lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType&gt;</ph> method has a single parameter that lets you supply one value to the method that the thread executes at startup.</source>
          <target state="translated">Na przykład <ph id="ph1">&lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType&gt;</ph> metoda ma jeden parametr, który pozwala na określanie jedną wartość do metody, która wykonuje wątek przy uruchamianiu.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>If you supply a <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> object as the method argument, you can supply the thread’s startup routine with seven items of data.</source>
          <target state="translated">Jeśli podasz <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> obiekt jako argument metody, możesz podać procedury uruchomienia wątku z siedmiu elementów danych.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The value of the tuple's first component.</source>
          <target state="translated">Wartość pierwszego składnika spójnej kolekcji.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The value of the tuple's second component.</source>
          <target state="translated">Wartość drugiego składnika spójnej kolekcji.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The value of the tuple's third component.</source>
          <target state="translated">Wartość trzeciego składnika spójnej kolekcji.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The value of the tuple's fourth component</source>
          <target state="translated">Wartość czwartego składnika spójnej kolekcji.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The value of the tuple's fifth component.</source>
          <target state="translated">Wartość piątego składnika spójnej kolekcji.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The value of the tuple's sixth component.</source>
          <target state="translated">Wartość krotki szóstego składnika.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The value of the tuple's seventh component.</source>
          <target state="translated">Wartość krotki siódmego składnika.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>Any generic <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> object that contains the values of the tuple's remaining components.</source>
          <target state="translated">Wszelkie ogólny <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> obiekt, który zawiera wartości spójna kolekcja znajdująca się na pozostałych składników.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> class.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>You can also use the static <ph id="ph1">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph> method to instantiate an 8-tuple (octuple) object without having to explicitly specify the types of its components.</source>
          <target state="translated">Można również użyć statycznych <ph id="ph1">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph> metody do tworzenia wystąpienia obiektu 8-krotki (octuple) bez konieczności jawnego określania typów jego składniki.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph> method to instantiate an 8-tuple object that contains prime numbers that are less than 20.</source>
          <target state="translated">W poniższym przykładzie użyto <ph id="ph1">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph> metody do tworzenia wystąpienia obiektu 8 krotka liczb pierwszych, które są mniej niż 20.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>This is equivalent to the following call to the <ph id="ph1">&lt;xref:System.Tuple%607.%23ctor%2A&gt;</ph> class constructor.</source>
          <target state="translated">Jest to równoważne następujące wywołanie do <ph id="ph1">&lt;xref:System.Tuple%607.%23ctor%2A&gt;</ph> konstruktora klasy.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>However, the static <ph id="ph1">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph> method cannot be used to create a tuple object with more than eight components.</source>
          <target state="translated">Jednak statycznych <ph id="ph1">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph> nie można użyć metody, aby utworzyć obiekt spójnej kolekcji o więcej niż osiem składników.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>When using the <ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph> constructor to create an n-tuple with eight or more components, you use the <ph id="ph2">`rest`</ph> parameter to create a nested n-tuple that has from one to seven components.</source>
          <target state="translated">Korzystając z <ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph> konstruktora w celu utworzenia krotka n z co najmniej ośmiu składniki używane <ph id="ph2">`rest`</ph> parametr w celu utworzenia zagnieżdżonych n elementowej, który ma od jednej do siedmiu składników.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>By using successive levels of nesting, you can create an n-tuple that has a virtually unlimited number of components.</source>
          <target state="translated">Za pomocą kolejnych poziomów zagnieżdżenia, można utworzyć n krotki z nieograniczoną liczbę składników.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>For example, to create a 25-tuple, you instantiate a <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object with three levels of nesting, as follows:</source>
          <target state="translated">Na przykład, aby utworzyć krotka 25, można utworzyć wystąpienia <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> obiekt z trzech poziomów zagnieżdżenia, w następujący sposób:</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The outermost <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object contains the first through seventh components.</source>
          <target state="translated">Najbardziej zewnętrznego <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> obiekt zawiera składniki siódmego okres od pierwszego.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>Its <ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property provides access to an <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object at the first level of nesting.</source>
          <target state="translated">Jego <ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> właściwości zapewnia dostęp do <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> obiektu pierwszego poziomu zagnieżdżenia.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The outermost nested <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object contains the eighth through fourteenth components, and its <ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property provides access to an <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> object at the second level of nesting.</source>
          <target state="translated">Zagnieżdżone peryferyjnych <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> ósmego za pośrednictwem czternastego składników, zawiera obiekt i jego <ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> właściwości zapewnia dostęp do <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> obiektu na drugi poziom zagnieżdżenia.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object at the second level of nesting contains the fifteenth through twenty-first  components, and its <ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property provides access to an <ph id="ph3">&lt;xref:System.Tuple%604&gt;</ph> object at the third level of nesting.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> Obiekt na drugi poziom zagnieżdżenia zawiera piętnastego za pośrednictwem składników dwudziestego pierwszego i jego <ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> właściwości zapewnia dostęp do <ph id="ph3">&lt;xref:System.Tuple%604&gt;</ph> obiektu na trzeci poziom zagnieżdżenia.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The innermost tuple is a <ph id="ph1">&lt;xref:System.Tuple%604&gt;</ph> object that contains the twenty-second through twenty-fifth components.</source>
          <target state="translated">Najbardziej Krotka jest <ph id="ph1">&lt;xref:System.Tuple%604&gt;</ph> obiekt, który zawiera składniki dwudziestego piątego do dwudziestego drugiego.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The following example creates a 17-tuple that contains population data for the city of Detroit, Michigan, for each census from 1860 to 2000.</source>
          <target state="translated">Poniższy przykład tworzy krotka 17 zawierający dane populacji dla miasta z Detroit, Michigan, dla każdego spisu z 1860 do 2000.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The first component of the tuple is the city name.</source>
          <target state="translated">Pierwszy składnik spójnej kolekcji jest nazwą miasta.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The second component is the start date of the series of data, and the third component is the population at the start date.</source>
          <target state="translated">Drugi składnik jest data rozpoczęcia serii danych, a trzeci składnik jest populacji na datę rozpoczęcia.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>Each subsequent component provides the population at decade intervals.</source>
          <target state="translated">Każdy składnik kolejnych zawiera populacji odstępach dekadę.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The example uses two layers of nesting to create the 17-tuple: It defines a 7-tuple whose third through seventh components contain population data for 1860 through 1900, a nested 7-tuple that contains population data for 1910 through 1970, and an inner nested 3-tuple that contains population data for 1980 through 2000.</source>
          <target state="translated">W przykładzie użyto dwóch warstw zagnieżdżenia do utworzenia spójnej kolekcji 17: definiuje krotka 7 którego innych za pośrednictwem składników siódmego zawierają dane populacji dla 1860 za pośrednictwem 1900 zagnieżdżonych 7-spójnych kolekcji zawierający dane populacji dla 1910 za pośrednictwem 1970, i wewnętrzny zagnieżdżone krotki 3 zawierający dane populacji dla 1980 do 2000.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source><ph id="ph1">&lt;paramref name="rest" /&gt;</ph> is not a generic <ph id="ph2">&lt;see langword="Tuple" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="rest" /&gt;</ph> nie jest rodzajowa <ph id="ph2">&lt;see langword="Tuple" /&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>The object to compare with this instance.</source>
          <target state="translated">Obiekt, który ma zostać porównany z tym wystąpieniem.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>Returns a value that indicates whether the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object is equal to a specified object.</source>
          <target state="translated">Zwraca wartość wskazującą, czy bieżący <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> obiekt jest taki sam jak określony obiekt.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current instance is equal to the specified object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli bieżące wystąpienie jest taki sam jak określony obiekt; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>The <ph id="ph1">`obj`</ph> parameter is considered to be equal to the current instance if it meets all the following conditions:</source>
          <target state="translated"><ph id="ph1">`obj`</ph> Parametr jest traktowany jako taki sam, jak bieżące wystąpienie, jeśli spełnia wszystkie następujące warunki:</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>It is a <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object.</source>
          <target state="translated">Jest <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>It has the same total number of components that are of the same types as the current instance.</source>
          <target state="translated">Ma taką samą całkowitą liczbę składników, które są tego samego typu jak bieżące wystąpienie.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>Its components (including its nested components) are equal to those of the current instance.</source>
          <target state="translated">Jego składniki (łącznie z ich elementów zagnieżdżonych) są takie same jak bieżące wystąpienie.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>Equality is determined by the default equality comparer for each component.</source>
          <target state="translated">Równość jest określana przez domyślna funkcja porównująca równości dla każdego składnika.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>The following example defines five <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> objects that contain prime numbers.</source>
          <target state="translated">W poniższym przykładzie zdefiniowano pięć <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> obiektów, które zawierają liczby pierwsze.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>It then compares the first object with each of the remaining objects.</source>
          <target state="translated">Porównuje pierwszy obiekt z każdym pozostałe obiekty.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>As the output shows, only the first and the last <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> objects are equal, because they have an identical number of components with identical values.</source>
          <target state="translated">Jak przedstawiono na dane wyjściowe, tylko pierwszy i ostatni <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> obiekty są takie same, ponieważ mają one taką samą liczbę elementów z identycznymi wartościami.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.GetHashCode">
          <source>Calculates the hash code for the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object.</source>
          <target state="translated">Oblicza wartość skrótu dla bieżącego <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.GetHashCode">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">Kod skrótu 32-bitowej liczby całkowitej ze znakiem.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.Item1">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's first component.</source>
          <target state="translated">Pobiera wartość bieżącego <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> pierwszy składnik obiektu.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item1">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's first component.</source>
          <target state="translated">Wartość bieżącego <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> pierwszy składnik obiektu.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item1">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">Dynamiczne można określić typu <ph id="ph1">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> składnika w jeden z dwóch sposobów:</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item1">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> property.</source>
          <target state="translated">Wywołując <ph id="ph1">`GetType`</ph> metody na wartość, która jest zwracana w wyniku <ph id="ph2">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item1">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object, and retrieving the first element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Pobierając <ph id="ph1">&lt;xref:System.Type&gt;</ph> obiekt, który reprezentuje <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> obiektu i pobierania pierwszego elementu z tablicy, która jest zwracana przez jego <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item1">
          <source>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</source>
          <target state="translated">W poniższym przykładzie nastąpi utworzenie obiektu 17-elementowej spójnej kolekcji zawierającego dane o ludności miasta Detroit (stan Michigan) w latach 1860-2000.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item1">
          <source>The first component of the 17-tuple is the city name.</source>
          <target state="translated">Pierwszy składnik krotki 17 jest nazwą miasta.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item1">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> property to display the city name in the table header before displaying the population data.</source>
          <target state="translated">W przykładzie użyto <ph id="ph1">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> właściwość, aby wyświetlić nazwę miejscowości w nagłówku tabeli przed wyświetleniem danych wypełniania.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.Item2">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's second component.</source>
          <target state="translated">Pobiera wartość bieżącego <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> drugi składnik obiektu.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item2">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's second component.</source>
          <target state="translated">Wartość bieżącego <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> drugi składnik obiektu.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item2">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">Dynamiczne można określić typu <ph id="ph1">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph> składnika w jeden z dwóch sposobów:</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item2">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph> property.</source>
          <target state="translated">Wywołując <ph id="ph1">`GetType`</ph> metody na wartość, która jest zwracana w wyniku <ph id="ph2">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item2">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object, and retrieving the second element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Pobierając <ph id="ph1">&lt;xref:System.Type&gt;</ph> obiekt, który reprezentuje <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> obiektu i pobierania drugiego elementu z tablicy, która jest zwracana przez jego <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item2">
          <source>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</source>
          <target state="translated">W poniższym przykładzie nastąpi utworzenie obiektu 17-elementowej spójnej kolekcji zawierającego dane o ludności miasta Detroit (stan Michigan) w latach 1860-2000.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item2">
          <source>The second component of the 17-tuple is the first year of the data series.</source>
          <target state="translated">Drugi składnik krotki 17 jest pierwszym roku serii danych.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item2">
          <source>The example assigns the value of the <ph id="ph1">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph> property to a variable, and then uses that variable to represent the year whose data is displayed.</source>
          <target state="translated">Przykład przypisuje wartość <ph id="ph1">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph> właściwości do zmiennej, a następnie używa to zmienną do reprezentowania roku, w których dane są wyświetlane.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.Item3">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's third component.</source>
          <target state="translated">Pobiera wartość bieżącego <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> trzecim składnikiem obiektu.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item3">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's third component.</source>
          <target state="translated">Wartość bieżącego <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> trzecim składnikiem obiektu.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item3">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%608.Item3%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">Dynamiczne można określić typu <ph id="ph1">&lt;xref:System.Tuple%608.Item3%2A&gt;</ph> składnika w jeden z dwóch sposobów:</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item3">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%608.Item3%2A&gt;</ph> property.</source>
          <target state="translated">Wywołując <ph id="ph1">`GetType`</ph> metody na wartość, która jest zwracana w wyniku <ph id="ph2">&lt;xref:System.Tuple%608.Item3%2A&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item3">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object, and retrieving the third element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Pobierając <ph id="ph1">&lt;xref:System.Type&gt;</ph> obiekt, który reprezentuje <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> obiektu i pobierania trzeciego elementu z tablicy, która jest zwracana przez jego <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item3">
          <source>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</source>
          <target state="translated">W poniższym przykładzie nastąpi utworzenie obiektu 17-elementowej spójnej kolekcji zawierającego dane o ludności miasta Detroit (stan Michigan) w latach 1860-2000.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item3">
          <source>The third component of the 17-tuple is the population in 1860.</source>
          <target state="translated">Trzecim składnikiem krotki 17 jest populacji w 1860.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item3">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Tuple%608.Item3%2A&gt;</ph> property to display the population value and to calculate the annual rate of population change between 1860 and 1870.</source>
          <target state="translated">W przykładzie użyto <ph id="ph1">&lt;xref:System.Tuple%608.Item3%2A&gt;</ph> właściwości do wyświetlania wartości populacji i obliczyć roczne szybkość zmian populacji między 1860 i 1870.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.Item4">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's fourth component.</source>
          <target state="translated">Pobiera wartość bieżącego <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> czwartym składnikiem obiektu.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item4">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's fourth component.</source>
          <target state="translated">Wartość bieżącego <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> czwartym składnikiem obiektu.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item4">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%608.Item4%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">Dynamiczne można określić typu <ph id="ph1">&lt;xref:System.Tuple%608.Item4%2A&gt;</ph> składnika w jeden z dwóch sposobów:</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item4">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%608.Item4%2A&gt;</ph> property.</source>
          <target state="translated">Wywołując <ph id="ph1">`GetType`</ph> metody na wartość, która jest zwracana w wyniku <ph id="ph2">&lt;xref:System.Tuple%608.Item4%2A&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item4">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object, and retrieving the fourth element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Pobierając <ph id="ph1">&lt;xref:System.Type&gt;</ph> obiekt, który reprezentuje <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> obiektu i pobierania czwartym elementem z tablicy, która jest zwracana przez jego <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item4">
          <source>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</source>
          <target state="translated">W poniższym przykładzie nastąpi utworzenie obiektu 17-elementowej spójnej kolekcji zawierającego dane o ludności miasta Detroit (stan Michigan) w latach 1860-2000.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item4">
          <source>The fourth component of the 17-tuple is the population in 1870.</source>
          <target state="translated">Czwartym składnikiem krotki 17 jest populacji w 1870.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item4">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Tuple%608.Item4%2A&gt;</ph> property to display the population value and to calculate the annual rate of population change between 1870 and 1880.</source>
          <target state="translated">W przykładzie użyto <ph id="ph1">&lt;xref:System.Tuple%608.Item4%2A&gt;</ph> właściwości do wyświetlania wartości populacji i roczne szybkość zmian populacji między 1870 i 1880 obliczania.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.Item5">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's fifth component.</source>
          <target state="translated">Pobiera wartość bieżącego <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> piątym składnikiem obiektu.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item5">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's fifth component.</source>
          <target state="translated">Wartość bieżącego <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> piątym składnikiem obiektu.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item5">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%608.Item5%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">Dynamiczne można określić typu <ph id="ph1">&lt;xref:System.Tuple%608.Item5%2A&gt;</ph> składnika w jeden z dwóch sposobów:</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item5">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%608.Item5%2A&gt;</ph> property.</source>
          <target state="translated">Wywołując <ph id="ph1">`GetType`</ph> metody na wartość, która jest zwracana w wyniku <ph id="ph2">&lt;xref:System.Tuple%608.Item5%2A&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item5">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object, and retrieving the fifth element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Pobierając <ph id="ph1">&lt;xref:System.Type&gt;</ph> obiekt, który reprezentuje <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> obiektu i pobierania piątej elementu z tablicy, która jest zwracana przez jego <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item5">
          <source>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</source>
          <target state="translated">W poniższym przykładzie nastąpi utworzenie obiektu 17-elementowej spójnej kolekcji zawierającego dane o ludności miasta Detroit (stan Michigan) w latach 1860-2000.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item5">
          <source>The fifth component of the 17-tuple is the population in 1880.</source>
          <target state="translated">Piątym składnikiem krotki 17 jest populacji w 1880.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item5">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Tuple%608.Item5%2A&gt;</ph> property to display the population value and to calculate the annual rate of population change between 1880 and 1890.</source>
          <target state="translated">W przykładzie użyto <ph id="ph1">&lt;xref:System.Tuple%608.Item5%2A&gt;</ph> właściwości do wyświetlania wartości populacji i roczne szybkość zmian populacji między 1880 i 1890 obliczania.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.Item6">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's sixth component.</source>
          <target state="translated">Pobiera wartość bieżącego <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> składnika szóstego obiektu.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item6">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's sixth component.</source>
          <target state="translated">Wartość bieżącego <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> składnika szóstego obiektu.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item6">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%608.Item6%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">Dynamiczne można określić typu <ph id="ph1">&lt;xref:System.Tuple%608.Item6%2A&gt;</ph> składnika w jeden z dwóch sposobów:</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item6">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%608.Item6%2A&gt;</ph> property.</source>
          <target state="translated">Wywołując <ph id="ph1">`GetType`</ph> metody na wartość, która jest zwracana w wyniku <ph id="ph2">&lt;xref:System.Tuple%608.Item6%2A&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item6">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object, and retrieving the sixth element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Pobierając <ph id="ph1">&lt;xref:System.Type&gt;</ph> obiekt, który reprezentuje <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> obiektu i pobierania szóstego elementu z tablicy, która jest zwracana przez jego <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item6">
          <source>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</source>
          <target state="translated">W poniższym przykładzie nastąpi utworzenie obiektu 17-elementowej spójnej kolekcji zawierającego dane o ludności miasta Detroit (stan Michigan) w latach 1860-2000.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item6">
          <source>The sixth component of the 17-tuple is the population in 1890.</source>
          <target state="translated">Szóstym składnika krotki 17 jest populacji w 1890.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item6">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Tuple%608.Item6%2A&gt;</ph> property to display the population value and to calculate the annual rate of population change between 1890 and 1900.</source>
          <target state="translated">W przykładzie użyto <ph id="ph1">&lt;xref:System.Tuple%608.Item6%2A&gt;</ph> właściwości do wyświetlania wartości populacji i obliczyć roczne szybkość zmian populacji między 1890 i 1900 roku.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.Item7">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's seventh component.</source>
          <target state="translated">Pobiera wartość bieżącego <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> składnika siódmego obiektu.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item7">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's seventh component.</source>
          <target state="translated">Wartość bieżącego <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> składnika siódmego obiektu.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item7">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">Dynamiczne można określić typu <ph id="ph1">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> składnika w jeden z dwóch sposobów:</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item7">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> property.</source>
          <target state="translated">Wywołując <ph id="ph1">`GetType`</ph> metody na wartość, która jest zwracana w wyniku <ph id="ph2">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item7">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object, and retrieving the seventh element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Pobierając <ph id="ph1">&lt;xref:System.Type&gt;</ph> obiekt, który reprezentuje <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> obiektu i pobierania siódmego elementu z tablicy, która jest zwracana przez jego <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item7">
          <source>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</source>
          <target state="translated">W poniższym przykładzie nastąpi utworzenie obiektu 17-elementowej spójnej kolekcji zawierającego dane o ludności miasta Detroit (stan Michigan) w latach 1860-2000.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item7">
          <source>The seventh component of the 17-tuple is the population in 1900.</source>
          <target state="translated">Siódmego składnika krotki 17 jest populacji w 1900 roku.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item7">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> property to display the population value and to calculate the annual rate of population change between 1900 and 1910.</source>
          <target state="translated">W przykładzie użyto <ph id="ph1">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> właściwości do wyświetlania wartości populacji i obliczyć roczne szybkość zmian populacji między 1900 a 1910.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.Rest">
          <source>Gets the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's remaining components.</source>
          <target state="translated">Pobiera bieżący <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> obiektu na pozostałych składników.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's remaining components.</source>
          <target state="translated">Wartość bieżącego <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> obiektu na pozostałych składników.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property returns a nested <ph id="ph2">`Tuple`</ph> object that allows access to the eighth though <bpt id="p1">*</bpt>n<ept id="p1">*</ept>th components of the tuple.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> Właściwość zwraca zagnieżdżoną <ph id="ph2">`Tuple`</ph> obiekt, który zezwala na dostęp do ósmego jednak <bpt id="p1">*</bpt>n<ept id="p1">*</ept>th składniki spójnej kolekcji.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>Depending on the total number of components in the tuple, the values of the eighth through fourteenth components can be retrieved from the nested <ph id="ph1">`Tuple`</ph> object's <ph id="ph2">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> through <ph id="ph3">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> properties.</source>
          <target state="translated">W zależności od całkowita liczba elementów w spójnej kolekcji, można pobrać wartości ósmego za pośrednictwem czternastego składników z zagnieżdżone <ph id="ph1">`Tuple`</ph> obiektu <ph id="ph2">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> za pośrednictwem <ph id="ph3">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>You can then use the <ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property of a nested <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object to retrieve the <ph id="ph3">`Tuple`</ph> object at the next level of nesting.</source>
          <target state="translated">Następnie można użyć <ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> właściwość zagnieżdżoną <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> obiekt, aby pobrać <ph id="ph3">`Tuple`</ph> obiektu na następny poziom zagnieżdżenia.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>You can dynamically determine the number of components in a nested <ph id="ph1">`Tuple`</ph> object that is returned by the <ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property by extracting the digit from its type name.</source>
          <target state="translated">Dynamiczne można określić liczbę składników w zagnieżdżonych <ph id="ph1">`Tuple`</ph> obiektu, który jest zwracany przez <ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> właściwości wyodrębniając cyfrą z nazwy typu.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>The following example provides an illustration.</source>
          <target state="translated">Poniższy przykład stanowi ilustrację.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</source>
          <target state="translated">W poniższym przykładzie nastąpi utworzenie obiektu 17-elementowej spójnej kolekcji zawierającego dane o ludności miasta Detroit (stan Michigan) w latach 1860-2000.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>The seventh component of the 17-tuple is the population in 1900.</source>
          <target state="translated">Siódmego składnika krotki 17 jest populacji w 1900 roku.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property to retrieve the values of the eighth through fourteenth components, and it uses the <ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property of the nested <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> object to retrieve the values of the remaining components.</source>
          <target state="translated">W przykładzie użyto <ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> właściwość do pobierania wartości ósmego za pośrednictwem czternastego składników, a używa <ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> właściwości zagnieżdżone <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> obiektu można pobrać wartości pozostałych składników.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>An object to compare with the current instance.</source>
          <target state="translated">Obiekt, który ma zostać porównany z bieżącym wystąpieniem.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>An object that provides custom rules for comparison.</source>
          <target state="translated">Obiekt dostarczający niestandardowe reguły na potrzeby porównania.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>Compares the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</source>
          <target state="translated">Porównuje bieżący <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> obiektu określony obiekt przy użyciu określona funkcja porównująca i zwraca liczbę całkowitą, która wskazuje, czy bieżący obiekt jest przed, po lub w tym samym miejscu określony obiekt w kolejności sortowania.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>A signed integer that indicates the relative position of this instance and <ph id="ph1">&lt;paramref name="other" /&gt;</ph> in the sort order, as shown in the following table.</source>
          <target state="translated">Całkowita wskazująca pozycję tego wystąpienia i <ph id="ph1">&lt;paramref name="other" /&gt;</ph> w porządku sortowania, jak pokazano w poniższej tabeli.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Wartość</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Description</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Opis elementu</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A negative integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Ujemna liczba całkowita</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance precedes <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> To wystąpienie poprzedza <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance and <ph id="ph3">&lt;paramref name="other" /&gt;</ph> have the same position in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> To wystąpienie i <ph id="ph3">&lt;paramref name="other" /&gt;</ph> mieć to samo położenie w kolejności sortowania.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A positive integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Dodatnia liczba całkowita</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance follows <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Następuje to wystąpienie <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>This member is an explicit interface implementation.</source>
          <target state="translated">Ten element członkowski jest jawną implementacją interfejsu.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IStructuralComparable&gt;</ph> interface.</source>
          <target state="translated">Można go używać tylko wtedy, gdy <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> wystąpienia jest rzutowane na <ph id="ph2">&lt;xref:System.Collections.IStructuralComparable&gt;</ph> interfejsu.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>This method lets you define customized comparisons of <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> objects.</source>
          <target state="translated">Ta metoda pozwala zdefiniować dostosowane porównania <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> obiektów.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>For example, you can use this method to order <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> objects based on the value of a specific component.</source>
          <target state="translated">Na przykład można użyć tej metody do zlecenia <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> obiektów na podstawie wartości z określonego składnika.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>Although this method can be called directly, it is most commonly called by collection-sorting methods that include <ph id="ph1">&lt;xref:System.Collections.IComparer&gt;</ph> parameters to order the members of a collection.</source>
          <target state="translated">Mimo że tę metodę można wywołać bezpośrednio, najczęściej jest wywoływana przez sortowanie kolekcji metod, które obejmują <ph id="ph1">&lt;xref:System.Collections.IComparer&gt;</ph> parametry porządkowania elementów członkowskich kolekcji.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>For example, it is called by the <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A&gt;</ph> method of a <ph id="ph3">&lt;xref:System.Collections.SortedList&gt;</ph> object that is instantiated by using the <ph id="ph4">&lt;xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> constructor.</source>
          <target state="translated">Na przykład jest wywoływana przez <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> — metoda i <ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A&gt;</ph> metody <ph id="ph3">&lt;xref:System.Collections.SortedList&gt;</ph> obiekt, który zostanie uruchomiony przy użyciu <ph id="ph4">&lt;xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> konstruktora.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%608.System%23Collections%23IStructuralComparable%23CompareTo%2A&gt;</ph> method is intended for use in sorting operations.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%608.System%23Collections%23IStructuralComparable%23CompareTo%2A&gt;</ph> Metoda jest przeznaczona do użycia w operacji sortowania.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>It should not be used when the primary purpose of a comparison is to determine whether two objects are equal.</source>
          <target state="translated">Nie należy jej używać, gdy głównym celem porównania jest ustalenie, czy dwa obiekty są sobie równe.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>To determine whether two objects are equal, call the <ph id="ph1">&lt;xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%2A&gt;</ph> method.</source>
          <target state="translated">Aby ustalić, czy dwa obiekty są takie same, należy wywołać <ph id="ph1">&lt;xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The following example creates an array of <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> objects that contains population data for four U.S. cities from 1940 to 2000.</source>
          <target state="translated">Poniższy przykład tworzy tablicę <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> obiektów, które zawierają dane populacji cztery miejscowości USA z 1940 do 2000.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The octuple's first component is the city name.</source>
          <target state="translated">Pierwszy składnik octuple jest nazwą miasta.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The remaining six components represent the population at 10-year intervals from 1940 to 2000.</source>
          <target state="translated">Pozostałe składniki sześciu reprezentować populacji odstępach 10 lat od 1940 do 2000.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The <ph id="ph1">`PopulationComparer`</ph> class provides an <ph id="ph2">&lt;xref:System.Collections.IComparer&gt;</ph> implementation that allows the array of octuples to be sorted by any one of its components.</source>
          <target state="translated"><ph id="ph1">`PopulationComparer`</ph> Klasa udostępnia <ph id="ph2">&lt;xref:System.Collections.IComparer&gt;</ph> implementację, która umożliwia tablicy octuples sortowania za pomocą jednej z jego składników.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>Two values are provided to the <ph id="ph1">`PopulationComparer`</ph> class in its constructor: The position of the component that defines the sort order, and a <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the tuple objects should be sorted in ascending or descending order.</source>
          <target state="translated">Dwie wartości są dostarczane do <ph id="ph1">`PopulationComparer`</ph> klasy w swoich konstruktorach: położenie składnika, który definiuje kolejność sortowania i <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> wartość, która wskazuje, czy obiekty krotki mają być sortowane w kolejności rosnącej lub malejącej.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The example then displays the elements in the array in unsorted order, sorts them by the third component (the population in 1950) and displays them, and then sorts them by the eighth component (the population in 2000) and displays them.</source>
          <target state="translated">Przykładzie następnie wyświetla elementy w tablicy w kolejności nieposortowane, sortowane według trzecim składnikiem (populacji 1950) i wyświetla je, sortowane według składnika ósmego (populacji 2000) i wyświetla je.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;paramref name="other" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="other" /&gt;</ph> nie jest <ph id="ph2">&lt;see cref="T:System.Tuple`8" /&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The object to compare with this instance.</source>
          <target state="translated">Obiekt, który ma zostać porównany z tym wystąpieniem.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>An object that defines the method to use to evaluate whether the two objects are equal.</source>
          <target state="translated">Obiekt definiujący metodę służącą ocenie, czy dwa obiekty są sobie równe.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>Returns a value that indicates whether the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object is equal to a specified object based on a specified comparison method.</source>
          <target state="translated">Zwraca wartość wskazującą, czy bieżący <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> obiekt jest taki sam jak określony obiekt na podstawie metody porównania określony.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current instance is equal to the specified object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli bieżące wystąpienie jest taki sam jak określony obiekt; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">Ten element jest jawną implementacją członków.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> interface.</source>
          <target state="translated">Można go używać tylko wtedy, gdy <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> wystąpienia jest rzutowane na <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> interfejsu.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph> implementation is called only if <ph id="ph2">`other`</ph> is not <ph id="ph3">`null`</ph>, and if it can be successfully cast (in C#) or converted (in Visual Basic) to a <ph id="ph4">&lt;xref:System.Tuple%608&gt;</ph> object that has the same total number of components (including those in nested <ph id="ph5">`Tuple`</ph> objects) of the same types as the current instance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph> Implementacji jest wywoływana tylko wtedy, gdy <ph id="ph2">`other`</ph> nie jest <ph id="ph3">`null`</ph>, jeśli można pomyślnie rzutowanie (C#) i przekonwertować (w języku Visual Basic) <ph id="ph4">&lt;xref:System.Tuple%608&gt;</ph> obiektu, który ma taką samą całkowitą liczbę składników (włącznie z zawartymi w zagnieżdżonych <ph id="ph5">`Tuple`</ph> obiektów) tego samego typu jak bieżące wystąpienie.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29&gt;</ph> method first passes the <ph id="ph2">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> values of the <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> objects to be compared to the <ph id="ph4">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph> implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29&gt;</ph> Metoda przekazuje pierwszy <ph id="ph2">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> wartości <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> obiekty do porównania z <ph id="ph4">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph> implementacji.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>If this method call returns <ph id="ph1">`true`</ph>, the method is called again and passed the <ph id="ph2">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph> values of the two <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> objects.</source>
          <target state="translated">Jeśli wywołanie tej metody zwraca <ph id="ph1">`true`</ph>, metoda jest wywoływana ponownie i przekazany <ph id="ph2">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph> wartości dwa <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> obiektów.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>This continues until the method call returns <ph id="ph1">`false`</ph> when it compares a specific pair of values, or the two <ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> values are passed to the method.</source>
          <target state="translated">Ten proces jest kontynuowany do momentu wywołania metody, które zwraca <ph id="ph1">`false`</ph> podczas porównywania konkretną parą wartości lub dwa <ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> wartości są przekazywane do metody.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>An object whose <ph id="ph1">&lt;see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /&gt;</ph> method calculates the hash code of the current <ph id="ph2">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object.</source>
          <target state="translated">Obiekt których <ph id="ph1">&lt;see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /&gt;</ph> metody oblicza wartość skrótu bieżącego <ph id="ph2">&lt;see cref="T:System.Tuple`8" /&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>Calculates the hash code for the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object by using a specified computation method.</source>
          <target state="translated">Oblicza wartość skrótu dla bieżącego <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> obiektu za pomocą metody określonej obliczeń.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">Kod skrótu 32-bitowej liczby całkowitej ze znakiem.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">Ten element jest jawną implementacją członków.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> interface.</source>
          <target state="translated">Można go używać tylko wtedy, gdy <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> wystąpienia jest rzutowane na <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> interfejsu.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>The method simply wraps a call to the <ph id="ph1">`comparer`</ph> object's <ph id="ph2">&lt;xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType&gt;</ph> implementation.</source>
          <target state="translated">Metoda opakowuje po prostu wywołanie <ph id="ph1">`comparer`</ph> obiektu <ph id="ph2">&lt;xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType&gt;</ph> implementacji.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>The algorithm used to compute the hash code should return the same hash code for two <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> objects that are considered to be equal.</source>
          <target state="translated">Algorytm używany do obliczania skrótu ma zwracać taki sam skrót dla dwóch <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> obiektów, które są traktowane jako równe.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>An object to compare with the current instance.</source>
          <target state="translated">Obiekt, który ma zostać porównany z bieżącym wystąpieniem.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>Compares the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</source>
          <target state="translated">Porównuje bieżący <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> obiekt do określonego obiektu i zwraca liczbę całkowitą, która wskazuje, czy bieżący obiekt jest przed, po lub w tym samym miejscu określony obiekt w kolejności sortowania.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>A signed integer that indicates the relative position of this instance and <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> in the sort order, as shown in the following table.</source>
          <target state="translated">Całkowita wskazująca pozycję tego wystąpienia i <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> w porządku sortowania, jak pokazano w poniższej tabeli.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Wartość</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Description</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Opis elementu</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A negative integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Ujemna liczba całkowita</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance precedes <ph id="ph3">&lt;paramref name="obj" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> To wystąpienie poprzedza <ph id="ph3">&lt;paramref name="obj" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance and <ph id="ph3">&lt;paramref name="obj" /&gt;</ph> have the same position in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> To wystąpienie i <ph id="ph3">&lt;paramref name="obj" /&gt;</ph> mieć to samo położenie w kolejności sortowania.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A positive integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Dodatnia liczba całkowita</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance follows <ph id="ph3">&lt;paramref name="obj" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Następuje to wystąpienie <ph id="ph3">&lt;paramref name="obj" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">Ten element jest jawną implementacją członków.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IComparable&gt;</ph> interface.</source>
          <target state="translated">Można go używać tylko wtedy, gdy <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> wystąpienia jest rzutowane na <ph id="ph2">&lt;xref:System.IComparable&gt;</ph> interfejsu.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>This method provides the <ph id="ph1">&lt;xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType&gt;</ph> implementation for the <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> class.</source>
          <target state="translated">Ta metoda zapewnia <ph id="ph1">&lt;xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType&gt;</ph> implementację <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>Although the method can be called directly, it is most commonly called by the default overloads of collection-sorting methods, such as <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType&gt;</ph>, to order the members of a collection.</source>
          <target state="translated">Mimo że można bezpośrednio wywołać metody, najczęściej jest wywoływana przez przeciążeń domyślne sortowanie kolekcji metod, takich jak <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType&gt;</ph> i <ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType&gt;</ph>, porządkowania elementów członkowskich kolekcji.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%608.System%23IComparable%23CompareTo%2A&gt;</ph> method is intended for use in sorting operations.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%608.System%23IComparable%23CompareTo%2A&gt;</ph> Metoda jest przeznaczona do użycia w operacji sortowania.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>It should not be used when the primary purpose of a comparison is to determine whether two objects are equal.</source>
          <target state="translated">Nie należy jej używać, gdy głównym celem porównania jest ustalenie, czy dwa obiekty są sobie równe.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>To determine whether two objects are equal, call the <ph id="ph1">&lt;xref:System.Tuple%608.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Aby ustalić, czy dwa obiekty są takie same, należy wywołać <ph id="ph1">&lt;xref:System.Tuple%608.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>This method uses the default object comparer to compare each component.</source>
          <target state="translated">Ta metoda używa domyślna funkcja porównująca obiekt do porównania poszczególnych składników.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>The following example creates an array of octuples whose components are integers that contain a range of prime numbers.</source>
          <target state="translated">Poniższy przykład tworzy tablicę octuples, których składniki są liczb całkowitych, które zawiera zakresu liczb pierwszych.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>The example displays the elements of the array in unsorted order, sorts the array, and then displays the array in sorted order.</source>
          <target state="translated">Przykładzie wyświetla elementy tablicy w kolejności nieposortowane, sortuje tablicy, a następnie wyświetla tablicy posortowane.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>The output shows that the array has been sorted by <ph id="ph1">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph>, or the tuple's first component.</source>
          <target state="translated">Dane wyjściowe zawierają posortowane według tablicy <ph id="ph1">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph>, lub pierwszy składnik spójnej kolekcji.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>Note that the example does not directly call the <ph id="ph1">&lt;xref:System.Tuple%608.System%23IComparable%23CompareTo%28System.Object%29&gt;</ph> method.</source>
          <target state="translated">Należy pamiętać, że przykładzie nie mogą bezpośrednio wywoływać <ph id="ph1">&lt;xref:System.Tuple%608.System%23IComparable%23CompareTo%28System.Object%29&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>This method is called implicitly by the <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29&gt;</ph> method for each element in the array.</source>
          <target state="translated">Ta metoda jest wywoływana przez niejawnie <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29&gt;</ph> metody dla każdego elementu w tablicy.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> nie jest <ph id="ph2">&lt;see cref="T:System.Tuple`8" /&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>The index of the specified <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> element.</source>
          <target state="translated">Określony indeks <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> elementu.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source><bpt id="p1">&lt;c&gt;</bpt>index<ept id="p1">&lt;/c&gt;</ept> can range from 0 for <ph id="ph1">&lt;see langword="Item1" /&gt;</ph> to one less than the number of elements in the <ph id="ph2">&lt;see langword="Tuple" /&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>Indeks<ept id="p1">&lt;/c&gt;</ept> można z zakresu od 0 do <ph id="ph1">&lt;see langword="Item1" /&gt;</ph> na mniejszy niż liczba elementów w jeden <ph id="ph2">&lt;see langword="Tuple" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>Gets the value of the specified <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> element.</source>
          <target state="translated">Pobiera wartość określonego <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> elementu.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>The value of the <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> element at the specified position.</source>
          <target state="translated">Wartość <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> elementu w określonej pozycji.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType&gt;</ph> property is an explicit interface implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType&gt;</ph> Właściwość jest jawnej implementacji interfejsu.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>To call it, you must cast or convert the <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object to an <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph> interface object.</source>
          <target state="translated">Aby wywołać go, należy rzutowania lub konwersji <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> do obiektu <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph> obiektu interfejsu.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> jest mniejsza niż 0.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is greater than or equal to <ph id="ph2">&lt;see cref="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> jest większe lub równe <ph id="ph2">&lt;see cref="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length">
          <source>Gets the number of elements in the <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph>.</source>
          <target state="translated">Pobiera liczbę elementów w <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length">
          <source>The number of elements in the <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph>.</source>
          <target state="translated">Liczba elementów w <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Length%2A&gt;</ph> property is an explicit interface implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Length%2A&gt;</ph> Właściwość jest jawnej implementacji interfejsu.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length">
          <source>To call it, you must cast or convert the <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> type to an <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph> interface object.</source>
          <target state="translated">Aby wywołać go, należy rzutowania lub konwersji <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> typ <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph> obiektu interfejsu.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.ToString">
          <source>Returns a string that represents the value of this <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> instance.</source>
          <target state="translated">Zwraca ciąg reprezentujący wartość to <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> wystąpienia.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.ToString">
          <source>The string representation of this <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object.</source>
          <target state="translated">Reprezentacja ciągu <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.ToString">
          <source>The string returned by this method takes the form (<bpt id="p1">*</bpt>Item1<ept id="p1">*</ept>, <bpt id="p2">*</bpt>Item2<ept id="p2">*</ept>, <bpt id="p3">*</bpt>Item3<ept id="p3">*</ept>, <bpt id="p4">*</bpt>Item4<ept id="p4">*</ept>, <ph id="ph1">`Item5, Item6, Item7`</ph>, <bpt id="p5">*</bpt>Item8<ept id="p5">*</ept>…), where <bpt id="p6">*</bpt>Item1<ept id="p6">*</ept>, <bpt id="p7">*</bpt>Item2<ept id="p7">*</ept>, <bpt id="p8">*</bpt>Item3<ept id="p8">*</ept>, <bpt id="p9">*</bpt>Item4<ept id="p9">*</ept>, <bpt id="p10">*</bpt>Item5<ept id="p10">*</ept>, <bpt id="p11">*</bpt>Item6<ept id="p11">*</ept>, and <bpt id="p12">*</bpt>Item7<ept id="p12">*</ept> represent the values of the <ph id="ph2">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Tuple%608.Item3%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Tuple%608.Item4%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Tuple%608.Item5%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Tuple%608.Item6%2A&gt;</ph>, and <ph id="ph8">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> properties.</source>
          <target state="translated">Długość ciągu zwróconego przez tę metodę ma postać (<bpt id="p1">*</bpt>Item1<ept id="p1">*</ept>, <bpt id="p2">*</bpt>Item2<ept id="p2">*</ept>, <bpt id="p3">*</bpt>Item3<ept id="p3">*</ept>, <bpt id="p4">*</bpt>Item4<ept id="p4">*</ept>, <ph id="ph1">`Item5, Item6, Item7`</ph>, <bpt id="p5">*</bpt> Item8 —<ept id="p5">*</ept>...), gdzie <bpt id="p6">*</bpt>Item1<ept id="p6">*</ept>, <bpt id="p7">*</bpt>Item2<ept id="p7">*</ept>, <bpt id="p8">*</bpt>Item3<ept id="p8">*</ept>, <bpt id="p9">*</bpt>Item4<ept id="p9">*</ept>, <bpt id="p10">*</bpt>Item5<ept id="p10">*</ept>, <bpt id="p11">*</bpt>Item6<ept id="p11">*</ept>, i <bpt id="p12">*</bpt>Item7<ept id="p12">*</ept> reprezentują wartości <ph id="ph2">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Tuple%608.Item3%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Tuple%608.Item4%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Tuple%608.Item5%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Tuple%608.Item6%2A&gt;</ph>, i <ph id="ph8">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.ToString">
          <source><bpt id="p1">*</bpt>Item8<ept id="p1">*</ept> represents the value of the <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object's <ph id="ph2">`Next.Item1`</ph> property.</source>
          <target state="translated"><bpt id="p1">*</bpt>Item8 —<ept id="p1">*</ept> reprezentuje wartość <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> obiektu <ph id="ph2">`Next.Item1`</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.ToString">
          <source>The value of any additional nested components follow <bpt id="p1">*</bpt>Item8<ept id="p1">*</ept>.</source>
          <target state="translated">Wykonaj wartość dodatkowe składniki zagnieżdżonych <bpt id="p1">*</bpt>item8 —<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.ToString">
          <source>If any of the property values is <ph id="ph1">`null`</ph>, it is represented as <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Jeśli dowolna z wartości właściwości jest <ph id="ph1">`null`</ph>, jest reprezentowany jako <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.ToString">
          <source>The following example creates a 17-tuple that contains population data for the city of Detroit, Michigan, from 1860 to 1900.</source>
          <target state="translated">Poniższy przykład tworzy krotka 17 zawierający dane populacji dla miasta z Detroit, Michigan, z 1860 do 1900.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.ToString">
          <source>It then uses the <ph id="ph1">&lt;xref:System.Tuple%608.ToString%2A&gt;</ph> method to display the tuple's data.</source>
          <target state="translated">Następnie używa <ph id="ph1">&lt;xref:System.Tuple%608.ToString%2A&gt;</ph> metodę w celu wyświetlenia danych spójnej kolekcji.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>