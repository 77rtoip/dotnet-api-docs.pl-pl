<Type Name="IAsyncResult" FullName="System.IAsyncResult">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2276b9f380f6f18b31bcbd48397cc4ae980b77ed" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30744032" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IAsyncResult" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAsyncResult" />
  <TypeSignature Language="DocId" Value="T:System.IAsyncResult" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAsyncResult" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAsyncResult" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje stan operacji asynchronicznej.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IAsyncResult> Interfejs jest implementowany przez klasy zawierające metody, które mogą działać w sposób asynchroniczny. Jest zwracany typ metody, które inicjują operację asynchroniczną, takich jak <xref:System.IO.FileStream.BeginRead%2A?displayProperty=nameWithType>, i jest przekazywany do metody, które zawierają operację asynchroniczną, takich jak <xref:System.IO.FileStream.EndRead%2A?displayProperty=nameWithType>. <xref:System.IAsyncResult> obiekty również są przekazywane do metody wywoływane przez <xref:System.AsyncCallback> deleguje po zakończeniu operacji asynchronicznej.  
  
 Obiekt, który obsługuje <xref:System.IAsyncResult> interfejsu przechowuje informacje o stanie dla operacji asynchronicznej i udostępnia obiekt synchronizacji, aby umożliwić wątków, aby być sygnalizowane po zakończeniu operacji.  
  
> [!NOTE]
>  <xref:System.Runtime.Remoting.Messaging.AsyncResult> Klasa jest implementacją <xref:System.IAsyncResult> zwróconego przez `BeginInvoke` metody, używając delegata do asynchronicznego wywołania metody.  
  
 Aby uzyskać szczegółowy opis sposobu <xref:System.IAsyncResult> interfejs jest używany, zobacz [wywołanie asynchroniczne synchroniczne metody](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md) tematu.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób użycia <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A> właściwości do pobrania <xref:System.Threading.WaitHandle>i Oczekiwanie na wywołanie asynchroniczne obiektu delegowanego. <xref:System.Threading.WaitHandle> Jest sygnalizowane po zakończeniu wywołania asynchronicznego i poczekaj na jego, wywołując <xref:System.Threading.WaitHandle.WaitOne%2A> metody.  
  
 Przykład składa się z dwóch klas: klasy zawierającej metodę, która jest wywoływana asynchronicznie, a klasa, która zawiera `Main` metodę, która sprawia, że wywołanie.  
  
 Więcej informacji oraz więcej przykładów wywoływania metod asynchronicznie przy użyciu delegatów, zobacz [wywołanie asynchroniczne synchroniczne metody](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#3](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/waithandle.cpp#3)]
[!code-csharp[AsyncDelegateExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/waithandle.cs#3)]
[!code-vb[AsyncDelegateExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/WaitHandle.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AsyncState">
      <MemberSignature Language="C#" Value="public object AsyncState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AsyncState" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.AsyncState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ AsyncState { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt użytkownika, który kwalifikacji lub zawierający informacje o operacji asynchronicznej.</summary>
        <value>Zdefiniowane przez użytkownika obiekt podlegający kwalifikacji lub zawierający informacje o operacji asynchronicznej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość zwraca obiekt, który jest ostatnim parametrem metody, która inicjuje operację asynchroniczną.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState%2A> właściwość jest używana do przekazywania informacji do metody wywołania zwrotnego. Ostatni parametr `BeginInvoke` wywołania metody jest ciąg formatu, który używa metody wywołania zwrotnego do sformatowania komunikatu wyjściowego.  
  
 Przykład składa się z dwóch klas: klasy zawierającej metodę, która jest wywoływana asynchronicznie, a klasa, która zawiera `Main` metodę, która sprawia, że wywołanie.  
  
 Więcej informacji na temat działania w tym przykładzie wywołania zwrotnego i więcej przykładów wywoływania metod asynchronicznie przy użyciu delegatów, zobacz [wywołanie asynchroniczne synchroniczne metody](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#5](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/callback.cpp#5)]
[!code-csharp[AsyncDelegateExamples#5](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/callback.cs#5)]
[!code-vb[AsyncDelegateExamples#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/callback.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Implementuje tę właściwość, aby umożliwić wywołującego operację asynchroniczną można uzyskać przez aplikację obiektu określonego w chwili rozpoczęcia operacji.</para>
        </block>
        <block subset="none" type="usage">
          <para>Ten obiekt może służyć do przekazywania informacji o stanie dla operacji asynchronicznej do <see cref="T:System.AsyncCallback" /> podane.</para>
        </block>
        <altmember cref="T:System.AsyncCallback" />
      </Docs>
    </Member>
    <Member MemberName="AsyncWaitHandle">
      <MemberSignature Language="C#" Value="public System.Threading.WaitHandle AsyncWaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle AsyncWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.AsyncWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncWaitHandle As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::WaitHandle ^ AsyncWaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Threading.WaitHandle" /> umożliwiające poczekaj na zakończenie operacji asynchronicznych.</summary>
        <value>A <see cref="T:System.Threading.WaitHandle" /> umożliwiające poczekaj na zakończenie operacji asynchronicznych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana umożliwia klientowi poczekaj na zakończenie zamiast sondowania operacji asynchronicznych <xref:System.IAsyncResult.IsCompleted%2A> dopóki zawiera operację. Wartość zwracana może służyć do wykonywania <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, lub <xref:System.Threading.WaitHandle.WaitAll%2A> operacji.  
  
 Środowisko uruchomieniowe języka wspólnego udostępnia szereg waitable obiekty, takie jak <xref:System.Threading.ManualResetEvent>, <xref:System.Threading.AutoResetEvent>, i <xref:System.Threading.Mutex>, które duplikatów elementy podstawowe synchronizacji Win32.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób użycia <xref:System.IAsyncResult.AsyncWaitHandle%2A> właściwości do pobrania <xref:System.Threading.WaitHandle>i Oczekiwanie na wywołanie asynchroniczne obiektu delegowanego. <xref:System.Threading.WaitHandle> Jest sygnalizowane po zakończeniu wywołania asynchronicznego i poczekaj na jego, wywołując <xref:System.Threading.WaitHandle.WaitOne%2A> metody.  
  
 Przykład składa się z dwóch klas: klasy zawierającej metodę, która jest wywoływana asynchronicznie, a klasa, która zawiera `Main` metodę, która sprawia, że wywołanie.  
  
 Więcej informacji oraz więcej przykładów wywoływania metod asynchronicznie przy użyciu delegatów, zobacz [wywołanie asynchroniczne synchroniczne metody](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#3](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/waithandle.cpp#3)]
[!code-csharp[AsyncDelegateExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/waithandle.cs#3)]
[!code-vb[AsyncDelegateExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/WaitHandle.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Obiekt, który implementuje <see cref="T:System.IAsyncResult" /> nie trzeba tworzyć <see cref="T:System.Threading.WaitHandle" /> do momentu <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> odczytać właściwości. Jest wybór <see cref="T:System.IAsyncResult" /> implementujący. Jednak jeśli tworzy implementujący <see cref="P:System.IAsyncResult.AsyncWaitHandle" />, jest odpowiedzialny za implementujący w celu zasygnalizowania <see cref="T:System.Threading.WaitHandle" /> który spowoduje przerwanie czas oczekiwania w odpowiednim czasie. Na przykład <see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /> kończy Oczekiwanie w imieniu wywołującego zwrócona asynchronicznie wywołana metoda. Raz utworzone, <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> powinny być aktywne, dopóki użytkownik wywołuje metodę, która zawiera operację asynchroniczną. W tym czasie obiekt za <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> mogą zostać odrzucone.</para>
        </block>
        <block subset="none" type="usage">
          <para>Klienci, którzy poczekaj na zakończenie (w przeciwieństwie do sondowania) operacji ta właściwość umożliwia uzyskanie obiektu synchronizacji oczekiwania.  
  
 <block subset="none" type="note"><para>  
 Jeśli używasz <see langword="BeginInvoke" /> metody delegata wywołania metody asynchronicznie i uzyskanie dojście oczekiwania z powstałe w ten sposób <see cref="T:System.IAsyncResult" />, zalecamy zamknięcie dojście oczekiwania, natychmiast po zakończeniu korzystania, wywołując <see cref="M:System.Threading.WaitHandle.Close" /> metody. Jeśli po prostu zwolnić wszystkie odwołania do dojścia oczekiwania, zasoby systemu są zwalniane podczas odzyskiwania pamięci Zwraca dojście oczekiwania, ale wyrzucanie elementów bezużytecznych działa wydajniej, gdy obiekty możliwe do rozporządzania są jawnie zamknięty lub usunięty. Aby uzyskać więcej informacji, zobacz <see cref="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle" /> właściwości.  
  
</para></block></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CompletedSynchronously">
      <MemberSignature Language="C#" Value="public bool CompletedSynchronously { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CompletedSynchronously" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.CompletedSynchronously" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CompletedSynchronously As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CompletedSynchronously { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy operacja asynchroniczna została ukończona synchronicznie.</summary>
        <value>
          <see langword="true" /> Jeśli operacja asynchroniczna ukończona synchronicznie; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli kończenie synchroniczne wywołania zostanie wykryta w <xref:System.AsyncCallback> delegata, jest prawdopodobne, że wątek, który zainicjował operację asynchroniczną będzie bieżącego wątku.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Większość obiektów implementujących z <see cref="T:System.IAsyncResult" /> interfejsu nie będzie używać tej właściwości oraz powinna zwrócić <see langword="false" />. Począwszy od [!INCLUDE[net_v45](~/includes/net-v45-md.md)], zadań, który jest tworzony z <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)" /> — metoda nie zostanie wykonana, jeśli ta właściwość nie jest zaimplementowana poprawnie. Zobacz [zgodność aplikacji w 4.5](~/docs/framework/migration-guide/application-compatibility-in-the-net-framework-4-5.md).</para>
        </block>
        <block subset="none" type="usage">
          <para>Ta właściwość umożliwia określenie, czy operacja asynchroniczna została ukończona synchronicznie. Na przykład można zwrócić ta właściwość <see langword="true" /> asynchronicznej operacji We/Wy, jeśli żądanie operacji We/Wy jest mały.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public bool IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.IsCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompleted { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy operacja asynchroniczna została ukończona.</summary>
        <value>
          <see langword="true" /> Jeśli operacja została zakończona; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy ta właściwość jest `true`, można założyć, można bezpiecznie odrzucić wszystkie zasoby przydzielić do użytku przez operację asynchroniczną.  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie <xref:System.IAsyncResult.IsCompleted%2A> właściwość <xref:System.IAsyncResult> do odnajdywania, po zakończeniu wykonywania wywołanie asynchroniczne. W takim przypadku wywołanie asynchroniczne jest nawiązywane za pomocą `BeginInvoke` metody delegata. Można na przykład <xref:System.IAsyncResult.IsCompleted%2A> właściwości sondowanie ukończenia podczas wywołania asynchronicznego wprowadzanych przez wątek który usług interfejsu użytkownika. Sondowanie w celu ukończenia umożliwia wątek wywołujący kontynuować wykonywanie podczas wywołania asynchronicznego wykonuje na <xref:System.Threading.ThreadPool> wątku.  
  
 Przykład składa się z dwóch klas: klasy zawierającej metodę, która jest wywoływana asynchronicznie, a klasa, która zawiera `Main` metodę, która sprawia, że wywołanie.  
  
 Więcej informacji oraz więcej przykładów wywoływania metod asynchronicznie przy użyciu delegatów, zobacz [wywołanie asynchroniczne synchroniczne metody](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#4](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/polling.cpp#4)]
[!code-csharp[AsyncDelegateExamples#4](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/polling.cs#4)]
[!code-vb[AsyncDelegateExamples#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/polling.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Implementacje zwykle zwraca wartość pola prywatnego lub wewnętrznego testu jako wartość tej właściwości.</para>
        </block>
        <block subset="none" type="usage">
          <para>Klienci, których sondowania stanu operacji (zamiast oczekiwania na obiekt synchronizacji) używają tej właściwości można określić stanu operacji.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>