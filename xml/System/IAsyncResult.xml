<Type Name="IAsyncResult" FullName="System.IAsyncResult">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="af8939f7e8a088eef165eb31b54cab1092f9abee" />
    <Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="12/01/2018" />
    <Meta Name="ms.locfileid" Value="52733216" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IAsyncResult" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAsyncResult" />
  <TypeSignature Language="DocId" Value="T:System.IAsyncResult" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAsyncResult" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAsyncResult" />
  <TypeSignature Language="F#" Value="type IAsyncResult = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje stan operacji asynchronicznej.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IAsyncResult> Interfejs jest implementowany przez klasy zawierające metody, które mogą działać w sposób asynchroniczny. Jest zwracany typ metody, które Inicjowanie operacji asynchronicznej, takich jak <xref:System.IO.FileStream.BeginRead%2A?displayProperty=nameWithType>, i jest przekazywany do metody, które zawierają operację asynchroniczną, takich jak <xref:System.IO.FileStream.EndRead%2A?displayProperty=nameWithType>. <xref:System.IAsyncResult> obiekty również są przekazywane do metody wywoływane przez <xref:System.AsyncCallback> deleguje po zakończeniu operacji asynchronicznej.  
  
 Obiekt, który obsługuje <xref:System.IAsyncResult> interfejsu przechowuje informacje o stanie dla operacji asynchronicznej i dostarcza obiekt synchronizacji, aby zezwolić na wątki, które ma być zasygnalizowany, po zakończeniu operacji.  
  
> [!NOTE]
>  <xref:System.Runtime.Remoting.Messaging.AsyncResult> Klasa jest implementacją <xref:System.IAsyncResult> zwracanym przez `BeginInvoke` metody, gdy użycie delegowania do wywołania metody w sposób asynchroniczny.  
  
 Aby uzyskać szczegółowy opis sposobu <xref:System.IAsyncResult> interfejs jest używany, zobacz [wywołanie asynchroniczne synchroniczne metody](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md) tematu.  
  
   
  
## Examples  
 Poniższy przykład pokazuje sposób użycia <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A> właściwości do pobrania <xref:System.Threading.WaitHandle>i jak czekać na wywołanie asynchroniczne obiektu delegowanego. <xref:System.Threading.WaitHandle> Jest sygnalizowane po ukończeniu wywołania asynchronicznego i możesz poczekać, aż go przez wywołanie metody <xref:System.Threading.WaitHandle.WaitOne%2A> metody.  
  
 Przykład składa się z dwóch klas: klasy zawierającej metodę, która nosi nazwę asynchronicznej, a klasa, która zawiera `Main` metodę, która wywołuje tę funkcję.  
  
 Więcej informacji i wywoływania metod asynchronicznie przy użyciu delegatów więcej przykładów, zobacz [wywołanie asynchroniczne synchroniczne metody](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#3](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/waithandle.cpp#3)]
[!code-csharp[AsyncDelegateExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/waithandle.cs#3)]
[!code-vb[AsyncDelegateExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/WaitHandle.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AsyncState">
      <MemberSignature Language="C#" Value="public object AsyncState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AsyncState" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.AsyncState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ AsyncState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AsyncState : obj" Usage="System.IAsyncResult.AsyncState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt zdefiniowany przez użytkownika, podlegający kwalifikacji lub zawierający informacje o operacji asynchronicznej.</summary>
        <value>Zdefiniowane przez użytkownika obiekt podlegający kwalifikacji lub zawierający informacje o operacji asynchronicznej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość zwraca obiekt, który jest ostatnim parametrem metody, która inicjuje operację asynchroniczną.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób, w jaki <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState%2A> właściwość jest używana do przekazywania informacji do metody wywołania zwrotnego. Ostatni parametr `BeginInvoke` wywołania metody jest ciąg formatu, który korzysta z metody wywołania zwrotnego do sformatowania komunikatu wyjściowego.  
  
 Przykład składa się z dwóch klas: klasy zawierającej metodę, która nosi nazwę asynchronicznej, a klasa, która zawiera `Main` metodę, która wywołuje tę funkcję.  
  
 Aby dowiedzieć się więcej o tym, jak działa ten przykład wywołania zwrotnego i wywoływania metod asynchronicznie przy użyciu delegatów więcej przykładów, zobacz [wywołanie asynchroniczne synchroniczne metody](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#5](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/callback.cpp#5)]
[!code-csharp[AsyncDelegateExamples#5](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/callback.cs#5)]
[!code-vb[AsyncDelegateExamples#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/callback.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Zaimplementuj tę właściwość, aby zezwolić na obiekt wywołujący operacji asynchronicznej, aby uzyskać obiekt zdefiniowany przez aplikację określony na początku operacji.</para>
        </block>
        <block subset="none" type="usage">
          <para>Ten obiekt może służyć do przekazywania informacji o stanie dla operacji asynchronicznej, aby <see cref="T:System.AsyncCallback" /> przez Ciebie.</para>
        </block>
        <altmember cref="T:System.AsyncCallback" />
      </Docs>
    </Member>
    <Member MemberName="AsyncWaitHandle">
      <MemberSignature Language="C#" Value="public System.Threading.WaitHandle AsyncWaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle AsyncWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.AsyncWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncWaitHandle As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::WaitHandle ^ AsyncWaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AsyncWaitHandle : System.Threading.WaitHandle" Usage="System.IAsyncResult.AsyncWaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Threading.WaitHandle" /> umożliwiający poczekaj na zakończenie operacji asynchronicznej.</summary>
        <value>A <see cref="T:System.Threading.WaitHandle" /> umożliwiający poczekaj na zakończenie operacji asynchronicznej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana umożliwia klientowi poczekaj na zakończenie zamiast sondowania operacji asynchronicznych <xref:System.IAsyncResult.IsCompleted%2A> aż stwierdza, wykonać operację. Zwracana wartość może służyć do wykonywania <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, lub <xref:System.Threading.WaitHandle.WaitAll%2A> operacji.  
  
 Środowisko uruchomieniowe języka wspólnego udostępnia wiele oczekujący obiektów, takich jak <xref:System.Threading.ManualResetEvent>, <xref:System.Threading.AutoResetEvent>, i <xref:System.Threading.Mutex>, z których wszystkie duplikatów elementów podstawowych synchronizacji Win32.  
  
   
  
## Examples  
 Poniższy przykład pokazuje sposób użycia <xref:System.IAsyncResult.AsyncWaitHandle%2A> właściwości do pobrania <xref:System.Threading.WaitHandle>i jak czekać na wywołanie asynchroniczne obiektu delegowanego. <xref:System.Threading.WaitHandle> Jest sygnalizowane po ukończeniu wywołania asynchronicznego i możesz poczekać, aż go przez wywołanie metody <xref:System.Threading.WaitHandle.WaitOne%2A> metody.  
  
 Przykład składa się z dwóch klas: klasy zawierającej metodę, która nosi nazwę asynchronicznej, a klasa, która zawiera `Main` metodę, która wywołuje tę funkcję.  
  
 Więcej informacji i wywoływania metod asynchronicznie przy użyciu delegatów więcej przykładów, zobacz [wywołanie asynchroniczne synchroniczne metody](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#3](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/waithandle.cpp#3)]
[!code-csharp[AsyncDelegateExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/waithandle.cs#3)]
[!code-vb[AsyncDelegateExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/WaitHandle.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Obiekt, który implementuje <see cref="T:System.IAsyncResult" /> nie trzeba tworzyć <see cref="T:System.Threading.WaitHandle" /> aż <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> odczytana właściwość. Jest wybór <see cref="T:System.IAsyncResult" /> implementujący. Jednak jeśli tworzy implementujący <see cref="P:System.IAsyncResult.AsyncWaitHandle" />, jest odpowiedzialny za implementujący w celu sygnalizowania, że <see cref="T:System.Threading.WaitHandle" /> utracą ważność, czas oczekiwania w odpowiednim czasie. Na przykład <see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /> kończy Oczekiwanie w imieniu obiektu wywołującego, po powrocie z metody wywoływane asynchronicznie. Po utworzeniu <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> powinny być przechowywane aktywne, dopóki użytkownik wywołuje metodę, która zawiera operację asynchroniczną. W tym czasie obiekt spod <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> mogą zostać odrzucone.</para>
        </block>
        <block subset="none" type="usage">
          <para>Ta właściwość jest używana przez klientów, którzy poczekaj, aż operacja do wykonania (w przeciwieństwie do sondowania) do uzyskania obiektu synchronizacji oczekiwania.  
  
 <block subset="none" type="note"><para>  
 Kiedy używasz <see langword="BeginInvoke" /> metody delegata wywołania metody asynchroniczne i uzyskać dojście oczekiwania z wynikowy <see cref="T:System.IAsyncResult" />, firma Microsoft zaleca, zamknij dojście oczekiwania, jak najszybciej po zakończeniu korzystania z niego, wywołując <see cref="M:System.Threading.WaitHandle.Close" /> metody. Jeśli możesz po prostu zwolnić wszystkie odwołania do dojścia oczekiwania, zasoby systemu są zwalniane, podczas wyrzucania elementów bezużytecznych odzyskuje dojście oczekiwania, ale wyrzucania elementów bezużytecznych działa bardziej efektywnie obiekty możliwe do rozporządzania są jawnie zamknięty lub usunięty. Aby uzyskać więcej informacji, zobacz <see cref="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle" /> właściwości.  
  
</para></block></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CompletedSynchronously">
      <MemberSignature Language="C#" Value="public bool CompletedSynchronously { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CompletedSynchronously" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.CompletedSynchronously" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CompletedSynchronously As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CompletedSynchronously { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CompletedSynchronously : bool" Usage="System.IAsyncResult.CompletedSynchronously" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy operacja asynchroniczna została zakończona synchronicznie.</summary>
        <value>
          <see langword="true" /> Jeśli operacja asynchroniczna została zakończona synchronicznie; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli kończenie synchroniczne wywołania wykryciu <xref:System.AsyncCallback> delegata, jest prawdopodobne, że wątek, który zainicjował operację asynchroniczną jest bieżący wątek.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Większość implementacji programu <see cref="T:System.IAsyncResult" /> interfejsu nie będzie używać tej właściwości i powinien zwrócić <see langword="false" />. Począwszy od [!INCLUDE[net_v45](~/includes/net-v45-md.md)], zadanie, które są tworzone za pomocą <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)" /> metody nie zostanie ukończone, jeśli ta właściwość nie jest zaimplementowana poprawnie. Zobacz [zgodność aplikacji w 4.5](~/docs/framework/migration-guide/application-compatibility-in-the-net-framework-4-5.md).</para>
        </block>
        <block subset="none" type="usage">
          <para>Użyj tej właściwości, aby określić, jeśli operacja asynchroniczna została zakończona synchronicznie. Na przykład, można zwrócić tę właściwość <see langword="true" /> asynchronicznej operacji We/Wy, jeśli żądanie operacji We/Wy jest mały.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public bool IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.IsCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompleted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCompleted : bool" Usage="System.IAsyncResult.IsCompleted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy operacja asynchroniczna została zakończona.</summary>
        <value>
          <see langword="true" /> Jeśli operacja została zakończona; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy ta właściwość jest `true`, można założyć, można bezpiecznie odrzucić wszystkie zasoby przydzielić do użytku przez operację asynchroniczną.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać <xref:System.IAsyncResult.IsCompleted%2A> właściwość <xref:System.IAsyncResult> do odnajdywania, po zakończeniu wywołania asynchronicznego. W takim przypadku wywołania asynchronicznego nawiązuje się za pomocą `BeginInvoke` metody delegata. Można na przykład <xref:System.IAsyncResult.IsCompleted%2A> właściwość sondowanie uzupełniania podczas wywołania asynchronicznego z wątku, usług interfejsu użytkownika. Sondowanie w celu ukończenia umożliwia wątku wywołującego do kontynuowania wykonywania podczas wywołania asynchronicznego dla wykonuje <xref:System.Threading.ThreadPool> wątku.  
  
 Przykład składa się z dwóch klas: klasy zawierającej metodę, która nosi nazwę asynchronicznej, a klasa, która zawiera `Main` metodę, która wywołuje tę funkcję.  
  
 Więcej informacji i wywoływania metod asynchronicznie przy użyciu delegatów więcej przykładów, zobacz [wywołanie asynchroniczne synchroniczne metody](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#4](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/polling.cpp#4)]
[!code-csharp[AsyncDelegateExamples#4](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/polling.cs#4)]
[!code-vb[AsyncDelegateExamples#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/polling.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Implementacje zazwyczaj zwróci wartości pola prywatnego lub wewnętrznego testu jako wartość tej właściwości.</para>
        </block>
        <block subset="none" type="usage">
          <para>Ta właściwość jest używana przez klientów, którzy sondowanie dotyczące stanu operacji (w przeciwieństwie do oczekiwania na obiekt synchronizacji) do określenia stanu operacji.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>