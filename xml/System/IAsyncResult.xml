<Type Name="IAsyncResult" FullName="System.IAsyncResult">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e146db19e5a83c2ef68363fb3b583f92f2c62b48" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69420478" /></Metadata><TypeSignature Language="C#" Value="public interface IAsyncResult" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAsyncResult" />
  <TypeSignature Language="DocId" Value="T:System.IAsyncResult" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAsyncResult" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAsyncResult" />
  <TypeSignature Language="F#" Value="type IAsyncResult = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje stan operacji asynchronicznej.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IAsyncResult> Interfejs jest implementowany przez klasy zawierające metody, które mogą działać asynchronicznie. Jest to typ zwracany metod, które inicjują operację asynchroniczną, taką jak <xref:System.IO.FileStream.BeginRead%2A?displayProperty=nameWithType>i są przesyłane do metod kończących operację asynchroniczną, takich jak. <xref:System.IO.FileStream.EndRead%2A?displayProperty=nameWithType> <xref:System.IAsyncResult>obiekty są również przesyłane do metod wywoływanych <xref:System.AsyncCallback> przez delegatów po zakończeniu operacji asynchronicznej.  
  
 Obiekt obsługujący <xref:System.IAsyncResult> interfejs przechowuje informacje o stanie operacji asynchronicznej i udostępnia obiekt synchronizacji, aby zezwolić na zasygnalizowanie wątków po zakończeniu operacji.  
  
> [!NOTE]
>  Klasa jest implementacją `BeginInvoke`,która jest zwracana przez metodę w przypadku użycia delegata do wywołania metody asynchronicznie. <xref:System.IAsyncResult> <xref:System.Runtime.Remoting.Messaging.AsyncResult>  
  
 Szczegółowy opis sposobu <xref:System.IAsyncResult> użycia interfejsu znajduje się w temacie [wywoływanie metod synchronicznych asynchronicznie](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md) .  
  
   
  
## Examples  
 W poniższym przykładzie pokazano <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A> <xref:System.Threading.WaitHandle>, jak użyć właściwości w celu uzyskania i jak czekać na wywołanie asynchroniczne na delegatze. Jest sygnalizowane sygnałem, gdy wywołanie asynchroniczne zostanie zakończone, i można go oczekiwać przez <xref:System.Threading.WaitHandle.WaitOne%2A> wywołanie metody. <xref:System.Threading.WaitHandle>  
  
 Przykład składa się z dwóch klas: klasy zawierającej metodę, która jest wywoływana asynchronicznie, oraz klasy `Main` zawierającej metodę, która wywołuje wywołanie.  
  
 Aby uzyskać więcej informacji i więcej przykładów wywoływania metod asynchronicznie za pomocą delegatów, zobacz [Asynchroniczne wywoływanie metod synchronicznych](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#3](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/waithandle.cpp#3)]
[!code-csharp[AsyncDelegateExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/waithandle.cs#3)]
[!code-vb[AsyncDelegateExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/WaitHandle.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AsyncState">
      <MemberSignature Language="C#" Value="public object AsyncState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AsyncState" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.AsyncState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ AsyncState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AsyncState : obj" Usage="System.IAsyncResult.AsyncState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt zdefiniowany przez użytkownika, który kwalifikuje lub zawiera informacje o operacji asynchronicznej.</summary>
        <value>Obiekt zdefiniowany przez użytkownika, który kwalifikuje lub zawiera informacje o operacji asynchronicznej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość zwraca obiekt, który jest ostatnim parametrem metody inicjującej operację asynchroniczną.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState%2A> jak właściwość służy do przekazywania informacji do metody wywołania zwrotnego. Ostatni parametr `BeginInvoke` wywołania metody jest ciągiem formatu, którego Metoda wywołania zwrotnego używa do formatowania wiadomości wyjściowej.  
  
 Przykład składa się z dwóch klas: klasy zawierającej metodę, która jest wywoływana asynchronicznie, oraz klasy `Main` zawierającej metodę, która wywołuje wywołanie.  
  
 Aby uzyskać więcej informacji na temat sposobu działania tego przykładowego wywołania zwrotnego i więcej przykładów wywoływania metod asynchronicznie za pomocą delegatów, zobacz [wywoływanie metod synchronicznych asynchronicznie](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#5](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/callback.cpp#5)]
[!code-csharp[AsyncDelegateExamples#5](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/callback.cs#5)]
[!code-vb[AsyncDelegateExamples#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/callback.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Zaimplementuj tę właściwość, aby zezwolić obiektowi wywołującemu asynchronicznej operacji na uzyskanie obiektu zdefiniowanego przez aplikację na początku operacji.</para></block>
        <block subset="none" type="usage"><para>Ten obiekt może służyć do przekazywania informacji o stanie dla operacji asynchronicznej do <see cref="T:System.AsyncCallback" /> podanej przez użytkownika.</para></block>
        <altmember cref="T:System.AsyncCallback" />
      </Docs>
    </Member>
    <Member MemberName="AsyncWaitHandle">
      <MemberSignature Language="C#" Value="public System.Threading.WaitHandle AsyncWaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle AsyncWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.AsyncWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncWaitHandle As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::WaitHandle ^ AsyncWaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AsyncWaitHandle : System.Threading.WaitHandle" Usage="System.IAsyncResult.AsyncWaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Threading.WaitHandle" /> Pobiera, który jest używany do oczekiwania na zakończenie operacji asynchronicznej.</summary>
        <value><see cref="T:System.Threading.WaitHandle" /> , Który jest używany do oczekiwania na zakończenie operacji asynchronicznej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana umożliwia klientowi oczekiwanie na zakończenie operacji asynchronicznej zamiast sondowania <xref:System.IAsyncResult.IsCompleted%2A> do momentu zakończenia operacji. Wartość zwracana może służyć do wykonywania <xref:System.Threading.WaitHandle.WaitOne%2A>operacji, <xref:System.Threading.WaitHandle.WaitAny%2A>lub <xref:System.Threading.WaitHandle.WaitAll%2A> .  
  
 Środowisko uruchomieniowe języka wspólnego udostępnia wiele obiektów oczekujących, takich jak <xref:System.Threading.ManualResetEvent>, <xref:System.Threading.AutoResetEvent>, i <xref:System.Threading.Mutex>wszystkich duplikatów elementów pierwotnych synchronizacji Win32.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano <xref:System.IAsyncResult.AsyncWaitHandle%2A> <xref:System.Threading.WaitHandle>, jak użyć właściwości w celu uzyskania i jak czekać na wywołanie asynchroniczne na delegatze. Jest sygnalizowane sygnałem, gdy wywołanie asynchroniczne zostanie zakończone, i można go oczekiwać przez <xref:System.Threading.WaitHandle.WaitOne%2A> wywołanie metody. <xref:System.Threading.WaitHandle>  
  
 Przykład składa się z dwóch klas: klasy zawierającej metodę, która jest wywoływana asynchronicznie, oraz klasy `Main` zawierającej metodę, która wywołuje wywołanie.  
  
 Aby uzyskać więcej informacji i więcej przykładów wywoływania metod asynchronicznie za pomocą delegatów, zobacz [Asynchroniczne wywoływanie metod synchronicznych](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#3](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/waithandle.cpp#3)]
[!code-csharp[AsyncDelegateExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/waithandle.cs#3)]
[!code-vb[AsyncDelegateExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/WaitHandle.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Obiekt, który implementuje <see cref="T:System.IAsyncResult" /> , nie musi <see cref="T:System.Threading.WaitHandle" /> tworzyć do momentu <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> odczytania właściwości. Jest to wybór <see cref="T:System.IAsyncResult" /> implementujący. Jeśli jednak program implementujący tworzy <see cref="P:System.IAsyncResult.AsyncWaitHandle" />, jest odpowiedzialny za program implementujący <see cref="T:System.Threading.WaitHandle" /> , który zakończy oczekiwanie w odpowiednim czasie. Na przykład <see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /> kończy oczekiwanie na rzecz obiektu wywołującego, gdy wywoływana asynchronicznie Metoda zwraca. Po utworzeniu należy <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> zachować aktywność, dopóki użytkownik nie wywoła metody kończącej operację asynchroniczną. W tym czasie obiekt za <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> można odrzucić.</para></block>
        <block subset="none" type="usage"><para>Klienci, którzy oczekują na zakończenie operacji (w przeciwieństwie do sondowania), używają tej właściwości, aby uzyskać obiekt synchronizacji, aby oczekiwać.  
  
 <block subset="none" type="note"><para>  
 W przypadku użycia <see langword="BeginInvoke" /> metody delegata do wywołania metody asynchronicznie i uzyskania dojścia oczekiwania od wyniku <see cref="T:System.IAsyncResult" />, zalecamy zamknięcie dojścia oczekiwania zaraz po zakończeniu korzystania z <see cref="M:System.Threading.WaitHandle.Close" /> niego, wywołując metodę. Po prostu zwolnij wszystkie odwołania do dojścia oczekiwania, zasoby systemowe są zwalniane, gdy odzyskiwanie pamięci zostanie odzyskane dla dojścia oczekiwania, ale odzyskiwanie pamięci działa wydajniej, gdy bezpośrednie zamknięcia lub usunięcia obiektów do pobrania. Aby uzyskać więcej informacji, zobacz <see cref="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle" /> właściwość.  
  
</para></block></para></block>
      </Docs>
    </Member>
    <Member MemberName="CompletedSynchronously">
      <MemberSignature Language="C#" Value="public bool CompletedSynchronously { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CompletedSynchronously" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.CompletedSynchronously" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CompletedSynchronously As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CompletedSynchronously { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CompletedSynchronously : bool" Usage="System.IAsyncResult.CompletedSynchronously" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy operacja asynchroniczna została zakończona synchronicznie.</summary>
        <value><see langword="true" />Jeśli operacja asynchroniczna zakończyła się synchronicznie; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli synchroniczne zakończenie wywołania zostanie wykryte w <xref:System.AsyncCallback> delegatze, prawdopodobnie wątek, który zainicjował operację asynchroniczną, jest bieżącym wątkiem.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Większość realizatorów <see cref="T:System.IAsyncResult" /> interfejsu nie będzie używać tej właściwości i powinna zwracać <see langword="false" />. Począwszy od <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)" /> , zadanie, które jest tworzone za pomocą metody, nie zostanie ukończone, jeśli ta właściwość nie zostanie poprawnie zaimplementowana. [!INCLUDE[net_v45](~/includes/net-v45-md.md)] Zobacz [zgodność aplikacji w 4,5](~/docs/framework/migration-guide/application-compatibility-in-the-net-framework-4-5.md).</para></block>
        <block subset="none" type="usage"><para>Użyj tej właściwości, aby określić, czy operacja asynchroniczna zakończyła się synchronicznie. Na przykład ta właściwość może zwracać <see langword="true" /> dla asynchronicznej operacji we/wy, jeśli żądanie we/wy było małe.</para></block>
      </Docs>
    </Member>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public bool IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.IsCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompleted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCompleted : bool" Usage="System.IAsyncResult.IsCompleted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy operacja asynchroniczna została ukończona.</summary>
        <value><see langword="true" />Jeśli operacja została zakończona; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy ta właściwość ma `true`wartość, można założyć, że jest bezpiecznie odrzucać wszelkie zasoby przydzielone do użycia przez operację asynchroniczną.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać <xref:System.IAsyncResult.IsCompleted%2A> właściwości do odnajdywania, <xref:System.IAsyncResult> gdy asynchroniczne wywołanie zostało zakończone. W takim przypadku wywołanie asynchroniczne odbywa się przy użyciu `BeginInvoke` metody delegata. Można użyć <xref:System.IAsyncResult.IsCompleted%2A> właściwości do sondowania w celu zakończenia podczas wykonywania wywołania asynchronicznego z wątku, który jest usługami interfejsu użytkownika. Sondowanie pod kątem ukończenia pozwala wątek wywołujący kontynuować wykonywanie podczas wywołania asynchronicznego wykonywanego na <xref:System.Threading.ThreadPool> wątku.  
  
 Przykład składa się z dwóch klas: klasy zawierającej metodę, która jest wywoływana asynchronicznie, oraz klasy `Main` zawierającej metodę, która wywołuje wywołanie.  
  
 Aby uzyskać więcej informacji i więcej przykładów wywoływania metod asynchronicznie za pomocą delegatów, zobacz [Asynchroniczne wywoływanie metod synchronicznych](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#4](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/polling.cpp#4)]
[!code-csharp[AsyncDelegateExamples#4](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/polling.cs#4)]
[!code-vb[AsyncDelegateExamples#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/polling.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Implementacje zwykle zwracają wartość pola prywatnego lub testu wewnętrznego jako wartość tej właściwości.</para></block>
        <block subset="none" type="usage"><para>Klienci, którzy sondowają w poszukiwaniu stanu operacji (w przeciwieństwie do oczekiwania na obiekt synchronizacji), używają tej właściwości do określenia stanu operacji.</para></block>
      </Docs>
    </Member>
  </Members>
</Type>
