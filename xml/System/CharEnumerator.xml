<Type Name="CharEnumerator" FullName="System.CharEnumerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="99bb022affed551d601d1d09475d11521f717cf7" />
    <Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="11/29/2018" />
    <Meta Name="ms.locfileid" Value="52614161" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class CharEnumerator : ICloneable, System.Collections.Generic.IEnumerator&lt;char&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit CharEnumerator extends System.Object implements class System.Collections.Generic.IEnumerator`1&lt;char&gt;, class System.Collections.IEnumerator, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.CharEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CharEnumerator&#xA;Implements ICloneable, IEnumerator(Of Char)" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharEnumerator sealed : ICloneable, System::Collections::Generic::IEnumerator&lt;char&gt;" />
  <TypeSignature Language="F#" Value="type CharEnumerator = class&#xA;    interface IEnumerator&#xA;    interface ICloneable&#xA;    interface IEnumerator&lt;char&gt;&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerator&lt;System.Char&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="9f6ad-101">Obsługuje Iterowanie <see cref="T:System.String" /> obiektu i odczytywanie ich pojedynczych znaków.</span>
      <span class="sxs-lookup">
        <span data-stu-id="9f6ad-101">Supports iterating over a <see cref="T:System.String" /> object and reading its individual characters.</span>
      </span>
      <span data-ttu-id="9f6ad-102">Klasa ta nie może być dziedziczona.</span>
      <span class="sxs-lookup">
        <span data-stu-id="9f6ad-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f6ad-103">A <xref:System.CharEnumerator> oferuje dostęp tylko do odczytu do znaków w odwoływany <xref:System.String> obiektu.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-103">A <xref:System.CharEnumerator> provides read-only access to the characters in a referenced <xref:System.String> object.</span></span> <span data-ttu-id="9f6ad-104">Na przykład `foreach` instrukcji języków programowania języka Visual Basic i C#, która wykonuje iterację przez elementy kolekcji, pobiera <xref:System.CharEnumerator> z <xref:System.String> obiektu, aby można było wykonać iterację znaków w tym obiekt.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-104">For example, the `foreach` statement of the Microsoft Visual Basic and C# programming languages, which iterates through the elements of a collection, retrieves a <xref:System.CharEnumerator> from a <xref:System.String> object in order to iterate through the characters in that object.</span></span>  

> [!IMPORTANT]
> <span data-ttu-id="9f6ad-105">`CharEnumerator` Klasy wylicza poszczególnych 16-bitowych <xref:System.Char> wystąpień.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-105">The `CharEnumerator` class enumerates individual 16-bit <xref:System.Char> instances.</span></span> <span data-ttu-id="9f6ad-106">Nie należy traktować graphemes (czyli znak następuje jeden lub więcej znaków combiding) lub zastępczych par (oznacza to, że znaki poza podstawowe płaszczyzny wielojęzyczny Unicode) jako pojedynczych znaków.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-106">It does not consider graphemes (that is, a character followed by one or more combiding characters) or surrogate pairs (that is, characters outside the Unicode Basic Multilingual Plane) as single characters.</span></span> <span data-ttu-id="9f6ad-107">Moduł wyliczający, który obsługuje następujące typy znaków jako pojedyncza jednostka, można użyć <xref:System.Globalization.StringInfo> klasy.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-107">For an enumerator that handles these types of characters as a single unit, use the <xref:System.Globalization.StringInfo> class.</span></span>

 <span data-ttu-id="9f6ad-108">Brak publicznego konstruktora dla <xref:System.CharEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-108">There is no public constructor for <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="9f6ad-109">Zamiast tego należy wywołać <xref:System.String> obiektu <xref:System.String.GetEnumerator%2A> metodę, aby uzyskać <xref:System.CharEnumerator> który jest inicjowany do odwoływać się do ciągu.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-109">Instead, call a <xref:System.String> object's <xref:System.String.GetEnumerator%2A> method to obtain a <xref:System.CharEnumerator> that is initialized to reference the string.</span></span>  
  
 <span data-ttu-id="9f6ad-110">A <xref:System.CharEnumerator> obsługuje wewnętrzny indeks znaków w ciągu <xref:System.CharEnumerator> odwołania.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-110">A <xref:System.CharEnumerator> maintains an internal index to the characters in the string the <xref:System.CharEnumerator> references.</span></span> <span data-ttu-id="9f6ad-111">Stan indeksu jest nieprawidłowy, gdy odwołuje się do pozycji znaku logicznie przed pierwszym znakiem i po ostatni znak w ciągu i jest prawidłowa, gdy odwołuje się do znaku w ciągu.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-111">The state of the index is invalid when it references a character position logically before the first character or after the last character in the string, and valid when it references a character within the string.</span></span> <span data-ttu-id="9f6ad-112">Indeks jest inicjowany do położenia logicznie przed pierwszym znakiem i jest ustawiona na pozycji za ostatnim znakiem, po zakończeniu iteracji.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-112">The index is initialized to a position logically before the first character, and is set to a position after the last character when the iteration is complete.</span></span> <span data-ttu-id="9f6ad-113">Wyjątek jest generowany, jeśli użytkownik podejmie próbę uzyskania dostępu znak, podczas gdy indeks jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-113">An exception is thrown if you attempt to access a character while the index is invalid.</span></span>  
  
 <span data-ttu-id="9f6ad-114"><xref:System.CharEnumerator.MoveNext%2A> Metody zwiększa indeksu za pomocą jednej, dlatego pierwsze i kolejne znaki są dostępne z kolei.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-114">The <xref:System.CharEnumerator.MoveNext%2A> method increments the index by one, so the first and subsequent characters are accessed in turn.</span></span> <span data-ttu-id="9f6ad-115"><xref:System.CharEnumerator.Reset%2A> Metody ustawia indeks na pozycji logicznie przed pierwszym znakiem.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-115">The <xref:System.CharEnumerator.Reset%2A> method sets the index to a position logically before the first character.</span></span> <span data-ttu-id="9f6ad-116"><xref:System.CharEnumerator.Current%2A> Właściwość pobiera znak obecnie wywoływane przez indeks.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-116">The <xref:System.CharEnumerator.Current%2A> property retrieves the character currently referenced by index.</span></span> <span data-ttu-id="9f6ad-117"><xref:System.CharEnumerator.Clone%2A> Metoda tworzy kopię <xref:System.CharEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-117">The <xref:System.CharEnumerator.Clone%2A> method creates a copy of the <xref:System.CharEnumerator>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9f6ad-118">Kilka wystąpień niezależnych <xref:System.CharEnumerator> przez jeden lub więcej wątków może uzyskiwać dostęp do pojedynczego wystąpienia <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-118">Several independent instances of <xref:System.CharEnumerator> across one or more threads can have access to a single instance of <xref:System.String>.</span></span> <span data-ttu-id="9f6ad-119">Ta klasa jest implementowane w celu obsługi <xref:System.Collections.IEnumerator> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-119">This class is implemented to support the <xref:System.Collections.IEnumerator> interface.</span></span> <span data-ttu-id="9f6ad-120">Aby uzyskać więcej informacji na temat użycia modułu wyliczającego zobacz <xref:System.Collections.IEnumerator> tematu.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-120">For more information regarding the use of an enumerator, see the <xref:System.Collections.IEnumerator> topic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9f6ad-121">W poniższym przykładzie użyto <xref:System.CharEnumerator> klasy wyliczyć pojedynczych znaków w ciągu.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-121">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="9f6ad-122">Metoda tworzy <xref:System.CharEnumerator> obiektu przez wywołanie metody <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> metody zostanie przeniesiony z jednego znaku do następnego przez wywołanie metody <xref:System.CharEnumerator.MoveNext%2A> metodę i wyświetla bieżący znak poprzez pobranie wartości <xref:System.CharEnumerator.Current%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-122">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="9f6ad-123">Należy jednak pamiętać, że ten sam operację można wykonać nieco bardziej intuicyjne przy użyciu `foreach` (w języku C#) lub `For Each` (w języku Visual Basic), w poniższym przykładzie pokazano.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-123">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.String" />
    <altmember cref="T:System.Collections.IEnumerator" />
    <altmember cref="T:System.Collections.IEnumerable" />
    <altmember cref="T:System.Collections.ICollection" />
  </Docs>
  <Members>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="charEnumerator.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9f6ad-124">Tworzy kopię bieżącego <see cref="T:System.CharEnumerator" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f6ad-124">Creates a copy of the current <see cref="T:System.CharEnumerator" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9f6ad-125">
            <see cref="T:System.Object" /> Czyli kopię bieżącego <see cref="T:System.CharEnumerator" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f6ad-125">An <see cref="T:System.Object" /> that is a copy of the current <see cref="T:System.CharEnumerator" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f6ad-126">Wartość zwracana jest kopią tego wystąpienia <xref:System.CharEnumerator> i bieżącego stanu.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-126">The return value is a copy of this instance of <xref:System.CharEnumerator> and its current state.</span></span> <span data-ttu-id="9f6ad-127">Jest to przydatne przy zapisywaniu stanu użytkownika podczas iteracji <xref:System.String> obiektu.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-127">This is useful for saving your state while iterating through a <xref:System.String> object.</span></span>  
  
 <span data-ttu-id="9f6ad-128">Na przykład, załóżmy, że aplikacja używa oryginalnego wystąpienia programu <xref:System.CharEnumerator> do iteracji przez każdego znaku w <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-128">For example, suppose your application uses an original instance of <xref:System.CharEnumerator> to iterate through each character in a <xref:System.String>.</span></span> <span data-ttu-id="9f6ad-129">W przypadku niektórych znaków unikatowych aplikacji wstrzymuje przetwarzanie, a następnie wywołuje <xref:System.CharEnumerator.Clone%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-129">When some unique character is encountered, your application pauses processing and invokes the <xref:System.CharEnumerator.Clone%2A> method.</span></span> <span data-ttu-id="9f6ad-130">W efekcie zapisuje <xref:System.CharEnumerator> indeksu obiektu w <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-130">In effect, this saves the <xref:System.CharEnumerator> object's index in the <xref:System.String>.</span></span>  
  
 <span data-ttu-id="9f6ad-131">Twoja aplikacja używa klon, aby przejść do innej części `String` wykonanie niektórych pomocnicze w ramach przetwarzania.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-131">Your application uses the clone to navigate to another part of the `String` to perform some auxiliary processing.</span></span> <span data-ttu-id="9f6ad-132">Efekt uboczny tej nawigacji jest klonu traci śledzenie pozycji, których przetwarzanie zostało zakończone.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-132">The side-effect of this navigation is the clone loses track of the position where processing stopped.</span></span> <span data-ttu-id="9f6ad-133">Jednak po zakończeniu przetwarzania pomocnicze w ramach aplikacji odrzuca klonowania i korzysta z oryginalnym <xref:System.CharEnumerator> wystąpienia, aby wznowić pracę nad <xref:System.String> gdzie oryginalnego przetwarzanie zostało zakończone.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-133">However, when the auxiliary processing is complete, your application discards the clone and uses the original <xref:System.CharEnumerator> instance to resume working on the <xref:System.String> where the original processing stopped.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9f6ad-134">Ta metoda jest implementowana w celu obsługi <xref:System.ICloneable> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-134">This method is implemented to support the <xref:System.ICloneable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public char Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char Current { char get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : char" Usage="System.CharEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IEnumerator`1.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9f6ad-135">Pobiera aktualnie odwołania znak w ciągu wyliczany to <see cref="T:System.CharEnumerator" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f6ad-135">Gets the currently referenced character in the string enumerated by this <see cref="T:System.CharEnumerator" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9f6ad-136">Znak Unicode, obecnie odwołuje się ten <see cref="T:System.CharEnumerator" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f6ad-136">The Unicode character currently referenced by this <see cref="T:System.CharEnumerator" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f6ad-137"><xref:System.CharEnumerator> Klasy obsługuje wewnętrzny indeks wyliczany ciąg, a <xref:System.CharEnumerator.Current%2A> właściwość zwraca znak, który odwołuje się obecnie indeksu.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-137">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.Current%2A> property returns the character that is currently referenced by the index.</span></span> <span data-ttu-id="9f6ad-138">Ta właściwość powinna ona zostać wywołana tylko wtedy, gdy indeks jest nieprawidłowy; w przeciwnym razie jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-138">This property should be invoked only when the index is valid; otherwise, an exception is thrown.</span></span>  
  
 <span data-ttu-id="9f6ad-139">Indeks zawsze jest nieprawidłowy dla pustego ciągu ("").</span><span class="sxs-lookup"><span data-stu-id="9f6ad-139">The index is always invalid for an empty string ("").</span></span> <span data-ttu-id="9f6ad-140">Indeks jest również nieprawidłowe po <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> lub <xref:System.CharEnumerator.Reset%2A> metoda jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-140">The index is also invalid after the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> or <xref:System.CharEnumerator.Reset%2A> method is called.</span></span> <span data-ttu-id="9f6ad-141">Po każdej z tych metod jest wywoływana, wywołanie <xref:System.CharEnumerator.MoveNext%2A> metodę, aby dopasować indeks pierwszego znaku w ciągu wyliczany.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-141">After either of these methods is called, invoke the <xref:System.CharEnumerator.MoveNext%2A> method to adjust the index to the first character in the enumerated string.</span></span> <span data-ttu-id="9f6ad-142">Indeks jest prawidłowy zawsze wtedy, gdy <xref:System.CharEnumerator.MoveNext%2A> metoda zwraca `true`.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-142">The index is valid whenever the <xref:System.CharEnumerator.MoveNext%2A> method returns `true`.</span></span>  
  
 <span data-ttu-id="9f6ad-143"><xref:System.CharEnumerator.Current%2A> nie powoduje przeniesienia, indeksu i kolejnych wywołań <xref:System.CharEnumerator.Current%2A> zwracać ten sam znak, aż do <xref:System.CharEnumerator.MoveNext%2A>, <xref:System.CharEnumerator.Reset%2A>, lub <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-143"><xref:System.CharEnumerator.Current%2A> does not move the index, and consecutive calls to <xref:System.CharEnumerator.Current%2A> return the same character until <xref:System.CharEnumerator.MoveNext%2A>, <xref:System.CharEnumerator.Reset%2A>, or <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> is called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9f6ad-144">W poniższym przykładzie użyto <xref:System.CharEnumerator> klasy wyliczyć pojedynczych znaków w ciągu.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-144">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="9f6ad-145">Metoda tworzy <xref:System.CharEnumerator> obiektu przez wywołanie metody <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> metody zostanie przeniesiony z jednego znaku do następnego przez wywołanie metody <xref:System.CharEnumerator.MoveNext%2A> metodę i wyświetla bieżący znak poprzez pobranie wartości <xref:System.CharEnumerator.Current%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-145">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="9f6ad-146">Należy jednak pamiętać, że ten sam operację można wykonać nieco bardziej intuicyjne przy użyciu `foreach` (w języku C#) lub `For Each` (w języku Visual Basic), w poniższym przykładzie pokazano.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-146">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9f6ad-147">Indeks jest nieprawidłowy; oznacza to, że jest przed pierwszym lub za ostatnim znakiem ciągu wyliczany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f6ad-147">The index is invalid; that is, it is before the first or after the last character of the enumerated string.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="charEnumerator.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9f6ad-148">Zwalnia wszelkie zasoby używane przez bieżące wystąpienie <see cref="T:System.CharEnumerator" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f6ad-148">Releases all resources used by the current instance of the <see cref="T:System.CharEnumerator" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f6ad-149">Wywołaj <xref:System.CharEnumerator.Dispose%2A> po zakończeniu przy użyciu <xref:System.CharEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-149">Call <xref:System.CharEnumerator.Dispose%2A> when you are finished using the <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="9f6ad-150"><xref:System.CharEnumerator.Dispose%2A> Pozostawia metoda <xref:System.CharEnumerator> w stanie uniemożliwiającym jego używanie.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-150">The <xref:System.CharEnumerator.Dispose%2A> method leaves the <xref:System.CharEnumerator> in an unusable state.</span></span> <span data-ttu-id="9f6ad-151">Po wywołaniu <xref:System.CharEnumerator.Dispose%2A>, trzeba zwolnić wszystkie odwołania do <xref:System.CharEnumerator> , moduł zbierający elementy bezużyteczne mógł odzyskać pamięć, <xref:System.CharEnumerator> zajmowaną przez wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-151">After calling <xref:System.CharEnumerator.Dispose%2A>, you must release all references to the <xref:System.CharEnumerator> so the garbage collector can reclaim the memory that the <xref:System.CharEnumerator> was occupying.</span></span>  
  
 <span data-ttu-id="9f6ad-152">Aby uzyskać więcej informacji, zobacz [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) i [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="9f6ad-152">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9f6ad-153">Zawsze wywołuj <xref:System.CharEnumerator.Dispose%2A> przed publikacją swoje ostatnie odwołanie do <xref:System.CharEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-153">Always call <xref:System.CharEnumerator.Dispose%2A> before you release your last reference to the <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="9f6ad-154">W przeciwnym razie zasobów jest przy użyciu nie zostanie zwolniona, dopóki moduł odśmiecania pamięci wywołuje <xref:System.CharEnumerator> obiektu `Finalize` metody.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-154">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.CharEnumerator> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="charEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9f6ad-155">Zwiększa indeks wewnętrzny bieżącego <see cref="T:System.CharEnumerator" /> obiektu na następny znak w ciągu wyliczany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f6ad-155">Increments the internal index of the current <see cref="T:System.CharEnumerator" /> object to the next character of the enumerated string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9f6ad-156">
            <see langword="true" /> Jeśli indeks pomyślnie jest zwiększany, a jeśli tak, to w ciągu wyliczany; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f6ad-156">
              <see langword="true" /> if the index is successfully incremented and within the enumerated string; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f6ad-157"><xref:System.CharEnumerator> Klasy obsługuje wewnętrzny indeks wyliczany ciąg i <xref:System.CharEnumerator.MoveNext%2A> metody zwiększa indeks o jeden.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-157">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.MoveNext%2A> method increments the index by one.</span></span> <span data-ttu-id="9f6ad-158">Wywołaj <xref:System.CharEnumerator.MoveNext%2A> po wywołaniu <xref:System.String.GetEnumerator%2A> lub <xref:System.CharEnumerator.Reset%2A> się zwiększać bieżąca pozycja znaku do pierwszego znaku w ciągu wyliczany.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-158">Call <xref:System.CharEnumerator.MoveNext%2A> after calling <xref:System.String.GetEnumerator%2A> or <xref:System.CharEnumerator.Reset%2A> to increment the current character position to the first character in the enumerated string.</span></span> <span data-ttu-id="9f6ad-159">Upewnij się, że wartość zwracana jest `true` do określenia, czy bieżąca pozycja znaku jest prawidłowa.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-159">Check that the return value is `true` to determine that the current character position is valid.</span></span>  
  
 <span data-ttu-id="9f6ad-160">Jeśli indeks jest poza ostatnim znakiem ciągu wyliczany, indeks nie ulega zmianie i `false` jest zwracana.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-160">If the index is already beyond the last character of the enumerated string, the index is not changed and `false` is returned.</span></span>  
  
 <span data-ttu-id="9f6ad-161">Należy zauważyć, że jeśli wyliczany ciąg jest pusty (""), stan <xref:System.CharEnumerator> zawsze jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-161">Notice that if the enumerated string is empty (""), the state of the <xref:System.CharEnumerator> is always invalid.</span></span> <span data-ttu-id="9f6ad-162">Jest to spowodowane wewnętrznego indeks <xref:System.CharEnumerator> jest początkowo, przed pierwszym znakiem ciągu wyliczany i dlatego jest nieprawidłowa.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-162">This is because the internal index for the <xref:System.CharEnumerator> is initially before the first character of the enumerated string and is therefore invalid.</span></span> <span data-ttu-id="9f6ad-163"><xref:System.CharEnumerator.MoveNext%2A> logicznie ustawia indeks po ostatni znak (nieistniejącej) wyliczany ciąg, który również jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-163"><xref:System.CharEnumerator.MoveNext%2A> logically sets the index after the last (nonexistent) character of the enumerated string which is also invalid.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9f6ad-164">W poniższym przykładzie użyto <xref:System.CharEnumerator> klasy wyliczyć pojedynczych znaków w ciągu.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-164">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="9f6ad-165">Metoda tworzy <xref:System.CharEnumerator> obiektu przez wywołanie metody <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> metody zostanie przeniesiony z jednego znaku do następnego przez wywołanie metody <xref:System.CharEnumerator.MoveNext%2A> metodę i wyświetla bieżący znak poprzez pobranie wartości <xref:System.CharEnumerator.Current%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-165">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="9f6ad-166">Należy jednak pamiętać, że ten sam operację można wykonać nieco bardziej intuicyjne przy użyciu `foreach` (w języku C#) lub `For Each` (w języku Visual Basic), w poniższym przykładzie pokazano.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-166">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="charEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9f6ad-167">Inicjuje indeksu do położenia logicznie przed pierwszym znakiem ciągu wyliczany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f6ad-167">Initializes the index to a position logically before the first character of the enumerated string.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f6ad-168"><xref:System.CharEnumerator> Klasy obsługuje wewnętrzny indeks wyliczany ciąg, a <xref:System.CharEnumerator.Reset%2A> metody ustawia indeks nieprawidłowy stan.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-168">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.Reset%2A> method sets the index to the invalid state.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IEnumerator::Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9f6ad-169">Pobiera aktualnie odwołania znak w ciągu wyliczany to <see cref="T:System.CharEnumerator" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f6ad-169">Gets the currently referenced character in the string enumerated by this <see cref="T:System.CharEnumerator" /> object.</span>
          </span>
          <span data-ttu-id="9f6ad-170">Aby uzyskać opis tego elementu członkowskiego, zobacz <see cref="P:System.Collections.IEnumerator.Current" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f6ad-170">For a description of this member, see <see cref="P:System.Collections.IEnumerator.Current" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9f6ad-171">Spakowany znak Unicode, obecnie odwołuje się ten <see cref="T:System.CharEnumerator" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f6ad-171">The boxed Unicode character currently referenced by this <see cref="T:System.CharEnumerator" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f6ad-172">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-172">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="9f6ad-173">Mogą być używane tylko wtedy, gdy <xref:System.CharEnumerator> wystąpienia jest rzutowany na <xref:System.Collections.IEnumerator> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-173">It can be used only when the <xref:System.CharEnumerator> instance is cast to an <xref:System.Collections.IEnumerator> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9f6ad-174">Wyliczanie nie zostało uruchomione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f6ad-174">Enumeration has not started.</span>
          </span>
          <span data-ttu-id="9f6ad-175">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f6ad-175">-or-</span>
          </span>
          <span data-ttu-id="9f6ad-176">Wyliczanie zostało zakończone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f6ad-176">Enumeration has ended.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9f6ad-177">Zwalnia wszelkie zasoby używane przez <see cref="T:System.CharEnumerator" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f6ad-177">Releases all resources used by the <see cref="T:System.CharEnumerator" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="9f6ad-178">Wywołanie metody IDisposable.Dispose, po zakończeniu przy użyciu <xref:System.CharEnumerator> klasy.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-178">Call IDisposable.Dispose when you are finished using the <xref:System.CharEnumerator> class.</span></span> <span data-ttu-id="9f6ad-179">Metoda pozostawia <xref:System.CharEnumerator> klasy w stanie uniemożliwiającym jego używanie.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-179">The method leaves the <xref:System.CharEnumerator> class in an unusable state.</span></span> <span data-ttu-id="9f6ad-180">Po wywołaniu, go, trzeba zwolnić wszystkie odwołania do <xref:System.CharEnumerator> klasy, aby moduł zbierający elementy bezużyteczne mógł odzyskać pamięć, <xref:System.CharEnumerator> zajmowaną przez wystąpienie klasy.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-180">After calling it, you must release all references to the <xref:System.CharEnumerator> class so the garbage collector can reclaim the memory that the <xref:System.CharEnumerator> class was occupying.</span></span>

<span data-ttu-id="9f6ad-181">Aby uzyskać więcej informacji, zobacz [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) i [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="9f6ad-181">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>

> [!NOTE]
> <span data-ttu-id="9f6ad-182">Zawsze wywołuj metody IDisposable.Dispose, przed zwolnieniem swoje ostatnie odwołanie do <xref:System.CharEnumerator> klasy.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-182">Always call IDisposable.Dispose before you release your last reference to the <xref:System.CharEnumerator> class.</span></span> <span data-ttu-id="9f6ad-183">W przeciwnym razie zasobów jest przy użyciu nie zostanie zwolniona, dopóki moduł odśmiecania pamięci wywołuje <xref:System.CharEnumerator> obiektu <xref:System.Object.Finalize> metody.</span><span class="sxs-lookup"><span data-stu-id="9f6ad-183">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.CharEnumerator> object's <xref:System.Object.Finalize> method.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>