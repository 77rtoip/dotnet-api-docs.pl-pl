<Type Name="CharEnumerator" FullName="System.CharEnumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="674ca0ff6ab128d0807cf2b9d4f07caded3523e1" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69406909" /></Metadata><TypeSignature Language="C#" Value="public sealed class CharEnumerator : ICloneable, System.Collections.Generic.IEnumerator&lt;char&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit CharEnumerator extends System.Object implements class System.Collections.Generic.IEnumerator`1&lt;char&gt;, class System.Collections.IEnumerator, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.CharEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CharEnumerator&#xA;Implements ICloneable, IEnumerator(Of Char)" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharEnumerator sealed : ICloneable, System::Collections::Generic::IEnumerator&lt;char&gt;" />
  <TypeSignature Language="F#" Value="type CharEnumerator = class&#xA;    interface IEnumerator&#xA;    interface ICloneable&#xA;    interface IEnumerator&lt;char&gt;&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerator&lt;System.Char&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="e13d4-101">Obsługuje iterację <see cref="T:System.String" /> obiektu i odczytywanie jego poszczególnych znaków.</span><span class="sxs-lookup"><span data-stu-id="e13d4-101">Supports iterating over a <see cref="T:System.String" /> object and reading its individual characters.</span></span> <span data-ttu-id="e13d4-102">Klasa ta nie może być dziedziczona.</span><span class="sxs-lookup"><span data-stu-id="e13d4-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e13d4-103">A <xref:System.CharEnumerator> zapewnia dostęp tylko do odczytu do znaków w obiekcie, do <xref:System.String> którego się odwołuje.</span><span class="sxs-lookup"><span data-stu-id="e13d4-103">A <xref:System.CharEnumerator> provides read-only access to the characters in a referenced <xref:System.String> object.</span></span> <span data-ttu-id="e13d4-104">Na `foreach` przykład, instrukcja Microsoft Visual Basic i C# Języki programowania, które iteruje przez elementy <xref:System.CharEnumerator> kolekcji, <xref:System.String> pobiera z obiektu, aby wykonać iterację znaków w tym obiekcie.</span><span class="sxs-lookup"><span data-stu-id="e13d4-104">For example, the `foreach` statement of the Microsoft Visual Basic and C# programming languages, which iterates through the elements of a collection, retrieves a <xref:System.CharEnumerator> from a <xref:System.String> object in order to iterate through the characters in that object.</span></span>  

> [!IMPORTANT]
> <span data-ttu-id="e13d4-105">Klasa wylicza pojedyncze wystąpienia 16-bitowe <xref:System.Char>. `CharEnumerator`</span><span class="sxs-lookup"><span data-stu-id="e13d4-105">The `CharEnumerator` class enumerates individual 16-bit <xref:System.Char> instances.</span></span> <span data-ttu-id="e13d4-106">Nie należy traktować graphemes (czyli znaku, po którym następuje co najmniej jeden znak combiding) lub pary zastępczych (czyli znaków poza podstawową warstwą wielojęzyczną Unicode) jako pojedyncze znaki.</span><span class="sxs-lookup"><span data-stu-id="e13d4-106">It does not consider graphemes (that is, a character followed by one or more combiding characters) or surrogate pairs (that is, characters outside the Unicode Basic Multilingual Plane) as single characters.</span></span> <span data-ttu-id="e13d4-107">Dla modułu wyliczającego, który obsługuje te typy znaków jako pojedynczą jednostkę, <xref:System.Globalization.StringInfo> należy użyć klasy.</span><span class="sxs-lookup"><span data-stu-id="e13d4-107">For an enumerator that handles these types of characters as a single unit, use the <xref:System.Globalization.StringInfo> class.</span></span>

 <span data-ttu-id="e13d4-108">Brak konstruktora publicznego dla elementu <xref:System.CharEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="e13d4-108">There is no public constructor for <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="e13d4-109">Zamiast tego należy wywołać <xref:System.String> <xref:System.String.GetEnumerator%2A> metodę obiektu, aby uzyskać element <xref:System.CharEnumerator> , który jest zainicjowany do odwoływania się do ciągu.</span><span class="sxs-lookup"><span data-stu-id="e13d4-109">Instead, call a <xref:System.String> object's <xref:System.String.GetEnumerator%2A> method to obtain a <xref:System.CharEnumerator> that is initialized to reference the string.</span></span>  
  
 <span data-ttu-id="e13d4-110">A <xref:System.CharEnumerator> utrzymuje wewnętrzny indeks do znaków w ciągu, do których się <xref:System.CharEnumerator> odwołuje.</span><span class="sxs-lookup"><span data-stu-id="e13d4-110">A <xref:System.CharEnumerator> maintains an internal index to the characters in the string the <xref:System.CharEnumerator> references.</span></span> <span data-ttu-id="e13d4-111">Stan indeksu jest nieprawidłowy, gdy odwołuje się do pozycji znaku logicznie przed pierwszym znakiem lub po ostatnim znaku w ciągu, i jest prawidłowy, gdy odwołuje się do znaku w ciągu.</span><span class="sxs-lookup"><span data-stu-id="e13d4-111">The state of the index is invalid when it references a character position logically before the first character or after the last character in the string, and valid when it references a character within the string.</span></span> <span data-ttu-id="e13d4-112">Indeks jest inicjowany do pozycji logicznie przed pierwszym znakiem i jest ustawiany na pozycji po ostatnim znaku, gdy iteracja zostanie zakończona.</span><span class="sxs-lookup"><span data-stu-id="e13d4-112">The index is initialized to a position logically before the first character, and is set to a position after the last character when the iteration is complete.</span></span> <span data-ttu-id="e13d4-113">Wyjątek jest generowany, jeśli próbujesz uzyskać dostęp do znaku, gdy indeks jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="e13d4-113">An exception is thrown if you attempt to access a character while the index is invalid.</span></span>  
  
 <span data-ttu-id="e13d4-114"><xref:System.CharEnumerator.MoveNext%2A> Metoda zwiększa indeks o jeden, tak więc pierwsze i kolejne znaki są dostępne z kolei.</span><span class="sxs-lookup"><span data-stu-id="e13d4-114">The <xref:System.CharEnumerator.MoveNext%2A> method increments the index by one, so the first and subsequent characters are accessed in turn.</span></span> <span data-ttu-id="e13d4-115"><xref:System.CharEnumerator.Reset%2A> Metoda ustawia indeks na pozycję logicznie przed pierwszym znakiem.</span><span class="sxs-lookup"><span data-stu-id="e13d4-115">The <xref:System.CharEnumerator.Reset%2A> method sets the index to a position logically before the first character.</span></span> <span data-ttu-id="e13d4-116"><xref:System.CharEnumerator.Current%2A> Właściwość pobiera znak aktualnie przywoływany przez indeks.</span><span class="sxs-lookup"><span data-stu-id="e13d4-116">The <xref:System.CharEnumerator.Current%2A> property retrieves the character currently referenced by index.</span></span> <span data-ttu-id="e13d4-117">Metoda tworzy kopię <xref:System.CharEnumerator>. <xref:System.CharEnumerator.Clone%2A></span><span class="sxs-lookup"><span data-stu-id="e13d4-117">The <xref:System.CharEnumerator.Clone%2A> method creates a copy of the <xref:System.CharEnumerator>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e13d4-118">Kilka niezależnych <xref:System.CharEnumerator> wystąpień w jednym lub wielu wątkach może mieć dostęp do jednego <xref:System.String>wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="e13d4-118">Several independent instances of <xref:System.CharEnumerator> across one or more threads can have access to a single instance of <xref:System.String>.</span></span> <span data-ttu-id="e13d4-119">Ta klasa jest zaimplementowana do <xref:System.Collections.IEnumerator> obsługi interfejsu.</span><span class="sxs-lookup"><span data-stu-id="e13d4-119">This class is implemented to support the <xref:System.Collections.IEnumerator> interface.</span></span> <span data-ttu-id="e13d4-120">Aby uzyskać więcej informacji dotyczących korzystania z modułu wyliczającego, <xref:System.Collections.IEnumerator> Zobacz temat.</span><span class="sxs-lookup"><span data-stu-id="e13d4-120">For more information regarding the use of an enumerator, see the <xref:System.Collections.IEnumerator> topic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e13d4-121">Poniższy przykład używa <xref:System.CharEnumerator> klasy do wyliczania pojedynczych znaków w ciągu.</span><span class="sxs-lookup"><span data-stu-id="e13d4-121">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="e13d4-122">Tworzy wystąpienie <xref:System.CharEnumerator> obiektu przez <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> wywołanie metody, przenosi z jednego znaku do następnego przez wywołanie <xref:System.CharEnumerator.MoveNext%2A> metody i wyświetla <xref:System.CharEnumerator.Current%2A> bieżący znak przez pobranie wartości właściwości.</span><span class="sxs-lookup"><span data-stu-id="e13d4-122">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="e13d4-123">Należy jednak pamiętać, że ta sama operacja może być wykonywana nieco bardziej intuicyjnie przy użyciu `foreach` (w C#) lub `For Each` (w Visual Basic), jak pokazano w poniższym przykładzie.</span><span class="sxs-lookup"><span data-stu-id="e13d4-123">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.String" />
    <altmember cref="T:System.Collections.IEnumerator" />
    <altmember cref="T:System.Collections.IEnumerable" />
    <altmember cref="T:System.Collections.ICollection" />
  </Docs>
  <Members>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="charEnumerator.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e13d4-124">Tworzy kopię bieżącego <see cref="T:System.CharEnumerator" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="e13d4-124">Creates a copy of the current <see cref="T:System.CharEnumerator" /> object.</span></span></summary>
        <returns><span data-ttu-id="e13d4-125">Jest to kopia bieżącego <see cref="T:System.CharEnumerator" /> obiektu. <see cref="T:System.Object" /></span><span class="sxs-lookup"><span data-stu-id="e13d4-125">An <see cref="T:System.Object" /> that is a copy of the current <see cref="T:System.CharEnumerator" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e13d4-126">Wartość zwracana jest kopią tego wystąpienia <xref:System.CharEnumerator> i jego bieżącym stanem.</span><span class="sxs-lookup"><span data-stu-id="e13d4-126">The return value is a copy of this instance of <xref:System.CharEnumerator> and its current state.</span></span> <span data-ttu-id="e13d4-127">Jest to przydatne w przypadku zapisywania stanu podczas iteracji przez <xref:System.String> obiekt.</span><span class="sxs-lookup"><span data-stu-id="e13d4-127">This is useful for saving your state while iterating through a <xref:System.String> object.</span></span>  
  
 <span data-ttu-id="e13d4-128">Załóżmy na przykład, że aplikacja używa oryginalnego wystąpienia programu <xref:System.CharEnumerator> do iteracji przez każdy znak <xref:System.String>w.</span><span class="sxs-lookup"><span data-stu-id="e13d4-128">For example, suppose your application uses an original instance of <xref:System.CharEnumerator> to iterate through each character in a <xref:System.String>.</span></span> <span data-ttu-id="e13d4-129">Gdy napotkany jest jakiś unikatowy znak, aplikacja wstrzymuje przetwarzanie i wywołuje <xref:System.CharEnumerator.Clone%2A> metodę.</span><span class="sxs-lookup"><span data-stu-id="e13d4-129">When some unique character is encountered, your application pauses processing and invokes the <xref:System.CharEnumerator.Clone%2A> method.</span></span> <span data-ttu-id="e13d4-130">W efekcie indeks <xref:System.CharEnumerator> obiektu jest zapisywany <xref:System.String>w obiekcie.</span><span class="sxs-lookup"><span data-stu-id="e13d4-130">In effect, this saves the <xref:System.CharEnumerator> object's index in the <xref:System.String>.</span></span>  
  
 <span data-ttu-id="e13d4-131">Aplikacja używa klonu do przechodzenia do innej części programu `String` w celu przeprowadzenia dodatkowego przetwarzania.</span><span class="sxs-lookup"><span data-stu-id="e13d4-131">Your application uses the clone to navigate to another part of the `String` to perform some auxiliary processing.</span></span> <span data-ttu-id="e13d4-132">Efektem ubocznym tej nawigacji jest klon, który traci śledzenie pozycji, w której przetwarzanie zostało zatrzymane.</span><span class="sxs-lookup"><span data-stu-id="e13d4-132">The side-effect of this navigation is the clone loses track of the position where processing stopped.</span></span> <span data-ttu-id="e13d4-133">Jednak po zakończeniu przetwarzania pomocniczego aplikacja odrzuca klon i używa oryginalnego <xref:System.CharEnumerator> wystąpienia do wznowienia pracy <xref:System.String> w miejscu, w którym zostało zatrzymane.</span><span class="sxs-lookup"><span data-stu-id="e13d4-133">However, when the auxiliary processing is complete, your application discards the clone and uses the original <xref:System.CharEnumerator> instance to resume working on the <xref:System.String> where the original processing stopped.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e13d4-134">Ta metoda jest implementowana do obsługi <xref:System.ICloneable> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="e13d4-134">This method is implemented to support the <xref:System.ICloneable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public char Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char Current { char get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : char" Usage="System.CharEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IEnumerator`1.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e13d4-135">Pobiera aktualnie przywoływany znak w ciągu wyliczanym przez ten <see cref="T:System.CharEnumerator" /> obiekt.</span><span class="sxs-lookup"><span data-stu-id="e13d4-135">Gets the currently referenced character in the string enumerated by this <see cref="T:System.CharEnumerator" /> object.</span></span></summary>
        <value><span data-ttu-id="e13d4-136">Znak Unicode, do którego odwołuje <see cref="T:System.CharEnumerator" /> się ten obiekt.</span><span class="sxs-lookup"><span data-stu-id="e13d4-136">The Unicode character currently referenced by this <see cref="T:System.CharEnumerator" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e13d4-137">Klasa przechowuje wewnętrzny indeks do wyliczeniowego ciągu, <xref:System.CharEnumerator.Current%2A> a właściwość zwraca znak, który jest aktualnie przywoływany przez indeks. <xref:System.CharEnumerator></span><span class="sxs-lookup"><span data-stu-id="e13d4-137">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.Current%2A> property returns the character that is currently referenced by the index.</span></span> <span data-ttu-id="e13d4-138">Ta właściwość powinna być wywoływana tylko wtedy, gdy indeks jest prawidłowy; w przeciwnym razie jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="e13d4-138">This property should be invoked only when the index is valid; otherwise, an exception is thrown.</span></span>  
  
 <span data-ttu-id="e13d4-139">Indeks jest zawsze nieprawidłowy dla pustego ciągu ("").</span><span class="sxs-lookup"><span data-stu-id="e13d4-139">The index is always invalid for an empty string ("").</span></span> <span data-ttu-id="e13d4-140">Indeks jest również nieprawidłowy po <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> wywołaniu metody lub. <xref:System.CharEnumerator.Reset%2A></span><span class="sxs-lookup"><span data-stu-id="e13d4-140">The index is also invalid after the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> or <xref:System.CharEnumerator.Reset%2A> method is called.</span></span> <span data-ttu-id="e13d4-141">Po wywołaniu jednej z tych metod Wywołaj <xref:System.CharEnumerator.MoveNext%2A> metodę, aby dostosować indeks do pierwszego znaku w ciągu wyliczeniowy.</span><span class="sxs-lookup"><span data-stu-id="e13d4-141">After either of these methods is called, invoke the <xref:System.CharEnumerator.MoveNext%2A> method to adjust the index to the first character in the enumerated string.</span></span> <span data-ttu-id="e13d4-142">Indeks jest prawidłowy za każdym razem <xref:System.CharEnumerator.MoveNext%2A> , gdy `true`Metoda zwraca.</span><span class="sxs-lookup"><span data-stu-id="e13d4-142">The index is valid whenever the <xref:System.CharEnumerator.MoveNext%2A> method returns `true`.</span></span>  
  
 <span data-ttu-id="e13d4-143"><xref:System.CharEnumerator.Current%2A>nie przenosi indeksu i <xref:System.CharEnumerator.Current%2A> kolejne wywołania do zwrócenia tego samego znaku do <xref:System.CharEnumerator.MoveNext%2A>, <xref:System.CharEnumerator.Reset%2A>, lub <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="e13d4-143"><xref:System.CharEnumerator.Current%2A> does not move the index, and consecutive calls to <xref:System.CharEnumerator.Current%2A> return the same character until <xref:System.CharEnumerator.MoveNext%2A>, <xref:System.CharEnumerator.Reset%2A>, or <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> is called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e13d4-144">Poniższy przykład używa <xref:System.CharEnumerator> klasy do wyliczania pojedynczych znaków w ciągu.</span><span class="sxs-lookup"><span data-stu-id="e13d4-144">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="e13d4-145">Tworzy wystąpienie <xref:System.CharEnumerator> obiektu przez <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> wywołanie metody, przenosi z jednego znaku do następnego przez wywołanie <xref:System.CharEnumerator.MoveNext%2A> metody i wyświetla <xref:System.CharEnumerator.Current%2A> bieżący znak przez pobranie wartości właściwości.</span><span class="sxs-lookup"><span data-stu-id="e13d4-145">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="e13d4-146">Należy jednak pamiętać, że ta sama operacja może być wykonywana nieco bardziej intuicyjnie przy użyciu `foreach` (w C#) lub `For Each` (w Visual Basic), jak pokazano w poniższym przykładzie.</span><span class="sxs-lookup"><span data-stu-id="e13d4-146">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e13d4-147">Indeks jest nieprawidłowy; oznacza to, że jest wcześniejsza niż pierwszy lub po ostatnim znaku wyliczeniowego ciągu.</span><span class="sxs-lookup"><span data-stu-id="e13d4-147">The index is invalid; that is, it is before the first or after the last character of the enumerated string.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="charEnumerator.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e13d4-148">Zwalnia wszystkie zasoby używane przez bieżące wystąpienie <see cref="T:System.CharEnumerator" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="e13d4-148">Releases all resources used by the current instance of the <see cref="T:System.CharEnumerator" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e13d4-149">Wywołaj <xref:System.CharEnumerator.Dispose%2A> po zakończeniu korzystania z <xref:System.CharEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="e13d4-149">Call <xref:System.CharEnumerator.Dispose%2A> when you are finished using the <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="e13d4-150"><xref:System.CharEnumerator.Dispose%2A> Metoda<xref:System.CharEnumerator> pozostawia w stanie niezdatnym do użytku.</span><span class="sxs-lookup"><span data-stu-id="e13d4-150">The <xref:System.CharEnumerator.Dispose%2A> method leaves the <xref:System.CharEnumerator> in an unusable state.</span></span> <span data-ttu-id="e13d4-151">Po wywołaniu <xref:System.CharEnumerator.Dispose%2A>należy wydać wszystkie odwołania <xref:System.CharEnumerator> do, aby moduł wyrzucania elementów bezużytecznych mógł odwoływać pamięć <xref:System.CharEnumerator> , którą zajmował.</span><span class="sxs-lookup"><span data-stu-id="e13d4-151">After calling <xref:System.CharEnumerator.Dispose%2A>, you must release all references to the <xref:System.CharEnumerator> so the garbage collector can reclaim the memory that the <xref:System.CharEnumerator> was occupying.</span></span>  
  
 <span data-ttu-id="e13d4-152">Aby uzyskać więcej informacji, zobacz [Oczyszczanie zasobów niezarządzanych](~/docs/standard/garbage-collection/unmanaged.md) i implementowanie [metody Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="e13d4-152">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e13d4-153">Zawsze wywołuj <xref:System.CharEnumerator.Dispose%2A> przed wydaniem ostatniego odwołania <xref:System.CharEnumerator>do.</span><span class="sxs-lookup"><span data-stu-id="e13d4-153">Always call <xref:System.CharEnumerator.Dispose%2A> before you release your last reference to the <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="e13d4-154">W przeciwnym razie używane zasoby nie zostaną zwolnione do momentu wywołania <xref:System.CharEnumerator> `Finalize` metody obiektu przez moduł zbierający elementy bezużyteczne.</span><span class="sxs-lookup"><span data-stu-id="e13d4-154">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.CharEnumerator> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="charEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e13d4-155">Zwiększa wewnętrzny indeks bieżącego <see cref="T:System.CharEnumerator" /> obiektu do następnego znaku wyliczeniowego ciągu.</span><span class="sxs-lookup"><span data-stu-id="e13d4-155">Increments the internal index of the current <see cref="T:System.CharEnumerator" /> object to the next character of the enumerated string.</span></span></summary>
        <returns><span data-ttu-id="e13d4-156"><see langword="true" />Jeśli indeks został pomyślnie zwiększony i w ciągu wyliczenia; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="e13d4-156"><see langword="true" /> if the index is successfully incremented and within the enumerated string; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e13d4-157">Klasa przechowuje wewnętrzny indeks do wyliczeniowego ciągu, <xref:System.CharEnumerator.MoveNext%2A> a Metoda zwiększa indeks o jeden. <xref:System.CharEnumerator></span><span class="sxs-lookup"><span data-stu-id="e13d4-157">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.MoveNext%2A> method increments the index by one.</span></span> <span data-ttu-id="e13d4-158">Wywoływanie <xref:System.CharEnumerator.MoveNext%2A> po <xref:System.String.GetEnumerator%2A> wywołaniu <xref:System.CharEnumerator.Reset%2A> lub zwiększeniu bieżącego położenia znaku do pierwszego znaku w ciągu wyliczeniowy.</span><span class="sxs-lookup"><span data-stu-id="e13d4-158">Call <xref:System.CharEnumerator.MoveNext%2A> after calling <xref:System.String.GetEnumerator%2A> or <xref:System.CharEnumerator.Reset%2A> to increment the current character position to the first character in the enumerated string.</span></span> <span data-ttu-id="e13d4-159">Sprawdź, czy wartość zwracana polega `true` na określeniu, że bieżąca pozycja znaku jest prawidłowa.</span><span class="sxs-lookup"><span data-stu-id="e13d4-159">Check that the return value is `true` to determine that the current character position is valid.</span></span>  
  
 <span data-ttu-id="e13d4-160">Jeśli indeks jest już poza ostatnim znakiem wyliczeniowego ciągu, indeks nie zostanie zmieniony i `false` zostanie zwrócony.</span><span class="sxs-lookup"><span data-stu-id="e13d4-160">If the index is already beyond the last character of the enumerated string, the index is not changed and `false` is returned.</span></span>  
  
 <span data-ttu-id="e13d4-161">Zauważ, że jeśli ciąg wyliczeniowy jest pusty (""), stan elementu <xref:System.CharEnumerator> jest zawsze nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="e13d4-161">Notice that if the enumerated string is empty (""), the state of the <xref:System.CharEnumerator> is always invalid.</span></span> <span data-ttu-id="e13d4-162">Wynika to z faktu, że wewnętrzny <xref:System.CharEnumerator> indeks jest początkowo przed pierwszym znakiem wyliczeniowego ciągu i dlatego jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="e13d4-162">This is because the internal index for the <xref:System.CharEnumerator> is initially before the first character of the enumerated string and is therefore invalid.</span></span> <span data-ttu-id="e13d4-163"><xref:System.CharEnumerator.MoveNext%2A>logicznie ustawia indeks po ostatnim (nieistniejącym) znaku wyliczeniowego ciągu, który jest również nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="e13d4-163"><xref:System.CharEnumerator.MoveNext%2A> logically sets the index after the last (nonexistent) character of the enumerated string which is also invalid.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e13d4-164">Poniższy przykład używa <xref:System.CharEnumerator> klasy do wyliczania pojedynczych znaków w ciągu.</span><span class="sxs-lookup"><span data-stu-id="e13d4-164">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="e13d4-165">Tworzy wystąpienie <xref:System.CharEnumerator> obiektu przez <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> wywołanie metody, przenosi z jednego znaku do następnego przez wywołanie <xref:System.CharEnumerator.MoveNext%2A> metody i wyświetla <xref:System.CharEnumerator.Current%2A> bieżący znak przez pobranie wartości właściwości.</span><span class="sxs-lookup"><span data-stu-id="e13d4-165">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="e13d4-166">Należy jednak pamiętać, że ta sama operacja może być wykonywana nieco bardziej intuicyjnie przy użyciu `foreach` (w C#) lub `For Each` (w Visual Basic), jak pokazano w poniższym przykładzie.</span><span class="sxs-lookup"><span data-stu-id="e13d4-166">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="charEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e13d4-167">Inicjuje indeks do pozycji logicznej przed pierwszym znakiem wyliczeniowego ciągu.</span><span class="sxs-lookup"><span data-stu-id="e13d4-167">Initializes the index to a position logically before the first character of the enumerated string.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e13d4-168">Klasa przechowuje wewnętrzny indeks do wyliczeniowego ciągu, <xref:System.CharEnumerator.Reset%2A> a metoda ustawia nieprawidłowy stan indeksu. <xref:System.CharEnumerator></span><span class="sxs-lookup"><span data-stu-id="e13d4-168">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.Reset%2A> method sets the index to the invalid state.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IEnumerator::Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e13d4-169">Pobiera aktualnie przywoływany znak w ciągu wyliczanym przez ten <see cref="T:System.CharEnumerator" /> obiekt.</span><span class="sxs-lookup"><span data-stu-id="e13d4-169">Gets the currently referenced character in the string enumerated by this <see cref="T:System.CharEnumerator" /> object.</span></span> <span data-ttu-id="e13d4-170">Aby uzyskać opis tego elementu członkowskiego, <see cref="P:System.Collections.IEnumerator.Current" />Zobacz.</span><span class="sxs-lookup"><span data-stu-id="e13d4-170">For a description of this member, see <see cref="P:System.Collections.IEnumerator.Current" />.</span></span></summary>
        <value><span data-ttu-id="e13d4-171">Opakowany znak Unicode, obecnie do którego <see cref="T:System.CharEnumerator" /> odwołuje się ten obiekt.</span><span class="sxs-lookup"><span data-stu-id="e13d4-171">The boxed Unicode character currently referenced by this <see cref="T:System.CharEnumerator" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e13d4-172">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="e13d4-172">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e13d4-173">Może być używana tylko wtedy, <xref:System.CharEnumerator> gdy wystąpienie jest rzutowane <xref:System.Collections.IEnumerator> do interfejsu.</span><span class="sxs-lookup"><span data-stu-id="e13d4-173">It can be used only when the <xref:System.CharEnumerator> instance is cast to an <xref:System.Collections.IEnumerator> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e13d4-174">Wyliczanie nie zostało uruchomione.</span><span class="sxs-lookup"><span data-stu-id="e13d4-174">Enumeration has not started.</span></span>  
  
 <span data-ttu-id="e13d4-175">—lub—</span><span class="sxs-lookup"><span data-stu-id="e13d4-175">-or-</span></span>  
  
 <span data-ttu-id="e13d4-176">Wyliczenie zostało zakończone.</span><span class="sxs-lookup"><span data-stu-id="e13d4-176">Enumeration has ended.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e13d4-177">Zwalnia wszystkie zasoby używane przez <see cref="T:System.CharEnumerator" /> klasę.</span><span class="sxs-lookup"><span data-stu-id="e13d4-177">Releases all resources used by the <see cref="T:System.CharEnumerator" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="e13d4-178">Wywołaj metodę IDisposable. Dispose po zakończeniu korzystania z <xref:System.CharEnumerator> klasy.</span><span class="sxs-lookup"><span data-stu-id="e13d4-178">Call IDisposable.Dispose when you are finished using the <xref:System.CharEnumerator> class.</span></span> <span data-ttu-id="e13d4-179">Metoda opuszcza <xref:System.CharEnumerator> klasę w stanie niezdatnym do użytku.</span><span class="sxs-lookup"><span data-stu-id="e13d4-179">The method leaves the <xref:System.CharEnumerator> class in an unusable state.</span></span> <span data-ttu-id="e13d4-180">Po wywołaniu go należy wydać wszystkie odwołania do <xref:System.CharEnumerator> klasy, aby moduł wyrzucania elementów bezużytecznych mógł odzyskiwać pamięć <xref:System.CharEnumerator> , która zajmowała Klasa.</span><span class="sxs-lookup"><span data-stu-id="e13d4-180">After calling it, you must release all references to the <xref:System.CharEnumerator> class so the garbage collector can reclaim the memory that the <xref:System.CharEnumerator> class was occupying.</span></span>

<span data-ttu-id="e13d4-181">Aby uzyskać więcej informacji, zobacz [Oczyszczanie zasobów niezarządzanych](~/docs/standard/garbage-collection/unmanaged.md) i implementowanie [metody Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="e13d4-181">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>

> [!NOTE]
> <span data-ttu-id="e13d4-182">Zawsze Wywołaj metodę IDisposable. Dispose przed wydaniem ostatniego odwołania do <xref:System.CharEnumerator> klasy.</span><span class="sxs-lookup"><span data-stu-id="e13d4-182">Always call IDisposable.Dispose before you release your last reference to the <xref:System.CharEnumerator> class.</span></span> <span data-ttu-id="e13d4-183">W przeciwnym razie używane zasoby nie zostaną zwolnione do momentu wywołania <xref:System.CharEnumerator> <xref:System.Object.Finalize> metody obiektu przez moduł zbierający elementy bezużyteczne.</span><span class="sxs-lookup"><span data-stu-id="e13d4-183">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.CharEnumerator> object's <xref:System.Object.Finalize> method.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
