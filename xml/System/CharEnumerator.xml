<Type Name="CharEnumerator" FullName="System.CharEnumerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b8c882f1a4e5a79cf0dd4c36a3bb4b184e5ed82b" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36432915" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class CharEnumerator : ICloneable, System.Collections.Generic.IEnumerator&lt;char&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit CharEnumerator extends System.Object implements class System.Collections.Generic.IEnumerator`1&lt;char&gt;, class System.Collections.IEnumerator, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.CharEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CharEnumerator&#xA;Implements ICloneable, IEnumerator(Of Char)" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharEnumerator sealed : ICloneable, System::Collections::Generic::IEnumerator&lt;char&gt;" />
  <TypeSignature Language="F#" Value="type CharEnumerator = class&#xA;    interface IEnumerator&#xA;    interface ICloneable&#xA;    interface IEnumerator&lt;char&gt;&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerator&lt;System.Char&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Obsługuje Iterowanie po <see cref="T:System.String" /> obiektu i odczytywanie ich indywidualnych znaków. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.CharEnumerator> umożliwia dostęp tylko do odczytu do znaków w odwoływany <xref:System.String> obiektu. Na przykład `foreach` instrukcji języka Visual Basic i C# języków programowania, który iteruje po kolekcji elementów, pobiera <xref:System.CharEnumerator> z <xref:System.String> obiekt, aby można było wykonać iterację znaków w tym obiekt.  
  
 Nie istnieje żadne konstruktora publicznego dla <xref:System.CharEnumerator>. Zamiast tego wywołać <xref:System.String> obiektu <xref:System.String.GetEnumerator%2A> metodę, aby uzyskać <xref:System.CharEnumerator> który został zainicjowany do odwołania ciągu.  
  
 A <xref:System.CharEnumerator> obsługuje wewnętrzny indeks znaków w ciągu <xref:System.CharEnumerator> odwołania. Stan indeksu jest nieprawidłowy, gdy odwołuje się do pozycji znaku logicznie przed pierwszym znakiem i po ostatnim znaku w ciągu i ważne, gdy odwołuje się do znaku w ciągu. Indeks jest ustawiana na pozycji logicznie przed pierwszym znakiem i ma ustawioną wartość pozycji za ostatni znak po zakończeniu iteracji. Wyjątek jest próba uzyskania dostępu znak, gdy indeks jest nieprawidłowy.  
  
 <xref:System.CharEnumerator.MoveNext%2A> Metody zwiększa indeks, dlatego pierwsze i kolejne znaki są dostępne z kolei. <xref:System.CharEnumerator.Reset%2A> Metody ustawia indeks na pozycji logicznie przed pierwszym znakiem. <xref:System.CharEnumerator.Current%2A> Właściwość pobiera znak obecnie wywoływane przez indeks. <xref:System.CharEnumerator.Clone%2A> Metoda tworzy kopię <xref:System.CharEnumerator>.  
  
> [!NOTE]
>  Kilka wystąpień niezależne <xref:System.CharEnumerator> między co najmniej jeden wątek może mieć dostęp do jednego wystąpienia <xref:System.String>. Ta klasa jest zaimplementowana do obsługi <xref:System.Collections.IEnumerator> interfejsu. Aby uzyskać więcej informacji na temat użycia modułu wyliczającego zobacz <xref:System.Collections.IEnumerator> tematu.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.CharEnumerator> klasy wyliczyć znaki w ciągu. Metoda tworzy <xref:System.CharEnumerator> obiektu przez wywołanie metody <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> metody, są przenoszone z jednego znaku do następnego wywołując <xref:System.CharEnumerator.MoveNext%2A> metody i wyświetla bieżący znak pobierając zaletą <xref:System.CharEnumerator.Current%2A> właściwości.  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 Należy jednak pamiętać, że tę samą operację można wykonać nieco bardziej intuicyjne używając `foreach` (w języku C#) lub `For Each` (w języku Visual Basic), jak w poniższym przykładzie przedstawiono.  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.String" />
    <altmember cref="T:System.Collections.IEnumerator" />
    <altmember cref="T:System.Collections.IEnumerable" />
    <altmember cref="T:System.Collections.ICollection" />
  </Docs>
  <Members>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="charEnumerator.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy kopię bieżącego <see cref="T:System.CharEnumerator" /> obiektu.</summary>
        <returns>
          <see cref="T:System.Object" /> Czyli kopię bieżącego <see cref="T:System.CharEnumerator" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana jest kopię tego wystąpienia <xref:System.CharEnumerator> i swojego bieżącego stanu. Jest to przydatne w przypadku Zapisywanie stanu użytkownika podczas iteracji <xref:System.String> obiektu.  
  
 Na przykład, załóżmy, że aplikacja używa oryginalnego wystąpienia programu <xref:System.CharEnumerator> do iterowania po każdym znaku w <xref:System.String>. W przypadku niektórych znaków unikatowy aplikacja wstrzymuje przetwarzania i wywołuje <xref:System.CharEnumerator.Clone%2A> metody. W efekcie zapisuje <xref:System.CharEnumerator> indeksu obiektu w <xref:System.String>.  
  
 Aplikacja używa klonu, aby przejść do innej części `String` do wykonania niektórych dodatkowego przetwarzania. Efektem ubocznym tego nawigacji jest klonu utraci śledzenie pozycji, której przetwarzanie zostało zakończone. Jednak po ukończeniu dodatkowego przetwarzania aplikacji odrzuca klonu i używa oryginalnej <xref:System.CharEnumerator> wystąpienia, aby wznowić pracę na <xref:System.String> gdzie oryginalnego przetwarzania zatrzymana.  
  
> [!NOTE]
>  Ta metoda jest zaimplementowana do obsługi <xref:System.ICloneable> interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public char Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char Current { char get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : char" Usage="System.CharEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IEnumerator`1.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obecnie przywoływanego znak w ciągu wyliczyć to <see cref="T:System.CharEnumerator" /> obiektu.</summary>
        <value>Znak Unicode, w obecnie odwołuje się ten <see cref="T:System.CharEnumerator" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.CharEnumerator> Klasa obsługuje indeks wewnętrzny wyliczany ciąg i <xref:System.CharEnumerator.Current%2A> właściwość zwraca znak, który obecnie jest przywoływany przez indeks. Ta właściwość powinna być wywoływana tylko wtedy, gdy indeks jest nieprawidłowy; w przeciwnym wypadku jest zwracany wyjątek.  
  
 Indeks zawsze jest nieprawidłowy dla pustego ciągu (""). Indeks jest nieprawidłowy po również <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> lub <xref:System.CharEnumerator.Reset%2A> metoda jest wywoływana. Po każdej z tych metod, wywołaj <xref:System.CharEnumerator.MoveNext%2A> metodę, aby dopasować indeks pierwszego znaku w ciągu wyliczone. Indeks jest nieprawidłowy gdy <xref:System.CharEnumerator.MoveNext%2A> metoda zwraca `true`.  
  
 <xref:System.CharEnumerator.Current%2A> nie powoduje przeniesienia indeks i kolejne wywołania <xref:System.CharEnumerator.Current%2A> zwracać ten sam znak do <xref:System.CharEnumerator.MoveNext%2A>, <xref:System.CharEnumerator.Reset%2A>, lub <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> jest wywoływana.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.CharEnumerator> klasy wyliczyć znaki w ciągu. Metoda tworzy <xref:System.CharEnumerator> obiektu przez wywołanie metody <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> metody, są przenoszone z jednego znaku do następnego wywołując <xref:System.CharEnumerator.MoveNext%2A> metody i wyświetla bieżący znak pobierając zaletą <xref:System.CharEnumerator.Current%2A> właściwości.  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 Należy jednak pamiętać, że tę samą operację można wykonać nieco bardziej intuicyjne używając `foreach` (w języku C#) lub `For Each` (w języku Visual Basic), jak w poniższym przykładzie przedstawiono.  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Indeks jest nieprawidłowy. oznacza to, że jest przed pierwszym lub za ostatnim znakiem wyliczany ciąg.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="charEnumerator.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszelkie zasoby używane przez bieżące wystąpienie klasy <see cref="T:System.CharEnumerator" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołanie <xref:System.CharEnumerator.Dispose%2A> po zakończeniu przy użyciu <xref:System.CharEnumerator>. <xref:System.CharEnumerator.Dispose%2A> Pozostawia metody <xref:System.CharEnumerator> w stanie uniemożliwiającym jego używanie. Po wywołaniu <xref:System.CharEnumerator.Dispose%2A>, konieczne jest zwolnienie wszystkich odwołań do <xref:System.CharEnumerator> , moduł zbierający elementy bezużyteczne mógł odzyskać pamięć który <xref:System.CharEnumerator> klasy.  
  
 Aby uzyskać więcej informacji, zobacz [czyszczenie zasobów niezarządzanych](~/docs/standard/garbage-collection/unmanaged.md) i [implementacja metody Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Wywoływanie zawsze <xref:System.CharEnumerator.Dispose%2A> przed zwolnieniem ostatniego odwołania do <xref:System.CharEnumerator>. W przeciwnym razie używa zasobów nie zostanie zwolniona do wywołania modułu zbierającego elementy bezużyteczne <xref:System.CharEnumerator> obiektu `Finalize` metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="charEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indeks wewnętrzny bieżącego zwiększa <see cref="T:System.CharEnumerator" /> obiektu na następny znak wyliczany ciąg.</summary>
        <returns>
          <see langword="true" /> Jeśli indeks pomyślnie jest zwiększany i ciągu wyliczany; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.CharEnumerator> Klasa obsługuje indeks wewnętrzny wyliczany ciąg i <xref:System.CharEnumerator.MoveNext%2A> metody zwiększa indeks o jeden. Wywołanie <xref:System.CharEnumerator.MoveNext%2A> po wywołaniu <xref:System.String.GetEnumerator%2A> lub <xref:System.CharEnumerator.Reset%2A> Aby zwiększyć bieżącej pozycji znaku do pierwszego znaku w wyliczany ciąg. Sprawdź, czy jest zwracana wartość `true` ustalenie, czy bieżące położenie znaku jest prawidłowa.  
  
 Jeśli indeks jest poza ostatni znak wyliczany ciąg, indeks nie ulega zmianie i `false` jest zwracany.  
  
 Zwróć uwagę, że jeśli wyliczany ciąg jest pusty (""), stan <xref:System.CharEnumerator> zawsze jest nieprawidłowy. Jest to spowodowane indeks wewnętrzny <xref:System.CharEnumerator> jest początkowo, przed pierwszym znakiem wyliczany ciąg i dlatego jest nieprawidłowy. <xref:System.CharEnumerator.MoveNext%2A> logicznie ustawia indeks za ostatni znak (nieistniejącą) wyliczany ciągu, który również jest nieprawidłowy.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.CharEnumerator> klasy wyliczyć znaki w ciągu. Metoda tworzy <xref:System.CharEnumerator> obiektu przez wywołanie metody <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> metody, są przenoszone z jednego znaku do następnego wywołując <xref:System.CharEnumerator.MoveNext%2A> metody i wyświetla bieżący znak pobierając zaletą <xref:System.CharEnumerator.Current%2A> właściwości.  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 Należy jednak pamiętać, że tę samą operację można wykonać nieco bardziej intuicyjne używając `foreach` (w języku C#) lub `For Each` (w języku Visual Basic), jak w poniższym przykładzie przedstawiono.  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="charEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Inicjuje indeks pozycji logicznie przed pierwszym znakiem wyliczany ciąg.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.CharEnumerator> Klasa obsługuje indeks wewnętrzny wyliczany ciąg i <xref:System.CharEnumerator.Reset%2A> metoda ustawia indeks nieprawidłowy stan.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IEnumerator.Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.CharEnumerator.System.Collections.IEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obecnie przywoływanego znak w ciągu wyliczyć to <see cref="T:System.CharEnumerator" /> obiektu. Opis tego elementu członkowskiego, zobacz <see cref="P:System.Collections.IEnumerator.Current" />.</summary>
        <value>Opakowany obecnie odwołuje się ten znak Unicode <see cref="T:System.CharEnumerator" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.CharEnumerator> wystąpienia jest rzutowane na <xref:System.Collections.IEnumerator> interfejsu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wyliczanie nie zostało uruchomione.  - lub - wyliczanie zostało zakończone.</exception>
      </Docs>
    </Member>
  </Members>
</Type>