<Type Name="CharEnumerator" FullName="System.CharEnumerator">
  <TypeSignature Language="C#" Value="public sealed class CharEnumerator : ICloneable, System.Collections.Generic.IEnumerator&lt;char&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit CharEnumerator extends System.Object implements class System.Collections.Generic.IEnumerator`1&lt;char&gt;, class System.Collections.IEnumerator, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.CharEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CharEnumerator&#xA;Implements ICloneable, IEnumerator(Of Char)" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharEnumerator sealed : ICloneable, System::Collections::Generic::IEnumerator&lt;char&gt;" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerator&lt;System.Char&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="20f29-101">Obsługuje Iterowanie po <see cref="T:System.String" /> obiektu i odczytywanie ich indywidualnych znaków.</span><span class="sxs-lookup"><span data-stu-id="20f29-101">Supports iterating over a <see cref="T:System.String" /> object and reading its individual characters.</span></span> <span data-ttu-id="20f29-102">Klasa ta nie może być dziedziczona.</span><span class="sxs-lookup"><span data-stu-id="20f29-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20f29-103">A <xref:System.CharEnumerator> umożliwia dostęp tylko do odczytu do znaków w odwoływany <xref:System.String> obiektu.</span><span class="sxs-lookup"><span data-stu-id="20f29-103">A <xref:System.CharEnumerator> provides read-only access to the characters in a referenced <xref:System.String> object.</span></span> <span data-ttu-id="20f29-104">Na przykład `foreach` instrukcji języka Visual Basic i C# języków programowania, który iteruje po kolekcji elementów, pobiera <xref:System.CharEnumerator> z <xref:System.String> obiekt, aby można było wykonać iterację znaków w tym obiekt.</span><span class="sxs-lookup"><span data-stu-id="20f29-104">For example, the `foreach` statement of the Microsoft Visual Basic and C# programming languages, which iterates through the elements of a collection, retrieves a <xref:System.CharEnumerator> from a <xref:System.String> object in order to iterate through the characters in that object.</span></span>  
  
 <span data-ttu-id="20f29-105">Nie istnieje żadne konstruktora publicznego dla <xref:System.CharEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="20f29-105">There is no public constructor for <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="20f29-106">Zamiast tego wywołać <xref:System.String> obiektu <xref:System.String.GetEnumerator%2A> metodę, aby uzyskać <xref:System.CharEnumerator> który został zainicjowany do odwołania ciągu.</span><span class="sxs-lookup"><span data-stu-id="20f29-106">Instead, call a <xref:System.String> object's <xref:System.String.GetEnumerator%2A> method to obtain a <xref:System.CharEnumerator> that is initialized to reference the string.</span></span>  
  
 <span data-ttu-id="20f29-107">A <xref:System.CharEnumerator> obsługuje wewnętrzny indeks znaków w ciągu <xref:System.CharEnumerator> odwołania.</span><span class="sxs-lookup"><span data-stu-id="20f29-107">A <xref:System.CharEnumerator> maintains an internal index to the characters in the string the <xref:System.CharEnumerator> references.</span></span> <span data-ttu-id="20f29-108">Stan indeksu jest nieprawidłowy, gdy odwołuje się do pozycji znaku logicznie przed pierwszym znakiem i po ostatnim znaku w ciągu i ważne, gdy odwołuje się do znaku w ciągu.</span><span class="sxs-lookup"><span data-stu-id="20f29-108">The state of the index is invalid when it references a character position logically before the first character or after the last character in the string, and valid when it references a character within the string.</span></span> <span data-ttu-id="20f29-109">Indeks jest ustawiana na pozycji logicznie przed pierwszym znakiem i ma ustawioną wartość pozycji za ostatni znak po zakończeniu iteracji.</span><span class="sxs-lookup"><span data-stu-id="20f29-109">The index is initialized to a position logically before the first character, and is set to a position after the last character when the iteration is complete.</span></span> <span data-ttu-id="20f29-110">Wyjątek jest próba uzyskania dostępu znak, gdy indeks jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="20f29-110">An exception is thrown if you attempt to access a character while the index is invalid.</span></span>  
  
 <span data-ttu-id="20f29-111"><xref:System.CharEnumerator.MoveNext%2A> Metody zwiększa indeks, dlatego pierwsze i kolejne znaki są dostępne z kolei.</span><span class="sxs-lookup"><span data-stu-id="20f29-111">The <xref:System.CharEnumerator.MoveNext%2A> method increments the index by one, so the first and subsequent characters are accessed in turn.</span></span> <span data-ttu-id="20f29-112"><xref:System.CharEnumerator.Reset%2A> Metody ustawia indeks na pozycji logicznie przed pierwszym znakiem.</span><span class="sxs-lookup"><span data-stu-id="20f29-112">The <xref:System.CharEnumerator.Reset%2A> method sets the index to a position logically before the first character.</span></span> <span data-ttu-id="20f29-113"><xref:System.CharEnumerator.Current%2A> Właściwość pobiera znak obecnie wywoływane przez indeks.</span><span class="sxs-lookup"><span data-stu-id="20f29-113">The <xref:System.CharEnumerator.Current%2A> property retrieves the character currently referenced by index.</span></span> <span data-ttu-id="20f29-114"><xref:System.CharEnumerator.Clone%2A> Metoda tworzy kopię <xref:System.CharEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="20f29-114">The <xref:System.CharEnumerator.Clone%2A> method creates a copy of the <xref:System.CharEnumerator>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="20f29-115">Kilka wystąpień niezależne <xref:System.CharEnumerator> między co najmniej jeden wątek może mieć dostęp do jednego wystąpienia <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="20f29-115">Several independent instances of <xref:System.CharEnumerator> across one or more threads can have access to a single instance of <xref:System.String>.</span></span> <span data-ttu-id="20f29-116">Ta klasa jest zaimplementowana do obsługi <xref:System.Collections.IEnumerator> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="20f29-116">This class is implemented to support the <xref:System.Collections.IEnumerator> interface.</span></span> <span data-ttu-id="20f29-117">Aby uzyskać więcej informacji na temat użycia modułu wyliczającego zobacz <xref:System.Collections.IEnumerator> tematu.</span><span class="sxs-lookup"><span data-stu-id="20f29-117">For more information regarding the use of an enumerator, see the <xref:System.Collections.IEnumerator> topic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20f29-118">W poniższym przykładzie użyto <xref:System.CharEnumerator> klasy wyliczyć znaki w ciągu.</span><span class="sxs-lookup"><span data-stu-id="20f29-118">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="20f29-119">Metoda tworzy <xref:System.CharEnumerator> obiektu przez wywołanie metody <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> metody, są przenoszone z jednego znaku do następnego wywołując <xref:System.CharEnumerator.MoveNext%2A> metody i wyświetla bieżący znak pobierając zaletą <xref:System.CharEnumerator.Current%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="20f29-119">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="20f29-120">Należy jednak pamiętać, że tę samą operację można wykonać nieco bardziej intuicyjne używając `foreach` (w języku C#) lub `For Each` (w języku Visual Basic), jak w poniższym przykładzie przedstawiono.</span><span class="sxs-lookup"><span data-stu-id="20f29-120">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.String" />
    <altmember cref="T:System.Collections.IEnumerator" />
    <altmember cref="T:System.Collections.IEnumerable" />
    <altmember cref="T:System.Collections.ICollection" />
  </Docs>
  <Members>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="20f29-121">Tworzy kopię bieżącego <see cref="T:System.CharEnumerator" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="20f29-121">Creates a copy of the current <see cref="T:System.CharEnumerator" /> object.</span></span></summary>
        <returns><span data-ttu-id="20f29-122"><see cref="T:System.Object" /> Czyli kopię bieżącego <see cref="T:System.CharEnumerator" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="20f29-122">An <see cref="T:System.Object" /> that is a copy of the current <see cref="T:System.CharEnumerator" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20f29-123">Wartość zwracana jest kopię tego wystąpienia <xref:System.CharEnumerator> i swojego bieżącego stanu.</span><span class="sxs-lookup"><span data-stu-id="20f29-123">The return value is a copy of this instance of <xref:System.CharEnumerator> and its current state.</span></span> <span data-ttu-id="20f29-124">Jest to przydatne w przypadku Zapisywanie stanu użytkownika podczas iteracji <xref:System.String> obiektu.</span><span class="sxs-lookup"><span data-stu-id="20f29-124">This is useful for saving your state while iterating through a <xref:System.String> object.</span></span>  
  
 <span data-ttu-id="20f29-125">Na przykład, załóżmy, że aplikacja używa oryginalnego wystąpienia programu <xref:System.CharEnumerator> do iterowania po każdym znaku w <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="20f29-125">For example, suppose your application uses an original instance of <xref:System.CharEnumerator> to iterate through each character in a <xref:System.String>.</span></span> <span data-ttu-id="20f29-126">W przypadku niektórych znaków unikatowy aplikacja wstrzymuje przetwarzania i wywołuje <xref:System.CharEnumerator.Clone%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="20f29-126">When some unique character is encountered, your application pauses processing and invokes the <xref:System.CharEnumerator.Clone%2A> method.</span></span> <span data-ttu-id="20f29-127">W efekcie zapisuje <xref:System.CharEnumerator> indeksu obiektu w <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="20f29-127">In effect, this saves the <xref:System.CharEnumerator> object's index in the <xref:System.String>.</span></span>  
  
 <span data-ttu-id="20f29-128">Aplikacja używa klonu, aby przejść do innej części `String` do wykonania niektórych dodatkowego przetwarzania.</span><span class="sxs-lookup"><span data-stu-id="20f29-128">Your application uses the clone to navigate to another part of the `String` to perform some auxiliary processing.</span></span> <span data-ttu-id="20f29-129">Efektem ubocznym tego nawigacji jest klonu utraci śledzenie pozycji, której przetwarzanie zostało zakończone.</span><span class="sxs-lookup"><span data-stu-id="20f29-129">The side-effect of this navigation is the clone loses track of the position where processing stopped.</span></span> <span data-ttu-id="20f29-130">Jednak po ukończeniu dodatkowego przetwarzania aplikacji odrzuca klonu i używa oryginalnej <xref:System.CharEnumerator> wystąpienia, aby wznowić pracę na <xref:System.String> gdzie oryginalnego przetwarzania zatrzymana.</span><span class="sxs-lookup"><span data-stu-id="20f29-130">However, when the auxiliary processing is complete, your application discards the clone and uses the original <xref:System.CharEnumerator> instance to resume working on the <xref:System.String> where the original processing stopped.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="20f29-131">Ta metoda jest zaimplementowana do obsługi <xref:System.ICloneable> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="20f29-131">This method is implemented to support the <xref:System.ICloneable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public char Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char Current { char get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IEnumerator`1.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="20f29-132">Pobiera obecnie przywoływanego znak w ciągu wyliczyć to <see cref="T:System.CharEnumerator" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="20f29-132">Gets the currently referenced character in the string enumerated by this <see cref="T:System.CharEnumerator" /> object.</span></span></summary>
        <value><span data-ttu-id="20f29-133">Znak Unicode, w obecnie odwołuje się ten <see cref="T:System.CharEnumerator" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="20f29-133">The Unicode character currently referenced by this <see cref="T:System.CharEnumerator" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20f29-134"><xref:System.CharEnumerator> Klasa obsługuje indeks wewnętrzny wyliczany ciąg i <xref:System.CharEnumerator.Current%2A> właściwość zwraca znak, który obecnie jest przywoływany przez indeks.</span><span class="sxs-lookup"><span data-stu-id="20f29-134">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.Current%2A> property returns the character that is currently referenced by the index.</span></span> <span data-ttu-id="20f29-135">Ta właściwość powinna być wywoływana tylko wtedy, gdy indeks jest nieprawidłowy; w przeciwnym wypadku jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="20f29-135">This property should be invoked only when the index is valid; otherwise, an exception is thrown.</span></span>  
  
 <span data-ttu-id="20f29-136">Indeks zawsze jest nieprawidłowy dla pustego ciągu ("").</span><span class="sxs-lookup"><span data-stu-id="20f29-136">The index is always invalid for an empty string ("").</span></span> <span data-ttu-id="20f29-137">Indeks jest nieprawidłowy po również <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> lub <xref:System.CharEnumerator.Reset%2A> metoda jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="20f29-137">The index is also invalid after the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> or <xref:System.CharEnumerator.Reset%2A> method is called.</span></span> <span data-ttu-id="20f29-138">Po każdej z tych metod, wywołaj <xref:System.CharEnumerator.MoveNext%2A> metodę, aby dopasować indeks pierwszego znaku w ciągu wyliczone.</span><span class="sxs-lookup"><span data-stu-id="20f29-138">After either of these methods is called, invoke the <xref:System.CharEnumerator.MoveNext%2A> method to adjust the index to the first character in the enumerated string.</span></span> <span data-ttu-id="20f29-139">Indeks jest nieprawidłowy gdy <xref:System.CharEnumerator.MoveNext%2A> metoda zwraca `true`.</span><span class="sxs-lookup"><span data-stu-id="20f29-139">The index is valid whenever the <xref:System.CharEnumerator.MoveNext%2A> method returns `true`.</span></span>  
  
 <span data-ttu-id="20f29-140"><xref:System.CharEnumerator.Current%2A> nie powoduje przeniesienia indeks i kolejne wywołania <xref:System.CharEnumerator.Current%2A> zwracać ten sam znak do <xref:System.CharEnumerator.MoveNext%2A>, <xref:System.CharEnumerator.Reset%2A>, lub <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="20f29-140"><xref:System.CharEnumerator.Current%2A> does not move the index, and consecutive calls to <xref:System.CharEnumerator.Current%2A> return the same character until <xref:System.CharEnumerator.MoveNext%2A>, <xref:System.CharEnumerator.Reset%2A>, or <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> is called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20f29-141">W poniższym przykładzie użyto <xref:System.CharEnumerator> klasy wyliczyć znaki w ciągu.</span><span class="sxs-lookup"><span data-stu-id="20f29-141">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="20f29-142">Metoda tworzy <xref:System.CharEnumerator> obiektu przez wywołanie metody <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> metody, są przenoszone z jednego znaku do następnego wywołując <xref:System.CharEnumerator.MoveNext%2A> metody i wyświetla bieżący znak pobierając zaletą <xref:System.CharEnumerator.Current%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="20f29-142">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="20f29-143">Należy jednak pamiętać, że tę samą operację można wykonać nieco bardziej intuicyjne używając `foreach` (w języku C#) lub `For Each` (w języku Visual Basic), jak w poniższym przykładzie przedstawiono.</span><span class="sxs-lookup"><span data-stu-id="20f29-143">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="20f29-144">Indeks jest nieprawidłowy. oznacza to, że jest przed pierwszym lub za ostatnim znakiem wyliczany ciąg.</span><span class="sxs-lookup"><span data-stu-id="20f29-144">The index is invalid; that is, it is before the first or after the last character of the enumerated string.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="20f29-145">Zwalnia wszelkie zasoby używane przez bieżące wystąpienie klasy <see cref="T:System.CharEnumerator" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="20f29-145">Releases all resources used by the current instance of the <see cref="T:System.CharEnumerator" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20f29-146">Wywołanie <xref:System.CharEnumerator.Dispose%2A> po zakończeniu przy użyciu <xref:System.CharEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="20f29-146">Call <xref:System.CharEnumerator.Dispose%2A> when you are finished using the <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="20f29-147"><xref:System.CharEnumerator.Dispose%2A> Pozostawia metody <xref:System.CharEnumerator> w stanie uniemożliwiającym jego używanie.</span><span class="sxs-lookup"><span data-stu-id="20f29-147">The <xref:System.CharEnumerator.Dispose%2A> method leaves the <xref:System.CharEnumerator> in an unusable state.</span></span> <span data-ttu-id="20f29-148">Po wywołaniu <xref:System.CharEnumerator.Dispose%2A>, konieczne jest zwolnienie wszystkich odwołań do <xref:System.CharEnumerator> , moduł zbierający elementy bezużyteczne mógł odzyskać pamięć który <xref:System.CharEnumerator> klasy.</span><span class="sxs-lookup"><span data-stu-id="20f29-148">After calling <xref:System.CharEnumerator.Dispose%2A>, you must release all references to the <xref:System.CharEnumerator> so the garbage collector can reclaim the memory that the <xref:System.CharEnumerator> was occupying.</span></span>  
  
 <span data-ttu-id="20f29-149">Aby uzyskać więcej informacji, zobacz [czyszczenie zasobów niezarządzanych](~/docs/standard/garbage-collection/unmanaged.md) i [implementacja metody Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="20f29-149">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="20f29-150">Wywoływanie zawsze <xref:System.CharEnumerator.Dispose%2A> przed zwolnieniem ostatniego odwołania do <xref:System.CharEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="20f29-150">Always call <xref:System.CharEnumerator.Dispose%2A> before you release your last reference to the <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="20f29-151">W przeciwnym razie używa zasobów nie zostanie zwolniona do wywołania modułu zbierającego elementy bezużyteczne <xref:System.CharEnumerator> obiektu `Finalize` metody.</span><span class="sxs-lookup"><span data-stu-id="20f29-151">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.CharEnumerator> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="20f29-152">Indeks wewnętrzny bieżącego zwiększa <see cref="T:System.CharEnumerator" /> obiektu na następny znak wyliczany ciąg.</span><span class="sxs-lookup"><span data-stu-id="20f29-152">Increments the internal index of the current <see cref="T:System.CharEnumerator" /> object to the next character of the enumerated string.</span></span></summary>
        <returns>
          <span data-ttu-id="20f29-153"><see langword="true" /> Jeśli indeks pomyślnie jest zwiększany i ciągu wyliczany; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="20f29-153"><see langword="true" /> if the index is successfully incremented and within the enumerated string; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20f29-154"><xref:System.CharEnumerator> Klasa obsługuje indeks wewnętrzny wyliczany ciąg i <xref:System.CharEnumerator.MoveNext%2A> metody zwiększa indeks o jeden.</span><span class="sxs-lookup"><span data-stu-id="20f29-154">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.MoveNext%2A> method increments the index by one.</span></span> <span data-ttu-id="20f29-155">Wywołanie <xref:System.CharEnumerator.MoveNext%2A> po wywołaniu <xref:System.String.GetEnumerator%2A> lub <xref:System.CharEnumerator.Reset%2A> Aby zwiększyć bieżącej pozycji znaku do pierwszego znaku w wyliczany ciąg.</span><span class="sxs-lookup"><span data-stu-id="20f29-155">Call <xref:System.CharEnumerator.MoveNext%2A> after calling <xref:System.String.GetEnumerator%2A> or <xref:System.CharEnumerator.Reset%2A> to increment the current character position to the first character in the enumerated string.</span></span> <span data-ttu-id="20f29-156">Sprawdź, czy jest zwracana wartość `true` ustalenie, czy bieżące położenie znaku jest prawidłowa.</span><span class="sxs-lookup"><span data-stu-id="20f29-156">Check that the return value is `true` to determine that the current character position is valid.</span></span>  
  
 <span data-ttu-id="20f29-157">Jeśli indeks jest poza ostatni znak wyliczany ciąg, indeks nie ulega zmianie i `false` jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="20f29-157">If the index is already beyond the last character of the enumerated string, the index is not changed and `false` is returned.</span></span>  
  
 <span data-ttu-id="20f29-158">Zwróć uwagę, że jeśli wyliczany ciąg jest pusty (""), stan <xref:System.CharEnumerator> zawsze jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="20f29-158">Notice that if the enumerated string is empty (""), the state of the <xref:System.CharEnumerator> is always invalid.</span></span> <span data-ttu-id="20f29-159">Jest to spowodowane indeks wewnętrzny <xref:System.CharEnumerator> jest początkowo, przed pierwszym znakiem wyliczany ciąg i dlatego jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="20f29-159">This is because the internal index for the <xref:System.CharEnumerator> is initially before the first character of the enumerated string and is therefore invalid.</span></span> <span data-ttu-id="20f29-160"><xref:System.CharEnumerator.MoveNext%2A> logicznie ustawia indeks za ostatni znak (nieistniejącą) wyliczany ciągu, który również jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="20f29-160"><xref:System.CharEnumerator.MoveNext%2A> logically sets the index after the last (nonexistent) character of the enumerated string which is also invalid.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20f29-161">W poniższym przykładzie użyto <xref:System.CharEnumerator> klasy wyliczyć znaki w ciągu.</span><span class="sxs-lookup"><span data-stu-id="20f29-161">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="20f29-162">Metoda tworzy <xref:System.CharEnumerator> obiektu przez wywołanie metody <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> metody, są przenoszone z jednego znaku do następnego wywołując <xref:System.CharEnumerator.MoveNext%2A> metody i wyświetla bieżący znak pobierając zaletą <xref:System.CharEnumerator.Current%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="20f29-162">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="20f29-163">Należy jednak pamiętać, że tę samą operację można wykonać nieco bardziej intuicyjne używając `foreach` (w języku C#) lub `For Each` (w języku Visual Basic), jak w poniższym przykładzie przedstawiono.</span><span class="sxs-lookup"><span data-stu-id="20f29-163">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="20f29-164">Inicjuje indeks pozycji logicznie przed pierwszym znakiem wyliczany ciąg.</span><span class="sxs-lookup"><span data-stu-id="20f29-164">Initializes the index to a position logically before the first character of the enumerated string.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20f29-165"><xref:System.CharEnumerator> Klasa obsługuje indeks wewnętrzny wyliczany ciąg i <xref:System.CharEnumerator.Reset%2A> metoda ustawia indeks nieprawidłowy stan.</span><span class="sxs-lookup"><span data-stu-id="20f29-165">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.Reset%2A> method sets the index to the invalid state.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IEnumerator.Current { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="20f29-166">Pobiera obecnie przywoływanego znak w ciągu wyliczyć to <see cref="T:System.CharEnumerator" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="20f29-166">Gets the currently referenced character in the string enumerated by this <see cref="T:System.CharEnumerator" /> object.</span></span> <span data-ttu-id="20f29-167">Opis tego elementu członkowskiego, zobacz <see cref="P:System.Collections.IEnumerator.Current" />.</span><span class="sxs-lookup"><span data-stu-id="20f29-167">For a description of this member, see <see cref="P:System.Collections.IEnumerator.Current" />.</span></span></summary>
        <value><span data-ttu-id="20f29-168">Opakowany obecnie odwołuje się ten znak Unicode <see cref="T:System.CharEnumerator" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="20f29-168">The boxed Unicode character currently referenced by this <see cref="T:System.CharEnumerator" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20f29-169">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="20f29-169">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="20f29-170">Można go używać tylko wtedy, gdy <xref:System.CharEnumerator> wystąpienia jest rzutowane na <xref:System.Collections.IEnumerator> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="20f29-170">It can be used only when the <xref:System.CharEnumerator> instance is cast to an <xref:System.Collections.IEnumerator> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="20f29-171">Wyliczanie nie zostało uruchomione.</span><span class="sxs-lookup"><span data-stu-id="20f29-171">Enumeration has not started.</span></span>  
  
 <span data-ttu-id="20f29-172">—lub—</span><span class="sxs-lookup"><span data-stu-id="20f29-172">-or-</span></span>  
  
 <span data-ttu-id="20f29-173">Wyliczanie zostało zakończone.</span><span class="sxs-lookup"><span data-stu-id="20f29-173">Enumeration has ended.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>