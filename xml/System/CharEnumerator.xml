<Type Name="CharEnumerator" FullName="System.CharEnumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="674ca0ff6ab128d0807cf2b9d4f07caded3523e1" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69406909" /></Metadata><TypeSignature Language="C#" Value="public sealed class CharEnumerator : ICloneable, System.Collections.Generic.IEnumerator&lt;char&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit CharEnumerator extends System.Object implements class System.Collections.Generic.IEnumerator`1&lt;char&gt;, class System.Collections.IEnumerator, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.CharEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CharEnumerator&#xA;Implements ICloneable, IEnumerator(Of Char)" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharEnumerator sealed : ICloneable, System::Collections::Generic::IEnumerator&lt;char&gt;" />
  <TypeSignature Language="F#" Value="type CharEnumerator = class&#xA;    interface IEnumerator&#xA;    interface ICloneable&#xA;    interface IEnumerator&lt;char&gt;&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerator&lt;System.Char&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Obsługuje iterację <see cref="T:System.String" /> obiektu i odczytywanie jego poszczególnych znaków. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.CharEnumerator> zapewnia dostęp tylko do odczytu do znaków w obiekcie, do <xref:System.String> którego się odwołuje. Na `foreach` przykład, instrukcja Microsoft Visual Basic i C# Języki programowania, które iteruje przez elementy <xref:System.CharEnumerator> kolekcji, <xref:System.String> pobiera z obiektu, aby wykonać iterację znaków w tym obiekcie.  

> [!IMPORTANT]
> Klasa wylicza pojedyncze wystąpienia 16-bitowe <xref:System.Char>. `CharEnumerator` Nie należy traktować graphemes (czyli znaku, po którym następuje co najmniej jeden znak combiding) lub pary zastępczych (czyli znaków poza podstawową warstwą wielojęzyczną Unicode) jako pojedyncze znaki. Dla modułu wyliczającego, który obsługuje te typy znaków jako pojedynczą jednostkę, <xref:System.Globalization.StringInfo> należy użyć klasy.

 Brak konstruktora publicznego dla elementu <xref:System.CharEnumerator>. Zamiast tego należy wywołać <xref:System.String> <xref:System.String.GetEnumerator%2A> metodę obiektu, aby uzyskać element <xref:System.CharEnumerator> , który jest zainicjowany do odwoływania się do ciągu.  
  
 A <xref:System.CharEnumerator> utrzymuje wewnętrzny indeks do znaków w ciągu, do których się <xref:System.CharEnumerator> odwołuje. Stan indeksu jest nieprawidłowy, gdy odwołuje się do pozycji znaku logicznie przed pierwszym znakiem lub po ostatnim znaku w ciągu, i jest prawidłowy, gdy odwołuje się do znaku w ciągu. Indeks jest inicjowany do pozycji logicznie przed pierwszym znakiem i jest ustawiany na pozycji po ostatnim znaku, gdy iteracja zostanie zakończona. Wyjątek jest generowany, jeśli próbujesz uzyskać dostęp do znaku, gdy indeks jest nieprawidłowy.  
  
 <xref:System.CharEnumerator.MoveNext%2A> Metoda zwiększa indeks o jeden, tak więc pierwsze i kolejne znaki są dostępne z kolei. <xref:System.CharEnumerator.Reset%2A> Metoda ustawia indeks na pozycję logicznie przed pierwszym znakiem. <xref:System.CharEnumerator.Current%2A> Właściwość pobiera znak aktualnie przywoływany przez indeks. Metoda tworzy kopię <xref:System.CharEnumerator>. <xref:System.CharEnumerator.Clone%2A>  
  
> [!NOTE]
>  Kilka niezależnych <xref:System.CharEnumerator> wystąpień w jednym lub wielu wątkach może mieć dostęp do jednego <xref:System.String>wystąpienia. Ta klasa jest zaimplementowana do <xref:System.Collections.IEnumerator> obsługi interfejsu. Aby uzyskać więcej informacji dotyczących korzystania z modułu wyliczającego, <xref:System.Collections.IEnumerator> Zobacz temat.  
  
   
  
## Examples  
 Poniższy przykład używa <xref:System.CharEnumerator> klasy do wyliczania pojedynczych znaków w ciągu. Tworzy wystąpienie <xref:System.CharEnumerator> obiektu przez <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> wywołanie metody, przenosi z jednego znaku do następnego przez wywołanie <xref:System.CharEnumerator.MoveNext%2A> metody i wyświetla <xref:System.CharEnumerator.Current%2A> bieżący znak przez pobranie wartości właściwości.  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 Należy jednak pamiętać, że ta sama operacja może być wykonywana nieco bardziej intuicyjnie przy użyciu `foreach` (w C#) lub `For Each` (w Visual Basic), jak pokazano w poniższym przykładzie.  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.String" />
    <altmember cref="T:System.Collections.IEnumerator" />
    <altmember cref="T:System.Collections.IEnumerable" />
    <altmember cref="T:System.Collections.ICollection" />
  </Docs>
  <Members>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="charEnumerator.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy kopię bieżącego <see cref="T:System.CharEnumerator" /> obiektu.</summary>
        <returns>Jest to kopia bieżącego <see cref="T:System.CharEnumerator" /> obiektu. <see cref="T:System.Object" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana jest kopią tego wystąpienia <xref:System.CharEnumerator> i jego bieżącym stanem. Jest to przydatne w przypadku zapisywania stanu podczas iteracji przez <xref:System.String> obiekt.  
  
 Załóżmy na przykład, że aplikacja używa oryginalnego wystąpienia programu <xref:System.CharEnumerator> do iteracji przez każdy znak <xref:System.String>w. Gdy napotkany jest jakiś unikatowy znak, aplikacja wstrzymuje przetwarzanie i wywołuje <xref:System.CharEnumerator.Clone%2A> metodę. W efekcie indeks <xref:System.CharEnumerator> obiektu jest zapisywany <xref:System.String>w obiekcie.  
  
 Aplikacja używa klonu do przechodzenia do innej części programu `String` w celu przeprowadzenia dodatkowego przetwarzania. Efektem ubocznym tej nawigacji jest klon, który traci śledzenie pozycji, w której przetwarzanie zostało zatrzymane. Jednak po zakończeniu przetwarzania pomocniczego aplikacja odrzuca klon i używa oryginalnego <xref:System.CharEnumerator> wystąpienia do wznowienia pracy <xref:System.String> w miejscu, w którym zostało zatrzymane.  
  
> [!NOTE]
>  Ta metoda jest implementowana do obsługi <xref:System.ICloneable> interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public char Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char Current { char get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : char" Usage="System.CharEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IEnumerator`1.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera aktualnie przywoływany znak w ciągu wyliczanym przez ten <see cref="T:System.CharEnumerator" /> obiekt.</summary>
        <value>Znak Unicode, do którego odwołuje <see cref="T:System.CharEnumerator" /> się ten obiekt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasa przechowuje wewnętrzny indeks do wyliczeniowego ciągu, <xref:System.CharEnumerator.Current%2A> a właściwość zwraca znak, który jest aktualnie przywoływany przez indeks. <xref:System.CharEnumerator> Ta właściwość powinna być wywoływana tylko wtedy, gdy indeks jest prawidłowy; w przeciwnym razie jest zgłaszany wyjątek.  
  
 Indeks jest zawsze nieprawidłowy dla pustego ciągu (""). Indeks jest również nieprawidłowy po <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> wywołaniu metody lub. <xref:System.CharEnumerator.Reset%2A> Po wywołaniu jednej z tych metod Wywołaj <xref:System.CharEnumerator.MoveNext%2A> metodę, aby dostosować indeks do pierwszego znaku w ciągu wyliczeniowy. Indeks jest prawidłowy za każdym razem <xref:System.CharEnumerator.MoveNext%2A> , gdy `true`Metoda zwraca.  
  
 <xref:System.CharEnumerator.Current%2A>nie przenosi indeksu i <xref:System.CharEnumerator.Current%2A> kolejne wywołania do zwrócenia tego samego znaku do <xref:System.CharEnumerator.MoveNext%2A>, <xref:System.CharEnumerator.Reset%2A>, lub <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> jest wywoływana.  
  
   
  
## Examples  
 Poniższy przykład używa <xref:System.CharEnumerator> klasy do wyliczania pojedynczych znaków w ciągu. Tworzy wystąpienie <xref:System.CharEnumerator> obiektu przez <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> wywołanie metody, przenosi z jednego znaku do następnego przez wywołanie <xref:System.CharEnumerator.MoveNext%2A> metody i wyświetla <xref:System.CharEnumerator.Current%2A> bieżący znak przez pobranie wartości właściwości.  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 Należy jednak pamiętać, że ta sama operacja może być wykonywana nieco bardziej intuicyjnie przy użyciu `foreach` (w C#) lub `For Each` (w Visual Basic), jak pokazano w poniższym przykładzie.  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Indeks jest nieprawidłowy; oznacza to, że jest wcześniejsza niż pierwszy lub po ostatnim znaku wyliczeniowego ciągu.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="charEnumerator.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszystkie zasoby używane przez bieżące wystąpienie <see cref="T:System.CharEnumerator" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołaj <xref:System.CharEnumerator.Dispose%2A> po zakończeniu korzystania z <xref:System.CharEnumerator>. <xref:System.CharEnumerator.Dispose%2A> Metoda<xref:System.CharEnumerator> pozostawia w stanie niezdatnym do użytku. Po wywołaniu <xref:System.CharEnumerator.Dispose%2A>należy wydać wszystkie odwołania <xref:System.CharEnumerator> do, aby moduł wyrzucania elementów bezużytecznych mógł odwoływać pamięć <xref:System.CharEnumerator> , którą zajmował.  
  
 Aby uzyskać więcej informacji, zobacz [Oczyszczanie zasobów niezarządzanych](~/docs/standard/garbage-collection/unmanaged.md) i implementowanie [metody Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Zawsze wywołuj <xref:System.CharEnumerator.Dispose%2A> przed wydaniem ostatniego odwołania <xref:System.CharEnumerator>do. W przeciwnym razie używane zasoby nie zostaną zwolnione do momentu wywołania <xref:System.CharEnumerator> `Finalize` metody obiektu przez moduł zbierający elementy bezużyteczne.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="charEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwiększa wewnętrzny indeks bieżącego <see cref="T:System.CharEnumerator" /> obiektu do następnego znaku wyliczeniowego ciągu.</summary>
        <returns><see langword="true" />Jeśli indeks został pomyślnie zwiększony i w ciągu wyliczenia; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasa przechowuje wewnętrzny indeks do wyliczeniowego ciągu, <xref:System.CharEnumerator.MoveNext%2A> a Metoda zwiększa indeks o jeden. <xref:System.CharEnumerator> Wywoływanie <xref:System.CharEnumerator.MoveNext%2A> po <xref:System.String.GetEnumerator%2A> wywołaniu <xref:System.CharEnumerator.Reset%2A> lub zwiększeniu bieżącego położenia znaku do pierwszego znaku w ciągu wyliczeniowy. Sprawdź, czy wartość zwracana polega `true` na określeniu, że bieżąca pozycja znaku jest prawidłowa.  
  
 Jeśli indeks jest już poza ostatnim znakiem wyliczeniowego ciągu, indeks nie zostanie zmieniony i `false` zostanie zwrócony.  
  
 Zauważ, że jeśli ciąg wyliczeniowy jest pusty (""), stan elementu <xref:System.CharEnumerator> jest zawsze nieprawidłowy. Wynika to z faktu, że wewnętrzny <xref:System.CharEnumerator> indeks jest początkowo przed pierwszym znakiem wyliczeniowego ciągu i dlatego jest nieprawidłowy. <xref:System.CharEnumerator.MoveNext%2A>logicznie ustawia indeks po ostatnim (nieistniejącym) znaku wyliczeniowego ciągu, który jest również nieprawidłowy.  
  
   
  
## Examples  
 Poniższy przykład używa <xref:System.CharEnumerator> klasy do wyliczania pojedynczych znaków w ciągu. Tworzy wystąpienie <xref:System.CharEnumerator> obiektu przez <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> wywołanie metody, przenosi z jednego znaku do następnego przez wywołanie <xref:System.CharEnumerator.MoveNext%2A> metody i wyświetla <xref:System.CharEnumerator.Current%2A> bieżący znak przez pobranie wartości właściwości.  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 Należy jednak pamiętać, że ta sama operacja może być wykonywana nieco bardziej intuicyjnie przy użyciu `foreach` (w C#) lub `For Each` (w Visual Basic), jak pokazano w poniższym przykładzie.  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="charEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Inicjuje indeks do pozycji logicznej przed pierwszym znakiem wyliczeniowego ciągu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasa przechowuje wewnętrzny indeks do wyliczeniowego ciągu, <xref:System.CharEnumerator.Reset%2A> a metoda ustawia nieprawidłowy stan indeksu. <xref:System.CharEnumerator>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IEnumerator::Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera aktualnie przywoływany znak w ciągu wyliczanym przez ten <see cref="T:System.CharEnumerator" /> obiekt. Aby uzyskać opis tego elementu członkowskiego, <see cref="P:System.Collections.IEnumerator.Current" />Zobacz.</summary>
        <value>Opakowany znak Unicode, obecnie do którego <see cref="T:System.CharEnumerator" /> odwołuje się ten obiekt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Może być używana tylko wtedy, <xref:System.CharEnumerator> gdy wystąpienie jest rzutowane <xref:System.Collections.IEnumerator> do interfejsu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wyliczanie nie zostało uruchomione.  
  
 —lub—  
  
 Wyliczenie zostało zakończone.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszystkie zasoby używane przez <see cref="T:System.CharEnumerator" /> klasę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Wywołaj metodę IDisposable. Dispose po zakończeniu korzystania z <xref:System.CharEnumerator> klasy. Metoda opuszcza <xref:System.CharEnumerator> klasę w stanie niezdatnym do użytku. Po wywołaniu go należy wydać wszystkie odwołania do <xref:System.CharEnumerator> klasy, aby moduł wyrzucania elementów bezużytecznych mógł odzyskiwać pamięć <xref:System.CharEnumerator> , która zajmowała Klasa.

Aby uzyskać więcej informacji, zobacz [Oczyszczanie zasobów niezarządzanych](~/docs/standard/garbage-collection/unmanaged.md) i implementowanie [metody Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).

> [!NOTE]
> Zawsze Wywołaj metodę IDisposable. Dispose przed wydaniem ostatniego odwołania do <xref:System.CharEnumerator> klasy. W przeciwnym razie używane zasoby nie zostaną zwolnione do momentu wywołania <xref:System.CharEnumerator> <xref:System.Object.Finalize> metody obiektu przez moduł zbierający elementy bezużyteczne.

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
