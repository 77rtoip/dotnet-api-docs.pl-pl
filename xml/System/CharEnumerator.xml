<Type Name="CharEnumerator" FullName="System.CharEnumerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a0340579d687eb3f073235cd7693bf9b430e5f80" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37481133" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class CharEnumerator : ICloneable, System.Collections.Generic.IEnumerator&lt;char&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit CharEnumerator extends System.Object implements class System.Collections.Generic.IEnumerator`1&lt;char&gt;, class System.Collections.IEnumerator, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.CharEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CharEnumerator&#xA;Implements ICloneable, IEnumerator(Of Char)" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharEnumerator sealed : ICloneable, System::Collections::Generic::IEnumerator&lt;char&gt;" />
  <TypeSignature Language="F#" Value="type CharEnumerator = class&#xA;    interface IEnumerator&#xA;    interface ICloneable&#xA;    interface IEnumerator&lt;char&gt;&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerator&lt;System.Char&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Obsługuje Iterowanie <see cref="T:System.String" /> obiektu i odczytywanie ich pojedynczych znaków. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.CharEnumerator> oferuje dostęp tylko do odczytu do znaków w odwoływany <xref:System.String> obiektu. Na przykład `foreach` instrukcji języków programowania języka Visual Basic i C#, która wykonuje iterację przez elementy kolekcji, pobiera <xref:System.CharEnumerator> z <xref:System.String> obiektu, aby można było wykonać iterację znaków w tym obiekt.  
  
 Brak publicznego konstruktora dla <xref:System.CharEnumerator>. Zamiast tego należy wywołać <xref:System.String> obiektu <xref:System.String.GetEnumerator%2A> metodę, aby uzyskać <xref:System.CharEnumerator> który jest inicjowany do odwoływać się do ciągu.  
  
 A <xref:System.CharEnumerator> obsługuje wewnętrzny indeks znaków w ciągu <xref:System.CharEnumerator> odwołania. Stan indeksu jest nieprawidłowy, gdy odwołuje się do pozycji znaku logicznie przed pierwszym znakiem i po ostatni znak w ciągu i jest prawidłowa, gdy odwołuje się do znaku w ciągu. Indeks jest inicjowany do położenia logicznie przed pierwszym znakiem i jest ustawiona na pozycji za ostatnim znakiem, po zakończeniu iteracji. Wyjątek jest generowany, jeśli użytkownik podejmie próbę uzyskania dostępu znak, podczas gdy indeks jest nieprawidłowy.  
  
 <xref:System.CharEnumerator.MoveNext%2A> Metody zwiększa indeksu za pomocą jednej, dlatego pierwsze i kolejne znaki są dostępne z kolei. <xref:System.CharEnumerator.Reset%2A> Metody ustawia indeks na pozycji logicznie przed pierwszym znakiem. <xref:System.CharEnumerator.Current%2A> Właściwość pobiera znak obecnie wywoływane przez indeks. <xref:System.CharEnumerator.Clone%2A> Metoda tworzy kopię <xref:System.CharEnumerator>.  
  
> [!NOTE]
>  Kilka wystąpień niezależnych <xref:System.CharEnumerator> przez jeden lub więcej wątków może uzyskiwać dostęp do pojedynczego wystąpienia <xref:System.String>. Ta klasa jest implementowane w celu obsługi <xref:System.Collections.IEnumerator> interfejsu. Aby uzyskać więcej informacji na temat użycia modułu wyliczającego zobacz <xref:System.Collections.IEnumerator> tematu.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.CharEnumerator> klasy wyliczyć pojedynczych znaków w ciągu. Metoda tworzy <xref:System.CharEnumerator> obiektu przez wywołanie metody <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> metody zostanie przeniesiony z jednego znaku do następnego przez wywołanie metody <xref:System.CharEnumerator.MoveNext%2A> metodę i wyświetla bieżący znak poprzez pobranie wartości <xref:System.CharEnumerator.Current%2A> właściwości.  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 Należy jednak pamiętać, że ten sam operację można wykonać nieco bardziej intuicyjne przy użyciu `foreach` (w języku C#) lub `For Each` (w języku Visual Basic), w poniższym przykładzie pokazano.  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.String" />
    <altmember cref="T:System.Collections.IEnumerator" />
    <altmember cref="T:System.Collections.IEnumerable" />
    <altmember cref="T:System.Collections.ICollection" />
  </Docs>
  <Members>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="charEnumerator.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy kopię bieżącego <see cref="T:System.CharEnumerator" /> obiektu.</summary>
        <returns>
          <see cref="T:System.Object" /> Czyli kopię bieżącego <see cref="T:System.CharEnumerator" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana jest kopią tego wystąpienia <xref:System.CharEnumerator> i bieżącego stanu. Jest to przydatne przy zapisywaniu stanu użytkownika podczas iteracji <xref:System.String> obiektu.  
  
 Na przykład, załóżmy, że aplikacja używa oryginalnego wystąpienia programu <xref:System.CharEnumerator> do iteracji przez każdego znaku w <xref:System.String>. W przypadku niektórych znaków unikatowych aplikacji wstrzymuje przetwarzanie, a następnie wywołuje <xref:System.CharEnumerator.Clone%2A> metody. W efekcie zapisuje <xref:System.CharEnumerator> indeksu obiektu w <xref:System.String>.  
  
 Twoja aplikacja używa klon, aby przejść do innej części `String` wykonanie niektórych pomocnicze w ramach przetwarzania. Efekt uboczny tej nawigacji jest klonu traci śledzenie pozycji, których przetwarzanie zostało zakończone. Jednak po zakończeniu przetwarzania pomocnicze w ramach aplikacji odrzuca klonowania i korzysta z oryginalnym <xref:System.CharEnumerator> wystąpienia, aby wznowić pracę nad <xref:System.String> gdzie oryginalnego przetwarzanie zostało zakończone.  
  
> [!NOTE]
>  Ta metoda jest implementowana w celu obsługi <xref:System.ICloneable> interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public char Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char Current { char get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : char" Usage="System.CharEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IEnumerator`1.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera aktualnie odwołania znak w ciągu wyliczany to <see cref="T:System.CharEnumerator" /> obiektu.</summary>
        <value>Znak Unicode, obecnie odwołuje się ten <see cref="T:System.CharEnumerator" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.CharEnumerator> Klasy obsługuje wewnętrzny indeks wyliczany ciąg, a <xref:System.CharEnumerator.Current%2A> właściwość zwraca znak, który odwołuje się obecnie indeksu. Ta właściwość powinna ona zostać wywołana tylko wtedy, gdy indeks jest nieprawidłowy; w przeciwnym razie jest zgłaszany wyjątek.  
  
 Indeks zawsze jest nieprawidłowy dla pustego ciągu (""). Indeks jest również nieprawidłowe po <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> lub <xref:System.CharEnumerator.Reset%2A> metoda jest wywoływana. Po każdej z tych metod jest wywoływana, wywołanie <xref:System.CharEnumerator.MoveNext%2A> metodę, aby dopasować indeks pierwszego znaku w ciągu wyliczany. Indeks jest prawidłowy zawsze wtedy, gdy <xref:System.CharEnumerator.MoveNext%2A> metoda zwraca `true`.  
  
 <xref:System.CharEnumerator.Current%2A> nie powoduje przeniesienia, indeksu i kolejnych wywołań <xref:System.CharEnumerator.Current%2A> zwracać ten sam znak, aż do <xref:System.CharEnumerator.MoveNext%2A>, <xref:System.CharEnumerator.Reset%2A>, lub <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> jest wywoływana.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.CharEnumerator> klasy wyliczyć pojedynczych znaków w ciągu. Metoda tworzy <xref:System.CharEnumerator> obiektu przez wywołanie metody <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> metody zostanie przeniesiony z jednego znaku do następnego przez wywołanie metody <xref:System.CharEnumerator.MoveNext%2A> metodę i wyświetla bieżący znak poprzez pobranie wartości <xref:System.CharEnumerator.Current%2A> właściwości.  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 Należy jednak pamiętać, że ten sam operację można wykonać nieco bardziej intuicyjne przy użyciu `foreach` (w języku C#) lub `For Each` (w języku Visual Basic), w poniższym przykładzie pokazano.  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Indeks jest nieprawidłowy; oznacza to, że jest przed pierwszym lub za ostatnim znakiem ciągu wyliczany.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="charEnumerator.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszelkie zasoby używane przez bieżące wystąpienie <see cref="T:System.CharEnumerator" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołaj <xref:System.CharEnumerator.Dispose%2A> po zakończeniu przy użyciu <xref:System.CharEnumerator>. <xref:System.CharEnumerator.Dispose%2A> Pozostawia metoda <xref:System.CharEnumerator> w stanie uniemożliwiającym jego używanie. Po wywołaniu <xref:System.CharEnumerator.Dispose%2A>, trzeba zwolnić wszystkie odwołania do <xref:System.CharEnumerator> , moduł zbierający elementy bezużyteczne mógł odzyskać pamięć, <xref:System.CharEnumerator> zajmowaną przez wystąpienie.  
  
 Aby uzyskać więcej informacji, zobacz [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) i [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Zawsze wywołuj <xref:System.CharEnumerator.Dispose%2A> przed publikacją swoje ostatnie odwołanie do <xref:System.CharEnumerator>. W przeciwnym razie zasobów jest przy użyciu nie zostanie zwolniona, dopóki moduł odśmiecania pamięci wywołuje <xref:System.CharEnumerator> obiektu `Finalize` metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="charEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwiększa indeks wewnętrzny bieżącego <see cref="T:System.CharEnumerator" /> obiektu na następny znak w ciągu wyliczany.</summary>
        <returns>
          <see langword="true" /> Jeśli indeks pomyślnie jest zwiększany, a jeśli tak, to w ciągu wyliczany; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.CharEnumerator> Klasy obsługuje wewnętrzny indeks wyliczany ciąg i <xref:System.CharEnumerator.MoveNext%2A> metody zwiększa indeks o jeden. Wywołaj <xref:System.CharEnumerator.MoveNext%2A> po wywołaniu <xref:System.String.GetEnumerator%2A> lub <xref:System.CharEnumerator.Reset%2A> się zwiększać bieżąca pozycja znaku do pierwszego znaku w ciągu wyliczany. Upewnij się, że wartość zwracana jest `true` do określenia, czy bieżąca pozycja znaku jest prawidłowa.  
  
 Jeśli indeks jest poza ostatnim znakiem ciągu wyliczany, indeks nie ulega zmianie i `false` jest zwracana.  
  
 Należy zauważyć, że jeśli wyliczany ciąg jest pusty (""), stan <xref:System.CharEnumerator> zawsze jest nieprawidłowy. Jest to spowodowane wewnętrznego indeks <xref:System.CharEnumerator> jest początkowo, przed pierwszym znakiem ciągu wyliczany i dlatego jest nieprawidłowa. <xref:System.CharEnumerator.MoveNext%2A> logicznie ustawia indeks po ostatni znak (nieistniejącej) wyliczany ciąg, który również jest nieprawidłowy.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.CharEnumerator> klasy wyliczyć pojedynczych znaków w ciągu. Metoda tworzy <xref:System.CharEnumerator> obiektu przez wywołanie metody <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> metody zostanie przeniesiony z jednego znaku do następnego przez wywołanie metody <xref:System.CharEnumerator.MoveNext%2A> metodę i wyświetla bieżący znak poprzez pobranie wartości <xref:System.CharEnumerator.Current%2A> właściwości.  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 Należy jednak pamiętać, że ten sam operację można wykonać nieco bardziej intuicyjne przy użyciu `foreach` (w języku C#) lub `For Each` (w języku Visual Basic), w poniższym przykładzie pokazano.  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="charEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Inicjuje indeksu do położenia logicznie przed pierwszym znakiem ciągu wyliczany.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.CharEnumerator> Klasy obsługuje wewnętrzny indeks wyliczany ciąg, a <xref:System.CharEnumerator.Reset%2A> metody ustawia indeks nieprawidłowy stan.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IEnumerator.Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.CharEnumerator.System.Collections.IEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera aktualnie odwołania znak w ciągu wyliczany to <see cref="T:System.CharEnumerator" /> obiektu. Aby uzyskać opis tego elementu członkowskiego, zobacz <see cref="P:System.Collections.IEnumerator.Current" />.</summary>
        <value>Spakowany znak Unicode, obecnie odwołuje się ten <see cref="T:System.CharEnumerator" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Mogą być używane tylko wtedy, gdy <xref:System.CharEnumerator> wystąpienia jest rzutowany na <xref:System.Collections.IEnumerator> interfejsu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wyliczanie nie zostało uruchomione.  - lub - wyliczanie zostało zakończone.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>