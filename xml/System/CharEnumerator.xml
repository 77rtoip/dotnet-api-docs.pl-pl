<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CharEnumerator.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac50570f4e2dd53178598e0e6fbf7b325d2cd252378.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0570f4e2dd53178598e0e6fbf7b325d2cd252378</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.CharEnumerator">
          <source>Supports iterating over a <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object and reading its individual characters.</source>
          <target state="translated">Obsługuje Iterowanie po <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> obiektu i odczytywanie ich indywidualnych znaków.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.CharEnumerator">
          <source>This class cannot be inherited.</source>
          <target state="translated">Klasa ta nie może być dziedziczona.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>A <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> provides read-only access to the characters in a referenced <ph id="ph2">&lt;xref:System.String&gt;</ph> object.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> umożliwia dostęp tylko do odczytu do znaków w odwoływany <ph id="ph2">&lt;xref:System.String&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>For example, the <ph id="ph1">`foreach`</ph> statement of the Microsoft Visual Basic and C# programming languages, which iterates through the elements of a collection, retrieves a <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph> from a <ph id="ph3">&lt;xref:System.String&gt;</ph> object in order to iterate through the characters in that object.</source>
          <target state="translated">Na przykład <ph id="ph1">`foreach`</ph> instrukcji języka Visual Basic i C# języków programowania, który iteruje po kolekcji elementów, pobiera <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph> z <ph id="ph3">&lt;xref:System.String&gt;</ph> obiekt, aby można było wykonać iterację znaków w tym obiekt.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>There is no public constructor for <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph>.</source>
          <target state="translated">Nie istnieje żadne konstruktora publicznego dla <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>Instead, call a <ph id="ph1">&lt;xref:System.String&gt;</ph> object's <ph id="ph2">&lt;xref:System.String.GetEnumerator%2A&gt;</ph> method to obtain a <ph id="ph3">&lt;xref:System.CharEnumerator&gt;</ph> that is initialized to reference the string.</source>
          <target state="translated">Zamiast tego wywołać <ph id="ph1">&lt;xref:System.String&gt;</ph> obiektu <ph id="ph2">&lt;xref:System.String.GetEnumerator%2A&gt;</ph> metodę, aby uzyskać <ph id="ph3">&lt;xref:System.CharEnumerator&gt;</ph> który został zainicjowany do odwołania ciągu.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>A <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> maintains an internal index to the characters in the string the <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph> references.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> obsługuje wewnętrzny indeks znaków w ciągu <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph> odwołania.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>The state of the index is invalid when it references a character position logically before the first character or after the last character in the string, and valid when it references a character within the string.</source>
          <target state="translated">Stan indeksu jest nieprawidłowy, gdy odwołuje się do pozycji znaku logicznie przed pierwszym znakiem i po ostatnim znaku w ciągu i ważne, gdy odwołuje się do znaku w ciągu.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>The index is initialized to a position logically before the first character, and is set to a position after the last character when the iteration is complete.</source>
          <target state="translated">Indeks jest ustawiana na pozycji logicznie przed pierwszym znakiem i ma ustawioną wartość pozycji za ostatni znak po zakończeniu iteracji.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>An exception is thrown if you attempt to access a character while the index is invalid.</source>
          <target state="translated">Wyjątek jest próba uzyskania dostępu znak, gdy indeks jest nieprawidłowy.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> method increments the index by one, so the first and subsequent characters are accessed in turn.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> Metody zwiększa indeks, dlatego pierwsze i kolejne znaki są dostępne z kolei.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.CharEnumerator.Reset%2A&gt;</ph> method sets the index to a position logically before the first character.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CharEnumerator.Reset%2A&gt;</ph> Metody ustawia indeks na pozycji logicznie przed pierwszym znakiem.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> property retrieves the character currently referenced by index.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> Właściwość pobiera znak obecnie wywoływane przez indeks.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.CharEnumerator.Clone%2A&gt;</ph> method creates a copy of the <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CharEnumerator.Clone%2A&gt;</ph> Metoda tworzy kopię <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>Several independent instances of <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> across one or more threads can have access to a single instance of <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">Kilka wystąpień niezależne <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> między co najmniej jeden wątek może mieć dostęp do jednego wystąpienia <ph id="ph2">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>This class is implemented to support the <ph id="ph1">&lt;xref:System.Collections.IEnumerator&gt;</ph> interface.</source>
          <target state="translated">Ta klasa jest zaimplementowana do obsługi <ph id="ph1">&lt;xref:System.Collections.IEnumerator&gt;</ph> interfejsu.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>For more information regarding the use of an enumerator, see the <ph id="ph1">&lt;xref:System.Collections.IEnumerator&gt;</ph> topic.</source>
          <target state="translated">Aby uzyskać więcej informacji na temat użycia modułu wyliczającego zobacz <ph id="ph1">&lt;xref:System.Collections.IEnumerator&gt;</ph> tematu.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> class to enumerate the individual characters in a string.</source>
          <target state="translated">W poniższym przykładzie użyto <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> klasy wyliczyć znaki w ciągu.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>It instantiates a <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> object by calling the <ph id="ph2">&lt;xref:System.String.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> method, moves from one character to the next by calling the <ph id="ph3">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> method, and displays the current character by retrieving the value of the <ph id="ph4">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> property.</source>
          <target state="translated">Metoda tworzy <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> obiektu przez wywołanie metody <ph id="ph2">&lt;xref:System.String.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> metody, są przenoszone z jednego znaku do następnego wywołując <ph id="ph3">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> metody i wyświetla bieżący znak pobierając zaletą <ph id="ph4">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>Note, however, that the same operation can be performed somewhat more intuitively by using <ph id="ph1">`foreach`</ph> (in C#) or <ph id="ph2">`For Each`</ph> (in Visual Basic), as the following example shows.</source>
          <target state="translated">Należy jednak pamiętać, że tę samą operację można wykonać nieco bardziej intuicyjne używając <ph id="ph1">`foreach`</ph> (w języku C#) lub <ph id="ph2">`For Each`</ph> (w języku Visual Basic), jak w poniższym przykładzie przedstawiono.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.CharEnumerator.Clone">
          <source>Creates a copy of the current <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> object.</source>
          <target state="translated">Tworzy kopię bieżącego <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.CharEnumerator.Clone">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that is a copy of the current <ph id="ph2">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> Czyli kopię bieżącego <ph id="ph2">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Clone">
          <source>The return value is a copy of this instance of <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> and its current state.</source>
          <target state="translated">Wartość zwracana jest kopię tego wystąpienia <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> i swojego bieżącego stanu.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Clone">
          <source>This is useful for saving your state while iterating through a <ph id="ph1">&lt;xref:System.String&gt;</ph> object.</source>
          <target state="translated">Jest to przydatne w przypadku Zapisywanie stanu użytkownika podczas iteracji <ph id="ph1">&lt;xref:System.String&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Clone">
          <source>For example, suppose your application uses an original instance of <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> to iterate through each character in a <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">Na przykład, załóżmy, że aplikacja używa oryginalnego wystąpienia programu <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> do iterowania po każdym znaku w <ph id="ph2">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Clone">
          <source>When some unique character is encountered, your application pauses processing and invokes the <ph id="ph1">&lt;xref:System.CharEnumerator.Clone%2A&gt;</ph> method.</source>
          <target state="translated">W przypadku niektórych znaków unikatowy aplikacja wstrzymuje przetwarzania i wywołuje <ph id="ph1">&lt;xref:System.CharEnumerator.Clone%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Clone">
          <source>In effect, this saves the <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> object's index in the <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">W efekcie zapisuje <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> indeksu obiektu w <ph id="ph2">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Clone">
          <source>Your application uses the clone to navigate to another part of the <ph id="ph1">`String`</ph> to perform some auxiliary processing.</source>
          <target state="translated">Aplikacja używa klonu, aby przejść do innej części <ph id="ph1">`String`</ph> do wykonania niektórych dodatkowego przetwarzania.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Clone">
          <source>The side-effect of this navigation is the clone loses track of the position where processing stopped.</source>
          <target state="translated">Efektem ubocznym tego nawigacji jest klonu utraci śledzenie pozycji, której przetwarzanie zostało zakończone.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Clone">
          <source>However, when the auxiliary processing is complete, your application discards the clone and uses the original <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> instance to resume working on the <ph id="ph2">&lt;xref:System.String&gt;</ph> where the original processing stopped.</source>
          <target state="translated">Jednak po ukończeniu dodatkowego przetwarzania aplikacji odrzuca klonu i używa oryginalnej <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> wystąpienia, aby wznowić pracę na <ph id="ph2">&lt;xref:System.String&gt;</ph> gdzie oryginalnego przetwarzania zatrzymana.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Clone">
          <source>This method is implemented to support the <ph id="ph1">&lt;xref:System.ICloneable&gt;</ph> interface.</source>
          <target state="translated">Ta metoda jest zaimplementowana do obsługi <ph id="ph1">&lt;xref:System.ICloneable&gt;</ph> interfejsu.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="P:System.CharEnumerator.Current">
          <source>Gets the currently referenced character in the string enumerated by this <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> object.</source>
          <target state="translated">Pobiera obecnie przywoływanego znak w ciągu wyliczyć to <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source>The Unicode character currently referenced by this <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> object.</source>
          <target state="translated">Znak Unicode, w obecnie odwołuje się ten <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source>The <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> class maintains an internal index to the enumerated string, and the <ph id="ph2">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> property returns the character that is currently referenced by the index.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> Klasa obsługuje indeks wewnętrzny wyliczany ciąg i <ph id="ph2">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> właściwość zwraca znak, który obecnie jest przywoływany przez indeks.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source>This property should be invoked only when the index is valid; otherwise, an exception is thrown.</source>
          <target state="translated">Ta właściwość powinna być wywoływana tylko wtedy, gdy indeks jest nieprawidłowy; w przeciwnym wypadku jest zwracany wyjątek.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source>The index is always invalid for an empty string ("").</source>
          <target state="translated">Indeks zawsze jest nieprawidłowy dla pustego ciągu ("").</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source>The index is also invalid after the <ph id="ph1">&lt;xref:System.String.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.CharEnumerator.Reset%2A&gt;</ph> method is called.</source>
          <target state="translated">Indeks jest nieprawidłowy po również <ph id="ph1">&lt;xref:System.String.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> lub <ph id="ph2">&lt;xref:System.CharEnumerator.Reset%2A&gt;</ph> metoda jest wywoływana.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source>After either of these methods is called, invoke the <ph id="ph1">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> method to adjust the index to the first character in the enumerated string.</source>
          <target state="translated">Po każdej z tych metod, wywołaj <ph id="ph1">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> metodę, aby dopasować indeks pierwszego znaku w ciągu wyliczone.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source>The index is valid whenever the <ph id="ph1">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> method returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Indeks jest nieprawidłowy gdy <ph id="ph1">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> metoda zwraca <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source><ph id="ph1">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> does not move the index, and consecutive calls to <ph id="ph2">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> return the same character until <ph id="ph3">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.CharEnumerator.Reset%2A&gt;</ph>, or <ph id="ph5">&lt;xref:System.String.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> nie powoduje przeniesienia indeks i kolejne wywołania <ph id="ph2">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> zwracać ten sam znak do <ph id="ph3">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.CharEnumerator.Reset%2A&gt;</ph>, lub <ph id="ph5">&lt;xref:System.String.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> jest wywoływana.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> class to enumerate the individual characters in a string.</source>
          <target state="translated">W poniższym przykładzie użyto <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> klasy wyliczyć znaki w ciągu.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source>It instantiates a <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> object by calling the <ph id="ph2">&lt;xref:System.String.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> method, moves from one character to the next by calling the <ph id="ph3">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> method, and displays the current character by retrieving the value of the <ph id="ph4">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> property.</source>
          <target state="translated">Metoda tworzy <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> obiektu przez wywołanie metody <ph id="ph2">&lt;xref:System.String.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> metody, są przenoszone z jednego znaku do następnego wywołując <ph id="ph3">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> metody i wyświetla bieżący znak pobierając zaletą <ph id="ph4">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source>Note, however, that the same operation can be performed somewhat more intuitively by using <ph id="ph1">`foreach`</ph> (in C#) or <ph id="ph2">`For Each`</ph> (in Visual Basic), as the following example shows.</source>
          <target state="translated">Należy jednak pamiętać, że tę samą operację można wykonać nieco bardziej intuicyjne używając <ph id="ph1">`foreach`</ph> (w języku C#) lub <ph id="ph2">`For Each`</ph> (w języku Visual Basic), jak w poniższym przykładzie przedstawiono.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="P:System.CharEnumerator.Current">
          <source>The index is invalid; that is, it is before the first or after the last character of the enumerated string.</source>
          <target state="translated">Indeks jest nieprawidłowy. oznacza to, że jest przed pierwszym lub za ostatnim znakiem wyliczany ciąg.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.CharEnumerator.Dispose">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> class.</source>
          <target state="translated">Zwalnia wszelkie zasoby używane przez bieżące wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Dispose">
          <source>Call <ph id="ph1">&lt;xref:System.CharEnumerator.Dispose%2A&gt;</ph> when you are finished using the <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph>.</source>
          <target state="translated">Wywołanie <ph id="ph1">&lt;xref:System.CharEnumerator.Dispose%2A&gt;</ph> po zakończeniu przy użyciu <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Dispose">
          <source>The <ph id="ph1">&lt;xref:System.CharEnumerator.Dispose%2A&gt;</ph> method leaves the <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph> in an unusable state.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CharEnumerator.Dispose%2A&gt;</ph> Pozostawia metody <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph> w stanie uniemożliwiającym jego używanie.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Dispose">
          <source>After calling <ph id="ph1">&lt;xref:System.CharEnumerator.Dispose%2A&gt;</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.CharEnumerator&gt;</ph> was occupying.</source>
          <target state="translated">Po wywołaniu <ph id="ph1">&lt;xref:System.CharEnumerator.Dispose%2A&gt;</ph>, konieczne jest zwolnienie wszystkich odwołań do <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph> , moduł zbierający elementy bezużyteczne mógł odzyskać pamięć który <ph id="ph3">&lt;xref:System.CharEnumerator&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz <bpt id="p1">[</bpt>czyszczenie zasobów niezarządzanych<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> i <bpt id="p2">[</bpt>implementacja metody Dispose<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Dispose">
          <source>Always call <ph id="ph1">&lt;xref:System.CharEnumerator.Dispose%2A&gt;</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph>.</source>
          <target state="translated">Wywoływanie zawsze <ph id="ph1">&lt;xref:System.CharEnumerator.Dispose%2A&gt;</ph> przed zwolnieniem ostatniego odwołania do <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Dispose">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">W przeciwnym razie używa zasobów nie zostanie zwolniona do wywołania modułu zbierającego elementy bezużyteczne <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> obiektu <ph id="ph2">`Finalize`</ph> metody.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.CharEnumerator.MoveNext">
          <source>Increments the internal index of the current <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> object to the next character of the enumerated string.</source>
          <target state="translated">Indeks wewnętrzny bieżącego zwiększa <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> obiektu na następny znak wyliczany ciąg.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.CharEnumerator.MoveNext">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the index is successfully incremented and within the enumerated string; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli indeks pomyślnie jest zwiększany i ciągu wyliczany; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.MoveNext">
          <source>The <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> class maintains an internal index to the enumerated string, and the <ph id="ph2">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> method increments the index by one.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> Klasa obsługuje indeks wewnętrzny wyliczany ciąg i <ph id="ph2">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> metody zwiększa indeks o jeden.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.MoveNext">
          <source>Call <ph id="ph1">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> after calling <ph id="ph2">&lt;xref:System.String.GetEnumerator%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.CharEnumerator.Reset%2A&gt;</ph> to increment the current character position to the first character in the enumerated string.</source>
          <target state="translated">Wywołanie <ph id="ph1">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> po wywołaniu <ph id="ph2">&lt;xref:System.String.GetEnumerator%2A&gt;</ph> lub <ph id="ph3">&lt;xref:System.CharEnumerator.Reset%2A&gt;</ph> Aby zwiększyć bieżącej pozycji znaku do pierwszego znaku w wyliczany ciąg.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.MoveNext">
          <source>Check that the return value is <ph id="ph1">`true`</ph> to determine that the current character position is valid.</source>
          <target state="translated">Sprawdź, czy jest zwracana wartość <ph id="ph1">`true`</ph> ustalenie, czy bieżące położenie znaku jest prawidłowa.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.MoveNext">
          <source>If the index is already beyond the last character of the enumerated string, the index is not changed and <ph id="ph1">`false`</ph> is returned.</source>
          <target state="translated">Jeśli indeks jest poza ostatni znak wyliczany ciąg, indeks nie ulega zmianie i <ph id="ph1">`false`</ph> jest zwracany.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.MoveNext">
          <source>Notice that if the enumerated string is empty (""), the state of the <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> is always invalid.</source>
          <target state="translated">Zwróć uwagę, że jeśli wyliczany ciąg jest pusty (""), stan <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> zawsze jest nieprawidłowy.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.MoveNext">
          <source>This is because the internal index for the <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> is initially before the first character of the enumerated string and is therefore invalid.</source>
          <target state="translated">Jest to spowodowane indeks wewnętrzny <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> jest początkowo, przed pierwszym znakiem wyliczany ciąg i dlatego jest nieprawidłowy.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.MoveNext">
          <source><ph id="ph1">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> logically sets the index after the last (nonexistent) character of the enumerated string which is also invalid.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> logicznie ustawia indeks za ostatni znak (nieistniejącą) wyliczany ciągu, który również jest nieprawidłowy.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.MoveNext">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> class to enumerate the individual characters in a string.</source>
          <target state="translated">W poniższym przykładzie użyto <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> klasy wyliczyć znaki w ciągu.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.MoveNext">
          <source>It instantiates a <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> object by calling the <ph id="ph2">&lt;xref:System.String.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> method, moves from one character to the next by calling the <ph id="ph3">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> method, and displays the current character by retrieving the value of the <ph id="ph4">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> property.</source>
          <target state="translated">Metoda tworzy <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> obiektu przez wywołanie metody <ph id="ph2">&lt;xref:System.String.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> metody, są przenoszone z jednego znaku do następnego wywołując <ph id="ph3">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> metody i wyświetla bieżący znak pobierając zaletą <ph id="ph4">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.MoveNext">
          <source>Note, however, that the same operation can be performed somewhat more intuitively by using <ph id="ph1">`foreach`</ph> (in C#) or <ph id="ph2">`For Each`</ph> (in Visual Basic), as the following example shows.</source>
          <target state="translated">Należy jednak pamiętać, że tę samą operację można wykonać nieco bardziej intuicyjne używając <ph id="ph1">`foreach`</ph> (w języku C#) lub <ph id="ph2">`For Each`</ph> (w języku Visual Basic), jak w poniższym przykładzie przedstawiono.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.CharEnumerator.Reset">
          <source>Initializes the index to a position logically before the first character of the enumerated string.</source>
          <target state="translated">Inicjuje indeks pozycji logicznie przed pierwszym znakiem wyliczany ciąg.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Reset">
          <source>The <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> class maintains an internal index to the enumerated string, and the <ph id="ph2">&lt;xref:System.CharEnumerator.Reset%2A&gt;</ph> method sets the index to the invalid state.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> Klasa obsługuje indeks wewnętrzny wyliczany ciąg i <ph id="ph2">&lt;xref:System.CharEnumerator.Reset%2A&gt;</ph> metoda ustawia indeks nieprawidłowy stan.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="P:System.CharEnumerator.System#Collections#IEnumerator#Current">
          <source>Gets the currently referenced character in the string enumerated by this <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> object.</source>
          <target state="translated">Pobiera obecnie przywoływanego znak w ciągu wyliczyć to <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="P:System.CharEnumerator.System#Collections#IEnumerator#Current">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="P:System.Collections.IEnumerator.Current" /&gt;</ph>.</source>
          <target state="translated">Opis tego elementu członkowskiego, zobacz <ph id="ph1">&lt;see cref="P:System.Collections.IEnumerator.Current" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.System#Collections#IEnumerator#Current">
          <source>The boxed Unicode character currently referenced by this <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> object.</source>
          <target state="translated">Opakowany obecnie odwołuje się ten znak Unicode <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.System#Collections#IEnumerator#Current">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">Ten element jest jawną implementacją członków.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.System#Collections#IEnumerator#Current">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IEnumerator&gt;</ph> interface.</source>
          <target state="translated">Można go używać tylko wtedy, gdy <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> wystąpienia jest rzutowane na <ph id="ph2">&lt;xref:System.Collections.IEnumerator&gt;</ph> interfejsu.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="P:System.CharEnumerator.System#Collections#IEnumerator#Current">
          <source>Enumeration has not started.</source>
          <target state="translated">Wyliczanie nie zostało uruchomione.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="P:System.CharEnumerator.System#Collections#IEnumerator#Current">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="P:System.CharEnumerator.System#Collections#IEnumerator#Current">
          <source>Enumeration has ended.</source>
          <target state="translated">Wyliczanie zostało zakończone.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>