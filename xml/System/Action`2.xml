<Type Name="Action&lt;T1,T2&gt;" FullName="System.Action&lt;T1,T2&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="73167e3c7cfa77f8e757a6df4903313b3456a75c" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69421885" /></Metadata><TypeSignature Language="C#" Value="public delegate void Action&lt;in T1,in T2&gt;(T1 arg1, T2 arg2);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`2&lt;- T1, - T2&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action`2" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of In T1, In T2)(arg1 As T1, arg2 As T2)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2&gt;&#xA;public delegate void Action(T1 arg1, T2 arg2);" />
  <TypeSignature Language="F#" Value="type Action&lt;'T1, 'T2&gt; = delegate of 'T1 * 'T2 -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg1" Type="T1" Index="0" FrameworkAlternate="xamarinmac-3.0" />
    <Parameter Name="arg2" Type="T2" Index="1" FrameworkAlternate="xamarinmac-3.0" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1">Typ pierwszego parametru metody, który jest hermetyzowany przez ten delegat.</typeparam>
    <typeparam name="T2">Typ drugiego parametru metody, który jest hermetyzowany przez ten delegat.</typeparam>
    <param name="arg1">Pierwszy parametr metody, która jest hermetyzowana przez ten delegat.</param>
    <param name="arg2">Drugi parametr metody, która jest hermetyzowana przez ten delegat.</param>
    <summary>Hermetyzuje metodę, która ma dwa parametry i nie zwraca wartości.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można użyć <xref:System.Action%602> delegata, aby przekazać metodę jako parametr bez jawnego deklarowania niestandardowego delegata. Metoda hermetyzowana musi odpowiadać sygnaturze metody zdefiniowanej przez tego delegata. Oznacza to, że metoda hermetyzowana musi mieć dwa parametry, które są przesyłane do niego przez wartość, i nie może zwracać wartości. (W C#, metoda musi zwracać `void`. W Visual Basic musi być zdefiniowana przez `Sub`...`End Sub` Konstruuj. Może być również metodą zwracającą wartość, która jest ignorowana.) Zazwyczaj taka metoda jest używana do wykonywania operacji.  
  
> [!NOTE]
>  Aby odwołać się do metody, która ma dwa parametry i zwraca wartość, należy <xref:System.Func%603> zamiast tego użyć delegata generycznego.  
  
 W przypadku korzystania z <xref:System.Action%602> delegata nie trzeba jawnie definiować delegata, który hermetyzuje metodę z dwoma parametrami. Na przykład poniższy kod jawnie deklaruje delegata o nazwie `ConcatStrings`. Następnie przypisuje odwołanie do jednej z dwóch metod do jego wystąpienia delegata. Jedna metoda zapisuje dwa ciągi do konsoli; Druga zapisuje dwa ciągi do pliku.  
  
 [!code-csharp[System.Action~2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~2/cs/Delegate.cs#1)]
 [!code-vb[System.Action~2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~2/vb/Delegate.vb#1)]  
  
 Poniższy przykład upraszcza ten kod przez utworzenie wystąpienia <xref:System.Action%602> delegata zamiast jawnego definiowania nowego delegata i przypisanie do niego nazwanej metody.  
  
 [!code-csharp[System.Action~2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~2/cs/Action2.cs#2)]
 [!code-vb[System.Action~2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~2/vb/action2.vb#2)]  
  
 Można również użyć <xref:System.Action%602> delegata z metodami anonimowymi C#w, jak pokazano w poniższym przykładzie. (Aby uzyskać wprowadzenie do metod anonimowych, zobacz [metody anonimowe](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)).  
  
 [!code-csharp[System.Action~2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~2/cs/Anon.cs#3)]  
  
 Można również przypisać wyrażenie lambda do <xref:System.Action%602> wystąpienia delegata, jak pokazano w poniższym przykładzie. (Aby uzyskać wprowadzenie do wyrażeń lambda, zobacz [lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)).  
  
 [!code-csharp[System.Action~2#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~2/cs/Lambda.cs#4)]
 [!code-vb[System.Action~2#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~2/vb/lambda.vb#4)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`3" />
  </Docs>
</Type>
