<Type Name="IObserver&lt;T&gt;" FullName="System.IObserver&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="69fe38c1466cd015ea9b5aac7f4b2a6dd9f69526" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69420262" /></Metadata><TypeSignature Language="C#" Value="public interface IObserver&lt;in T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IObserver`1&lt;- T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IObserver`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IObserver(Of In T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IObserver" />
  <TypeSignature Language="F#" Value="type IObserver&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">Obiekt, który zawiera informacje o powiadomieniach.</typeparam>
    <summary>Zapewnia mechanizm otrzymywania powiadomień opartych na wypychaniu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Interfejsy <xref:System.IObserver%601> i<xref:System.IObservable%601> zapewniają uogólniony mechanizm powiadomień opartych na wypychaniu, znany również jako Wzorzec projektowy obserwatora. Interfejs reprezentuje klasę, która wysyła powiadomienia (dostawca) <xref:System.IObserver%601> ; interfejs reprezentuje klasę, która otrzymuje je (obserwator). <xref:System.IObservable%601> `T`reprezentuje klasę, która zawiera informacje o powiadomieniach.  
  
 Implementacja powoduje otrzymywanie powiadomień od dostawcy <xref:System.IObservable%601> (implementacja) przez przekazanie wystąpienia <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> samego siebie do metody dostawcy. <xref:System.IObserver%601> Ta metoda zwraca <xref:System.IDisposable> obiekt, którego można użyć do anulowania subskrypcji obserwatora, zanim dostawca zakończy wysyłanie powiadomień.  
  
 <xref:System.IObserver%601> Interfejs definiuje następujące trzy metody, które musi zaimplementować obserwator:  
  
-   <xref:System.IObserver%601.OnNext%2A> Metoda, która jest zwykle wywoływana przez dostawcę, aby dostarczyć obserwatorowi nowe dane lub informacje o stanie.  
  
-   <xref:System.IObserver%601.OnError%2A> Metoda, która jest zwykle wywoływana przez dostawcę w celu wskazania, że dane są niedostępne, niedostępne lub uszkodzone lub że Dostawca napotkał inny warunek błędu.  
  
-   <xref:System.IObserver%601.OnCompleted%2A> Metoda, która jest zwykle wywoływana przez dostawcę w celu wskazania, że zakończył wysyłanie powiadomień do obserwatorów.  
  
   
  
## Examples  
 Poniższy przykład ilustruje Wzorzec projektowy obserwatora. Definiuje `Location` klasę, która zawiera informacje o szerokości geograficznej i długości geograficznej.  
  
 [!code-csharp[System.IObserver.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#5)]
 [!code-vb[System.IObserver.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#5)]  
  
 `LocationReporter` Klasa<xref:System.IObserver%601> zawiera implementację. Informacje o bieżącej lokalizacji są wyświetlane w konsoli programu. Jego Konstruktor zawiera `name` parametr, który `LocationReporter` umożliwia wystąpienie, aby można było zidentyfikować je w danych wyjściowych ciągu. Zawiera `Subscribe` również metodę, która otacza wywołanie <xref:System.IObservable%601.Subscribe%2A> metody dostawcy. Umożliwia to metodu przypisanie zwróconego <xref:System.IDisposable> odwołania do zmiennej prywatnej. Klasa zawiera również <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> metodę, która wywołuje metodęobiektuzwróconegoprzezmetodę.<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> `Unsubscribe` `LocationReporter` Poniższy kod definiuje `LocationReporter` klasę.  
  
 [!code-csharp[System.IObserver.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#8)]
 [!code-vb[System.IObserver.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#8)]  
  
 `LocationTracker` Klasa<xref:System.IObservable%601> zawiera implementację. Jego `TrackLocation` Metoda jest przenoszona do `Location` obiektu dopuszczającego wartość null, który zawiera dane geograficzne i długości geograficznej. Jeśli wartość nie `null` `TrackLocation` jest<xref:System.IObserver%601.OnNext%2A> , metoda wywołuje metodę każdego obserwatora. `Location`  
  
 [!code-csharp[System.IObserver.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#6)]
 [!code-vb[System.IObserver.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#6)]  
  
 Jeśli wartość jest `null` `LocationNotFoundException` , `TrackLocation` Metoda tworzy wystąpienie obiektu, który jest przedstawiony w poniższym przykładzie. `Location` Następnie wywołuje on wszystkie <xref:System.IObserver%601.OnError%2A> metody obserwatora i przekazuje go do `LocationNotFoundException` obiektu. Należy zauważyć `LocationNotFoundException` , że <xref:System.Exception> pochodzi on z, ale nie dodaje żadnych nowych członków.  
  
 [!code-csharp[System.IObserver.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#7)]
 [!code-vb[System.IObserver.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#7)]  
  
 Obserwatorzy rejestrują się w celu otrzymywania powiadomień z `TrackLocation` obiektu przez wywołanie jego <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> metody, która przypisuje odwołanie do obiektu obserwatora do prywatnego <xref:System.Collections.Generic.List%601> obiektu ogólnego. Metoda zwraca `Unsubscriber` obiekt, który <xref:System.IDisposable> jest implementacją, która umożliwia obserwatorom zaprzestanie otrzymywania powiadomień. `LocationTracker` Klasa zawiera`EndTransmission` również metodę. Gdy żadne dalsze dane lokalizacji nie są dostępne, metoda wywołuje każdą <xref:System.IObserver%601.OnCompleted%2A> metodę obserwatora, a następnie czyści wewnętrzną listę obserwatorów.  
  
 Poniższy kod tworzy wystąpienie dostawcy i obserwatora.  
  
 [!code-csharp[System.IObserver.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/program.cs#9)]
 [!code-vb[System.IObserver.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/module1.vb#9)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IObservable`1" />
  </Docs>
  <Members>
    <Member MemberName="OnCompleted">
      <MemberSignature Language="C#" Value="public void OnCompleted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnCompleted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IObserver`1.OnCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnCompleted ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnCompleted();" />
      <MemberSignature Language="F#" Value="abstract member OnCompleted : unit -&gt; unit" Usage="iObserver.OnCompleted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Powiadamia obserwatora, że dostawca zakończył wysyłanie powiadomień opartych na wypychaniu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy jest <xref:System.IObserver%601.OnCompleted%2A> wywoływana implementacja obserwatora <xref:System.IDisposable.Dispose%2A> <xref:System.IObserver%601.OnCompleted%2A> , Metoda może opcjonalnie <xref:System.IDisposable> wywołać metodę obiektu <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> , który został zwrócony do obserwatora, gdy wywołano metodę.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono implementację <xref:System.IObserver%601.OnCompleted%2A> metody w aplikacji ze śledzeniem szerokości geograficznej/długości geograficznej. Metoda po prostu raportuje, że żadne dalsze dane nie są dostępne i wywołuje <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementację dostawcy. Zapoznaj się z przykładową <xref:System.IObserver%601> sekcją w temacie, aby zapoznać się z kompletnym przykładem.  
  
 [!code-csharp[System.IObserver.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#11)]
 [!code-vb[System.IObserver.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnError">
      <MemberSignature Language="C#" Value="public void OnError (Exception error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnError(class System.Exception error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IObserver`1.OnError(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnError (error As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnError(Exception ^ error);" />
      <MemberSignature Language="F#" Value="abstract member OnError : Exception -&gt; unit" Usage="iObserver.OnError error" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="error">Obiekt, który zawiera dodatkowe informacje o błędzie.</param>
        <summary>Powiadamia obserwatora, że wystąpił błąd w dostawcy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chociaż `error` jest obiektem, który jest <xref:System.Exception?displayProperty=nameWithType>pochodną, nie musi reprezentować wyjątku zgłoszonego przez dostawcę. Może również reprezentować procedurę lub oczekiwany warunek błędu, taki jak nieobecne dane lub niedostępne. <xref:System.IObserver%601.OnError%2A> Metoda powinna być traktowana jako informacyjna, a dostawca nie powinien oczekiwać, że obserwator zapewnia obsługę błędów.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono implementację <xref:System.IObserver%601.OnError%2A> metody w aplikacji ze śledzeniem szerokości geograficznej/długości geograficznej. Metoda po prostu raportuje, że dane są obecnie niedostępne; nie używa obiektu, <xref:System.Exception> który przeszedł do niego jako parametr. Zapoznaj się z przykładową <xref:System.IObserver%601> sekcją w temacie, aby zapoznać się z kompletnym przykładem.  
  
 [!code-csharp[System.IObserver.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#10)]
 [!code-vb[System.IObserver.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#10)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/c834760f-ddd4-417f-abb7-a059679d5b8c">Wzorzec projektowy obserwatora — Najlepsze praktyki</related>
      </Docs>
    </Member>
    <Member MemberName="OnNext">
      <MemberSignature Language="C#" Value="public void OnNext (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnNext(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IObserver`1.OnNext(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnNext (value As T)" />
      <MemberSignature Language="F#" Value="abstract member OnNext : 'T -&gt; unit" Usage="iObserver.OnNext value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value">Bieżące informacje o powiadomieniach.</param>
        <summary>Zapewnia obserwatorowi nowe dane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po wywołaniu przez obserwatora <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> metody dostawcy dostawca wywołuje <xref:System.IObserver%601.OnNext%2A> metodę obserwatora w celu dostarczenia powiadomień.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono implementację <xref:System.IObserver%601.OnNext%2A> metody w aplikacji ze śledzeniem szerokości geograficznej/długości geograficznej. Zapoznaj się z przykładową <xref:System.IObserver%601> sekcją w temacie, aby zapoznać się z kompletnym przykładem.  
  
 [!code-csharp[System.IObserver.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#12)]
 [!code-vb[System.IObserver.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
