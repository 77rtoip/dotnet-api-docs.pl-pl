<Type Name="Type" FullName="System.Type">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c4ba3a1a6a9cafc389eefb259ee95d08038fa797" />
    <Meta Name="ms.sourcegitcommit" Value="9df583fc6d4a3b1ce771cad475bdf090de38fc54" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="10/18/2018" />
    <Meta Name="ms.locfileid" Value="49401639" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Type : System.Reflection.MemberInfo, System.Reflection.IReflect, System.Runtime.InteropServices._Type" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Type extends System.Reflection.MemberInfo implements class System.Reflection.IReflect, class System.Runtime.InteropServices._Type" />
  <TypeSignature Language="DocId" Value="T:System.Type" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Type&#xA;Inherits MemberInfo&#xA;Implements _Type, IReflect" />
  <TypeSignature Language="C++ CLI" Value="public ref class Type abstract : System::Reflection::MemberInfo, System::Reflection::IReflect, System::Runtime::InteropServices::_Type" />
  <TypeSignature Language="F#" Value="type Type = class&#xA;    inherit MemberInfo&#xA;    interface _Type&#xA;    interface IReflect" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.Reflection.MemberInfo</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Reflection.IReflect</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._Type</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._Type))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="6cdc9-101">Reprezentuje typ deklaracji: klasy, typy, typy interfejsów, typy tablicowe, typy wartości, Typy wyliczeniowe, parametry typu, definicji typu ogólnego i otwarte lub zamknięte typy rodzajowe utworzone.</span>
      <span class="sxs-lookup">
        <span data-stu-id="6cdc9-101">Represents type declarations: class types, interface types, array types, value types, enumeration types, type parameters, generic type definitions, and open or closed constructed generic types.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-102">`Type` jest katalogiem głównym <xref:System.Reflection> funkcji i jest to podstawowy sposób dostępu do metadanych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-102">`Type` is the root of the <xref:System.Reflection> functionality and is the primary way to access metadata.</span></span> <span data-ttu-id="6cdc9-103">Użyj elementów członkowskich <xref:System.Type> Aby uzyskać informacje na temat deklaracji typu, na temat elementów członkowskich typu (na przykład konstruktorów, metody, pola, właściwości i zdarzenia w klasie), a także moduł i zestawu, w której jest wdrażany klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-103">Use the members of <xref:System.Type> to get information about a type declaration, about the members of a type (such as the constructors, methods, fields, properties, and events of a class), as well as the module and the assembly in which the class is deployed.</span></span>  
  
 <span data-ttu-id="6cdc9-104">Nie uprawnienia są wymagane dla kodu używać odbicia, aby uzyskać informacje na temat typów i ich członków, niezależnie od ich poziomy dostępu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-104">No permissions are required for code to use reflection to get information about types and their members, regardless of their access levels.</span></span> <span data-ttu-id="6cdc9-105">Nie uprawnienia są wymagane dla kodu dostępu publiczne elementy Członkowskie lub innych członków, w których poziomy dostępu będzie stały się widoczne podczas normalnej kompilacji przy użyciu odbicia.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-105">No permissions are required for code to use reflection to access public members, or other members whose access levels would make them visible during normal compilation.</span></span> <span data-ttu-id="6cdc9-106">Jednak aby używać odbicia do dostępu do elementów członkowskich, które zwykle będzie niedostępny, takie jak metody prywatne lub wewnętrzne lub objęte ochroną pól typu kodu, klasa nie dziedziczy, kod musi mieć <xref:System.Security.Permissions.ReflectionPermission>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-106">However, in order for your code to use reflection to access members that would normally be inaccessible, such as private or internal methods, or protected fields of a type your class does not inherit, your code must have <xref:System.Security.Permissions.ReflectionPermission>.</span></span> <span data-ttu-id="6cdc9-107">Zobacz [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-107">See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span>  
  
 <span data-ttu-id="6cdc9-108">`Type` jest abstrakcyjna klasa bazowa, która zezwala na wiele implementacji.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-108">`Type` is an abstract base class that allows multiple implementations.</span></span> <span data-ttu-id="6cdc9-109">System będzie zawsze podawać klasy pochodnej `RuntimeType`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-109">The system will always provide the derived class `RuntimeType`.</span></span> <span data-ttu-id="6cdc9-110">W odbiciu wszystkie klasy, począwszy od programu word środowiska uruchomieniowego są tworzone tylko raz dla każdego obiektu w operacjach porównania systemu i pomocy technicznej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-110">In reflection, all classes beginning with the word Runtime are created only once per object in the system and support comparison operations.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-111">W scenariuszach wielowątkowość nie blokuj <xref:System.Type> obiektów w celu synchronizowania dostępu do `static` danych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-111">In multithreading scenarios, do not lock <xref:System.Type> objects in order to synchronize access to `static` data.</span></span> <span data-ttu-id="6cdc9-112">Inny kod, nad którym masz żadnej kontroli, może również zablokować typu klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-112">Other code, over which you have no control, might also lock your class type.</span></span> <span data-ttu-id="6cdc9-113">Może to spowodować zakleszczenia.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-113">This might result in a deadlock.</span></span> <span data-ttu-id="6cdc9-114">Zamiast tego należy zsynchronizować dostęp do danych statycznych blokując prywatnej `static` obiektu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-114">Instead, synchronize access to static data by locking a private `static` object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-115">Klasa pochodna mają dostęp do chronionych składowych klas bazowych kodu wywołującego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-115">A derived class can access protected members of the calling code's base classes.</span></span> <span data-ttu-id="6cdc9-116">Ponadto jest dozwolony dostęp do zestawu elementów członkowskich zestawu kodu wywołującego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-116">Also, access is allowed to assembly members of the calling code's assembly.</span></span> <span data-ttu-id="6cdc9-117">Zgodnie z zasadą Jeśli możesz uzyskać dostęp w kodzie z wczesnym wiązaniem, następnie również możesz dostęp w kodzie z późnym wiązaniem.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-117">As a rule, if you are allowed access in early-bound code, then you are also allowed access in late-bound code.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-118">Interfejsy, które rozszerzają inne interfejsy nie dziedziczą metody zdefiniowane w rozszerzonych interfejsów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-118">Interfaces that extend other interfaces do not inherit the methods defined in the extended interfaces.</span></span>  
  
 <span data-ttu-id="6cdc9-119">W tej sekcji:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-119">In this section:</span></span>  
  
 <span data-ttu-id="6cdc9-120">[Jakie typy reprezentuje obiekt typu?](#WhatTypes) </span><span class="sxs-lookup"><span data-stu-id="6cdc9-120">[What types does a Type object represent?](#WhatTypes) </span></span>  
 <span data-ttu-id="6cdc9-121">[Pobieranie obiektu typu](#Retrieve) </span><span class="sxs-lookup"><span data-stu-id="6cdc9-121">[Retrieving a Type object](#Retrieve) </span></span>  
 [<span data-ttu-id="6cdc9-122">Porównywanie obiektów typu pod kątem równości</span><span class="sxs-lookup"><span data-stu-id="6cdc9-122">Comparing type objects for equality</span></span>](#Equality)  
  
<a name="WhatTypes"></a>   
## <a name="what-types-does-a-type-object-represent"></a><span data-ttu-id="6cdc9-123">Jakie typy reprezentuje obiekt typu?</span><span class="sxs-lookup"><span data-stu-id="6cdc9-123">What types does a Type object represent?</span></span>  
 <span data-ttu-id="6cdc9-124">Ta klasa jest bezpieczny wątkowo; wiele wątków jednocześnie może odczytywać dane z wystąpienia tego typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-124">This class is thread safe; multiple threads can concurrently read from an instance of this type.</span></span> <span data-ttu-id="6cdc9-125">Wystąpienie <xref:System.Type> klasa może reprezentować dowolny z następujących typów:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-125">An instance of the <xref:System.Type> class can represent any of the following types:</span></span>  
  
-   <span data-ttu-id="6cdc9-126">Klasy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-126">Classes</span></span>  
  
-   <span data-ttu-id="6cdc9-127">Typy wartości</span><span class="sxs-lookup"><span data-stu-id="6cdc9-127">Value types</span></span>  
  
-   <span data-ttu-id="6cdc9-128">Tablice</span><span class="sxs-lookup"><span data-stu-id="6cdc9-128">Arrays</span></span>  
  
-   <span data-ttu-id="6cdc9-129">Interfejsy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-129">Interfaces</span></span>  
  
-   <span data-ttu-id="6cdc9-130">Wyliczenia</span><span class="sxs-lookup"><span data-stu-id="6cdc9-130">Enumerations</span></span>  
  
-   <span data-ttu-id="6cdc9-131">Delegaty</span><span class="sxs-lookup"><span data-stu-id="6cdc9-131">Delegates</span></span>  
  
-   <span data-ttu-id="6cdc9-132">Zbudowany typy ogólne i definicji typu ogólnego</span><span class="sxs-lookup"><span data-stu-id="6cdc9-132">Constructed generic types and generic type definitions</span></span>  
  
-   <span data-ttu-id="6cdc9-133">Argumenty typu, a następnie wpisz parametry typów ogólnych skonstruowany, definicji typu ogólnego i definicji metody ogólnej</span><span class="sxs-lookup"><span data-stu-id="6cdc9-133">Type arguments and type parameters of constructed generic types, generic type definitions, and generic method definitions</span></span>  
  
<a name="Retrieve"></a>   
## <a name="retrieving-a-type-object"></a><span data-ttu-id="6cdc9-134">Pobieranie obiektu typu</span><span class="sxs-lookup"><span data-stu-id="6cdc9-134">Retrieving a Type object</span></span>  
 <span data-ttu-id="6cdc9-135"><xref:System.Type> Obiekt skojarzony z określonym typem można uzyskać w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-135">The <xref:System.Type> object associated with a particular type can be obtained in the following ways:</span></span>  
  
-   <span data-ttu-id="6cdc9-136">Wystąpienie <xref:System.Object.GetType%2A?displayProperty=nameWithType> metoda zwraca <xref:System.Type> obiekt, który reprezentuje typ wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-136">The instance <xref:System.Object.GetType%2A?displayProperty=nameWithType> method returns a <xref:System.Type> object that represents the type of an instance.</span></span> <span data-ttu-id="6cdc9-137">Ponieważ wszystkie zarządzane typy wyprowadzono z klasy <xref:System.Object>, <xref:System.Object.GetType%2A> metoda może być wywołana w wystąpieniu dowolnego typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-137">Because all managed types derive from <xref:System.Object>, the <xref:System.Object.GetType%2A> method can be called on an instance of any type.</span></span>  
  
     <span data-ttu-id="6cdc9-138">Poniższy przykład wywołuje <xref:System.Object.GetType%2A?displayProperty=nameWithType> metodę pozwala ustalić typ środowiska uruchomieniowego dla poszczególnych obiektów w tablicy obiektu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-138">The following example calls the <xref:System.Object.GetType%2A?displayProperty=nameWithType> method to determine the runtime type of each object in an object array.</span></span>  
  
     [!code-cpp[System.Type#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type/cpp/GetType1.cpp#2)]
     [!code-csharp[System.Type#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type/cs/GetType1.cs#2)]
     [!code-vb[System.Type#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type/vb/GetType1.vb#2)]  
  
-   <span data-ttu-id="6cdc9-139">Statyczne <xref:System.Type.GetType%2A?displayProperty=nameWithType> metody zwracają <xref:System.Type> obiekt, który reprezentuje typ określony przez jego w pełni kwalifikowana nazwa.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-139">The static <xref:System.Type.GetType%2A?displayProperty=nameWithType> methods return a <xref:System.Type> object that represents a type specified by its fully qualified name.</span></span>  
  
-   <span data-ttu-id="6cdc9-140"><xref:System.Reflection.Module.GetTypes%2A?displayProperty=nameWithType>, <xref:System.Reflection.Module.GetType%2A?displayProperty=nameWithType>, I <xref:System.Reflection.Module.FindTypes%2A?displayProperty=nameWithType> metody zwracają `Type` obiektami, które reprezentują typy zdefiniowane w module.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-140">The <xref:System.Reflection.Module.GetTypes%2A?displayProperty=nameWithType>, <xref:System.Reflection.Module.GetType%2A?displayProperty=nameWithType>, and <xref:System.Reflection.Module.FindTypes%2A?displayProperty=nameWithType> methods return `Type` objects that represent the types defined in a module.</span></span> <span data-ttu-id="6cdc9-141">Pierwsza metoda może służyć do uzyskiwania tablicę <xref:System.Type> obiektów dla wszystkich typów publicznych i prywatnych zdefiniowany w module.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-141">The first method can be used to obtain an array of <xref:System.Type> objects for all the public and private types defined in a module.</span></span> <span data-ttu-id="6cdc9-142">(Można uzyskać wystąpienia `Module` za pośrednictwem <xref:System.Reflection.Assembly.GetModule%2A?displayProperty=nameWithType> lub <xref:System.Reflection.Assembly.GetModules%2A?displayProperty=nameWithType> metodę, lub za pomocą <xref:System.Type.Module%2A?displayProperty=nameWithType> właściwości.)</span><span class="sxs-lookup"><span data-stu-id="6cdc9-142">(You can obtain an instance of `Module` through the <xref:System.Reflection.Assembly.GetModule%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetModules%2A?displayProperty=nameWithType> method, or through the <xref:System.Type.Module%2A?displayProperty=nameWithType> property.)</span></span>  
  
-   <span data-ttu-id="6cdc9-143"><xref:System.Reflection.Assembly?displayProperty=nameWithType> Obiekt zawiera wiele metod, które można pobrać klas zdefiniowanych w zestawie, w tym <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>, <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType>, i <xref:System.Reflection.Assembly.GetExportedTypes%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-143">The <xref:System.Reflection.Assembly?displayProperty=nameWithType> object contains a number of methods to retrieve the classes defined in an assembly, including <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>, <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType>, and <xref:System.Reflection.Assembly.GetExportedTypes%2A?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="6cdc9-144"><xref:System.Type.FindInterfaces%2A> Metoda zwraca filtrowana lista typów interfejsów, obsługiwany przez typ.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-144">The <xref:System.Type.FindInterfaces%2A> method returns a filtered list of interface types supported by a type.</span></span>  
  
-   <span data-ttu-id="6cdc9-145"><xref:System.Type.GetElementType%2A> Metoda zwraca `Type` obiekt, który reprezentuje element.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-145">The <xref:System.Type.GetElementType%2A> method returns a `Type` object that represents the element.</span></span>  
  
-   <span data-ttu-id="6cdc9-146"><xref:System.Type.GetInterfaces%2A> i <xref:System.Type.GetInterface%2A> metody zwracają <xref:System.Type> obiektów reprezentujących typy interfejsów, obsługiwany przez typ.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-146">The <xref:System.Type.GetInterfaces%2A> and <xref:System.Type.GetInterface%2A> methods return <xref:System.Type> objects representing the interface types supported by a type.</span></span>  
  
-   <span data-ttu-id="6cdc9-147"><xref:System.Type.GetTypeArray%2A> Metoda zwraca tablicę <xref:System.Type> obiektów reprezentujących typy określone przez dowolny zestaw obiektów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-147">The <xref:System.Type.GetTypeArray%2A> method returns an array of <xref:System.Type> objects representing the types specified by an arbitrary set of objects.</span></span> <span data-ttu-id="6cdc9-148">Obiekty są określane za pomocą tablicy typu <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-148">The objects are specified with an array of type <xref:System.Object>.</span></span>  
  
-   <span data-ttu-id="6cdc9-149"><xref:System.Type.GetTypeFromProgID%2A> i <xref:System.Type.GetTypeFromCLSID%2A> metody są dostarczane dla współdziałania COM.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-149">The <xref:System.Type.GetTypeFromProgID%2A> and <xref:System.Type.GetTypeFromCLSID%2A> methods are provided for COM interoperability.</span></span> <span data-ttu-id="6cdc9-150">Zwracają <xref:System.Type> obiekt, który reprezentuje typ określony przez `ProgID` lub `CLSID`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-150">They return a <xref:System.Type> object that represents the type specified by a `ProgID` or `CLSID`.</span></span>  
  
-   <span data-ttu-id="6cdc9-151"><xref:System.Type.GetTypeFromHandle%2A> Metoda towarzyszy współdziałania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-151">The <xref:System.Type.GetTypeFromHandle%2A> method is provided for interoperability.</span></span> <span data-ttu-id="6cdc9-152">Zwraca `Type` obiekt, który reprezentuje typu określonego przez dojście do klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-152">It returns a `Type` object that represents the type specified by a class handle.</span></span>  
  
-   <span data-ttu-id="6cdc9-153">C# `typeof` operatora C++ `typeid` operator i Visual Basic `GetType` uzyskać operator `Type` obiektu dla typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-153">The C# `typeof` operator, the C++ `typeid` operator, and the Visual Basic `GetType` operator obtain the `Type` object for a type.</span></span>  
  
-   <span data-ttu-id="6cdc9-154"><xref:System.Type.MakeGenericType%2A> Metoda zwraca <xref:System.Type> obiekt reprezentuje zbudowany typ ogólny, który jest zbudowany typu otwartego, jeśli jego <xref:System.Type.ContainsGenericParameters%2A> właściwość zwraca `true`, i zamkniętej skonstruowany typ inaczej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-154">The <xref:System.Type.MakeGenericType%2A> method returns a <xref:System.Type> object representing a constructed generic type, which is an open constructed type if its <xref:System.Type.ContainsGenericParameters%2A> property returns `true`, and a closed constructed type otherwise.</span></span> <span data-ttu-id="6cdc9-155">Mogą można utworzyć wystąpienia typu ogólnego, tylko wtedy, gdy jest ono zamknięte.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-155">A generic type can be instantiated only if it is closed.</span></span>  
  
-   <span data-ttu-id="6cdc9-156"><xref:System.Type.MakeArrayType%2A>, <xref:System.Type.MakePointerType%2A>, I <xref:System.Type.MakeByRefType%2A> metody zwracają <xref:System.Type> obiektami, które reprezentują odpowiednio tablicę określonego typu, wskaźnik do określonego typu, a typem parametru odwołania (`ref` w języku C# `ByRef`w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-156">The <xref:System.Type.MakeArrayType%2A>, <xref:System.Type.MakePointerType%2A>, and <xref:System.Type.MakeByRefType%2A> methods return <xref:System.Type> objects that represent, respectively, an array of a specified type, a pointer to a specified type, and the type of a reference parameter (`ref` in C#, `ByRef` in Visual Basic).</span></span>  
  
<a name="Equality"></a>   
## <a name="comparing-type-objects-for-equality"></a><span data-ttu-id="6cdc9-157">Porównywanie obiektów typu pod kątem równości</span><span class="sxs-lookup"><span data-stu-id="6cdc9-157">Comparing type objects for equality</span></span>  
 <span data-ttu-id="6cdc9-158">A <xref:System.Type> obiekt reprezentuje typ to unikatowy, czyli dwa <xref:System.Type> odwołania do obiektu odnoszą się do tego samego obiektu, tylko wtedy, gdy reprezentują tego samego typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-158">A <xref:System.Type> object that represents a type is unique; that is, two <xref:System.Type> object references refer to the same object if and only if they represent the same type.</span></span> <span data-ttu-id="6cdc9-159">Dzięki temu porównanie <xref:System.Type> obiektów przy użyciu równości odwołań.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-159">This allows for comparison of <xref:System.Type> objects using reference equality.</span></span> <span data-ttu-id="6cdc9-160">W poniższym przykładzie porównano <xref:System.Type> obiektami, które reprezentują liczbę liczb całkowitych, aby ustalić, czy są one tego samego typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-160">The following example compares the <xref:System.Type> objects that represent a number of integer values to determine whether they are of the same type.</span></span>  
  
 [!code-cpp[System.Type#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type/cpp/Equals1.cpp#3)]
 [!code-csharp[System.Type#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type/cs/Equals1.cs#3)]
 [!code-vb[System.Type#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type/vb/Equals1.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-161">W poniższym przykładzie pokazano kilka funkcji reprezentatywny <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-161">The following  example shows a few representative features of <xref:System.Type>.</span></span> <span data-ttu-id="6cdc9-162">C# `typeof` — operator (`GetType` operatora w języku Visual Basic `typeid` operator w programie Visual C++) służy do uzyskiwania <xref:System.Type> obiekt reprezentujący <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-162">The C# `typeof` operator (`GetType` operator in Visual Basic, `typeid` operator in Visual C++) is used to get a <xref:System.Type> object representing <xref:System.String>.</span></span> <span data-ttu-id="6cdc9-163">Z tego <xref:System.Type> obiektu <xref:System.Type.GetMethod%2A> metoda jest używana do pobierania <xref:System.Reflection.MethodInfo> reprezentujący <xref:System.String.Substring%2A> przeciążenia przyjmującego lokalizację początkową i długość.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-163">From this <xref:System.Type> object, the <xref:System.Type.GetMethod%2A> method is used to get a <xref:System.Reflection.MethodInfo> representing the <xref:System.String.Substring%2A> overload that takes a starting location and a length.</span></span>  
  
 <span data-ttu-id="6cdc9-164">Aby zidentyfikować sygnatura przeciążenia, przykład kodu tworzy tablicę tymczasową, zawierający dwie <xref:System.Type> obiekty reprezentujące `int` (`Integer` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-164">To identify the overload signature, the code example creates a temporary array containing two <xref:System.Type> objects representing `int` (`Integer` in Visual Basic).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-165">Ściślej mówiąc, tablica zawiera dwa odwołania do wystąpienia <xref:System.Type> reprezentujący `int` w bieżącej domenie aplikacji.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-165">To be precise, the array contains two references to the instance of <xref:System.Type> that represents `int` in the current application domain.</span></span> <span data-ttu-id="6cdc9-166">Dla dowolnego typu, jest tylko jedno wystąpienie <xref:System.Type> dla domeny aplikacji.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-166">For any type, there is only one instance of <xref:System.Type> per application domain.</span></span>  
  
 <span data-ttu-id="6cdc9-167">Przykład kodu wykorzystuje <xref:System.Reflection.MethodInfo> do wywołania <xref:System.String.Substring%2A> metody na ciąg "Hello, World!" i wyświetla wynik.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-167">The code example uses the <xref:System.Reflection.MethodInfo> to invoke the <xref:System.String.Substring%2A> method on the string "Hello, World!", and displays the result.</span></span>  
  
 [!code-cpp[System.Type#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type/cpp/source.cpp#1)]
 [!code-csharp[System.Type#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type/cs/source.cs#1)]
 [!code-vb[System.Type#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="6cdc9-168">Ten typ jest bezpieczny wątkowo.</span>
      <span class="sxs-lookup">
        <span data-stu-id="6cdc9-168">This type is thread safe.</span>
      </span>
    </threadsafe>
    <block subset="none" type="overrides">
      <para>
        <span data-ttu-id="6cdc9-169">Przy dziedziczeniu z <see langword="Type" />, konieczne jest przesłonięcie następujących składowych:</span>
        <span class="sxs-lookup">
          <span data-stu-id="6cdc9-169">When you inherit from <see langword="Type" />, you must override the following members:</span>
        </span> 
-   <see cref="P:System.Type.Assembly" />  
  
-   <see cref="P:System.Type.AssemblyQualifiedName" />  
  
-   <see cref="P:System.Type.BaseType" />  
  
-   <see cref="P:System.Type.FullName" />  
  
-   <see cref="M:System.Type.GetAttributeFlagsImpl" />  
  
-   <see cref="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />  
  
-   <see cref="M:System.Type.GetConstructors(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetElementType" /><span data-ttu-id="6cdc9-170">
-   <see cref="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)" /> ,</span><span class="sxs-lookup"><span data-stu-id="6cdc9-170">
-   <see cref="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)" /> ,</span></span> 
-   <see cref="M:System.Type.GetEvents(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetFields(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetInterface(System.String,System.Boolean)" />  
  
-   <see cref="M:System.Type.GetInterfaces" />  
  
-   <see cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />  
  
-   <see cref="M:System.Type.GetMethods(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />  
  
-   <see cref="P:System.Type.GUID" />  
  
-   <see cref="M:System.Type.HasElementTypeImpl" />  
  
-   <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />  
  
-   <see cref="M:System.Type.IsArrayImpl" />  
  
-   <see cref="M:System.Type.IsByRefImpl" />  
  
-   <see cref="M:System.Type.IsCOMObjectImpl" />  
  
-   <see cref="M:System.Type.IsPointerImpl" />  
  
-   <see cref="M:System.Type.IsPrimitiveImpl" />  
  
-   <see cref="P:System.Type.Module" />  
  
-   <see cref="P:System.Type.Namespace" />  
  
-   <see cref="P:System.Type.TypeHandle" />  
  
-   <see cref="P:System.Type.UnderlyingSystemType" />  
  
-   <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />  
  
-   <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" />  
  
-   <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />  
  
-   <see cref="P:System.Reflection.MemberInfo.Name" /></para>
    </block>
    <altmember cref="T:System.Object" />
    <altmember cref="N:System.Reflection" />
    <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
    <related type="Article" href="~/docs/framework/reflection-and-codedom/viewing-type-information.md">
      <span data-ttu-id="6cdc9-171">Wyświetlanie informacji o typie</span>
      <span class="sxs-lookup">
        <span data-stu-id="6cdc9-171">Viewing Type Information</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Type ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Type();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-172">Inicjuje nowe wystąpienie klasy <see cref="T:System.Type" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-172">Initializes a new instance of the <see cref="T:System.Type" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-173">Ten konstruktor jest wywoływany przez klasy pochodne podczas konstruowania obiektów typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-173">This constructor is invoked by derived classes during the construction of type objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Assembly">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.Assembly Assembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly Assembly" />
      <MemberSignature Language="DocId" Value="P:System.Type.Assembly" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Assembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Reflection::Assembly ^ Assembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Assembly : System.Reflection.Assembly" Usage="System.Type.Assembly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.Assembly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-174">Pobiera <see cref="T:System.Reflection.Assembly" /> w którym zadeklarowano typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-174">Gets the <see cref="T:System.Reflection.Assembly" /> in which the type is declared.</span>
          </span>
          <span data-ttu-id="6cdc9-175">Dla typów ogólnych pobiera <see cref="T:System.Reflection.Assembly" /> w jest definicja typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-175">For generic types, gets the <see cref="T:System.Reflection.Assembly" /> in which the generic type is defined.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-176">
            <see cref="T:System.Reflection.Assembly" /> Wystąpienia, który opisuje zestawu zawierającego bieżącego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-176">An <see cref="T:System.Reflection.Assembly" /> instance that describes the assembly containing the current type.</span>
          </span>
          <span data-ttu-id="6cdc9-177">Dla typów ogólnych wystąpienia w tym artykule opisano zestaw, który zawiera definicję typu ogólnego, nie zestawu, który tworzy i używa określonego skonstruowanego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-177">For generic types, the instance describes the assembly that contains the generic type definition, not the assembly that creates and uses a particular constructed type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-178">Jeśli bieżący <xref:System.Type> obiekt reprezentuje zbudowany typ ogólny, właściwość ta zwraca zestaw, który zawiera definicję typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-178">If the current <xref:System.Type> object represents a constructed generic type, this property returns the assembly that contains the generic type definition.</span></span> <span data-ttu-id="6cdc9-179">Załóżmy na przykład, możesz utworzyć zestaw o nazwie MyGenerics.dll, który zawiera definicję typu ogólnego `MyGenericStack<T>` (`MyGenericStack(Of T)` w języku Visual Basic `generic<T> ref class MyGenericStack` w języku C++).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-179">For example, suppose you create an assembly named MyGenerics.dll that contains the generic type definition `MyGenericStack<T>` (`MyGenericStack(Of T)` in Visual Basic, `generic<T> ref class MyGenericStack` in C++).</span></span> <span data-ttu-id="6cdc9-180">Jeśli utworzysz wystąpienie `MyGenericStack<int>` (`MyGenericStack(Of Integer)` w języku Visual Basic) w innym zestawie <xref:System.Type.Assembly%2A> zwraca właściwości dla skonstruowanego typu <xref:System.Reflection.Assembly> obiekt, który reprezentuje MyGenerics.dll.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-180">If you create an instance of `MyGenericStack<int>` (`MyGenericStack(Of Integer)` in Visual Basic) in another assembly, the <xref:System.Type.Assembly%2A> property for the constructed type returns an <xref:System.Reflection.Assembly> object that represents MyGenerics.dll.</span></span>  
  
 <span data-ttu-id="6cdc9-181">Podobnie jeśli bieżący <xref:System.Type> obiekt reprezentuje nieprzypisanego parametru ogólnego `T`, właściwość ta zwraca zestaw, który zawiera typ ogólny, który definiuje `T`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-181">Similarly, if the current <xref:System.Type> object represents an unassigned generic parameter `T`, this property returns the assembly that contains the generic type that defines `T`.</span></span>  
  
 <span data-ttu-id="6cdc9-182">Jeśli <xref:System.Type.Assembly%2A?displayProperty=nameWithType> właściwość nie jest dostępna na określonej implementacji .NET, takich jak .NET Core i platformy uniwersalnej Windows, należy użyć <xref:System.Reflection.TypeInfo.Assembly?displayProperty=nameWithType> właściwości zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-182">If the <xref:System.Type.Assembly%2A?displayProperty=nameWithType> property is not available on a particular .NET implementation, such as .NET Core or the Universal Windows Platform, use the <xref:System.Reflection.TypeInfo.Assembly?displayProperty=nameWithType> property instead.</span></span>      
  
 <span data-ttu-id="6cdc9-183">Ta właściwość jest tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-183">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-184">Poniższy przykład wyświetla nazwę zestawu, skojarzony z klasą i w pełni kwalifikowaną nazwę typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-184">The following example displays the assembly name associated with the class and the fully qualified name of the type.</span></span>  
  
 [!code-cpp[Type_Assembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_Assembly/CPP/type_assembly.cpp#1)]
 [!code-csharp[Type_Assembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_Assembly/CS/type_assembly.cs#1)]
 [!code-vb[Type_Assembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_Assembly/VB/type_assembly.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyQualifiedName">
      <MemberSignature Language="C#" Value="public abstract string AssemblyQualifiedName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssemblyQualifiedName" />
      <MemberSignature Language="DocId" Value="P:System.Type.AssemblyQualifiedName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property AssemblyQualifiedName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ AssemblyQualifiedName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AssemblyQualifiedName : string" Usage="System.Type.AssemblyQualifiedName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.AssemblyQualifiedName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-185">Pobiera kwalifikowaną dla zestawu nazwę typu, który zawiera nazwę zestawu, z którego należy to <see cref="T:System.Type" /> obiekt został załadowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-185">Gets the assembly-qualified name of the type, which includes the name of the assembly from which this <see cref="T:System.Type" /> object was loaded.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-186">Nazwa kwalifikowanego dla zestawu <see cref="T:System.Type" />, który zawiera nazwę zestawu, z którego <see cref="T:System.Type" /> został załadowany, lub <see langword="null" /> Jeśli bieżące wystąpienie reprezentuje parametr typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-186">The assembly-qualified name of the <see cref="T:System.Type" />, which includes the name of the assembly from which the <see cref="T:System.Type" /> was loaded, or <see langword="null" /> if the current instance represents a generic type parameter.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-187">Nazwa kwalifikowanego dla zestawu typu składa się z nazwą typu, łącznie z jego przestrzeń nazw i przecinek, a następnie według nazwy wyświetlanej zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-187">The assembly-qualified name of a type consists of the type name, including its namespace, followed by a comma, followed by the display name of the assembly.</span></span> <span data-ttu-id="6cdc9-188">Nazwa wyświetlana zestawu są uzyskiwane przy użyciu <xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType> właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-188">The display name of an assembly is obtained using the <xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-189">W wersji 2.0 środowiska .NET Framework architektura procesora jest dodawana do tożsamości zestawu i może być określona jako część zestawu ciągu nazw.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-189">In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.</span></span> <span data-ttu-id="6cdc9-190">Na przykład "ProcessorArchitecture = msil".</span><span class="sxs-lookup"><span data-stu-id="6cdc9-190">For example, "ProcessorArchitecture=msil".</span></span> <span data-ttu-id="6cdc9-191">Jednak nie są uwzględnione w ciągu zwracanego przez <xref:System.Type.AssemblyQualifiedName%2A> właściwość ze względu na zgodność.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-191">However, it is not included in the string returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, for compatibility reasons.</span></span> <span data-ttu-id="6cdc9-192">Zobacz <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-192">See <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="6cdc9-193">Wszystkie kompilatory, które obsługują środowiska uruchomieniowego języka wspólnego emitować prostą nazwę klasy zagnieżdżonej, a odbicie zniekształcone nazwy, po otrzymaniu kwerendy, zgodnie z następujących konwencji.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-193">All compilers that support the common language runtime emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.</span></span>  
  
|<span data-ttu-id="6cdc9-194">Ogranicznik</span><span class="sxs-lookup"><span data-stu-id="6cdc9-194">Delimiter</span></span>|<span data-ttu-id="6cdc9-195">Znaczenie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-195">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="6cdc9-196">Ukośnik odwrotny (\\)</span><span class="sxs-lookup"><span data-stu-id="6cdc9-196">Backslash (\\)</span></span>|<span data-ttu-id="6cdc9-197">Znak ucieczki.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-197">Escape character.</span></span>|  
|<span data-ttu-id="6cdc9-198">Przecinek (,)</span><span class="sxs-lookup"><span data-stu-id="6cdc9-198">Comma (,)</span></span>|<span data-ttu-id="6cdc9-199">Poprzedza nazwę zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-199">Precedes the Assembly name.</span></span>|  
|<span data-ttu-id="6cdc9-200">Znak plus (+)</span><span class="sxs-lookup"><span data-stu-id="6cdc9-200">Plus sign (+)</span></span>|<span data-ttu-id="6cdc9-201">Poprzedza klasę zagnieżdżoną.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-201">Precedes a nested class.</span></span>|  
|<span data-ttu-id="6cdc9-202">Kropka (.)</span><span class="sxs-lookup"><span data-stu-id="6cdc9-202">Period (.)</span></span>|<span data-ttu-id="6cdc9-203">Wskazuje przestrzeń nazw identyfikatorów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-203">Denotes namespace identifiers.</span></span>|  
|<span data-ttu-id="6cdc9-204">Nawiasy kwadratowe ([])</span><span class="sxs-lookup"><span data-stu-id="6cdc9-204">Brackets ([])</span></span>|<span data-ttu-id="6cdc9-205">Po nazwie typu wskazuje, że tablicy tego typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-205">After a type name, denotes an array of that type.</span></span><br /><br /> <span data-ttu-id="6cdc9-206">—lub—</span><span class="sxs-lookup"><span data-stu-id="6cdc9-206">-or-</span></span><br /><br /> <span data-ttu-id="6cdc9-207">Dla typu ogólnego otacza listy argumentów typu rodzajowego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-207">For a generic type, encloses the generic type argument list.</span></span><br /><br /> <span data-ttu-id="6cdc9-208">—lub—</span><span class="sxs-lookup"><span data-stu-id="6cdc9-208">-or-</span></span><br /><br /> <span data-ttu-id="6cdc9-209">Na liście argumentów typu otacza typu kwalifikowanego zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-209">Within a type argument list, encloses an assembly-qualified type.</span></span>|  
  
 <span data-ttu-id="6cdc9-210">Na przykład nazwa kwalifikowanego dla zestawu dla klasy może wyglądać następująco:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-210">For example, the assembly-qualified name for a class might look like this:</span></span>  
  
```  
TopNamespace.SubNameSpace.ContainingClass+NestedClass, MyAssembly, Version=1.3.0.0, Culture=neutral, PublicKeyToken=b17a5c561934e089  
```  
  
 <span data-ttu-id="6cdc9-211">Jeśli przestrzeń nazw zawiera znak plus, na przykład TopNamespace.Sub+Namespace, a następnie znak plus (+) może być poprzedzony znakiem ucieczki (\\), aby zapobiec interpretacji jako separator zagnieżdżenia.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-211">If the namespace contained a plus sign, for example TopNamespace.Sub+Namespace, then the plus sign (+) would be preceded by an escape character (\\) to prevent it from being interpreted as a nesting separator.</span></span> <span data-ttu-id="6cdc9-212">Ten ciąg będzie emisji odbicia w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-212">Reflection would emit this string as follows:</span></span>  
  
```  
TopNamespace.Sub\+Namespace.ContainingClass+NestedClass, MyAssembly, Version=1.3.0.0, Culture=neutral, PublicKeyToken=b17a5c561934e089   
```  
  
 <span data-ttu-id="6cdc9-213">A "++" staje się "\\+\\+", a "\\"staje się"\\\\".</span><span class="sxs-lookup"><span data-stu-id="6cdc9-213">A "++" becomes "\\+\\+", and a "\\" becomes "\\\\".</span></span>  
  
 <span data-ttu-id="6cdc9-214">Ta nazwa kwalifikowana może utrwalona i później używana do ładowania <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-214">This qualified name can be persisted and later used to load the <xref:System.Type>.</span></span> <span data-ttu-id="6cdc9-215">Aby wyszukać i załadować <xref:System.Type>, użyj <xref:System.Type.GetType%2A> albo z typem nazwy tylko lub nazwą kwalifikowaną typu zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-215">To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name.</span></span> <span data-ttu-id="6cdc9-216"><xref:System.Type.GetType%2A> z typem nazwy tylko będzie szukać <xref:System.Type> w zestawie wywołującego, a następnie w zestawie systemowym.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-216"><xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly.</span></span> <span data-ttu-id="6cdc9-217"><xref:System.Type.GetType%2A> z zestawem kwalifikowanej nazwy typu będzie szukać <xref:System.Type> w każdym zestawie.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-217"><xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.</span></span>  
  
 <span data-ttu-id="6cdc9-218">Nazwy typów mogą obejmować końcowe znaki, które wyznaczają dodatkowe informacje dotyczące typu, na przykład to, czy typ jest typem odwołania, typem wskaźnika lub typem tablicowym.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-218">Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type.</span></span> <span data-ttu-id="6cdc9-219">Aby pobrać, wpisz nazwę bez tych znaków końcowych, należy użyć `t.GetElementType().ToString()`, gdzie `t` jest typem.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-219">To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where `t` is the type.</span></span>  
  
 <span data-ttu-id="6cdc9-220">Spacje są istotne we wszystkich składnikach nazwy z wyjątkiem nazwy zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-220">Spaces are relevant in all type name components except the assembly name.</span></span> <span data-ttu-id="6cdc9-221">Spacje przed separatorem w nazwie zestawu ',' są istotne, ale spacje po separatorze ',' są ignorowane.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-221">In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.</span></span>  
  
 <span data-ttu-id="6cdc9-222">Argumenty ogólne typów ogólnych są kwalifikowane przez nazwę zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-222">Generic arguments of generic types are themselves qualified by assembly name.</span></span> <span data-ttu-id="6cdc9-223">Na przykład w nazwie typu kwalifikowanego zestawu `MyGenericClass<int>` (`MyGenericClass(Of Integer)` w języku Visual Basic), `int` podzielonego na nazwę typu kwalifikowanego zestawu <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-223">For example, in the assembly-qualified type name for `MyGenericClass<int>` (`MyGenericClass(Of Integer)` in Visual Basic), `int` is expanded to the assembly-qualified type name for <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="6cdc9-224">Jeśli bieżący <xref:System.Type> obiekt reprezentuje parametr ogólny, właściwość ta zwraca `null`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-224">If the current <xref:System.Type> object represents a generic parameter, this property returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-225">Poniższy przykład wyświetla nazwę zestawu, skojarzony z klasą i w pełni kwalifikowaną nazwę typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-225">The following example displays the assembly name associated with the class and the fully qualified name of the type.</span></span>  
  
 [!code-cpp[type_assembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_Assembly/CPP/type_assembly.cpp#1)]
 [!code-csharp[type_assembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_Assembly/CS/type_assembly.cs#1)]
 [!code-vb[type_assembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_Assembly/VB/type_assembly.vb#1)]  
  
 <span data-ttu-id="6cdc9-226">W poniższym przykładzie porównano ciągów zwracanych przez <xref:System.Type.ToString%2A> metody i `Name`, <xref:System.Type.FullName%2A>, i <xref:System.Type.AssemblyQualifiedName%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-226">The following example compares the strings returned by the <xref:System.Type.ToString%2A> method and the `Name`, <xref:System.Type.FullName%2A>, and <xref:System.Type.AssemblyQualifiedName%2A> properties.</span></span>  
  
 [!code-csharp[System.Type.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.tostring/cs/fullname1.cs#1)]
 [!code-vb[System.Type.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.tostring/vb/fullname1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:System.Type.GetType" />
        <altmember cref="P:System.Type.FullName" />
        <altmember cref="P:System.Type.Namespace" />
        <altmember cref="T:System.Reflection.AssemblyName" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md">
          <span data-ttu-id="6cdc9-227">Określanie w pełni kwalifikowanych nazw typów</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-227">Specifying Fully Qualified Type Names</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public System.Reflection.TypeAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.TypeAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Type.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Attributes As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::TypeAttributes Attributes { System::Reflection::TypeAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.Reflection.TypeAttributes" Usage="System.Type.Attributes" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.Attributes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-228">Pobiera atrybuty skojarzone z <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-228">Gets the attributes associated with the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-229">A <see cref="T:System.Reflection.TypeAttributes" /> obiekt reprezentujący zestaw atrybutów <see cref="T:System.Type" />, chyba że <see cref="T:System.Type" /> reprezentuje parametr typu ogólnego, w której wartość jest nieokreślony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-229">A <see cref="T:System.Reflection.TypeAttributes" /> object representing the attribute set of the <see cref="T:System.Type" />, unless the <see cref="T:System.Type" /> represents a generic type parameter, in which case the value is unspecified.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-230">Niektórzy członkowie <xref:System.Reflection.TypeAttributes> wyliczenia są masek, które reprezentują grupy wartości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-230">Some members of the <xref:System.Reflection.TypeAttributes> enumeration are masks that represent a group of values.</span></span> <span data-ttu-id="6cdc9-231">Każda grupa zawiera jeden element członkowski, którego podstawową wartość wynosi zero.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-231">Each group includes one member whose underlying value is zero.</span></span> <span data-ttu-id="6cdc9-232">Na przykład, podstawową wartość <xref:System.Reflection.TypeAttributes.NotPublic?displayProperty=nameWithType> elementu członkowskiego w <xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> grupy wynosi zero, ponieważ jest <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> elementu członkowskiego w <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> grupy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-232">For example, the underlying value of the <xref:System.Reflection.TypeAttributes.NotPublic?displayProperty=nameWithType> member in the <xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> group is zero, as is the <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> member in the <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> group.</span></span> <span data-ttu-id="6cdc9-233">W związku z tym należy użyć maska przed testowaniem w przypadku tych wartości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-233">Because of this, you must use the mask before testing for those values.</span></span> <span data-ttu-id="6cdc9-234">Przykład stanowi ilustrację.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-234">The example provides an illustration.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="6cdc9-235">W większości przypadków, właściwości, takie jak <xref:System.Type.IsClass%2A>,<xref:System.Type.IsAutoLayout%2A>, i <xref:System.Type.IsSpecialName%2A> są łatwiejsze w obsłudze niż atrybuty typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-235">For most purposes, properties like <xref:System.Type.IsClass%2A>,<xref:System.Type.IsAutoLayout%2A>, and <xref:System.Type.IsSpecialName%2A> are easier to use than type attributes.</span></span>  
  
 <span data-ttu-id="6cdc9-236">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, właściwość ta zwraca atrybuty definicji typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-236">If the current <xref:System.Type> represents a constructed generic type, this property returns the attributes of the generic type definition.</span></span> <span data-ttu-id="6cdc9-237">Na przykład, atrybutów, które są zwracane dla `MyGenericClass<int>` (`MyGenericClass(Of Integer)` w języku Visual Basic) są atrybuty `MyGenericClass<T>` (`MyGenericClass(Of T)` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-237">For example, the attributes returned for `MyGenericClass<int>` (`MyGenericClass(Of Integer)` in Visual Basic) are the attributes of `MyGenericClass<T>` (`MyGenericClass(Of T)` in Visual Basic).</span></span>  
  
 <span data-ttu-id="6cdc9-238">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu ogólnego — oznacza to, jeśli <xref:System.Type.IsGenericParameter%2A> właściwość zwraca `true` — <xref:System.Reflection.TypeAttributes> wartość zwracana przez właściwość ta jest nieokreślony.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-238">If the current <xref:System.Type> represents a generic type parameter — that is, if the <xref:System.Type.IsGenericParameter%2A> property returns `true` — the <xref:System.Reflection.TypeAttributes> value returned by this property is unspecified.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-239">Następujące usesthe przykład <xref:System.Type.Attributes%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-239">The following example usesthe <xref:System.Type.Attributes%2A> property.</span></span>  
  
 [!code-csharp[System.Type.Attributes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.attributes/cs/attributes1.cs#1)]
 [!code-vb[System.Type.Attributes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.attributes/vb/attributes1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.GetAttributeFlagsImpl" />
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="BaseType">
      <MemberSignature Language="C#" Value="public abstract Type BaseType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type BaseType" />
      <MemberSignature Language="DocId" Value="P:System.Type.BaseType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property BaseType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ BaseType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseType : Type" Usage="System.Type.BaseType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.BaseType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-240">Pobiera typ, z którego bieżący <see cref="T:System.Type" /> dziedziczy bezpośrednio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-240">Gets the type from which the current <see cref="T:System.Type" /> directly inherits.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-241">
            <see cref="T:System.Type" /> z którego bieżący <see cref="T:System.Type" /> dziedziczy bezpośrednio, lub <see langword="null" /> Jeśli bieżące <see langword="Type" /> reprezentuje <see cref="T:System.Object" /> klasę lub interfejs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-241">The <see cref="T:System.Type" /> from which the current <see cref="T:System.Type" /> directly inherits, or <see langword="null" /> if the current <see langword="Type" /> represents the <see cref="T:System.Object" /> class or an interface.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-242">Typ podstawowy jest typem, z której dziedziczy bezpośrednio bieżącego typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-242">The base type is the type from which the current type directly inherits.</span></span> <span data-ttu-id="6cdc9-243"><xref:System.Object> jest to jedyny typ, który nie ma typu podstawowego, w związku z tym `null` jest zwracana jako typ bazowy <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-243"><xref:System.Object> is the only type that does not have a base type, therefore `null` is returned as the base type of <xref:System.Object>.</span></span>  
  
 <span data-ttu-id="6cdc9-244">Interfejsy dziedziczyć zero lub więcej podstawowych interfejsów; Ta właściwość zwraca `null` Jeśli `Type` obiekt reprezentuje interfejs.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-244">Interfaces inherit from zero or more base interfaces; therefore, this property returns `null` if the `Type` object represents an interface.</span></span> <span data-ttu-id="6cdc9-245">Interfejsy podstawowe można określić za pomocą <xref:System.Type.GetInterfaces%2A> lub <xref:System.Type.FindInterfaces%2A>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-245">The base interfaces can be determined with <xref:System.Type.GetInterfaces%2A> or <xref:System.Type.FindInterfaces%2A>.</span></span>  
  
 <span data-ttu-id="6cdc9-246">Jeśli bieżący <xref:System.Type> reprezentuje typ ogólny skonstruowany, typ podstawowy odzwierciedla argumentów rodzajowych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-246">If the current <xref:System.Type> represents a constructed generic type, the base type reflects the generic arguments.</span></span> <span data-ttu-id="6cdc9-247">Na przykład należy wziąć pod uwagę następujące deklaracje:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-247">For example, consider the following declarations:</span></span>  
  
 [!code-cpp[System.Type.BaseType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.basetype/cpp/remarks.cpp#1)]
 [!code-csharp[System.Type.BaseType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.basetype/cs/remarks.cs#1)]
 [!code-vb[System.Type.BaseType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.basetype/vb/remarks.vb#1)]  
  
 <span data-ttu-id="6cdc9-248">Do skonstruowanego typu `C<int>` (`C(Of Integer)` w języku Visual Basic), <xref:System.Type.BaseType%2A> właściwość zwraca `B<int>`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-248">For the constructed type `C<int>` (`C(Of Integer)` in Visual Basic), the <xref:System.Type.BaseType%2A> property returns `B<int>`.</span></span>  
  
 <span data-ttu-id="6cdc9-249">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego, <xref:System.Type.BaseType%2A> zwraca ograniczenia klasy, oznacza to, że parametr typu musi dziedziczyć klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-249">If the current <xref:System.Type> represents a type parameter of a generic type definition, <xref:System.Type.BaseType%2A> returns the class constraint, that is, the class the type parameter must inherit.</span></span> <span data-ttu-id="6cdc9-250">Jeśli nie określono ograniczenia klasy <xref:System.Type.BaseType%2A> zwraca <xref:System.Object?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-250">If there is no class constraint, <xref:System.Type.BaseType%2A> returns <xref:System.Object?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="6cdc9-251">Ta właściwość jest tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-251">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-252">Poniższy przykład demonstruje użycie <xref:System.Type.BaseType%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-252">The following example demonstrates using the <xref:System.Type.BaseType%2A> property.</span></span>  
  
 [!code-cpp[TestBaseType#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestBaseType/CPP/testbasetype.cpp#1)]
 [!code-csharp[TestBaseType#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestBaseType/CS/testbasetype.cs#1)]
 [!code-vb[TestBaseType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestBaseType/VB/testbasetype.vb#1)]  
  
 <span data-ttu-id="6cdc9-253">W poniższym przykładzie użyto rekursji, aby wyświetlić listę hierarchii dziedziczenia pełną każda klasa odnaleźć w zestawie.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-253">The following example uses recursion to list the complete inheritance hierarchy of each class found in an assembly.</span></span> <span data-ttu-id="6cdc9-254">W przykładzie zdefiniowano klasę o nazwie `C` która jest pochodną klasę o nazwie `B`, która z kolei pochodzi od klasy o nazwie `A`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-254">The example defines a class named `C` that derives from a class named `B`, which, in turn, derives from a class named `A`.</span></span>  
  
 [!code-csharp[System.Type.BaseType#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.basetype/cs/basetype3.cs#2)]
 [!code-vb[System.Type.BaseType#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.basetype/vb/basetype3.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.Type.GetInterfaces" />
        <altmember cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
        <altmember cref="P:System.Type.UnderlyingSystemType" />
        <altmember cref="M:System.Type.IsSubclassOf(System.Type)" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md">
          <span data-ttu-id="6cdc9-255">Odbicie i typy ogólne</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-255">Reflection and Generic Types</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContainsGenericParameters">
      <MemberSignature Language="C#" Value="public virtual bool ContainsGenericParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContainsGenericParameters" />
      <MemberSignature Language="DocId" Value="P:System.Type.ContainsGenericParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ContainsGenericParameters As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool ContainsGenericParameters { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ContainsGenericParameters : bool" Usage="System.Type.ContainsGenericParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-256">Pobiera wartość wskazującą czy bieżący <see cref="T:System.Type" /> obiekt ma parametry typu, które nie zostały zastąpione przez określone typy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-256">Gets a value indicating whether the current <see cref="T:System.Type" /> object has type parameters that have not been replaced by specific types.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-257">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> sam parametr typu ogólnego lub obiektu ma parametry typu, dla których określonych typów nie zostały podane; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-257">
              <see langword="true" /> if the <see cref="T:System.Type" /> object is itself a generic type parameter or has type parameters for which specific types have not been supplied; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-258">Aby można było utworzyć wystąpienia typu, musi być nie definicji typu ogólnego lub Otwórz typy utworzone w argumentach typu sam typ, w dowolnym otaczających typów ogólnych lub w dowolnych elementów tego typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-258">In order to create an instance of a type, there must be no generic type definitions or open constructed types in the type arguments of the type itself, in any enclosing generic types, or in any elements of the type.</span></span> <span data-ttu-id="6cdc9-259">Innym sposobem powiedzenia, to jest że w przypadku badania cyklicznie, typ musi zawierać żadnych parametrów typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-259">Another way of saying this is that when examined recursively, the type must contain no generic type parameters.</span></span>  
  
 <span data-ttu-id="6cdc9-260">Ponieważ typy mogą być dowolnie złożone, dzięki czemu oznaczanie jest trudne.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-260">Since types can be arbitrarily complex, making this determination is difficult.</span></span> <span data-ttu-id="6cdc9-261">Dla wygody i zmniejszyć prawdopodobieństwo wystąpienia błędu <xref:System.Type.ContainsGenericParameters%2A> właściwość udostępnia standardowy sposób odróżnić zamknięte typy utworzone, które mogą być utworzone, i otwórz zbudowane typy, które nie.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-261">For convenience and to reduce the chance of error, the <xref:System.Type.ContainsGenericParameters%2A> property provides a standard way to distinguish between closed constructed types, which can be instantiated, and open constructed types, which cannot.</span></span> <span data-ttu-id="6cdc9-262">Jeśli <xref:System.Type.ContainsGenericParameters%2A> właściwość zwraca `true`, nie można utworzyć wystąpienia typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-262">If the <xref:System.Type.ContainsGenericParameters%2A> property returns `true`, the type cannot be instantiated.</span></span>  
  
 <span data-ttu-id="6cdc9-263"><xref:System.Type.ContainsGenericParameters%2A> Właściwość przeszukiwane rekursywnie dla parametrów typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-263">The <xref:System.Type.ContainsGenericParameters%2A> property searches recursively for type parameters.</span></span> <span data-ttu-id="6cdc9-264">Na przykład zwraca `true` tablicy, której elementy są typu `A<T>` (`A(Of T)` w języku Visual Basic), nawet jeśli tablica nie jest sam ogólny.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-264">For example, it returns `true` for an array whose elements are type `A<T>` (`A(Of T)` in Visual Basic), even though the array is not itself generic.</span></span> <span data-ttu-id="6cdc9-265">Natomiast to zachowanie <xref:System.Type.IsGenericType%2A> właściwość, która zwraca `false` dla tablic.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-265">Contrast this with the behavior of the <xref:System.Type.IsGenericType%2A> property, which returns `false` for arrays.</span></span>  
  
 <span data-ttu-id="6cdc9-266">Zbiór przykład klasy i tabelę przedstawiającą wartości <xref:System.Type.ContainsGenericParameters%2A> właściwości, zobacz <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-266">For a set of example classes and a table showing the values of the <xref:System.Type.ContainsGenericParameters%2A> property, see <xref:System.Type.IsGenericType%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-267">Poniższy przykład definiuje klasę ogólną z dwoma parametrami typu i następnie definiuje klasę ogólną drugi wywodzi się z pierwszej klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-267">The following example defines a generic class with two type parameters and then defines a second generic class that derives from the first class.</span></span> <span data-ttu-id="6cdc9-268">Klasa podstawowa dla klasy pochodnej ma dwa argumenty typu: pierwszy to <xref:System.Int32> , a drugim parametrem typu w typie pochodnym.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-268">The derived class's base class has two type arguments: the first is <xref:System.Int32> and the second is a type parameter of the derived type.</span></span> <span data-ttu-id="6cdc9-269">W przykładzie są wyświetlane informacje o tych klasach ogólnych, w tym pozycje raportowane przez <xref:System.Type.GenericParameterPosition%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-269">The example displays information about these generic classes, including the positions reported by the <xref:System.Type.GenericParameterPosition%2A> property.</span></span>  
  
 [!code-cpp[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/CPP/source.cpp#1)]
 [!code-csharp[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/CS/source.cs#1)]
 [!code-vb[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
        <altmember cref="M:System.Type.MakeGenericType(System.Type[])" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md">
          <span data-ttu-id="6cdc9-270">Odbicie i typy ogólne</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-270">Reflection and Generic Types</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md">
          <span data-ttu-id="6cdc9-271">Porady: zbadanie i tworzenie wystąpień typów ogólnych za pomocą odbicia</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-271">How to: Examine and Instantiate Generic Types with Reflection</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="DeclaringMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodBase DeclaringMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodBase DeclaringMethod" />
      <MemberSignature Language="DocId" Value="P:System.Type.DeclaringMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DeclaringMethod As MethodBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodBase ^ DeclaringMethod { System::Reflection::MethodBase ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeclaringMethod : System.Reflection.MethodBase" Usage="System.Type.DeclaringMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-272">Pobiera <see cref="T:System.Reflection.MethodBase" /> deklarującego metody reprezentująca Jeśli bieżące <see cref="T:System.Type" /> reprezentuje parametr typu metody ogólnej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-272">Gets a <see cref="T:System.Reflection.MethodBase" /> that represents the declaring method, if the current <see cref="T:System.Type" /> represents a type parameter of a generic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-273">Jeśli bieżący <see cref="T:System.Type" /> reprezentuje parametr typu metody ogólnej <see cref="T:System.Reflection.MethodBase" /> reprezentująca deklarowania metody; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-273">If the current <see cref="T:System.Type" /> represents a type parameter of a generic method, a <see cref="T:System.Reflection.MethodBase" /> that represents declaring method; otherwise, <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-274">Metoda deklarujący jest definicję metody rodzajowej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-274">The declaring method is a generic method definition.</span></span> <span data-ttu-id="6cdc9-275">Oznacza to jeśli <xref:System.Type.DeclaringMethod%2A> nie zwraca `null`, następnie `DeclaringMethod.IsGenericMethodDefinition` zwraca `true`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-275">That is, if <xref:System.Type.DeclaringMethod%2A> does not return `null`, then `DeclaringMethod.IsGenericMethodDefinition` returns `true`.</span></span>  
  
 <span data-ttu-id="6cdc9-276"><xref:System.Type.DeclaringType%2A> i <xref:System.Type.DeclaringMethod%2A> właściwości zidentyfikować definicji typu ogólnego lub definicję metody rodzajowej, w której została pierwotnie zdefiniowana parametru typu generycznego:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-276">The <xref:System.Type.DeclaringType%2A> and <xref:System.Type.DeclaringMethod%2A> properties identify the generic type definition or generic method definition in which the generic type parameter was originally defined:</span></span>  
  
-   <span data-ttu-id="6cdc9-277">Jeśli <xref:System.Type.DeclaringMethod%2A> właściwość zwraca <xref:System.Reflection.MethodInfo>, które <xref:System.Reflection.MethodInfo> reprezentuje definicję metody rodzajowej, a bieżący <xref:System.Type> obiekt reprezentuje parametr typu tej definicji metody rodzajowej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-277">If the <xref:System.Type.DeclaringMethod%2A> property returns a <xref:System.Reflection.MethodInfo>, that <xref:System.Reflection.MethodInfo> represents a generic method definition, and the current <xref:System.Type> object represents a type parameter of that generic method definition.</span></span>  
  
-   <span data-ttu-id="6cdc9-278">Jeśli <xref:System.Type.DeclaringMethod%2A> właściwość zwraca `null`, a następnie <xref:System.Type.DeclaringType%2A> właściwość zawsze zwraca <xref:System.Type> obiekt reprezentujący definicji typu ogólnego i bieżący <xref:System.Type> obiekt reprezentuje parametr typu ogólnego typu Definicja.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-278">If the <xref:System.Type.DeclaringMethod%2A> property returns `null`, then the <xref:System.Type.DeclaringType%2A> property always returns a <xref:System.Type> object representing a generic type definition, and the current <xref:System.Type> object represents a type parameter of that generic type definition.</span></span>  
  
-   <span data-ttu-id="6cdc9-279">Wprowadzenie <xref:System.Type.DeclaringMethod%2A> właściwość typu którego <xref:System.Type.IsGenericParameter%2A> właściwość `false` zgłasza <xref:System.InvalidOperationException>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-279">Getting the <xref:System.Type.DeclaringMethod%2A> property on a type whose <xref:System.Type.IsGenericParameter%2A> property is `false` throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="6cdc9-280"><xref:System.Reflection.MethodBase> Zwracanym przez <xref:System.Type.DeclaringMethod%2A> właściwości <xref:System.Reflection.MethodInfo> w przypadku metody rodzajowej, lub <xref:System.Reflection.ConstructorInfo> w przypadku ogólnych konstruktora.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-280">The <xref:System.Reflection.MethodBase> that is returned by the <xref:System.Type.DeclaringMethod%2A> property is either a <xref:System.Reflection.MethodInfo> in the case of a generic method, or a <xref:System.Reflection.ConstructorInfo> in the case of a generic constructor.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-281">Ogólny konstruktory nie są obsługiwane w .NET Framework w wersji 2.0.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-281">In the .NET Framework version 2.0, generic constructors are not supported.</span></span>  
  
 <span data-ttu-id="6cdc9-282">Aby uzyskać listę niezmiennych warunków dla terminów używanych w odbiciu rodzajowym, zobacz <xref:System.Type.IsGenericType%2A> uwagi dotyczące właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-282">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-283">Poniższy kod definiuje klasę, która zawiera metody rodzajowej, przypisuje argument typu do metody i wywołuje wynikowego skonstruowanego metody rodzajowej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-283">The following code example defines a class that has a generic method, assigns a type argument to the method, and invokes the resulting constructed generic method.</span></span> <span data-ttu-id="6cdc9-284">Wyświetla informacje o definicji metody rodzajowej, a także metoda skonstruowany.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-284">It also displays information about the generic method definition and the constructed method.</span></span> <span data-ttu-id="6cdc9-285">Podczas wyświetlania informacji na temat parametrów typu definicji metody ogólnej w `DisplayGenericMethodInfo` metody, przykładowy kod pokazuje wartość <xref:System.Type.DeclaringMethod%2A> właściwość, parametru typu ogólnego metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-285">When displaying information about the type parameters of the generic method definition, in the `DisplayGenericMethodInfo` method, the example code shows the value of the <xref:System.Type.DeclaringMethod%2A> property for the method's generic type parameter.</span></span>  
  
 [!code-cpp[MethodInfo.Generics#1](~/samples/snippets/cpp/VS_Snippets_CLR/MethodInfo.Generics/cpp/source.cpp#1)]
 [!code-csharp[MethodInfo.Generics#1](~/samples/snippets/csharp/VS_Snippets_CLR/MethodInfo.Generics/CS/source.cs#1)]
 [!code-vb[MethodInfo.Generics#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodInfo.Generics/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsGenericParameter" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md">
          <span data-ttu-id="6cdc9-286">Odbicie i typy ogólne</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-286">Reflection and Generic Types</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md">
          <span data-ttu-id="6cdc9-287">Porady: zbadanie i tworzenie wystąpień typów ogólnych za pomocą odbicia</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-287">How to: Examine and Instantiate Generic Types with Reflection</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public override Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Type.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DeclaringType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ DeclaringType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeclaringType : Type" Usage="System.Type.DeclaringType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.DeclaringType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-288">Pobiera typ, który deklaruje bieżącego typu zagnieżdżonego lub parametr typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-288">Gets the type that declares the current nested type or generic type parameter.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-289">A <see cref="T:System.Type" /> obiekt reprezentujący otaczający typ, jeśli bieżącym typem jest typ zagnieżdżony; lub definicji typu ogólnego, jeśli bieżącym typem jest parametr typu ogólnego; lub typ, który deklaruje metody rodzajowej, jeśli bieżącym typem jest parametr typu metody ogólnej; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-289">A <see cref="T:System.Type" /> object representing the enclosing type, if the current type is a nested type; or the generic type definition, if the current type is a type parameter of a generic type; or the type that declares the generic method, if the current type is a type parameter of a generic method; otherwise, <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-290">Jeśli bieżący <xref:System.Type> obiekt reprezentuje parametr typu metody rodzajowej, właściwość ta zwraca definicji typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-290">If the current <xref:System.Type> object represents a type parameter of a generic type, this property returns the generic type definition.</span></span>  
  
 <span data-ttu-id="6cdc9-291">Jeśli bieżący <xref:System.Type> obiekt reprezentuje parametr typu metody rodzajowej, właściwość ta zwraca typ, który zawiera definicję metody rodzajowej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-291">If the current <xref:System.Type> object represents a type parameter of a generic method, this property returns the type that contains the generic method definition.</span></span> <span data-ttu-id="6cdc9-292">W przypadku typu ogólnego, definicja typu ogólnego jest zwracana.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-292">If the type is generic, the generic type definition is returned.</span></span> <span data-ttu-id="6cdc9-293">Oznacza to, poniższy kod zwraca definicji typu rodzajowego <xref:System.Collections.Generic.List%601> klasy ogólnej, który zawiera <xref:System.Collections.Generic.List%601.ConvertAll%2A> metody ogólnej:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-293">That is, the following code returns the generic type definition of the <xref:System.Collections.Generic.List%601> generic class, which contains the <xref:System.Collections.Generic.List%601.ConvertAll%2A> generic method:</span></span>  
  
 [!code-cpp[System.Type.DeclaringType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.declaringtype/cpp/remarks.cpp#1)]
 [!code-csharp[System.Type.DeclaringType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.declaringtype/cs/remarks.cs#1)]
 [!code-vb[System.Type.DeclaringType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.declaringtype/vb/remarks.vb#1)]  
  
 <span data-ttu-id="6cdc9-294">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, <xref:System.Type.DeclaringType%2A> i <xref:System.Type.DeclaringMethod%2A> zidentyfikować właściwości w definicji typu ogólnego lub metody rodzajowej definicji, gdzie parametr typu ogólnego została pierwotnie zdefiniowana:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-294">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, the <xref:System.Type.DeclaringType%2A> and <xref:System.Type.DeclaringMethod%2A> properties identify the generic type definition or generic method definition where the generic type parameter was originally defined:</span></span>  
  
-   <span data-ttu-id="6cdc9-295">Jeśli <xref:System.Type.DeclaringMethod%2A> właściwość zwraca <xref:System.Reflection.MethodInfo>, które <xref:System.Reflection.MethodInfo> reprezentuje definicję metody rodzajowej, a bieżący <xref:System.Type> obiekt reprezentuje parametr typu tej definicji metody rodzajowej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-295">If the <xref:System.Type.DeclaringMethod%2A> property returns a <xref:System.Reflection.MethodInfo>, that <xref:System.Reflection.MethodInfo> represents a generic method definition, and the current <xref:System.Type> object represents a type parameter of that generic method definition.</span></span>  
  
-   <span data-ttu-id="6cdc9-296">Jeśli <xref:System.Type.DeclaringMethod%2A> właściwość zwraca `null`, a następnie <xref:System.Type.DeclaringType%2A> właściwość zawsze zwraca <xref:System.Type> obiekt reprezentujący definicji typu ogólnego i bieżący <xref:System.Type> obiekt reprezentuje parametr typu ogólnego typu Definicja.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-296">If the <xref:System.Type.DeclaringMethod%2A> property returns `null`, then the <xref:System.Type.DeclaringType%2A> property always returns a <xref:System.Type> object representing a generic type definition, and the current <xref:System.Type> object represents a type parameter of that generic type definition.</span></span>  
  
-   <span data-ttu-id="6cdc9-297">Wprowadzenie <xref:System.Type.DeclaringType%2A> właściwość typu którego <xref:System.Type.IsGenericParameter%2A> właściwość `false` zgłasza <xref:System.InvalidOperationException>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-297">Getting the <xref:System.Type.DeclaringType%2A> property on a type whose <xref:System.Type.IsGenericParameter%2A> property is `false` throws an <xref:System.InvalidOperationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-298">Ten przykład Wyświetla typ deklarujący metody w klasie pochodnej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-298">This example displays the declaring type of a method in a derived class.</span></span>  
  
 [!code-cpp[Classic Type.DeclaringType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.DeclaringType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.DeclaringType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.DeclaringType Example/CS/source.cs#1)]
 [!code-vb[Classic Type.DeclaringType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.DeclaringType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="P:System.Type.ReflectedType" />
      </Docs>
    </Member>
    <Member MemberName="DefaultBinder">
      <MemberSignature Language="C#" Value="public static System.Reflection.Binder DefaultBinder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Reflection.Binder DefaultBinder" />
      <MemberSignature Language="DocId" Value="P:System.Type.DefaultBinder" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultBinder As Binder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Reflection::Binder ^ DefaultBinder { System::Reflection::Binder ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultBinder : System.Reflection.Binder" Usage="System.Type.DefaultBinder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Binder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-299">Pobiera odwołanie do domyślnego integratora, który implementuje wewnętrzne zasady dotyczące wybierania odpowiednich elementów członkowskich, które ma zostać wywołana przez <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-299">Gets a reference to the default binder, which implements internal rules for selecting the appropriate members to be called by <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-300">Odwołanie do domyślnego integratora używaną przez system.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-300">A reference to the default binder used by the system.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-301">Domyślny integrator dołączonym środowiska uruchomieniowego języka wspólnego jest stosowana we wszystkich oprócz najbardziej wyspecjalizowaną okoliczności.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-301">The default binder provided with the common language runtime is applicable in all but the most specialized circumstances.</span></span> <span data-ttu-id="6cdc9-302">Jeśli potrzebujesz integratora definiują reguły poniżej, które różnią się od skoroszytu domyślną dostarczony typ pochodzący od <xref:System.Reflection.Binder> klasy i przekaż wystąpienie tego typu za pomocą `binder` parametr jednego z <xref:System.Type.InvokeMember%2A> przeciążenia.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-302">If you need a binder that follows rules that differ from those of the supplied default binder, define a type derived from the <xref:System.Reflection.Binder> class and pass an instance of that type using the `binder` parameter of one of the <xref:System.Type.InvokeMember%2A> overloads.</span></span>  
  
 <span data-ttu-id="6cdc9-303">Odbicie modeli reguły ułatwień dostępu wspólny system typów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-303">Reflection models the accessibility rules of the common type system.</span></span> <span data-ttu-id="6cdc9-304">Na przykład jeśli obiekt wywołujący znajduje się w tym samym zestawie, obiekt wywołujący nie potrzebne żadne specjalne uprawnienia dla wewnętrznych składowych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-304">For example, if the caller is in the same assembly, the caller does not need special permissions for internal members.</span></span> <span data-ttu-id="6cdc9-305">W przeciwnym razie wywołujący musi mieć <xref:System.Security.Permissions.ReflectionPermission>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-305">Otherwise, the caller needs <xref:System.Security.Permissions.ReflectionPermission>.</span></span> <span data-ttu-id="6cdc9-306">Jest to zgodne z wyszukiwania elementów członkowskich, które są chronione, prywatne i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-306">This is consistent with lookup of members that are protected, private, and so on.</span></span>  
  
 <span data-ttu-id="6cdc9-307">Ogólną zasadą jest fakt, że <xref:System.Reflection.Binder.ChangeType%2A> należy wykonać tylko do poszerzenia konwersje, które nigdy nie utracą danych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-307">The general principle is that <xref:System.Reflection.Binder.ChangeType%2A> should perform only widening conversions, which never lose data.</span></span> <span data-ttu-id="6cdc9-308">Przykładem konwersję rozszerzającą konwertuje wartość całkowita 32-bitowa wartość całkowita 64-bitowych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-308">An example of a widening conversion is converting a value that is a 32-bit signed integer to a value that is a 64-bit signed integer.</span></span> <span data-ttu-id="6cdc9-309">Jest to odróżnić od konwersją zawężającą może spowodować utratę danych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-309">This is distinguished from a narrowing conversion, which may lose data.</span></span> <span data-ttu-id="6cdc9-310">Przykład konwersja zawężająca jest konwersja całkowita 64-bitowego na całkowita 32-bitowych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-310">An example of a narrowing conversion is converting a 64-bit signed integer to a 32-bit signed integer.</span></span>  
  
 <span data-ttu-id="6cdc9-311">W poniższej tabeli wymieniono konwersje obsługiwane przez domyślny integrator.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-311">The following table lists the conversions supported by the default binder.</span></span>  
  
|<span data-ttu-id="6cdc9-312">Typ źródła</span><span class="sxs-lookup"><span data-stu-id="6cdc9-312">Source Type</span></span>|<span data-ttu-id="6cdc9-313">Typ docelowy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-313">Target Type</span></span>|  
|-----------------|-----------------|  
|<span data-ttu-id="6cdc9-314">Dowolnego typu</span><span class="sxs-lookup"><span data-stu-id="6cdc9-314">Any type</span></span>|<span data-ttu-id="6cdc9-315">Jego typ podstawowy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-315">Its base type.</span></span>|  
|<span data-ttu-id="6cdc9-316">Dowolnego typu</span><span class="sxs-lookup"><span data-stu-id="6cdc9-316">Any type</span></span>|<span data-ttu-id="6cdc9-317">Interfejs, który implementuje.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-317">The interface it implements.</span></span>|  
|<span data-ttu-id="6cdc9-318">Char</span><span class="sxs-lookup"><span data-stu-id="6cdc9-318">Char</span></span>|<span data-ttu-id="6cdc9-319">Unt16, UInt32, Int32, UInt64, Int64, pojedynczy Double</span><span class="sxs-lookup"><span data-stu-id="6cdc9-319">Unt16, UInt32, Int32, UInt64, Int64, Single, Double</span></span>|  
|<span data-ttu-id="6cdc9-320">Byte</span><span class="sxs-lookup"><span data-stu-id="6cdc9-320">Byte</span></span>|<span data-ttu-id="6cdc9-321">Char, Unt16 Int16, UInt32, Int32, UInt64, Int64, pojedynczy Double</span><span class="sxs-lookup"><span data-stu-id="6cdc9-321">Char, Unt16, Int16, UInt32, Int32, UInt64, Int64, Single, Double</span></span>|  
|<span data-ttu-id="6cdc9-322">SByte</span><span class="sxs-lookup"><span data-stu-id="6cdc9-322">SByte</span></span>|<span data-ttu-id="6cdc9-323">Int16, Int32, Int64, pojedynczy Double</span><span class="sxs-lookup"><span data-stu-id="6cdc9-323">Int16, Int32, Int64, Single, Double</span></span>|  
|<span data-ttu-id="6cdc9-324">UInt16</span><span class="sxs-lookup"><span data-stu-id="6cdc9-324">UInt16</span></span>|<span data-ttu-id="6cdc9-325">UInt32, Int32, UInt64, Int64, pojedynczy Double</span><span class="sxs-lookup"><span data-stu-id="6cdc9-325">UInt32, Int32, UInt64, Int64, Single, Double</span></span>|  
|<span data-ttu-id="6cdc9-326">Int16</span><span class="sxs-lookup"><span data-stu-id="6cdc9-326">Int16</span></span>|<span data-ttu-id="6cdc9-327">Int32, Int64, pojedynczy Double</span><span class="sxs-lookup"><span data-stu-id="6cdc9-327">Int32, Int64, Single, Double</span></span>|  
|<span data-ttu-id="6cdc9-328">UInt32</span><span class="sxs-lookup"><span data-stu-id="6cdc9-328">UInt32</span></span>|<span data-ttu-id="6cdc9-329">UInt64, Int64, pojedynczy Double</span><span class="sxs-lookup"><span data-stu-id="6cdc9-329">UInt64, Int64, Single, Double</span></span>|  
|<span data-ttu-id="6cdc9-330">Int32</span><span class="sxs-lookup"><span data-stu-id="6cdc9-330">Int32</span></span>|<span data-ttu-id="6cdc9-331">Int64, jeden dwukrotnie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-331">Int64, Single, Double</span></span>|  
|<span data-ttu-id="6cdc9-332">UInt64</span><span class="sxs-lookup"><span data-stu-id="6cdc9-332">UInt64</span></span>|<span data-ttu-id="6cdc9-333">Pojedynczy Double</span><span class="sxs-lookup"><span data-stu-id="6cdc9-333">Single, Double</span></span>|  
|<span data-ttu-id="6cdc9-334">Int64</span><span class="sxs-lookup"><span data-stu-id="6cdc9-334">Int64</span></span>|<span data-ttu-id="6cdc9-335">Pojedynczy Double</span><span class="sxs-lookup"><span data-stu-id="6cdc9-335">Single, Double</span></span>|  
|<span data-ttu-id="6cdc9-336">Single</span><span class="sxs-lookup"><span data-stu-id="6cdc9-336">Single</span></span>|<span data-ttu-id="6cdc9-337">Double</span><span class="sxs-lookup"><span data-stu-id="6cdc9-337">Double</span></span>|  
|<span data-ttu-id="6cdc9-338">Non-reference</span><span class="sxs-lookup"><span data-stu-id="6cdc9-338">Non-reference</span></span>|<span data-ttu-id="6cdc9-339">Przez odwołanie.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-339">By-reference.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-340">Poniższy przykład pobiera domyślnego integratora z `DefaultBinder` właściwości i wywołuje członka MyClass przez przekazanie `DefaultBinder` wartość jako parametr do <xref:System.Type.InvokeMember%2A>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-340">The following example gets the default binder from the `DefaultBinder` property, and invokes a member of MyClass by passing the `DefaultBinder` value as a parameter to <xref:System.Type.InvokeMember%2A>.</span></span>  
  
 [!code-cpp[Type_DefaultBinder#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_DefaultBinder/CPP/type_defaultbinder.cpp#1)]
 [!code-csharp[Type_DefaultBinder#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_DefaultBinder/CS/type_defaultbinder.cs#1)]
 [!code-vb[Type_DefaultBinder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_DefaultBinder/VB/type_defaultbinder.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.Binder" />
      </Docs>
    </Member>
    <Member MemberName="Delimiter">
      <MemberSignature Language="C#" Value="public static readonly char Delimiter;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly char Delimiter" />
      <MemberSignature Language="DocId" Value="F:System.Type.Delimiter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Delimiter As Char " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly char Delimiter;" />
      <MemberSignature Language="F#" Value=" staticval mutable Delimiter : char" Usage="System.Type.Delimiter" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-341">Oddziela nazwy w przestrzeni nazw <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-341">Separates names in the namespace of the <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="6cdc9-342">To pole jest tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-342">This field is read-only.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EmptyTypes">
      <MemberSignature Language="C#" Value="public static readonly Type[] EmptyTypes;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Type[] EmptyTypes" />
      <MemberSignature Language="DocId" Value="F:System.Type.EmptyTypes" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly EmptyTypes As Type() " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly cli::array &lt;Type ^&gt; ^ EmptyTypes;" />
      <MemberSignature Language="F#" Value=" staticval mutable EmptyTypes : Type[]" Usage="System.Type.EmptyTypes" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-343">Reprezentuje pustą tablicę typu <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-343">Represents an empty array of type <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="6cdc9-344">To pole jest tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-344">This field is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6cdc9-345">Poniższy kod przedstawia przykład `EmptyTypes` pole używane w jednym z `GetConstructor` metody w celu uzyskania konstruktora, który nie przyjmuje żadnych parametrów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-345">The following code example shows the `EmptyTypes` field used in one of the `GetConstructor` methods to get a constructor that takes no parameters.</span></span>  
  
 [!code-cpp[Classic Type.EmptyTypes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.EmptyTypes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.EmptyTypes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.EmptyTypes Example/CS/source.cs#1)]
 [!code-vb[Classic Type.EmptyTypes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.EmptyTypes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-346">Określa, czy typ podstawowy system bieżącego <see cref="T:System.Type" /> jest taka sama jak system typem podstawowym określonego <see cref="T:System.Object" /> lub <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-346">Determines if the underlying system type of the current <see cref="T:System.Type" /> is the same as the underlying system type of the specified <see cref="T:System.Object" /> or <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="type.Equals o" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.Equals(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">
          <span data-ttu-id="6cdc9-347">Obiektu, którego podstawowym typem systemu jest ma zostać porównane z podstawowym typem systemu bieżącego <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-347">The object whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="6cdc9-348">Porównanie zakończyło się sukcesem <c>o</c> musi być w stanie rzutowania lub przekonwertować na obiekt typu <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-348">For the comparison to succeed, <c>o</c> must be able to be cast or converted to an object of type   <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-349">Określa, czy typ podstawowy system bieżącego <see cref="T:System.Type" /> obiekt jest taki sam jak systemu typem podstawowym określonego <see cref="T:System.Object" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-349">Determines if the underlying system type of the current <see cref="T:System.Type" /> object is the same as the underlying system type of the specified <see cref="T:System.Object" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-350">
            <see langword="true" /> Jeśli typ podstawowy system <paramref name="o" /> jest taka sama jak podstawowym typem systemu bieżącego <see cref="T:System.Type" />; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-350">
              <see langword="true" /> if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="6cdc9-351">Ta metoda zwraca też wartość <see langword="false" /> przypadku:.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-351">This method also returns <see langword="false" /> if: .</span>
          </span>
          <span data-ttu-id="6cdc9-352">
-   <paramref name="o" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-352">
-   <paramref name="o" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cdc9-353">
-   <paramref name="o" /> Nie można rzutować lub przekonwertowane na <see cref="T:System.Type" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-353">
-   <paramref name="o" /> cannot be cast or converted to a <see cref="T:System.Type" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-354">Ta metoda zastępuje <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-354">This method overrides <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="6cdc9-355">Rzuca `o` do obiektu typu <xref:System.Type> i wywołuje <xref:System.Type.Equals%28System.Type%29?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-355">It casts `o` to an object of type <xref:System.Type> and calls the <xref:System.Type.Equals%28System.Type%29?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-356">W poniższym przykładzie użyto <xref:System.Type.Equals%28System.Object%29> porównywanie różnych <xref:System.Type> obiektu wystąpień z różnymi <xref:System.Object> wystąpień.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-356">The following example uses <xref:System.Type.Equals%28System.Object%29> to compare various <xref:System.Type> object instances with various <xref:System.Object> instances.</span></span>  
  
 [!code-csharp[System.Type.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Type.Equals/cs/EqualsEx1.cs#1)]
 [!code-vb[System.Type.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Type.Equals/vb/EqualsEx1.vb#1)]  
  
 <span data-ttu-id="6cdc9-357">Dwie rzeczy są szczególnie, warte odnotowania o w przykładzie:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-357">Two things are particularly worth noting about the example:</span></span>  
  
-   <span data-ttu-id="6cdc9-358">Porównanie <xref:System.Type> obiekt, który reprezentuje liczbę całkowitą z <xref:System.Reflection.TypeInfo> obiekt, który reprezentuje liczbę całkowitą zwracany `true` ponieważ <xref:System.Reflection.TypeInfo> jest tworzony na podstawie <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-358">The comparison of a <xref:System.Type> object that represents an integer with a <xref:System.Reflection.TypeInfo> object that represents an integer return `true` because <xref:System.Reflection.TypeInfo> is derived from <xref:System.Type>.</span></span>  
  
-   <span data-ttu-id="6cdc9-359">Porównanie <xref:System.Type> obiekt, który reprezentuje <xref:System.Collections.Generic.IList%601> obiektu (otwartym typem ogólnym) z `List(Of String)` (zamknięty typ rodzajowy) zwraca `false`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-359">The comparison of a  <xref:System.Type> object that represents a <xref:System.Collections.Generic.IList%601> object (an open generic type) with a `List(Of String)` object (a closed generic type) returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.UnderlyingSystemType" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public virtual bool Equals (Type o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.Type o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.Equals(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Equals (o As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(Type ^ o);" />
      <MemberSignature Language="F#" Value="override this.Equals : Type -&gt; bool" Usage="type.Equals o" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.Equals(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="o">
          <span data-ttu-id="6cdc9-360">Obiektu, którego podstawowym typem systemu jest ma zostać porównane z podstawowym typem systemu bieżącego <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-360">The object whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-361">Określa, czy typ podstawowy system bieżącego <see cref="T:System.Type" /> jest taka sama jak system typem podstawowym określonego <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-361">Determines if the underlying system type of the current <see cref="T:System.Type" /> is the same as the underlying system type of the specified <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-362">
            <see langword="true" /> Jeśli typ podstawowy system <paramref name="o" /> jest taka sama jak podstawowym typem systemu bieżącego <see cref="T:System.Type" />; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-362">
              <see langword="true" /> if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6cdc9-363">W poniższym przykładzie użyto `Equals` do porównywania dwóch typów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-363">The following example uses `Equals` to compare two types.</span></span>  
  
 [!code-csharp[Classic Type.Equals1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.Equals1 Example/CS/source.cs#1)]
 [!code-vb[Classic Type.Equals1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.Equals1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.UnderlyingSystemType" />
      </Docs>
    </Member>
    <Member MemberName="FilterAttribute">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.MemberFilter FilterAttribute;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Reflection.MemberFilter FilterAttribute" />
      <MemberSignature Language="DocId" Value="F:System.Type.FilterAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FilterAttribute As MemberFilter " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::MemberFilter ^ FilterAttribute;" />
      <MemberSignature Language="F#" Value=" staticval mutable FilterAttribute : System.Reflection.MemberFilter" Usage="System.Type.FilterAttribute" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-364">Reprezentuje filtr elementu członkowskiego, używane dla atrybutów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-364">Represents the member filter used on attributes.</span>
          </span>
          <span data-ttu-id="6cdc9-365">To pole jest tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-365">This field is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-366">To pole zawiera odwołanie do delegata używany przez <xref:System.Type.FindMembers%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-366">This field holds a reference to the delegate used by the <xref:System.Type.FindMembers%2A> method.</span></span> <span data-ttu-id="6cdc9-367">Metoda zamknięte przez ten delegat przyjmuje dwa parametry: pierwszy to <xref:System.Reflection.MemberInfo> obiektu, a drugi jest `Object`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-367">The method encapsulated by this delegate takes two parameters: the first is a <xref:System.Reflection.MemberInfo> object and the second is an `Object`.</span></span> <span data-ttu-id="6cdc9-368">Metoda określa, czy `MemberInfo` obiektu spełniający kryteria określone przez `Object`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-368">The method determines whether the `MemberInfo` object matches the criteria specified by the `Object`.</span></span> <span data-ttu-id="6cdc9-369">`Object` Może mieć przypisaną taką wartość jednego pola na klasy <xref:System.Reflection.FieldAttributes>, <xref:System.Reflection.MethodAttributes>, lub <xref:System.Reflection.MethodImplAttributes>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-369">The `Object` may be assigned the value of any one of the fields on the classes <xref:System.Reflection.FieldAttributes>, <xref:System.Reflection.MethodAttributes>, or <xref:System.Reflection.MethodImplAttributes>.</span></span>  
  
 <span data-ttu-id="6cdc9-370">Na przykład `Object` można przypisać wartości pola z `FieldAttributes` takim jak Public.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-370">For example, the `Object` can be assigned the value of a field from `FieldAttributes` such as Public.</span></span> <span data-ttu-id="6cdc9-371">W takiej sytuacji, gdy `FilterAttribute` obiekt delegowany jest wywoływany, zwróci `true` tylko wtedy, gdy metoda jest reprezentowany przez `MemberInfo` obiektu zostanie nadany atrybut publiczne pole w metadanych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-371">In that case, when the `FilterAttribute` delegate is invoked, it will return `true` only if the method represented by the `MemberInfo` object is decorated with the public field attribute in metadata.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-372">Poniższy przykład pobiera `FilterAttribute` delegować, przekazuje go jako parametr do <xref:System.Type.FindMembers%2A> metodę i wyświetla określonych elementów i ich atrybutów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-372">The following example gets the `FilterAttribute` delegate, passes it as a parameter to the <xref:System.Type.FindMembers%2A> method, and displays the specified members and their attributes.</span></span>  
  
 [!code-cpp[Type_FilterAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_FilterAttribute/CPP/type_filterattribute.cpp#1)]
 [!code-csharp[Type_FilterAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_FilterAttribute/CS/type_filterattribute.cs#1)]
 [!code-vb[Type_FilterAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_FilterAttribute/VB/type_filterattribute.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
        <altmember cref="T:System.Reflection.MemberFilter" />
      </Docs>
    </Member>
    <Member MemberName="FilterName">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.MemberFilter FilterName;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Reflection.MemberFilter FilterName" />
      <MemberSignature Language="DocId" Value="F:System.Type.FilterName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FilterName As MemberFilter " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::MemberFilter ^ FilterName;" />
      <MemberSignature Language="F#" Value=" staticval mutable FilterName : System.Reflection.MemberFilter" Usage="System.Type.FilterName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-373">Reprezentuje filtr Członek uwzględniana wielkość liter, używane w nazwach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-373">Represents the case-sensitive member filter used on names.</span>
          </span>
          <span data-ttu-id="6cdc9-374">To pole jest tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-374">This field is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-375">To pole zawiera odwołanie do delegata używany przez <xref:System.Type.FindMembers%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-375">This field holds a reference to the delegate used by the <xref:System.Type.FindMembers%2A> method.</span></span> <span data-ttu-id="6cdc9-376">Metoda zamknięte przez ten delegat przyjmuje dwa parametry: pierwszy to <xref:System.Reflection.MemberInfo> obiektu, a drugi jest `Object`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-376">The method encapsulated by this delegate takes two parameters: the first is a <xref:System.Reflection.MemberInfo> object and the second is an `Object`.</span></span> <span data-ttu-id="6cdc9-377">Metoda określa, czy `MemberInfo` obiektu spełniający kryteria określone przez `Object`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-377">The method determines whether the `MemberInfo` object matches the criteria specified by the `Object`.</span></span> <span data-ttu-id="6cdc9-378">`Object` Jest przypisywana wartość ciągu, które mogą obejmować końcowe "\*" znak symbolu wieloznacznego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-378">The `Object` is assigned a string value, which may include a trailing "\*" wildcard character.</span></span> <span data-ttu-id="6cdc9-379">Tylko koniec ciągu dopasowanie z symbolami wieloznacznymi jest obsługiwany.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-379">Only wildcard end string matching is supported.</span></span>  
  
 <span data-ttu-id="6cdc9-380">Na przykład `Object` można przypisać wartości "Bajtów \*".</span><span class="sxs-lookup"><span data-stu-id="6cdc9-380">For example, the `Object` may be assigned the value "Byte\*".</span></span> <span data-ttu-id="6cdc9-381">W takiej sytuacji, gdy `FilterName` obiekt delegowany jest wywoływany, zwróci `true` tylko wtedy, gdy metoda jest reprezentowany przez `MemberInfo` obiekt ma nazwę rozpoczynającą się od "Bajtów".</span><span class="sxs-lookup"><span data-stu-id="6cdc9-381">In that case, when the `FilterName` delegate is invoked, it will return `true` only if the method represented by the `MemberInfo` object has a name that begins with "Byte".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-382">Poniższy przykładowy kod pobiera metody skojarzone z zdefiniowany przez użytkownika `Application` typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-382">The following code example gets the methods associated with the user-defined `Application` type.</span></span>  
  
 [!code-cpp[Classic Type.FilterName Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.FilterName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.FilterName Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.FilterName Example/CS/source.cs#1)]
 [!code-vb[Classic Type.FilterName Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.FilterName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
        <altmember cref="T:System.Reflection.MemberFilter" />
      </Docs>
    </Member>
    <Member MemberName="FilterNameIgnoreCase">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.MemberFilter FilterNameIgnoreCase;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Reflection.MemberFilter FilterNameIgnoreCase" />
      <MemberSignature Language="DocId" Value="F:System.Type.FilterNameIgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FilterNameIgnoreCase As MemberFilter " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::MemberFilter ^ FilterNameIgnoreCase;" />
      <MemberSignature Language="F#" Value=" staticval mutable FilterNameIgnoreCase : System.Reflection.MemberFilter" Usage="System.Type.FilterNameIgnoreCase" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-383">Reprezentuje filtr Członek bez uwzględniania wielkości liter, używane w nazwach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-383">Represents the case-insensitive member filter used on names.</span>
          </span>
          <span data-ttu-id="6cdc9-384">To pole jest tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-384">This field is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-385">To pole zawiera odwołanie do delegata używany przez <xref:System.Type.FindMembers%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-385">This field holds a reference to the delegate used by the <xref:System.Type.FindMembers%2A> method.</span></span> <span data-ttu-id="6cdc9-386">Metoda zamknięte przez ten delegat przyjmuje dwa parametry: pierwszy to <xref:System.Reflection.MemberInfo> obiektu, a drugi jest `Object`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-386">The method encapsulated by this delegate takes two parameters: the first is a <xref:System.Reflection.MemberInfo> object and the second is an `Object`.</span></span> <span data-ttu-id="6cdc9-387">Metoda określa, czy `MemberInfo` obiektu spełniający kryteria określone przez `Object`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-387">The method determines whether the `MemberInfo` object matches the criteria specified by the `Object`.</span></span> <span data-ttu-id="6cdc9-388">`Object` Jest przypisywana wartość ciągu, które mogą obejmować końcowe "\*" znak symbolu wieloznacznego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-388">The `Object` is assigned a string value, which may include a trailing "\*" wildcard character.</span></span> <span data-ttu-id="6cdc9-389">Tylko koniec ciągu dopasowanie z symbolami wieloznacznymi jest obsługiwany.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-389">Only wildcard end string matching is supported.</span></span>  
  
 <span data-ttu-id="6cdc9-390">Na przykład `Object` można przypisać wartości "Bajtów \*".</span><span class="sxs-lookup"><span data-stu-id="6cdc9-390">For example, the `Object` may be assigned the value "ByTe\*".</span></span> <span data-ttu-id="6cdc9-391">W takiej sytuacji, gdy `FilterName` obiekt delegowany jest wywoływany, zwróci wartość true, tylko jeśli metoda jest reprezentowany przez `MemberInfo` obiekt ma nazwę rozpoczynającą się od "bajtów", bez uwzględnienia wielkości liter.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-391">In that case, when the `FilterName` delegate is invoked, it will return true only if the method represented by the `MemberInfo` object has a name that begins with "byte", ignoring case.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-392">Poniższy przykład pobiera `MemberFilter` delegować, przekazuje go jako parametr do <xref:System.Type.FindMembers%2A> metodę i wyświetla metod i ich atrybuty `String` klasy, które zaczynają się od litera "c", nie biorąc pod uwagę w przypadku.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-392">The following example gets the `MemberFilter` delegate, passes it as a parameter to the <xref:System.Type.FindMembers%2A> method, and displays the methods and their attributes of the `String` class that begin with the letter "c", disregarding the case.</span></span>  
  
 [!code-cpp[Type_FilterNameIgnoreCase#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_FilterNameIgnoreCase/CPP/type_filternameignorecase.cpp#1)]
 [!code-csharp[Type_FilterNameIgnoreCase#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_FilterNameIgnoreCase/CS/type_filternameignorecase.cs#1)]
 [!code-vb[Type_FilterNameIgnoreCase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_FilterNameIgnoreCase/VB/type_filternameignorecase.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
        <altmember cref="T:System.Reflection.MemberFilter" />
      </Docs>
    </Member>
    <Member MemberName="FindInterfaces">
      <MemberSignature Language="C#" Value="public virtual Type[] FindInterfaces (System.Reflection.TypeFilter filter, object filterCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] FindInterfaces(class System.Reflection.TypeFilter filter, object filterCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindInterfaces (filter As TypeFilter, filterCriteria As Object) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ FindInterfaces(System::Reflection::TypeFilter ^ filter, System::Object ^ filterCriteria);" />
      <MemberSignature Language="F#" Value="abstract member FindInterfaces : System.Reflection.TypeFilter * obj -&gt; Type[]&#xA;override this.FindInterfaces : System.Reflection.TypeFilter * obj -&gt; Type[]" Usage="type.FindInterfaces (filter, filterCriteria)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.Reflection.TypeFilter" />
        <Parameter Name="filterCriteria" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="filter">
          <span data-ttu-id="6cdc9-393">Delegat, który porównuje interfejsów względem <c>filterCriteria</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-393">The delegate that compares the interfaces against <c>filterCriteria</c>.</span>
          </span>
        </param>
        <param name="filterCriteria">
          <span data-ttu-id="6cdc9-394">Kryteria wyszukiwania, które określa, czy interfejs powinny być objęte zwróconej tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-394">The search criteria that determines whether an interface should be included in the returned array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-395">Zwraca tablicę <see cref="T:System.Type" /> obiekty reprezentujące filtrowana lista interfejsy implementowane lub jest dziedziczona przez bieżący <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-395">Returns an array of <see cref="T:System.Type" /> objects representing a filtered list of interfaces implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-396">Tablica <see cref="T:System.Type" /> obiekty reprezentujące filtrowana lista interfejsy implementowane lub jest dziedziczona przez bieżący <see cref="T:System.Type" />, lub pusta tablica typu <see cref="T:System.Type" /> Jeśli interfejsy nie jest zgodny z filtrem nie są implementowane lub dziedziczone przez bieżącą <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-396">An array of <see cref="T:System.Type" /> objects representing a filtered list of the interfaces implemented or inherited by the current <see cref="T:System.Type" />, or an empty array of type <see cref="T:System.Type" /> if no interfaces matching the filter are implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-397">Metoda ta może być zastąpiona przez klasę pochodną.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-397">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="6cdc9-398"><xref:System.Reflection.Module.FilterTypeName?displayProperty=nameWithType> i <xref:System.Reflection.Module.FilterTypeNameIgnoreCase?displayProperty=nameWithType> delegatów dostarczonych przez <xref:System.Reflection.Module?displayProperty=nameWithType> klasy może być również, w miejsce <xref:System.Reflection.TypeFilter?displayProperty=nameWithType> delegować.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-398">The <xref:System.Reflection.Module.FilterTypeName?displayProperty=nameWithType> and <xref:System.Reflection.Module.FilterTypeNameIgnoreCase?displayProperty=nameWithType> delegates supplied by the <xref:System.Reflection.Module?displayProperty=nameWithType> class may also be used, in lieu of the <xref:System.Reflection.TypeFilter?displayProperty=nameWithType> delegate.</span></span>  
  
 <span data-ttu-id="6cdc9-399">Wszystkie interfejsy implementowane przez tę klasę są traktowane jako podczas wyszukiwania, czy podana przez klasę bazową lub tej samej klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-399">All of the interfaces implemented by this class are considered during the search, whether declared by a base class or this class itself.</span></span>  
  
 <span data-ttu-id="6cdc9-400">Metoda ta wyszukuje w hierarchii klasy bazowej, zwracanie wszystkich zgodnych interfejsów, każda klasa implementuje, a także wszystkie zgodne każdego z tych interfejsów implementuje interfejsy (oznacza to, zwracana jest przechodnia zamknięcia zgodnych interfejsów).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-400">This method searches the base class hierarchy, returning each of the matching interfaces each class implements as well as all the matching interfaces each of those interfaces implements (that is, the transitive closure of the matching interfaces is returned).</span></span> <span data-ttu-id="6cdc9-401">Brak interfejsów zduplikowane są zwracane.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-401">No duplicate interfaces are returned.</span></span>  
  
 <span data-ttu-id="6cdc9-402">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, <xref:System.Type.FindInterfaces%2A> wyszukiwanie wszystkich interfejsów zadeklarowanych w ograniczenia dla parametru typu, a wszystkie interfejsy dziedziczone za pośrednictwem interfejsów zadeklarowana w ograniczenia.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-402">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, <xref:System.Type.FindInterfaces%2A> searches all the interfaces declared in the constraints on the type parameter, and all interfaces inherited through the interfaces declared in the constraints.</span></span> <span data-ttu-id="6cdc9-403">Jeśli bieżący <xref:System.Type> reprezentuje typ ogólny, argument typu <xref:System.Type.FindInterfaces%2A> wyszukuje wszystkie interfejsy implementowane przez ten typ, czy też nie są zgodne z ograniczeniami.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-403">If the current <xref:System.Type> represents a type argument of a generic type, <xref:System.Type.FindInterfaces%2A> searches all the interfaces implemented by the type, whether or not they match constraints.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-404"><xref:System.Type.FindInterfaces%2A> może zwracać interfejsów ogólnych, nawet w przypadku typów, które nie są rodzajowe.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-404"><xref:System.Type.FindInterfaces%2A> can return generic interfaces, even on types that are not generic.</span></span> <span data-ttu-id="6cdc9-405">Na przykład nierodzajowymi typ może implementować `IEnumerable<int>` (`IEnumerable(Of Integer)` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-405">For example, a nongeneric type might implement `IEnumerable<int>` (`IEnumerable(Of Integer)` in Visual Basic).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-406">Poniższy przykład umożliwia znalezienie określonego interfejsu implementowany lub dziedziczone przez określonego typu, a następnie wyświetla nazwy interfejsu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-406">The following example finds the specified interface implemented or inherited by the specified type, and then displays the interface names.</span></span>  
  
 [!code-cpp[Type_FindInterfaces#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_FindInterfaces/CPP/type_findinterfaces.cpp#1)]
 [!code-csharp[Type_FindInterfaces#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_FindInterfaces/CS/type_findinterfaces.cs#1)]
 [!code-vb[Type_FindInterfaces#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_FindInterfaces/VB/type_findinterfaces.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-407">
            <paramref name="filter" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-407">
              <paramref name="filter" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="6cdc9-408">Statycznego inicjatora jest wywoływany i zgłasza wyjątek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-408">A static initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.Module" />
        <altmember cref="T:System.Reflection.TypeFilter" />
        <altmember cref="M:System.Type.GetInterface(System.String)" />
        <altmember cref="M:System.Type.GetInterfaces" />
      </Docs>
    </Member>
    <Member MemberName="FindMembers">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MemberInfo[] FindMembers (System.Reflection.MemberTypes memberType, System.Reflection.BindingFlags bindingAttr, System.Reflection.MemberFilter filter, object filterCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] FindMembers(valuetype System.Reflection.MemberTypes memberType, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.MemberFilter filter, object filterCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindMembers (memberType As MemberTypes, bindingAttr As BindingFlags, filter As MemberFilter, filterCriteria As Object) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ FindMembers(System::Reflection::MemberTypes memberType, System::Reflection::BindingFlags bindingAttr, System::Reflection::MemberFilter ^ filter, System::Object ^ filterCriteria);" />
      <MemberSignature Language="F#" Value="abstract member FindMembers : System.Reflection.MemberTypes * System.Reflection.BindingFlags * System.Reflection.MemberFilter * obj -&gt; System.Reflection.MemberInfo[]&#xA;override this.FindMembers : System.Reflection.MemberTypes * System.Reflection.BindingFlags * System.Reflection.MemberFilter * obj -&gt; System.Reflection.MemberInfo[]" Usage="type.FindMembers (memberType, bindingAttr, filter, filterCriteria)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberType" Type="System.Reflection.MemberTypes" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="filter" Type="System.Reflection.MemberFilter" />
        <Parameter Name="filterCriteria" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="memberType">
          <span data-ttu-id="6cdc9-409">Obiekt, który określa typ elementu członkowskiego do wyszukania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-409">An object that indicates the type of member to search for.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="6cdc9-410">Maska bitów składająca się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-410">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="6cdc9-411">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-411">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-412">Zero, aby zwrócić <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-412">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="filter">
          <span data-ttu-id="6cdc9-413">Delegat, który wykonuje porównania, zwracając <see langword="true" /> elementu członkowskiego aktualnie inspekcji dopasowania <c>filterCriteria</c> i <see langword="false" /> inaczej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-413">The delegate that does the comparisons, returning <see langword="true" /> if the member currently being inspected matches the <c>filterCriteria</c> and <see langword="false" /> otherwise.</span>
          </span>
          <span data-ttu-id="6cdc9-414">Możesz użyć <see langword="FilterAttribute" />, <see langword="FilterName" />, i <see langword="FilterNameIgnoreCase" /> delegatów, dostarczone przez tę klasę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-414">You can use the <see langword="FilterAttribute" />, <see langword="FilterName" />, and <see langword="FilterNameIgnoreCase" /> delegates supplied by this class.</span>
          </span>
          <span data-ttu-id="6cdc9-415">Pierwszy używa pól <see langword="FieldAttributes" />, <see langword="MethodAttributes" />, i <see langword="MethodImplAttributes" /> jako kryteria wyszukiwania, a następnie użyj dwa delegaty <see langword="String" /> obiektów jako kryterium wyszukiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-415">The first uses the fields of <see langword="FieldAttributes" />, <see langword="MethodAttributes" />, and <see langword="MethodImplAttributes" /> as search criteria, and the other two delegates use <see langword="String" /> objects as the search criteria.</span>
          </span>
        </param>
        <param name="filterCriteria">
          <span data-ttu-id="6cdc9-416">Kryteria wyszukiwania, które określa, czy członek jest zwracany w tablicy <see langword="MemberInfo" /> obiektów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-416">The search criteria that determines whether a member is returned in the array of <see langword="MemberInfo" /> objects.</span>
          </span>
          <span data-ttu-id="6cdc9-417">Pola <see langword="FieldAttributes" />, <see langword="MethodAttributes" />, i <see langword="MethodImplAttributes" /> mogą być używane w połączeniu z <see langword="FilterAttribute" /> delegata dostarczonych przez tę klasę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-417">The fields of <see langword="FieldAttributes" />, <see langword="MethodAttributes" />, and <see langword="MethodImplAttributes" /> can be used in conjunction with the <see langword="FilterAttribute" /> delegate supplied by this class.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-418">Zwraca tablicę filtrowane <see cref="T:System.Reflection.MemberInfo" /> obiektów typu określonego elementu członkowskiego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-418">Returns a filtered array of <see cref="T:System.Reflection.MemberInfo" /> objects of the specified member type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-419">Filtrowane tablicę <see cref="T:System.Reflection.MemberInfo" /> obiektów typu określonego elementu członkowskiego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-419">A filtered array of <see cref="T:System.Reflection.MemberInfo" /> objects of the specified member type.</span>
          </span>
          <span data-ttu-id="6cdc9-420">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-420">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-421">Pusta tablica typu <see cref="T:System.Reflection.MemberInfo" />, jeśli bieżący <see cref="T:System.Type" /> nie ma elementów członkowskich typu <paramref name="memberType" /> pasujących do kryteriów filtrowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-421">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have members of type <paramref name="memberType" /> that match the filter criteria.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-422">Metoda ta może być zastąpiona przez klasę pochodną.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-422">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="6cdc9-423">Elementy członkowskie zawierają właściwości, metody, pola, zdarzenia i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-423">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="6cdc9-424">Następujące <xref:System.Reflection.BindingFlags> flagi filtru może służyć do definiowania elementów członkowskich, które można uwzględnić w wyszukiwaniu:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-424">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="6cdc9-425">Należy określić `BindingFlags.Instance` lub `BindingFlags.Static` w celu uzyskania zwrotu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-425">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="6cdc9-426">Określ `BindingFlags.Instance` obejmujący składowych wystąpienia w wyszukiwaniu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-426">Specify `BindingFlags.Instance` to include instance members in the search.</span></span>  
  
-   <span data-ttu-id="6cdc9-427">Określ `BindingFlags.Static` obejmujący statyczne elementy członkowskie w wyszukiwaniu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-427">Specify `BindingFlags.Static` to include static members in the search.</span></span>  
  
-   <span data-ttu-id="6cdc9-428">Określ `BindingFlags.Public` obejmujący publiczne elementy członkowskie w wyszukiwaniu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-428">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="6cdc9-429">Określ `BindingFlags.NonPublic` obejmujący elementów członkowskich niepublicznych (czyli prywatne, wewnętrzne i chronione elementy członkowskie) w wyszukiwaniu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-429">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
 <span data-ttu-id="6cdc9-430">Następujące <xref:System.Reflection.BindingFlags> flagi modyfikatora może służyć do zmiany sposobu działania wyszukiwania:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-430">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="6cdc9-431">`BindingFlags.DeclaredOnly` Aby wyszukać tylko do elementów członkowskich zadeklarowanych w <xref:System.Type>, nie elementów członkowskich, które zostały po prostu odziedziczone.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-431">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="6cdc9-432">Aby uzyskać więcej informacji, zobacz <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-432">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="6cdc9-433">Prawidłowe wartości dla <xref:System.Type.MemberType%2A> są zdefiniowane w <xref:System.Reflection.MemberInfo>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-433">Valid values for <xref:System.Type.MemberType%2A> are defined in <xref:System.Reflection.MemberInfo>.</span></span> <span data-ttu-id="6cdc9-434">Jeśli nie zostaną znalezione nie takich członków, zwracany jest pusta tablica.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-434">If no such members are found, an empty array is returned.</span></span>  
  
 <span data-ttu-id="6cdc9-435">Aby uzyskać inicjatora klasy (.cctor), za pomocą tej metody, należy określić <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-435">To get the class initializer (.cctor) using this method, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="6cdc9-436">Można również uzyskać inicjatora klasy za pomocą <xref:System.Type.TypeInitializer%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-436">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="6cdc9-437">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu ogólnego lub metody rodzajowej, <xref:System.Type.FindMembers%2A> przetwarza wszystkie elementy członkowskie zadeklarowana przez ograniczenia klasy i ograniczenia interfejsu, parametru typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-437">If the current <xref:System.Type> represents a type parameter of a generic type or generic method, <xref:System.Type.FindMembers%2A> processes any members declared by the class constraint and the interface constraints of the type parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-438">Poniższy przykład umożliwia znalezienie wszystkich elementów członkowskich w klasie, spełniających określone kryteria wyszukiwania, a następnie wyświetla dopasowane elementy członkowskie.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-438">The following example finds all the members in a class that match the specified search criteria, and then displays the matched members.</span></span>  
  
 [!code-cpp[Type_FindMembers#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_FindMembers/CPP/type_findmembers.cpp#1)]
 [!code-csharp[Type_FindMembers#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_FindMembers/CS/type_findmembers.cs#1)]
 [!code-vb[Type_FindMembers#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_FindMembers/VB/type_findmembers.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-439">
            <paramref name="filter" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-439">
              <paramref name="filter" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMember(System.String)" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public abstract string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberSignature Language="DocId" Value="P:System.Type.FullName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property FullName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ FullName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FullName : string" Usage="System.Type.FullName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.FullName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-440">Pobiera w pełni kwalifikowaną nazwę typu, łącznie z jego przestrzeń nazw, ale nie jej zestawu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-440">Gets the fully qualified name of the type, including its namespace but not its assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-441">W pełni kwalifikowaną nazwę typu, łącznie z jego przestrzeń nazw, ale nie jej zestawu; lub <see langword="null" /> Jeśli bieżące wystąpienie reprezentuje parametr typu ogólnego, typ tablicy, typ wskaźnika lub <see langword="byref" /> typu na podstawie parametru typu lub typ ogólny, który nie jest definicja typu ogólnego, ale zawiera nierozpoznany typ parametrów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-441">The fully qualified name of the type, including its namespace but not its assembly; or <see langword="null" /> if the current instance represents a generic type parameter, an array type, pointer type, or <see langword="byref" /> type based on a type parameter, or a generic type that is not a generic type definition but contains unresolved type parameters.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-442">Na przykład w pełni kwalifikowanej nazwy <xref:System.String> typ jest `System.String`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-442">For example, the fully qualified name of the <xref:System.String> type is `System.String`.</span></span> <span data-ttu-id="6cdc9-443">Natomiast to nazwą kwalifikowaną dla zestawu zwrócony przez <xref:System.Type.AssemblyQualifiedName%2A> właściwość, która składa się z pełną nazwę i nazwę pełnego zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-443">Contrast this with the assembly-qualified name returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, which consists of the full name plus the full assembly name.</span></span>  
  
 <span data-ttu-id="6cdc9-444">Jeśli bieżący typ reprezentuje zamknięty typ ogólny, argumentów typu ciąg zwracany przez <xref:System.Type.FullName%2A> właściwości są kwalifikowane według nazwy pełnego zestawu nawet reprezentację ciągu typu ogólnego, sama nie kwalifikuje się przez jego pełnej Nazwa zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-444">If the current type represents a closed generic type, the type arguments in the string returned by the <xref:System.Type.FullName%2A> property are qualified by their full assembly name, even though the string representation of the generic type itself is not qualified by its full assembly name.</span></span> <span data-ttu-id="6cdc9-445">Poniższy przykład ilustruje tę różnicę we właściwości FullName dla typu, który reprezentuje definicji typu ogólnego i taki, który reprezentuje typ ogólny, zamknięte.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-445">The following example illustrates the difference in the FullName property for a type that represents generic type definition and one that represents a closed generic type.</span></span>  
  
 [!code-csharp[System.Type.FullName#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.fullname/cs/fullnameex1.cs#2)]
 [!code-vb[System.Type.FullName#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.fullname/vb/fullnameex1.vb#2)]  
  
 <span data-ttu-id="6cdc9-446">Ta właściwość zwraca `null` jeśli:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-446">This property returns `null` if:</span></span>  
  
-   <span data-ttu-id="6cdc9-447">Bieżący <xref:System.Type> obiekt reprezentuje parametr typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-447">The current <xref:System.Type> object represents a type parameter of a generic type.</span></span>  
  
     <span data-ttu-id="6cdc9-448">Poniższy przykład pobiera parametr typu <xref:System.Nullable%601> typu i próbuje wyświetlić jego <xref:System.Type.FullName%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-448">The following example retrieves the type parameter of the <xref:System.Nullable%601> type and attempts to display its <xref:System.Type.FullName%2A> property.</span></span>  
  
     [!code-csharp[System.Type.FullName#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.fullname/cs/Fullname3.cs#3)]
     [!code-vb[System.Type.FullName#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.fullname/vb/Fullname3.vb#3)]  
  
-   <span data-ttu-id="6cdc9-449">Bieżący <xref:System.Type> obiekt reprezentuje typ tablicy, typem wskaźnika lub `byref` typ, który jest oparty na parametr typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-449">The current <xref:System.Type> object represents an array type, a pointer  type, or a `byref` type that is based on a generic type parameter.</span></span>  
  
     <span data-ttu-id="6cdc9-450">W poniższym przykładzie zdefiniowano typ ogólny, `Generictype1<T>`, za pomocą trzech metod: `Display(T[])`, która jest przekazywana tablicę typu T; `HandleT(T)`, który jest przekazywany obiekt T; a `ChangeValue(ref T)`, który jest przekazywany obiekt T przez odwołanie.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-450">The following example defines a generic type, `Generictype1<T>`, with three methods: `Display(T[])`, which is passed an array of type T; `HandleT(T)`, which is passed a T object; and `ChangeValue(ref T)`, which is passed a T object by reference.</span></span> <span data-ttu-id="6cdc9-451">Ponieważ języka C# i Visual Basic nie pozwalają nam T jest definiowana jako wskaźnik w `HandleT` metody, konieczne jest wywołanie <xref:System.Type.MakePointerType%2A> metody <xref:System.Type> obiekt, który reprezentuje typ parametru metody, aby utworzyć wskaźnik do typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-451">Because C# and Visual Basic do not allow us to define T as a pointer in the `HandleT` method, we have to call the <xref:System.Type.MakePointerType%2A> method on the <xref:System.Type> object that represents the method's parameter type to create a pointer to a generic type.</span></span> <span data-ttu-id="6cdc9-452">Dane wyjściowe z przykładu pokazuje, że we wszystkich trzech przypadkach <xref:System.Type.FullName%2A> właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-452">The output from the example shows that in all three cases, the <xref:System.Type.FullName%2A> property is `null`.</span></span>  
  
     [!code-csharp[System.Type.FullName#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.fullname/cs/Fullname4.cs#4)]
     [!code-vb[System.Type.FullName#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.fullname/vb/FullName4.vb#4)]  
  
-   <span data-ttu-id="6cdc9-453">Bieżący typ zawiera parametry typu ogólnego, które nie zostały zastąpione przez określone typy (oznacza to, <xref:System.Type.ContainsGenericParameters%2A> właściwość zwraca `true`), ale nie jest to typ definicji typu ogólnego (oznacza to, że <xref:System.Type.IsGenericTypeDefinition%2A> zwraca właściwości `false`</span><span class="sxs-lookup"><span data-stu-id="6cdc9-453">The current type contains generic type parameters that have not been replaced by specific types (that is, the <xref:System.Type.ContainsGenericParameters%2A> property returns `true`), but the type is not a generic type definition (that is, the <xref:System.Type.IsGenericTypeDefinition%2A> property returns `false`</span></span>  
  
     <span data-ttu-id="6cdc9-454">W poniższym przykładzie `Derived<T>` dziedziczy `Base<T>`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-454">In the following example, `Derived<T>` inherits from `Base<T>`.</span></span> <span data-ttu-id="6cdc9-455"><xref:System.Type.BaseType%2A> Uzyskuje właściwość <xref:System.Type> obiekt, który reprezentuje typ podstawowy elementu `Derived<T>`, a jego <xref:System.Type.FullName%2A> właściwość zwraca `null`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-455">The <xref:System.Type.BaseType%2A> property obtains the  <xref:System.Type> object that represents the base type of `Derived<T>`, and its <xref:System.Type.FullName%2A> property returns `null`.</span></span>  
  
     [!code-csharp[System.Type.FullName#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.fullname/cs/Fullname5.cs#5)]
     [!code-vb[System.Type.FullName#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.fullname/vb/FullName5.vb#5)]  
  
     <span data-ttu-id="6cdc9-456">Aby uzyskać <xref:System.Type.FullName%2A> , który nie jest `null`, możesz użyć <xref:System.Type.GetGenericTypeDefinition%2A> metodę, aby uzyskać definicji typu ogólnego, tak jak pokazano w przykładzie.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-456">To get a <xref:System.Type.FullName%2A> that is not `null`, you can use the <xref:System.Type.GetGenericTypeDefinition%2A> method to get the generic type definition, as the example illustrates.</span></span>  
  
 <span data-ttu-id="6cdc9-457">Ta właściwość jest tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-457">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-458">Poniższy przykład Wyświetla pełną nazwę określonego typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-458">The following example displays the full name of the specified type.</span></span>  
  
 [!code-cpp[TestFullName#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestFullName/CPP/TestFullName.cpp#1)]
 [!code-csharp[TestFullName#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestFullName/CS/testfullname.cs#1)]
 [!code-vb[TestFullName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestFullName/VB/testfullname.vb#1)]  
  
 <span data-ttu-id="6cdc9-459">W poniższym przykładzie porównano ciągów zwracanych przez <xref:System.Type.ToString%2A> metody i `Name`, <xref:System.Type.FullName%2A>, i <xref:System.Type.AssemblyQualifiedName%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-459">The following example compares the strings returned by the <xref:System.Type.ToString%2A> method and the `Name`, <xref:System.Type.FullName%2A>, and <xref:System.Type.AssemblyQualifiedName%2A> properties.</span></span>  
  
 [!code-csharp[System.Type.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.tostring/cs/fullname1.cs#1)]
 [!code-vb[System.Type.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.tostring/vb/fullname1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.Namespace" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="T:System.Reflection.AssemblyName" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md">
          <span data-ttu-id="6cdc9-460">Określanie w pełni kwalifikowanych nazw typów</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-460">Specifying Fully Qualified Type Names</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GenericParameterAttributes">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.GenericParameterAttributes GenericParameterAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.GenericParameterAttributes GenericParameterAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Type.GenericParameterAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property GenericParameterAttributes As GenericParameterAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::GenericParameterAttributes GenericParameterAttributes { System::Reflection::GenericParameterAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.GenericParameterAttributes : System.Reflection.GenericParameterAttributes" Usage="System.Type.GenericParameterAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.GenericParameterAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-461">Pobiera kombinacji <see cref="T:System.Reflection.GenericParameterAttributes" /> flagi opisujące kowariancji i ograniczeń specjalnych bieżącego parametru typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-461">Gets a combination of <see cref="T:System.Reflection.GenericParameterAttributes" /> flags that describe the covariance and special constraints of the current generic type parameter.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-462">Bitowa kombinacja <see cref="T:System.Reflection.GenericParameterAttributes" /> wartości, które opisano kowariancji i ograniczeń specjalnych bieżącego parametru typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-462">A bitwise combination of <see cref="T:System.Reflection.GenericParameterAttributes" /> values that describes the covariance and special constraints of the current generic type parameter.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-463">Wartość tej właściwości zawiera flagi, które opisują, czy bieżący parametr typu ogólnego jest kowariantny i flagi opisujące żadnych szczególnych ograniczeń.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-463">The value of this property contains flags that describe whether the current generic type parameter is covariant, and flags that describe any special constraints.</span></span> <span data-ttu-id="6cdc9-464">Użyj <xref:System.Reflection.GenericParameterAttributes.VarianceMask?displayProperty=nameWithType> wartość, aby wybrać flagi Kowariancja, a następnie użyj <xref:System.Reflection.GenericParameterAttributes.SpecialConstraintMask?displayProperty=nameWithType> wartość, aby wybrać flagi ograniczenia.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-464">Use the <xref:System.Reflection.GenericParameterAttributes.VarianceMask?displayProperty=nameWithType> value to select the covariance flags, and use the <xref:System.Reflection.GenericParameterAttributes.SpecialConstraintMask?displayProperty=nameWithType> value to select the constraint flags.</span></span>  
  
 <span data-ttu-id="6cdc9-465">Aby uzyskać listę niezmiennych warunków dla terminów używanych w odbiciu rodzajowym, zobacz <xref:System.Type.IsGenericType%2A> uwagi dotyczące właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-465">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-466">Poniższy kod definiuje typ ogólny `Test` z dwoma parametrami typu, które mają z nią związane inne ograniczenia.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-466">The following code example defines a generic type `Test` with two type parameters that have different constraints.</span></span> <span data-ttu-id="6cdc9-467">Gdy program będzie działać, ograniczenia są sprawdzane przy użyciu <xref:System.Type.GenericParameterAttributes%2A> właściwości i <xref:System.Type.GetGenericParameterConstraints%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-467">When the program executes, the constraints are examined using the <xref:System.Type.GenericParameterAttributes%2A> property and the <xref:System.Type.GetGenericParameterConstraints%2A> method.</span></span>  
  
 [!code-cpp[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/CPP/source.cpp#1)]
 [!code-csharp[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/CS/source.cs#1)]
 [!code-vb[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6cdc9-468">Bieżący <see cref="T:System.Type" /> obiektu nie jest parametrem typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-468">The current <see cref="T:System.Type" /> object is not a generic type parameter.</span>
          </span>
          <span data-ttu-id="6cdc9-469">Oznacza to, że <see cref="P:System.Type.IsGenericParameter" /> właściwość zwraca <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-469">That is, the <see cref="P:System.Type.IsGenericParameter" /> property returns <see langword="false" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="6cdc9-470">Wywoływana metoda nie jest obsługiwana w klasie bazowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-470">The invoked method is not supported in the base class.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.GetGenericParameterConstraints" />
        <altmember cref="P:System.Type.IsGenericParameter" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md">
          <span data-ttu-id="6cdc9-471">Odbicie i typy ogólne</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-471">Reflection and Generic Types</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md">
          <span data-ttu-id="6cdc9-472">Porady: zbadanie i tworzenie wystąpień typów ogólnych za pomocą odbicia</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-472">How to: Examine and Instantiate Generic Types with Reflection</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GenericParameterPosition">
      <MemberSignature Language="C#" Value="public virtual int GenericParameterPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 GenericParameterPosition" />
      <MemberSignature Language="DocId" Value="P:System.Type.GenericParameterPosition" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property GenericParameterPosition As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int GenericParameterPosition { int get(); };" />
      <MemberSignature Language="F#" Value="member this.GenericParameterPosition : int" Usage="System.Type.GenericParameterPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-473">Pobiera pozycję parametr typu na liście parametrów typu ogólnego typu lub metody, który zadeklarowany parametr, gdy <see cref="T:System.Type" /> obiekt reprezentuje parametr typu ogólnego lub metody rodzajowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-473">Gets the position of the type parameter in the type parameter list of the generic type or method that declared the parameter, when the <see cref="T:System.Type" /> object represents a type parameter of a generic type or a generic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-474">Pozycja parametru typu na liście parametrów typu dla typu ogólnego lub metody, która definiuje parametru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-474">The position of a type parameter in the type parameter list of the generic type or method that defines the parameter.</span>
          </span>
          <span data-ttu-id="6cdc9-475">Rozpocznij Pozycja cyfry od 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-475">Position numbers begin at 0.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-476"><xref:System.Type.GenericParameterPosition%2A> Właściwość zwraca pozycja parametru typu na liście parametrów w definicji typu ogólnego lub metody rodzajowej definicji gdzie parametr typu została pierwotnie zdefiniowana.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-476">The <xref:System.Type.GenericParameterPosition%2A> property returns the position of a type parameter in the parameter list of the generic type definition or generic method definition where the type parameter was originally defined.</span></span> <span data-ttu-id="6cdc9-477"><xref:System.Type.DeclaringType%2A> i <xref:System.Type.DeclaringMethod%2A> właściwości określania ogólnego definicji typu lub metody:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-477">The <xref:System.Type.DeclaringType%2A> and <xref:System.Type.DeclaringMethod%2A> properties identify the generic type or method definition:</span></span>  
  
-   <span data-ttu-id="6cdc9-478">Jeśli <xref:System.Type.DeclaringMethod%2A> właściwość zwraca <xref:System.Reflection.MethodInfo>, które <xref:System.Reflection.MethodInfo> reprezentuje definicję metody rodzajowej, a bieżący <xref:System.Type> obiekt reprezentuje parametr typu tej definicji metody rodzajowej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-478">If the <xref:System.Type.DeclaringMethod%2A> property returns a <xref:System.Reflection.MethodInfo>, that <xref:System.Reflection.MethodInfo> represents a generic method definition, and the current <xref:System.Type> object represents a type parameter of that generic method definition.</span></span>  
  
-   <span data-ttu-id="6cdc9-479">Jeśli <xref:System.Type.DeclaringMethod%2A> właściwość zwraca `null`, a następnie <xref:System.Type.DeclaringType%2A> właściwość zawsze zwraca <xref:System.Type> obiekt reprezentujący definicji typu ogólnego i bieżący <xref:System.Type> obiekt reprezentuje parametr typu ogólnego typu Definicja.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-479">If the <xref:System.Type.DeclaringMethod%2A> property returns `null`, then the <xref:System.Type.DeclaringType%2A> property always returns a <xref:System.Type> object representing a generic type definition, and the current <xref:System.Type> object represents a type parameter of that generic type definition.</span></span>  
  
 <span data-ttu-id="6cdc9-480">Aby zapewnić poprawny kontekst dla wartości <xref:System.Type.GenericParameterPosition%2A> właściwości jest niezbędne do identyfikowania typu ogólnego lub metody z parametrem typu, o których należy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-480">To provide the correct context for the value of the <xref:System.Type.GenericParameterPosition%2A> property, it is necessary to identify the generic type or method a type parameter belongs to.</span></span> <span data-ttu-id="6cdc9-481">Rozważmy na przykład wartość zwracaną metody ogólnej `GetSomething` w poniższym kodzie:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-481">For example, consider the return value of the generic method `GetSomething` in the following code:</span></span>  
  
 [!code-cpp[System.Type.GenericParameterPosition#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.genericparameterposition/cpp/remarks.cpp#1)]
 [!code-csharp[System.Type.GenericParameterPosition#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.genericparameterposition/cs/remarks.cs#1)]
 [!code-vb[System.Type.GenericParameterPosition#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.genericparameterposition/vb/remarks.vb#1)]  
  
 <span data-ttu-id="6cdc9-482">Typ zwracany przez `GetSomething` zależy od argumentów typu przekazana do klasy `A` i `GetSomething` sam.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-482">The type returned by `GetSomething` depends on the type arguments supplied to class `A` and to `GetSomething` itself.</span></span> <span data-ttu-id="6cdc9-483">Możesz uzyskać <xref:System.Reflection.MethodInfo> dla `GetSomething`, i przy jego użyciu można uzyskać typ zwracany.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-483">You can obtain a <xref:System.Reflection.MethodInfo> for `GetSomething`, and from that you can obtain the return type.</span></span> <span data-ttu-id="6cdc9-484">Podczas badania parametrów typu zwracanego typu <xref:System.Type.GenericParameterPosition%2A> zwraca wartość 0 dla obu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-484">When you examine the type parameters of the return type, <xref:System.Type.GenericParameterPosition%2A> returns 0 for both.</span></span> <span data-ttu-id="6cdc9-485">Pozycja `V` wynosi 0, ponieważ `V` pierwszego parametru typu na liście parametrów typu dla klasy `A`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-485">The position of `V` is 0 because `V` is the first type parameter in the type parameter list for class `A`.</span></span> <span data-ttu-id="6cdc9-486">Pozycja `X` wynosi 0, ponieważ `X` pierwszego parametru typu na liście parametrów typu dla `GetSomething`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-486">The position of `X` is 0 because `X` is the first type parameter in the type parameter list for `GetSomething`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-487">Wywoływanie <xref:System.Type.GenericParameterPosition%2A> właściwości powoduje wyjątek, jeśli bieżący <xref:System.Type> nie reprezentuje parametr typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-487">Calling the <xref:System.Type.GenericParameterPosition%2A> property causes an exception if the current <xref:System.Type> does not represent a type parameter.</span></span> <span data-ttu-id="6cdc9-488">Podczas badania argumentów typu otwartego skonstruowanego typu użycia <xref:System.Type.IsGenericParameter%2A> właściwość stwierdzić, którego parametrów typu i typów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-488">When you examine the type arguments of an open constructed type, use the <xref:System.Type.IsGenericParameter%2A> property to tell which are type parameters and which are types.</span></span> <span data-ttu-id="6cdc9-489"><xref:System.Type.IsGenericParameter%2A> Właściwość zwraca `true` dla parametru typu; można następnie użyć <xref:System.Type.GenericParameterPosition%2A> metodę, aby uzyskać jego położenie i użyj <xref:System.Type.DeclaringMethod%2A> i <xref:System.Type.DeclaringType%2A> właściwości, aby określić metodę rodzajową lub definicji, który go definiuje typu .</span><span class="sxs-lookup"><span data-stu-id="6cdc9-489">The <xref:System.Type.IsGenericParameter%2A> property returns `true` for a type parameter; you can then use the <xref:System.Type.GenericParameterPosition%2A> method to obtain its position and use the <xref:System.Type.DeclaringMethod%2A> and <xref:System.Type.DeclaringType%2A> properties to determine the generic method or type definition that defines it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-490">Poniższy przykład definiuje klasę ogólną z dwoma parametrami typu i definiuje klasę ogólną drugi wywodzi się z pierwszej klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-490">The following example defines a generic class with two type parameters and defines a second generic class that derives from the first class.</span></span> <span data-ttu-id="6cdc9-491">Klasa podstawowa dla klasy pochodnej ma dwa argumenty typu: pierwszy to <xref:System.Int32>, a drugą jest parametrem typu w typie pochodnym.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-491">The derived class's base class has two type arguments: the first is <xref:System.Int32>, and the second is a type parameter of the derived type.</span></span> <span data-ttu-id="6cdc9-492">W przykładzie są wyświetlane informacje o tych klasach ogólnych, w tym pozycje raportowane przez <xref:System.Type.GenericParameterPosition%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-492">The example displays information about these generic classes, including the positions reported by the <xref:System.Type.GenericParameterPosition%2A> property.</span></span>  
  
 [!code-cpp[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/CPP/source.cpp#1)]
 [!code-csharp[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/CS/source.cs#1)]
 [!code-vb[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6cdc9-493">Bieżący typ nie reprezentuje parametr typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-493">The current type does not represent a type parameter.</span>
          </span>
          <span data-ttu-id="6cdc9-494">Oznacza to, że <see cref="P:System.Type.IsGenericParameter" /> zwraca <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-494">That is, <see cref="P:System.Type.IsGenericParameter" /> returns <see langword="false" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.MakeGenericType(System.Type[])" />
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericParameter" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md">
          <span data-ttu-id="6cdc9-495">Odbicie i typy ogólne</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-495">Reflection and Generic Types</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md">
          <span data-ttu-id="6cdc9-496">Porady: zbadanie i tworzenie wystąpień typów ogólnych za pomocą odbicia</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-496">How to: Examine and Instantiate Generic Types with Reflection</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GenericTypeArguments">
      <MemberSignature Language="C#" Value="public virtual Type[] GenericTypeArguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type[] GenericTypeArguments" />
      <MemberSignature Language="DocId" Value="P:System.Type.GenericTypeArguments" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property GenericTypeArguments As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;Type ^&gt; ^ GenericTypeArguments { cli::array &lt;Type ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GenericTypeArguments : Type[]" Usage="System.Type.GenericTypeArguments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-497">Pobiera tablicę argumentów typu ogólnego dla tego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-497">Gets an array of the generic type arguments for this type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-498">Tablica argumenty typu generycznego, dla tego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-498">An array of the generic type arguments for this type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-499">Tej właściwości pobiera tylko argumenty typu generycznego; oznacza to, że typy, które zostały określone dla parametrów typu ogólnego bieżącego typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-499">This property gets only the generic type arguments; that is, the types that have been specified for the generic type parameters of the current type.</span></span> <span data-ttu-id="6cdc9-500">Jeśli bieżący typ jest definicja typu ogólnego, właściwość ta zwraca pustą tablicę.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-500">If the current type is a generic type definition, this property returns an empty array.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-501">Jeśli typ ogólny jest używany w metody ogólnej lub w innym typem ogólnym, niektóre argumenty typu ogólnego może być otaczającej metody lub typu parametrów typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-501">If a generic type is used in a generic method or in another generic type, some of its generic type arguments might be generic type parameters of the enclosing method or type.</span></span>  
  
 <span data-ttu-id="6cdc9-502">Aby uzyskać parametry typu ogólnego typu, który reprezentuje definicję typu ogólnego, użyj <xref:System.Reflection.TypeInfo.GenericTypeParameters%2A?displayProperty=nameWithType> właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-502">To get the generic type parameters of a type that represents a generic type definition, use the <xref:System.Reflection.TypeInfo.GenericTypeParameters%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="6cdc9-503">Aby uzyskać <xref:System.Reflection.TypeInfo> obiektu dla bieżącego <xref:System.Type> obiektu, należy użyć <xref:System.Reflection.IntrospectionExtensions.GetTypeInfo%2A?displayProperty=nameWithType> — metoda rozszerzenia.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-503">To get a <xref:System.Reflection.TypeInfo> object for the current <xref:System.Type> object, use the <xref:System.Reflection.IntrospectionExtensions.GetTypeInfo%2A?displayProperty=nameWithType> extension method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArrayRank">
      <MemberSignature Language="C#" Value="public virtual int GetArrayRank ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetArrayRank() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetArrayRank" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetArrayRank () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetArrayRank();" />
      <MemberSignature Language="F#" Value="abstract member GetArrayRank : unit -&gt; int&#xA;override this.GetArrayRank : unit -&gt; int" Usage="type.GetArrayRank " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetArrayRank</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-504">Pobiera liczbę wymiarów w tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-504">Gets the number of dimensions in an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-505">Liczba całkowita, która zawiera liczbę wymiarów w bieżącym typem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-505">An integer that contains the number of dimensions in the current type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6cdc9-506">Poniższy przykład wyświetla liczbę wymiarów w tablicy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-506">The following example displays the number of dimensions in an array.</span></span>  
  
 [!code-cpp[Type_GetArrayRank#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetArrayRank/CPP/type_getarrayrank.cpp#1)]
 [!code-csharp[Type_GetArrayRank#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetArrayRank/CS/type_getarrayrank.cs#1)]
 [!code-vb[Type_GetArrayRank#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetArrayRank/VB/type_getarrayrank.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="6cdc9-507">Funkcjonalność ta metoda nie jest obsługiwana w klasie bazowej i muszą być zaimplementowane w klasie pochodnej zamiast tego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-507">The functionality of this method is unsupported in the base class and must be implemented in a derived class instead.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6cdc9-508">Bieżący typ nie jest tablicą.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-508">The current type is not an array.</span>
          </span>
        </exception>
        <altmember cref="T:System.Array" />
        <altmember cref="P:System.Array.Rank" />
      </Docs>
    </Member>
    <Member MemberName="GetAttributeFlagsImpl">
      <MemberSignature Language="C#" Value="protected abstract System.Reflection.TypeAttributes GetAttributeFlagsImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Reflection.TypeAttributes GetAttributeFlagsImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetAttributeFlagsImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetAttributeFlagsImpl () As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Reflection::TypeAttributes GetAttributeFlagsImpl();" />
      <MemberSignature Language="F#" Value="abstract member GetAttributeFlagsImpl : unit -&gt; System.Reflection.TypeAttributes" Usage="type.GetAttributeFlagsImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-509">W przypadku przesłonięcia w klasie pochodnej, implementuje <see cref="P:System.Type.Attributes" /> właściwość i pobiera maskę bitów wskazującą atrybuty skojarzone z <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-509">When overridden in a derived class, implements the <see cref="P:System.Type.Attributes" /> property and gets a bitmask indicating the attributes associated with the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-510">A <see cref="T:System.Reflection.TypeAttributes" /> obiekt reprezentujący zestaw atrybutów <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-510">A <see cref="T:System.Reflection.TypeAttributes" /> object representing the attribute set of the <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Type.Attributes" />
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetConstructor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-511">Pobiera konstruktora określonego bieżącego <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-511">Gets a specific constructor of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructor(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConstructor (types As Type()) As ConstructorInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::ConstructorInfo ^ GetConstructor(cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructor : Type[] -&gt; System.Reflection.ConstructorInfo&#xA;override this.GetConstructor : Type[] -&gt; System.Reflection.ConstructorInfo" Usage="type.GetConstructor types" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructor(System.Type[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="types">
          <span data-ttu-id="6cdc9-512">Tablica <see cref="T:System.Type" /> obiektów reprezentujących liczbę, kolejność i typ parametrów dla żądanego konstruktora.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-512">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the desired constructor.</span>
          </span>
          <span data-ttu-id="6cdc9-513">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-513">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-514">Pusta tablica <see cref="T:System.Type" /> obiektów, można pobrać konstruktora, który nie przyjmuje żadnych parametrów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-514">An empty array of <see cref="T:System.Type" /> objects, to get a constructor that takes no parameters.</span>
          </span>
          <span data-ttu-id="6cdc9-515">Pusta tablica jest dostarczany przez <see langword="static" /> pola <see cref="F:System.Type.EmptyTypes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-515">Such an empty array is provided by the <see langword="static" /> field <see cref="F:System.Type.EmptyTypes" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-516">Wyszukiwanie konstruktora wystąpienia publicznego, w której parametry pasują do typów w określonej tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-516">Searches for a public instance constructor whose parameters match the types in the specified array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-517">Reprezentuje obiekt konstruktora wystąpienia publicznego, w której parametry pasują do typów w tablicy typu parametru, jeśli znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-517">An object representing the public instance constructor whose parameters match the types in the parameter type array, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-518">Tego przeciążenia metody szuka konstruktory publiczne wystąpienia i nie można uzyskać inicjatora klasy (.cctor).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-518">This method overload looks for public instance constructors and cannot be used to obtain a class initializer (.cctor).</span></span> <span data-ttu-id="6cdc9-519">Aby uzyskać inicjatora klasy, użyj przeciążenia, które przyjmuje <xref:System.Reflection.BindingFlags>, a następnie określ <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-519">To get a class initializer, use an overload that takes <xref:System.Reflection.BindingFlags>, and specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="6cdc9-520">Można również uzyskać inicjatora klasy za pomocą <xref:System.Type.TypeInitializer%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-520">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="6cdc9-521">Jeśli żądana Konstruktor jest niepublicznych, Metoda ta zwraca `null`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-521">If the requested constructor is non-public, this method returns `null`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-522">Nie można pominąć parametrów przy wyszukiwaniu konstruktorów i metod.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-522">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="6cdc9-523">Parametry można pominąć jedynie podczas wywoływania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-523">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="6cdc9-524">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, Metoda ta zwraca <xref:System.Reflection.ConstructorInfo> z parametrami typu zastąpionymi przez odpowiednie argumenty typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-524">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="6cdc9-525">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, Metoda ta zwraca zawsze `null`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-525">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method always returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-526">W poniższym przykładzie uzyskano typ `MyClass`, pobiera <xref:System.Reflection.ConstructorInfo> obiektu, a następnie wyświetla sygnatury konstruktora.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-526">The following example obtains the type of `MyClass`, gets the <xref:System.Reflection.ConstructorInfo> object, and displays the constructor signature.</span></span>  
  
 [!code-cpp[Type_GetConstructor#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetConstructor/CPP/type_getconstructor.cpp#1)]
 [!code-csharp[Type_GetConstructor#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetConstructor/CS/type_getconstructor.cs#1)]
 [!code-vb[Type_GetConstructor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetConstructor/VB/type_getconstructor.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-527">
            <paramref name="types" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-527">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cdc9-528">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-528">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-529">Jeden z elementów w <paramref name="types" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-529">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6cdc9-530">
            <paramref name="types" /> ma charakter wielowymiarowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-530">
              <paramref name="types" /> is multidimensional.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetConstructors" />
      </Docs>
    </Member>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::ConstructorInfo ^ GetConstructor(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructor : System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo&#xA;override this.GetConstructor : System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo" Usage="type.GetConstructor (bindingAttr, binder, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="6cdc9-531">Maska bitów składająca się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-531">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="6cdc9-532">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-532">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-533">Zero, aby zwrócić <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-533">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="6cdc9-534">Obiekt, który określa zestaw właściwości i umożliwia powiązanie, które może obejmować wybór metody przeciążonej, wymuszanie typów argumentu i wywołanie elementu członkowskiego przez odbicie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-534">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="6cdc9-535">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-535">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-536">Odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic), aby użyć <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-536">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="6cdc9-537">Tablica <see cref="T:System.Type" /> obiektów reprezentujących liczbę, kolejność i typ parametrów dla konstruktora, aby uzyskać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-537">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</span>
          </span>
          <span data-ttu-id="6cdc9-538">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-538">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-539">Pusta tablica typu <see cref="T:System.Type" /> (Type [] types = new Type[0]) umożliwia pobranie konstruktora, który nie przyjmuje żadnych parametrów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-539">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</span>
          </span>
          <span data-ttu-id="6cdc9-540">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-540">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-541">
            <see cref="F:System.Type.EmptyTypes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-541">
              <see cref="F:System.Type.EmptyTypes" />.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="6cdc9-542">Tablica <see cref="T:System.Reflection.ParameterModifier" /> obiektów reprezentujących atrybuty skojarzone z odpowiednim elementem w tablicy typu parametru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-542">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the parameter type array.</span>
          </span>
          <span data-ttu-id="6cdc9-543">Domyślny konsolidator nie przetwarza tego parametru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-543">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-544">Wyszukiwanie konstruktora, w której parametry odpowiadają określone typy argumentów i modyfikatorów, za pomocą ograniczeń w określonym powiązaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-544">Searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-545">A <see cref="T:System.Reflection.ConstructorInfo" /> obiekt reprezentujący Konstruktor, który spełnia określone wymagania, jeśli je znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-545">A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-546">Jeśli nie istnieje dokładne dopasowanie, `binder` będzie próbował przekształcić typy parametrów określonych w `types` tablicy w celu wybrania dopasowania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-546">If an exact match does not exist, the `binder` will attempt to coerce the parameter types specified in the `types` array in order to select a match.</span></span> <span data-ttu-id="6cdc9-547">Jeśli `binder` nie może wybrać dopasowania, następnie `null` jest zwracana.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-547">If the `binder` is unable to select a match, then `null` is returned.</span></span>  
  
 <span data-ttu-id="6cdc9-548">Następujące <xref:System.Reflection.BindingFlags> flagi filtru może służyć do definiowania, które z konstruktorów do uwzględnienia w wyszukiwaniu:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-548">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:</span></span>  
  
-   <span data-ttu-id="6cdc9-549">Należy określić `BindingFlags.Instance` lub `BindingFlags.Static` w celu uzyskania zwrotu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-549">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="6cdc9-550">Określ `BindingFlags.Public` obejmujący konstruktorów publicznych w wyszukiwaniu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-550">Specify `BindingFlags.Public` to include public constructors in the search.</span></span>  
  
-   <span data-ttu-id="6cdc9-551">Określ `BindingFlags.NonPublic` obejmujący w w wyszukiwaniu konstruktory niepubliczne (czyli prywatne, wewnętrzne i chronione konstruktory).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-551">Specify `BindingFlags.NonPublic` to include non-public constructors (that is, private, internal, and protected constructors) in the search.</span></span>  
  
 <span data-ttu-id="6cdc9-552">Aby uzyskać więcej informacji, zobacz <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-552">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="6cdc9-553">Aby uzyskać inicjatora klasy (.cctor), za pomocą tego przeciążenia metody, należy określić <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-553">To get the class initializer (.cctor) using this method overload, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="6cdc9-554">Można również uzyskać inicjatora klasy za pomocą <xref:System.Type.TypeInitializer%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-554">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-555">Nie można pominąć parametrów przy wyszukiwaniu konstruktorów i metod.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-555">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="6cdc9-556">Parametry można pominąć jedynie podczas wywoływania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-556">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="6cdc9-557">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, Metoda ta zwraca <xref:System.Reflection.ConstructorInfo> z parametrami typu zastąpionymi przez odpowiednie argumenty typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-557">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="6cdc9-558">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, Metoda ta zwraca zawsze `null`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-558">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method always returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-559">Następujący program uzyskuje typ `MyClass1` klasy pobiera <xref:System.Reflection.ConstructorInfo> obiektu dopasowania flagi określonego powiązania, a następnie wyświetla podpis konstruktora.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-559">The following program obtains the type of `MyClass1` class, gets the <xref:System.Reflection.ConstructorInfo> object matching the specified binding flags, and displays the signature of the constructor.</span></span>  
  
 [!code-cpp[Type_GetConstructor2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetConstructor2/CPP/type_getconstructor2.cpp#1)]
 [!code-csharp[Type_GetConstructor2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetConstructor2/CS/type_getconstructor2.cs#1)]
 [!code-vb[Type_GetConstructor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetConstructor2/VB/type_getconstructor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-560">
            <paramref name="types" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-560">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cdc9-561">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-561">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-562">Jeden z elementów w <paramref name="types" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-562">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6cdc9-563">
            <paramref name="types" /> ma charakter wielowymiarowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-563">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="6cdc9-564">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-564">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-565">
            <paramref name="modifiers" /> ma charakter wielowymiarowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-565">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="6cdc9-566">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-566">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-567">
            <paramref name="types" /> i <paramref name="modifiers" /> nie mają tę samą długość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-567">
              <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetConstructors" />
      </Docs>
    </Member>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::ConstructorInfo ^ GetConstructor(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructor : System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo&#xA;override this.GetConstructor : System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo" Usage="type.GetConstructor (bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="6cdc9-568">Maska bitów składająca się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-568">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="6cdc9-569">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-569">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-570">Zero, aby zwrócić <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-570">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="6cdc9-571">Obiekt, który określa zestaw właściwości i umożliwia powiązanie, które może obejmować wybór metody przeciążonej, wymuszanie typów argumentu i wywołanie elementu członkowskiego przez odbicie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-571">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="6cdc9-572">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-572">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-573">Odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic), aby użyć <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-573">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="callConvention">
          <span data-ttu-id="6cdc9-574">Obiekt, który określa zestaw reguł dotyczących kolejności i układ argumentów, jak wartość zwracana jest przekazywany, jakie rejestrów są używane dla argumentów i stos jest czyszczony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-574">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="6cdc9-575">Tablica <see cref="T:System.Type" /> obiektów reprezentujących liczbę, kolejność i typ parametrów dla konstruktora, aby uzyskać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-575">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</span>
          </span>
          <span data-ttu-id="6cdc9-576">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-576">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-577">Pusta tablica typu <see cref="T:System.Type" /> (Type [] types = new Type[0]) umożliwia pobranie konstruktora, który nie przyjmuje żadnych parametrów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-577">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="6cdc9-578">Tablica <see cref="T:System.Reflection.ParameterModifier" /> obiektów reprezentujących atrybuty skojarzone z odpowiednim elementem w <c>typy</c> tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-578">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="6cdc9-579">Domyślny konsolidator nie przetwarza tego parametru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-579">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-580">Wyszukiwanie konstruktora, w której parametry odpowiadają określone typy argumentów i modyfikatorów, za pomocą ograniczeń w określonym powiązaniu i określonej konwencji wywoływania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-580">Searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-581">Obiekt reprezentujący Konstruktor, który spełnia określone wymagania, jeśli znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-581">An object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-582">Mimo że domyślny integrator nie przetwarza <xref:System.Reflection.ParameterModifier> ( `modifiers` parametru), można użyć streszczenia <xref:System.Reflection.Binder?displayProperty=nameWithType> klasy do napisania niestandardowego integratora, który przetwarza `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-582">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="6cdc9-583">`ParameterModifier` jest używana tylko podczas wywoływania przez współdziałania z modelem COM i są obsługiwane tylko w przypadku parametrów, które są przekazywane przez odwołanie.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-583">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="6cdc9-584">Jeśli nie istnieje dokładne dopasowanie, `binder` będzie próbował przekształcić typy parametrów określonych w `types` tablicy w celu wybrania dopasowania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-584">If an exact match does not exist, the `binder` will attempt to coerce the parameter types specified in the `types` array in order to select a match.</span></span> <span data-ttu-id="6cdc9-585">Jeśli `binder` nie może wybrać dopasowania, następnie `null` jest zwracana.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-585">If the `binder` is unable to select a match, then `null` is returned.</span></span>  
  
 <span data-ttu-id="6cdc9-586">Następujące <xref:System.Reflection.BindingFlags> flagi filtru może służyć do definiowania, które z konstruktorów do uwzględnienia w wyszukiwaniu:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-586">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:</span></span>  
  
-   <span data-ttu-id="6cdc9-587">Należy określić `BindingFlags.Instance` lub `BindingFlags.Static` w celu uzyskania zwrotu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-587">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="6cdc9-588">Określ `BindingFlags.Public` obejmujący konstruktorów publicznych w wyszukiwaniu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-588">Specify `BindingFlags.Public` to include public constructors in the search.</span></span>  
  
-   <span data-ttu-id="6cdc9-589">Określ `BindingFlags.NonPublic` obejmujący w w wyszukiwaniu konstruktory niepubliczne (czyli prywatne, wewnętrzne i chronione konstruktory).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-589">Specify `BindingFlags.NonPublic` to include non-public constructors (that is, private, internal, and protected constructors) in the search.</span></span>  
  
 <span data-ttu-id="6cdc9-590">Aby uzyskać więcej informacji, zobacz <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-590">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="6cdc9-591">Aby uzyskać inicjatora klasy (.cctor), za pomocą tej metody, należy określić <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-591">To get the class initializer (.cctor) using this method, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="6cdc9-592">Można również uzyskać inicjatora klasy za pomocą <xref:System.Type.TypeInitializer%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-592">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="6cdc9-593">W poniższej tabeli przedstawiono, jakie elementy członkowskie klasy podstawowej są zwracane przez `Get` metody uwzględnianiem typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-593">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="6cdc9-594">Typ elementu członkowskiego</span><span class="sxs-lookup"><span data-stu-id="6cdc9-594">Member Type</span></span>|<span data-ttu-id="6cdc9-595">Static</span><span class="sxs-lookup"><span data-stu-id="6cdc9-595">Static</span></span>|<span data-ttu-id="6cdc9-596">Niestatyczna</span><span class="sxs-lookup"><span data-stu-id="6cdc9-596">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="6cdc9-597">Konstruktor</span><span class="sxs-lookup"><span data-stu-id="6cdc9-597">Constructor</span></span>|<span data-ttu-id="6cdc9-598">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-598">No</span></span>|<span data-ttu-id="6cdc9-599">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-599">No</span></span>|  
|<span data-ttu-id="6cdc9-600">Pole</span><span class="sxs-lookup"><span data-stu-id="6cdc9-600">Field</span></span>|<span data-ttu-id="6cdc9-601">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-601">No</span></span>|<span data-ttu-id="6cdc9-602">Tak.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-602">Yes.</span></span> <span data-ttu-id="6cdc9-603">Pole jest zawsze ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-603">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6cdc9-604">Zdarzenie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-604">Event</span></span>|<span data-ttu-id="6cdc9-605">Nie dotyczy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-605">Not applicable</span></span>|<span data-ttu-id="6cdc9-606">Zasadą systemu typu jest to, że dziedziczenie jest takie samo, jak w przypadku metod, które implementują właściwość.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-606">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6cdc9-607">Odbicie traktuje właściwości jako ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-607">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-608">Patrz Uwaga 2 poniżej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-608">See note 2 below.</span></span>|  
|<span data-ttu-id="6cdc9-609">Metoda</span><span class="sxs-lookup"><span data-stu-id="6cdc9-609">Method</span></span>|<span data-ttu-id="6cdc9-610">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-610">No</span></span>|<span data-ttu-id="6cdc9-611">Tak.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-611">Yes.</span></span> <span data-ttu-id="6cdc9-612">Metodą (zarówno wirtualną, jak i niewirtualną) może być ukrycie przez nazwę lub przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-612">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6cdc9-613">Typu zagnieżdżony</span><span class="sxs-lookup"><span data-stu-id="6cdc9-613">Nested Type</span></span>|<span data-ttu-id="6cdc9-614">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-614">No</span></span>|<span data-ttu-id="6cdc9-615">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-615">No</span></span>|  
|<span data-ttu-id="6cdc9-616">Właściwość</span><span class="sxs-lookup"><span data-stu-id="6cdc9-616">Property</span></span>|<span data-ttu-id="6cdc9-617">Nie dotyczy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-617">Not applicable</span></span>|<span data-ttu-id="6cdc9-618">Zasadą systemu typu jest to, że dziedziczenie jest takie samo, jak w przypadku metod, które implementują właściwość.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-618">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6cdc9-619">Odbicie traktuje właściwości jako ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-619">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-620">Patrz Uwaga 2 poniżej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-620">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="6cdc9-621">Ukrycie przez nazwę i podpis dotyczy wszystkich części podpisu, w tym modyfikatorów niestandardowych, zwraca typy, typy parametrów, wartowników i niezarządzane konwencje wywoływania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-621">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="6cdc9-622">To jest porównanie binarne.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-622">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="6cdc9-623">W celu odbicia właściwości i zdarzenia są ukrywane przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-623">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-624">Jeśli istnieje właściwość z akcesorem pobierania i ustawiania w klasie bazowej, ale odziedziczona klasa ma tylko akcesor pobierania, właściwość klasy odziedziczonej ukrywa właściwości klasy bazowej, a nie można uzyskać dostępu do metody ustawiającej w klasie bazowej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-624">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="6cdc9-625">Atrybuty niestandardowe nie są częścią wspólnego typu systemowego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-625">Custom attributes are not part of the common type system.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-626">Nie można pominąć parametrów przy wyszukiwaniu konstruktorów i metod.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-626">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="6cdc9-627">Parametry można pominąć jedynie podczas wywoływania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-627">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="6cdc9-628">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, Metoda ta zwraca <xref:System.Reflection.ConstructorInfo> z parametrami typu zastąpionymi przez odpowiednie argumenty typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-628">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="6cdc9-629">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, Metoda ta zwraca zawsze `null`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-629">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method always returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-630">W poniższym przykładzie uzyskano typ `MyClass1`, pobiera <xref:System.Reflection.ConstructorInfo> obiekt, który odpowiada flagi określonego powiązania, a następnie wyświetla sygnatury konstruktora.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-630">The following example obtains the type of `MyClass1`, gets the <xref:System.Reflection.ConstructorInfo> object that matches the specified binding flags, and displays the constructor signature.</span></span>  
  
 [!code-cpp[Type_GetConstructor3#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetConstructor3/CPP/type_getconstructor3.cpp#1)]
 [!code-csharp[Type_GetConstructor3#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetConstructor3/CS/type_getconstructor3.cs#1)]
 [!code-vb[Type_GetConstructor3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetConstructor3/VB/type_getconstructor3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-631">
            <paramref name="types" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-631">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cdc9-632">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-632">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-633">Jeden z elementów w <paramref name="types" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-633">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6cdc9-634">
            <paramref name="types" /> ma charakter wielowymiarowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-634">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="6cdc9-635">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-635">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-636">
            <paramref name="modifiers" /> ma charakter wielowymiarowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-636">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="6cdc9-637">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-637">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-638">
            <paramref name="types" /> i <paramref name="modifiers" /> nie mają tę samą długość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-638">
              <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.CallingConventions" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetConstructors" />
      </Docs>
    </Member>
    <Member MemberName="GetConstructorImpl">
      <MemberSignature Language="C#" Value="protected abstract System.Reflection.ConstructorInfo GetConstructorImpl (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructorImpl(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Reflection::ConstructorInfo ^ GetConstructorImpl(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructorImpl : System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo" Usage="type.GetConstructorImpl (bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="6cdc9-639">Maska bitów składająca się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-639">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="6cdc9-640">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-640">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-641">Zero, aby zwrócić <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-641">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="6cdc9-642">Obiekt, który określa zestaw właściwości i umożliwia powiązanie, które może obejmować wybór metody przeciążonej, wymuszanie typów argumentu i wywołanie elementu członkowskiego przez odbicie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-642">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="6cdc9-643">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-643">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-644">Odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic), aby użyć <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-644">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="callConvention">
          <span data-ttu-id="6cdc9-645">Obiekt, który określa zestaw reguł dotyczących kolejności i układ argumentów, jak wartość zwracana jest przekazywany, jakie rejestrów są używane dla argumentów i stos jest czyszczony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-645">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="6cdc9-646">Tablica <see cref="T:System.Type" /> obiektów reprezentujących liczbę, kolejność i typ parametrów dla konstruktora, aby uzyskać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-646">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</span>
          </span>
          <span data-ttu-id="6cdc9-647">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-647">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-648">Pusta tablica typu <see cref="T:System.Type" /> (Type [] types = new Type[0]) umożliwia pobranie konstruktora, który nie przyjmuje żadnych parametrów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-648">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="6cdc9-649">Tablica <see cref="T:System.Reflection.ParameterModifier" /> obiektów reprezentujących atrybuty skojarzone z odpowiednim elementem w <c>typy</c> tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-649">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="6cdc9-650">Domyślny konsolidator nie przetwarza tego parametru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-650">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-651">W przypadku przesłonięcia w klasie pochodnej, wyszukuje konstruktora, w której parametry odpowiadają określone typy argumentów i modyfikatorów, korzystając z ograniczeń w określonym powiązaniu i określonej konwencji wywoływania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-651">When overridden in a derived class, searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-652">A <see cref="T:System.Reflection.ConstructorInfo" /> obiekt reprezentujący Konstruktor, który spełnia określone wymagania, jeśli je znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-652">A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-653">Mimo że domyślny integrator nie przetwarza <xref:System.Reflection.ParameterModifier> ( `modifiers` parametru), można użyć streszczenia <xref:System.Reflection.Binder?displayProperty=nameWithType> klasy do napisania niestandardowego integratora, który przetwarza `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-653">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="6cdc9-654">`ParameterModifier` jest używana tylko podczas wywoływania przez współdziałania z modelem COM i są obsługiwane tylko w przypadku parametrów, które są przekazywane przez odwołanie.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-654">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="6cdc9-655">Jeśli nie istnieje dokładne dopasowanie, `binder` będzie próbował przekształcić typy parametrów określonych w `types` tablicy w celu wybrania dopasowania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-655">If an exact match does not exist, the `binder` will attempt to coerce the parameter types specified in the `types` array in order to select a match.</span></span> <span data-ttu-id="6cdc9-656">Jeśli `binder` nie może wybrać dopasowania, następnie `null` jest zwracana.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-656">If the `binder` is unable to select a match, then `null` is returned.</span></span>  
  
 <span data-ttu-id="6cdc9-657">Następujące <xref:System.Reflection.BindingFlags> flagi filtru może służyć do definiowania, które z konstruktorów do uwzględnienia w wyszukiwaniu:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-657">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:</span></span>  
  
-   <span data-ttu-id="6cdc9-658">Należy określić `BindingFlags.Instance` lub `BindingFlags.Static` w celu uzyskania zwrotu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-658">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="6cdc9-659">Określ `BindingFlags.Public` obejmujący konstruktorów publicznych w wyszukiwaniu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-659">Specify `BindingFlags.Public` to include public constructors in the search.</span></span>  
  
-   <span data-ttu-id="6cdc9-660">Określ `BindingFlags.NonPublic` obejmujący w w wyszukiwaniu konstruktory niepubliczne (czyli prywatne, wewnętrzne i chronione konstruktory).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-660">Specify `BindingFlags.NonPublic` to include non-public constructors (that is, private, internal, and protected constructors) in the search.</span></span>  
  
 <span data-ttu-id="6cdc9-661">Aby uzyskać więcej informacji, zobacz <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-661">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="6cdc9-662">Ta metoda implementuje <xref:System.Type.GetConstructor%2A>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-662">This method implements <xref:System.Type.GetConstructor%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-663">
            <paramref name="types" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-663">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cdc9-664">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-664">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-665">Jeden z elementów w <paramref name="types" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-665">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6cdc9-666">
            <paramref name="types" /> ma charakter wielowymiarowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-666">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="6cdc9-667">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-667">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-668">
            <paramref name="modifiers" /> ma charakter wielowymiarowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-668">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="6cdc9-669">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-669">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-670">
            <paramref name="types" /> i <paramref name="modifiers" /> nie mają tę samą długość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-670">
              <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="6cdc9-671">Bieżącym typem jest <see cref="T:System.Reflection.Emit.TypeBuilder" /> lub <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-671">The current type is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> or <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.CallingConventions" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetConstructors" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetConstructors">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-672">Pobiera konstruktory bieżącego <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-672">Gets the constructors of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetConstructors">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo[] GetConstructors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo[] GetConstructors() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructors" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConstructors () As ConstructorInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::ConstructorInfo ^&gt; ^ GetConstructors();" />
      <MemberSignature Language="F#" Value="abstract member GetConstructors : unit -&gt; System.Reflection.ConstructorInfo[]&#xA;override this.GetConstructors : unit -&gt; System.Reflection.ConstructorInfo[]" Usage="type.GetConstructors " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructors</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-673">Zwraca wszystkie publiczne konstruktory zdefiniowane dla bieżącego <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-673">Returns all the public constructors defined for the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-674">Tablica <see cref="T:System.Reflection.ConstructorInfo" /> obiekty reprezentujące wszystkie konstruktory publiczne wystąpienia zdefiniowane dla bieżącego <see cref="T:System.Type" />, z wyjątkiem typu inicjatora (Konstruktor statyczny).</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-674">An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all the public instance constructors defined for the current <see cref="T:System.Type" />, but not including the type initializer (static constructor).</span>
          </span>
          <span data-ttu-id="6cdc9-675">Jeśli nie konstruktory publiczne wystąpienia są zdefiniowane dla bieżącego <see cref="T:System.Type" />, lub, jeśli bieżący <see cref="T:System.Type" /> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, pusta tablica typu <see cref="T:System.Reflection.ConstructorInfo" /> jest zwracana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-675">If no public instance constructors are defined for the current <see cref="T:System.Type" />, or if the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or generic method, an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-676"><xref:System.Type.GetConstructors%2A> Metoda nie zwraca konstruktorów w określonej kolejności, takie jak kolejność zgłoszenia.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-676">The <xref:System.Type.GetConstructors%2A> method does not return constructors in a particular order, such as declaration order.</span></span> <span data-ttu-id="6cdc9-677">Twój kod nie może zależeć od kolejności, w której zwracane są konstruktory, ponieważ kolejność się zmienia.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-677">Your code must not depend on the order in which constructors are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="6cdc9-678">W poniższej tabeli przedstawiono, jakie elementy członkowskie klasy podstawowej są zwracane przez `Get` metody uwzględnianiem typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-678">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="6cdc9-679">Typ elementu członkowskiego</span><span class="sxs-lookup"><span data-stu-id="6cdc9-679">Member Type</span></span>|<span data-ttu-id="6cdc9-680">Static</span><span class="sxs-lookup"><span data-stu-id="6cdc9-680">Static</span></span>|<span data-ttu-id="6cdc9-681">Niestatyczna</span><span class="sxs-lookup"><span data-stu-id="6cdc9-681">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="6cdc9-682">Konstruktor</span><span class="sxs-lookup"><span data-stu-id="6cdc9-682">Constructor</span></span>|<span data-ttu-id="6cdc9-683">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-683">No</span></span>|<span data-ttu-id="6cdc9-684">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-684">No</span></span>|  
|<span data-ttu-id="6cdc9-685">Pole</span><span class="sxs-lookup"><span data-stu-id="6cdc9-685">Field</span></span>|<span data-ttu-id="6cdc9-686">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-686">No</span></span>|<span data-ttu-id="6cdc9-687">Tak.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-687">Yes.</span></span> <span data-ttu-id="6cdc9-688">Pole jest zawsze ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-688">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6cdc9-689">Zdarzenie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-689">Event</span></span>|<span data-ttu-id="6cdc9-690">Nie dotyczy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-690">Not applicable</span></span>|<span data-ttu-id="6cdc9-691">Zasadą systemu typu jest to, że dziedziczenie jest takie samo, jak w przypadku metod, które implementują właściwość.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-691">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6cdc9-692">Odbicie traktuje właściwości jako ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-692">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-693">Patrz Uwaga 2 poniżej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-693">See note 2 below.</span></span>|  
|<span data-ttu-id="6cdc9-694">Metoda</span><span class="sxs-lookup"><span data-stu-id="6cdc9-694">Method</span></span>|<span data-ttu-id="6cdc9-695">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-695">No</span></span>|<span data-ttu-id="6cdc9-696">Tak.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-696">Yes.</span></span> <span data-ttu-id="6cdc9-697">Metodą (zarówno wirtualną, jak i niewirtualną) może być ukrycie przez nazwę lub przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-697">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6cdc9-698">Typu zagnieżdżony</span><span class="sxs-lookup"><span data-stu-id="6cdc9-698">Nested Type</span></span>|<span data-ttu-id="6cdc9-699">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-699">No</span></span>|<span data-ttu-id="6cdc9-700">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-700">No</span></span>|  
|<span data-ttu-id="6cdc9-701">Właściwość</span><span class="sxs-lookup"><span data-stu-id="6cdc9-701">Property</span></span>|<span data-ttu-id="6cdc9-702">Nie dotyczy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-702">Not applicable</span></span>|<span data-ttu-id="6cdc9-703">Zasadą systemu typu jest to, że dziedziczenie jest takie samo, jak w przypadku metod, które implementują właściwość.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-703">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6cdc9-704">Odbicie traktuje właściwości jako ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-704">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-705">Patrz Uwaga 2 poniżej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-705">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="6cdc9-706">Ukrycie przez nazwę i podpis dotyczy wszystkich części podpisu, w tym modyfikatorów niestandardowych, zwraca typy, typy parametrów, wartowników i niezarządzane konwencje wywoływania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-706">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="6cdc9-707">To jest porównanie binarne.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-707">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="6cdc9-708">W celu odbicia właściwości i zdarzenia są ukrywane przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-708">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-709">Jeśli istnieje właściwość z akcesorem pobierania i ustawiania w klasie bazowej, ale odziedziczona klasa ma tylko akcesor pobierania, właściwość klasy odziedziczonej ukrywa właściwości klasy bazowej, a nie można uzyskać dostępu do metody ustawiającej w klasie bazowej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-709">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="6cdc9-710">Atrybuty niestandardowe nie są częścią wspólnego typu systemowego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-710">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="6cdc9-711">Tego przeciążenia metody wywołuje <xref:System.Type.GetConstructors%28System.Reflection.BindingFlags%29> przeciążenie metody z <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-711">This method overload calls the <xref:System.Type.GetConstructors%28System.Reflection.BindingFlags%29> method overload, with <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="6cdc9-712">Inicjatory klasy (.cctor) nie zostanie odnaleziony.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-712">It will not find class initializers (.cctor).</span></span> <span data-ttu-id="6cdc9-713">Aby znaleźć klasy inicjatory, użyj przeciążenia, które przyjmuje <xref:System.Reflection.BindingFlags>, a następnie określ <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-713">To find class initializers, use an overload that takes <xref:System.Reflection.BindingFlags>, and specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="6cdc9-714">Można również uzyskać inicjatora klasy za pomocą <xref:System.Type.TypeInitializer%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-714">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="6cdc9-715">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, Metoda ta zwraca <xref:System.Reflection.ConstructorInfo> obiektów z parametrami typu zastąpionymi przez odpowiednie argumenty typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-715">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="6cdc9-716">Na przykład jeśli klasa `C<T>` ma Konstruktor `C(T t1)` (`Sub New(ByVal t1 As T)` w języku Visual Basic), wywoływania <xref:System.Type.GetConstructors%2A> na `C<int>` zwraca <xref:System.Reflection.ConstructorInfo> reprezentujący `C(int t1)` w języku C# (`Sub New(ByVal t1 As Integer)` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-716">For example, if class `C<T>` has a constructor `C(T t1)` (`Sub New(ByVal t1 As T)` in Visual Basic), calling <xref:System.Type.GetConstructors%2A> on `C<int>` returns a <xref:System.Reflection.ConstructorInfo> that represents `C(int t1)` in C# (`Sub New(ByVal t1 As Integer)` in Visual Basic).</span></span>  
  
 <span data-ttu-id="6cdc9-717">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu ogólnego, <xref:System.Type.GetConstructors%2A> metoda zwraca pustą tablicę.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-717">If the current <xref:System.Type> represents a generic type parameter, the <xref:System.Type.GetConstructors%2A> method returns an empty array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-718">Ten przykład przedstawia dane wyjściowe <xref:System.Type.GetConstructors%2A> przeciążenia z klasy, która ma dwa konstruktory wystąpień i jeden konstruktor statyczny.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-718">This example shows the output of the <xref:System.Type.GetConstructors%2A> overload from a class that has two instance constructors and one static constructor.</span></span>  
  
 [!code-cpp[Classic Type.GetConstructors Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CPP/source1.cpp#1)]
 [!code-csharp[Classic Type.GetConstructors Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CS/source1.cs#1)]
 [!code-vb[Classic Type.GetConstructors Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/VB/source1.vb#1)]  
  
 <span data-ttu-id="6cdc9-719">Wynik tego kodu jest:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-719">The output of this code is:</span></span>  
  
 <span data-ttu-id="6cdc9-720">2</span><span class="sxs-lookup"><span data-stu-id="6cdc9-720">2</span></span>  
  
 <span data-ttu-id="6cdc9-721">False</span><span class="sxs-lookup"><span data-stu-id="6cdc9-721">False</span></span>  
  
 <span data-ttu-id="6cdc9-722">False</span><span class="sxs-lookup"><span data-stu-id="6cdc9-722">False</span></span>  
  
 <span data-ttu-id="6cdc9-723">Ponieważ <xref:System.Type.GetConstructors> przeciążenia używa tylko <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> i <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, statyczny Konstruktor nie jest traktowana przez `for` wyrażeń ani oceniany przez `IsStatic`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-723">Because the <xref:System.Type.GetConstructors> overload uses only <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> and <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, the static constructor is neither counted by the `for` expression nor evaluated by `IsStatic`.</span></span>  
  
 <span data-ttu-id="6cdc9-724">Aby znaleźć konstruktorów statycznych, użyj <xref:System.Type.GetConstructors%28System.Reflection.BindingFlags%29> przeciążenia i przekazywać połączenie (logiczne `OR`) z <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, jak pokazano w poniższym przykładzie kodu:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-724">To find static constructors, use the <xref:System.Type.GetConstructors%28System.Reflection.BindingFlags%29> overload, and pass the combination (logical `OR`) of <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, as shown in the following code example:</span></span>  
  
 [!code-cpp[Classic Type.GetConstructors Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic Type.GetConstructors Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CS/source2.cs#2)]
 [!code-vb[Classic Type.GetConstructors Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="6cdc9-725">Teraz dane wyjściowe to:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-725">Now the output is:</span></span>  
  
 <span data-ttu-id="6cdc9-726">3</span><span class="sxs-lookup"><span data-stu-id="6cdc9-726">3</span></span>  
  
 <span data-ttu-id="6cdc9-727">False</span><span class="sxs-lookup"><span data-stu-id="6cdc9-727">False</span></span>  
  
 <span data-ttu-id="6cdc9-728">True</span><span class="sxs-lookup"><span data-stu-id="6cdc9-728">True</span></span>  
  
 <span data-ttu-id="6cdc9-729">False</span><span class="sxs-lookup"><span data-stu-id="6cdc9-729">False</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <Member MemberName="GetConstructors">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo[] GetConstructors(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructors(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetConstructors (bindingAttr As BindingFlags) As ConstructorInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::ConstructorInfo ^&gt; ^ GetConstructors(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructors : System.Reflection.BindingFlags -&gt; System.Reflection.ConstructorInfo[]" Usage="type.GetConstructors bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructors(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="6cdc9-730">Maska bitów składająca się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-730">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="6cdc9-731">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-731">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-732">Zero, aby zwrócić <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-732">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-733">W przypadku przesłonięcia w klasie pochodnej, wyszukuje konstruktorów, zdefiniowanych dla bieżącej <see cref="T:System.Type" />, przy użyciu określonego <see langword="BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-733">When overridden in a derived class, searches for the constructors defined for the current <see cref="T:System.Type" />, using the specified <see langword="BindingFlags" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-734">Tablica <see cref="T:System.Reflection.ConstructorInfo" /> obiekty reprezentujące wszystkie konstruktory zdefiniowane dla bieżącego <see cref="T:System.Type" /> zgodnych ograniczeń w określonym powiązaniu, w tym inicjatora typu, jeśli jest on zdefiniowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-734">An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all constructors defined for the current <see cref="T:System.Type" /> that match the specified binding constraints, including the type initializer if it is defined.</span>
          </span>
          <span data-ttu-id="6cdc9-735">Zwraca pustą tablicę typu <see cref="T:System.Reflection.ConstructorInfo" /> Jeśli konstruktory nie są zdefiniowane dla bieżącego <see cref="T:System.Type" />, czy żaden z konstruktorów zdefiniowanych być zgodne z ograniczeniami powiązania, czy bieżący <see cref="T:System.Type" /> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-735">Returns an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> if no constructors are defined for the current <see cref="T:System.Type" />, if none of the defined constructors match the binding constraints, or if the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or generic method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-736"><xref:System.Type.GetConstructors%2A> Metoda nie zwraca konstruktorów w określonej kolejności, takie jak kolejność zgłoszenia.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-736">The <xref:System.Type.GetConstructors%2A> method does not return constructors in a particular order, such as declaration order.</span></span> <span data-ttu-id="6cdc9-737">Twój kod nie może zależeć od kolejności, w której zwracane są konstruktory, ponieważ kolejność się zmienia.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-737">Your code must not depend on the order in which constructors are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="6cdc9-738">`bindingAttr` może służyć do określenia, czy należy zwrócić tylko konstruktory publiczne lub konstruktorów publicznych i niepublicznych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-738">`bindingAttr` can be used to specify whether to return only public constructors or both public and non-public constructors.</span></span>  
  
 <span data-ttu-id="6cdc9-739">Jeśli nie istnieje dokładne dopasowanie, `binder` będzie próbował przekształcić typy parametrów określonych w `types` tablicy w celu wybrania dopasowania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-739">If an exact match does not exist, the `binder` will attempt to coerce the parameter types specified in the `types` array in order to select a match.</span></span> <span data-ttu-id="6cdc9-740">Jeśli `binder` nie może wybrać dopasowania, następnie `null` jest zwracana.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-740">If the `binder` is unable to select a match, then `null` is returned.</span></span>  
  
 <span data-ttu-id="6cdc9-741">Następujące <xref:System.Reflection.BindingFlags> flagi filtru może służyć do definiowania, które z konstruktorów do uwzględnienia w wyszukiwaniu:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-741">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:</span></span>  
  
-   <span data-ttu-id="6cdc9-742">Należy określić `BindingFlags.Instance` lub `BindingFlags.Static` w celu uzyskania zwrotu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-742">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="6cdc9-743">Określ `BindingFlags.Public` obejmujący konstruktorów publicznych w wyszukiwaniu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-743">Specify `BindingFlags.Public` to include public constructors in the search.</span></span>  
  
-   <span data-ttu-id="6cdc9-744">Określ `BindingFlags.NonPublic` obejmujący w w wyszukiwaniu konstruktory niepubliczne (czyli prywatne, wewnętrzne i chronione konstruktory).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-744">Specify `BindingFlags.NonPublic` to include non-public constructors (that is, private, internal, and protected constructors) in the search.</span></span> <span data-ttu-id="6cdc9-745">Konstruktory klas bazowych nie są zwracane.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-745">Constructors of base classes are not returned.</span></span>  
  
 <span data-ttu-id="6cdc9-746">Aby uzyskać więcej informacji, zobacz <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-746">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="6cdc9-747">Aby uzyskać inicjatora klasy (.cctor), za pomocą tego przeciążenia metody, należy określić <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-747">To get the class initializer (.cctor) using this method overload, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="6cdc9-748">Można również uzyskać inicjatora klasy za pomocą <xref:System.Type.TypeInitializer%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-748">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="6cdc9-749">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, Metoda ta zwraca <xref:System.Reflection.ConstructorInfo> obiektów z parametrami typu zastąpionymi przez odpowiednie argumenty typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-749">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="6cdc9-750">Na przykład jeśli klasa `C<T>` ma Konstruktor `C(T t1)` (`Sub New(ByVal t1 As T)` w języku Visual Basic), wywoływania <xref:System.Type.GetConstructors%2A> na `C<int>` zwraca <xref:System.Reflection.ConstructorInfo> reprezentujący `C(int t1)` w języku C# (`Sub New(ByVal t1 As Integer)` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-750">For example, if class `C<T>` has a constructor `C(T t1)` (`Sub New(ByVal t1 As T)` in Visual Basic), calling <xref:System.Type.GetConstructors%2A> on `C<int>` returns a <xref:System.Reflection.ConstructorInfo> that represents `C(int t1)` in C# (`Sub New(ByVal t1 As Integer)` in Visual Basic).</span></span>  
  
 <span data-ttu-id="6cdc9-751">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu ogólnego, <xref:System.Type.GetConstructors%2A> metoda zwraca pustą tablicę.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-751">If the current <xref:System.Type> represents a generic type parameter, the <xref:System.Type.GetConstructors%2A> method returns an empty array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-752">Ten przykład przedstawia dane wyjściowe <xref:System.Type.GetConstructors> przeciążenia z klasy, która ma dwa konstruktory wystąpień i jeden konstruktor statyczny.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-752">This example shows the output of the <xref:System.Type.GetConstructors> overload from a class that has two instance constructors and one static constructor.</span></span>  
  
 [!code-cpp[Classic Type.GetConstructors Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CPP/source1.cpp#1)]
 [!code-csharp[Classic Type.GetConstructors Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CS/source1.cs#1)]
 [!code-vb[Classic Type.GetConstructors Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/VB/source1.vb#1)]  
  
 <span data-ttu-id="6cdc9-753">Wynik tego kodu jest:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-753">The output of this code is:</span></span>  
  
 <span data-ttu-id="6cdc9-754">2</span><span class="sxs-lookup"><span data-stu-id="6cdc9-754">2</span></span>  
  
 <span data-ttu-id="6cdc9-755">False</span><span class="sxs-lookup"><span data-stu-id="6cdc9-755">False</span></span>  
  
 <span data-ttu-id="6cdc9-756">False</span><span class="sxs-lookup"><span data-stu-id="6cdc9-756">False</span></span>  
  
 <span data-ttu-id="6cdc9-757">Ponieważ <xref:System.Type.GetConstructors%2A> przeciążenia używa tylko <xref:System.Reflection.BindingFlags.Public> i <xref:System.Reflection.BindingFlags.Instance>, statyczny Konstruktor nie jest traktowana przez `for` wyrażeń ani oceniany przez `IsStatic`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-757">Because the <xref:System.Type.GetConstructors%2A> overload uses only <xref:System.Reflection.BindingFlags.Public> and <xref:System.Reflection.BindingFlags.Instance>, the static constructor is neither counted by the `for` expression nor evaluated by `IsStatic`.</span></span>  
  
 <span data-ttu-id="6cdc9-758">Aby znaleźć konstruktorów statycznych, użyj <xref:System.Type.GetConstructors%2A> przeciążenia i przekazywać je kombinacja (operator logiczny lub) <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, jak pokazano w poniższym przykładzie kodu:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-758">To find static constructors, use the <xref:System.Type.GetConstructors%2A> overload, and pass it the combination (logical OR) of <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, as shown in the following code example:</span></span>  
  
 [!code-cpp[Classic Type.GetConstructors Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic Type.GetConstructors Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CS/source2.cs#2)]
 [!code-vb[Classic Type.GetConstructors Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="6cdc9-759">Teraz dane wyjściowe to:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-759">Now the output is:</span></span>  
  
 <span data-ttu-id="6cdc9-760">3</span><span class="sxs-lookup"><span data-stu-id="6cdc9-760">3</span></span>  
  
 <span data-ttu-id="6cdc9-761">False</span><span class="sxs-lookup"><span data-stu-id="6cdc9-761">False</span></span>  
  
 <span data-ttu-id="6cdc9-762">True</span><span class="sxs-lookup"><span data-stu-id="6cdc9-762">True</span></span>  
  
 <span data-ttu-id="6cdc9-763">False</span><span class="sxs-lookup"><span data-stu-id="6cdc9-763">False</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <Member MemberName="GetDefaultMembers">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MemberInfo[] GetDefaultMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetDefaultMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetDefaultMembers" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDefaultMembers () As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetDefaultMembers();" />
      <MemberSignature Language="F#" Value="abstract member GetDefaultMembers : unit -&gt; System.Reflection.MemberInfo[]&#xA;override this.GetDefaultMembers : unit -&gt; System.Reflection.MemberInfo[]" Usage="type.GetDefaultMembers " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetDefaultMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-764">Wyszukuje elementy członkowskie zdefiniowane dla bieżącego <see cref="T:System.Type" /> którego <see cref="T:System.Reflection.DefaultMemberAttribute" /> jest ustawiona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-764">Searches for the members defined for the current <see cref="T:System.Type" /> whose <see cref="T:System.Reflection.DefaultMemberAttribute" /> is set.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-765">Tablica <see cref="T:System.Reflection.MemberInfo" /> obiekty reprezentujące wszystkie domyślne elementy członkowskie bieżącego <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-765">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all default members of the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="6cdc9-766">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-766">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-767">Pusta tablica typu <see cref="T:System.Reflection.MemberInfo" />, jeśli bieżący <see cref="T:System.Type" /> nie ma domyślne elementy członkowskie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-767">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have default members.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-768"><xref:System.Type.GetDefaultMembers%2A> Metoda nie zwraca elementów członkowskich w określonej kolejności, takie jak alfabetycznej lub kolejności deklaracji.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-768">The <xref:System.Type.GetDefaultMembers%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="6cdc9-769">Kod nie może zależeć od kolejności, w której są zwracane elementy członkowskie, ponieważ kolejność się zmienia.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-769">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="6cdc9-770">Metoda ta może być zastąpiona przez klasę pochodną.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-770">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="6cdc9-771">Elementy członkowskie zawierają właściwości, metody, pola, zdarzenia i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-771">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="6cdc9-772">W poniższej tabeli przedstawiono, jakie elementy członkowskie klasy podstawowej są zwracane przez `Get` metody uwzględnianiem typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-772">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="6cdc9-773">Typ elementu członkowskiego</span><span class="sxs-lookup"><span data-stu-id="6cdc9-773">Member Type</span></span>|<span data-ttu-id="6cdc9-774">Static</span><span class="sxs-lookup"><span data-stu-id="6cdc9-774">Static</span></span>|<span data-ttu-id="6cdc9-775">Niestatyczna</span><span class="sxs-lookup"><span data-stu-id="6cdc9-775">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="6cdc9-776">Konstruktor</span><span class="sxs-lookup"><span data-stu-id="6cdc9-776">Constructor</span></span>|<span data-ttu-id="6cdc9-777">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-777">No</span></span>|<span data-ttu-id="6cdc9-778">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-778">No</span></span>|  
|<span data-ttu-id="6cdc9-779">Pole</span><span class="sxs-lookup"><span data-stu-id="6cdc9-779">Field</span></span>|<span data-ttu-id="6cdc9-780">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-780">No</span></span>|<span data-ttu-id="6cdc9-781">Tak.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-781">Yes.</span></span> <span data-ttu-id="6cdc9-782">Pole jest zawsze ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-782">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6cdc9-783">Zdarzenie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-783">Event</span></span>|<span data-ttu-id="6cdc9-784">Nie dotyczy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-784">Not applicable</span></span>|<span data-ttu-id="6cdc9-785">Zasadą systemu typu jest to, że dziedziczenie jest takie samo, jak w przypadku metod, które implementują właściwość.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-785">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6cdc9-786">Odbicie traktuje właściwości jako ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-786">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-787">Patrz Uwaga 2 poniżej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-787">See note 2 below.</span></span>|  
|<span data-ttu-id="6cdc9-788">Metoda</span><span class="sxs-lookup"><span data-stu-id="6cdc9-788">Method</span></span>|<span data-ttu-id="6cdc9-789">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-789">No</span></span>|<span data-ttu-id="6cdc9-790">Tak.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-790">Yes.</span></span> <span data-ttu-id="6cdc9-791">Metodą (zarówno wirtualną, jak i niewirtualną) może być ukrycie przez nazwę lub przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-791">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6cdc9-792">Typu zagnieżdżony</span><span class="sxs-lookup"><span data-stu-id="6cdc9-792">Nested Type</span></span>|<span data-ttu-id="6cdc9-793">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-793">No</span></span>|<span data-ttu-id="6cdc9-794">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-794">No</span></span>|  
|<span data-ttu-id="6cdc9-795">Właściwość</span><span class="sxs-lookup"><span data-stu-id="6cdc9-795">Property</span></span>|<span data-ttu-id="6cdc9-796">Nie dotyczy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-796">Not applicable</span></span>|<span data-ttu-id="6cdc9-797">Zasadą systemu typu jest to, że dziedziczenie jest takie samo, jak w przypadku metod, które implementują właściwość.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-797">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6cdc9-798">Odbicie traktuje właściwości jako ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-798">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-799">Patrz Uwaga 2 poniżej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-799">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="6cdc9-800">Ukrycie przez nazwę i podpis dotyczy wszystkich części podpisu, w tym modyfikatorów niestandardowych, zwraca typy, typy parametrów, wartowników i niezarządzane konwencje wywoływania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-800">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="6cdc9-801">To jest porównanie binarne.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-801">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="6cdc9-802">W celu odbicia właściwości i zdarzenia są ukrywane przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-802">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-803">Jeśli istnieje właściwość z akcesorem pobierania i ustawiania w klasie bazowej, ale odziedziczona klasa ma tylko akcesor pobierania, właściwość klasy odziedziczonej ukrywa właściwości klasy bazowej, a nie można uzyskać dostępu do metody ustawiającej w klasie bazowej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-803">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="6cdc9-804">Atrybuty niestandardowe nie są częścią wspólnego typu systemowego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-804">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="6cdc9-805">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, Metoda ta zwraca <xref:System.Reflection.MemberInfo> obiektów z parametrami typu zastąpionymi przez odpowiednie argumenty typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-805">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="6cdc9-806">Na przykład jeśli klasa `C<T>` ma właściwość `P` zwracającego `T`, wywoływania <xref:System.Type.GetDefaultMembers%2A> na `C<int>` zwraca `int P` w języku C# (`Property P As Integer` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-806">For example, if class `C<T>` has a property `P` that returns `T`, calling <xref:System.Type.GetDefaultMembers%2A> on `C<int>` returns `int P` in C# (`Property P As Integer` in Visual Basic).</span></span>  
  
 <span data-ttu-id="6cdc9-807">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, Metoda ta wyszukuje składowe ograniczenia klasy lub elementów członkowskich <xref:System.Object> przypadku bez ograniczenia klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-807">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-808">W poniższym przykładzie uzyskano informacje o członkach domyślne z `MyClass` i wyświetla domyślne elementy członkowskie.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-808">The following example obtains the default member information of `MyClass` and displays the default members.</span></span>  
  
 [!code-cpp[Type_GetDefaultMembers#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetDefaultMembers/CPP/type_getdefaultmembers.cpp#1)]
 [!code-csharp[Type_GetDefaultMembers#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetDefaultMembers/CS/type_getdefaultmembers.cs#1)]
 [!code-vb[Type_GetDefaultMembers#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetDefaultMembers/VB/type_getdefaultmembers.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.Reflection.DefaultMemberAttribute" />
        <altmember cref="M:System.Type.GetMember(System.String)" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetElementType">
      <MemberSignature Language="C#" Value="public abstract Type GetElementType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetElementType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetElementType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetElementType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Type ^ GetElementType();" />
      <MemberSignature Language="F#" Value="abstract member GetElementType : unit -&gt; Type" Usage="type.GetElementType " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetElementType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-809">Po przesłonięciu w klasie pochodnej zwraca <see cref="T:System.Type" /> obiektu wchodzących w skład lub określone przez bieżący typ tablicy, wskaźnika lub odwołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-809">When overridden in a derived class, returns the <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer or reference type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-810">
            <see cref="T:System.Type" /> Obiektu wchodzących w skład lub odwołuje się bieżącej tablicy, wskaźnika lub typ referencyjny lub <see langword="null" /> Jeśli bieżące <see cref="T:System.Type" /> nie jest tablicą ani wskaźnikiem, nie jest przekazywany przez odwołanie lub reprezentuje typ ogólny lub parametr typu w Definicja typu ogólnego lub metody rodzajowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-810">The <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer, or reference type, or <see langword="null" /> if the current <see cref="T:System.Type" /> is not an array or a pointer, or is not passed by reference, or represents a generic type or a type parameter in the definition of a generic type or generic method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-811">Ta metoda zwraca `null` dla <xref:System.Array> klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-811">This method returns `null` for the <xref:System.Array> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-812">Poniższy przykład demonstruje użycie `GetElementType` metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-812">The following example demonstrates using the `GetElementType` method.</span></span>  
  
 [!code-cpp[TestGetElementType#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestGetElementType/CPP/TestGetElementType.cpp#1)]
 [!code-csharp[TestGetElementType#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestGetElementType/CS/testgetelementtype.cs#1)]
 [!code-vb[TestGetElementType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestGetElementType/VB/testgetelementtype.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.HasElementType" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumName">
      <MemberSignature Language="C#" Value="public virtual string GetEnumName (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetEnumName(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEnumName(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumName (value As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetEnumName(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member GetEnumName : obj -&gt; string&#xA;override this.GetEnumName : obj -&gt; string" Usage="type.GetEnumName value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="6cdc9-813">Wartość, której nazwa to do pobrania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-813">The value whose name is to be retrieved.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-814">Zwraca nazwę stałą, która ma określoną wartość, dla bieżącego typu wyliczeniowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-814">Returns the name of the constant that has the specified value, for the current enumeration type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-815">Nazwa elementu członkowskiego bieżący typ wyliczeniowy, który ma określoną wartość lub <see langword="null" /> Jeśli zostanie znaleziony taki stałej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-815">The name of the member of the current enumeration type that has the specified value, or <see langword="null" /> if no such constant is found.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6cdc9-816">Bieżący typ nie jest wyliczeniem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-816">The current type is not an enumeration.</span>
          </span>
          <span data-ttu-id="6cdc9-817">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-817">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-818">
            <paramref name="value" /> nie jest ani bieżącego typu ani nie ma ten sam typ podstawowy jako bieżącego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-818">
              <paramref name="value" /> is neither of the current type nor does it have the same underlying type as the current type.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-819">
            <paramref name="value" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-819">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumNames">
      <MemberSignature Language="C#" Value="public virtual string[] GetEnumNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetEnumNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEnumNames" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumNames () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::String ^&gt; ^ GetEnumNames();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumNames : unit -&gt; string[]&#xA;override this.GetEnumNames : unit -&gt; string[]" Usage="type.GetEnumNames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-820">Zwraca nazwy elementów członkowskich bieżącego typu wyliczenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-820">Returns the names of the members of the current enumeration type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-821">Tablica, która zawiera nazwy elementów członkowskich wyliczenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-821">An array that contains the names of the members of the enumeration.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-822">Elementy w tablicy zwracanej wartości są sortowane według wartości binarnych (czyli wartości bez znaku) stałych wyliczeniowych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-822">The elements of the return value array are sorted by the binary values (that is, the unsigned values) of the enumerated constants.</span></span> <span data-ttu-id="6cdc9-823">Jeśli tablica zawiera stałych wyliczeniowych z taką samą wartość, kolejność odpowiadających im nazw jest nieokreślona.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-823">If the array contains enumerated constants with the same value, the order of their corresponding names is unspecified.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6cdc9-824">Bieżący typ nie jest wyliczeniem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-824">The current type is not an enumeration.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumUnderlyingType">
      <MemberSignature Language="C#" Value="public virtual Type GetEnumUnderlyingType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetEnumUnderlyingType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEnumUnderlyingType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumUnderlyingType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetEnumUnderlyingType();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumUnderlyingType : unit -&gt; Type&#xA;override this.GetEnumUnderlyingType : unit -&gt; Type" Usage="type.GetEnumUnderlyingType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-825">Zwraca typ podstawowy elementu bieżącego typu wyliczenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-825">Returns the underlying type of the current enumeration type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-826">Podstawowy typ bieżącym wyliczeniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-826">The underlying type of the current enumeration.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-827">Domyślnie jest podstawowym typem wyliczenia w języku C# i Visual Basic <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-827">By default, the underlying type of an enumeration in C# and Visual Basic is <xref:System.Int32>.</span></span> <span data-ttu-id="6cdc9-828">Można określić innych typów całkowitych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-828">Other integer types can be specified.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6cdc9-829">Bieżący typ nie jest wyliczeniem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-829">The current type is not an enumeration.</span>
          </span>
          <span data-ttu-id="6cdc9-830">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-830">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-831">Typ wyliczeniowy nie jest prawidłowy, ponieważ zawiera ona co najmniej jedno pole wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-831">The enumeration type is not valid, because it contains more than one instance field.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumValues">
      <MemberSignature Language="C#" Value="public virtual Array GetEnumValues ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Array GetEnumValues() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEnumValues" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumValues () As Array" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Array ^ GetEnumValues();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumValues : unit -&gt; Array&#xA;override this.GetEnumValues : unit -&gt; Array" Usage="type.GetEnumValues " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Array</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-832">Zwraca tablicę wartości stałych do bieżącego typu wyliczenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-832">Returns an array of the values of the constants in the current enumeration type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-833">Tablica, która zawiera wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-833">An array that contains the values.</span>
          </span>
          <span data-ttu-id="6cdc9-834">Elementy tablicy są sortowane według wartości binarnych (czyli wartości bez znaku) stałe wyliczeń.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-834">The elements of the array are sorted by the binary values (that is, the unsigned values) of the enumeration constants.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6cdc9-835">Bieżący typ nie jest wyliczeniem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-835">The current type is not an enumeration.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEvent">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-836">Pobiera określone zdarzenie zadeklarowane lub dziedziczone przez bieżącą <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-836">Gets a specific event declared or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEvent">
      <MemberSignature Language="C#" Value="public System.Reflection.EventInfo GetEvent (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo GetEvent(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEvent (name As String) As EventInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::EventInfo ^ GetEvent(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetEvent : string -&gt; System.Reflection.EventInfo&#xA;override this.GetEvent : string -&gt; System.Reflection.EventInfo" Usage="type.GetEvent name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetEvent(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="6cdc9-837">Ciąg zawierający nazwę zdarzenia, które jest zadeklarowany lub jest dziedziczona przez bieżący <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-837">The string containing the name of an event that is declared or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-838">Zwraca <see cref="T:System.Reflection.EventInfo" /> obiekt reprezentujący określonego zdarzenia publiczne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-838">Returns the <see cref="T:System.Reflection.EventInfo" /> object representing the specified public event.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-839">Obiekt reprezentujący określonego zdarzenia publiczne, zadeklarowany lub dziedziczone przez bieżącą <see cref="T:System.Type" />, jeśli znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-839">The object representing the specified public event that is declared or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-840">Zdarzenie jest uważane za publiczne odbicie, jeżeli ma co najmniej jedną metodę lub metodę dostępu, która jest publiczna.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-840">An event is considered public to reflection if it has at least one method or accessor that is public.</span></span> <span data-ttu-id="6cdc9-841">W przeciwnym razie zdarzenie jest traktowane jako prywatne i trzeba użyć <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (w języku Visual Basic należy połączyć wartości za pomocą `Or`) aby z niej skorzystać.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-841">Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="6cdc9-842">Wyszukaj `name` jest uwzględniana wielkość liter.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-842">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="6cdc9-843">Wyszukiwanie uwzględnia publiczne static i public wystąpienia zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-843">The search includes public static and public instance events.</span></span>  
  
 <span data-ttu-id="6cdc9-844">W poniższej tabeli przedstawiono, jakie elementy członkowskie klasy podstawowej są zwracane przez `Get` metody uwzględnianiem typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-844">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="6cdc9-845">Typ elementu członkowskiego</span><span class="sxs-lookup"><span data-stu-id="6cdc9-845">Member Type</span></span>|<span data-ttu-id="6cdc9-846">Static</span><span class="sxs-lookup"><span data-stu-id="6cdc9-846">Static</span></span>|<span data-ttu-id="6cdc9-847">Niestatyczna</span><span class="sxs-lookup"><span data-stu-id="6cdc9-847">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="6cdc9-848">Konstruktor</span><span class="sxs-lookup"><span data-stu-id="6cdc9-848">Constructor</span></span>|<span data-ttu-id="6cdc9-849">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-849">No</span></span>|<span data-ttu-id="6cdc9-850">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-850">No</span></span>|  
|<span data-ttu-id="6cdc9-851">Pole</span><span class="sxs-lookup"><span data-stu-id="6cdc9-851">Field</span></span>|<span data-ttu-id="6cdc9-852">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-852">No</span></span>|<span data-ttu-id="6cdc9-853">Tak.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-853">Yes.</span></span> <span data-ttu-id="6cdc9-854">Pole jest zawsze ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-854">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6cdc9-855">Zdarzenie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-855">Event</span></span>|<span data-ttu-id="6cdc9-856">Nie dotyczy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-856">Not applicable</span></span>|<span data-ttu-id="6cdc9-857">Zasadą systemu typu jest to, że dziedziczenie jest takie samo, jak w przypadku metod, które implementują właściwość.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-857">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6cdc9-858">Odbicie traktuje właściwości jako ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-858">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-859">Patrz Uwaga 2 poniżej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-859">See note 2 below.</span></span>|  
|<span data-ttu-id="6cdc9-860">Metoda</span><span class="sxs-lookup"><span data-stu-id="6cdc9-860">Method</span></span>|<span data-ttu-id="6cdc9-861">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-861">No</span></span>|<span data-ttu-id="6cdc9-862">Tak.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-862">Yes.</span></span> <span data-ttu-id="6cdc9-863">Metodą (zarówno wirtualną, jak i niewirtualną) może być ukrycie przez nazwę lub przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-863">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6cdc9-864">Typu zagnieżdżony</span><span class="sxs-lookup"><span data-stu-id="6cdc9-864">Nested Type</span></span>|<span data-ttu-id="6cdc9-865">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-865">No</span></span>|<span data-ttu-id="6cdc9-866">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-866">No</span></span>|  
|<span data-ttu-id="6cdc9-867">Właściwość</span><span class="sxs-lookup"><span data-stu-id="6cdc9-867">Property</span></span>|<span data-ttu-id="6cdc9-868">Nie dotyczy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-868">Not applicable</span></span>|<span data-ttu-id="6cdc9-869">Zasadą systemu typu jest to, że dziedziczenie jest takie samo, jak w przypadku metod, które implementują właściwość.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-869">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6cdc9-870">Odbicie traktuje właściwości jako ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-870">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-871">Patrz Uwaga 2 poniżej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-871">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="6cdc9-872">Ukrycie przez nazwę i podpis dotyczy wszystkich części podpisu, w tym modyfikatorów niestandardowych, zwraca typy, typy parametrów, wartowników i niezarządzane konwencje wywoływania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-872">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="6cdc9-873">To jest porównanie binarne.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-873">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="6cdc9-874">W celu odbicia właściwości i zdarzenia są ukrywane przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-874">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-875">Jeśli istnieje właściwość z akcesorem pobierania i ustawiania w klasie bazowej, ale odziedziczona klasa ma tylko akcesor pobierania, właściwość klasy odziedziczonej ukrywa właściwości klasy bazowej, a nie można uzyskać dostępu do metody ustawiającej w klasie bazowej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-875">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="6cdc9-876">Atrybuty niestandardowe nie są częścią wspólnego typu systemowego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-876">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="6cdc9-877">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, Metoda ta zwraca <xref:System.Reflection.EventInfo> z parametrami typu zastąpionymi przez odpowiednie argumenty typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-877">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6cdc9-878">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, Metoda ta wyszukuje zdarzenia ograniczenia klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-878">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-879">Poniższy przykład tworzy <xref:System.Reflection.EventInfo> obiektu i pobiera zdarzenia dla klasy przycisku dla określonego zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-879">The following example creates an <xref:System.Reflection.EventInfo> object and gets the event for a button class for the specified event.</span></span>  
  
 [!code-cpp[Type_GetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetEvent/CPP/type_getevent.cpp#1)]
 [!code-csharp[Type_GetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetEvent/CS/type_getevent.cs#1)]
 [!code-vb[Type_GetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetEvent/VB/type_getevent.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-880">
            <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-880">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.EventInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetEvents" />
      </Docs>
    </Member>
    <Member MemberName="GetEvent">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.EventInfo GetEvent (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo GetEvent(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEvent (name As String, bindingAttr As BindingFlags) As EventInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::EventInfo ^ GetEvent(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetEvent : string * System.Reflection.BindingFlags -&gt; System.Reflection.EventInfo" Usage="type.GetEvent (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetEvent(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="6cdc9-881">Ciąg zawierający nazwę zdarzenia, które jest zadeklarowany lub jest dziedziczona przez bieżący <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-881">The string containing the name of an event which is declared or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="6cdc9-882">Maska bitów składająca się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-882">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="6cdc9-883">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-883">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-884">Zero, aby zwrócić <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-884">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-885">Po przesłonięciu w klasie pochodnej zwraca <see cref="T:System.Reflection.EventInfo" /> obiekt reprezentujący określonych zdarzeń, za pomocą ograniczeń w określonym powiązaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-885">When overridden in a derived class, returns the <see cref="T:System.Reflection.EventInfo" /> object representing the specified event, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-886">Obiekt reprezentujący określonego zdarzenia, które jest zadeklarowany lub jest dziedziczona przez bieżący <see cref="T:System.Type" />, jeśli znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-886">The object representing the specified event that is declared or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-887">Następujące <xref:System.Reflection.BindingFlags> flagi filtru może służyć do definiowania zdarzeń do uwzględnienia w wyszukiwaniu:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-887">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which events to include in the search:</span></span>  
  
-   <span data-ttu-id="6cdc9-888">Należy określić `BindingFlags.Instance` lub `BindingFlags.Static` w celu uzyskania zwrotu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-888">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="6cdc9-889">Określ `BindingFlags.Public` obejmujący publicznych zdarzeń w wyszukiwaniu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-889">Specify `BindingFlags.Public` to include public events in the search.</span></span>  
  
-   <span data-ttu-id="6cdc9-890">Określ `BindingFlags.NonPublic` obejmujący zdarzenia niepubliczne (czyli prywatne, wewnętrzne i chronione zdarzenia) w wyszukiwaniu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-890">Specify `BindingFlags.NonPublic` to include non-public events (that is, private, internal, and protected events) in the search.</span></span>  
  
-   <span data-ttu-id="6cdc9-891">Określ `BindingFlags.FlattenHierarchy` obejmujący `public` i `protected` statyczne elementy członkowskie w hierarchii; `private` statyczne elementy członkowskie w klasie dziedziczonej nie są uwzględniane.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-891">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="6cdc9-892">Następujące <xref:System.Reflection.BindingFlags> flagi modyfikatora może służyć do zmiany sposobu działania wyszukiwania:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-892">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="6cdc9-893">`BindingFlags.IgnoreCase` Aby zignorować wielkość liter `name`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-893">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="6cdc9-894">`BindingFlags.DeclaredOnly` Aby wyszukać tylko zdarzenia, które są zadeklarowane w <xref:System.Type>, nie te zdarzenia, które zostały po prostu odziedziczone.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-894">`BindingFlags.DeclaredOnly` to search only the events declared on the <xref:System.Type>, not events that were simply inherited.</span></span>  
  
 <span data-ttu-id="6cdc9-895">Aby uzyskać więcej informacji, zobacz <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-895">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="6cdc9-896">Zdarzenie jest uważane za publiczne odbicie, jeżeli ma co najmniej jedną metodę lub metodę dostępu, która jest publiczna.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-896">An event is considered public to reflection if it has at least one method or accessor that is public.</span></span> <span data-ttu-id="6cdc9-897">W przeciwnym razie zdarzenie jest traktowane jako prywatne i trzeba użyć <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (w języku Visual Basic należy połączyć wartości za pomocą `Or`) aby z niej skorzystać.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-897">Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="6cdc9-898">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, Metoda ta zwraca <xref:System.Reflection.EventInfo> z parametrami typu zastąpionymi przez odpowiednie argumenty typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-898">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6cdc9-899">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, Metoda ta wyszukuje zdarzenia ograniczenia klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-899">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-900">Poniższy przykład kodu wykorzystuje <xref:System.Type.GetEvent%28System.String%2CSystem.Reflection.BindingFlags%29> metody do wyszukiwania typu publiczne lub niepubliczna zdarzenie o nazwie "Kliknij" który nie jest `static` (`Shared` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-900">The following code example uses the <xref:System.Type.GetEvent%28System.String%2CSystem.Reflection.BindingFlags%29> method to search a type for a public or non-public event named "Click" that is not `static` (`Shared` in Visual Basic).</span></span>  
  
 [!code-cpp[Type_GetEvent1#1](~/samples/snippets/cpp/VS_Snippets_CLR/type_getevent1/CPP/type_getevent1.cpp#1)]
 [!code-csharp[Type_GetEvent1#1](~/samples/snippets/csharp/VS_Snippets_CLR/type_getevent1/CS/type_getevent1.cs#1)]
 [!code-vb[Type_GetEvent1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/type_getevent1/VB/type_getevent1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-901">
            <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-901">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.EventInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetEvents" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEvents">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-902">Pobiera zdarzenia, które są zadeklarowane lub dziedziczone przez bieżącą <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-902">Gets the events that are declared or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.EventInfo[] GetEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo[] GetEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEvents" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEvents () As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents();" />
      <MemberSignature Language="F#" Value="abstract member GetEvents : unit -&gt; System.Reflection.EventInfo[]&#xA;override this.GetEvents : unit -&gt; System.Reflection.EventInfo[]" Usage="type.GetEvents " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetEvents</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-903">Zwraca wszystkie publiczne zdarzenia, które są zadeklarowane lub dziedziczone przez bieżącą <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-903">Returns all the public events that are declared or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-904">Tablica <see cref="T:System.Reflection.EventInfo" /> obiekty reprezentujące wszystkie zdarzenia publiczne, które są zadeklarowane lub dziedziczone przez bieżącą <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-904">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all the public events which are declared or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="6cdc9-905">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-905">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-906">Pusta tablica typu <see cref="T:System.Reflection.EventInfo" />, jeśli bieżący <see cref="T:System.Type" /> nie ma publicznych zdarzeń.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-906">An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have public events.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-907">Zdarzenie jest uważane za publiczne odbicie, jeżeli ma co najmniej jedną metodę lub metodę dostępu, która jest publiczna.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-907">An event is considered public to reflection if it has at least one method or accessor that is public.</span></span> <span data-ttu-id="6cdc9-908">W przeciwnym razie zdarzenie jest traktowane jako prywatne i trzeba użyć <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (w języku Visual Basic należy połączyć wartości za pomocą `Or`) aby z niej skorzystać.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-908">Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="6cdc9-909"><xref:System.Type.GetEvents%2A> Metoda nie zwraca zdarzeń w określonej kolejności, takie jak alfabetycznej lub kolejności deklaracji.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-909">The <xref:System.Type.GetEvents%2A> method does not return events in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="6cdc9-910">Twój kod nie może zależeć od kolejności, w której zwracane są zdarzenia, ponieważ kolejność się zmienia.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-910">Your code must not depend on the order in which events are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="6cdc9-911">Metoda ta może być zastąpiona przez klasę pochodną.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-911">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="6cdc9-912">W poniższej tabeli przedstawiono, jakie elementy członkowskie klasy podstawowej są zwracane przez `Get` metody uwzględnianiem typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-912">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="6cdc9-913">Typ elementu członkowskiego</span><span class="sxs-lookup"><span data-stu-id="6cdc9-913">Member Type</span></span>|<span data-ttu-id="6cdc9-914">Static</span><span class="sxs-lookup"><span data-stu-id="6cdc9-914">Static</span></span>|<span data-ttu-id="6cdc9-915">Niestatyczna</span><span class="sxs-lookup"><span data-stu-id="6cdc9-915">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="6cdc9-916">Konstruktor</span><span class="sxs-lookup"><span data-stu-id="6cdc9-916">Constructor</span></span>|<span data-ttu-id="6cdc9-917">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-917">No</span></span>|<span data-ttu-id="6cdc9-918">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-918">No</span></span>|  
|<span data-ttu-id="6cdc9-919">Pole</span><span class="sxs-lookup"><span data-stu-id="6cdc9-919">Field</span></span>|<span data-ttu-id="6cdc9-920">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-920">No</span></span>|<span data-ttu-id="6cdc9-921">Tak.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-921">Yes.</span></span> <span data-ttu-id="6cdc9-922">Pole jest zawsze ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-922">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6cdc9-923">Zdarzenie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-923">Event</span></span>|<span data-ttu-id="6cdc9-924">Nie dotyczy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-924">Not applicable</span></span>|<span data-ttu-id="6cdc9-925">Zasadą systemu typu jest to, że dziedziczenie jest takie samo, jak w przypadku metod, które implementują właściwość.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-925">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6cdc9-926">Odbicie traktuje właściwości jako ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-926">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-927">Patrz Uwaga 2 poniżej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-927">See note 2 below.</span></span>|  
|<span data-ttu-id="6cdc9-928">Metoda</span><span class="sxs-lookup"><span data-stu-id="6cdc9-928">Method</span></span>|<span data-ttu-id="6cdc9-929">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-929">No</span></span>|<span data-ttu-id="6cdc9-930">Tak.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-930">Yes.</span></span> <span data-ttu-id="6cdc9-931">Metodą (zarówno wirtualną, jak i niewirtualną) może być ukrycie przez nazwę lub przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-931">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6cdc9-932">Typu zagnieżdżony</span><span class="sxs-lookup"><span data-stu-id="6cdc9-932">Nested Type</span></span>|<span data-ttu-id="6cdc9-933">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-933">No</span></span>|<span data-ttu-id="6cdc9-934">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-934">No</span></span>|  
|<span data-ttu-id="6cdc9-935">Właściwość</span><span class="sxs-lookup"><span data-stu-id="6cdc9-935">Property</span></span>|<span data-ttu-id="6cdc9-936">Nie dotyczy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-936">Not applicable</span></span>|<span data-ttu-id="6cdc9-937">Zasadą systemu typu jest to, że dziedziczenie jest takie samo, jak w przypadku metod, które implementują właściwość.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-937">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6cdc9-938">Odbicie traktuje właściwości jako ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-938">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-939">Patrz Uwaga 2 poniżej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-939">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="6cdc9-940">Ukrycie przez nazwę i podpis dotyczy wszystkich części podpisu, w tym modyfikatorów niestandardowych, zwraca typy, typy parametrów, wartowników i niezarządzane konwencje wywoływania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-940">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="6cdc9-941">To jest porównanie binarne.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-941">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="6cdc9-942">W celu odbicia właściwości i zdarzenia są ukrywane przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-942">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-943">Jeśli istnieje właściwość z akcesorem pobierania i ustawiania w klasie bazowej, ale odziedziczona klasa ma tylko akcesor pobierania, właściwość klasy odziedziczonej ukrywa właściwości klasy bazowej, a nie można uzyskać dostępu do metody ustawiającej w klasie bazowej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-943">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="6cdc9-944">Atrybuty niestandardowe nie są częścią wspólnego typu systemowego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-944">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="6cdc9-945">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, Metoda ta zwraca <xref:System.Reflection.EventInfo> obiektów z parametrami typu zastąpionymi przez odpowiednie argumenty typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-945">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6cdc9-946">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, Metoda ta wyszukuje zdarzenia ograniczenia klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-946">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-947">W poniższym przykładzie uzyskano tablicę <xref:System.Reflection.EventInfo> obiektów, pobiera wszystkie zdarzenia dla `Button` klasy, a następnie wyświetla nazwy zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-947">The following example obtains an array of <xref:System.Reflection.EventInfo> objects, gets all the events for a `Button` class, and displays the event names.</span></span> <span data-ttu-id="6cdc9-948">Aby skompilować przykład Visual Basic, użyj następującego polecenia:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-948">To compile the Visual Basic example, use the following command line:</span></span>  
  
 `vbc type_getevents1.vb /r:System.Windows.Forms.dll /r:System.dll`  
  
 [!code-cpp[Type_GetEvents1#1](~/samples/snippets/cpp/VS_Snippets_CLR/type_getevents1/CPP/type_getevents1.cpp#1)]
 [!code-csharp[Type_GetEvents1#1](~/samples/snippets/csharp/VS_Snippets_CLR/type_getevents1/CS/type_getevents1.cs#1)]
 [!code-vb[Type_GetEvents1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/type_getevents1/VB/type_getevents1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.EventInfo" />
        <altmember cref="M:System.Type.GetEvent(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo[] GetEvents(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEvents(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEvents (bindingAttr As BindingFlags) As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetEvents : System.Reflection.BindingFlags -&gt; System.Reflection.EventInfo[]" Usage="type.GetEvents bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetEvents(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="6cdc9-949">Maska bitów składająca się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-949">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="6cdc9-950">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-950">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-951">Zero, aby zwrócić <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-951">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-952">W przypadku przesłonięcia w klasie pochodnej, wyszukuje zdarzenia, które są zadeklarowane lub dziedziczone przez bieżącą <see cref="T:System.Type" />, za pomocą ograniczeń w określonym powiązaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-952">When overridden in a derived class, searches for events that are declared or inherited by the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-953">Tablica <see cref="T:System.Reflection.EventInfo" /> obiekty reprezentujące wszystkie zdarzenia, które są zadeklarowane lub dziedziczone przez bieżącą <see cref="T:System.Type" /> zgodnych ograniczeń w określonym powiązaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-953">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all events that are declared or inherited by the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="6cdc9-954">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-954">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-955">Pusta tablica typu <see cref="T:System.Reflection.EventInfo" />, jeśli bieżący <see cref="T:System.Type" /> nie ma zdarzenia, lub jeśli żadna z tych zdarzeń ograniczenia wiązania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-955">An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have events, or if none of the events match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-956"><xref:System.Type.GetEvents%2A> Metoda nie zwraca zdarzeń w określonej kolejności, takie jak alfabetycznej lub kolejności deklaracji.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-956">The <xref:System.Type.GetEvents%2A> method does not return events in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="6cdc9-957">Twój kod nie może zależeć od kolejności, w której zwracane są zdarzenia, ponieważ kolejność się zmienia.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-957">Your code must not depend on the order in which events are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="6cdc9-958">Następujące <xref:System.Reflection.BindingFlags> flagi filtru może służyć do definiowania zdarzeń do uwzględnienia w wyszukiwaniu:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-958">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which events to include in the search:</span></span>  
  
-   <span data-ttu-id="6cdc9-959">Należy określić `BindingFlags.Instance` lub `BindingFlags.Static` w celu uzyskania zwrotu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-959">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="6cdc9-960">Określ `BindingFlags.Public` obejmujący publicznych zdarzeń w wyszukiwaniu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-960">Specify `BindingFlags.Public` to include public events in the search.</span></span>  
  
-   <span data-ttu-id="6cdc9-961">Określ `BindingFlags.NonPublic` obejmujący zdarzenia niepubliczne (czyli prywatne, wewnętrzne i chronione zdarzenia) w wyszukiwaniu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-961">Specify `BindingFlags.NonPublic` to include non-public events (that is, private, internal, and protected events) in the search.</span></span> <span data-ttu-id="6cdc9-962">Tylko chroniony i zwracane są wewnętrzne zdarzenia w klasach bazowych; prywatne zdarzeń w klasach bazowych nie są zwracane.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-962">Only protected and internal events on base classes are returned; private events on base classes are not returned.</span></span>  
  
-   <span data-ttu-id="6cdc9-963">Określ `BindingFlags.FlattenHierarchy` obejmujący `public` i `protected` statyczne elementy członkowskie w hierarchii; `private` statyczne elementy członkowskie w klasie dziedziczonej nie są uwzględniane.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-963">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="6cdc9-964">Następujące <xref:System.Reflection.BindingFlags> flagi modyfikatora może służyć do zmiany sposobu działania wyszukiwania:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-964">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="6cdc9-965">`BindingFlags.DeclaredOnly` Aby wyszukać tylko zdarzenia, które są zadeklarowane w <xref:System.Type>, nie te zdarzenia, które zostały po prostu odziedziczone.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-965">`BindingFlags.DeclaredOnly` to search only the events declared on the <xref:System.Type>, not events that were simply inherited.</span></span>  
  
 <span data-ttu-id="6cdc9-966">Aby uzyskać więcej informacji, zobacz <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-966">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="6cdc9-967">Zdarzenie jest uważane za publiczne odbicie, jeżeli ma co najmniej jedną metodę lub metodę dostępu, która jest publiczna.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-967">An event is considered public to reflection if it has at least one method or accessor that is public.</span></span> <span data-ttu-id="6cdc9-968">W przeciwnym razie zdarzenie jest traktowane jako prywatne i trzeba użyć <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (w języku Visual Basic należy połączyć wartości za pomocą `Or`) aby z niej skorzystać.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-968">Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="6cdc9-969">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, Metoda ta zwraca <xref:System.Reflection.EventInfo> obiektów z parametrami typu zastąpionymi przez odpowiednie argumenty typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-969">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6cdc9-970">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, Metoda ta wyszukuje zdarzenia ograniczenia klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-970">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-971">W poniższym przykładzie uzyskano tablicę <xref:System.Reflection.EventInfo> obiektami spełniającymi podane flagi określone powiązanie pobiera wszystkie zdarzenia dla `Button` klasy, a następnie wyświetla nazwy zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-971">The following example obtains an array of <xref:System.Reflection.EventInfo> objects that match the specified binding flags, gets all the events for a `Button` class, and displays the event names.</span></span> <span data-ttu-id="6cdc9-972">Aby skompilować przykład Visual Basic, użyj następującego polecenia:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-972">To compile the Visual Basic example, use the following command line:</span></span>  
  
 `vbc type_getevents2.vb /r:System.Windows.Forms.dll /r:System.dll`  
  
 [!code-cpp[Type_GetEvents2#1](~/samples/snippets/cpp/VS_Snippets_CLR/type_getevents2/CPP/type_getevents2.cpp#1)]
 [!code-csharp[Type_GetEvents2#1](~/samples/snippets/csharp/VS_Snippets_CLR/type_getevents2/CS/type_getevents2.cs#1)]
 [!code-vb[Type_GetEvents2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/type_getevents2/VB/type_getevents2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.EventInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetEvent(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetField">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-973">Pobiera określonego pola bieżącego <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-973">Gets a specific field of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo GetField (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo GetField(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetField(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetField (name As String) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::FieldInfo ^ GetField(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetField : string -&gt; System.Reflection.FieldInfo&#xA;override this.GetField : string -&gt; System.Reflection.FieldInfo" Usage="type.GetField name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetField(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="6cdc9-974">Ciąg zawierający nazwę pola danych można pobrać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-974">The string containing the name of the data field to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-975">Wyszukuje pole publiczne o określonej nazwie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-975">Searches for the public field with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-976">Obiekt reprezentujący publiczne pole o określonej nazwie, jeśli znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-976">An object representing the public field with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-977">Wyszukaj `name` jest uwzględniana wielkość liter.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-977">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="6cdc9-978">Wyszukiwanie uwzględnia publiczne statyczne i publiczne pola wystąpień.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-978">The search includes public static and public instance fields.</span></span>  
  
 <span data-ttu-id="6cdc9-979">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, Metoda ta zwraca <xref:System.Reflection.FieldInfo> z parametrami typu zastąpionymi przez odpowiednie argumenty typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-979">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6cdc9-980">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, Metoda ta wyszukuje pola ograniczenia klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-980">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the fields of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-981">Poniższy przykład pobiera `Type` dla określonej klasy obiektu, uzyskuje <xref:System.Reflection.FieldInfo> obiektu dla pola i wyświetla wartość pola.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-981">The following example gets the `Type` object for the specified class, obtains the <xref:System.Reflection.FieldInfo> object for the field, and displays the value of the field.</span></span>  
  
 [!code-cpp[Type_GetField#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetField/CPP/type_getfield.cpp#1)]
 [!code-csharp[Type_GetField#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetField/CS/type_getfield.cs#1)]
 [!code-vb[Type_GetField#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetField/VB/type_getfield.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-982">
            <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-982">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="6cdc9-983">To <see cref="T:System.Type" /> obiekt jest <see cref="T:System.Reflection.Emit.TypeBuilder" /> którego <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> nie została jeszcze wywołana metoda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-983">This <see cref="T:System.Type" /> object is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> whose <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method has not yet been called.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.FieldInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetFields" />
      </Docs>
    </Member>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo GetField(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetField (name As String, bindingAttr As BindingFlags) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::FieldInfo ^ GetField(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetField : string * System.Reflection.BindingFlags -&gt; System.Reflection.FieldInfo" Usage="type.GetField (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetField(System.String,System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetField(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="6cdc9-984">Ciąg zawierający nazwę pola danych można pobrać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-984">The string containing the name of the data field to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="6cdc9-985">Maska bitów składająca się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-985">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="6cdc9-986">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-986">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-987">Zero, aby zwrócić <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-987">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-988">Wyszukuje określonego pola, za pomocą ograniczeń w określonym powiązaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-988">Searches for the specified field, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-989">Obiekt reprezentujący pola, które spełnia określone wymagania, jeśli znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-989">An object representing the field that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-990">W poniższej tabeli przedstawiono, jakie elementy członkowskie klasy podstawowej są zwracane przez `Get` metody uwzględnianiem typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-990">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="6cdc9-991">Typ elementu członkowskiego</span><span class="sxs-lookup"><span data-stu-id="6cdc9-991">Member Type</span></span>|<span data-ttu-id="6cdc9-992">Static</span><span class="sxs-lookup"><span data-stu-id="6cdc9-992">Static</span></span>|<span data-ttu-id="6cdc9-993">Niestatyczna</span><span class="sxs-lookup"><span data-stu-id="6cdc9-993">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="6cdc9-994">Konstruktor</span><span class="sxs-lookup"><span data-stu-id="6cdc9-994">Constructor</span></span>|<span data-ttu-id="6cdc9-995">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-995">No</span></span>|<span data-ttu-id="6cdc9-996">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-996">No</span></span>|  
|<span data-ttu-id="6cdc9-997">Pole</span><span class="sxs-lookup"><span data-stu-id="6cdc9-997">Field</span></span>|<span data-ttu-id="6cdc9-998">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-998">No</span></span>|<span data-ttu-id="6cdc9-999">Tak.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-999">Yes.</span></span> <span data-ttu-id="6cdc9-1000">Pole jest zawsze ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1000">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6cdc9-1001">Zdarzenie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1001">Event</span></span>|<span data-ttu-id="6cdc9-1002">Nie dotyczy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1002">Not applicable</span></span>|<span data-ttu-id="6cdc9-1003">Zasadą systemu typu jest to, że dziedziczenie jest takie samo, jak w przypadku metod, które implementują właściwość.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1003">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6cdc9-1004">Odbicie traktuje właściwości jako ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1004">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-1005">Patrz Uwaga 2 poniżej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1005">See note 2 below.</span></span>|  
|<span data-ttu-id="6cdc9-1006">Metoda</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1006">Method</span></span>|<span data-ttu-id="6cdc9-1007">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1007">No</span></span>|<span data-ttu-id="6cdc9-1008">Tak.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1008">Yes.</span></span> <span data-ttu-id="6cdc9-1009">Metodą (zarówno wirtualną, jak i niewirtualną) może być ukrycie przez nazwę lub przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1009">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6cdc9-1010">Typu zagnieżdżony</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1010">Nested Type</span></span>|<span data-ttu-id="6cdc9-1011">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1011">No</span></span>|<span data-ttu-id="6cdc9-1012">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1012">No</span></span>|  
|<span data-ttu-id="6cdc9-1013">Właściwość</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1013">Property</span></span>|<span data-ttu-id="6cdc9-1014">Nie dotyczy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1014">Not applicable</span></span>|<span data-ttu-id="6cdc9-1015">Zasadą systemu typu jest to, że dziedziczenie jest takie samo, jak w przypadku metod, które implementują właściwość.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1015">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6cdc9-1016">Odbicie traktuje właściwości jako ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1016">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-1017">Patrz Uwaga 2 poniżej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1017">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="6cdc9-1018">Ukrycie przez nazwę i podpis dotyczy wszystkich części podpisu, w tym modyfikatorów niestandardowych, zwraca typy, typy parametrów, wartowników i niezarządzane konwencje wywoływania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1018">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="6cdc9-1019">To jest porównanie binarne.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1019">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="6cdc9-1020">W celu odbicia właściwości i zdarzenia są ukrywane przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1020">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-1021">Jeśli istnieje właściwość z akcesorem pobierania i ustawiania w klasie bazowej, ale odziedziczona klasa ma tylko akcesor pobierania, właściwość klasy odziedziczonej ukrywa właściwości klasy bazowej, a nie można uzyskać dostępu do metody ustawiającej w klasie bazowej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1021">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="6cdc9-1022">Atrybuty niestandardowe nie są częścią wspólnego typu systemowego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1022">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="6cdc9-1023">Następujące <xref:System.Reflection.BindingFlags> flagi filtru może służyć do definiowania pola do uwzględnienia w wyszukiwaniu:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1023">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which fields to include in the search:</span></span>  
  
-   <span data-ttu-id="6cdc9-1024">Należy określić `BindingFlags.Instance` lub `BindingFlags.Static` w celu uzyskania zwrotu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1024">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="6cdc9-1025">Określ `BindingFlags.Public` obejmujący pola publiczne w wyszukiwaniu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1025">Specify `BindingFlags.Public` to include public fields in the search.</span></span>  
  
-   <span data-ttu-id="6cdc9-1026">Określ `BindingFlags.NonPublic` obejmujący niepubliczne (czyli prywatne, wewnętrzne i chronione, pola) w wyszukiwaniu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1026">Specify `BindingFlags.NonPublic` to include non-public fields (that is, private, internal, and protected fields) in the search.</span></span>  
  
-   <span data-ttu-id="6cdc9-1027">Określ `BindingFlags.FlattenHierarchy` obejmujący `public` i `protected` statyczne elementy członkowskie w hierarchii; `private` statyczne elementy członkowskie w klasie dziedziczonej nie są uwzględniane.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1027">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="6cdc9-1028">Następujące <xref:System.Reflection.BindingFlags> flagi modyfikatora może służyć do zmiany sposobu działania wyszukiwania:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1028">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="6cdc9-1029">`BindingFlags.IgnoreCase` Aby zignorować wielkość liter `name`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1029">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="6cdc9-1030">`BindingFlags.DeclaredOnly` Aby wyszukać tylko te pola, które są zadeklarowane w <xref:System.Type>, nie w przypadku pól, które zostały po prostu odziedziczone.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1030">`BindingFlags.DeclaredOnly` to search only the fields declared on the <xref:System.Type>, not fields that were simply inherited.</span></span>  
  
 <span data-ttu-id="6cdc9-1031">Aby uzyskać więcej informacji, zobacz <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1031">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="6cdc9-1032">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, Metoda ta zwraca <xref:System.Reflection.FieldInfo> z parametrami typu zastąpionymi przez odpowiednie argumenty typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1032">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6cdc9-1033">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, Metoda ta wyszukuje pola ograniczenia klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1033">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the fields of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-1034">Poniższy przykład pobiera `Type` dla określonej klasy obiektu, uzyskuje <xref:System.Reflection.FieldInfo> obiektu dla pola, które odpowiada flagi określone powiązanie i wyświetla wartość pola.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1034">The following example gets the `Type` object for the specified class, obtains the <xref:System.Reflection.FieldInfo> object for the field that matches the specified binding flags, and displays the value of the field.</span></span>  
  
 [!code-cpp[Type_GetField#2](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetField/CPP/type_getfield.cpp#2)]
 [!code-csharp[Type_GetField#2](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetField/CS/type_getfield.cs#2)]
 [!code-vb[Type_GetField#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetField/VB/type_getfield.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-1035">
            <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1035">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.FieldInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetFields" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFields">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-1036">Pobiera pola bieżącego <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1036">Gets the fields of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo[] GetFields ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo[] GetFields() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetFields" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFields () As FieldInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ GetFields();" />
      <MemberSignature Language="F#" Value="abstract member GetFields : unit -&gt; System.Reflection.FieldInfo[]&#xA;override this.GetFields : unit -&gt; System.Reflection.FieldInfo[]" Usage="type.GetFields " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetFields</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-1037">Zwraca wszystkie publiczne pola bieżącego <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1037">Returns all the public fields of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-1038">Tablica <see cref="T:System.Reflection.FieldInfo" /> obiektów reprezentujących pola publiczne zdefiniowane dla bieżącego <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1038">An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all the public fields defined for the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="6cdc9-1039">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1039">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1040">Pusta tablica typu <see cref="T:System.Reflection.FieldInfo" />, jeśli nie ma publicznej pól zdefiniowanych dla bieżącego <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1040">An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no public fields are defined for the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-1041"><xref:System.Type.GetFields%2A> Metoda nie zwraca pola w określonej kolejności, takie jak alfabetycznej lub kolejności deklaracji.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1041">The <xref:System.Type.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="6cdc9-1042">Twój kod nie może zależeć od kolejności, w której zwracane są pola, ponieważ kolejność się zmienia.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1042">Your code must not depend on the order in which fields are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="6cdc9-1043">W poniższej tabeli przedstawiono, jakie elementy członkowskie klasy podstawowej są zwracane przez `Get` metody uwzględnianiem typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1043">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="6cdc9-1044">Typ elementu członkowskiego</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1044">Member Type</span></span>|<span data-ttu-id="6cdc9-1045">Static</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1045">Static</span></span>|<span data-ttu-id="6cdc9-1046">Niestatyczna</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1046">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="6cdc9-1047">Konstruktor</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1047">Constructor</span></span>|<span data-ttu-id="6cdc9-1048">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1048">No</span></span>|<span data-ttu-id="6cdc9-1049">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1049">No</span></span>|  
|<span data-ttu-id="6cdc9-1050">Pole</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1050">Field</span></span>|<span data-ttu-id="6cdc9-1051">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1051">No</span></span>|<span data-ttu-id="6cdc9-1052">Tak.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1052">Yes.</span></span> <span data-ttu-id="6cdc9-1053">Pole jest zawsze ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1053">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6cdc9-1054">Zdarzenie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1054">Event</span></span>|<span data-ttu-id="6cdc9-1055">Nie dotyczy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1055">Not applicable</span></span>|<span data-ttu-id="6cdc9-1056">Zasadą systemu typu jest to, że dziedziczenie jest takie samo, jak w przypadku metod, które implementują właściwość.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1056">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6cdc9-1057">Odbicie traktuje właściwości jako ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1057">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-1058">Patrz Uwaga 2 poniżej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1058">See note 2 below.</span></span>|  
|<span data-ttu-id="6cdc9-1059">Metoda</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1059">Method</span></span>|<span data-ttu-id="6cdc9-1060">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1060">No</span></span>|<span data-ttu-id="6cdc9-1061">Tak.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1061">Yes.</span></span> <span data-ttu-id="6cdc9-1062">Metodą (zarówno wirtualną, jak i niewirtualną) może być ukrycie przez nazwę lub przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1062">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6cdc9-1063">Typu zagnieżdżony</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1063">Nested Type</span></span>|<span data-ttu-id="6cdc9-1064">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1064">No</span></span>|<span data-ttu-id="6cdc9-1065">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1065">No</span></span>|  
|<span data-ttu-id="6cdc9-1066">Właściwość</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1066">Property</span></span>|<span data-ttu-id="6cdc9-1067">Nie dotyczy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1067">Not applicable</span></span>|<span data-ttu-id="6cdc9-1068">Zasadą systemu typu jest to, że dziedziczenie jest takie samo, jak w przypadku metod, które implementują właściwość.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1068">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6cdc9-1069">Odbicie traktuje właściwości jako ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1069">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-1070">Patrz Uwaga 2 poniżej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1070">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="6cdc9-1071">Ukrycie przez nazwę i podpis dotyczy wszystkich części podpisu, w tym modyfikatorów niestandardowych, zwraca typy, typy parametrów, wartowników i niezarządzane konwencje wywoływania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1071">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="6cdc9-1072">To jest porównanie binarne.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1072">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="6cdc9-1073">W celu odbicia właściwości i zdarzenia są ukrywane przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1073">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-1074">Jeśli istnieje właściwość z akcesorem pobierania i ustawiania w klasie bazowej, ale odziedziczona klasa ma tylko akcesor pobierania, właściwość klasy odziedziczonej ukrywa właściwości klasy bazowej, a nie można uzyskać dostępu do metody ustawiającej w klasie bazowej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1074">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="6cdc9-1075">Atrybuty niestandardowe nie są częścią wspólnego typu systemowego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1075">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="6cdc9-1076">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, Metoda ta zwraca <xref:System.Reflection.FieldInfo> obiektów z parametrami typu zastąpionymi przez odpowiednie argumenty typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1076">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6cdc9-1077">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, Metoda ta wyszukuje pola publiczne ograniczenia klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1077">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the public fields of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-1078">Poniższy przykład pokazuje wykorzystanie `GetFields()` metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1078">The following example shows a use of the `GetFields()` method.</span></span>  
  
 [!code-cpp[FieldInfo_IsSpecialName#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_IsSpecialName/CPP/fieldinfo_isspecialname.cpp#1)]
 [!code-csharp[FieldInfo_IsSpecialName#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_IsSpecialName/CS/fieldinfo_isspecialname.cs#1)]
 [!code-vb[FieldInfo_IsSpecialName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_IsSpecialName/VB/fieldinfo_isspecialname.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldInfo" />
        <altmember cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo[] GetFields(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetFields(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetFields (bindingAttr As BindingFlags) As FieldInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ GetFields(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetFields : System.Reflection.BindingFlags -&gt; System.Reflection.FieldInfo[]" Usage="type.GetFields bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetFields(System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="6cdc9-1079">Maska bitów składająca się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1079">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="6cdc9-1080">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1080">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1081">Zero, aby zwrócić <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1081">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-1082">W przypadku przesłonięcia w klasie pochodnej, wyszukuje pól zdefiniowanych dla bieżącego <see cref="T:System.Type" />, za pomocą ograniczeń w określonym powiązaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1082">When overridden in a derived class, searches for the fields defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-1083">Tablica <see cref="T:System.Reflection.FieldInfo" /> obiekty reprezentujące wszystkie pola zdefiniowane dla bieżącego <see cref="T:System.Type" /> zgodnych ograniczeń w określonym powiązaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1083">An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all fields defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="6cdc9-1084">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1084">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1085">Pusta tablica typu <see cref="T:System.Reflection.FieldInfo" />, jeśli nie ma pól zdefiniowanych dla bieżącego <see cref="T:System.Type" />, lub jeśli żadne z pól zdefiniowanych być zgodne z ograniczeniami powiązania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1085">An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no fields are defined for the current <see cref="T:System.Type" />, or if none of the defined fields match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-1086"><xref:System.Type.GetFields%2A> Metoda nie zwraca pola w określonej kolejności, takie jak alfabetycznej lub kolejności deklaracji.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1086">The <xref:System.Type.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="6cdc9-1087">Twój kod nie może zależeć od kolejności, w której zwracane są pola, ponieważ kolejność się zmienia.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1087">Your code must not depend on the order in which fields are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="6cdc9-1088">Następujące <xref:System.Reflection.BindingFlags> flagi filtru może służyć do definiowania pola do uwzględnienia w wyszukiwaniu:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1088">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which fields to include in the search:</span></span>  
  
-   <span data-ttu-id="6cdc9-1089">Należy określić `BindingFlags.Instance` lub `BindingFlags.Static` w celu uzyskania zwrotu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1089">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="6cdc9-1090">Określ `BindingFlags.Public` obejmujący pola publiczne w wyszukiwaniu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1090">Specify `BindingFlags.Public` to include public fields in the search.</span></span>  
  
-   <span data-ttu-id="6cdc9-1091">Określ `BindingFlags.NonPublic` obejmujący niepubliczne (czyli prywatne, wewnętrzne i chronione, pola) w wyszukiwaniu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1091">Specify `BindingFlags.NonPublic` to include non-public fields (that is, private, internal, and protected fields) in the search.</span></span> <span data-ttu-id="6cdc9-1092">Tylko chronionych i wewnętrznych pól klasy bazowe są zwracane; pola prywatne na klasach bazowych nie są zwracane.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1092">Only protected and internal fields on base classes are returned; private fields on base classes are not returned.</span></span>  
  
-   <span data-ttu-id="6cdc9-1093">Określ `BindingFlags.FlattenHierarchy` obejmujący `public` i `protected` statyczne elementy członkowskie w hierarchii; `private` statyczne elementy członkowskie w klasie dziedziczonej nie są uwzględniane.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1093">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="6cdc9-1094">Następujące <xref:System.Reflection.BindingFlags> flagi modyfikatora może służyć do zmiany sposobu działania wyszukiwania:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1094">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="6cdc9-1095">`BindingFlags.DeclaredOnly` Aby wyszukać tylko te pola, które są zadeklarowane w <xref:System.Type>, nie w przypadku pól, które zostały po prostu odziedziczone.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1095">`BindingFlags.DeclaredOnly` to search only the fields declared on the <xref:System.Type>, not fields that were simply inherited.</span></span>  
  
 <span data-ttu-id="6cdc9-1096">Aby uzyskać więcej informacji, zobacz <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1096">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="6cdc9-1097">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, Metoda ta zwraca <xref:System.Reflection.FieldInfo> obiektów z parametrami typu zastąpionymi przez odpowiednie argumenty typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1097">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6cdc9-1098">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, Metoda ta wyszukuje pola publiczne ograniczenia klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1098">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the public fields of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-1099">Poniższy przykład pokazuje wykorzystanie `GetFields(BindingFlags)` metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1099">The following example shows a use of the `GetFields(BindingFlags)` method.</span></span>  
  
 [!code-cpp[Classic MethodBase.Attributes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodBase.Attributes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MethodBase.Attributes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodBase.Attributes Example/CS/source.cs#1)]
 [!code-vb[Classic MethodBase.Attributes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodBase.Attributes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetGenericArguments">
      <MemberSignature Language="C#" Value="public virtual Type[] GetGenericArguments ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetGenericArguments() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetGenericArguments" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGenericArguments () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetGenericArguments();" />
      <MemberSignature Language="F#" Value="abstract member GetGenericArguments : unit -&gt; Type[]&#xA;override this.GetGenericArguments : unit -&gt; Type[]" Usage="type.GetGenericArguments " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-1100">Zwraca tablicę <see cref="T:System.Type" /> obiekty reprezentujące argumentów typu zamkniętego typu ogólnego lub parametrów typu w definicji typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1100">Returns an array of <see cref="T:System.Type" /> objects that represent the type arguments of a closed generic type or the type parameters of a generic type definition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-1101">Tablica <see cref="T:System.Type" /> obiekty reprezentujące argumenty typu ogólnego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1101">An array of <see cref="T:System.Type" /> objects that represent the type arguments of a generic type.</span>
          </span>
          <span data-ttu-id="6cdc9-1102">Zwraca pustą tablicę, jeśli bieżący typ nie jest typem ogólnym.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1102">Returns an empty array if the current type is not a generic type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-1103">Elementy tablicy są zwracane w kolejności, w jakiej są wyświetlane na liście argumentów typu dla typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1103">The array elements are returned in the order in which they appear in the list of type arguments for the generic type.</span></span>  
  
-   <span data-ttu-id="6cdc9-1104">Jeśli bieżącym typem jest zamknięty skonstruowanego typu (oznacza to, że <xref:System.Type.ContainsGenericParameters%2A> właściwość zwraca `false`), tablica zwrócona przez <xref:System.Type.GetGenericArguments%2A> metoda zawiera typy, które zostały przypisane do parametrów typu ogólnego definicji typu ogólnego .</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1104">If the current type is a closed constructed type (that is, the <xref:System.Type.ContainsGenericParameters%2A> property returns `false`), the array returned by the <xref:System.Type.GetGenericArguments%2A> method contains the types that have been assigned to the generic type parameters of the generic type definition.</span></span>  
  
-   <span data-ttu-id="6cdc9-1105">Jeśli bieżący typ jest definicja typu ogólnego, tablica zawiera parametry typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1105">If the current type is a generic type definition, the array contains the type parameters.</span></span>  
  
-   <span data-ttu-id="6cdc9-1106">Jeśli bieżący typ jest typem otwartym skonstruowany (oznacza to, <xref:System.Type.ContainsGenericParameters%2A> właściwość zwraca `true`), w których określonych typów nie zostały przypisane do wszystkich parametrów typu i parametrów typu w otaczającej typów ani metod ogólnych, tablica zawiera typy i parametrów typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1106">If the current type is an open constructed type (that is, the <xref:System.Type.ContainsGenericParameters%2A> property returns `true`) in which specific types have not been assigned to all of the type parameters and type parameters of enclosing generic types or methods, the array contains both types and type parameters.</span></span> <span data-ttu-id="6cdc9-1107">Użyj <xref:System.Type.IsGenericParameter%2A> właściwości, aby poinformować ich od siebie.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1107">Use the <xref:System.Type.IsGenericParameter%2A> property to tell them apart.</span></span> <span data-ttu-id="6cdc9-1108">Do pokazania w tym scenariuszu, zobacz przykład kodu dla <xref:System.Type.ContainsGenericParameters%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1108">For a demonstration of this scenario, see the code example for the <xref:System.Type.ContainsGenericParameters%2A> property.</span></span>  
  
 <span data-ttu-id="6cdc9-1109">Aby uzyskać listę niezmiennych warunków dla terminów używanych w odbiciu rodzajowym, zobacz <xref:System.Type.IsGenericType%2A> uwagi dotyczące właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1109">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-1110">Poniższy przykład kodu wykorzystuje <xref:System.Type.GetGenericArguments%2A> metodę w celu wyświetlenia argumentów typu skonstruowanego typu i parametry typu jego definicję typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1110">The following code example uses the <xref:System.Type.GetGenericArguments%2A> method to display the type arguments of a constructed type and the type parameters of its generic type definition.</span></span>  
  
 <span data-ttu-id="6cdc9-1111">Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.Type.IsGenericTypeDefinition%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1111">This code example is part of a larger example provided for the <xref:System.Type.IsGenericTypeDefinition%2A> property.</span></span> <span data-ttu-id="6cdc9-1112">Zobacz większego przykładu, aby uzyskać przykładowe dane wyjściowe.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1112">See the larger example for sample output.</span></span>  
  
 [!code-cpp[System.Type.IsGenericTypeDefinition#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/CPP/source.cpp#2)]
 [!code-csharp[System.Type.IsGenericTypeDefinition#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/CS/source.cs#2)]
 [!code-vb[System.Type.IsGenericTypeDefinition#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="6cdc9-1113">Wywoływana metoda nie jest obsługiwana w klasie bazowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1113">The invoked method is not supported in the base class.</span>
          </span>
          <span data-ttu-id="6cdc9-1114">Klasy pochodne muszą zapewniać implementację.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1114">Derived classes must provide an implementation.</span>
          </span>
        </exception>
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md">
          <span data-ttu-id="6cdc9-1115">Odbicie i typy ogólne</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1115">Reflection and Generic Types</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md">
          <span data-ttu-id="6cdc9-1116">Porady: zbadanie i tworzenie wystąpień typów ogólnych za pomocą odbicia</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1116">How to: Examine and Instantiate Generic Types with Reflection</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetGenericParameterConstraints">
      <MemberSignature Language="C#" Value="public virtual Type[] GetGenericParameterConstraints ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetGenericParameterConstraints() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetGenericParameterConstraints" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGenericParameterConstraints () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetGenericParameterConstraints();" />
      <MemberSignature Language="F#" Value="abstract member GetGenericParameterConstraints : unit -&gt; Type[]&#xA;override this.GetGenericParameterConstraints : unit -&gt; Type[]" Usage="type.GetGenericParameterConstraints " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-1117">Zwraca tablicę <see cref="T:System.Type" /> obiekty reprezentujące ograniczenia bieżącego ogólnego, parametr typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1117">Returns an array of <see cref="T:System.Type" /> objects that represent the constraints on the current generic type parameter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-1118">Tablica <see cref="T:System.Type" /> obiekty reprezentujące ograniczenia bieżącego ogólnego, parametr typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1118">An array of <see cref="T:System.Type" /> objects that represent the constraints on the current generic type parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-1119">Każde ograniczenie parametru typu ogólnego jest wyrażona jako <xref:System.Type> obiektu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1119">Each constraint on a generic type parameter is expressed as a <xref:System.Type> object.</span></span> <span data-ttu-id="6cdc9-1120">Użyj <xref:System.Type.IsClass%2A> właściwości w celu określenia, czy ograniczenie jest ograniczenie klasy bazowej; Jeśli właściwość ta zwraca `false`, ograniczenie jest ograniczenie interfejsu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1120">Use the <xref:System.Type.IsClass%2A> property to determine whether a constraint is the base class constraint; if the property returns `false`, the constraint is an interface constraint.</span></span> <span data-ttu-id="6cdc9-1121">Jeśli parametrem typu bez ograniczenia klasy i bez ograniczeń interfejsu, zwracana jest pusta tablica.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1121">If a type parameter has no class constraint and no interface constraints, an empty array is returned.</span></span>  
  
 <span data-ttu-id="6cdc9-1122">Aby uzyskać listę niezmiennych warunków dla terminów używanych w odbiciu rodzajowym, zobacz <xref:System.Type.IsGenericType%2A> uwagi dotyczące właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1122">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-1123">Poniższy kod definiuje typ ogólny `Test` z dwoma parametrami typu, które mają z nią związane inne ograniczenia.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1123">The following code example defines a generic type `Test` with two type parameters that have different constraints.</span></span> <span data-ttu-id="6cdc9-1124">Gdy program będzie działać, ograniczenia są sprawdzane przy użyciu <xref:System.Type.GenericParameterAttributes%2A> właściwości i <xref:System.Type.GetGenericParameterConstraints%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1124">When the program executes, the constraints are examined using the <xref:System.Type.GenericParameterAttributes%2A> property and the <xref:System.Type.GetGenericParameterConstraints%2A> method.</span></span>  
  
 [!code-cpp[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/CPP/source.cpp#1)]
 [!code-csharp[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/CS/source.cs#1)]
 [!code-vb[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6cdc9-1125">Bieżący <see cref="T:System.Type" /> obiektu nie jest parametrem typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1125">The current <see cref="T:System.Type" /> object is not a generic type parameter.</span>
          </span>
          <span data-ttu-id="6cdc9-1126">Oznacza to, że <see cref="P:System.Type.IsGenericParameter" /> właściwość zwraca <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1126">That is, the <see cref="P:System.Type.IsGenericParameter" /> property returns <see langword="false" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Type.GenericParameterAttributes" />
        <altmember cref="P:System.Type.IsGenericParameter" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md">
          <span data-ttu-id="6cdc9-1127">Porady: zbadanie i tworzenie wystąpień typów ogólnych za pomocą odbicia</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1127">How to: Examine and Instantiate Generic Types with Reflection</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetGenericTypeDefinition">
      <MemberSignature Language="C#" Value="public virtual Type GetGenericTypeDefinition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetGenericTypeDefinition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetGenericTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGenericTypeDefinition () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetGenericTypeDefinition();" />
      <MemberSignature Language="F#" Value="abstract member GetGenericTypeDefinition : unit -&gt; Type&#xA;override this.GetGenericTypeDefinition : unit -&gt; Type" Usage="type.GetGenericTypeDefinition " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-1128">Zwraca <see cref="T:System.Type" /> obiekt, który reprezentuje definicji typu ogólnego, z którego można skonstruować bieżącego typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1128">Returns a <see cref="T:System.Type" /> object that represents a generic type definition from which the current generic type can be constructed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-1129">A <see cref="T:System.Type" /> obiekt reprezentujący typ ogólny, z którego można skonstruować bieżącego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1129">A <see cref="T:System.Type" /> object representing a generic type from which the current type can be constructed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-1130">Definicja typu ogólnego jest szablonem, z którego można skonstruować innych typów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1130">A generic type definition is a template from which other types can be constructed.</span></span> <span data-ttu-id="6cdc9-1131">Na przykład z definicji typu ogólnego `G<T>` (wyrażony w języku C# składni; `G(Of T)` w języku Visual Basic lub `generic <typename T> ref class G` w języku C++) można utworzyć i utworzyć wystąpienie typu `G<int>` (`G(Of Integer)` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1131">For example, from the generic type definition `G<T>` (expressed in C# syntax; `G(Of T)` in Visual Basic or `generic <typename T> ref class G` in C++) you can construct and instantiate the type `G<int>` (`G(Of Integer)` in Visual Basic).</span></span> <span data-ttu-id="6cdc9-1132">Biorąc pod uwagę <xref:System.Type> obiekt reprezentujący to skonstruowany typ <xref:System.Type.GetGenericTypeDefinition%2A> metoda zwraca definicji typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1132">Given a <xref:System.Type> object representing this constructed type, the <xref:System.Type.GetGenericTypeDefinition%2A> method returns the generic type definition.</span></span>  
  
 <span data-ttu-id="6cdc9-1133">Jeśli dwa typy utworzone są tworzone na podstawie jednej definicji typu ogólnego, przy użyciu tych samych argumentów typu <xref:System.Type.GetGenericTypeDefinition%2A> metoda zwróci wartość taka sama <xref:System.Type> obiektu dla obu typów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1133">If two constructed types are created from the same generic type definition, using the same type arguments, the <xref:System.Type.GetGenericTypeDefinition%2A> method returns the same <xref:System.Type> object for both types.</span></span>  
  
 <span data-ttu-id="6cdc9-1134">Jeśli wywołasz <xref:System.Type.GetGenericTypeDefinition%2A> metody <xref:System.Type> obiekt, który reprezentuje już definicji typu ogólnego, funkcja zwraca bieżący <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1134">If you call the <xref:System.Type.GetGenericTypeDefinition%2A> method on a <xref:System.Type> object that already represents a generic type definition, it returns the current <xref:System.Type>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6cdc9-1135">Tablica typów ogólnych nie jest sam ogólny.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1135">An array of generic types is not itself generic.</span></span> <span data-ttu-id="6cdc9-1136">W kodzie języka C# `A<int>[] v;` lub kod języka Visual Basic `Dim v() As A(Of Integer)`, typ zmiennej `v` nie jest ogólna.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1136">In the C# code `A<int>[] v;` or the Visual Basic code `Dim v() As A(Of Integer)`, the type of variable `v` is not generic.</span></span> <span data-ttu-id="6cdc9-1137">Użyj <xref:System.Type.IsGenericType%2A> do ustalenia, czy typ jest ogólny przed wywołaniem <xref:System.Type.GetGenericTypeDefinition%2A>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1137">Use <xref:System.Type.IsGenericType%2A> to determine whether a type is generic before calling <xref:System.Type.GetGenericTypeDefinition%2A>.</span></span>  
  
 <span data-ttu-id="6cdc9-1138">Aby uzyskać listę niezmiennych warunków dla terminów używanych w odbiciu rodzajowym, zobacz <xref:System.Type.IsGenericType%2A> uwagi dotyczące właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1138">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-1139">Poniższy przykład kodu tworzy wystąpienie skonstruowanego typu za pomocą tworzenia zwykłego wystąpienia, a następnie używa <xref:System.Type.GetType%2A> i <xref:System.Type.GetGenericTypeDefinition%2A> metody, aby pobrać skonstruowanego typu i definicji typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1139">The following code example creates an instance of a constructed type by using ordinary instance creation and then uses the <xref:System.Type.GetType%2A> and <xref:System.Type.GetGenericTypeDefinition%2A> methods to retrieve the constructed type and the generic type definition.</span></span> <span data-ttu-id="6cdc9-1140">W tym przykładzie użyto ogólnego <xref:System.Collections.Generic.Dictionary%602> typ; reprezentuje zbudowany typ <xref:System.Collections.Generic.Dictionary%602> z `Test` obiektów za pomocą kluczy ciągu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1140">This example uses the generic <xref:System.Collections.Generic.Dictionary%602> type; the constructed type represents a <xref:System.Collections.Generic.Dictionary%602> of `Test` objects with string keys.</span></span>  
  
 [!code-cpp[System.Type.GetGenericTypeDefinition#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.GetGenericTypeDefinition/CPP/source.cpp#1)]
 [!code-csharp[System.Type.GetGenericTypeDefinition#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.GetGenericTypeDefinition/CS/source.cs#1)]
 [!code-vb[System.Type.GetGenericTypeDefinition#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.GetGenericTypeDefinition/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6cdc9-1141">Bieżący typ nie jest typem ogólnym.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1141">The current type is not a generic type.</span>
          </span>
          <span data-ttu-id="6cdc9-1142">Oznacza to, że <see cref="P:System.Type.IsGenericType" /> zwraca <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1142">That is, <see cref="P:System.Type.IsGenericType" /> returns <see langword="false" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="6cdc9-1143">Wywoływana metoda nie jest obsługiwana w klasie bazowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1143">The invoked method is not supported in the base class.</span>
          </span>
          <span data-ttu-id="6cdc9-1144">Klasy pochodne muszą zapewniać implementację.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1144">Derived classes must provide an implementation.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.MakeGenericType(System.Type[])" />
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md">
          <span data-ttu-id="6cdc9-1145">Odbicie i typy ogólne</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1145">Reflection and Generic Types</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md">
          <span data-ttu-id="6cdc9-1146">Porady: zbadanie i tworzenie wystąpień typów ogólnych za pomocą odbicia</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1146">How to: Examine and Instantiate Generic Types with Reflection</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="type.GetHashCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetHashCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-1147">Zwraca kod skrótu dla tego wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1147">Returns the hash code for this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-1148">Kod skrótu dla tego wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1148">The hash code for this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-1149">Ta metoda zastępuje <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1149">This method overrides <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-1150">Poniższy przykład wyświetla skrótu `System.Windows.Forms.Button` klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1150">The following example displays the hash code of the `System.Windows.Forms.Button` class.</span></span>  
  
 [!code-cpp[Type_GetHashCode_GetFields#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetHashCode_GetFields/CPP/type_gethashcode_getfields.cpp#1)]
 [!code-csharp[Type_GetHashCode_GetFields#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetHashCode_GetFields/CS/type_gethashcode_getfields.cs#1)]
 [!code-vb[Type_GetHashCode_GetFields#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetHashCode_GetFields/VB/type_gethashcode_getfields.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetInterface">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-1151">Pobiera określony interfejs implementowany lub jest dziedziczona przez bieżący <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1151">Gets a specific interface implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInterface">
      <MemberSignature Language="C#" Value="public Type GetInterface (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetInterface(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetInterface(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInterface (name As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetInterface(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetInterface : string -&gt; Type&#xA;override this.GetInterface : string -&gt; Type" Usage="type.GetInterface name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetInterface(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="6cdc9-1152">Ciąg zawierający nazwę interfejsu można pobrać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1152">The string containing the name of the interface to get.</span>
          </span>
          <span data-ttu-id="6cdc9-1153">Interfejsy ogólne to zniekształcone nazwy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1153">For generic interfaces, this is the mangled name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-1154">Wyszukuje interfejsu o określonej nazwie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1154">Searches for the interface with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-1155">Obiekt reprezentujący interfejs o określonej nazwie zaimplementować lub dziedziczone przez bieżącą <see cref="T:System.Type" />, jeśli znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1155">An object representing the interface with the specified name, implemented or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-1156">Wyszukaj `name` jest uwzględniana wielkość liter.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1156">The search for `name` is case-sensitive.</span></span>  
  
 <span data-ttu-id="6cdc9-1157">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, Metoda ta zwraca <xref:System.Type> z parametrami typu zastąpionymi przez odpowiednie argumenty typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1157">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Type> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6cdc9-1158">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, Metoda ta wyszukuje ograniczenia interfejsu i wszelkie interfejsy odziedziczone ograniczenia klasy lub interfejsu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1158">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the interface constraints and any interfaces inherited from class or interface constraints.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-1159">W przypadku ogólnych interfejsów `name` parametr jest zniekształcone nazwy, kończąc akcent (\`) i liczbę parametrów typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1159">For generic interfaces, the `name` parameter is the mangled name, ending with a grave accent (\`) and the number of type parameters.</span></span> <span data-ttu-id="6cdc9-1160">Dotyczy to zarówno dla definicji interfejsów ogólnych i skonstruowany interfejsów ogólnych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1160">This is true for both generic interface definitions and constructed generic interfaces.</span></span> <span data-ttu-id="6cdc9-1161">Na przykład, aby znaleźć `IExample<T>` (`IExample(Of T)` w języku Visual Basic) lub `IExample<string>` (`IExample(Of String)` w języku Visual Basic), wyszukaj ``"IExample`1"``.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1161">For example, to find `IExample<T>` (`IExample(Of T)` in Visual Basic) or `IExample<string>` (`IExample(Of String)` in Visual Basic), search for ``"IExample`1"``.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-1162">Poniższy przykład kodu wykorzystuje <xref:System.Type.GetInterface%28System.String%29> metodę wyszukiwania <xref:System.Collections.Hashtable> klasy dla <xref:System.Runtime.Serialization.IDeserializationCallback> interfejsu list i metody interfejsu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1162">The following code example uses the <xref:System.Type.GetInterface%28System.String%29> method to search the <xref:System.Collections.Hashtable> class for the <xref:System.Runtime.Serialization.IDeserializationCallback> interface, and lists the methods of the interface.</span></span>  
  
 <span data-ttu-id="6cdc9-1163">Przykład kodu ilustruje też <xref:System.Type.GetInterface%28System.String%2CSystem.Boolean%29> przeciążenie metody i <xref:System.Type.GetInterfaceMap%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1163">The code example also demonstrates the <xref:System.Type.GetInterface%28System.String%2CSystem.Boolean%29> method overload and the <xref:System.Type.GetInterfaceMap%2A> method.</span></span>  
  
 [!code-cpp[Type_GetInterface#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetInterface/CPP/type_getinterface.cpp#1)]
 [!code-csharp[Type_GetInterface#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetInterface/CS/type_getinterface.cs#1)]
 [!code-vb[Type_GetInterface#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetInterface/VB/type_getinterface.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-1164">
            <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1164">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="6cdc9-1165">Bieżący <see cref="T:System.Type" /> reprezentuje typ, który implementuje ten interfejs ogólny z argumentami innego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1165">The current <see cref="T:System.Type" /> represents a type that implements the same generic interface with different type arguments.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="M:System.Type.GetInterfaces" />
        <altmember cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetInterface">
      <MemberSignature Language="C#" Value="public abstract Type GetInterface (string name, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetInterface(string name, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetInterface(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetInterface (name As String, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Type ^ GetInterface(System::String ^ name, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="abstract member GetInterface : string * bool -&gt; Type" Usage="type.GetInterface (name, ignoreCase)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetInterface(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="6cdc9-1166">Ciąg zawierający nazwę interfejsu można pobrać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1166">The string containing the name of the interface to get.</span>
          </span>
          <span data-ttu-id="6cdc9-1167">Interfejsy ogólne to zniekształcone nazwy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1167">For generic interfaces, this is the mangled name.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="6cdc9-1168">
            <see langword="true" /> ignorowanie wielkości liter w tej części <c>nazwa</c> określający nazwę prosty interfejs (part, który określa przestrzeń nazw musi być poprawnie z uwzględnieniem wielkości liter).</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1168">
              <see langword="true" /> to ignore the case of that part of <c>name</c> that specifies the simple interface name (the part that specifies the namespace must be correctly cased).</span>
          </span>
          <span data-ttu-id="6cdc9-1169">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1169">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1170">
            <see langword="false" /> Aby wykonać wyszukiwanie dla wszystkich części <c>nazwa</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1170">
              <see langword="false" /> to perform a case-sensitive search for all parts of <c>name</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-1171">W przypadku przesłonięcia w klasie pochodnej, wyszukuje określonego interfejsu, określająca, czy wykonać wyszukiwanie bez uwzględniania wielkości liter z nazwą interfejsu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1171">When overridden in a derived class, searches for the specified interface, specifying whether to do a case-insensitive search for the interface name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-1172">Obiekt reprezentujący interfejs o określonej nazwie zaimplementować lub dziedziczone przez bieżącą <see cref="T:System.Type" />, jeśli znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1172">An object representing the interface with the specified name, implemented or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-1173">`ignoreCase` Parametr dotyczy tylko nazwę prosty interfejs, a nie do przestrzeni nazw.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1173">The `ignoreCase` parameter applies only to the simple interface name, not to the namespace.</span></span> <span data-ttu-id="6cdc9-1174">Część `name` , który określa przestrzeń nazw musi mieć poprawną wielkość lub interfejsu nie zostanie znaleziony.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1174">The portion of `name` that specifies the namespace must have the correct case, or the interface will not be found.</span></span> <span data-ttu-id="6cdc9-1175">Na przykład ciąg "System.icomparable" znajdzie <xref:System.IComparable> interfejsu, lecz ciąg "system.icomparable" nie ma.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1175">For example, the string "System.icomparable" finds the <xref:System.IComparable> interface, but the string "system.icomparable" does not.</span></span>  
  
 <span data-ttu-id="6cdc9-1176">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, Metoda ta zwraca <xref:System.Type> z parametrami typu zastąpionymi przez odpowiednie argumenty typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1176">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Type> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6cdc9-1177">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, Metoda ta wyszukuje ograniczenia interfejsu i wszelkie interfejsy odziedziczone ograniczenia klasy lub interfejsu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1177">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the interface constraints and any interfaces inherited from class or interface constraints.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-1178">W przypadku ogólnych interfejsów `name` parametr jest zniekształcone nazwy, kończąc akcent (\`) i liczbę parametrów typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1178">For generic interfaces, the `name` parameter is the mangled name, ending with a grave accent (\`) and the number of type parameters.</span></span> <span data-ttu-id="6cdc9-1179">Dotyczy to zarówno dla definicji interfejsów ogólnych i skonstruowany interfejsów ogólnych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1179">This is true for both generic interface definitions and constructed generic interfaces.</span></span> <span data-ttu-id="6cdc9-1180">Na przykład, aby znaleźć `IExample<T>` (`IExample(Of T)` w języku Visual Basic) lub `IExample<string>` (`IExample(Of String)` w języku Visual Basic), wyszukaj `"IExample`1"".</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1180">For example, to find `IExample<T>` (`IExample(Of T)` in Visual Basic) or `IExample<string>` (`IExample(Of String)` in Visual Basic), search for `"IExample`1"\`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-1181">Poniższy przykład kodu wykorzystuje <xref:System.Type.GetInterface%28System.String%2CSystem.Boolean%29> metodę, aby wykonać wyszukiwanie bez uwzględniania wielkości liter z <xref:System.Collections.Hashtable> klasy dla <xref:System.Collections.IEnumerable> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1181">The following code example uses the <xref:System.Type.GetInterface%28System.String%2CSystem.Boolean%29> method to perform a case-insensitive search of the <xref:System.Collections.Hashtable> class for the <xref:System.Collections.IEnumerable> interface.</span></span>  
  
 <span data-ttu-id="6cdc9-1182">Przykład kodu ilustruje też <xref:System.Type.GetInterface%28System.String%29> przeciążenie metody i <xref:System.Type.GetInterfaceMap%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1182">The code example also demonstrates the <xref:System.Type.GetInterface%28System.String%29> method overload and the <xref:System.Type.GetInterfaceMap%2A> method.</span></span>  
  
 [!code-cpp[Type_GetInterface#2](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetInterface/CPP/type_getinterface.cpp#2)]
 [!code-csharp[Type_GetInterface#2](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetInterface/CS/type_getinterface.cs#2)]
 [!code-vb[Type_GetInterface#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetInterface/VB/type_getinterface.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-1183">
            <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1183">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="6cdc9-1184">Bieżący <see cref="T:System.Type" /> reprezentuje typ, który implementuje ten interfejs ogólny z argumentami innego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1184">The current <see cref="T:System.Type" /> represents a type that implements the same generic interface with different type arguments.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="M:System.Type.GetInterfaces" />
        <altmember cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetInterfaceMap">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Reflection.InterfaceMapping GetInterfaceMap(class System.Type interfaceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetInterfaceMap(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetInterfaceMap (interfaceType As Type) As InterfaceMapping" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::InterfaceMapping GetInterfaceMap(Type ^ interfaceType);" />
      <MemberSignature Language="F#" Value="abstract member GetInterfaceMap : Type -&gt; System.Reflection.InterfaceMapping&#xA;override this.GetInterfaceMap : Type -&gt; System.Reflection.InterfaceMapping" Usage="type.GetInterfaceMap interfaceType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetInterfaceMap(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.InterfaceMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="interfaceType">
          <span data-ttu-id="6cdc9-1185">Typ interfejsu, który można pobrać mapowanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1185">The interface type to retrieve a mapping for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-1186">Zwraca mapowania interfejsu dla typu określonego interfejsu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1186">Returns an interface mapping for the specified interface type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-1187">Obiekt, który reprezentuje mapowania interfejsu dla <paramref name="interfaceType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1187">An object that represents the interface mapping for <paramref name="interfaceType" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-1188">Mapę interfejsu wskazuje, jak interfejs jest mapowany do rzeczywiste elementy członkowskie dla klasy, która implementuje ten interfejs.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1188">The interface map denotes how an interface is mapped into the actual members on a class that implements that interface.</span></span>  
  
 <span data-ttu-id="6cdc9-1189">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, parametry są zastępowane przez odpowiednie argumenty typu w elementach typu <xref:System.Reflection.InterfaceMapping> zwracanego przez tę metodę.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1189">If the current <xref:System.Type> represents a constructed generic type, type parameters are replaced by the appropriate type arguments in the elements of the <xref:System.Reflection.InterfaceMapping> returned by this method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-1190">Poniższy przykład wywołuje <xref:System.Type.GetInterfaceMap%2A> metodę pozwala ustalić jak <xref:System.IFormatProvider> mapuje interfejsu <xref:System.Globalization.CultureInfo> metod i sposób, w jaki <xref:System.IAppDomainSetup> mapuje interfejsu <xref:System.AppDomainSetup> właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1190">The following example calls the <xref:System.Type.GetInterfaceMap%2A> method to determine how the <xref:System.IFormatProvider> interface maps to <xref:System.Globalization.CultureInfo> methods, and how the <xref:System.IAppDomainSetup> interface maps to <xref:System.AppDomainSetup> properties.</span></span> <span data-ttu-id="6cdc9-1191">Należy zauważyć, że ponieważ <xref:System.IAppDomainSetup> interfejs definiuje zestaw właściwości zwracanego <xref:System.Reflection.InterfaceMapping> obiekt zawiera osobne <xref:System.Reflection.MethodInfo> obiektów dla właściwości get i set metod dostępu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1191">Note that, because the <xref:System.IAppDomainSetup> interface defines a set of properties, the returned <xref:System.Reflection.InterfaceMapping> object includes separate <xref:System.Reflection.MethodInfo> objects for a property's get and set accessors.</span></span>  
  
 [!code-csharp[System.Type.GetInterfaceMap#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.getinterfacemap/cs/interfacemapping1.cs#1)]
 [!code-vb[System.Type.GetInterfaceMap#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.getinterfacemap/vb/interfacemapping1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6cdc9-1192">
            <paramref name="interfaceType" /> nie jest zaimplementowana przez bieżący typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1192">
              <paramref name="interfaceType" /> is not implemented by the current type.</span>
          </span>
          <span data-ttu-id="6cdc9-1193">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1193">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1194">
            <paramref name="interfaceType" /> Argumentu nie odwołuje się do interfejsu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1194">The <paramref name="interfaceType" /> argument does not refer to an interface.</span>
          </span>
          <span data-ttu-id="6cdc9-1195">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1195">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1196">Bieżące wystąpienie lub <paramref name="interfaceType" /> argument jest to otwarty typ ogólny; czyli, <see cref="P:System.Type.ContainsGenericParameters" /> właściwość zwraca <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1196">The current instance or <paramref name="interfaceType" /> argument is an open generic type; that is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns <see langword="true" />.</span>
          </span>
          <span data-ttu-id="6cdc9-1197">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1197">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1198">
            <paramref name="interfaceType" /> jest to interfejs generyczny i bieżącym typem jest typem tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1198">
              <paramref name="interfaceType" /> is a generic interface, and the current type is an array type.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-1199">
            <paramref name="interfaceType" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1199">
              <paramref name="interfaceType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6cdc9-1200">Bieżący <see cref="T:System.Type" /> reprezentuje parametr typu ogólnego; czyli <see cref="P:System.Type.IsGenericParameter" /> jest <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1200">The current <see cref="T:System.Type" /> represents a generic type parameter; that is, <see cref="P:System.Type.IsGenericParameter" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="6cdc9-1201">Wywoływana metoda nie jest obsługiwana w klasie bazowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1201">The invoked method is not supported in the base class.</span>
          </span>
          <span data-ttu-id="6cdc9-1202">Klasy pochodne muszą zapewniać implementację.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1202">Derived classes must provide an implementation.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.InterfaceMapping" />
      </Docs>
    </Member>
    <Member MemberName="GetInterfaces">
      <MemberSignature Language="C#" Value="public abstract Type[] GetInterfaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetInterfaces() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetInterfaces" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetInterfaces () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;Type ^&gt; ^ GetInterfaces();" />
      <MemberSignature Language="F#" Value="abstract member GetInterfaces : unit -&gt; Type[]" Usage="type.GetInterfaces " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetInterfaces</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-1203">W przypadku przesłonięcia w klasie pochodnej pobiera wszystkie interfejsy implementowane lub dziedziczone przez bieżącą <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1203">When overridden in a derived class, gets all the interfaces implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-1204">Tablica <see cref="T:System.Type" /> obiekty reprezentujące wszystkie interfejsy implementowane lub jest dziedziczona przez bieżący <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1204">An array of <see cref="T:System.Type" /> objects representing all the interfaces implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="6cdc9-1205">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1205">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1206">Pusta tablica typu <see cref="T:System.Type" />, jeśli interfejsy nie są implementowane lub dziedziczone przez bieżącą <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1206">An empty array of type <see cref="T:System.Type" />, if no interfaces are implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-1207"><xref:System.Type.GetInterfaces%2A> Metoda nie zwraca interfejsów w określonej kolejności, takie jak alfabetycznej lub kolejności deklaracji.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1207">The <xref:System.Type.GetInterfaces%2A> method does not return interfaces in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="6cdc9-1208">Twój kod nie może zależeć od kolejności, w której zwracane są interfejsy, ponieważ kolejność się zmienia.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1208">Your code must not depend on the order in which interfaces are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="6cdc9-1209">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, Metoda ta zwraca <xref:System.Type> obiektów z parametrami typu zastąpionymi przez odpowiednie argumenty typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1209">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Type> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6cdc9-1210">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, Metoda ta wyszukuje ograniczenia interfejsu i wszelkie interfejsy odziedziczone ograniczenia klasy lub interfejsu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1210">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the interface constraints and any interfaces inherited from class or interface constraints.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-1211">Poniższy przykład pobiera typ określonej klasy i wyświetla wszystkie interfejsy, które typ implementuje lub dziedziczy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1211">The following example gets the type of the specified class and displays all the interfaces that the type implements or inherits.</span></span> <span data-ttu-id="6cdc9-1212">Aby skompilować przykład Visual Basic, użyj następujących poleceń kompilatora:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1212">To compile the Visual Basic example, use the following compiler commands:</span></span>  
  
 `vbc type_getinterfaces1.vb /r:System.Web.dll /r:System.dll`  
  
 [!code-cpp[Type_GetInterfaces1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetInterfaces1/CPP/type_getinterfaces1.cpp#1)]
 [!code-csharp[Type_GetInterfaces1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetInterfaces1/CS/type_getinterfaces1.cs#1)]
 [!code-vb[Type_GetInterfaces1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetInterfaces1/VB/type_getinterfaces1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="6cdc9-1213">Statycznego inicjatora jest wywoływany i zgłasza wyjątek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1213">A static initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.GetInterface(System.String)" />
        <altmember cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMember">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-1214">Pobiera określony członków bieżącej <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1214">Gets the specified members of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMember (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMember(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMember (name As String) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetMember : string -&gt; System.Reflection.MemberInfo[]&#xA;override this.GetMember : string -&gt; System.Reflection.MemberInfo[]" Usage="type.GetMember name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMember(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="6cdc9-1215">Ciąg zawierający nazwę publiczne elementy członkowskie można pobrać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1215">The string containing the name of the public members to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-1216">Wyszukuje publiczne elementy członkowskie o określonej nazwie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1216">Searches for the public members with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-1217">Tablica <see cref="T:System.Reflection.MemberInfo" /> obiekty reprezentujące publiczne elementy członkowskie o określonej nazwie, jeśli je znaleziono; w przeciwnym razie, pusta tablica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1217">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-1218">Wyszukaj `name` jest uwzględniana wielkość liter.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1218">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="6cdc9-1219">Wyszukiwanie zawiera elementy publiczne wystąpienia static i public.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1219">The search includes public static and public instance members.</span></span>  
  
 <span data-ttu-id="6cdc9-1220">Elementy członkowskie zawierają właściwości, metody, pola, zdarzenia i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1220">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="6cdc9-1221"><xref:System.Type.GetMember%2A> Metoda nie zwraca elementów członkowskich w określonej kolejności, takie jak alfabetycznej lub kolejności deklaracji.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1221">The <xref:System.Type.GetMember%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="6cdc9-1222">Kod nie może zależeć od kolejności, w której są zwracane elementy członkowskie, ponieważ kolejność się zmienia.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1222">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="6cdc9-1223">Tego przeciążenia metody nie znajdzie inicjatory klasy (.cctor).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1223">This method overload will not find class initializers (.cctor).</span></span> <span data-ttu-id="6cdc9-1224">Aby znaleźć klasy inicjatory, użyj przeciążenia, które przyjmuje <xref:System.Reflection.BindingFlags>, a następnie określ <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1224">To find class initializers, use an overload that takes <xref:System.Reflection.BindingFlags>, and specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="6cdc9-1225">Można również uzyskać inicjatora klasy za pomocą <xref:System.Type.TypeInitializer%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1225">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="6cdc9-1226">W poniższej tabeli przedstawiono, jakie elementy członkowskie klasy podstawowej są zwracane przez `Get` metody uwzględnianiem typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1226">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="6cdc9-1227">Typ elementu członkowskiego</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1227">Member Type</span></span>|<span data-ttu-id="6cdc9-1228">Static</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1228">Static</span></span>|<span data-ttu-id="6cdc9-1229">Niestatyczna</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1229">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="6cdc9-1230">Konstruktor</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1230">Constructor</span></span>|<span data-ttu-id="6cdc9-1231">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1231">No</span></span>|<span data-ttu-id="6cdc9-1232">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1232">No</span></span>|  
|<span data-ttu-id="6cdc9-1233">Pole</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1233">Field</span></span>|<span data-ttu-id="6cdc9-1234">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1234">No</span></span>|<span data-ttu-id="6cdc9-1235">Tak.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1235">Yes.</span></span> <span data-ttu-id="6cdc9-1236">Pole jest zawsze ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1236">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6cdc9-1237">Zdarzenie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1237">Event</span></span>|<span data-ttu-id="6cdc9-1238">Nie dotyczy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1238">Not applicable</span></span>|<span data-ttu-id="6cdc9-1239">Zasadą systemu typu jest to, że dziedziczenie jest takie samo, jak w przypadku metod, które implementują właściwość.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1239">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6cdc9-1240">Odbicie traktuje właściwości jako ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1240">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-1241">Patrz Uwaga 2 poniżej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1241">See note 2 below.</span></span>|  
|<span data-ttu-id="6cdc9-1242">Metoda</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1242">Method</span></span>|<span data-ttu-id="6cdc9-1243">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1243">No</span></span>|<span data-ttu-id="6cdc9-1244">Tak.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1244">Yes.</span></span> <span data-ttu-id="6cdc9-1245">Metodą (zarówno wirtualną, jak i niewirtualną) może być ukrycie przez nazwę lub przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1245">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6cdc9-1246">Typu zagnieżdżony</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1246">Nested Type</span></span>|<span data-ttu-id="6cdc9-1247">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1247">No</span></span>|<span data-ttu-id="6cdc9-1248">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1248">No</span></span>|  
|<span data-ttu-id="6cdc9-1249">Właściwość</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1249">Property</span></span>|<span data-ttu-id="6cdc9-1250">Nie dotyczy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1250">Not applicable</span></span>|<span data-ttu-id="6cdc9-1251">Zasadą systemu typu jest to, że dziedziczenie jest takie samo, jak w przypadku metod, które implementują właściwość.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1251">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6cdc9-1252">Odbicie traktuje właściwości jako ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1252">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-1253">Patrz Uwaga 2 poniżej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1253">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="6cdc9-1254">Ukrycie przez nazwę i podpis dotyczy wszystkich części podpisu, w tym modyfikatorów niestandardowych, zwraca typy, typy parametrów, wartowników i niezarządzane konwencje wywoływania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1254">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="6cdc9-1255">To jest porównanie binarne.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1255">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="6cdc9-1256">W celu odbicia właściwości i zdarzenia są ukrywane przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1256">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-1257">Jeśli istnieje właściwość z akcesorem pobierania i ustawiania w klasie bazowej, ale odziedziczona klasa ma tylko akcesor pobierania, właściwość klasy odziedziczonej ukrywa właściwości klasy bazowej, a nie można uzyskać dostępu do metody ustawiającej w klasie bazowej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1257">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="6cdc9-1258">Atrybuty niestandardowe nie są częścią wspólnego typu systemowego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1258">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="6cdc9-1259">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, Metoda ta zwraca <xref:System.Reflection.MemberInfo> z parametrami typu zastąpionymi przez odpowiednie argumenty typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1259">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6cdc9-1260">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, Metoda ta wyszukuje składowe ograniczenia klasy lub elementów członkowskich <xref:System.Object> przypadku bez ograniczenia klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1260">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-1261">Dla metod rodzajowych nie ma argumentów typu w parametrze `name`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1261">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="6cdc9-1262">Na przykład, kod C# `GetMember("MyMethod<int>")` wyszukuje element członkowski o nazwie tekst "`MyMethod<int>`", a nie dla metodę o nazwie `MyMethod` ma jeden argument rodzajowy typu `int`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1262">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-1263">Poniższy przykład wyświetla wszystkie elementy członkowskie `String` klasy, które zaczynają się na literę C.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1263">The following example displays all the members of the `String` class that start with the letter C.</span></span>  
  
 [!code-cpp[Type_GetMember#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMember/CPP/type_getmember.cpp#1)]
 [!code-csharp[Type_GetMember#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMember/CS/type_getmember.cs#1)]
 [!code-vb[Type_GetMember#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMember/VB/type_getmember.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-1264">
            <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1264">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMember(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMember (name As String, bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMember : string * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]&#xA;override this.GetMember : string * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="type.GetMember (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMember(System.String,System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMember(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="6cdc9-1265">Ciąg zawierający nazwę elementy członkowskie można pobrać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1265">The string containing the name of the members to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="6cdc9-1266">Maska bitów składająca się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1266">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="6cdc9-1267">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1267">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1268">Zero, aby zwrócić pustą tablicę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1268">Zero, to return an empty array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-1269">Wyszukuje określony elementów członkowskich za pomocą ograniczeń w określonym powiązaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1269">Searches for the specified members, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-1270">Tablica <see cref="T:System.Reflection.MemberInfo" /> obiekty reprezentujące publiczne elementy członkowskie o określonej nazwie, jeśli je znaleziono; w przeciwnym razie, pusta tablica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1270">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-1271">Metoda ta może być zastąpiona przez klasę pochodną.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1271">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="6cdc9-1272">Elementy członkowskie zawierają właściwości, metody, pola, zdarzenia i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1272">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="6cdc9-1273"><xref:System.Type.GetMember%2A> Metoda nie zwraca elementów członkowskich w określonej kolejności, takie jak alfabetycznej lub kolejności deklaracji.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1273">The <xref:System.Type.GetMember%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="6cdc9-1274">Kod nie może zależeć od kolejności, w której są zwracane elementy członkowskie, ponieważ kolejność się zmienia.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1274">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="6cdc9-1275">Następujące <xref:System.Reflection.BindingFlags> flagi filtru może służyć do definiowania elementów członkowskich, które można uwzględnić w wyszukiwaniu:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1275">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="6cdc9-1276">Należy określić `BindingFlags.Instance` lub `BindingFlags.Static` w celu uzyskania zwrotu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1276">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="6cdc9-1277">Określ `BindingFlags.Public` obejmujący publiczne elementy członkowskie w wyszukiwaniu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1277">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="6cdc9-1278">Określ `BindingFlags.NonPublic` obejmujący elementów członkowskich niepublicznych (czyli prywatne, wewnętrzne i chronione elementy członkowskie) w wyszukiwaniu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1278">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="6cdc9-1279">Określ `BindingFlags.FlattenHierarchy` obejmujący `public` i `protected` statyczne elementy członkowskie w hierarchii; `private` statyczne elementy członkowskie w klasie dziedziczonej nie są uwzględniane.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1279">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="6cdc9-1280">Następujące <xref:System.Reflection.BindingFlags> flagi modyfikatora może służyć do zmiany sposobu działania wyszukiwania:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1280">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="6cdc9-1281">`BindingFlags.IgnoreCase` Aby zignorować wielkość liter `name`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1281">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="6cdc9-1282">`BindingFlags.DeclaredOnly` Aby wyszukać tylko do elementów członkowskich zadeklarowanych w <xref:System.Type>, nie elementów członkowskich, które zostały po prostu odziedziczone.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1282">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="6cdc9-1283">Aby uzyskać więcej informacji, zobacz <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1283">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="6cdc9-1284">Aby uzyskać inicjatora klasy (.cctor), za pomocą tego przeciążenia metody, należy określić ".cctor" dla `name`, i <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> w języku Visual Basic) dla `bindingAttr`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1284">To get the class initializer (.cctor) using this method overload, you must specify ".cctor" for `name`, and <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic) for `bindingAttr`.</span></span> <span data-ttu-id="6cdc9-1285">Można również uzyskać inicjatora klasy za pomocą <xref:System.Type.TypeInitializer%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1285">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="6cdc9-1286">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, Metoda ta zwraca <xref:System.Reflection.MemberInfo> z parametrami typu zastąpionymi przez odpowiednie argumenty typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1286">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6cdc9-1287">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, Metoda ta wyszukuje składowe ograniczenia klasy lub elementów członkowskich <xref:System.Object> przypadku bez ograniczenia klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1287">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-1288">Dla metod rodzajowych nie ma argumentów typu w parametrze `name`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1288">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="6cdc9-1289">Na przykład, kod C# `GetMember("MyMethod<int>")` wyszukuje element członkowski o nazwie tekst "`MyMethod<int>`", a nie dla metodę o nazwie `MyMethod` ma jeden argument rodzajowy typu `int`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1289">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-1290">Poniższy przykład wyświetla wszystkie publiczne statyczne elementy członkowskie `myString` klasy, które zaczynają się na literę C.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1290">The following example displays all the public static members of the `myString` class that start with the letter C.</span></span>  
  
 [!code-cpp[Type_GetMember#2](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMember/CPP/type_getmember.cpp#2)]
 [!code-csharp[Type_GetMember#2](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMember/CS/type_getmember.cs#2)]
 [!code-vb[Type_GetMember#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMember/VB/type_getmember.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-1291">
            <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1291">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.MemberTypes type, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMember (name As String, type As MemberTypes, bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name, System::Reflection::MemberTypes type, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMember : string * System.Reflection.MemberTypes * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]&#xA;override this.GetMember : string * System.Reflection.MemberTypes * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="type.GetMember (name, type, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="System.Reflection.MemberTypes" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="6cdc9-1292">Ciąg zawierający nazwę elementy członkowskie można pobrać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1292">The string containing the name of the members to get.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="6cdc9-1293">Wartość do wyszukania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1293">The value to search for.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="6cdc9-1294">Maska bitów składająca się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1294">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="6cdc9-1295">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1295">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1296">Zero, aby zwrócić pustą tablicę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1296">Zero, to return an empty array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-1297">Wyszukuje określony elementy członkowskie typu określonego elementu członkowskiego, za pomocą ograniczeń w określonym powiązaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1297">Searches for the specified members of the specified member type, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-1298">Tablica <see cref="T:System.Reflection.MemberInfo" /> obiekty reprezentujące publiczne elementy członkowskie o określonej nazwie, jeśli je znaleziono; w przeciwnym razie, pusta tablica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1298">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-1299">Elementy członkowskie zawierają właściwości, metody, pola, zdarzenia i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1299">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="6cdc9-1300"><xref:System.Type.GetMember%2A> Metoda nie zwraca elementów członkowskich w określonej kolejności, takie jak alfabetycznej lub kolejności deklaracji.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1300">The <xref:System.Type.GetMember%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="6cdc9-1301">Kod nie może zależeć od kolejności, w której są zwracane elementy członkowskie, ponieważ kolejność się zmienia.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1301">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="6cdc9-1302">Następujące <xref:System.Reflection.BindingFlags> flagi filtru może służyć do definiowania elementów członkowskich, które można uwzględnić w wyszukiwaniu:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1302">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="6cdc9-1303">Należy określić `BindingFlags.Instance` lub `BindingFlags.Static` w celu uzyskania zwrotu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1303">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="6cdc9-1304">Określ `BindingFlags.Public` obejmujący publiczne elementy członkowskie w wyszukiwaniu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1304">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="6cdc9-1305">Określ `BindingFlags.NonPublic` obejmujący elementów członkowskich niepublicznych (czyli prywatne, wewnętrzne i chronione elementy członkowskie) w wyszukiwaniu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1305">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="6cdc9-1306">Określ `BindingFlags.FlattenHierarchy` obejmujący `public` i `protected` statyczne elementy członkowskie w hierarchii; `private` statyczne elementy członkowskie w klasie dziedziczonej nie są uwzględniane.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1306">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="6cdc9-1307">Następujące <xref:System.Reflection.BindingFlags> flagi modyfikatora może służyć do zmiany sposobu działania wyszukiwania:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1307">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="6cdc9-1308">`BindingFlags.IgnoreCase` Aby zignorować wielkość liter `name`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1308">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="6cdc9-1309">`BindingFlags.DeclaredOnly` Aby wyszukać tylko do elementów członkowskich zadeklarowanych w <xref:System.Type>, nie elementów członkowskich, które zostały po prostu odziedziczone.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1309">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="6cdc9-1310">Aby uzyskać więcej informacji, zobacz <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1310">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="6cdc9-1311">Aby uzyskać inicjatora klasy (.cctor), za pomocą tego przeciążenia metody, należy określić ".cctor" dla `name`, <xref:System.Reflection.MemberTypes.Constructor?displayProperty=nameWithType> dla `type`, i <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> w Visual Basic) dla `bindingAttr`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1311">To get the class initializer (.cctor) using this method overload, you must specify ".cctor" for `name`, <xref:System.Reflection.MemberTypes.Constructor?displayProperty=nameWithType> for `type`, and  <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic) for `bindingAttr`.</span></span> <span data-ttu-id="6cdc9-1312">Można również uzyskać inicjatora klasy za pomocą <xref:System.Type.TypeInitializer%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1312">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="6cdc9-1313">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, Metoda ta zwraca <xref:System.Reflection.MemberInfo> z parametrami typu zastąpionymi przez odpowiednie argumenty typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1313">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6cdc9-1314">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, Metoda ta wyszukuje składowe ograniczenia klasy lub elementów członkowskich <xref:System.Object> przypadku bez ograniczenia klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1314">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-1315">Dla metod rodzajowych nie ma argumentów typu w parametrze `name`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1315">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="6cdc9-1316">Na przykład, kod C# `GetMember("MyMethod<int>")` wyszukuje element członkowski o nazwie tekst "`MyMethod<int>`", a nie dla metodę o nazwie `MyMethod` ma jeden argument rodzajowy typu `int`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1316">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-1317">Poniższy przykład wyświetla wszystkie metody `myString` klasy, które zaczynają się na literę C.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1317">The following example displays all the methods of the `myString` class that start with the letter C.</span></span>  
  
 [!code-cpp[Type_GetMember#3](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMember/CPP/type_getmember.cpp#3)]
 [!code-csharp[Type_GetMember#3](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMember/CS/type_getmember.cs#3)]
 [!code-vb[Type_GetMember#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMember/VB/type_getmember.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-1318">
            <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1318">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="6cdc9-1319">Klasy pochodnej musi zapewniać implementację.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1319">A derived class must provide an implementation.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMembers">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-1320">Pobiera elementy członkowskie (właściwości, metody, pola, zdarzenia i tak dalej) bieżącego <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1320">Gets the members (properties, methods, fields, events, and so on) of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMembers" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMembers () As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMembers();" />
      <MemberSignature Language="F#" Value="abstract member GetMembers : unit -&gt; System.Reflection.MemberInfo[]&#xA;override this.GetMembers : unit -&gt; System.Reflection.MemberInfo[]" Usage="type.GetMembers " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-1321">Zwraca wszystkie publiczne elementy członkowskie bieżącego <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1321">Returns all the public members of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-1322">Tablica <see cref="T:System.Reflection.MemberInfo" /> obiekty reprezentujące wszystkie publiczne elementy członkowskie bieżącego <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1322">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all the public members of the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="6cdc9-1323">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1323">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1324">Pusta tablica typu <see cref="T:System.Reflection.MemberInfo" />, jeśli bieżący <see cref="T:System.Type" /> nie ma publicznych elementów członkowskich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1324">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have public members.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-1325">Elementy członkowskie zawierają właściwości, metody, pola, zdarzenia i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1325">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="6cdc9-1326"><xref:System.Type.GetMembers%2A> Metoda nie zwraca elementów członkowskich w określonej kolejności, takie jak alfabetycznej lub kolejności deklaracji.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1326">The <xref:System.Type.GetMembers%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="6cdc9-1327">Kod nie może zależeć od kolejności, w której są zwracane elementy członkowskie, ponieważ kolejność się zmienia.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1327">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="6cdc9-1328">Tego przeciążenia metody wywołuje <xref:System.Type.GetMembers%28System.Reflection.BindingFlags%29> przeciążenie metody z <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1328">This method overload calls the <xref:System.Type.GetMembers%28System.Reflection.BindingFlags%29> method overload, with <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="6cdc9-1329">Inicjatory klasy (.cctor) nie zostanie odnaleziony.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1329">It will not find class initializers (.cctor).</span></span> <span data-ttu-id="6cdc9-1330">Aby znaleźć klasy inicjatory, użyj przeciążenia, które przyjmuje <xref:System.Reflection.BindingFlags>, a następnie określ <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1330">To find class initializers, use an overload that takes <xref:System.Reflection.BindingFlags>, and specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="6cdc9-1331">Można również uzyskać inicjatora klasy za pomocą <xref:System.Type.TypeInitializer%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1331">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="6cdc9-1332">W poniższej tabeli przedstawiono, jakie elementy członkowskie klasy podstawowej są zwracane przez `Get` metody uwzględnianiem typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1332">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="6cdc9-1333">Typ elementu członkowskiego</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1333">Member Type</span></span>|<span data-ttu-id="6cdc9-1334">Static</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1334">Static</span></span>|<span data-ttu-id="6cdc9-1335">Niestatyczna</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1335">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="6cdc9-1336">Konstruktor</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1336">Constructor</span></span>|<span data-ttu-id="6cdc9-1337">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1337">No</span></span>|<span data-ttu-id="6cdc9-1338">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1338">No</span></span>|  
|<span data-ttu-id="6cdc9-1339">Pole</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1339">Field</span></span>|<span data-ttu-id="6cdc9-1340">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1340">No</span></span>|<span data-ttu-id="6cdc9-1341">Tak.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1341">Yes.</span></span> <span data-ttu-id="6cdc9-1342">Pole jest zawsze ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1342">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6cdc9-1343">Zdarzenie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1343">Event</span></span>|<span data-ttu-id="6cdc9-1344">Nie dotyczy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1344">Not applicable</span></span>|<span data-ttu-id="6cdc9-1345">Zasadą systemu typu jest to, że dziedziczenie jest takie samo, jak w przypadku metod, które implementują właściwość.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1345">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6cdc9-1346">Odbicie traktuje właściwości jako ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1346">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-1347">Patrz Uwaga 2 poniżej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1347">See note 2 below.</span></span>|  
|<span data-ttu-id="6cdc9-1348">Metoda</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1348">Method</span></span>|<span data-ttu-id="6cdc9-1349">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1349">No</span></span>|<span data-ttu-id="6cdc9-1350">Tak.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1350">Yes.</span></span> <span data-ttu-id="6cdc9-1351">Metodą (zarówno wirtualną, jak i niewirtualną) może być ukrycie przez nazwę lub przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1351">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6cdc9-1352">Typu zagnieżdżony</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1352">Nested Type</span></span>|<span data-ttu-id="6cdc9-1353">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1353">No</span></span>|<span data-ttu-id="6cdc9-1354">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1354">No</span></span>|  
|<span data-ttu-id="6cdc9-1355">Właściwość</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1355">Property</span></span>|<span data-ttu-id="6cdc9-1356">Nie dotyczy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1356">Not applicable</span></span>|<span data-ttu-id="6cdc9-1357">Zasadą systemu typu jest to, że dziedziczenie jest takie samo, jak w przypadku metod, które implementują właściwość.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1357">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6cdc9-1358">Odbicie traktuje właściwości jako ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1358">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-1359">Patrz Uwaga 2 poniżej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1359">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="6cdc9-1360">Ukrycie przez nazwę i podpis dotyczy wszystkich części podpisu, w tym modyfikatorów niestandardowych, zwraca typy, typy parametrów, wartowników i niezarządzane konwencje wywoływania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1360">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="6cdc9-1361">To jest porównanie binarne.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1361">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="6cdc9-1362">W celu odbicia właściwości i zdarzenia są ukrywane przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1362">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-1363">Jeśli istnieje właściwość z akcesorem pobierania i ustawiania w klasie bazowej, ale odziedziczona klasa ma tylko akcesor pobierania, właściwość klasy odziedziczonej ukrywa właściwości klasy bazowej, a nie można uzyskać dostępu do metody ustawiającej w klasie bazowej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1363">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="6cdc9-1364">Atrybuty niestandardowe nie są częścią wspólnego typu systemowego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1364">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="6cdc9-1365">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, Metoda ta zwraca <xref:System.Reflection.MemberInfo> obiektów z parametrami typu zastąpionymi przez odpowiednie argumenty typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1365">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6cdc9-1366">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, Metoda ta wyszukuje składowe ograniczenia klasy lub elementów członkowskich <xref:System.Object> przypadku bez ograniczenia klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1366">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-1367">Poniższy przykład kodu demonstruje sposób używania <xref:System.Type.GetMembers> przeciążenia metody, aby zbierać informacje o wszystkich publicznych elementów członkowskich określonej klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1367">The following code example demonstrates how to use the <xref:System.Type.GetMembers> method overload to collect information about all public members of a specified class.</span></span>  
  
 [!code-cpp[Type_GetMembers1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMembers1/CPP/type_getmembers1.cpp#1)]
 [!code-csharp[Type_GetMembers1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMembers1/CS/type_getmembers1.cs#1)]
 [!code-vb[Type_GetMembers1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMembers1/VB/type_getmembers1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="M:System.Type.GetMember(System.String)" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMembers(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMembers(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetMembers (bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMembers(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMembers : System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="type.GetMembers bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMembers(System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="6cdc9-1368">Maska bitów składająca się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1368">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="6cdc9-1369">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1369">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1370">Zero (<see cref="F:System.Reflection.BindingFlags.Default" />), aby zwrócić pustą tablicę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1370">Zero (<see cref="F:System.Reflection.BindingFlags.Default" />), to return an empty array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-1371">W przypadku przesłonięcia w klasie pochodnej, wyszukuje elementy członkowskie zdefiniowane dla bieżącego <see cref="T:System.Type" />, za pomocą ograniczeń w określonym powiązaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1371">When overridden in a derived class, searches for the members defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-1372">Tablica <see cref="T:System.Reflection.MemberInfo" /> obiekty reprezentujące wszystkie elementy członkowskie zdefiniowane dla bieżącego <see cref="T:System.Type" /> zgodnych ograniczeń w określonym powiązaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1372">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all members defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="6cdc9-1373">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1373">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1374">Pusta tablica typu <see cref="T:System.Reflection.MemberInfo" />, jeśli żadne składowe są zdefiniowane dla bieżącego <see cref="T:System.Type" />, lub jeśli żadna z określonych elementów członkowskich ograniczenia wiązania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1374">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if no members are defined for the current <see cref="T:System.Type" />, or if none of the defined members match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-1375">Elementy członkowskie zawierają właściwości, metody, pola, zdarzenia i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1375">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="6cdc9-1376"><xref:System.Type.GetMembers%2A> Metoda nie zwraca elementów członkowskich w określonej kolejności, takie jak alfabetycznej lub kolejności deklaracji.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1376">The <xref:System.Type.GetMembers%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="6cdc9-1377">Kod nie może zależeć od kolejności, w której są zwracane elementy członkowskie, ponieważ kolejność się zmienia.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1377">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="6cdc9-1378">Następujące <xref:System.Reflection.BindingFlags> flagi filtru może służyć do definiowania elementów członkowskich, które można uwzględnić w wyszukiwaniu:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1378">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="6cdc9-1379">Należy określić `BindingFlags.Instance` lub `BindingFlags.Static` w celu uzyskania zwrotu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1379">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="6cdc9-1380">Określ `BindingFlags.Public` obejmujący publiczne elementy członkowskie w wyszukiwaniu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1380">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="6cdc9-1381">Określ `BindingFlags.NonPublic` obejmujący elementów członkowskich niepublicznych (czyli prywatne, wewnętrzne i chronione elementy członkowskie) w wyszukiwaniu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1381">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span> <span data-ttu-id="6cdc9-1382">Tylko chronionych i wewnętrznych składowych w klasach bazowych są zwracane; prywatne elementy członkowskie na klasach bazowych nie są zwracane.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1382">Only protected and internal members on base classes are returned; private members on base classes are not returned.</span></span>  
  
-   <span data-ttu-id="6cdc9-1383">Określ `BindingFlags.FlattenHierarchy` obejmujący `public` i `protected` statyczne elementy członkowskie w hierarchii; `private` statyczne elementy członkowskie w klasie dziedziczonej nie są uwzględniane.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1383">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="6cdc9-1384">Następujące <xref:System.Reflection.BindingFlags> flagi modyfikatora może służyć do zmiany sposobu działania wyszukiwania:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1384">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="6cdc9-1385">`BindingFlags.DeclaredOnly` Aby wyszukać tylko do elementów członkowskich zadeklarowanych w <xref:System.Type>, nie elementów członkowskich, które zostały po prostu odziedziczone.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1385">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="6cdc9-1386">Wywołanie tej metody tylko z `Public` flagi lub tylko `NonPublic` flagi zwróci określone elementy członkowskie i nie wymaga inne flagi.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1386">Calling this method with only the `Public` flag or only the `NonPublic` flag will return the specified members and does not require any other flags.</span></span>  
  
 <span data-ttu-id="6cdc9-1387">Aby uzyskać więcej informacji, zobacz <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1387">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="6cdc9-1388">Aby uzyskać inicjatora klasy (.cctor), za pomocą tego przeciążenia metody, należy określić <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1388">To get the class initializer (.cctor) using this method overload, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="6cdc9-1389">Można również uzyskać inicjatora klasy za pomocą <xref:System.Type.TypeInitializer%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1389">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="6cdc9-1390">Jeśli bieżący element T:System.Type reprezentuje zbudowany typ ogólny, Metoda ta zwraca <xref:System.Reflection.MemberInfo> obiektów z parametrami typu zastąpionymi przez odpowiednie argumenty typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1390">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6cdc9-1391">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, Metoda ta wyszukuje składowe ograniczenia klasy lub elementów członkowskich <xref:System.Object> przypadku bez ograniczenia klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1391">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-1392">Poniższy przykład kodu demonstruje sposób używania <xref:System.Type.GetMembers%28System.Reflection.BindingFlags%29> przeciążenia metody, aby zbierać informacje o wszystkich członków publiczne wystąpienia określonej klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1392">The following code example demonstrates how to use the <xref:System.Type.GetMembers%28System.Reflection.BindingFlags%29> method overload to collect information about all public instance members of a specified class.</span></span>  
  
 [!code-cpp[Type_GetMembers2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMembers2/CPP/type_getmembers2.cpp#1)]
 [!code-csharp[Type_GetMembers2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMembers2/CS/type_getmembers2.cs#1)]
 [!code-vb[Type_GetMembers2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMembers2/VB/type_getmembers2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMember(System.String)" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMethod">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-1393">Pobiera określonej metody bieżącego <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1393">Gets a specific method of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="6cdc9-1394">Ciąg zawierający nazwę publicznej metody pobierania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1394">The string containing the name of the public method to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-1395">Wyszukuje publicznej metody o określonej nazwie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1395">Searches for the public method with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-1396">Obiekt, który reprezentuje publicznej metody o określonej nazwie, jeśli znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1396">An object that represents the public method with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-1397">Wyszukaj `name` jest uwzględniana wielkość liter.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1397">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="6cdc9-1398">Wyszukiwanie obejmuje metody publiczne wystąpienia static i public.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1398">The search includes public static and public instance methods.</span></span>  
  
 <span data-ttu-id="6cdc9-1399">Jeśli metoda jest przeciążona i ma więcej niż jednej metody publiczne, <xref:System.Type.GetMethod%28System.String%29> metoda zgłasza wyjątek <xref:System.Reflection.AmbiguousMatchException> wyjątku.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1399">If a method is overloaded and has more than one public method, the <xref:System.Type.GetMethod%28System.String%29> method throws an <xref:System.Reflection.AmbiguousMatchException> exception.</span></span> <span data-ttu-id="6cdc9-1400">W poniższym przykładzie, jest zgłaszany wyjątek, ponieważ ma więcej niż jednego przeciążenia publicznych <xref:System.Int32.ToString%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1400">In the following example, an exception is thrown because there is more than one public overload of the <xref:System.Int32.ToString%2A?displayProperty=nameWithType> method.</span></span>  <span data-ttu-id="6cdc9-1401">Z drugiej strony ponieważ `Person.ToString` zastąpienia metody <xref:System.Object.ToString%2A?displayProperty=nameWithType> i dlatego nie jest przeciążona, <xref:System.Type.GetMethod%28System.String%29> metoda jest w stanie pobrać <xref:System.Reflection.MethodInfo> obiektu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1401">On the other hand, because the `Person.ToString` method overrides  <xref:System.Object.ToString%2A?displayProperty=nameWithType> and therefore is not overloaded, the <xref:System.Type.GetMethod%28System.String%29> method is able to retrieve the <xref:System.Reflection.MethodInfo> object.</span></span>  
  
 [!code-csharp[System.Type.GetMethod#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Type.GetMethod/cs/GetMethodWithOverloads2.cs#3)]
 [!code-vb[System.Type.GetMethod#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Type.GetMethod/vb/GetMethodWithOverloads2.vb#3)]  
  
 <span data-ttu-id="6cdc9-1402">Możesz wykonać jedną z następujących czynności, aby pobrać określonej metody:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1402">You can do one of the following to retrieve a specific method:</span></span>  
  
-   <span data-ttu-id="6cdc9-1403">Wywołaj <xref:System.Type.GetMethod%28System.String%2CSystem.Reflection.BindingFlags%29> metodę i określić `bindingAttr` argument, który unikatowo identyfikuje metodę.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1403">Call the <xref:System.Type.GetMethod%28System.String%2CSystem.Reflection.BindingFlags%29> method and specify a `bindingAttr` argument that uniquely identifies the method.</span></span> <span data-ttu-id="6cdc9-1404">Na przykład, jeśli wyjątek jest zgłaszany, ponieważ typ ma statycznych i przeciążenie wystąpienia, można określić `bindingAttr` argument <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1404">For example, if the exception is thrown because a type has a static and an instance overload, you can specify a  `bindingAttr` argument  of <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="6cdc9-1405">Wywołanie przeciążenia <xref:System.Type.GetMethod%2A> metodę, która obejmuje `types` parametr, który definiuje typy parametrów metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1405">Call an overload of the <xref:System.Type.GetMethod%2A> method that includes a `types` parameter which defines the types of the method's parameters.</span></span>  
  
-   <span data-ttu-id="6cdc9-1406">Wywołaj <xref:System.Type.GetMethods> metodę, która pobierze tablicę zawierającą wszystkie metody publiczne, należącymi do typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1406">Call the <xref:System.Type.GetMethods> method to retrieve an array containing all of the public methods belonging to a type.</span></span> <span data-ttu-id="6cdc9-1407">Można następnie wykonać iterację do identyfikowania zduplikowanych metody o nazwie `name`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1407">You can then iterate it to identify the duplicate methods named `name`.</span></span>  
  
 <span data-ttu-id="6cdc9-1408">Jeśli bieżący element T:System.Type reprezentuje zbudowany typ ogólny, Metoda ta zwraca <xref:System.Reflection.MethodInfo> z parametrami typu zastąpionymi przez odpowiednie argumenty typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1408">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6cdc9-1409">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, Metoda ta wyszukuje metody ograniczenia klasy lub metody <xref:System.Object> przypadku bez ograniczenia klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1409">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-1410">Dla metod rodzajowych nie ma argumentów typu w parametrze `name`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1410">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="6cdc9-1411">Na przykład, kod C# `GetMember("MyMethod<int>")` wyszukuje element członkowski o nazwie tekst "`MyMethod<int>`", a nie dla metodę o nazwie `MyMethod` ma jeden argument rodzajowy typu `int`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1411">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-1412">Poniższy przykład pobiera metodę o nazwie `MethodA`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1412">The following example gets a method named `MethodA`.</span></span>  
  
 [!code-cpp[Type_GetMethod1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod1/CPP/type_getmethod1.cpp#1)]
 [!code-csharp[Type_GetMethod1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod1/CS/type_getmethod1.cs#1)]
 [!code-vb[Type_GetMethod1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod1/VB/type_getmethod1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="6cdc9-1413">Znaleziono więcej niż jednej metody o określonej nazwie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1413">More than one method is found with the specified name.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-1414">
            <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1414">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, bindingAttr As BindingFlags) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * System.Reflection.BindingFlags -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string * System.Reflection.BindingFlags -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="6cdc9-1415">Ciąg zawierający nazwę metody pobierania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1415">The string containing the name of the method to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="6cdc9-1416">Maska bitów składająca się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1416">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="6cdc9-1417">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1417">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1418">Zero, aby zwrócić <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1418">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-1419">Wyszukiwanie określonej metody, za pomocą ograniczeń w określonym powiązaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1419">Searches for the specified method, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-1420">Obiekt reprezentujący metodę, która spełnia określone wymagania, jeśli znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1420">An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-1421">Następujące <xref:System.Reflection.BindingFlags> flagi filtru może służyć do definiowania metod do uwzględnienia w wyszukiwaniu:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1421">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="6cdc9-1422">Należy określić <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> lub <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> w celu uzyskania zwrotu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1422">You must specify either <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> or <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> in order to get a return.</span></span>  
  
-   <span data-ttu-id="6cdc9-1423">Określ <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> obejmujący metod publicznych w wyszukiwaniu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1423">Specify <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="6cdc9-1424">Określ <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> obejmujący metod niepublicznych (czyli prywatne, wewnętrzne i chronione metody) do wyszukiwania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1424">Specify <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to include non-public methods (that is, private, internal, and protected methods) in the search.</span></span>  
  
-   <span data-ttu-id="6cdc9-1425">Określ <xref:System.Reflection.BindingFlags.FlattenHierarchy?displayProperty=nameWithType> obejmujący `public` i `protected` statyczne elementy członkowskie w hierarchii; `private` statyczne elementy członkowskie w klasie dziedziczonej nie są uwzględniane.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1425">Specify <xref:System.Reflection.BindingFlags.FlattenHierarchy?displayProperty=nameWithType> to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="6cdc9-1426">Następujące <xref:System.Reflection.BindingFlags> flagi modyfikatora może służyć do zmiany sposobu działania wyszukiwania:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1426">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="6cdc9-1427"><xref:System.Reflection.BindingFlags.IgnoreCase?displayProperty=nameWithType> Aby zignorować wielkość liter `name`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1427"><xref:System.Reflection.BindingFlags.IgnoreCase?displayProperty=nameWithType> to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="6cdc9-1428"><xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> Aby wyszukać tylko metod zadeklarowanych w <xref:System.Type>, nie metod, które zostały po prostu odziedziczone.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1428"><xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="6cdc9-1429">Aby uzyskać więcej informacji, zobacz <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1429">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="6cdc9-1430">Jeśli metoda jest przeciążona i więcej niż jednego przeciążenia spełnia ograniczenia określone przez `bindingAttr` argument, metoda zgłasza <xref:System.Reflection.AmbiguousMatchException> wyjątku.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1430">If a method is overloaded and more than one overload meets the constraints specified by the `bindingAttr` argument, the method throws an <xref:System.Reflection.AmbiguousMatchException> exception.</span></span> <span data-ttu-id="6cdc9-1431">W poniższym przykładzie jest zgłaszany wyjątek, ponieważ:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1431">In the following example, an exception is thrown because:</span></span>  
  
-   <span data-ttu-id="6cdc9-1432">`TestClass` Typ ma dwa przeciążenia publiczne wystąpienia `DisplayValue` metody `DisplayValue(String)` i `DisplayValue(String, Object[])`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1432">The `TestClass` type has two public instance overloads of the `DisplayValue` method, `DisplayValue(String)` and `DisplayValue(String, Object[])`.</span></span>  
  
-   <span data-ttu-id="6cdc9-1433">`TestClass` Typ ma dwa przeciążenia publiczne wystąpienia `Equals` metody, z których jeden jest dziedziczony z <xref:System.Object>: `Equals(TestClass)` i `Equals(Object)`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1433">The `TestClass` type has two public instance overloads of the `Equals` method,  one of which is inherited from <xref:System.Object>: `Equals(TestClass)` and `Equals(Object)`.</span></span>  
  
 [!code-csharp[System.Type.GetMethod#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Type.GetMethod/cs/GetMethodWithOverloads1.cs#2)]
 [!code-vb[System.Type.GetMethod#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Type.GetMethod/vb/GetMethodWithOverloads1.vb#2)]  
  
 <span data-ttu-id="6cdc9-1434">Możesz wykonać jedną z następujących czynności, aby pobrać określonej metody:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1434">You can do one of the following to retrieve a specific method:</span></span>  
  
-   <span data-ttu-id="6cdc9-1435">Zmienić ograniczenia wiązania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1435">Change the binding constraints.</span></span> <span data-ttu-id="6cdc9-1436">W poprzednim przykładzie próby pobrania publiczne wystąpienia `Equals` pobiera metodę, która jest deklarowana przez typ i nie są dziedziczone pomyślnie `Equals(TestClass)`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1436">In the previous example, attempting to retrieve a public instance `Equals` method that is declared by the type and not inherited successfully retrieves `Equals(TestClass)`.</span></span>  
  
-   <span data-ttu-id="6cdc9-1437">Wywołanie przeciążenia <xref:System.Type.GetMethod%2A> metodę, która obejmuje `types` parametr, który definiuje typy parametrów metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1437">Call an overload of the <xref:System.Type.GetMethod%2A> method that includes a `types` parameter which defines the types of the method's parameters.</span></span>  
  
-   <span data-ttu-id="6cdc9-1438">Wywołaj <xref:System.Type.GetMethods%28System.Reflection.BindingFlags%29> metodę, która pobierze tablicę zawierającą wszystkie metody należące do typu, które mają atrybuty określonego powiązania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1438">Call the <xref:System.Type.GetMethods%28System.Reflection.BindingFlags%29> method to retrieve an array containing all of the methods belonging to a type that have the specified binding attributes.</span></span> <span data-ttu-id="6cdc9-1439">Można następnie wykonać iterację do identyfikowania zduplikowanych metody o nazwie `name`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1439">You can then iterate it to identify the duplicate methods named `name`.</span></span> <span data-ttu-id="6cdc9-1440">Podejście to zostało zilustrowane w poprzednim przykładzie obsługa <xref:System.Reflection.AmbiguousMatchException> wyjątku.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1440">This approach is illustrated in the previous example's handler for the <xref:System.Reflection.AmbiguousMatchException> exception.</span></span>  
  
 <span data-ttu-id="6cdc9-1441">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, Metoda ta zwraca <xref:System.Reflection.MethodInfo> z parametrami typu zastąpionymi przez odpowiednie argumenty typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1441">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6cdc9-1442">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, Metoda ta wyszukuje metody ograniczenia klasy lub metody <xref:System.Object> przypadku bez ograniczenia klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1442">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-1443">Dla metod rodzajowych nie ma argumentów typu w parametrze `name`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1443">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="6cdc9-1444">Na przykład, kod C# `GetMember("MyMethod<int>")` wyszukuje element członkowski o nazwie tekst "`MyMethod<int>`", a nie dla metodę o nazwie `MyMethod` ma jeden argument rodzajowy typu `int`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1444">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-1445">Poniższy przykład pobiera metodę, która spełnia określone powiązanie flag.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1445">The following example gets the method that matches the specified binding flags.</span></span>  
  
 [!code-cpp[Type_GetMethod2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod2/CPP/type_getmethod2.cpp#1)]
 [!code-csharp[Type_GetMethod2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod2/CS/type_getmethod2.cs#1)]
 [!code-vb[Type_GetMethod2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod2/VB/type_getmethod2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="6cdc9-1446">Znaleziono więcej niż jedną metodę o określonej nazwie i pasującą do ograniczeń w określonym powiązaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1446">More than one method is found with the specified name and matching the specified binding constraints.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-1447">
            <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1447">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, types As Type()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * Type[] -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string * Type[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, types)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Type[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="6cdc9-1448">Ciąg zawierający nazwę publicznej metody pobierania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1448">The string containing the name of the public method to get.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="6cdc9-1449">Tablica <see cref="T:System.Type" /> obiektów reprezentujących liczbę, kolejność i typ parametrów dla metody, aby uzyskać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1449">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          </span>
          <span data-ttu-id="6cdc9-1450">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1450">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1451">Pusta tablica <see cref="T:System.Type" /> obiektów (zgodnie z informacjami od <see cref="F:System.Type.EmptyTypes" /> pole) do uzyskania metody, która nie przyjmuje żadnych parametrów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1451">An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-1452">Wyszukiwanie określonej metody publiczne, której parametry pasuje określone typy argumentów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1452">Searches for the specified public method whose parameters match the specified argument types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-1453">Obiekt reprezentujący publicznej metody, której parametry pasuje określone typy argumentów, jeśli znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1453">An object representing the public method whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-1454">Wyszukaj `name` jest uwzględniana wielkość liter.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1454">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="6cdc9-1455">Wyszukiwanie obejmuje metody publiczne wystąpienia static i public.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1455">The search includes public static and public instance methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-1456">Nie można pominąć parametrów przy wyszukiwaniu konstruktorów i metod.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1456">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="6cdc9-1457">Parametry można pominąć jedynie podczas wywoływania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1457">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="6cdc9-1458">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, Metoda ta zwraca <xref:System.Reflection.MethodInfo> z parametrami typu zastąpionymi przez odpowiednie argumenty typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1458">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6cdc9-1459">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, Metoda ta wyszukuje metody ograniczenia klasy lub metody <xref:System.Object> przypadku bez ograniczenia klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1459">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-1460">`name` Parametru nie może zawierać argumentów typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1460">The `name` parameter cannot include type arguments.</span></span> <span data-ttu-id="6cdc9-1461">Na przykład, kod C# `GetMethod("MyGenericMethod<int>")` wyszukuje metody o nazwie tekst "`MyGenericMethod<int>`", a nie dla metodę o nazwie `MyGenericMethod` ma jeden argument rodzajowy typu `int`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1461">For example, the C# code `GetMethod("MyGenericMethod<int>")` searches for a method with the text name "`MyGenericMethod<int>`", rather than for a method named `MyGenericMethod` that has one generic argument of type `int`.</span></span> <span data-ttu-id="6cdc9-1462">Zamiast tego należy użyć `GetMethod("MyGenericMethod")` za pomocą odpowiednich parametrów w `types` tablicy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1462">Instead, use `GetMethod("MyGenericMethod")` with the appropriate parameter in the `types` array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-1463">Poniższy przykład umożliwia znalezienie określonego przeciążenia `MethodA`, określając różne typy argumentów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1463">The following example finds specific overloads of `MethodA`, specifying a variety of argument types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-1464">[!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] Przykład wymaga `/unsafe` — opcja kompilatora.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1464">The [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] example requires the `/unsafe` compiler option.</span></span>  
  
 [!code-cpp[Type_GetMethod4#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod4/CPP/type_getmethod4.cpp#1)]
 [!code-csharp[Type_GetMethod4#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod4/CS/type_getmethod4.cs#1)]
 [!code-vb[Type_GetMethod4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod4/VB/type_getmethod4.vb#1)]  
  
 <span data-ttu-id="6cdc9-1465">Poniższy przykład pobiera <xref:System.Reflection.MethodInfo> obiekty reprezentujące `Add` metod typu nieogólnego ( <xref:System.Collections.ArrayList> klasy), to otwarty typ ogólny ( <xref:System.Collections.Generic.List%601> klasy), a typem ogólnym zamknięte ( `List(Of String)` typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1465">The following example retrieves <xref:System.Reflection.MethodInfo> objects that represent the `Add` methods  of a non-generic type (the <xref:System.Collections.ArrayList> class), an open generic type (the <xref:System.Collections.Generic.List%601> class), and a closed generic type (the `List(Of String)` type.</span></span>  
  
 [!code-csharp[System.Type.GetMethod#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Type.GetMethod/cs/GetMethod1.cs#1)]
 [!code-vb[System.Type.GetMethod#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Type.GetMethod/vb/GetMethod1.vb#1)]  
  
 <span data-ttu-id="6cdc9-1466">W przykładzie zdefiniowano `GetAddMethod` metodę, która pobiera odpowiednie <xref:System.Reflection.MethodInfo> obiektu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1466">The example defines a `GetAddMethod` method that retrieves the appropriate <xref:System.Reflection.MethodInfo> object.</span></span> <span data-ttu-id="6cdc9-1467">Aby zapewnić `types` argument to otwarty typ ogólny, wywoływanych przez nią <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1467">To provide the `types` argument for an open generic type, it calls the <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="6cdc9-1468">Aby zapewnić `types` argument zamknięty typ ogólny, pobiera wartość <xref:System.Type.GenericTypeArguments%2A?displayProperty=nameWithType> właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1468">To provide the `types` argument for a closed generic type, it retrieves the value of the <xref:System.Type.GenericTypeArguments%2A?displayProperty=nameWithType> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="6cdc9-1469">Więcej niż jednej metody znajduje się o określonej nazwie i określić parametry.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1469">More than one method is found with the specified name and specified parameters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-1470">
            <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1470">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cdc9-1471">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1471">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1472">
            <paramref name="types" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1472">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cdc9-1473">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1473">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1474">Jeden z elementów w <paramref name="types" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1474">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6cdc9-1475">
            <paramref name="types" /> ma charakter wielowymiarowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1475">
              <paramref name="types" /> is multidimensional.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, int genericParameterCount, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo GetMethod(string name, int32 genericParameterCount, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Int32,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, genericParameterCount As Integer, types As Type()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, int genericParameterCount, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="member this.GetMethod : string * int * Type[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, genericParameterCount, types)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="genericParameterCount" Type="System.Int32" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="types">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, types As Type(), modifiers As ParameterModifier()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="6cdc9-1476">Ciąg zawierający nazwę publicznej metody pobierania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1476">The string containing the name of the public method to get.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="6cdc9-1477">Tablica <see cref="T:System.Type" /> obiektów reprezentujących liczbę, kolejność i typ parametrów dla metody, aby uzyskać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1477">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          </span>
          <span data-ttu-id="6cdc9-1478">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1478">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1479">Pusta tablica <see cref="T:System.Type" /> obiektów (zgodnie z informacjami od <see cref="F:System.Type.EmptyTypes" /> pole) do uzyskania metody, która nie przyjmuje żadnych parametrów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1479">An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="6cdc9-1480">Tablica <see cref="T:System.Reflection.ParameterModifier" /> obiektów reprezentujących atrybuty skojarzone z odpowiednim elementem w <c>typy</c> tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1480">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="6cdc9-1481">Można używać tylko podczas wywoływania przez parametry międzyoperacyjności i tylko wtedy COM, które są przekazywane przez odwołanie, są obsługiwane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1481">To be only used when calling through COM interop, and only parameters that are passed by reference are handled.</span>
          </span>
          <span data-ttu-id="6cdc9-1482">Domyślny konsolidator nie przetwarza tego parametru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1482">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-1483">Wyszukiwanie określonej metody publiczne, której parametry odpowiadają określone typy argumentów i modyfikatorów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1483">Searches for the specified public method whose parameters match the specified argument types and modifiers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-1484">Obiekt reprezentujący metodę publiczną, która spełnia określone wymagania, jeśli znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1484">An object representing the public method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-1485">Mimo że domyślny integrator nie przetwarza <xref:System.Reflection.ParameterModifier> ( `modifiers` parametru), można użyć streszczenia <xref:System.Reflection.Binder?displayProperty=nameWithType> klasy do napisania niestandardowego integratora, który przetwarza `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1485">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="6cdc9-1486">`ParameterModifier` jest używana tylko podczas wywoływania przez współdziałania z modelem COM i są obsługiwane tylko w przypadku parametrów, które są przekazywane przez odwołanie.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1486">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="6cdc9-1487">Wyszukaj `name` jest uwzględniana wielkość liter.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1487">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="6cdc9-1488">Wyszukiwanie obejmuje metody publiczne wystąpienia static i public.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1488">The search includes public static and public instance methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-1489">Nie można pominąć parametrów przy wyszukiwaniu konstruktorów i metod.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1489">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="6cdc9-1490">Parametry można pominąć jedynie podczas wywoływania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1490">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="6cdc9-1491">Jeśli bieżący element T:System.Type reprezentuje zbudowany typ ogólny, Metoda ta zwraca <xref:System.Reflection.MethodInfo> z parametrami typu zastąpionymi przez odpowiednie argumenty typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1491">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6cdc9-1492">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, Metoda ta wyszukuje metody ograniczenia klasy lub metody <xref:System.Object> przypadku bez ograniczenia klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1492">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-1493">Dla metod rodzajowych nie ma argumentów typu w parametrze `name`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1493">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="6cdc9-1494">Na przykład, kod C# `GetMethod("MyMethod<int>")` wyszukuje element członkowski o nazwie tekst "`MyMethod<int>`", a nie dla metodę o nazwie `MyMethod` ma jeden argument rodzajowy typu `int`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1494">For example, the C# code `GetMethod("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span> <span data-ttu-id="6cdc9-1495">Zamiast tego należy użyć `GetMethod("MyMethod")` za pomocą odpowiednich parametrów w `types` tablicy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1495">Instead, use `GetMethod("MyMethod")` with the appropriate parameter in the `types` array.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="6cdc9-1496">Więcej niż jednej metody znajduje się o określonej nazwie i określić parametry.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1496">More than one method is found with the specified name and specified parameters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-1497">
            <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1497">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cdc9-1498">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1498">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1499">
            <paramref name="types" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1499">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cdc9-1500">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1500">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1501">Jeden z elementów w <paramref name="types" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1501">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6cdc9-1502">
            <paramref name="types" /> ma charakter wielowymiarowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1502">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="6cdc9-1503">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1503">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1504">
            <paramref name="modifiers" /> ma charakter wielowymiarowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1504">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, int genericParameterCount, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo GetMethod(string name, int32 genericParameterCount, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Int32,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, genericParameterCount As Integer, types As Type(), modifiers As ParameterModifier()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, int genericParameterCount, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="member this.GetMethod : string * int * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, genericParameterCount, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="genericParameterCount" Type="System.Int32" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, bindingAttr, binder, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="6cdc9-1505">Ciąg zawierający nazwę metody pobierania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1505">The string containing the name of the method to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="6cdc9-1506">Maska bitów składająca się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1506">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="6cdc9-1507">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1507">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1508">Zero, aby zwrócić <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1508">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="6cdc9-1509">Obiekt, który określa zestaw właściwości i umożliwia powiązanie, które może obejmować wybór metody przeciążonej, wymuszanie typów argumentu i wywołanie elementu członkowskiego przez odbicie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1509">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="6cdc9-1510">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1510">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1511">Odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic), aby użyć <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1511">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="6cdc9-1512">Tablica <see cref="T:System.Type" /> obiektów reprezentujących liczbę, kolejność i typ parametrów dla metody, aby uzyskać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1512">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          </span>
          <span data-ttu-id="6cdc9-1513">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1513">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1514">Pusta tablica <see cref="T:System.Type" /> obiektów (zgodnie z informacjami od <see cref="F:System.Type.EmptyTypes" /> pole) do uzyskania metody, która nie przyjmuje żadnych parametrów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1514">An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="6cdc9-1515">Tablica <see cref="T:System.Reflection.ParameterModifier" /> obiektów reprezentujących atrybuty skojarzone z odpowiednim elementem w <c>typy</c> tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1515">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="6cdc9-1516">Można używać tylko podczas wywoływania przez parametry międzyoperacyjności i tylko wtedy COM, które są przekazywane przez odwołanie, są obsługiwane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1516">To be only used when calling through COM interop, and only parameters that are passed by reference are handled.</span>
          </span>
          <span data-ttu-id="6cdc9-1517">Domyślny konsolidator nie przetwarza tego parametru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1517">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-1518">Wyszukuje określoną metodę, której parametry odpowiadają określone typy argumentów i modyfikatorów, za pomocą ograniczeń w określonym powiązaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1518">Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-1519">Obiekt reprezentujący metodę, która spełnia określone wymagania, jeśli znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1519">An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-1520">Mimo że domyślny integrator nie przetwarza <xref:System.Reflection.ParameterModifier> ( `modifiers` parametru), można użyć streszczenia <xref:System.Reflection.Binder?displayProperty=nameWithType> klasy do napisania niestandardowego integratora, który przetwarza `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1520">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="6cdc9-1521">`ParameterModifier` jest używana tylko podczas wywoływania przez współdziałania z modelem COM i są obsługiwane tylko w przypadku parametrów, które są przekazywane przez odwołanie.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1521">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="6cdc9-1522">Następujące <xref:System.Reflection.BindingFlags> flagi filtru może służyć do definiowania metod do uwzględnienia w wyszukiwaniu:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1522">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="6cdc9-1523">Należy określić `BindingFlags.Instance` lub `BindingFlags.Static` w celu uzyskania zwrotu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1523">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="6cdc9-1524">Określ `BindingFlags.Public` obejmujący metod publicznych w wyszukiwaniu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1524">Specify `BindingFlags.Public` to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="6cdc9-1525">Określ `BindingFlags.NonPublic` obejmujący metod niepublicznych (czyli prywatne, wewnętrzne i chronione metody) do wyszukiwania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1525">Specify `BindingFlags.NonPublic` to include nonpublic methods (that is, private, internal, and protected methods) in the search.</span></span>  
  
-   <span data-ttu-id="6cdc9-1526">Określ `BindingFlags.FlattenHierarchy` obejmujący `public` i `protected` statyczne elementy członkowskie w hierarchii; `private` statyczne elementy członkowskie w klasie dziedziczonej nie są uwzględniane.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1526">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="6cdc9-1527">Następujące <xref:System.Reflection.BindingFlags> flagi modyfikatora może służyć do zmiany sposobu działania wyszukiwania:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1527">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="6cdc9-1528">`BindingFlags.IgnoreCase` Aby zignorować wielkość liter `name`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1528">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="6cdc9-1529">`BindingFlags.DeclaredOnly` Aby wyszukać tylko metod zadeklarowanych w <xref:System.Type>, nie metod, które zostały po prostu odziedziczone.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1529">`BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="6cdc9-1530">Aby uzyskać więcej informacji, zobacz <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1530">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-1531">Nie można pominąć parametrów przy wyszukiwaniu konstruktorów i metod.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1531">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="6cdc9-1532">Parametry można pominąć jedynie podczas wywoływania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1532">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="6cdc9-1533">Jeśli bieżący element T:System.Type reprezentuje zbudowany typ ogólny, Metoda ta zwraca <xref:System.Reflection.MethodInfo> z parametrami typu zastąpionymi przez odpowiednie argumenty typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1533">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6cdc9-1534">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, Metoda ta wyszukuje metody ograniczenia klasy lub metody <xref:System.Object> przypadku bez ograniczenia klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1534">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-1535">Dla metod rodzajowych nie ma argumentów typu w parametrze `name`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1535">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="6cdc9-1536">Na przykład, kod C# `GetMember("MyMethod<int>")` wyszukuje element członkowski o nazwie tekst "`MyMethod<int>`", a nie dla metodę o nazwie `MyMethod` ma jeden argument rodzajowy typu `int`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1536">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-1537">Poniższy przykład umożliwia znalezienie określonego przeciążenia `MethodA`, określając ograniczenia wiązania i różne typy argumentów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1537">The following example finds specific overloads of `MethodA`, specifying binding constraints and a variety of argument types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-1538">[!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] Przykład wymaga `/unsafe` — opcja kompilatora.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1538">The [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] example requires the `/unsafe` compiler option.</span></span>  
  
 [!code-cpp[Type_GetMethod5#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod5/CPP/type_getmethod5.cpp#1)]
 [!code-csharp[Type_GetMethod5#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod5/CS/type_getmethod5.cs#1)]
 [!code-vb[Type_GetMethod5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod5/VB/type_getmethod5.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="6cdc9-1539">Znaleziono więcej niż jedną metodę o określonej nazwie i pasującą do ograniczeń w określonym powiązaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1539">More than one method is found with the specified name and matching the specified binding constraints.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-1540">
            <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1540">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cdc9-1541">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1541">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1542">
            <paramref name="types" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1542">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cdc9-1543">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1543">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1544">Jeden z elementów w <paramref name="types" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1544">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6cdc9-1545">
            <paramref name="types" /> ma charakter wielowymiarowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1545">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="6cdc9-1546">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1546">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1547">
            <paramref name="modifiers" /> ma charakter wielowymiarowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1547">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, int genericParameterCount, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo GetMethod(string name, int32 genericParameterCount, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Int32,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, int genericParameterCount, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="member this.GetMethod : string * int * System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, genericParameterCount, bindingAttr, binder, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="genericParameterCount" Type="System.Int32" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="6cdc9-1548">Ciąg zawierający nazwę metody pobierania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1548">The string containing the name of the method to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="6cdc9-1549">Maska bitów składająca się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1549">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="6cdc9-1550">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1550">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1551">Zero, aby zwrócić <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1551">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="6cdc9-1552">Obiekt, który określa zestaw właściwości i umożliwia powiązanie, które może obejmować wybór metody przeciążonej, wymuszanie typów argumentu i wywołanie elementu członkowskiego przez odbicie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1552">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="6cdc9-1553">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1553">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1554">Odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic), aby użyć <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1554">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="callConvention">
          <span data-ttu-id="6cdc9-1555">Obiekt, który określa zestaw reguł dotyczących kolejności i układ argumentów, jak wartość zwracana jest przekazywana, jakie rejestrów są używane dla argumentów i jak stos jest czyszczony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1555">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and how the stack is cleaned up.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="6cdc9-1556">Tablica <see cref="T:System.Type" /> obiektów reprezentujących liczbę, kolejność i typ parametrów dla metody, aby uzyskać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1556">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          </span>
          <span data-ttu-id="6cdc9-1557">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1557">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1558">Pusta tablica <see cref="T:System.Type" /> obiektów (zgodnie z informacjami od <see cref="F:System.Type.EmptyTypes" /> pole) do uzyskania metody, która nie przyjmuje żadnych parametrów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1558">An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="6cdc9-1559">Tablica <see cref="T:System.Reflection.ParameterModifier" /> obiektów reprezentujących atrybuty skojarzone z odpowiednim elementem w <c>typy</c> tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1559">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="6cdc9-1560">Można używać tylko podczas wywoływania przez parametry międzyoperacyjności i tylko wtedy COM, które są przekazywane przez odwołanie, są obsługiwane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1560">To be only used when calling through COM interop, and only parameters that are passed by reference are handled.</span>
          </span>
          <span data-ttu-id="6cdc9-1561">Domyślny konsolidator nie przetwarza tego parametru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1561">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-1562">Wyszukuje określoną metodę, której parametry odpowiadają określone typy argumentów i modyfikatorów, za pomocą ograniczeń w określonym powiązaniu i określonej konwencji wywoływania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1562">Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-1563">Obiekt reprezentujący metodę, która spełnia określone wymagania, jeśli znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1563">An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-1564">Mimo że domyślny integrator nie przetwarza <xref:System.Reflection.ParameterModifier> ( `modifiers` parametru), można użyć streszczenia <xref:System.Reflection.Binder?displayProperty=nameWithType> klasy do napisania niestandardowego integratora, który przetwarza `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1564">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="6cdc9-1565">`ParameterModifier` jest używana tylko podczas wywoływania przez współdziałania z modelem COM i są obsługiwane tylko w przypadku parametrów, które są przekazywane przez odwołanie.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1565">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="6cdc9-1566">W poniższej tabeli przedstawiono, jakie elementy członkowskie klasy podstawowej są zwracane przez `GetXXX` metody uwzględnianiem typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1566">The following table shows what members of a base class are returned by the `GetXXX` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="6cdc9-1567">Typ elementu członkowskiego</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1567">Member Type</span></span>|<span data-ttu-id="6cdc9-1568">Static</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1568">Static</span></span>|<span data-ttu-id="6cdc9-1569">Niestatyczna</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1569">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="6cdc9-1570">Konstruktor</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1570">Constructor</span></span>|<span data-ttu-id="6cdc9-1571">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1571">No</span></span>|<span data-ttu-id="6cdc9-1572">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1572">No</span></span>|  
|<span data-ttu-id="6cdc9-1573">Pole</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1573">Field</span></span>|<span data-ttu-id="6cdc9-1574">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1574">No</span></span>|<span data-ttu-id="6cdc9-1575">Tak.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1575">Yes.</span></span> <span data-ttu-id="6cdc9-1576">Pole jest zawsze ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1576">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6cdc9-1577">Zdarzenie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1577">Event</span></span>|<span data-ttu-id="6cdc9-1578">Nie dotyczy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1578">Not applicable</span></span>|<span data-ttu-id="6cdc9-1579">Zasadą systemu typu jest to, że dziedziczenie jest takie samo, jak w przypadku metod, które implementują właściwość.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1579">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6cdc9-1580">Odbicie traktuje właściwości jako ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1580">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-1581">Patrz Uwaga 2 poniżej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1581">See note 2 below.</span></span>|  
|<span data-ttu-id="6cdc9-1582">Metoda</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1582">Method</span></span>|<span data-ttu-id="6cdc9-1583">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1583">No</span></span>|<span data-ttu-id="6cdc9-1584">Tak.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1584">Yes.</span></span> <span data-ttu-id="6cdc9-1585">Metodą (zarówno wirtualną, jak i niewirtualną) może być ukrycie przez nazwę lub przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1585">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6cdc9-1586">Typu zagnieżdżony</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1586">Nested Type</span></span>|<span data-ttu-id="6cdc9-1587">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1587">No</span></span>|<span data-ttu-id="6cdc9-1588">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1588">No</span></span>|  
|<span data-ttu-id="6cdc9-1589">Właściwość</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1589">Property</span></span>|<span data-ttu-id="6cdc9-1590">Nie dotyczy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1590">Not applicable</span></span>|<span data-ttu-id="6cdc9-1591">Zasadą systemu typu jest to, że dziedziczenie jest takie samo, jak w przypadku metod, które implementują właściwość.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1591">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6cdc9-1592">Odbicie traktuje właściwości jako ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1592">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-1593">Patrz Uwaga 2 poniżej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1593">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="6cdc9-1594">Ukrycie przez nazwę i podpis dotyczy wszystkich części podpisu, w tym modyfikatorów niestandardowych, zwraca typy, typy parametrów, wartowników i niezarządzane konwencje wywoływania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1594">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="6cdc9-1595">To jest porównanie binarne.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1595">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="6cdc9-1596">W celu odbicia właściwości i zdarzenia są ukrywane przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1596">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-1597">Jeśli istnieje właściwość z akcesorem pobierania i ustawiania w klasie bazowej, ale odziedziczona klasa ma tylko akcesor pobierania, właściwość klasy odziedziczonej ukrywa właściwości klasy bazowej, a nie można uzyskać dostępu do metody ustawiającej w klasie bazowej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1597">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="6cdc9-1598">Atrybuty niestandardowe nie są częścią wspólnego typu systemowego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1598">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="6cdc9-1599">Następujące <xref:System.Reflection.BindingFlags> flagi filtru może służyć do definiowania metod do uwzględnienia w wyszukiwaniu:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1599">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="6cdc9-1600">Należy określić `BindingFlags.Instance` lub `BindingFlags.Static` w celu uzyskania zwrotu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1600">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="6cdc9-1601">Określ `BindingFlags.Public` obejmujący metod publicznych w wyszukiwaniu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1601">Specify `BindingFlags.Public` to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="6cdc9-1602">Określ `BindingFlags.NonPublic` obejmujący metod niepublicznych (czyli prywatne, wewnętrzne i chronione metody) do wyszukiwania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1602">Specify `BindingFlags.NonPublic` to include nonpublic methods (that is, private, internal, and protected methods) in the search.</span></span>  
  
-   <span data-ttu-id="6cdc9-1603">Określ `BindingFlags.FlattenHierarchy` obejmujący `public` i `protected` statyczne elementy członkowskie w hierarchii; `private` statyczne elementy członkowskie w klasie dziedziczonej nie są uwzględniane.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1603">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="6cdc9-1604">Następujące <xref:System.Reflection.BindingFlags> flagi modyfikatora może służyć do zmiany sposobu działania wyszukiwania:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1604">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="6cdc9-1605">`BindingFlags.IgnoreCase` Aby zignorować wielkość liter `name`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1605">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="6cdc9-1606">`BindingFlags.DeclaredOnly` Aby wyszukać tylko metod zadeklarowanych w <xref:System.Type>, nie metod, które zostały po prostu odziedziczone.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1606">`BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="6cdc9-1607">Aby uzyskać więcej informacji, zobacz <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1607">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-1608">Nie można pominąć parametrów przy wyszukiwaniu konstruktorów i metod.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1608">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="6cdc9-1609">Parametry można pominąć jedynie podczas wywoływania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1609">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="6cdc9-1610">Jeśli bieżący element T:System.Type reprezentuje zbudowany typ ogólny, Metoda ta zwraca <xref:System.Reflection.MethodInfo> z parametrami typu zastąpionymi przez odpowiednie argumenty typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1610">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6cdc9-1611">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, Metoda ta wyszukuje metody ograniczenia klasy lub metody <xref:System.Object> przypadku bez ograniczenia klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1611">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-1612">Dla metod rodzajowych nie ma argumentów typu w parametrze `name`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1612">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="6cdc9-1613">Na przykład, kod C# `GetMember("MyMethod<int>")` wyszukuje element członkowski o nazwie tekst "`MyMethod<int>`", a nie dla metodę o nazwie `MyMethod` ma jeden argument rodzajowy typu `int`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1613">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-1614">Poniższy przykład umożliwia znalezienie określonego przeciążenia `MethodA`, określając ograniczenia wiązania, Konwencje wywoływania oraz różne typy argumentów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1614">The following example finds specific overloads of `MethodA`, specifying binding constraints, calling conventions, and a variety of argument types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-1615">[!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] Przykład wymaga `/unsafe` — opcja kompilatora.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1615">The [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] example requires the `/unsafe` compiler option.</span></span>  
  
 [!code-cpp[Type_GetMethod3#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod3/CPP/type_getmethod3.cpp#1)]
 [!code-csharp[Type_GetMethod3#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod3/CS/type_getmethod3.cs#1)]
 [!code-vb[Type_GetMethod3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod3/VB/type_getmethod3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="6cdc9-1616">Znaleziono więcej niż jedną metodę o określonej nazwie i pasującą do ograniczeń w określonym powiązaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1616">More than one method is found with the specified name and matching the specified binding constraints.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-1617">
            <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1617">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cdc9-1618">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1618">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1619">
            <paramref name="types" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1619">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cdc9-1620">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1620">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1621">Jeden z elementów w <paramref name="types" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1621">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6cdc9-1622">
            <paramref name="types" /> ma charakter wielowymiarowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1622">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="6cdc9-1623">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1623">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1624">
            <paramref name="modifiers" /> ma charakter wielowymiarowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1624">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.CallingConventions" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, int genericParameterCount, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo GetMethod(string name, int32 genericParameterCount, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Int32,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, int genericParameterCount, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="member this.GetMethod : string * int * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, genericParameterCount, bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="genericParameterCount" Type="System.Int32" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="callConvention">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImpl">
      <MemberSignature Language="C#" Value="protected abstract System.Reflection.MethodInfo GetMethodImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethodImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Reflection::MethodInfo ^ GetMethodImpl(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethodImpl : string * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethodImpl (name, bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="6cdc9-1625">Ciąg zawierający nazwę metody pobierania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1625">The string containing the name of the method to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="6cdc9-1626">Maska bitów składająca się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1626">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="6cdc9-1627">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1627">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1628">Zero, aby zwrócić <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1628">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="6cdc9-1629">Obiekt, który określa zestaw właściwości i umożliwia powiązanie, które może obejmować wybór metody przeciążonej, wymuszanie typów argumentu i wywołanie elementu członkowskiego przez odbicie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1629">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="6cdc9-1630">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1630">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1631">Odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic), aby użyć <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1631">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="callConvention">
          <span data-ttu-id="6cdc9-1632">Obiekt, który określa zestaw reguł dotyczących kolejności i układu argumentów, jak wartość zwracana jest przekazywana, jakie rejestrów są używane dla argumentów i jakie procesy czyści stos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1632">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and what process cleans up the stack.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="6cdc9-1633">Tablica <see cref="T:System.Type" /> obiektów reprezentujących liczbę, kolejność i typ parametrów dla metody, aby uzyskać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1633">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          </span>
          <span data-ttu-id="6cdc9-1634">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1634">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1635">Pusta tablica typu <see cref="T:System.Type" /> (Type [] types = new Type[0]) umożliwia pobranie metodę, która nie przyjmuje żadnych parametrów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1635">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</span>
          </span>
          <span data-ttu-id="6cdc9-1636">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1636">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1637">
            <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1637">
              <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cdc9-1638">Jeśli <c>typy</c> jest <see langword="null" />, argumenty nie zostały dopasowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1638">If <c>types</c> is <see langword="null" />, arguments are not matched.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="6cdc9-1639">Tablica <see cref="T:System.Reflection.ParameterModifier" /> obiektów reprezentujących atrybuty skojarzone z odpowiednim elementem w <c>typy</c> tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1639">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="6cdc9-1640">Domyślny konsolidator nie przetwarza tego parametru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1640">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-1641">W przypadku przesłonięcia w klasie pochodnej, wyszukuje określoną metodę, której parametry odpowiadają określone typy argumentów i modyfikatorów, korzystając z ograniczeń w określonym powiązaniu i określonej konwencji wywoływania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1641">When overridden in a derived class, searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-1642">Obiekt reprezentujący metodę, która spełnia określone wymagania, jeśli znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1642">An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-1643">Mimo że domyślny integrator nie przetwarza <xref:System.Reflection.ParameterModifier> ( `modifiers` parametru), można użyć streszczenia <xref:System.Reflection.Binder?displayProperty=nameWithType> klasy do napisania niestandardowego integratora, który przetwarza `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1643">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="6cdc9-1644">`ParameterModifier` jest używana tylko podczas wywoływania przez współdziałania z modelem COM i są obsługiwane tylko w przypadku parametrów, które są przekazywane przez odwołanie.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1644">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="6cdc9-1645">Jeśli `types` jest `null`, argumenty nie zostały dopasowane.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1645">If `types` is `null`, arguments are not matched.</span></span>  
  
 <span data-ttu-id="6cdc9-1646">Następujące <xref:System.Reflection.BindingFlags> flagi filtru może służyć do definiowania metod do uwzględnienia w wyszukiwaniu:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1646">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="6cdc9-1647">Należy określić `BindingFlags.Instance` lub `BindingFlags.Static` w celu uzyskania zwrotu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1647">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="6cdc9-1648">Określ `BindingFlags.Public` obejmujący metod publicznych w wyszukiwaniu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1648">Specify `BindingFlags.Public` to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="6cdc9-1649">Określ `BindingFlags.NonPublic` obejmujący metod niepublicznych (czyli prywatne, wewnętrzne i chronione metody) do wyszukiwania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1649">Specify `BindingFlags.NonPublic` to include non-public methods (that is, private, internal, and protected methods) in the search.</span></span>  
  
-   <span data-ttu-id="6cdc9-1650">Określ `BindingFlags.FlattenHierarchy` obejmujący `public` i `protected` statyczne elementy członkowskie w hierarchii; `private` statyczne elementy członkowskie w klasie dziedziczonej nie są uwzględniane.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1650">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="6cdc9-1651">Następujące <xref:System.Reflection.BindingFlags> flagi modyfikatora może służyć do zmiany sposobu działania wyszukiwania:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1651">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="6cdc9-1652">`BindingFlags.IgnoreCase` Aby zignorować wielkość liter `name`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1652">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="6cdc9-1653">`BindingFlags.DeclaredOnly` Aby wyszukać tylko metod zadeklarowanych w <xref:System.Type>, nie metod, które zostały po prostu odziedziczone.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1653">`BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="6cdc9-1654">Aby uzyskać więcej informacji, zobacz <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1654">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="6cdc9-1655">Znaleziono więcej niż jedną metodę o określonej nazwie i pasującą do ograniczeń w określonym powiązaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1655">More than one method is found with the specified name and matching the specified binding constraints.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-1656">
            <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1656">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6cdc9-1657">
            <paramref name="types" /> ma charakter wielowymiarowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1657">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="6cdc9-1658">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1658">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1659">
            <paramref name="modifiers" /> ma charakter wielowymiarowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1659">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="6cdc9-1660">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1660">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1661">
            <paramref name="types" /> i <paramref name="modifiers" /> nie mają tę samą długość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1661">
              <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="6cdc9-1662">Bieżącym typem jest <see cref="T:System.Reflection.Emit.TypeBuilder" /> lub <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1662">The current type is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> or <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.CallingConventions" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethodImpl">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.MethodInfo GetMethodImpl (string name, int genericParameterCount, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethodImpl(string name, int32 genericParameterCount, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethodImpl(System.String,System.Int32,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Reflection::MethodInfo ^ GetMethodImpl(System::String ^ name, int genericParameterCount, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethodImpl : string * int * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethodImpl : string * int * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethodImpl (name, genericParameterCount, bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="genericParameterCount" Type="System.Int32" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="callConvention">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMethods">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-1663">Pobiera metody bieżący <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1663">Gets the methods of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo[] GetMethods ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetMethods() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethods" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethods () As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetMethods();" />
      <MemberSignature Language="F#" Value="abstract member GetMethods : unit -&gt; System.Reflection.MethodInfo[]&#xA;override this.GetMethods : unit -&gt; System.Reflection.MethodInfo[]" Usage="type.GetMethods " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethods</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-1664">Zwraca wszystkie metody publiczne bieżącego <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1664">Returns all the public methods of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-1665">Tablica <see cref="T:System.Reflection.MethodInfo" /> obiekty reprezentujące wszystkie metody publiczne zdefiniowane dla bieżącego <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1665">An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all the public methods defined for the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="6cdc9-1666">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1666">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1667">Pusta tablica typu <see cref="T:System.Reflection.MethodInfo" />, jeśli nie metody publiczne są zdefiniowane dla bieżącego <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1667">An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no public methods are defined for the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-1668"><xref:System.Type.GetMethods%2A> Metoda nie zwraca metod w określonej kolejności, takie jak alfabetycznej lub kolejności deklaracji.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1668">The <xref:System.Type.GetMethods%2A> method does not return methods in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="6cdc9-1669">Twój kod nie może zależeć od kolejności, w której zwracane są metody, ponieważ kolejność się zmienia.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1669">Your code must not depend on the order in which methods are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="6cdc9-1670">Konstruktory nie są uwzględnione w tablicy zwrócony przez wywołanie tej metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1670">Constructors are not included in the array of methods returned by this call.</span></span> <span data-ttu-id="6cdc9-1671">Wywołania oddzielnych `GetConstructors()` można pobrać metody konstruktora.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1671">Make a separate call to `GetConstructors()` to get the constructor methods.</span></span>  
  
 <span data-ttu-id="6cdc9-1672">W poniższej tabeli przedstawiono, jakie elementy członkowskie klasy podstawowej są zwracane przez `Get` metody uwzględnianiem typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1672">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="6cdc9-1673">Typ elementu członkowskiego</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1673">Member Type</span></span>|<span data-ttu-id="6cdc9-1674">Static</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1674">Static</span></span>|<span data-ttu-id="6cdc9-1675">Niestatyczna</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1675">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="6cdc9-1676">Konstruktor</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1676">Constructor</span></span>|<span data-ttu-id="6cdc9-1677">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1677">No</span></span>|<span data-ttu-id="6cdc9-1678">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1678">No</span></span>|  
|<span data-ttu-id="6cdc9-1679">Pole</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1679">Field</span></span>|<span data-ttu-id="6cdc9-1680">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1680">No</span></span>|<span data-ttu-id="6cdc9-1681">Tak.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1681">Yes.</span></span> <span data-ttu-id="6cdc9-1682">Pole jest zawsze ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1682">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6cdc9-1683">Zdarzenie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1683">Event</span></span>|<span data-ttu-id="6cdc9-1684">Nie dotyczy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1684">Not applicable</span></span>|<span data-ttu-id="6cdc9-1685">Zasadą systemu typu jest to, że dziedziczenie jest takie samo, jak w przypadku metod, które implementują właściwość.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1685">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6cdc9-1686">Odbicie traktuje właściwości jako ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1686">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-1687">Patrz Uwaga 2 poniżej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1687">See note 2 below.</span></span>|  
|<span data-ttu-id="6cdc9-1688">Metoda</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1688">Method</span></span>|<span data-ttu-id="6cdc9-1689">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1689">No</span></span>|<span data-ttu-id="6cdc9-1690">Tak.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1690">Yes.</span></span> <span data-ttu-id="6cdc9-1691">Metodą (zarówno wirtualną, jak i niewirtualną) może być ukrycie przez nazwę lub przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1691">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6cdc9-1692">Typu zagnieżdżony</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1692">Nested Type</span></span>|<span data-ttu-id="6cdc9-1693">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1693">No</span></span>|<span data-ttu-id="6cdc9-1694">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1694">No</span></span>|  
|<span data-ttu-id="6cdc9-1695">Właściwość</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1695">Property</span></span>|<span data-ttu-id="6cdc9-1696">Nie dotyczy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1696">Not applicable</span></span>|<span data-ttu-id="6cdc9-1697">Zasadą systemu typu jest to, że dziedziczenie jest takie samo, jak w przypadku metod, które implementują właściwość.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1697">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6cdc9-1698">Odbicie traktuje właściwości jako ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1698">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-1699">Patrz Uwaga 2 poniżej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1699">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="6cdc9-1700">Ukrycie przez nazwę i podpis dotyczy wszystkich części podpisu, w tym modyfikatorów niestandardowych, zwraca typy, typy parametrów, wartowników i niezarządzane konwencje wywoływania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1700">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="6cdc9-1701">To jest porównanie binarne.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1701">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="6cdc9-1702">W celu odbicia właściwości i zdarzenia są ukrywane przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1702">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-1703">Jeśli istnieje właściwość z akcesorem pobierania i ustawiania w klasie bazowej, ale odziedziczona klasa ma tylko akcesor pobierania, właściwość klasy odziedziczonej ukrywa właściwości klasy bazowej, a nie można uzyskać dostępu do metody ustawiającej w klasie bazowej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1703">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="6cdc9-1704">Atrybuty niestandardowe nie są częścią wspólnego typu systemowego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1704">Custom attributes are not part of the common type system.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-1705">Nie można pominąć parametrów przy wyszukiwaniu konstruktorów i metod.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1705">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="6cdc9-1706">Parametry można pominąć jedynie podczas wywoływania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1706">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="6cdc9-1707">Jeśli bieżący element T:System.Type reprezentuje zbudowany typ ogólny, Metoda ta zwraca <xref:System.Reflection.MethodInfo> obiektów z parametrami typu zastąpionymi przez odpowiednie argumenty typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1707">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6cdc9-1708">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, Metoda ta wyszukuje metody ograniczenia klasy lub metody <xref:System.Object> przypadku bez ograniczenia klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1708">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetMethods(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethods(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetMethods (bindingAttr As BindingFlags) As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetMethods(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMethods : System.Reflection.BindingFlags -&gt; System.Reflection.MethodInfo[]" Usage="type.GetMethods bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethods(System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="6cdc9-1709">Maska bitów składająca się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1709">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="6cdc9-1710">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1710">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1711">Zero, aby zwrócić <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1711">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-1712">W przypadku przesłonięcia w klasie pochodnej, wyszukuje metody zdefiniowane dla bieżącego <see cref="T:System.Type" />, za pomocą ograniczeń w określonym powiązaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1712">When overridden in a derived class, searches for the methods defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-1713">Tablica <see cref="T:System.Reflection.MethodInfo" /> obiekty reprezentujące wszystkie metody zdefiniowane dla bieżącego <see cref="T:System.Type" /> zgodnych ograniczeń w określonym powiązaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1713">An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all methods defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="6cdc9-1714">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1714">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1715">Pusta tablica typu <see cref="T:System.Reflection.MethodInfo" />, jeśli nie metody są zdefiniowane dla bieżącego <see cref="T:System.Type" />, lub jeśli żadna z metody zdefiniowane ograniczenia wiązania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1715">An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no methods are defined for the current <see cref="T:System.Type" />, or if none of the defined methods match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-1716"><xref:System.Type.GetMethods%2A> Metoda nie zwraca metod w określonej kolejności, takie jak alfabetycznej lub kolejności deklaracji.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1716">The <xref:System.Type.GetMethods%2A> method does not return methods in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="6cdc9-1717">Twój kod nie może zależeć od kolejności, w której zwracane są metody, ponieważ kolejność się zmienia.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1717">Your code must not depend on the order in which methods are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="6cdc9-1718">Następujące <xref:System.Reflection.BindingFlags> flagi filtru może służyć do definiowania metod do uwzględnienia w wyszukiwaniu:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1718">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="6cdc9-1719">Należy określić `BindingFlags.Instance` lub `BindingFlags.Static` w celu uzyskania zwrotu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1719">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="6cdc9-1720">Określ `BindingFlags.Public` obejmujący metod publicznych w wyszukiwaniu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1720">Specify `BindingFlags.Public` to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="6cdc9-1721">Określ `BindingFlags.NonPublic` obejmujący metod niepublicznych (czyli prywatne, wewnętrzne i chronione metody) do wyszukiwania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1721">Specify `BindingFlags.NonPublic` to include non-public methods (that is, private, internal, and protected methods) in the search.</span></span> <span data-ttu-id="6cdc9-1722">Tylko chronionych i wewnętrznych metod w klasach bazowych są zwracane; metody prywatne na klasach bazowych nie są zwracane.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1722">Only protected and internal methods on base classes are returned; private methods on base classes are not returned.</span></span>  
  
-   <span data-ttu-id="6cdc9-1723">Określ `BindingFlags.FlattenHierarchy` obejmujący `public` i `protected` statyczne elementy członkowskie w hierarchii; `private` statyczne elementy członkowskie w klasie dziedziczonej nie są uwzględniane.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1723">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="6cdc9-1724">Następujące <xref:System.Reflection.BindingFlags> flagi modyfikatora może służyć do zmiany sposobu działania wyszukiwania:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1724">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="6cdc9-1725">`BindingFlags.DeclaredOnly` Aby wyszukać tylko metod zadeklarowanych w <xref:System.Type>, nie metod, które zostały po prostu odziedziczone.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1725">`BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="6cdc9-1726">Aby uzyskać więcej informacji, zobacz <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1726">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-1727">Nie można pominąć parametrów przy wyszukiwaniu konstruktorów i metod.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1727">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="6cdc9-1728">Parametry można pominąć jedynie podczas wywoływania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1728">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="6cdc9-1729">Jeśli bieżący element T:System.Type reprezentuje zbudowany typ ogólny, Metoda ta zwraca <xref:System.Reflection.MethodInfo> obiektów z parametrami typu zastąpionymi przez odpowiednie argumenty typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1729">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6cdc9-1730">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, Metoda ta wyszukuje metody ograniczenia klasy lub metody <xref:System.Object> przypadku bez ograniczenia klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1730">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-1731">Poniższy przykład tworzy klasę za pomocą dwóch metod publicznych i jedną metodę chronionych, tworzy `Type` obiekt odpowiadający `MyTypeClass`wszystkich metod publicznych i niepublicznych pobiera i wyświetla ich nazwy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1731">The following example creates a class with two public methods and one protected method, creates a `Type` object corresponding to `MyTypeClass`, gets all public and non-public methods, and displays their names.</span></span>  
  
 [!code-cpp[Type_GetMethods2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethods2/CPP/type_getmethods2.cpp#1)]
 [!code-csharp[Type_GetMethods2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethods2/CS/type_getmethods2.cs#1)]
 [!code-vb[Type_GetMethods2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethods2/VB/type_getmethods2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNestedType">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-1732">Pobiera określonego typu zagnieżdżone w obrębie bieżącego <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1732">Gets a specific type nested within the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNestedType">
      <MemberSignature Language="C#" Value="public Type GetNestedType (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetNestedType(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetNestedType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNestedType (name As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetNestedType(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetNestedType : string -&gt; Type&#xA;override this.GetNestedType : string -&gt; Type" Usage="type.GetNestedType name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetNestedType(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="6cdc9-1733">Ciąg zawierający nazwę typu zagnieżdżonego, aby uzyskać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1733">The string containing the name of the nested type to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-1734">Wyszukuje publicznego typu zagnieżdżonego o określonej nazwie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1734">Searches for the public nested type with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-1735">Obiekt reprezentujący publicznego typu zagnieżdżonego o określonej nazwie, jeśli znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1735">An object representing the public nested type with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-1736">Wyszukaj `name` jest uwzględniana wielkość liter.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1736">The search for `name` is case-sensitive.</span></span>  
  
 <span data-ttu-id="6cdc9-1737">Użyj prostych nazwy klasy zagnieżdżonej dla `name`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1737">Use the simple name of the nested class for `name`.</span></span> <span data-ttu-id="6cdc9-1738">Nie kwalifikuje się on z nazwą klasy zewnętrznej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1738">Do not qualify it with the name of the outer class.</span></span> <span data-ttu-id="6cdc9-1739">Ogólne klasy zagnieżdżonej, użyj zniekształcone nazwy — oznacza to, Dołącz akcent i liczby argumentów rodzajowych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1739">For a generic nested class, use the mangled name — that is, append a grave accent and the number of generic arguments.</span></span> <span data-ttu-id="6cdc9-1740">Na przykład użyć ciągu "wewnętrzny\`1" Aby uzyskać ogólny klasy zagnieżdżonej `Inner<T>` (`Inner(Of T)` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1740">For example, use the string "Inner\`1" to get the generic nested class `Inner<T>` (`Inner(Of T)` in Visual Basic).</span></span> <span data-ttu-id="6cdc9-1741">Nie dołączaj parametrów typu składnia specyficzny dla języka.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1741">Do not include language-specific syntax for type parameters.</span></span>  
  
 <span data-ttu-id="6cdc9-1742">W poniższej tabeli przedstawiono, jakie elementy członkowskie klasy podstawowej są zwracane przez `Get` metody uwzględnianiem typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1742">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="6cdc9-1743">Typ elementu członkowskiego</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1743">Member Type</span></span>|<span data-ttu-id="6cdc9-1744">Static</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1744">Static</span></span>|<span data-ttu-id="6cdc9-1745">Niestatyczna</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1745">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="6cdc9-1746">Konstruktor</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1746">Constructor</span></span>|<span data-ttu-id="6cdc9-1747">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1747">No</span></span>|<span data-ttu-id="6cdc9-1748">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1748">No</span></span>|  
|<span data-ttu-id="6cdc9-1749">Pole</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1749">Field</span></span>|<span data-ttu-id="6cdc9-1750">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1750">No</span></span>|<span data-ttu-id="6cdc9-1751">Tak.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1751">Yes.</span></span> <span data-ttu-id="6cdc9-1752">Pole jest zawsze ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1752">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6cdc9-1753">Zdarzenie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1753">Event</span></span>|<span data-ttu-id="6cdc9-1754">Nie dotyczy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1754">Not applicable</span></span>|<span data-ttu-id="6cdc9-1755">Zasadą systemu typu jest to, że dziedziczenie jest takie samo, jak w przypadku metod, które implementują właściwość.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1755">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6cdc9-1756">Odbicie traktuje właściwości jako ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1756">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-1757">Patrz Uwaga 2 poniżej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1757">See note 2 below.</span></span>|  
|<span data-ttu-id="6cdc9-1758">Metoda</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1758">Method</span></span>|<span data-ttu-id="6cdc9-1759">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1759">No</span></span>|<span data-ttu-id="6cdc9-1760">Tak.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1760">Yes.</span></span> <span data-ttu-id="6cdc9-1761">Metodą (zarówno wirtualną, jak i niewirtualną) może być ukrycie przez nazwę lub przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1761">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6cdc9-1762">Typu zagnieżdżony</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1762">Nested Type</span></span>|<span data-ttu-id="6cdc9-1763">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1763">No</span></span>|<span data-ttu-id="6cdc9-1764">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1764">No</span></span>|  
|<span data-ttu-id="6cdc9-1765">Właściwość</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1765">Property</span></span>|<span data-ttu-id="6cdc9-1766">Nie dotyczy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1766">Not applicable</span></span>|<span data-ttu-id="6cdc9-1767">Zasadą systemu typu jest to, że dziedziczenie jest takie samo, jak w przypadku metod, które implementują właściwość.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1767">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6cdc9-1768">Odbicie traktuje właściwości jako ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1768">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-1769">Patrz Uwaga 2 poniżej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1769">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="6cdc9-1770">Ukrycie przez nazwę i podpis dotyczy wszystkich części podpisu, w tym modyfikatorów niestandardowych, zwraca typy, typy parametrów, wartowników i niezarządzane konwencje wywoływania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1770">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="6cdc9-1771">To jest porównanie binarne.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1771">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="6cdc9-1772">W celu odbicia właściwości i zdarzenia są ukrywane przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1772">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-1773">Jeśli istnieje właściwość z akcesorem pobierania i ustawiania w klasie bazowej, ale odziedziczona klasa ma tylko akcesor pobierania, właściwość klasy odziedziczonej ukrywa właściwości klasy bazowej, a nie można uzyskać dostępu do metody ustawiającej w klasie bazowej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1773">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="6cdc9-1774">Atrybuty niestandardowe nie są częścią wspólnego typu systemowego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1774">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="6cdc9-1775">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, Metoda ta wyszukuje zagnieżdżone typy ograniczenia klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1775">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.</span></span>  
  
 <span data-ttu-id="6cdc9-1776">Jeśli zagnieżdżony jest typ ogólny , metoda ta zwraca jego definicję typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1776">If a nested type is generic, this method returns its generic type definition.</span></span> <span data-ttu-id="6cdc9-1777">Ta zasada obowiązuje, nawet jeśli otaczający typ ogólny jest skonstruowany jako zamknięty.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1777">This is true even if the enclosing generic type is a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-1778">Jeśli bieżący <xref:System.Type> reprezentuje typ ogólny zdefiniowany w języku C#, Visual Basic lub C++, jego zagnieżdżone typy są rodzajowe, nawet jeśli mają one nie parametrów ogólnych swoich własnych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1778">If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own.</span></span> <span data-ttu-id="6cdc9-1779">To nie jest konieczne zagnieżdżonych typów zdefiniowanych w zestawach dynamicznych lub skompilowanych z [Ilasm.exe (asembler IL)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1779">This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
 <span data-ttu-id="6cdc9-1780">Aby uzyskać informacje o zagnieżdżonych typach rodzajowych oraz o konstruowaniu zagnieżdżonych typów rodzajowych z definicjami typu ogólnego, zobacz <xref:System.Type.MakeGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1780">For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-1781">
            <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1781">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetNestedTypes" />
      </Docs>
    </Member>
    <Member MemberName="GetNestedType">
      <MemberSignature Language="C#" Value="public abstract Type GetNestedType (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetNestedType(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetNestedType (name As String, bindingAttr As BindingFlags) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Type ^ GetNestedType(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetNestedType : string * System.Reflection.BindingFlags -&gt; Type" Usage="type.GetNestedType (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetNestedType(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="6cdc9-1782">Ciąg zawierający nazwę typu zagnieżdżonego, aby uzyskać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1782">The string containing the name of the nested type to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="6cdc9-1783">Maska bitów składająca się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1783">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="6cdc9-1784">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1784">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1785">Zero, aby zwrócić <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1785">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-1786">W przypadku przesłonięcia w klasie pochodnej, wyszukuje określonego typu zagnieżdżonego, za pomocą ograniczeń w określonym powiązaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1786">When overridden in a derived class, searches for the specified nested type, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-1787">Obiekt reprezentujący typ zagnieżdżony, która spełnia określone wymagania, jeśli znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1787">An object representing the nested type that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-1788">Użyj prostych nazwy klasy zagnieżdżonej dla `name`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1788">Use the simple name of the nested class for `name`.</span></span> <span data-ttu-id="6cdc9-1789">Nie kwalifikuje się on z nazwą klasy zewnętrznej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1789">Do not qualify it with the name of the outer class.</span></span> <span data-ttu-id="6cdc9-1790">Ogólne klasy zagnieżdżonej, użyj zniekształcone nazwy — oznacza to, Dołącz akcent i liczby parametrów ogólnych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1790">For a generic nested class, use the mangled name — that is, append a grave accent and the number of generic parameters.</span></span> <span data-ttu-id="6cdc9-1791">Na przykład użyć ciągu "wewnętrzny\`1" Aby uzyskać ogólny klasy zagnieżdżonej `Inner<T>` (`Inner(Of T)` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1791">For example, use the string "Inner\`1" to get the generic nested class `Inner<T>` (`Inner(Of T)` in Visual Basic).</span></span> <span data-ttu-id="6cdc9-1792">Nie dołączaj parametrów typu składnia specyficzny dla języka.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1792">Do not include language-specific syntax for type parameters.</span></span>  
  
 <span data-ttu-id="6cdc9-1793">Następujące <xref:System.Reflection.BindingFlags> filtr flagi może służyć do definiowania, które zagnieżdżonych typów do uwzględnienia w wyszukiwaniu:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1793">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which nested types to include in the search:</span></span>  
  
-   <span data-ttu-id="6cdc9-1794">Należy określić <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> lub <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> do uzyskania zwrotu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1794">You must specify either <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> or <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to get a return.</span></span>  
  
-   <span data-ttu-id="6cdc9-1795">Określ <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> obejmujący publiczne typy zagnieżdżone w wyszukiwaniu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1795">Specify <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> to include public nested types in the search.</span></span>  
  
-   <span data-ttu-id="6cdc9-1796">Określ <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> obejmujący zagnieżdżonych typów niepublicznych (czyli prywatne, wewnętrzne i chronione typy zagnieżdżone) do wyszukiwania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1796">Specify <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to include non-public nested types (that is, private, internal, and protected nested types) in the search.</span></span>  
  
 <span data-ttu-id="6cdc9-1797">Ta metoda zwraca zagnieżdżone typy bieżącego typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1797">This method returns only the nested types of the current type.</span></span> <span data-ttu-id="6cdc9-1798">Wyszukiwanie klas bazowych bieżącego typu nie jest.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1798">It does not search the base classes of the current type.</span></span> <span data-ttu-id="6cdc9-1799">Aby znaleźć typy, które są zagnieżdżone w klasach bazowych, musi zaprezentuje hierarchii dziedziczenia wywoływania <xref:System.Type.GetNestedType%2A> na każdym poziomie.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1799">To find types that are nested in base classes, you must walk the inheritance hierarchy, calling <xref:System.Type.GetNestedType%2A> at each level.</span></span>  
  
 <span data-ttu-id="6cdc9-1800"><xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> i <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> są ignorowane.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1800"><xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> and <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> are ignored.</span></span>  
  
 <span data-ttu-id="6cdc9-1801">Wywołanie tej metody tylko z <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> flagi lub tylko <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> flagi zwróci określoną zagnieżdżonych typów i nie wymaga inne flagi.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1801">Calling this method with only the <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> flag or only the <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> flag will return the specified nested types and does not require any other flags.</span></span>  
  
 <span data-ttu-id="6cdc9-1802">Aby uzyskać więcej informacji, zobacz <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1802">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="6cdc9-1803">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, Metoda ta wyszukuje zagnieżdżone typy ograniczenia klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1803">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.</span></span>  
  
 <span data-ttu-id="6cdc9-1804">Jeśli zagnieżdżony jest typ ogólny , metoda ta zwraca jego definicję typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1804">If a nested type is generic, this method returns its generic type definition.</span></span> <span data-ttu-id="6cdc9-1805">Ta zasada obowiązuje, nawet jeśli otaczający typ ogólny jest skonstruowany jako zamknięty.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1805">This is true even if the enclosing generic type is a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-1806">Jeśli bieżący <xref:System.Type> reprezentuje typ ogólny zdefiniowany w języku C#, Visual Basic lub C++, jego zagnieżdżone typy są rodzajowe, nawet jeśli mają one nie parametrów ogólnych swoich własnych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1806">If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own.</span></span> <span data-ttu-id="6cdc9-1807">To nie jest konieczne zagnieżdżonych typów zdefiniowanych w zestawach dynamicznych lub skompilowanych z [Ilasm.exe (asembler IL)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1807">This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
 <span data-ttu-id="6cdc9-1808">Aby uzyskać informacje o zagnieżdżonych typach rodzajowych oraz o konstruowaniu zagnieżdżonych typów rodzajowych z definicjami typu ogólnego, zobacz <xref:System.Type.MakeGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1808">For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-1809">
            <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1809">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetNestedTypes" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNestedTypes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-1810">Pobiera typy zagnieżdżone w obrębie bieżącego <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1810">Gets the types nested within the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNestedTypes">
      <MemberSignature Language="C#" Value="public Type[] GetNestedTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetNestedTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetNestedTypes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNestedTypes () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetNestedTypes();" />
      <MemberSignature Language="F#" Value="abstract member GetNestedTypes : unit -&gt; Type[]&#xA;override this.GetNestedTypes : unit -&gt; Type[]" Usage="type.GetNestedTypes " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetNestedTypes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-1811">Zwraca typy publiczne zagnieżdżone w bieżącym <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1811">Returns the public types nested in the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-1812">Tablica <see cref="T:System.Type" /> obiektów reprezentujących typy publiczne zagnieżdżone w bieżącym <see cref="T:System.Type" /> (wyszukiwanie nie jest cykliczna), lub pusta tablica typu <see cref="T:System.Type" /> Jeśli nie typy publiczne są zagnieżdżone w bieżącym <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1812">An array of <see cref="T:System.Type" /> objects representing the public types nested in the current <see cref="T:System.Type" /> (the search is not recursive), or an empty array of type <see cref="T:System.Type" /> if no public types are nested in the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-1813"><xref:System.Type.GetNestedTypes%2A> Metoda nie zwraca typów w określonej kolejności, takie jak alfabetycznej lub kolejności deklaracji.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1813">The <xref:System.Type.GetNestedTypes%2A> method does not return types in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="6cdc9-1814">Twój kod nie może zależeć od kolejności, w której są zwracane typy, ponieważ kolejność się zmienia.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1814">Your code must not depend on the order in which types are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="6cdc9-1815">Zwracane są tylko typy publiczne bezpośrednio zagnieżdżona w bieżącym typem; w wyszukiwaniu nie jest cykliczna.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1815">Only the public types immediately nested in the current type are returned; the search is not recursive.</span></span>  
  
 <span data-ttu-id="6cdc9-1816">W poniższej tabeli przedstawiono, jakie elementy członkowskie klasy podstawowej są zwracane przez `Get` metody uwzględnianiem typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1816">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="6cdc9-1817">Typ elementu członkowskiego</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1817">Member Type</span></span>|<span data-ttu-id="6cdc9-1818">Static</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1818">Static</span></span>|<span data-ttu-id="6cdc9-1819">Niestatyczna</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1819">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="6cdc9-1820">Konstruktor</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1820">Constructor</span></span>|<span data-ttu-id="6cdc9-1821">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1821">No</span></span>|<span data-ttu-id="6cdc9-1822">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1822">No</span></span>|  
|<span data-ttu-id="6cdc9-1823">Pole</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1823">Field</span></span>|<span data-ttu-id="6cdc9-1824">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1824">No</span></span>|<span data-ttu-id="6cdc9-1825">Tak.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1825">Yes.</span></span> <span data-ttu-id="6cdc9-1826">Pole jest zawsze ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1826">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6cdc9-1827">Zdarzenie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1827">Event</span></span>|<span data-ttu-id="6cdc9-1828">Nie dotyczy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1828">Not applicable</span></span>|<span data-ttu-id="6cdc9-1829">Zasadą systemu typu jest to, że dziedziczenie jest takie samo, jak w przypadku metod, które implementują właściwość.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1829">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6cdc9-1830">Odbicie traktuje właściwości jako ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1830">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-1831">Patrz Uwaga 2 poniżej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1831">See note 2 below.</span></span>|  
|<span data-ttu-id="6cdc9-1832">Metoda</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1832">Method</span></span>|<span data-ttu-id="6cdc9-1833">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1833">No</span></span>|<span data-ttu-id="6cdc9-1834">Tak.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1834">Yes.</span></span> <span data-ttu-id="6cdc9-1835">Metodą (zarówno wirtualną, jak i niewirtualną) może być ukrycie przez nazwę lub przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1835">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6cdc9-1836">Typu zagnieżdżony</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1836">Nested Type</span></span>|<span data-ttu-id="6cdc9-1837">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1837">No</span></span>|<span data-ttu-id="6cdc9-1838">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1838">No</span></span>|  
|<span data-ttu-id="6cdc9-1839">Właściwość</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1839">Property</span></span>|<span data-ttu-id="6cdc9-1840">Nie dotyczy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1840">Not applicable</span></span>|<span data-ttu-id="6cdc9-1841">Zasadą systemu typu jest to, że dziedziczenie jest takie samo, jak w przypadku metod, które implementują właściwość.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1841">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6cdc9-1842">Odbicie traktuje właściwości jako ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1842">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-1843">Patrz Uwaga 2 poniżej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1843">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="6cdc9-1844">Ukrycie przez nazwę i podpis dotyczy wszystkich części podpisu, w tym modyfikatorów niestandardowych, zwraca typy, typy parametrów, wartowników i niezarządzane konwencje wywoływania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1844">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="6cdc9-1845">To jest porównanie binarne.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1845">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="6cdc9-1846">W celu odbicia właściwości i zdarzenia są ukrywane przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1846">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-1847">Jeśli istnieje właściwość z akcesorem pobierania i ustawiania w klasie bazowej, ale odziedziczona klasa ma tylko akcesor pobierania, właściwość klasy odziedziczonej ukrywa właściwości klasy bazowej, a nie można uzyskać dostępu do metody ustawiającej w klasie bazowej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1847">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="6cdc9-1848">Atrybuty niestandardowe nie są częścią wspólnego typu systemowego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1848">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="6cdc9-1849">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, Metoda ta wyszukuje zagnieżdżone typy ograniczenia klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1849">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.</span></span>  
  
 <span data-ttu-id="6cdc9-1850">Jeśli zagnieżdżony jest typ ogólny , metoda ta zwraca jego definicję typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1850">If a nested type is generic, this method returns its generic type definition.</span></span> <span data-ttu-id="6cdc9-1851">Ta zasada obowiązuje, nawet jeśli otaczający typ ogólny jest skonstruowany jako zamknięty.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1851">This is true even if the enclosing generic type is a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-1852">Jeśli bieżący <xref:System.Type> reprezentuje typ ogólny zdefiniowany w języku C#, Visual Basic lub C++, jego zagnieżdżone typy są rodzajowe, nawet jeśli mają one nie parametrów ogólnych swoich własnych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1852">If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own.</span></span> <span data-ttu-id="6cdc9-1853">To nie jest konieczne zagnieżdżonych typów zdefiniowanych w zestawach dynamicznych lub skompilowanych z [Ilasm.exe (asembler IL)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1853">This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
 <span data-ttu-id="6cdc9-1854">Aby uzyskać informacje o zagnieżdżonych typach rodzajowych oraz o konstruowaniu zagnieżdżonych typów rodzajowych z definicjami typu ogólnego, zobacz <xref:System.Type.MakeGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1854">For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-1855">W poniższym przykładzie zdefiniowano klasę zagnieżdżoną i `struct` w `MyClass`, a następnie uzyskuje obiektów zagnieżdżonych typów, przy użyciu typu `MyClass`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1855">The following example defines a nested class and a `struct` in `MyClass`, and then obtains objects of the nested types using the type of `MyClass`.</span></span>  
  
 [!code-cpp[Type_GetNestedTypes#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetNestedTypes/CPP/type_getnestedtypes.cpp#1)]
 [!code-csharp[Type_GetNestedTypes#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetNestedTypes/CS/type_getnestedtypes.cs#1)]
 [!code-vb[Type_GetNestedTypes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetNestedTypes/VB/type_getnestedtypes.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.GetNestedType(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetNestedTypes">
      <MemberSignature Language="C#" Value="public abstract Type[] GetNestedTypes (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetNestedTypes(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetNestedTypes (bindingAttr As BindingFlags) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;Type ^&gt; ^ GetNestedTypes(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetNestedTypes : System.Reflection.BindingFlags -&gt; Type[]" Usage="type.GetNestedTypes bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetNestedTypes(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="6cdc9-1856">Maska bitów składająca się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1856">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="6cdc9-1857">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1857">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1858">Zero, aby zwrócić <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1858">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-1859">W przypadku przesłonięcia w klasie pochodnej, wyszukuje typy zagnieżdżone w bieżącym <see cref="T:System.Type" />, za pomocą ograniczeń w określonym powiązaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1859">When overridden in a derived class, searches for the types nested in the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-1860">Tablica <see cref="T:System.Type" /> obiekty reprezentujące wszystkie typy zagnieżdżone w bieżącym <see cref="T:System.Type" /> zgodnych ograniczenia określone powiązanie (wyszukiwanie nie jest cykliczna), lub pusta tablica typu <see cref="T:System.Type" />, jeśli nie typy zagnieżdżone nie zostaną znalezione zgodnych ograniczenia wiązania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1860">An array of <see cref="T:System.Type" /> objects representing all the types nested in the current <see cref="T:System.Type" /> that match the specified binding constraints (the search is not recursive), or an empty array of type <see cref="T:System.Type" />, if no nested types are found that match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-1861">Wyszukaj typy zagnieżdżone nie jest cykliczna.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1861">The search for nested types is not recursive.</span></span>  
  
 <span data-ttu-id="6cdc9-1862"><xref:System.Type.GetNestedTypes%2A> Metoda nie zwraca typów w określonej kolejności, takie jak alfabetycznej lub kolejności deklaracji.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1862">The <xref:System.Type.GetNestedTypes%2A> method does not return types in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="6cdc9-1863">Twój kod nie może zależeć od kolejności, w której są zwracane typy, ponieważ kolejność się zmienia.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1863">Your code must not depend on the order in which types are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="6cdc9-1864">Następujące <xref:System.Reflection.BindingFlags> filtr flagi może służyć do definiowania, które zagnieżdżonych typów do uwzględnienia w wyszukiwaniu:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1864">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which nested types to include in the search:</span></span>  
  
-   <span data-ttu-id="6cdc9-1865">Należy określić <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> lub <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> do uzyskania zwrotu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1865">You must specify either <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> or <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to get a return.</span></span>  
  
-   <span data-ttu-id="6cdc9-1866">Określ <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> obejmujący publiczne typy zagnieżdżone w wyszukiwaniu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1866">Specify <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> to include public nested types in the search.</span></span>  
  
-   <span data-ttu-id="6cdc9-1867">Określ <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> obejmujący zagnieżdżonych typów niepublicznych (czyli prywatne, wewnętrzne i chronione typy zagnieżdżone) do wyszukiwania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1867">Specify <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to include non-public nested types (that is, private, internal, and protected nested types) in the search.</span></span>  
  
 <span data-ttu-id="6cdc9-1868">Ta metoda zwraca zagnieżdżone typy bieżącego typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1868">This method returns only the nested types of the current type.</span></span> <span data-ttu-id="6cdc9-1869">Wyszukiwanie klas bazowych bieżącego typu nie jest.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1869">It does not search the base classes of the current type.</span></span> <span data-ttu-id="6cdc9-1870">Aby znaleźć typy, które są zagnieżdżone w klasach bazowych, musi zaprezentuje hierarchii dziedziczenia wywoływania <xref:System.Type.GetNestedTypes%2A> na każdym poziomie.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1870">To find types that are nested in base classes, you must walk the inheritance hierarchy, calling <xref:System.Type.GetNestedTypes%2A> at each level.</span></span>  
  
 <span data-ttu-id="6cdc9-1871"><xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> i <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> są ignorowane.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1871"><xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> and <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> are ignored.</span></span>  
  
 <span data-ttu-id="6cdc9-1872">Wywołanie tej metody tylko z <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> flagi lub tylko <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> flagi zwróci określoną zagnieżdżonych typów i nie wymaga inne flagi.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1872">Calling this method with only the <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> flag or only the <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> flag will return the specified nested types and does not require any other flags.</span></span>  
  
 <span data-ttu-id="6cdc9-1873">Aby uzyskać więcej informacji, zobacz <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1873">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="6cdc9-1874">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, Metoda ta wyszukuje zagnieżdżone typy ograniczenia klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1874">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.</span></span>  
  
 <span data-ttu-id="6cdc9-1875">Jeśli zagnieżdżony jest typ ogólny , metoda ta zwraca jego definicję typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1875">If a nested type is generic, this method returns its generic type definition.</span></span> <span data-ttu-id="6cdc9-1876">Ta zasada obowiązuje, nawet jeśli otaczający typ ogólny jest skonstruowany jako zamknięty.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1876">This is true even if the enclosing generic type is a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-1877">Jeśli bieżący <xref:System.Type> reprezentuje typ ogólny zdefiniowany w języku C#, Visual Basic lub C++, jego zagnieżdżone typy są rodzajowe, nawet jeśli mają one nie parametrów ogólnych swoich własnych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1877">If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own.</span></span> <span data-ttu-id="6cdc9-1878">To nie jest konieczne zagnieżdżonych typów zdefiniowanych w zestawach dynamicznych lub skompilowanych z [Ilasm.exe (asembler IL)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1878">This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
 <span data-ttu-id="6cdc9-1879">Aby uzyskać informacje o zagnieżdżonych typach rodzajowych oraz o konstruowaniu zagnieżdżonych typów rodzajowych z definicjami typu ogólnego, zobacz <xref:System.Type.MakeGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1879">For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-1880">Poniższy przykład tworzy dwie klasy publiczne zagnieżdżonych i dwie klasy chronionych zagnieżdżonych i wyświetla informacje dotyczące klas, które odpowiadają ograniczeń w określonym powiązaniu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1880">The following example creates two nested public classes and two nested protected classes, and displays information for classes that match the specified binding constraints.</span></span>  
  
 [!code-cpp[Type_GetNestedClassesAbs#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetNestedClassesAbs/CPP/type_getnestedclassesabs.cpp#1)]
 [!code-csharp[Type_GetNestedClassesAbs#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetNestedClassesAbs/CS/type_getnestedclassesabs.cs#1)]
 [!code-vb[Type_GetNestedClassesAbs#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetNestedClassesAbs/VB/type_getnestedclassesabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetNestedType(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetProperties">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-1881">Pobiera właściwości bieżącego <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1881">Gets the properties of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo[] GetProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo[] GetProperties() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperties" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperties () As PropertyInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ GetProperties();" />
      <MemberSignature Language="F#" Value="abstract member GetProperties : unit -&gt; System.Reflection.PropertyInfo[]&#xA;override this.GetProperties : unit -&gt; System.Reflection.PropertyInfo[]" Usage="type.GetProperties " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperties</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-1882">Zwraca wszystkie publiczne właściwości bieżącego <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1882">Returns all the public properties of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-1883">Tablica <see cref="T:System.Reflection.PropertyInfo" /> obiekty reprezentujące wszystkie publiczne właściwości bieżącego <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1883">An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all public properties of the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="6cdc9-1884">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1884">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1885">Pusta tablica typu <see cref="T:System.Reflection.PropertyInfo" />, jeśli bieżący <see cref="T:System.Type" /> nie ma właściwości publiczne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1885">An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have public properties.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-1886">To przeciążenie wywołanie jest równoważne z wywoływaniem <xref:System.Type.GetProperties%28System.Reflection.BindingFlags%29> przeciążenia z `bindingAttr` argument równa `BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public` w języku C# i `BindingFlags.Instance Or BindingFlags.Static Or BindingFlags.Public` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1886">Calling this overload is equivalent to calling the <xref:System.Type.GetProperties%28System.Reflection.BindingFlags%29> overload with a `bindingAttr` argument equal to `BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public` in C# and  `BindingFlags.Instance Or BindingFlags.Static Or BindingFlags.Public` in Visual Basic.</span></span> <span data-ttu-id="6cdc9-1887">Zwraca wszystkie publiczne wystąpienia i statycznej właściwości, z których oba te są definiowane przez typ reprezentowany przez bieżącą <xref:System.Type> obiektu, a także tych dziedziczone z jej typów podstawowych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1887">It returns all public instance and static properties, both those defined by the type represented by the current <xref:System.Type> object as well as those inherited from its base types.</span></span>  
  
 <span data-ttu-id="6cdc9-1888">Właściwość jest uważana za publiczne odbicie, jeżeli ma co najmniej jeden publiczny akcesor.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1888">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="6cdc9-1889">W przeciwnym razie właściwość jest traktowana jako prywatna i trzeba użyć <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (w języku Visual Basic należy połączyć wartości za pomocą `Or`) aby z niej skorzystać.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1889">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="6cdc9-1890"><xref:System.Type.GetProperties%2A> Metoda nie zwraca właściwości w określonej kolejności, takie jak alfabetycznej lub kolejności deklaracji.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1890">The <xref:System.Type.GetProperties%2A> method does not return properties in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="6cdc9-1891">Twój kod nie może zależeć od kolejności, w której zwracane są właściwości, ponieważ kolejność się zmienia.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1891">Your code must not depend on the order in which properties are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="6cdc9-1892">W poniższej tabeli przedstawiono, jakie elementy członkowskie klasy podstawowej są zwracane przez `Get` metody uwzględnianiem typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1892">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="6cdc9-1893">Typ elementu członkowskiego</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1893">Member Type</span></span>|<span data-ttu-id="6cdc9-1894">Static</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1894">Static</span></span>|<span data-ttu-id="6cdc9-1895">Niestatyczna</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1895">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="6cdc9-1896">Konstruktor</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1896">Constructor</span></span>|<span data-ttu-id="6cdc9-1897">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1897">No</span></span>|<span data-ttu-id="6cdc9-1898">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1898">No</span></span>|  
|<span data-ttu-id="6cdc9-1899">Pole</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1899">Field</span></span>|<span data-ttu-id="6cdc9-1900">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1900">No</span></span>|<span data-ttu-id="6cdc9-1901">Tak.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1901">Yes.</span></span> <span data-ttu-id="6cdc9-1902">Pole jest zawsze ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1902">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6cdc9-1903">Zdarzenie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1903">Event</span></span>|<span data-ttu-id="6cdc9-1904">Nie dotyczy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1904">Not applicable</span></span>|<span data-ttu-id="6cdc9-1905">Zasadą systemu typu jest to, że dziedziczenie jest takie samo, jak w przypadku metod, które implementują właściwość.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1905">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6cdc9-1906">Odbicie traktuje właściwości jako ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1906">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-1907">Patrz Uwaga 2 poniżej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1907">See note 2 below.</span></span>|  
|<span data-ttu-id="6cdc9-1908">Metoda</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1908">Method</span></span>|<span data-ttu-id="6cdc9-1909">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1909">No</span></span>|<span data-ttu-id="6cdc9-1910">Tak.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1910">Yes.</span></span> <span data-ttu-id="6cdc9-1911">Metodą (zarówno wirtualną, jak i niewirtualną) może być ukrycie przez nazwę lub przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1911">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6cdc9-1912">Typu zagnieżdżony</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1912">Nested Type</span></span>|<span data-ttu-id="6cdc9-1913">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1913">No</span></span>|<span data-ttu-id="6cdc9-1914">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1914">No</span></span>|  
|<span data-ttu-id="6cdc9-1915">Właściwość</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1915">Property</span></span>|<span data-ttu-id="6cdc9-1916">Nie dotyczy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1916">Not applicable</span></span>|<span data-ttu-id="6cdc9-1917">Zasadą systemu typu jest to, że dziedziczenie jest takie samo, jak w przypadku metod, które implementują właściwość.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1917">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6cdc9-1918">Odbicie traktuje właściwości jako ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1918">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-1919">Patrz Uwaga 2 poniżej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1919">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="6cdc9-1920">Ukrycie przez nazwę i podpis dotyczy wszystkich części podpisu, w tym modyfikatorów niestandardowych, zwraca typy, typy parametrów, wartowników i niezarządzane konwencje wywoływania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1920">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="6cdc9-1921">To jest porównanie binarne.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1921">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="6cdc9-1922">W celu odbicia właściwości i zdarzenia są ukrywane przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1922">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-1923">Jeśli istnieje właściwość z akcesorem pobierania i ustawiania w klasie bazowej, ale odziedziczona klasa ma tylko akcesor pobierania, właściwość klasy odziedziczonej ukrywa właściwości klasy bazowej, a nie można uzyskać dostępu do metody ustawiającej w klasie bazowej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1923">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="6cdc9-1924">Atrybuty niestandardowe nie są częścią wspólnego typu systemowego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1924">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="6cdc9-1925">Jeśli bieżący element T:System.Type reprezentuje zbudowany typ ogólny, Metoda ta zwraca <xref:System.Reflection.PropertyInfo> obiektów z parametrami typu zastąpionymi przez odpowiednie argumenty typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1925">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6cdc9-1926">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, Metoda ta przeszukuje właściwości ograniczenia klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1926">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-1927">W poniższym przykładzie pokazano użycie `GetProperties` metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1927">The following example demonstrates the use of the `GetProperties` method.</span></span>  
  
 [!code-cpp[Type_GetTypeCode#2](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeCode/CPP/type_gettypecode.cpp#2)]
 [!code-csharp[Type_GetTypeCode#2](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeCode/CS/type_gettypecode.cs#2)]
 [!code-vb[Type_GetTypeCode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeCode/VB/type_gettypecode.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo[] GetProperties(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetProperties (bindingAttr As BindingFlags) As PropertyInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ GetProperties(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetProperties : System.Reflection.BindingFlags -&gt; System.Reflection.PropertyInfo[]" Usage="type.GetProperties bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperties(System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetProperties(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="6cdc9-1928">Maska bitów składająca się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1928">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="6cdc9-1929">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1929">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1930">Zero, aby zwrócić <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1930">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-1931">W przypadku przesłonięcia w klasie pochodnej, wyszukuje właściwości bieżącego <see cref="T:System.Type" />, za pomocą ograniczeń w określonym powiązaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1931">When overridden in a derived class, searches for the properties of the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-1932">Tablica <see cref="T:System.Reflection.PropertyInfo" /> obiekty reprezentujące wszystkie właściwości bieżącego <see cref="T:System.Type" /> zgodnych ograniczeń w określonym powiązaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1932">An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all properties of the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="6cdc9-1933">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1933">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1934">Pusta tablica typu <see cref="T:System.Reflection.PropertyInfo" />, jeśli bieżący <see cref="T:System.Type" /> nie ma właściwości, lub jeśli żadna z właściwości ograniczenia wiązania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1934">An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have properties, or if none of the properties match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-1935">Właściwość jest uważana za publiczne odbicie, jeżeli ma co najmniej jeden publiczny akcesor.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1935">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="6cdc9-1936">W przeciwnym razie właściwość jest traktowana jako prywatna i trzeba użyć <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (w języku Visual Basic należy połączyć wartości za pomocą `Or`) aby z niej skorzystać.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1936">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="6cdc9-1937"><xref:System.Type.GetProperties%2A> Metoda nie zwraca właściwości w określonej kolejności, takie jak alfabetycznej lub kolejności deklaracji.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1937">The <xref:System.Type.GetProperties%2A> method does not return properties in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="6cdc9-1938">Twój kod nie może zależeć od kolejności, w której zwracane są właściwości, ponieważ kolejność się zmienia.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1938">Your code must not depend on the order in which properties are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="6cdc9-1939">Następujące <xref:System.Reflection.BindingFlags> filtr flagi może służyć do definiowania, które zagnieżdżonych typów do uwzględnienia w wyszukiwaniu:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1939">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which nested types to include in the search:</span></span>  
  
-   <span data-ttu-id="6cdc9-1940">Należy określić `BindingFlags.Instance` lub `BindingFlags.Static` w celu uzyskania zwrotu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1940">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="6cdc9-1941">Określ `BindingFlags.Public` obejmujący właściwości publiczne w wyszukiwaniu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1941">Specify `BindingFlags.Public` to include public properties in the search.</span></span>  
  
-   <span data-ttu-id="6cdc9-1942">Określ `BindingFlags.NonPublic` obejmujący w w wyszukiwaniu właściwości niepubliczne (czyli prywatne, wewnętrzne i chronione właściwości).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1942">Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search.</span></span> <span data-ttu-id="6cdc9-1943">Tylko chronionych i wewnętrznych właściwości klasy bazowe są zwracane; właściwości prywatnych na klasach bazowych nie są zwracane.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1943">Only protected and internal properties on base classes are returned; private properties on base classes are not returned.</span></span>  
  
-   <span data-ttu-id="6cdc9-1944">Określ `BindingFlags.FlattenHierarchy` obejmujący `public` i `protected` statyczne elementy członkowskie w hierarchii; `private` statyczne elementy członkowskie w klasie dziedziczonej nie są uwzględniane.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1944">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="6cdc9-1945">Następujące <xref:System.Reflection.BindingFlags> flagi modyfikatora może służyć do zmiany sposobu działania wyszukiwania:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1945">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="6cdc9-1946">`BindingFlags.DeclaredOnly` Aby wyszukać tylko właściwości zadeklarowanych w <xref:System.Type>, nie właściwości, które zostały po prostu odziedziczone.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1946">`BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.</span></span>  
  
 <span data-ttu-id="6cdc9-1947">Aby uzyskać więcej informacji, zobacz <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1947">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="6cdc9-1948">Właściwość jest uważana za publiczne odbicie, jeżeli ma co najmniej jeden publiczny akcesor.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1948">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="6cdc9-1949">W przeciwnym razie właściwość jest traktowana jako prywatna i trzeba użyć <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (w języku Visual Basic należy połączyć wartości za pomocą `Or`) aby z niej skorzystać.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1949">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="6cdc9-1950">Jeśli bieżący element T:System.Type reprezentuje zbudowany typ ogólny, Metoda ta zwraca <xref:System.Reflection.PropertyInfo> obiektów z parametrami typu zastąpionymi przez odpowiednie argumenty typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1950">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6cdc9-1951">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, Metoda ta przeszukuje właściwości ograniczenia klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1951">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-1952">W poniższym przykładzie zdefiniowano klasę o nazwie `PropertyClass` zawierającej sześć właściwości: dwa są publiczne, jeden jest prywatny, jeden jest chroniony, jest jeden wewnętrzny (`Friend` w języku Visual Basic), i jest chronionych wewnętrznych (`Protected Friend` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1952">The following example defines a class named `PropertyClass` that includes six properties: two are public, one is private, one is protected, one is internal (`Friend` in Visual Basic), and one is protected internal (`Protected Friend` in Visual Basic).</span></span> <span data-ttu-id="6cdc9-1953">Następnie wyświetla informacje o niektórych właściwości podstawowe (nazwę właściwości i typ, czy jest ona odczytu/zapisu, a widoczność jego `get` i `set` metod dostępu) dla właściwości, które odpowiadają ograniczeń w określonym powiązaniu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1953">It then displays some basic property information (the property name and type, whether it is read/write, and the visibility of its `get` and `set` accessors) for the properties that match the specified binding constraints.</span></span>  
  
 [!code-cpp[Type_GetProperties2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperties2/CPP/type_getproperties2.cpp#1)]
 [!code-csharp[Type_GetProperties2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperties2/CS/type_getproperties2.cs#1)]
 [!code-vb[Type_GetProperties2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperties2/VB/type_getproperties2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetProperty">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-1954">Pobiera określoną właściwość bieżącego <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1954">Gets a specific property of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="6cdc9-1955">Ciąg zawierający nazwę właściwości publicznej do pobrania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1955">The string containing the name of the public property to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-1956">Wyszukiwanie właściwości publicznej przy użyciu określonej nazwy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1956">Searches for the public property with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-1957">Obiekt reprezentujący właściwość publiczną o określonej nazwie, jeśli znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1957">An object representing the public property with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-1958">Wyszukaj `name` jest uwzględniana wielkość liter.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1958">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="6cdc9-1959">Wyszukiwanie uwzględnia właściwości wystąpienia statycznego publicznego i publicznego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1959">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="6cdc9-1960">Właściwość jest uważana za publiczne odbicie, jeżeli ma co najmniej jeden publiczny akcesor.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1960">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="6cdc9-1961">W przeciwnym razie właściwość jest traktowana jako prywatna i trzeba użyć <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (w języku Visual Basic należy połączyć wartości za pomocą `Or`) aby z niej skorzystać.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1961">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="6cdc9-1962">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, Metoda ta zwraca <xref:System.Reflection.PropertyInfo> z parametrami typu zastąpionymi przez odpowiednie argumenty typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1962">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6cdc9-1963">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, Metoda ta przeszukuje właściwości ograniczenia klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1963">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
 <span data-ttu-id="6cdc9-1964">Sytuacje, w których <xref:System.Reflection.AmbiguousMatchException> występuje obejmują następujące elementy:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1964">Situations in which <xref:System.Reflection.AmbiguousMatchException> occurs include the following:</span></span>  
  
-   <span data-ttu-id="6cdc9-1965">Typ zawiera dwa indeksowanej właściwości, które mają taką samą nazwę, ale o innej liczby parametrów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1965">A type contains two indexed properties that have the same name but different numbers of parameters.</span></span> <span data-ttu-id="6cdc9-1966">Aby rozstrzygnąć niejednoznaczność, użyj przeciążenia <xref:System.Type.GetProperty%2A> metody, która określa typy parametrów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1966">To resolve the ambiguity, use an overload of the <xref:System.Type.GetProperty%2A> method that specifies parameter types.</span></span>  
  
-   <span data-ttu-id="6cdc9-1967">Typ pochodny deklaruje właściwość, która ukrywa to właściwość dziedziczona z taką samą nazwę, za pomocą `new` modyfikator (`Shadows` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1967">A derived type declares a property that hides an inherited property with the same name, by using the `new` modifier (`Shadows` in Visual Basic).</span></span> <span data-ttu-id="6cdc9-1968">Aby rozstrzygnąć niejednoznaczność, użyj <xref:System.Type.GetProperty%28System.String%2CSystem.Reflection.BindingFlags%29> metoda przeciążenia i Dodaj <xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> flagę, aby ograniczyć wyszukiwanie do elementów członkowskich, które nie są dziedziczone.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1968">To resolve the ambiguity, use the <xref:System.Type.GetProperty%28System.String%2CSystem.Reflection.BindingFlags%29> method overload and add the <xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> flag to restrict the search to members that are not inherited.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="6cdc9-1969">Indeksatory i domyślne właściwości</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1969">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="6cdc9-1970">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], i [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] mają uproszczoną składnię do uzyskiwania dostępu do właściwości indeksowanych i zezwolić na jedną z indeksowanych właściwości jako domyślną dla tego typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1970">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="6cdc9-1971">Na przykład jeśli zmienna `myList` odwołuje się do <xref:System.Collections.ArrayList>, składnia `myList[3]` (`myList(3)` w języku Visual Basic) pobiera element z indeksem 3.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1971">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="6cdc9-1972">Można doprowadzić do przeciążenia właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1972">You can overload the property.</span></span>  
  
 <span data-ttu-id="6cdc9-1973">W języku C# ta funkcja nosi nazwę indeksatora i nie może być określona przez nazwę.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1973">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="6cdc9-1974">Domyślnie indeksatora języka C# pojawia się w metadanych jako indeksowana właściwość o nazwie "Item".</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1974">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="6cdc9-1975">Jednak Deweloper biblioteki klas można używać <xref:System.Runtime.CompilerServices.IndexerNameAttribute> atrybutu, aby zmienić nazwę indeksatora w metadanych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1975">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="6cdc9-1976">Na przykład <xref:System.String> klasa ma indeksatora o nazwie <xref:System.String.Chars%2A>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1976">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="6cdc9-1977">Właściwości indeksowane utworzone za pomocą języków innych niż C# mogą mieć też nazwy inne niż Element.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1977">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="6cdc9-1978">Aby określić, czy typ ma właściwość domyślną, należy użyć <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> metoda do testowania <xref:System.Reflection.DefaultMemberAttribute> atrybutu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1978">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="6cdc9-1979">Jeśli typ ma <xref:System.Reflection.DefaultMemberAttribute>, <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> właściwość zwraca nazwę właściwości domyślnej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1979">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-1980">Poniższy przykład pobiera `Type` obiekt klasy zdefiniowane przez użytkownika, pobiera właściwości tej klasy i wyświetla nazwę właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1980">The following example retrieves the `Type` object of a user-defined class, retrieves a property of that class, and displays the property name.</span></span>  
  
 [!code-cpp[Type_GetProperty1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty1/CPP/type_getproperty1.cpp#1)]
 [!code-csharp[Type_GetProperty1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty1/CS/type_getproperty1.cs#1)]
 [!code-vb[Type_GetProperty1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty1/VB/type_getproperty1.vb#1)]  
  
 <span data-ttu-id="6cdc9-1981">Wewnętrznie ta właściwość jest określany w metadanych o nazwie "Item".</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1981">Internally, this property is referred to in the metadata by the name "Item."</span></span> <span data-ttu-id="6cdc9-1982">Dowolne próba uzyskania `PropertyInfo` przy użyciu odbicia należy określić to wewnętrzna nazwa celu zwrócenie poprawnie `PropertyInfo` właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1982">Any attempt to get `PropertyInfo` using reflection must specify this internal name in order to correctly return the `PropertyInfo` property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="6cdc9-1983">Znaleziono więcej niż jedną właściwość o określonej nazwie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1983">More than one property is found with the specified name.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-1984">
            <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1984">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, bindingAttr As BindingFlags) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * System.Reflection.BindingFlags -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * System.Reflection.BindingFlags -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="6cdc9-1985">Ciąg zawierający nazwę właściwości do pobrania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1985">The string containing the name of the property to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="6cdc9-1986">Maska bitów składająca się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1986">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="6cdc9-1987">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1987">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-1988">Zero, aby zwrócić <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1988">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-1989">Wyszukuje dla określonej właściwości, za pomocą ograniczeń w określonym powiązaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1989">Searches for the specified property, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-1990">Obiekt reprezentujący właściwość, która spełnia określone wymagania, jeśli znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-1990">An object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-1991">Właściwość jest uważana za publiczne odbicie, jeżeli ma co najmniej jeden publiczny akcesor.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1991">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="6cdc9-1992">W przeciwnym razie właściwość jest traktowana jako prywatna i trzeba użyć <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (w języku Visual Basic należy połączyć wartości za pomocą `Or`) aby z niej skorzystać.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1992">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="6cdc9-1993">Następujące <xref:System.Reflection.BindingFlags> flagi filtru może służyć do definiowania właściwości, które można uwzględnić w wyszukiwaniu:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1993">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which properties to include in the search:</span></span>  
  
-   <span data-ttu-id="6cdc9-1994">Należy określić `BindingFlags.Instance` lub `BindingFlags.Static` w celu uzyskania zwrotu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1994">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="6cdc9-1995">Określ `BindingFlags.Public` obejmujący właściwości publiczne w wyszukiwaniu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1995">Specify `BindingFlags.Public` to include public properties in the search.</span></span>  
  
-   <span data-ttu-id="6cdc9-1996">Określ `BindingFlags.NonPublic` obejmujący w w wyszukiwaniu właściwości niepubliczne (czyli prywatne, wewnętrzne i chronione właściwości).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1996">Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search.</span></span>  
  
-   <span data-ttu-id="6cdc9-1997">Określ `BindingFlags.FlattenHierarchy` obejmujący `public` i `protected` statyczne elementy członkowskie w hierarchii; `private` statyczne elementy członkowskie w klasie dziedziczonej nie są uwzględniane.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1997">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="6cdc9-1998">Następujące <xref:System.Reflection.BindingFlags> flagi modyfikatora może służyć do zmiany sposobu działania wyszukiwania:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1998">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="6cdc9-1999">`BindingFlags.IgnoreCase` Aby zignorować wielkość liter `name`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-1999">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="6cdc9-2000">`BindingFlags.DeclaredOnly` Aby wyszukać tylko właściwości zadeklarowanych w <xref:System.Type>, nie właściwości, które zostały po prostu odziedziczone.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2000">`BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.</span></span>  
  
 <span data-ttu-id="6cdc9-2001">Aby uzyskać więcej informacji, zobacz <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2001">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="6cdc9-2002">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, Metoda ta zwraca <xref:System.Reflection.PropertyInfo> z parametrami typu zastąpionymi przez odpowiednie argumenty typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2002">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6cdc9-2003">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, Metoda ta przeszukuje właściwości ograniczenia klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2003">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
 <span data-ttu-id="6cdc9-2004">Sytuacje, w których <xref:System.Reflection.AmbiguousMatchException> występuje obejmują następujące elementy:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2004">Situations in which <xref:System.Reflection.AmbiguousMatchException> occurs include the following:</span></span>  
  
-   <span data-ttu-id="6cdc9-2005">Typ zawiera dwa indeksowanej właściwości, które mają taką samą nazwę, ale o innej liczby parametrów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2005">A type contains two indexed properties that have the same name but different numbers of parameters.</span></span> <span data-ttu-id="6cdc9-2006">Aby rozstrzygnąć niejednoznaczność, użyj przeciążenia <xref:System.Type.GetProperty%2A> metody, która określa typy parametrów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2006">To resolve the ambiguity, use an overload of the <xref:System.Type.GetProperty%2A> method that specifies parameter types.</span></span>  
  
-   <span data-ttu-id="6cdc9-2007">Typ pochodny deklaruje właściwość, która ukrywa to właściwość dziedziczona z taką samą nazwę, za pomocą `new` modyfikator (`Shadows` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2007">A derived type declares a property that hides an inherited property with the same name, using the `new` modifier (`Shadows` in Visual Basic).</span></span> <span data-ttu-id="6cdc9-2008">Aby rozstrzygnąć niejednoznaczność, obejmują <xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> ograniczyć wyszukiwanie do elementów członkowskich, które nie są dziedziczone.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2008">To resolve the ambiguity, include <xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> to restrict the search to members that are not inherited.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="6cdc9-2009">Indeksatory i domyślne właściwości</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2009">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="6cdc9-2010">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], i [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] mają uproszczoną składnię do uzyskiwania dostępu do właściwości indeksowanych i zezwolić na jedną z indeksowanych właściwości jako domyślną dla tego typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2010">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="6cdc9-2011">Na przykład jeśli zmienna `myList` odwołuje się do <xref:System.Collections.ArrayList>, składnia `myList[3]` (`myList(3)` w języku Visual Basic) pobiera element z indeksem 3.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2011">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="6cdc9-2012">Można doprowadzić do przeciążenia właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2012">You can overload the property.</span></span>  
  
 <span data-ttu-id="6cdc9-2013">W języku C# ta funkcja nosi nazwę indeksatora i nie może być określona przez nazwę.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2013">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="6cdc9-2014">Domyślnie indeksatora języka C# pojawia się w metadanych jako indeksowana właściwość o nazwie "Item".</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2014">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="6cdc9-2015">Jednak Deweloper biblioteki klas można używać <xref:System.Runtime.CompilerServices.IndexerNameAttribute> atrybutu, aby zmienić nazwę indeksatora w metadanych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2015">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="6cdc9-2016">Na przykład <xref:System.String> klasa ma indeksatora o nazwie <xref:System.String.Chars%2A>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2016">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="6cdc9-2017">Właściwości indeksowane utworzone za pomocą języków innych niż C# mogą mieć też nazwy inne niż Element.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2017">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="6cdc9-2018">Aby określić, czy typ ma właściwość domyślną, należy użyć <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> metoda do testowania <xref:System.Reflection.DefaultMemberAttribute> atrybutu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2018">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="6cdc9-2019">Jeśli typ ma <xref:System.Reflection.DefaultMemberAttribute>, <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> właściwość zwraca nazwę właściwości domyślnej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2019">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-2020">Poniższy przykład pobiera typ klasy zdefiniowane przez użytkownika, pobiera właściwości tej klasy i wyświetla nazwę właściwości, zgodnie z ograniczeń w określonym powiązaniu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2020">The following example retrieves the type of a user-defined class, retrieves a property of that class and displays the property name in accordance with the specified binding constraints.</span></span>  
  
 [!code-cpp[Type_GetProperty2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty2/CPP/type_getproperty2.cpp#1)]
 [!code-csharp[Type_GetProperty2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty2/CS/type_getproperty2.cs#1)]
 [!code-vb[Type_GetProperty2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty2/VB/type_getproperty2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="6cdc9-2021">Odnaleziono więcej niż jedną właściwość o określonej nazwie i pasującą do ograniczeń w określonym powiązaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2021">More than one property is found with the specified name and matching the specified binding constraints.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-2022">
            <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2022">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, returnType As Type) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, Type ^ returnType);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * Type -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty (name, returnType)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="6cdc9-2023">Ciąg zawierający nazwę właściwości publicznej do pobrania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2023">The string containing the name of the public property to get.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="6cdc9-2024">Zwracany typ właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2024">The return type of the property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-2025">Wyszukiwanie właściwości publicznej o określonej nazwie i typ zwracany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2025">Searches for the public property with the specified name and return type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-2026">Obiekt reprezentujący właściwość publiczną o określonej nazwie, jeśli znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2026">An object representing the public property with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-2027">Właściwość jest uważana za publiczne odbicie, jeżeli ma co najmniej jeden publiczny akcesor.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2027">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="6cdc9-2028">W przeciwnym razie właściwość jest traktowana jako prywatna i trzeba użyć <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (w języku Visual Basic należy połączyć wartości za pomocą `Or`) aby z niej skorzystać.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2028">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="6cdc9-2029">Wyszukaj `name` jest uwzględniana wielkość liter.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2029">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="6cdc9-2030">Wyszukiwanie uwzględnia właściwości wystąpienia statycznego publicznego i publicznego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2030">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="6cdc9-2031">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, Metoda ta zwraca <xref:System.Reflection.PropertyInfo> z parametrami typu zastąpionymi przez odpowiednie argumenty typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2031">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6cdc9-2032">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, Metoda ta przeszukuje właściwości ograniczenia klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2032">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="6cdc9-2033">Indeksatory i domyślne właściwości</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2033">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="6cdc9-2034">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], i [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] mają uproszczoną składnię do uzyskiwania dostępu do właściwości indeksowanych i zezwolić na jedną z indeksowanych właściwości jako domyślną dla tego typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2034">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="6cdc9-2035">Na przykład jeśli zmienna `myList` odwołuje się do <xref:System.Collections.ArrayList>, składnia `myList[3]` (`myList(3)` w języku Visual Basic) pobiera element z indeksem 3.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2035">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="6cdc9-2036">Można doprowadzić do przeciążenia właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2036">You can overload the property.</span></span>  
  
 <span data-ttu-id="6cdc9-2037">W języku C# ta funkcja nosi nazwę indeksatora i nie może być określona przez nazwę.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2037">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="6cdc9-2038">Domyślnie indeksatora języka C# pojawia się w metadanych jako indeksowana właściwość o nazwie "Item".</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2038">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="6cdc9-2039">Jednak Deweloper biblioteki klas można używać <xref:System.Runtime.CompilerServices.IndexerNameAttribute> atrybutu, aby zmienić nazwę indeksatora w metadanych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2039">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="6cdc9-2040">Na przykład <xref:System.String> klasa ma indeksatora o nazwie <xref:System.String.Chars%2A>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2040">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="6cdc9-2041">Właściwości indeksowane utworzone za pomocą języków innych niż C# mogą mieć też nazwy inne niż Element.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2041">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="6cdc9-2042">Aby określić, czy typ ma właściwość domyślną, należy użyć <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> metoda do testowania <xref:System.Reflection.DefaultMemberAttribute> atrybutu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2042">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="6cdc9-2043">Jeśli typ ma <xref:System.Reflection.DefaultMemberAttribute>, <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> właściwość zwraca nazwę właściwości domyślnej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2043">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-2044">Poniższy przykład definiuje klasę z jedną właściwością i pobiera nazwę i typ właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2044">The following example defines a class with one property and retrieves the name and type of the property.</span></span>  
  
 [!code-cpp[Type_GetProperty_Types#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty_Types/CPP/type_getproperty_types.cpp#1)]
 [!code-csharp[Type_GetProperty_Types#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty_Types/CS/type_getproperty_types.cs#1)]
 [!code-vb[Type_GetProperty_Types#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty_Types/VB/type_getproperty_types.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="6cdc9-2045">Znaleziono więcej niż jedną właściwość o określonej nazwie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2045">More than one property is found with the specified name.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-2046">
            <paramref name="name" /> jest <see langword="null" />, lub <paramref name="returnType" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2046">
              <paramref name="name" /> is <see langword="null" />, or <paramref name="returnType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, types As Type()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type[] -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * Type[] -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty (name, types)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="6cdc9-2047">Ciąg zawierający nazwę właściwości publicznej do pobrania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2047">The string containing the name of the public property to get.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="6cdc9-2048">Tablica <see cref="T:System.Type" /> obiektów reprezentujących liczbę, kolejność i typ parametrów właściwości indeksowanej, aby uzyskać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2048">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          </span>
          <span data-ttu-id="6cdc9-2049">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2049">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2050">Pusta tablica typu <see cref="T:System.Type" /> (Type [] types = new Type[0]) umożliwia pobranie właściwości, która nie jest indeksowana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2050">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-2051">Wyszukuje określony właściwość publiczną, której parametry pasuje określone typy argumentów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2051">Searches for the specified public property whose parameters match the specified argument types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-2052">Obiekt reprezentujący właściwość publiczną, której parametry pasuje określone typy argumentów, jeśli znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2052">An object representing the public property whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-2053">Właściwość jest uważana za publiczne odbicie, jeżeli ma co najmniej jeden publiczny akcesor.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2053">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="6cdc9-2054">W przeciwnym razie właściwość jest traktowana jako prywatna i trzeba użyć <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (w języku Visual Basic należy połączyć wartości za pomocą `Or`) aby z niej skorzystać.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2054">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="6cdc9-2055">Wyszukaj `name` jest uwzględniana wielkość liter.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2055">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="6cdc9-2056">Wyszukiwanie uwzględnia właściwości wystąpienia statycznego publicznego i publicznego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2056">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="6cdc9-2057">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, Metoda ta zwraca <xref:System.Reflection.PropertyInfo> z parametrami typu zastąpionymi przez odpowiednie argumenty typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2057">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6cdc9-2058">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, Metoda ta przeszukuje właściwości ograniczenia klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2058">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="6cdc9-2059">Indeksatory i domyślne właściwości</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2059">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="6cdc9-2060">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], i [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] mają uproszczoną składnię do uzyskiwania dostępu do właściwości indeksowanych i zezwolić na jedną z indeksowanych właściwości jako domyślną dla tego typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2060">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="6cdc9-2061">Na przykład jeśli zmienna `myList` odwołuje się do <xref:System.Collections.ArrayList>, składnia `myList[3]` (`myList(3)` w języku Visual Basic) pobiera element z indeksem 3.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2061">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="6cdc9-2062">Można doprowadzić do przeciążenia właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2062">You can overload the property.</span></span>  
  
 <span data-ttu-id="6cdc9-2063">W języku C# ta funkcja nosi nazwę indeksatora i nie może być określona przez nazwę.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2063">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="6cdc9-2064">Domyślnie indeksatora języka C# pojawia się w metadanych jako indeksowana właściwość o nazwie "Item".</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2064">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="6cdc9-2065">Jednak Deweloper biblioteki klas można używać <xref:System.Runtime.CompilerServices.IndexerNameAttribute> atrybutu, aby zmienić nazwę indeksatora w metadanych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2065">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="6cdc9-2066">Na przykład <xref:System.String> klasa ma indeksatora o nazwie <xref:System.String.Chars%2A>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2066">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="6cdc9-2067">Właściwości indeksowane utworzone za pomocą języków innych niż C# mogą mieć też nazwy inne niż Element.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2067">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="6cdc9-2068">Aby określić, czy typ ma właściwość domyślną, należy użyć <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> metoda do testowania <xref:System.Reflection.DefaultMemberAttribute> atrybutu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2068">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="6cdc9-2069">Jeśli typ ma <xref:System.Reflection.DefaultMemberAttribute>, <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> właściwość zwraca nazwę właściwości domyślnej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2069">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-2070">Poniższy przykład pobiera `Type` obiekt klasy zdefiniowane przez użytkownika, pobiera właściwości tej klasy i wyświetla nazwę właściwości i typ właściwości zgodnie z argumentów przekazanych do `GetProperty`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2070">The following example retrieves the `Type` object of a user-defined class, retrieves the property of that class, and displays the property name and type of the property as specified by the arguments passed to `GetProperty`.</span></span>  
  
 [!code-cpp[Type_GetProperty3#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty3/CPP/type_getproperty3.cpp#1)]
 [!code-csharp[Type_GetProperty3#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty3/CS/type_getproperty3.cs#1)]
 [!code-vb[Type_GetProperty3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty3/VB/type_getproperty3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="6cdc9-2071">Odnaleziono więcej niż jedną właściwość o określonej nazwie i pasującą określone typy argumentów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2071">More than one property is found with the specified name and matching the specified argument types.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-2072">
            <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2072">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cdc9-2073">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2073">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2074">
            <paramref name="types" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2074">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6cdc9-2075">
            <paramref name="types" /> ma charakter wielowymiarowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2075">
              <paramref name="types" /> is multidimensional.</span>
          </span>
        </exception>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="6cdc9-2076">Element <paramref name="types" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2076">An element of <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, returnType As Type, types As Type()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type * Type[] -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * Type * Type[] -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty (name, returnType, types)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type,System.Type[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="6cdc9-2077">Ciąg zawierający nazwę właściwości publicznej do pobrania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2077">The string containing the name of the public property to get.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="6cdc9-2078">Zwracany typ właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2078">The return type of the property.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="6cdc9-2079">Tablica <see cref="T:System.Type" /> obiektów reprezentujących liczbę, kolejność i typ parametrów właściwości indeksowanej, aby uzyskać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2079">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          </span>
          <span data-ttu-id="6cdc9-2080">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2080">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2081">Pusta tablica typu <see cref="T:System.Type" /> (Type [] types = new Type[0]) umożliwia pobranie właściwości, która nie jest indeksowana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2081">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-2082">Wyszukuje określony właściwość publiczną, której parametry pasuje określone typy argumentów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2082">Searches for the specified public property whose parameters match the specified argument types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-2083">Obiekt reprezentujący właściwość publiczną, której parametry pasuje określone typy argumentów, jeśli znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2083">An object representing the public property whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-2084">Właściwość jest uważana za publiczne odbicie, jeżeli ma co najmniej jeden publiczny akcesor.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2084">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="6cdc9-2085">W przeciwnym razie właściwość jest traktowana jako prywatna i trzeba użyć <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (w języku Visual Basic należy połączyć wartości za pomocą `Or`) aby z niej skorzystać.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2085">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="6cdc9-2086">Wyszukaj `name` jest uwzględniana wielkość liter.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2086">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="6cdc9-2087">Wyszukiwanie uwzględnia właściwości wystąpienia statycznego publicznego i publicznego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2087">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="6cdc9-2088">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, Metoda ta zwraca <xref:System.Reflection.PropertyInfo> z parametrami typu zastąpionymi przez odpowiednie argumenty typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2088">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6cdc9-2089">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, Metoda ta przeszukuje właściwości ograniczenia klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2089">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="6cdc9-2090">Indeksatory i domyślne właściwości</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2090">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="6cdc9-2091">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], i [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] mają uproszczoną składnię do uzyskiwania dostępu do właściwości indeksowanych i zezwolić na jedną z indeksowanych właściwości jako domyślną dla tego typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2091">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="6cdc9-2092">Na przykład jeśli zmienna `myList` odwołuje się do <xref:System.Collections.ArrayList>, składnia `myList[3]` (`myList(3)` w języku Visual Basic) pobiera element z indeksem 3.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2092">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="6cdc9-2093">Można doprowadzić do przeciążenia właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2093">You can overload the property.</span></span>  
  
 <span data-ttu-id="6cdc9-2094">W języku C# ta funkcja nosi nazwę indeksatora i nie może być określona przez nazwę.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2094">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="6cdc9-2095">Domyślnie indeksatora języka C# pojawia się w metadanych jako indeksowana właściwość o nazwie "Item".</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2095">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="6cdc9-2096">Jednak Deweloper biblioteki klas można używać <xref:System.Runtime.CompilerServices.IndexerNameAttribute> atrybutu, aby zmienić nazwę indeksatora w metadanych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2096">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="6cdc9-2097">Na przykład <xref:System.String> klasa ma indeksatora o nazwie <xref:System.String.Chars%2A>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2097">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="6cdc9-2098">Właściwości indeksowane utworzone za pomocą języków innych niż C# mogą mieć też nazwy inne niż Element.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2098">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="6cdc9-2099">Aby określić, czy typ ma właściwość domyślną, należy użyć <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> metoda do testowania <xref:System.Reflection.DefaultMemberAttribute> atrybutu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2099">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="6cdc9-2100">Jeśli typ ma <xref:System.Reflection.DefaultMemberAttribute>, <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> właściwość zwraca nazwę właściwości domyślnej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2100">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="6cdc9-2101">Odnaleziono więcej niż jedną właściwość o określonej nazwie i pasującą określone typy argumentów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2101">More than one property is found with the specified name and matching the specified argument types.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-2102">
            <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2102">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cdc9-2103">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2103">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2104">
            <paramref name="types" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2104">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6cdc9-2105">
            <paramref name="types" /> ma charakter wielowymiarowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2105">
              <paramref name="types" /> is multidimensional.</span>
          </span>
        </exception>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="6cdc9-2106">Element <paramref name="types" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2106">An element of <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, returnType As Type, types As Type(), modifiers As ParameterModifier()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty (name, returnType, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="6cdc9-2107">Ciąg zawierający nazwę właściwości publicznej do pobrania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2107">The string containing the name of the public property to get.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="6cdc9-2108">Zwracany typ właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2108">The return type of the property.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="6cdc9-2109">Tablica <see cref="T:System.Type" /> obiektów reprezentujących liczbę, kolejność i typ parametrów właściwości indeksowanej, aby uzyskać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2109">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          </span>
          <span data-ttu-id="6cdc9-2110">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2110">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2111">Pusta tablica typu <see cref="T:System.Type" /> (Type [] types = new Type[0]) umożliwia pobranie właściwości, która nie jest indeksowana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2111">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="6cdc9-2112">Tablica <see cref="T:System.Reflection.ParameterModifier" /> obiektów reprezentujących atrybuty skojarzone z odpowiednim elementem w <c>typy</c> tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2112">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="6cdc9-2113">Domyślny konsolidator nie przetwarza tego parametru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2113">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-2114">Wyszukuje określony właściwość publiczną, której parametry odpowiadają określone typy argumentów i modyfikatorów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2114">Searches for the specified public property whose parameters match the specified argument types and modifiers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-2115">Obiekt reprezentujący właściwość publiczną, która spełnia określone wymagania, jeśli znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2115">An object representing the public property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-2116">Właściwość jest uważana za publiczne odbicie, jeżeli ma co najmniej jeden publiczny akcesor.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2116">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="6cdc9-2117">W przeciwnym razie właściwość jest traktowana jako prywatna i trzeba użyć <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (w języku Visual Basic należy połączyć wartości za pomocą `Or`) aby z niej skorzystać.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2117">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="6cdc9-2118">Mimo że domyślny integrator nie przetwarza <xref:System.Reflection.ParameterModifier> ( `modifiers` parametru), można użyć streszczenia <xref:System.Reflection.Binder?displayProperty=nameWithType> klasy do napisania niestandardowego integratora, który przetwarza `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2118">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="6cdc9-2119">`ParameterModifier` jest używana tylko podczas wywoływania przez współdziałania z modelem COM i są obsługiwane tylko w przypadku parametrów, które są przekazywane przez odwołanie.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2119">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="6cdc9-2120">Wyszukaj `name` jest uwzględniana wielkość liter.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2120">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="6cdc9-2121">Wyszukiwanie uwzględnia właściwości wystąpienia statycznego publicznego i publicznego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2121">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="6cdc9-2122">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, Metoda ta zwraca <xref:System.Reflection.PropertyInfo> z parametrami typu zastąpionymi przez odpowiednie argumenty typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2122">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6cdc9-2123">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, Metoda ta przeszukuje właściwości ograniczenia klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2123">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="6cdc9-2124">Indeksatory i domyślne właściwości</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2124">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="6cdc9-2125">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], i [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] mają uproszczoną składnię do uzyskiwania dostępu do właściwości indeksowanych i zezwolić na jedną z indeksowanych właściwości jako domyślną dla tego typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2125">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="6cdc9-2126">Na przykład jeśli zmienna `myList` odwołuje się do <xref:System.Collections.ArrayList>, składnia `myList[3]` (`myList(3)` w języku Visual Basic) pobiera element z indeksem 3.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2126">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="6cdc9-2127">Można doprowadzić do przeciążenia właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2127">You can overload the property.</span></span>  
  
 <span data-ttu-id="6cdc9-2128">W języku C# ta funkcja nosi nazwę indeksatora i nie może być określona przez nazwę.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2128">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="6cdc9-2129">Domyślnie indeksatora języka C# pojawia się w metadanych jako indeksowana właściwość o nazwie "Item".</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2129">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="6cdc9-2130">Jednak Deweloper biblioteki klas można używać <xref:System.Runtime.CompilerServices.IndexerNameAttribute> atrybutu, aby zmienić nazwę indeksatora w metadanych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2130">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="6cdc9-2131">Na przykład <xref:System.String> klasa ma indeksatora o nazwie <xref:System.String.Chars%2A>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2131">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="6cdc9-2132">Właściwości indeksowane utworzone za pomocą języków innych niż C# mogą mieć też nazwy inne niż Element.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2132">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="6cdc9-2133">Aby określić, czy typ ma właściwość domyślną, należy użyć <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> metoda do testowania <xref:System.Reflection.DefaultMemberAttribute> atrybutu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2133">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="6cdc9-2134">Jeśli typ ma <xref:System.Reflection.DefaultMemberAttribute>, <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> właściwość zwraca nazwę właściwości domyślnej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2134">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-2135">W poniższym przykładzie uzyskano `Type` obiekt odpowiadający `MyPropertyClass`, i indeksowanej właściwości tej klasy są pobierane przy użyciu argumentów przekazanych do `GetProperty` metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2135">The following example obtains a `Type` object corresponding to `MyPropertyClass`, and the indexed property of this class is retrieved using the arguments passed to the `GetProperty` method.</span></span>  
  
 [!code-cpp[Type_GetProperty5#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty5/CPP/type_getproperty2.cpp#1)]
 [!code-csharp[Type_GetProperty5#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty5/CS/type_getproperty2.cs#1)]
 [!code-vb[Type_GetProperty5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty5/VB/type_getproperty2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="6cdc9-2136">Odnaleziono więcej niż jedną właściwość o określonej nazwie i pasującą określone typy argumentów i modyfikatorów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2136">More than one property is found with the specified name and matching the specified argument types and modifiers.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-2137">
            <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2137">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cdc9-2138">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2138">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2139">
            <paramref name="types" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2139">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6cdc9-2140">
            <paramref name="types" /> ma charakter wielowymiarowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2140">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="6cdc9-2141">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2141">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2142">
            <paramref name="modifiers" /> ma charakter wielowymiarowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2142">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="6cdc9-2143">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2143">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2144">
            <paramref name="types" /> i <paramref name="modifiers" /> nie mają tę samą długość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2144">
              <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
        </exception>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="6cdc9-2145">Element <paramref name="types" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2145">An element of <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty (name, bindingAttr, binder, returnType, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="6cdc9-2146">Ciąg zawierający nazwę właściwości do pobrania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2146">The string containing the name of the property to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="6cdc9-2147">Maska bitów składająca się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2147">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="6cdc9-2148">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2148">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2149">Zero, aby zwrócić <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2149">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="6cdc9-2150">Obiekt, który określa zestaw właściwości i umożliwia powiązanie, które może obejmować wybór metody przeciążonej, wymuszanie typów argumentu i wywołanie elementu członkowskiego przez odbicie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2150">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="6cdc9-2151">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2151">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2152">Odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic), aby użyć <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2152">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="6cdc9-2153">Zwracany typ właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2153">The return type of the property.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="6cdc9-2154">Tablica <see cref="T:System.Type" /> obiektów reprezentujących liczbę, kolejność i typ parametrów właściwości indeksowanej, aby uzyskać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2154">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          </span>
          <span data-ttu-id="6cdc9-2155">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2155">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2156">Pusta tablica typu <see cref="T:System.Type" /> (Type [] types = new Type[0]) umożliwia pobranie właściwości, która nie jest indeksowana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2156">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="6cdc9-2157">Tablica <see cref="T:System.Reflection.ParameterModifier" /> obiektów reprezentujących atrybuty skojarzone z odpowiednim elementem w <c>typy</c> tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2157">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="6cdc9-2158">Domyślny konsolidator nie przetwarza tego parametru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2158">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-2159">Wyszukuje określoną właściwość, której parametry odpowiadają określone typy argumentów i modyfikatorów, za pomocą ograniczeń w określonym powiązaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2159">Searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-2160">Obiekt reprezentujący właściwość, która spełnia określone wymagania, jeśli znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2160">An object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-2161">Właściwość jest uważana za publiczne odbicie, jeżeli ma co najmniej jeden publiczny akcesor.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2161">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="6cdc9-2162">W przeciwnym razie właściwość jest traktowana jako prywatna i trzeba użyć <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (w języku Visual Basic należy połączyć wartości za pomocą `Or`) aby z niej skorzystać.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2162">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="6cdc9-2163">Mimo że domyślny integrator nie przetwarza <xref:System.Reflection.ParameterModifier> ( `modifiers` parametru), można użyć streszczenia <xref:System.Reflection.Binder?displayProperty=nameWithType> klasy do napisania niestandardowego integratora, który przetwarza `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2163">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="6cdc9-2164">`ParameterModifier` jest używana tylko podczas wywoływania przez współdziałania z modelem COM i są obsługiwane tylko w przypadku parametrów, które są przekazywane przez odwołanie.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2164">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="6cdc9-2165">W poniższej tabeli przedstawiono, jakie elementy członkowskie klasy podstawowej są zwracane przez `Get` metody uwzględnianiem typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2165">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="6cdc9-2166">Typ elementu członkowskiego</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2166">Member Type</span></span>|<span data-ttu-id="6cdc9-2167">Static</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2167">Static</span></span>|<span data-ttu-id="6cdc9-2168">Niestatyczna</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2168">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="6cdc9-2169">Konstruktor</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2169">Constructor</span></span>|<span data-ttu-id="6cdc9-2170">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2170">No</span></span>|<span data-ttu-id="6cdc9-2171">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2171">No</span></span>|  
|<span data-ttu-id="6cdc9-2172">Pole</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2172">Field</span></span>|<span data-ttu-id="6cdc9-2173">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2173">No</span></span>|<span data-ttu-id="6cdc9-2174">Tak.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2174">Yes.</span></span> <span data-ttu-id="6cdc9-2175">Pole jest zawsze ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2175">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6cdc9-2176">Zdarzenie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2176">Event</span></span>|<span data-ttu-id="6cdc9-2177">Nie dotyczy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2177">Not applicable</span></span>|<span data-ttu-id="6cdc9-2178">Zasadą systemu typu jest to, że dziedziczenie jest takie samo, jak w przypadku metod, które implementują właściwość.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2178">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6cdc9-2179">Odbicie traktuje właściwości jako ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2179">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-2180">Patrz Uwaga 2 poniżej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2180">See note 2 below.</span></span>|  
|<span data-ttu-id="6cdc9-2181">Metoda</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2181">Method</span></span>|<span data-ttu-id="6cdc9-2182">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2182">No</span></span>|<span data-ttu-id="6cdc9-2183">Tak.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2183">Yes.</span></span> <span data-ttu-id="6cdc9-2184">Metodą (zarówno wirtualną, jak i niewirtualną) może być ukrycie przez nazwę lub przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2184">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6cdc9-2185">Typu zagnieżdżony</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2185">Nested Type</span></span>|<span data-ttu-id="6cdc9-2186">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2186">No</span></span>|<span data-ttu-id="6cdc9-2187">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2187">No</span></span>|  
|<span data-ttu-id="6cdc9-2188">Właściwość</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2188">Property</span></span>|<span data-ttu-id="6cdc9-2189">Nie dotyczy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2189">Not applicable</span></span>|<span data-ttu-id="6cdc9-2190">Zasadą systemu typu jest to, że dziedziczenie jest takie samo, jak w przypadku metod, które implementują właściwość.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2190">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6cdc9-2191">Odbicie traktuje właściwości jako ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2191">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-2192">Patrz Uwaga 2 poniżej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2192">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="6cdc9-2193">Ukrycie przez nazwę i podpis dotyczy wszystkich części podpisu, w tym modyfikatorów niestandardowych, zwraca typy, typy parametrów, wartowników i niezarządzane konwencje wywoływania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2193">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="6cdc9-2194">To jest porównanie binarne.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2194">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="6cdc9-2195">W celu odbicia właściwości i zdarzenia są ukrywane przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2195">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-2196">Jeśli istnieje właściwość z akcesorem pobierania i ustawiania w klasie bazowej, ale odziedziczona klasa ma tylko akcesor pobierania, właściwość klasy odziedziczonej ukrywa właściwości klasy bazowej, a nie można uzyskać dostępu do metody ustawiającej w klasie bazowej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2196">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="6cdc9-2197">Atrybuty niestandardowe nie są częścią wspólnego typu systemowego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2197">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="6cdc9-2198">Następujące <xref:System.Reflection.BindingFlags> flagi filtru może służyć do definiowania właściwości, które można uwzględnić w wyszukiwaniu:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2198">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which properties to include in the search:</span></span>  
  
-   <span data-ttu-id="6cdc9-2199">Należy określić `BindingFlags.Instance` lub `BindingFlags.Static` w celu uzyskania zwrotu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2199">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="6cdc9-2200">Określ `BindingFlags.Public` obejmujący właściwości publiczne w wyszukiwaniu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2200">Specify `BindingFlags.Public` to include public properties in the search.</span></span>  
  
-   <span data-ttu-id="6cdc9-2201">Określ `BindingFlags.NonPublic` obejmujący w w wyszukiwaniu właściwości niepubliczne (czyli prywatne, wewnętrzne i chronione właściwości).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2201">Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search.</span></span>  
  
-   <span data-ttu-id="6cdc9-2202">Określ `BindingFlags.FlattenHierarchy` obejmujący `public` i `protected` statyczne elementy członkowskie w hierarchii; `private` statyczne elementy członkowskie w klasie dziedziczonej nie są uwzględniane.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2202">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="6cdc9-2203">Następujące <xref:System.Reflection.BindingFlags> flagi modyfikatora może służyć do zmiany sposobu działania wyszukiwania:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2203">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="6cdc9-2204">`BindingFlags.IgnoreCase` Aby zignorować wielkość liter `name`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2204">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="6cdc9-2205">`BindingFlags.DeclaredOnly` Aby wyszukać tylko właściwości zadeklarowanych w <xref:System.Type>, nie właściwości, które zostały po prostu odziedziczone.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2205">`BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.</span></span>  
  
 <span data-ttu-id="6cdc9-2206">Aby uzyskać więcej informacji, zobacz <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2206">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="6cdc9-2207">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, Metoda ta zwraca <xref:System.Reflection.PropertyInfo> z parametrami typu zastąpionymi przez odpowiednie argumenty typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2207">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6cdc9-2208">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, Metoda ta przeszukuje właściwości ograniczenia klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2208">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="6cdc9-2209">Indeksatory i domyślne właściwości</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2209">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="6cdc9-2210">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], i [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] mają uproszczoną składnię do uzyskiwania dostępu do właściwości indeksowanych i zezwolić na jedną z indeksowanych właściwości jako domyślną dla tego typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2210">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="6cdc9-2211">Na przykład jeśli zmienna `myList` odwołuje się do <xref:System.Collections.ArrayList>, składnia `myList[3]` (`myList(3)` w języku Visual Basic) pobiera element z indeksem 3.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2211">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="6cdc9-2212">Można doprowadzić do przeciążenia właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2212">You can overload the property.</span></span>  
  
 <span data-ttu-id="6cdc9-2213">W języku C# ta funkcja nosi nazwę indeksatora i nie może być określona przez nazwę.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2213">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="6cdc9-2214">Domyślnie indeksatora języka C# pojawia się w metadanych jako indeksowana właściwość o nazwie "Item".</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2214">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="6cdc9-2215">Jednak Deweloper biblioteki klas można używać <xref:System.Runtime.CompilerServices.IndexerNameAttribute> atrybutu, aby zmienić nazwę indeksatora w metadanych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2215">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="6cdc9-2216">Na przykład <xref:System.String> klasa ma indeksatora o nazwie <xref:System.String.Chars%2A>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2216">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="6cdc9-2217">Właściwości indeksowane utworzone za pomocą języków innych niż C# mogą mieć też nazwy inne niż Element.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2217">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="6cdc9-2218">Aby określić, czy typ ma właściwość domyślną, należy użyć <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> metoda do testowania <xref:System.Reflection.DefaultMemberAttribute> atrybutu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2218">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="6cdc9-2219">Jeśli typ ma <xref:System.Reflection.DefaultMemberAttribute>, <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> właściwość zwraca nazwę właściwości domyślnej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2219">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="6cdc9-2220">Odnaleziono więcej niż jedną właściwość o określonej nazwie i pasującą do ograniczeń w określonym powiązaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2220">More than one property is found with the specified name and matching the specified binding constraints.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-2221">
            <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2221">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cdc9-2222">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2222">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2223">
            <paramref name="types" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2223">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6cdc9-2224">
            <paramref name="types" /> ma charakter wielowymiarowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2224">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="6cdc9-2225">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2225">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2226">
            <paramref name="modifiers" /> ma charakter wielowymiarowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2226">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="6cdc9-2227">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2227">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2228">
            <paramref name="types" /> i <paramref name="modifiers" /> nie mają tę samą długość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2228">
              <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
        </exception>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="6cdc9-2229">Element <paramref name="types" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2229">An element of <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetPropertyImpl">
      <MemberSignature Language="C#" Value="protected abstract System.Reflection.PropertyInfo GetPropertyImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.PropertyInfo GetPropertyImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Reflection::PropertyInfo ^ GetPropertyImpl(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetPropertyImpl : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo" Usage="type.GetPropertyImpl (name, bindingAttr, binder, returnType, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="6cdc9-2230">Ciąg zawierający nazwę właściwości do pobrania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2230">The string containing the name of the property to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="6cdc9-2231">Maska bitów składająca się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2231">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="6cdc9-2232">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2232">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2233">Zero, aby zwrócić <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2233">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="6cdc9-2234">Obiekt, który definiuje zestaw właściwości i umożliwia powiązanie, które może obejmować Wybór elementu członkowskiego przeciążonej, wymuszanie typów argumentu i wywołanie elementu członkowskiego przez odbicie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2234">An object that defines a set of properties and enables binding, which can involve selection of an overloaded member, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="6cdc9-2235">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2235">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2236">Odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic), aby użyć <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2236">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="6cdc9-2237">Zwracany typ właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2237">The return type of the property.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="6cdc9-2238">Tablica <see cref="T:System.Type" /> obiektów reprezentujących liczbę, kolejność i typ parametrów właściwości indeksowanej, aby uzyskać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2238">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          </span>
          <span data-ttu-id="6cdc9-2239">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2239">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2240">Pusta tablica typu <see cref="T:System.Type" /> (Type [] types = new Type[0]) umożliwia pobranie właściwości, która nie jest indeksowana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2240">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="6cdc9-2241">Tablica <see cref="T:System.Reflection.ParameterModifier" /> obiektów reprezentujących atrybuty skojarzone z odpowiednim elementem w <c>typy</c> tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2241">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="6cdc9-2242">Domyślny konsolidator nie przetwarza tego parametru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2242">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-2243">W przypadku przesłonięcia w klasie pochodnej, wyszukuje określoną właściwość, której parametry odpowiadają określone typy argumentów i modyfikatorów, za pomocą ograniczeń w określonym powiązaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2243">When overridden in a derived class, searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-2244">Obiekt reprezentujący właściwość, która spełnia określone wymagania, jeśli znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2244">An object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-2245">Mimo że domyślny integrator nie przetwarza <xref:System.Reflection.ParameterModifier> ( `modifiers` parametru), można użyć streszczenia <xref:System.Reflection.Binder?displayProperty=nameWithType> klasy do napisania niestandardowego integratora, który przetwarza `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2245">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="6cdc9-2246">`ParameterModifier` jest używana tylko podczas wywoływania przez współdziałania z modelem COM i są obsługiwane tylko w przypadku parametrów, które są przekazywane przez odwołanie.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2246">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="6cdc9-2247">Następujące <xref:System.Reflection.BindingFlags> flagi filtru może służyć do definiowania właściwości, które można uwzględnić w wyszukiwaniu:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2247">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which properties to include in the search:</span></span>  
  
-   <span data-ttu-id="6cdc9-2248">Należy określić `BindingFlags.Instance` lub `BindingFlags.Static` w celu uzyskania zwrotu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2248">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="6cdc9-2249">Określ `BindingFlags.Public` obejmujący właściwości publiczne w wyszukiwaniu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2249">Specify `BindingFlags.Public` to include public properties in the search.</span></span>  
  
-   <span data-ttu-id="6cdc9-2250">Określ `BindingFlags.NonPublic` obejmujący w w wyszukiwaniu właściwości niepubliczne (czyli prywatne, wewnętrzne i chronione właściwości).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2250">Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search.</span></span>  
  
-   <span data-ttu-id="6cdc9-2251">Określ `BindingFlags.FlattenHierarchy` obejmujący `public` i `protected` statyczne elementy członkowskie w hierarchii; `private` statyczne elementy członkowskie w klasie dziedziczonej nie są uwzględniane.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2251">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="6cdc9-2252">Następujące <xref:System.Reflection.BindingFlags> flagi modyfikatora może służyć do zmiany sposobu działania wyszukiwania:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2252">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="6cdc9-2253">`BindingFlags.IgnoreCase` Aby zignorować wielkość liter `name`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2253">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="6cdc9-2254">`BindingFlags.DeclaredOnly` Aby wyszukać tylko właściwości zadeklarowanych w <xref:System.Type>, nie właściwości, które zostały po prostu odziedziczone.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2254">`BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.</span></span>  
  
 <span data-ttu-id="6cdc9-2255">Aby uzyskać więcej informacji, zobacz <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2255">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="6cdc9-2256">Odnaleziono więcej niż jedną właściwość o określonej nazwie i pasującą do ograniczeń w określonym powiązaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2256">More than one property is found with the specified name and matching the specified binding constraints.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-2257">
            <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2257">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cdc9-2258">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2258">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2259">
            <paramref name="types" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2259">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cdc9-2260">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2260">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2261">Jeden z elementów w <paramref name="types" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2261">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6cdc9-2262">
            <paramref name="types" /> ma charakter wielowymiarowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2262">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="6cdc9-2263">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2263">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2264">
            <paramref name="modifiers" /> ma charakter wielowymiarowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2264">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="6cdc9-2265">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2265">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2266">
            <paramref name="types" /> i <paramref name="modifiers" /> nie mają tę samą długość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2266">
              <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="6cdc9-2267">Bieżącym typem jest <see cref="T:System.Reflection.Emit.TypeBuilder" />, <see cref="T:System.Reflection.Emit.EnumBuilder" />, lub <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2267">The current type is a <see cref="T:System.Reflection.Emit.TypeBuilder" />, <see cref="T:System.Reflection.Emit.EnumBuilder" />, or <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetType">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-2268">Pobiera <see cref="T:System.Type" /> obiekt, który reprezentuje określonego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2268">Gets a <see cref="T:System.Type" /> object that represents the specified type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetType();" />
      <MemberSignature Language="F#" Value="override this.GetType : unit -&gt; Type" Usage="type.GetType " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-2269">Pobiera bieżący <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2269">Gets the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-2270">Bieżący <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2270">The current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="6cdc9-2271">Inicjator klasy jest wywoływany i zgłasza wyjątek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2271">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <altmember cref="T:System.TypeLoadException" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md">
          <span data-ttu-id="6cdc9-2272">Określanie w pełni kwalifikowanych nazw typów</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2272">Specifying Fully Qualified Type Names</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName);" />
      <MemberSignature Language="F#" Value="static member GetType : string -&gt; Type" Usage="System.Type.GetType typeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="6cdc9-2273">Nazwa kwalifikowanego dla zestawu typu można pobrać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2273">The assembly-qualified name of the type to get.</span>
          </span>
          <span data-ttu-id="6cdc9-2274">Zobacz <see cref="P:System.Type.AssemblyQualifiedName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2274">See <see cref="P:System.Type.AssemblyQualifiedName" />.</span>
          </span>
          <span data-ttu-id="6cdc9-2275">Jeśli typ jest zawierający obecnie wykonywany zestaw lub biblioteki Mscorlib.dll, wystarczy podać nazwę typu kwalifikowana przez jego przestrzeń nazw.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2275">If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-2276">Pobiera <see cref="T:System.Type" /> o określonej nazwie, wyszukując uwzględniana wielkość liter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2276">Gets the <see cref="T:System.Type" /> with the specified name, performing a case-sensitive search.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-2277">Typ o określonej nazwie, jeśli znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2277">The type with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-2278">Możesz użyć <xref:System.Type.GetType%2A> metodę, aby uzyskać <xref:System.Type> obiektu dla typu w innym zestawie, jeśli znasz jego nazwę kwalifikowaną dla zestawu, który można uzyskać z <xref:System.Type.AssemblyQualifiedName>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2278">You can use the <xref:System.Type.GetType%2A> method to obtain a <xref:System.Type> object for a type in another assembly, if you know its assembly-qualified name which can be obtained from <xref:System.Type.AssemblyQualifiedName>.</span></span> <span data-ttu-id="6cdc9-2279"><xref:System.Type.GetType%2A> powoduje, że ładowanie zestawu określonego w `typeName`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2279"><xref:System.Type.GetType%2A> causes loading of the assembly specified in `typeName`.</span></span> <span data-ttu-id="6cdc9-2280">Można również załadować zestawu przy użyciu <xref:System.Reflection.Assembly.Load%2A> metody, a następnie użyj <xref:System.Type.GetType%2A> lub <xref:System.Reflection.Assembly.GetTypes%2A> metody <xref:System.Reflection.Assembly> klasy, aby uzyskać <xref:System.Type> obiektów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2280">You can also load an assembly using the <xref:System.Reflection.Assembly.Load%2A> method, and then use the <xref:System.Type.GetType%2A> or <xref:System.Reflection.Assembly.GetTypes%2A> methods of the <xref:System.Reflection.Assembly> class to get <xref:System.Type> objects.</span></span> <span data-ttu-id="6cdc9-2281">Jeśli typ znajduje się w zestawie znane w czasie kompilacji program, jest bardziej wydajne, do użycia w języku C# <xref:System.Type.GetType%2A> w języku Visual Basic lub języka C++.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2281">If a type is in an assembly known to your program at compile time, it is more efficient to use  in C#, <xref:System.Type.GetType%2A> in Visual Basic, or  in C++.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-2282">Jeśli `typeName` nie można znaleźć, wywołanie <xref:System.Type.GetType%28System.String%29> metoda zwraca `null`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2282">If `typeName` cannot be found, the call to the <xref:System.Type.GetType%28System.String%29> method returns `null`.</span></span> <span data-ttu-id="6cdc9-2283">Nie zostanie zgłoszony wyjątek.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2283">It does not throw an exception.</span></span> <span data-ttu-id="6cdc9-2284">Do kontrolowania tego, czy wyjątek jest generowany, wywołania przeciążenia <xref:System.Type.GetType%2A> metody, która ma `throwOnError` parametru.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2284">To control whether an exception is thrown, call an overload of the <xref:System.Type.GetType%2A> method that has a `throwOnError` parameter.</span></span>  
  
 <span data-ttu-id="6cdc9-2285"><xref:System.Type.GetType%2A> działa tylko na zestawy, ładowane z dysku.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2285"><xref:System.Type.GetType%2A> only works on assemblies loaded from disk.</span></span> <span data-ttu-id="6cdc9-2286">Jeśli wywołasz <xref:System.Type.GetType%2A> do wyszukania w typ zdefiniowany w zestawie dynamicznym zdefiniowane przy użyciu <xref:System.Reflection.Emit> usług, możesz otrzymać niespójne zachowanie.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2286">If you call <xref:System.Type.GetType%2A> to look up a type defined in a dynamic assembly defined using the <xref:System.Reflection.Emit> services, you might get inconsistent behavior.</span></span> <span data-ttu-id="6cdc9-2287">Zachowanie zależy od tego, czy zestaw dynamiczny jest trwała, oznacza to, utworzony za pomocą `RunAndSave` lub `Save` dostępu tryby <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2287">The behavior depends on whether the dynamic assembly is persistent, that is, created using the `RunAndSave` or `Save` access modes of the <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> enumeration.</span></span> <span data-ttu-id="6cdc9-2288">Jeśli zestaw dynamiczny jest trwały i został zapisany na dysku przed `GetType` jest wywoływana, moduł ładujący wyszukuje zestaw zapisane na dysku, ładuje tego zestawu i pobiera typ z tego zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2288">If the dynamic assembly is persistent and has been written to disk before `GetType` is called, the loader finds the saved assembly on disk, loads that assembly, and retrieves the type from that assembly.</span></span> <span data-ttu-id="6cdc9-2289">Jeśli zestaw nie został zapisany na dysku po `GetType` jest wywoływana metoda zwraca `null`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2289">If the assembly has not been saved to disk when `GetType` is called, the method returns `null`.</span></span> <span data-ttu-id="6cdc9-2290">`GetType` nie rozpoznaje przejściowy dynamicznych zestawów; Dlatego wywołanie `GetType` można pobrać typu na przejściowy zwraca zestaw dynamiczny `null`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2290">`GetType` does not understand transient dynamic assemblies; therefore, calling `GetType` to retrieve a type in a transient dynamic assembly returns `null`.</span></span>  
  
 <span data-ttu-id="6cdc9-2291">Aby użyć `GetType` na modułu dynamicznego subskrybować <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> zdarzenia i wywołania `GetType` przed zapisaniem.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2291">To use `GetType` on a dynamic module, subscribe to the <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> event and call `GetType` before saving.</span></span> <span data-ttu-id="6cdc9-2292">W przeciwnym razie otrzymasz dwie kopie zestawu w pamięci.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2292">Otherwise, you will get two copies of the assembly in memory.</span></span>  
  
 <span data-ttu-id="6cdc9-2293">W poniższej tabeli przedstawiono, jakie elementy członkowskie klasy podstawowej są zwracane przez `Get` metody uwzględnianiem typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2293">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="6cdc9-2294">Typ elementu członkowskiego</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2294">Member Type</span></span>|<span data-ttu-id="6cdc9-2295">Static</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2295">Static</span></span>|<span data-ttu-id="6cdc9-2296">Niestatyczna</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2296">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="6cdc9-2297">Konstruktor</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2297">Constructor</span></span>|<span data-ttu-id="6cdc9-2298">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2298">No</span></span>|<span data-ttu-id="6cdc9-2299">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2299">No</span></span>|  
|<span data-ttu-id="6cdc9-2300">Pole</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2300">Field</span></span>|<span data-ttu-id="6cdc9-2301">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2301">No</span></span>|<span data-ttu-id="6cdc9-2302">Tak.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2302">Yes.</span></span> <span data-ttu-id="6cdc9-2303">Pole jest zawsze ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2303">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6cdc9-2304">Zdarzenie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2304">Event</span></span>|<span data-ttu-id="6cdc9-2305">Nie dotyczy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2305">Not applicable</span></span>|<span data-ttu-id="6cdc9-2306">Zasadą systemu typu jest to, że dziedziczenie jest takie samo, jak w przypadku metod, które implementują właściwość.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2306">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6cdc9-2307">Odbicie traktuje właściwości jako ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2307">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-2308">Patrz Uwaga 2 poniżej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2308">See note 2 below.</span></span>|  
|<span data-ttu-id="6cdc9-2309">Metoda</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2309">Method</span></span>|<span data-ttu-id="6cdc9-2310">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2310">No</span></span>|<span data-ttu-id="6cdc9-2311">Tak.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2311">Yes.</span></span> <span data-ttu-id="6cdc9-2312">Metodą (zarówno wirtualną, jak i niewirtualną) może być ukrycie przez nazwę lub przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2312">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6cdc9-2313">Typu zagnieżdżony</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2313">Nested Type</span></span>|<span data-ttu-id="6cdc9-2314">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2314">No</span></span>|<span data-ttu-id="6cdc9-2315">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2315">No</span></span>|  
|<span data-ttu-id="6cdc9-2316">Właściwość</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2316">Property</span></span>|<span data-ttu-id="6cdc9-2317">Nie dotyczy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2317">Not applicable</span></span>|<span data-ttu-id="6cdc9-2318">Zasadą systemu typu jest to, że dziedziczenie jest takie samo, jak w przypadku metod, które implementują właściwość.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2318">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6cdc9-2319">Odbicie traktuje właściwości jako ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2319">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-2320">Patrz Uwaga 2 poniżej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2320">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="6cdc9-2321">Ukrycie przez nazwę i podpis dotyczy wszystkich części podpisu, w tym modyfikatorów niestandardowych, zwraca typy, typy parametrów, wartowników i niezarządzane konwencje wywoływania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2321">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="6cdc9-2322">To jest porównanie binarne.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2322">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="6cdc9-2323">W celu odbicia właściwości i zdarzenia są ukrywane przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2323">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-2324">Jeśli istnieje właściwość z akcesorem pobierania i ustawiania w klasie bazowej, ale odziedziczona klasa ma tylko akcesor pobierania, właściwość klasy odziedziczonej ukrywa właściwości klasy bazowej, a nie można uzyskać dostępu do metody ustawiającej w klasie bazowej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2324">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="6cdc9-2325">Atrybuty niestandardowe nie są częścią wspólnego typu systemowego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2325">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="6cdc9-2326">Tablic lub typów modelu COM nie są wyszukiwane chyba, że już zostały załadowane do tabeli dostępnych klas.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2326">Arrays or COM types are not searched for unless they have already been loaded into the table of available classes.</span></span>  
  
 <span data-ttu-id="6cdc9-2327">`typeName` może być nazwa typu kwalifikowana przez jego przestrzeń nazw lub kwalifikowaną dla zestawu, która zawiera nazwę specyfikacja nazwy zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2327">`typeName` can be the type name qualified by its namespace or an assembly-qualified name that includes an assembly name specification.</span></span> <span data-ttu-id="6cdc9-2328">Zobacz <xref:System.Type.AssemblyQualifiedName%2A>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2328">See <xref:System.Type.AssemblyQualifiedName%2A>.</span></span>  
  
 <span data-ttu-id="6cdc9-2329">Jeśli `typeName` obejmuje przestrzeń nazw, ale nie nazwę zestawu, Metoda ta wyszukuje tylko do obiektu wywołującego zestawu i Mscorlib.dll, w tej kolejności.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2329">If `typeName` includes the namespace but not the assembly name, this method searches only the calling object's assembly and Mscorlib.dll, in that order.</span></span> <span data-ttu-id="6cdc9-2330">Jeśli typeName jest w pełni kwalifikowaną nazwą zestawu częściowego lub pełny, Metoda ta wyszukuje w określonym zestawie.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2330">If typeName is fully qualified with the partial or complete assembly name, this method searches in the specified assembly.</span></span> <span data-ttu-id="6cdc9-2331">Jeśli zestaw ma silną nazwą, wymagana jest nazwa kompletny zestaw.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2331">If the assembly has a strong name, a complete assembly name is required.</span></span>  
  
 <span data-ttu-id="6cdc9-2332"><xref:System.Type.AssemblyQualifiedName%2A> Właściwość zwraca w pełni kwalifikowaną nazwę typu w tym typów zagnieżdżonych, nazwa zestawu i argumenty typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2332">The <xref:System.Type.AssemblyQualifiedName%2A> property returns a fully qualified type name including nested types, the assembly name, and generic type arguments.</span></span> <span data-ttu-id="6cdc9-2333">Wszystkie kompilatory, które obsługują aparat plików wykonywalnych języka wspólnego, w trakcie wykonania wyemitują prostą nazwę klasy zagnieżdżonej, a odbicie podczas kwerendy stworzy zniekształcone nazwy zgodnie z następującymi konwencjami.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2333">All compilers that support the common language runtime will emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-2334">W wersji 2.0 środowiska .NET Framework architektura procesora jest dodawana do tożsamości zestawu i może być określona jako część zestawu ciągu nazw.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2334">In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.</span></span> <span data-ttu-id="6cdc9-2335">Na przykład "ProcessorArchitecture = msil".</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2335">For example, "ProcessorArchitecture=msil".</span></span> <span data-ttu-id="6cdc9-2336">Jednak nie są uwzględnione w ciągu zwracanego przez <xref:System.Type.AssemblyQualifiedName%2A> właściwość ze względu na zgodność.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2336">However, it is not included in the string returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, for compatibility reasons.</span></span> <span data-ttu-id="6cdc9-2337">Można również załadować typów, tworząc <xref:System.Reflection.AssemblyName> obiektu i przekazywania go do odpowiedniego przeciążenia <xref:System.Reflection.Assembly.Load%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2337">You can also load types by creating an <xref:System.Reflection.AssemblyName> object and passing it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method.</span></span> <span data-ttu-id="6cdc9-2338">Następnie można użyć <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> metodę, aby załadować typów z zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2338">You can then use the <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> method to load types from the assembly.</span></span> <span data-ttu-id="6cdc9-2339">Zobacz też <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2339">See also <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span></span>  
  
|<span data-ttu-id="6cdc9-2340">Ogranicznik</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2340">Delimiter</span></span>|<span data-ttu-id="6cdc9-2341">Znaczenie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2341">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="6cdc9-2342">Ukośnik odwrotny (\\)</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2342">Backslash (\\)</span></span>|<span data-ttu-id="6cdc9-2343">Znak ucieczki.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2343">Escape character.</span></span>|  
|<span data-ttu-id="6cdc9-2344">Początkowych (')</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2344">Backtick (\`)</span></span>|<span data-ttu-id="6cdc9-2345">Poprzedza co najmniej jedną cyfrę reprezentującą liczbę parametrów typu, znajduje się na końcu nazwy typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2345">Precedes one or more digits representing the number of type parameters, located at the end of the name of a generic type.</span></span>|  
|<span data-ttu-id="6cdc9-2346">Nawiasy kwadratowe ([])</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2346">Brackets ([])</span></span>|<span data-ttu-id="6cdc9-2347">Ujmij listy argumentów typu rodzajowego, aby uzyskać skonstruowany typ rodzajowy; na liście argumentów typu należy ująć typu kwalifikowanego zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2347">Enclose a generic type argument list, for a constructed generic type; within a type argument list, enclose an assembly-qualified type.</span></span>|  
|<span data-ttu-id="6cdc9-2348">Przecinek (,)</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2348">Comma (,)</span></span>|<span data-ttu-id="6cdc9-2349">Poprzedza nazwę zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2349">Precedes the Assembly name.</span></span>|  
|<span data-ttu-id="6cdc9-2350">Kropka (.)</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2350">Period (.)</span></span>|<span data-ttu-id="6cdc9-2351">Wskazuje przestrzeń nazw identyfikatorów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2351">Denotes namespace identifiers.</span></span>|  
|<span data-ttu-id="6cdc9-2352">Znak plus (+)</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2352">Plus sign (+)</span></span>|<span data-ttu-id="6cdc9-2353">Poprzedza klasę zagnieżdżoną.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2353">Precedes a nested class.</span></span>|  
  
 <span data-ttu-id="6cdc9-2354">Na przykład w pełni kwalifikowana nazwa klasy może wyglądać następująco:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2354">For example, the fully qualified name for a class might look like this:</span></span>  
  
```  
TopNamespace.SubNameSpace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="6cdc9-2355">Jeśli przestrzeń nazw zostały TopNamespace.Sub+Namespace, a następnie ciąg musi poprzedzać znak plus (+) przy użyciu znaku ucieczki (\\), aby zapobiec interpretacji jako separator zagnieżdżenia.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2355">If the namespace were TopNamespace.Sub+Namespace, then the string would have to precede the plus sign (+) with an escape character (\\) to prevent it from being interpreted as a nesting separator.</span></span> <span data-ttu-id="6cdc9-2356">Odbicie emituje tego ciągu w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2356">Reflection emits this string as follows:</span></span>  
  
```  
TopNamespace.Sub\+Namespace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="6cdc9-2357">A "++" staje się "\\+\\+", a "\\"staje się"\\\\".</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2357">A "++" becomes "\\+\\+", and a "\\" becomes "\\\\".</span></span>  
  
 <span data-ttu-id="6cdc9-2358">Ta nazwa kwalifikowana może utrwalona i później używana do ładowania <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2358">This qualified name can be persisted and later used to load the <xref:System.Type>.</span></span> <span data-ttu-id="6cdc9-2359">Aby wyszukać i załadować <xref:System.Type>, użyj <xref:System.Type.GetType%2A> albo z typem nazwy tylko lub nazwą kwalifikowaną typu zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2359">To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name.</span></span> <span data-ttu-id="6cdc9-2360"><xref:System.Type.GetType%2A> z typem nazwy tylko będzie szukać <xref:System.Type> w zestawie wywołującego, a następnie w zestawie systemowym.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2360"><xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly.</span></span> <span data-ttu-id="6cdc9-2361"><xref:System.Type.GetType%2A> z zestawem kwalifikowanej nazwy typu będzie szukać <xref:System.Type> w każdym zestawie.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2361"><xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.</span></span>  
  
 <span data-ttu-id="6cdc9-2362">Nazwy typów mogą obejmować końcowe znaki, które wyznaczają dodatkowe informacje dotyczące typu, na przykład to, czy typ jest typem odwołania, typem wskaźnika lub typem tablicowym.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2362">Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type.</span></span> <span data-ttu-id="6cdc9-2363">Aby pobrać, wpisz nazwę bez tych znaków końcowych, należy użyć `t.GetElementType().ToString()`, gdzie `t` jest typem.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2363">To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where `t` is the type.</span></span>  
  
 <span data-ttu-id="6cdc9-2364">Spacje są istotne we wszystkich składnikach nazwy z wyjątkiem nazwy zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2364">Spaces are relevant in all type name components except the assembly name.</span></span> <span data-ttu-id="6cdc9-2365">Spacje przed separatorem w nazwie zestawu ',' są istotne, ale spacje po separatorze ',' są ignorowane.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2365">In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.</span></span>  
  
 <span data-ttu-id="6cdc9-2366">Nazwa typu ogólnego kończy się ciągiem początkowych (\`) następują cyfry reprezentujący liczbę wszystkich argumentów typu rodzajowego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2366">The name of a generic type ends with a backtick (\`) followed by digits representing the number of generic type arguments.</span></span> <span data-ttu-id="6cdc9-2367">Celem tego przekręcaniu nazwy jest umożliwienie kompilatory do obsługi typów ogólnych o takiej samej nazwie, ale z różną liczbę parametrów typu, w tym samym zakresie.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2367">The purpose of this name mangling is to allow compilers to support generic types with the same name but with different numbers of type parameters, occurring in the same scope.</span></span> <span data-ttu-id="6cdc9-2368">Na przykład odbicia zwraca zniekształcone nazwy `Tuple`1` and `krotki`2` z metod ogólnych `Tuple(Of T)` i `Tuple(Of T0, T1)` w języku Visual Basic lub `Tuple<T>` i krotki`\<T0, T1>` w języku Visual C#.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2368">For example, reflection returns the mangled names `Tuple`1` and `Tuple`2` from the generic methods `Tuple(Of T)` and `Tuple(Of T0, T1)` in Visual Basic, or `Tuple<T>` and Tuple`\<T0, T1>` in Visual C#.</span></span>  
  
 <span data-ttu-id="6cdc9-2369">Dla typów ogólnych lista argumentów typu jest ujęty w nawiasy i argumenty typu są oddzielone przecinkami.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2369">For generic types, the type argument list is enclosed in brackets, and the type arguments are separated by commas.</span></span> <span data-ttu-id="6cdc9-2370">Na przykład ogólny <xref:System.Collections.Generic.Dictionary%602> ma dwa parametry typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2370">For example, a generic <xref:System.Collections.Generic.Dictionary%602> has two type parameters.</span></span> <span data-ttu-id="6cdc9-2371">A <xref:System.Collections.Generic.Dictionary%602> z `MyType` przy użyciu kluczy typu <xref:System.String> może być reprezentowany w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2371">A <xref:System.Collections.Generic.Dictionary%602> of `MyType` with keys of type <xref:System.String> might be represented as follows:</span></span>  
  
```  
System.Collections.Generic.Dictionary`2[System.String,MyType]  
```  
  
 <span data-ttu-id="6cdc9-2372">Aby określić typu kwalifikowanego zestawu w obrębie listy argumentów typu, należy ująć typu kwalifikowanego zestawu w nawiasy kwadratowe.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2372">To specify an assembly-qualified type within a type argument list, enclose the assembly-qualified type within brackets.</span></span> <span data-ttu-id="6cdc9-2373">W przeciwnym razie przecinki oddzielające części nazwy kwalifikowanej zestawu są interpretowane jako rozdzielający argumentów typu dodatkowe.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2373">Otherwise, the commas that separate the parts of the assembly-qualified name are interpreted as delimiting additional type arguments.</span></span> <span data-ttu-id="6cdc9-2374">Na przykład <xref:System.Collections.Generic.Dictionary%602> z `MyType` fromMyAssembly.dll przy użyciu kluczy typu <xref:System.String>, może być następujący:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2374">For example, a <xref:System.Collections.Generic.Dictionary%602> of `MyType` fromMyAssembly.dll, with keys of type <xref:System.String>, might be specified as follows:</span></span>  
  
```  
Type.GetType("System.Collections.Generic.Dictionary`2[System.String,[MyType,MyAssembly]]")  
```  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-2375">Typu kwalifikowanego zestawu mogą być ujęte w nawiasy kwadratowe, tylko wtedy, gdy pojawia się on w obrębie lista parametrów typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2375">An assembly-qualified type can be enclosed in brackets only when it appears within a type parameter list.</span></span> <span data-ttu-id="6cdc9-2376">Reguły dotyczące wyszukiwania zestawów dla typów kwalifikowana i niekwalifikowanej w liście parametrów typu są takie same jak reguły dla typów nierodzajowymi kwalifikowana i niekwalifikowane.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2376">The rules for searching assemblies for qualified and unqualified types in type parameter lists are the same as the rules for qualified and unqualified nongeneric types.</span></span>  
  
 <span data-ttu-id="6cdc9-2377">Typy dopuszczające wartości zerowe są w wyjątkowym przypadku okna typów ogólnych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2377">Nullable types are a special case of generic types.</span></span> <span data-ttu-id="6cdc9-2378">Na przykład dopuszczający wartości null <xref:System.Int32> jest reprezentowany przez ciąg "System.Nullable'1[System.Int32]".</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2378">For example, a nullable <xref:System.Int32> is represented by the string "System.Nullable\`1[System.Int32]".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-2379">W języku C#, C++ i Visual Basic można również uzyskać przy użyciu operatorów typu typy dopuszczające wartości null.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2379">In C#, C++, and Visual Basic you can also get nullable types using type operators.</span></span> <span data-ttu-id="6cdc9-2380">Na przykład nullable <xref:System.Boolean> typ zwracany przez `typeof(Nullable<bool>)` w języku C#, `Nullable<Boolean>::typeid` w języku C++ i przez `GetType(Nullable(Of Boolean))` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2380">For example, the nullable <xref:System.Boolean> type is returned by `typeof(Nullable<bool>)` in C#, by `Nullable<Boolean>::typeid` in C++, and by `GetType(Nullable(Of Boolean))` in Visual Basic.</span></span>  
  
 <span data-ttu-id="6cdc9-2381">W poniższej tabeli przedstawiono składnię, możesz za pomocą `GetType` dla różnych typów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2381">The following table shows the syntax you use with `GetType` for various types.</span></span>  
  
|<span data-ttu-id="6cdc9-2382">Aby uzyskać</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2382">To Get</span></span>|<span data-ttu-id="6cdc9-2383">Zastosowanie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2383">Use</span></span>|  
|------------|---------|  
|<span data-ttu-id="6cdc9-2384">Dopuszczający wartości null <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="6cdc9-2384">A nullable <xref:System.Int32></span></span>|<span data-ttu-id="6cdc9-2385">`Type.GetType("System.Nullable`1[System.Int32]")\`</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2385">`Type.GetType("System.Nullable`1[System.Int32]")\`</span></span>|  
|<span data-ttu-id="6cdc9-2386">Niezarządzany wskaźnik do `MyType`</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2386">An unmanaged pointer to `MyType`</span></span>|`Type.GetType("MyType*")`|  
|<span data-ttu-id="6cdc9-2387">Niezarządzany wskaźnik do wskaźnika do `MyType`</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2387">An unmanaged pointer to a pointer to `MyType`</span></span>|`Type.GetType("MyType**")`|  
|<span data-ttu-id="6cdc9-2388">Zarządzane wskaźnik lub odwołanie do `MyType`</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2388">A managed pointer or reference to `MyType`</span></span>|<span data-ttu-id="6cdc9-2389">`Type.GetType("MyType&")`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2389">`Type.GetType("MyType&")`.</span></span> <span data-ttu-id="6cdc9-2390">Należy pamiętać, że w przeciwieństwie do wskaźników, odwołań są ograniczone do jednego poziomu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2390">Note that unlike pointers, references are limited to one level.</span></span>|  
|<span data-ttu-id="6cdc9-2391">Klasy nadrzędnej i zagnieżdżone klasy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2391">A parent class and a nested class</span></span>|`Type.GetType("MyParentClass+MyNestedClass")`|  
|<span data-ttu-id="6cdc9-2392">Jednowymiarowa tablica dolną granicę równą 0</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2392">A one-dimensional array with a lower bound of 0</span></span>|`Type.GetType("MyType[]")`|  
|<span data-ttu-id="6cdc9-2393">Jednowymiarowa tablica o nieznanych dolna granica</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2393">A one-dimensional array with an unknown lower bound</span></span>|`Type.GetType("MyType[*]")`|  
|<span data-ttu-id="6cdc9-2394">N wymiarową tablicą</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2394">An n-dimensional array</span></span>|<span data-ttu-id="6cdc9-2395">Przecinek (,) znajduje się wewnątrz nawiasów w sumie n-1 razy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2395">A comma (,) inside the brackets a total of n-1 times.</span></span> <span data-ttu-id="6cdc9-2396">Na przykład `System.Object[,,]` reprezentuje trójwymiarowym `Object` tablicy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2396">For example, `System.Object[,,]` represents a three-dimensional `Object` array.</span></span>|  
|<span data-ttu-id="6cdc9-2397">Tablica tablice jednowymiarowe</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2397">An array of one-dimensional arrays</span></span>|`Type.GetType("MyType[][]")`|  
|<span data-ttu-id="6cdc9-2398">Prostokątnej dwuwymiarowej tablicy przy użyciu nieznanego dolne granice</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2398">A rectangular two-dimensional array with unknown lower bounds</span></span>|`Type.GetType("MyType[,]")`|  
|<span data-ttu-id="6cdc9-2399">Typ ogólny z jednego typu argumentu</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2399">A generic type with one type argument</span></span>|<span data-ttu-id="6cdc9-2400">`Type.GetType("MyGenericType`1[MyType]")\`</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2400">`Type.GetType("MyGenericType`1[MyType]")\`</span></span>|  
|<span data-ttu-id="6cdc9-2401">Typ ogólny z dwoma argumentami typu</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2401">A generic type with two type arguments</span></span>|<span data-ttu-id="6cdc9-2402">`Type.GetType("MyGenericType`2[MyType,AnotherType]")\`</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2402">`Type.GetType("MyGenericType`2[MyType,AnotherType]")\`</span></span>|  
|<span data-ttu-id="6cdc9-2403">Typ ogólny z dwóch argumentów typu kwalifikowanego zestawu</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2403">A generic type with two assembly-qualified type arguments</span></span>|<span data-ttu-id="6cdc9-2404">`Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")"</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2404">`Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")\`</span></span>|  
|<span data-ttu-id="6cdc9-2405">Kwalifikowanych dla zestawu typu ogólnego z nieprawidłowym argumentem typu kwalifikowanego zestawu</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2405">An assembly-qualified generic type with an assembly-qualified type argument</span></span>|<span data-ttu-id="6cdc9-2406">`Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")"</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2406">`Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")\`</span></span>|  
|<span data-ttu-id="6cdc9-2407">Typ ogólny, którego argument typu jest typ ogólny z dwoma argumentami typu</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2407">A generic type whose type argument is a generic type with two type arguments</span></span>|<span data-ttu-id="6cdc9-2408">`Type.GetType("MyGenericType`[AnotherGenericType 1`2[MyType,AnotherType]]")`</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2408">`Type.GetType("MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]")`</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-2409">Poniższy przykład pobiera typ `System.Int32` i używa tego typu obiektu do wyświetlenia <xref:System.Type.FullName%2A> właściwość `System.Int32`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2409">The following example retrieves the type of `System.Int32` and uses that type object to display the <xref:System.Type.FullName%2A> property of `System.Int32`.</span></span>  
  
 [!code-cpp[Type_GetType#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetType/CPP/type_gettype.cpp#1)]
 [!code-csharp[Type_GetType#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetType/CS/type_gettype.cs#1)]
 [!code-vb[Type_GetType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetType/VB/type_gettype.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-2410">
            <paramref name="typeName" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2410">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="6cdc9-2411">Inicjator klasy jest wywoływany i zgłasza wyjątek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2411">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6cdc9-2412">
            <paramref name="typeName" /> reprezentuje typ ogólny, który jest typem wskaźnika <see langword="ByRef" /> typu, lub <see cref="T:System.Void" /> jako jeden z argumentów typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2412">
              <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          </span>
          <span data-ttu-id="6cdc9-2413">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2413">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2414">
            <paramref name="typeName" /> reprezentuje typ ogólny, który ma niepoprawną liczbę argumentów typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2414">
              <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          </span>
          <span data-ttu-id="6cdc9-2415">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2415">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2416">
            <paramref name="typeName" /> reprezentuje typ ogólny i jeden z argumentów typu nie spełniają ograniczeń dla odpowiedniego parametru typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2416">
              <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="6cdc9-2417">
            <paramref name="typeName" /> reprezentuje tablicę <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2417">
              <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="6cdc9-2418">W <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> lub <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, przechwycić wyjątek klasy bazowej <see cref="T:System.IO.IOException" />, a zamiast tego.</span>
              <span class="sxs-lookup">
                <span data-stu-id="6cdc9-2418">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.IO.IOException" />, instead.</span>
              </span>
            </para>
          </block>
          <span data-ttu-id="6cdc9-2419">Zestaw lub jeden z jego elementów zależnych został znaleziony, ale nie można go załadować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2419">The assembly or one of its dependencies was found, but could not be loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="6cdc9-2420">Zestaw lub jeden z jego elementów zależnych nie są prawidłowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2420">The assembly or one of its dependencies is not valid.</span>
          </span>
          <span data-ttu-id="6cdc9-2421">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2421">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2422">W wersji 2.0 lub nowsza aparatu plików wykonywalnych języka jest aktualnie załadowana, a zestaw został skompilowany przy użyciu nowszej wersji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2422">Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.TypeLoadException" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="M:System.Reflection.Assembly.GetAssembly(System.Type)" />
        <altmember cref="M:System.Reflection.Assembly.GetType(System.String)" />
        <altmember cref="T:System.Reflection.AssemblyName" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md">
          <span data-ttu-id="6cdc9-2423">Określanie w pełni kwalifikowanych nazw typów</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2423">Specifying Fully Qualified Type Names</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, bool throwOnError);" />
      <MemberSignature Language="F#" Value="static member GetType : string * bool -&gt; Type" Usage="System.Type.GetType (typeName, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="6cdc9-2424">Nazwa kwalifikowanego dla zestawu typu można pobrać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2424">The assembly-qualified name of the type to get.</span>
          </span>
          <span data-ttu-id="6cdc9-2425">Zobacz <see cref="P:System.Type.AssemblyQualifiedName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2425">See <see cref="P:System.Type.AssemblyQualifiedName" />.</span>
          </span>
          <span data-ttu-id="6cdc9-2426">Jeśli typ jest zawierający obecnie wykonywany zestaw lub biblioteki Mscorlib.dll, wystarczy podać nazwę typu kwalifikowana przez jego przestrzeń nazw.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2426">If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="6cdc9-2427">
            <see langword="true" /> Aby zgłosić wyjątek, jeśli nie można odnaleźć typu; <see langword="false" /> do zwrócenia <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2427">
              <see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cdc9-2428">Określanie <see langword="false" /> powoduje również pominięcie niektórych warunków wyjątków, ale nie wszystkie z nich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2428">Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span>
          </span>
          <span data-ttu-id="6cdc9-2429">Zobacz sekcję Wyjątki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2429">See the Exceptions section.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-2430">Pobiera <see cref="T:System.Type" /> o określonej nazwie, wykonując wyszukiwanie i określeniu, czy zgłosić wyjątek, jeśli typ nie zostanie znaleziony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2430">Gets the <see cref="T:System.Type" /> with the specified name, performing a case-sensitive search and specifying whether to throw an exception if the type is not found.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-2431">Typ o określonej nazwie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2431">The type with the specified name.</span>
          </span>
          <span data-ttu-id="6cdc9-2432">Jeśli typ nie zostanie znaleziony, <paramref name="throwOnError" /> parametr określa, czy <see langword="null" /> zwracany jest lub zostanie zgłoszony wyjątek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2432">If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span>
          </span>
          <span data-ttu-id="6cdc9-2433">W niektórych przypadkach występuje wyjątek niezależnie od wartości <paramref name="throwOnError" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2433">In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />.</span>
          </span>
          <span data-ttu-id="6cdc9-2434">Zobacz sekcję Wyjątki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2434">See the Exceptions section.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-2435">Możesz użyć <xref:System.Type.GetType%2A> metodę, aby uzyskać <xref:System.Type> obiektu dla typu w innym zestawie, jeśli znasz jego nazwę kwalifikowaną dla zestawu, który można uzyskać z <xref:System.Type.AssemblyQualifiedName>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2435">You can use the <xref:System.Type.GetType%2A> method to obtain a <xref:System.Type> object for a type in another assembly, if you know its assembly-qualified name which can be obtained from <xref:System.Type.AssemblyQualifiedName>.</span></span> <span data-ttu-id="6cdc9-2436"><xref:System.Type.GetType%2A> powoduje, że ładowanie zestawu określonego w `typeName`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2436"><xref:System.Type.GetType%2A> causes loading of the assembly specified in `typeName`.</span></span> <span data-ttu-id="6cdc9-2437">Można również załadować zestawu przy użyciu <xref:System.Reflection.Assembly.Load%2A> metody, a następnie użyj <xref:System.Type.GetType%2A> lub <xref:System.Reflection.Assembly.GetTypes%2A> metody <xref:System.Reflection.Assembly> klasy, aby uzyskać <xref:System.Type> obiektów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2437">You can also load an assembly using the <xref:System.Reflection.Assembly.Load%2A> method, and then use the <xref:System.Type.GetType%2A> or <xref:System.Reflection.Assembly.GetTypes%2A> methods of the <xref:System.Reflection.Assembly> class to get <xref:System.Type> objects.</span></span> <span data-ttu-id="6cdc9-2438">Jeśli typ znajduje się w zestawie znane w czasie kompilacji program, jest bardziej wydajne, aby użyć `typeof` w języku C# <xref:System.Type.GetType%2A> w języku Visual Basic lub `typeid` w języku C++.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2438">If a type is in an assembly known to your program at compile time, it is more efficient to use `typeof` in C#, <xref:System.Type.GetType%2A> in Visual Basic, or `typeid` in C++.</span></span>  
  
 <span data-ttu-id="6cdc9-2439">`GetType` działa tylko na zestawy, ładowane z dysku.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2439">`GetType` only works on assemblies loaded from disk.</span></span> <span data-ttu-id="6cdc9-2440">Jeśli wywołasz `GetType` do wyszukania w typ zdefiniowany w zestawie dynamicznym zdefiniowane przy użyciu <xref:System.Reflection.Emit> usług, możesz otrzymać niespójne zachowanie.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2440">If you call `GetType` to look up a type defined in a dynamic assembly defined using the <xref:System.Reflection.Emit> services, you might get inconsistent behavior.</span></span> <span data-ttu-id="6cdc9-2441">Zachowanie zależy od tego, czy zestaw dynamiczny jest trwała, oznacza to, utworzony za pomocą `RunAndSave` lub `Save` dostępu tryby <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2441">The behavior depends on whether the dynamic assembly is persistent, that is, created using the `RunAndSave` or `Save` access modes of the <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> enumeration.</span></span> <span data-ttu-id="6cdc9-2442">Jeśli zestaw dynamiczny jest trwały i został zapisany na dysku przed `GetType` jest wywoływana, moduł ładujący wyszukuje zestaw zapisane na dysku, ładuje tego zestawu i pobiera typ z tego zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2442">If the dynamic assembly is persistent and has been written to disk before `GetType` is called, the loader finds the saved assembly on disk, loads that assembly, and retrieves the type from that assembly.</span></span> <span data-ttu-id="6cdc9-2443">Jeśli zestaw nie został zapisany na dysku po `GetType` jest wywoływana metoda zwraca `null`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2443">If the assembly has not been saved to disk when `GetType` is called, the method returns `null`.</span></span> <span data-ttu-id="6cdc9-2444">`GetType` nie rozpoznaje przejściowy dynamicznych zestawów; Dlatego wywołanie `GetType` można pobrać typu na przejściowy zwraca zestaw dynamiczny `null`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2444">`GetType` does not understand transient dynamic assemblies; therefore, calling `GetType` to retrieve a type in a transient dynamic assembly returns `null`.</span></span>  
  
 <span data-ttu-id="6cdc9-2445">Aby użyć `GetType` na modułu dynamicznego subskrybować <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> zdarzenia i wywołania `GetType` przed zapisaniem.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2445">To use `GetType` on a dynamic module, subscribe to the <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> event and call `GetType` before saving.</span></span> <span data-ttu-id="6cdc9-2446">W przeciwnym razie otrzymasz dwie kopie zestawu w pamięci.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2446">Otherwise, you will get two copies of the assembly in memory.</span></span>  
  
 <span data-ttu-id="6cdc9-2447">`throwOnError` Parametr określa, co się stanie, gdy typ nie zostanie znaleziony i powoduje również pominięcie niektórych warunków wyjątków, zgodnie z opisem w sekcji wyjątki.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2447">The `throwOnError` parameter specifies what happens when the type is not found, and also suppresses certain other exception conditions, as described in the Exceptions section.</span></span> <span data-ttu-id="6cdc9-2448">Niektóre wyjątki są zgłaszane niezależnie od wartości `throwOnError`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2448">Some exceptions are thrown regardless of the value of `throwOnError`.</span></span> <span data-ttu-id="6cdc9-2449">Na przykład, jeśli typ zostanie znaleziony, ale nie może zostać załadowany <xref:System.TypeLoadException> jest zgłaszany nawet wtedy, gdy `throwOnError` jest `false`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2449">For example, if the type is found but cannot be loaded, a <xref:System.TypeLoadException> is thrown even if `throwOnError` is `false`.</span></span>  
  
 <span data-ttu-id="6cdc9-2450">W poniższej tabeli przedstawiono, jakie elementy członkowskie klasy podstawowej są zwracane przez `Get` metody uwzględnianiem typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2450">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="6cdc9-2451">Typ elementu członkowskiego</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2451">Member Type</span></span>|<span data-ttu-id="6cdc9-2452">Static</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2452">Static</span></span>|<span data-ttu-id="6cdc9-2453">Niestatyczna</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2453">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="6cdc9-2454">Konstruktor</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2454">Constructor</span></span>|<span data-ttu-id="6cdc9-2455">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2455">No</span></span>|<span data-ttu-id="6cdc9-2456">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2456">No</span></span>|  
|<span data-ttu-id="6cdc9-2457">Pole</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2457">Field</span></span>|<span data-ttu-id="6cdc9-2458">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2458">No</span></span>|<span data-ttu-id="6cdc9-2459">Tak.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2459">Yes.</span></span> <span data-ttu-id="6cdc9-2460">Pole jest zawsze ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2460">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6cdc9-2461">Zdarzenie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2461">Event</span></span>|<span data-ttu-id="6cdc9-2462">Nie dotyczy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2462">Not applicable</span></span>|<span data-ttu-id="6cdc9-2463">Zasadą systemu typu jest to, że dziedziczenie jest takie samo, jak w przypadku metod, które implementują właściwość.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2463">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6cdc9-2464">Odbicie traktuje właściwości jako ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2464">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-2465">Patrz Uwaga 2 poniżej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2465">See note 2 below.</span></span>|  
|<span data-ttu-id="6cdc9-2466">Metoda</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2466">Method</span></span>|<span data-ttu-id="6cdc9-2467">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2467">No</span></span>|<span data-ttu-id="6cdc9-2468">Tak.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2468">Yes.</span></span> <span data-ttu-id="6cdc9-2469">Metodą (zarówno wirtualną, jak i niewirtualną) może być ukrycie przez nazwę lub przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2469">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6cdc9-2470">Typu zagnieżdżony</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2470">Nested Type</span></span>|<span data-ttu-id="6cdc9-2471">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2471">No</span></span>|<span data-ttu-id="6cdc9-2472">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2472">No</span></span>|  
|<span data-ttu-id="6cdc9-2473">Właściwość</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2473">Property</span></span>|<span data-ttu-id="6cdc9-2474">Nie dotyczy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2474">Not applicable</span></span>|<span data-ttu-id="6cdc9-2475">Zasadą systemu typu jest to, że dziedziczenie jest takie samo, jak w przypadku metod, które implementują właściwość.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2475">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6cdc9-2476">Odbicie traktuje właściwości jako ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2476">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-2477">Patrz Uwaga 2 poniżej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2477">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="6cdc9-2478">Ukrycie przez nazwę i podpis dotyczy wszystkich części podpisu, w tym modyfikatorów niestandardowych, zwraca typy, typy parametrów, wartowników i niezarządzane konwencje wywoływania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2478">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="6cdc9-2479">To jest porównanie binarne.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2479">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="6cdc9-2480">W celu odbicia właściwości i zdarzenia są ukrywane przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2480">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-2481">Jeśli istnieje właściwość z akcesorem pobierania i ustawiania w klasie bazowej, ale odziedziczona klasa ma tylko akcesor pobierania, właściwość klasy odziedziczonej ukrywa właściwości klasy bazowej, a nie można uzyskać dostępu do metody ustawiającej w klasie bazowej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2481">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="6cdc9-2482">Atrybuty niestandardowe nie są częścią wspólnego typu systemowego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2482">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="6cdc9-2483">Tablic lub typów modelu COM nie są wyszukiwane chyba, że już zostały załadowane do tabeli dostępnych klas.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2483">Arrays or COM types are not searched for unless they have already been loaded into the table of available classes.</span></span>  
  
 <span data-ttu-id="6cdc9-2484">`typeName` może być nazwa typu kwalifikowana przez jego przestrzeń nazw lub kwalifikowaną dla zestawu, która zawiera nazwę specyfikacja nazwy zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2484">`typeName` can be the type name qualified by its namespace or an assembly-qualified name that includes an assembly name specification.</span></span> <span data-ttu-id="6cdc9-2485">Zobacz <xref:System.Type.AssemblyQualifiedName%2A>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2485">See <xref:System.Type.AssemblyQualifiedName%2A>.</span></span>  
  
 <span data-ttu-id="6cdc9-2486">Jeśli `typeName` obejmuje przestrzeń nazw, ale nie nazwę zestawu, Metoda ta wyszukuje tylko do obiektu wywołującego zestawu i Mscorlib.dll, w tej kolejności.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2486">If `typeName` includes the namespace but not the assembly name, this method searches only the calling object's assembly and Mscorlib.dll, in that order.</span></span> <span data-ttu-id="6cdc9-2487">Jeśli typeName jest w pełni kwalifikowaną nazwą zestawu częściowego lub pełny, Metoda ta wyszukuje w określonym zestawie.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2487">If typeName is fully qualified with the partial or complete assembly name, this method searches in the specified assembly.</span></span> <span data-ttu-id="6cdc9-2488">Jeśli zestaw ma silną nazwą, wymagana jest nazwa kompletny zestaw.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2488">If the assembly has a strong name, a complete assembly name is required.</span></span>  
  
 <span data-ttu-id="6cdc9-2489"><xref:System.Type.AssemblyQualifiedName%2A> Właściwość zwraca w pełni kwalifikowaną nazwę typu w tym typów zagnieżdżonych, nazwa zestawu i argumenty ogólne.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2489">The <xref:System.Type.AssemblyQualifiedName%2A> property returns a fully qualified type name including nested types, the assembly name, and generic arguments.</span></span> <span data-ttu-id="6cdc9-2490">Wszystkie kompilatory, które obsługują aparat plików wykonywalnych języka wspólnego, w trakcie wykonania wyemitują prostą nazwę klasy zagnieżdżonej, a odbicie podczas kwerendy stworzy zniekształcone nazwy zgodnie z następującymi konwencjami.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2490">All compilers that support the common language runtime will emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-2491">W wersji 2.0 środowiska .NET Framework architektura procesora jest dodawana do tożsamości zestawu i może być określona jako część zestawu ciągu nazw.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2491">In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.</span></span> <span data-ttu-id="6cdc9-2492">Na przykład "ProcessorArchitecture = msil".</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2492">For example, "ProcessorArchitecture=msil".</span></span> <span data-ttu-id="6cdc9-2493">Jednak nie są uwzględnione w ciągu zwracanego przez <xref:System.Type.AssemblyQualifiedName%2A> właściwość ze względu na zgodność.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2493">However, it is not included in the string returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, for compatibility reasons.</span></span> <span data-ttu-id="6cdc9-2494">Można również załadować typów, tworząc <xref:System.Reflection.AssemblyName> obiektu i przekazywania go do odpowiedniego przeciążenia <xref:System.Reflection.Assembly.Load%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2494">You can also load types by creating an <xref:System.Reflection.AssemblyName> object and passing it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method.</span></span> <span data-ttu-id="6cdc9-2495">Następnie można użyć <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> metodę, aby załadować typów z zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2495">You can then use the <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> method to load types from the assembly.</span></span> <span data-ttu-id="6cdc9-2496">Zobacz też <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2496">See also <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span></span>  
  
|<span data-ttu-id="6cdc9-2497">Ogranicznik</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2497">Delimiter</span></span>|<span data-ttu-id="6cdc9-2498">Znaczenie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2498">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="6cdc9-2499">Ukośnik odwrotny (\\)</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2499">Backslash (\\)</span></span>|<span data-ttu-id="6cdc9-2500">Znak ucieczki.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2500">Escape character.</span></span>|  
|<span data-ttu-id="6cdc9-2501">Początkowych (')</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2501">Backtick (\`)</span></span>|<span data-ttu-id="6cdc9-2502">Poprzedza co najmniej jedną cyfrę reprezentującą liczbę parametrów typu, znajduje się na końcu nazwy typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2502">Precedes one or more digits representing the number of type parameters, located at the end of the name of a generic type.</span></span>|  
|<span data-ttu-id="6cdc9-2503">Nawiasy kwadratowe ([])</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2503">Brackets ([])</span></span>|<span data-ttu-id="6cdc9-2504">Ujmij listy argumentów typu rodzajowego, aby uzyskać skonstruowany typ rodzajowy; na liście argumentów typu należy ująć typu kwalifikowanego zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2504">Enclose a generic type argument list, for a constructed generic type; within a type argument list, enclose an assembly-qualified type.</span></span>|  
|<span data-ttu-id="6cdc9-2505">Przecinek (,)</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2505">Comma (,)</span></span>|<span data-ttu-id="6cdc9-2506">Poprzedza nazwę zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2506">Precedes the Assembly name.</span></span>|  
|<span data-ttu-id="6cdc9-2507">Kropka (.)</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2507">Period (.)</span></span>|<span data-ttu-id="6cdc9-2508">Wskazuje przestrzeń nazw identyfikatorów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2508">Denotes namespace identifiers.</span></span>|  
|<span data-ttu-id="6cdc9-2509">Znak plus (+)</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2509">Plus sign (+)</span></span>|<span data-ttu-id="6cdc9-2510">Poprzedza klasę zagnieżdżoną.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2510">Precedes a nested class.</span></span>|  
  
 <span data-ttu-id="6cdc9-2511">Na przykład w pełni kwalifikowana nazwa klasy może wyglądać następująco:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2511">For example, the fully qualified name for a class might look like this:</span></span>  
  
```  
TopNamespace.SubNameSpace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="6cdc9-2512">Jeśli przestrzeń nazw zostały TopNamespace.Sub+Namespace, a następnie ciąg musi poprzedzać znak plus (+) przy użyciu znaku ucieczki (\\), aby zapobiec interpretacji jako separator zagnieżdżenia.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2512">If the namespace were TopNamespace.Sub+Namespace, then the string would have to precede the plus sign (+) with an escape character (\\) to prevent it from being interpreted as a nesting separator.</span></span> <span data-ttu-id="6cdc9-2513">Odbicie emituje tego ciągu w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2513">Reflection emits this string as follows:</span></span>  
  
```  
TopNamespace.Sub\+Namespace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="6cdc9-2514">A "++" staje się "\\+\\+", a "\\"staje się"\\\\".</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2514">A "++" becomes "\\+\\+", and a "\\" becomes "\\\\".</span></span>  
  
 <span data-ttu-id="6cdc9-2515">Ta nazwa kwalifikowana może utrwalona i później używana do ładowania <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2515">This qualified name can be persisted and later used to load the <xref:System.Type>.</span></span> <span data-ttu-id="6cdc9-2516">Aby wyszukać i załadować <xref:System.Type>, użyj <xref:System.Type.GetType%2A> albo z typem nazwy tylko lub nazwą kwalifikowaną typu zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2516">To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name.</span></span> <span data-ttu-id="6cdc9-2517"><xref:System.Type.GetType%2A> z typem nazwy tylko będzie szukać <xref:System.Type> w zestawie wywołującego, a następnie w zestawie systemowym.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2517"><xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly.</span></span> <span data-ttu-id="6cdc9-2518"><xref:System.Type.GetType%2A> z zestawem kwalifikowanej nazwy typu będzie szukać <xref:System.Type> w każdym zestawie.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2518"><xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.</span></span>  
  
 <span data-ttu-id="6cdc9-2519">Nazwy typów mogą obejmować końcowe znaki, które wyznaczają dodatkowe informacje dotyczące typu, na przykład to, czy typ jest typem odwołania, typem wskaźnika lub typem tablicowym.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2519">Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type.</span></span> <span data-ttu-id="6cdc9-2520">Aby pobrać, wpisz nazwę bez tych znaków końcowych, należy użyć `t.GetElementType().ToString()`, gdzie `t` jest typem.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2520">To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where `t` is the type.</span></span>  
  
 <span data-ttu-id="6cdc9-2521">Spacje są istotne we wszystkich składnikach nazwy z wyjątkiem nazwy zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2521">Spaces are relevant in all type name components except the assembly name.</span></span> <span data-ttu-id="6cdc9-2522">Spacje przed separatorem w nazwie zestawu ',' są istotne, ale spacje po separatorze ',' są ignorowane.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2522">In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.</span></span>  
  
 <span data-ttu-id="6cdc9-2523">Nazwa typu ogólnego kończy się ciągiem początkowych (\`) następują cyfry reprezentujący liczbę wszystkich argumentów typu rodzajowego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2523">The name of a generic type ends with a backtick (\`) followed by digits representing the number of generic type arguments.</span></span> <span data-ttu-id="6cdc9-2524">Celem tego przekręcaniu nazwy jest umożliwienie kompilatory do obsługi typów ogólnych o takiej samej nazwie, ale z różną liczbę parametrów typu, w tym samym zakresie.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2524">The purpose of this name mangling is to allow compilers to support generic types with the same name but with different numbers of type parameters, occurring in the same scope.</span></span> <span data-ttu-id="6cdc9-2525">Na przykład odbicia zwraca zniekształcone nazwy `Tuple`1` and `krotki`2` z metod ogólnych `Tuple(Of T)` i `Tuple(Of T0, T1)` w języku Visual Basic lub `Tuple<T>` i krotki`\<T0, T1>` w języku Visual C#.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2525">For example, reflection returns the mangled names `Tuple`1` and `Tuple`2` from the generic methods `Tuple(Of T)` and `Tuple(Of T0, T1)` in Visual Basic, or `Tuple<T>` and Tuple`\<T0, T1>` in Visual C#.</span></span>  
  
 <span data-ttu-id="6cdc9-2526">Dla typów ogólnych lista argumentów typu jest ujęty w nawiasy i argumenty typu są oddzielone przecinkami.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2526">For generic types, the type argument list is enclosed in brackets, and the type arguments are separated by commas.</span></span> <span data-ttu-id="6cdc9-2527">Na przykład ogólny <xref:System.Collections.Generic.Dictionary%602> ma dwa parametry typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2527">For example, a generic <xref:System.Collections.Generic.Dictionary%602> has two type parameters.</span></span> <span data-ttu-id="6cdc9-2528">A <xref:System.Collections.Generic.Dictionary%602> z `MyType` przy użyciu kluczy typu <xref:System.String> może być reprezentowany w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2528">A <xref:System.Collections.Generic.Dictionary%602> of `MyType` with keys of type <xref:System.String> might be represented as follows:</span></span>  
  
```  
System.Collections.Generic.Dictionary`2[System.String,MyType]  
```  
  
 <span data-ttu-id="6cdc9-2529">Aby określić typu kwalifikowanego zestawu w obrębie listy argumentów typu, należy ująć typu kwalifikowanego zestawu w nawiasy kwadratowe.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2529">To specify an assembly-qualified type within a type argument list, enclose the assembly-qualified type within brackets.</span></span> <span data-ttu-id="6cdc9-2530">W przeciwnym razie przecinki oddzielające części nazwy kwalifikowanej zestawu są interpretowane jako rozdzielający argumentów typu dodatkowe.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2530">Otherwise, the commas that separate the parts of the assembly-qualified name are interpreted as delimiting additional type arguments.</span></span> <span data-ttu-id="6cdc9-2531">Na przykład <xref:System.Collections.Generic.Dictionary%602> z `MyType` z MyAssembly.dll przy użyciu kluczy typu <xref:System.String>, może być następujący:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2531">For example, a <xref:System.Collections.Generic.Dictionary%602> of `MyType` from MyAssembly.dll, with keys of type <xref:System.String>, might be specified as follows:</span></span>  
  
```  
Type.GetType("System.Collections.Generic.Dictionary`2[System.String,[MyType,MyAssembly]]")  
```  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-2532">Typu kwalifikowanego zestawu mogą być ujęte w nawiasy kwadratowe, tylko wtedy, gdy pojawia się on w obrębie lista parametrów typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2532">An assembly-qualified type can be enclosed in brackets only when it appears within a type parameter list.</span></span> <span data-ttu-id="6cdc9-2533">Reguły dotyczące wyszukiwania zestawów dla typów kwalifikowana i niekwalifikowanej w liście parametrów typu są takie same jak reguły dla typów nierodzajowymi kwalifikowana i niekwalifikowane.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2533">The rules for searching assemblies for qualified and unqualified types in type parameter lists are the same as the rules for qualified and unqualified nongeneric types.</span></span>  
  
 <span data-ttu-id="6cdc9-2534">Typy dopuszczające wartości zerowe są w wyjątkowym przypadku okna typów ogólnych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2534">Nullable types are a special case of generic types.</span></span> <span data-ttu-id="6cdc9-2535">Na przykład dopuszczający wartości null <xref:System.Int32> jest reprezentowany przez ciąg "System.Nullable'1[System.Int32]".</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2535">For example, a nullable <xref:System.Int32> is represented by the string "System.Nullable\`1[System.Int32]".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-2536">W języku C#, C++ i Visual Basic można również uzyskać przy użyciu operatorów typu typy dopuszczające wartości null.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2536">In C#, C++, and Visual Basic you can also get nullable types using type operators.</span></span> <span data-ttu-id="6cdc9-2537">Na przykład nullable <xref:System.Boolean> typ zwracany przez `typeof(Nullable<bool>)` w języku C#, `Nullable<Boolean>::typeid` w języku C++ i przez `GetType(Nullable(Of Boolean))` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2537">For example, the nullable <xref:System.Boolean> type is returned by `typeof(Nullable<bool>)` in C#, by `Nullable<Boolean>::typeid` in C++, and by `GetType(Nullable(Of Boolean))` in Visual Basic.</span></span>  
  
 <span data-ttu-id="6cdc9-2538">W poniższej tabeli przedstawiono składnię, możesz za pomocą `GetType` dla różnych typów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2538">The following table shows the syntax you use with `GetType` for various types.</span></span>  
  
|<span data-ttu-id="6cdc9-2539">Aby uzyskać</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2539">To Get</span></span>|<span data-ttu-id="6cdc9-2540">Zastosowanie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2540">Use</span></span>|  
|------------|---------|  
|<span data-ttu-id="6cdc9-2541">Dopuszczający wartości null <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="6cdc9-2541">A nullable <xref:System.Int32></span></span>|<span data-ttu-id="6cdc9-2542">`Type.GetType("System.Nullable`1[System.Int32]")\`</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2542">`Type.GetType("System.Nullable`1[System.Int32]")\`</span></span>|  
|<span data-ttu-id="6cdc9-2543">Niezarządzany wskaźnik do `MyType`</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2543">An unmanaged pointer to `MyType`</span></span>|`Type.GetType("MyType*")`|  
|<span data-ttu-id="6cdc9-2544">Niezarządzany wskaźnik do wskaźnika do `MyType`</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2544">An unmanaged pointer to a pointer to `MyType`</span></span>|`Type.GetType("MyType**")`|  
|<span data-ttu-id="6cdc9-2545">Zarządzane wskaźnik lub odwołanie do `MyType`</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2545">A managed pointer or reference to `MyType`</span></span>|<span data-ttu-id="6cdc9-2546">`Type.GetType("MyType&")`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2546">`Type.GetType("MyType&")`.</span></span> <span data-ttu-id="6cdc9-2547">Należy pamiętać, że w przeciwieństwie do wskaźników, odwołań są ograniczone do jednego poziomu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2547">Note that unlike pointers, references are limited to one level.</span></span>|  
|<span data-ttu-id="6cdc9-2548">Klasy nadrzędnej i zagnieżdżone klasy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2548">A parent class and a nested class</span></span>|`Type.GetType("MyParentClass+MyNestedClass")`|  
|<span data-ttu-id="6cdc9-2549">Jednowymiarowa tablica dolną granicę równą 0</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2549">A one-dimensional array with a lower bound of 0</span></span>|`Type.GetType("MyArray[]")`|  
|<span data-ttu-id="6cdc9-2550">Jednowymiarowa tablica o nieznanych dolna granica</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2550">A one-dimensional array with an unknown lower bound</span></span>|`Type.GetType("MyArray[*]")`|  
|<span data-ttu-id="6cdc9-2551">N wymiarową tablicą</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2551">An n-dimensional array</span></span>|<span data-ttu-id="6cdc9-2552">Przecinek (,) znajduje się wewnątrz nawiasów w sumie n-1 razy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2552">A comma (,) inside the brackets a total of n-1 times.</span></span> <span data-ttu-id="6cdc9-2553">Na przykład `System.Object[,,]` reprezentuje trójwymiarowym `Object` tablicy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2553">For example, `System.Object[,,]` represents a three-dimensional `Object` array.</span></span>|  
|<span data-ttu-id="6cdc9-2554">Tablicy dwuwymiarowej tablicy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2554">A two-dimensional array's array</span></span>|`Type.GetType("MyArray[][]")`|  
|<span data-ttu-id="6cdc9-2555">Prostokątnej dwuwymiarowej tablicy przy użyciu nieznanego dolne granice</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2555">A rectangular two-dimensional array with unknown lower bounds</span></span>|`Type.GetType("MyArray[,]")`|  
|<span data-ttu-id="6cdc9-2556">Typ ogólny z jednego typu argumentu</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2556">A generic type with one type argument</span></span>|<span data-ttu-id="6cdc9-2557">`Type.GetType("MyGenericType`1[MyType]")\`</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2557">`Type.GetType("MyGenericType`1[MyType]")\`</span></span>|  
|<span data-ttu-id="6cdc9-2558">Typ ogólny z dwoma argumentami typu</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2558">A generic type with two type arguments</span></span>|<span data-ttu-id="6cdc9-2559">`Type.GetType("MyGenericType`2[MyType,AnotherType]")\`</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2559">`Type.GetType("MyGenericType`2[MyType,AnotherType]")\`</span></span>|  
|<span data-ttu-id="6cdc9-2560">Typ ogólny z dwóch argumentów typu kwalifikowanego zestawu</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2560">A generic type with two assembly-qualified type arguments</span></span>|<span data-ttu-id="6cdc9-2561">`Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")"</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2561">`Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")\`</span></span>|  
|<span data-ttu-id="6cdc9-2562">Kwalifikowanych dla zestawu typu ogólnego z nieprawidłowym argumentem typu kwalifikowanego zestawu</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2562">An assembly-qualified generic type with an assembly-qualified type argument</span></span>|<span data-ttu-id="6cdc9-2563">`Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")"</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2563">`Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")\`</span></span>|  
|<span data-ttu-id="6cdc9-2564">Typ ogólny, którego argument typu jest typ ogólny z dwoma argumentami typu</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2564">A generic type whose type argument is a generic type with two type arguments</span></span>|<span data-ttu-id="6cdc9-2565">`Type.GetType("MyGenericType`[AnotherGenericType 1`2[MyType,AnotherType]]")`</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2565">`Type.GetType("MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]")`</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-2566">Poniższy przykład pobiera typ `System.Int32` i używa tego typu obiektu do wyświetlenia <xref:System.Type.FullName%2A> właściwość `System.Int32`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2566">The following example retrieves the type of `System.Int32` and uses that type object to display the <xref:System.Type.FullName%2A> property of `System.Int32`.</span></span> <span data-ttu-id="6cdc9-2567">Jeśli obiekt typu odwołuje się do zestawu, który nie istnieje, w tym przykładzie zgłasza wyjątek.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2567">If a type object refers to an assembly that does not exist, this example throws an exception.</span></span>  
  
 [!code-cpp[Type_GetType#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetType/CPP/type_gettype.cpp#1)]
 [!code-csharp[Type_GetType#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetType/CS/type_gettype.cs#1)]
 [!code-vb[Type_GetType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetType/VB/type_gettype.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-2568">
            <paramref name="typeName" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2568">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="6cdc9-2569">Inicjator klasy jest wywoływany i zgłasza wyjątek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2569">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="6cdc9-2570">
            <paramref name="throwOnError" /> jest <see langword="true" /> i nie można odnaleźć typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2570">
              <paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.</span>
          </span>
          <span data-ttu-id="6cdc9-2571">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2571">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2572">
            <paramref name="throwOnError" /> jest <see langword="true" /> i <paramref name="typeName" /> zawiera nieprawidłowe znaki, takie jak osadzona karta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2572">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.</span>
          </span>
          <span data-ttu-id="6cdc9-2573">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2573">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2574">
            <paramref name="throwOnError" /> jest <see langword="true" /> i <paramref name="typeName" /> jest ciągiem pustym.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2574">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span>
          </span>
          <span data-ttu-id="6cdc9-2575">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2575">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2576">
            <paramref name="throwOnError" /> jest <see langword="true" /> i <paramref name="typeName" /> reprezentuje typ tablicy z nieprawidłowym rozmiarem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2576">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span>
          </span>
          <span data-ttu-id="6cdc9-2577">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2577">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2578">
            <paramref name="typeName" /> reprezentuje tablicę <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2578">
              <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6cdc9-2579">
            <paramref name="throwOnError" /> jest <see langword="true" /> i <paramref name="typeName" /> ma nieprawidłową składnię.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2579">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax.</span>
          </span>
          <span data-ttu-id="6cdc9-2580">Na przykład "MyType [, \*,]".</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2580">For example, "MyType[,\*,]".</span>
          </span>
          <span data-ttu-id="6cdc9-2581">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2581">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2582">
            <paramref name="typeName" /> reprezentuje typ ogólny, który jest typem wskaźnika <see langword="ByRef" /> typu, lub <see cref="T:System.Void" /> jako jeden z argumentów typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2582">
              <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          </span>
          <span data-ttu-id="6cdc9-2583">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2583">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2584">
            <paramref name="typeName" /> reprezentuje typ ogólny, który ma niepoprawną liczbę argumentów typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2584">
              <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          </span>
          <span data-ttu-id="6cdc9-2585">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2585">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2586">
            <paramref name="typeName" /> reprezentuje typ ogólny i jeden z argumentów typu nie spełniają ograniczeń dla odpowiedniego parametru typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2586">
              <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="6cdc9-2587">
            <paramref name="throwOnError" /> jest <see langword="true" /> i nie znaleziono zestawu lub jednej z jego zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2587">
              <paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="6cdc9-2588">W <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> lub <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, przechwycić wyjątek klasy bazowej <see cref="T:System.IO.IOException" />, a zamiast tego.</span>
              <span class="sxs-lookup">
                <span data-stu-id="6cdc9-2588">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.IO.IOException" />, instead.</span>
              </span>
            </para>
          </block>
          <span data-ttu-id="6cdc9-2589">Zestaw lub jeden z jego elementów zależnych został znaleziony, ale nie można go załadować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2589">The assembly or one of its dependencies was found, but could not be loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="6cdc9-2590">Zestaw lub jeden z jego elementów zależnych nie są prawidłowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2590">The assembly or one of its dependencies is not valid.</span>
          </span>
          <span data-ttu-id="6cdc9-2591">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2591">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2592">W wersji 2.0 lub nowsza aparatu plików wykonywalnych języka jest aktualnie załadowana, a zestaw został skompilowany przy użyciu nowszej wersji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2592">Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.TypeLoadException" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="M:System.Reflection.Assembly.GetAssembly(System.Type)" />
        <altmember cref="M:System.Reflection.Assembly.GetType(System.String)" />
        <altmember cref="T:System.Reflection.AssemblyName" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md">
          <span data-ttu-id="6cdc9-2593">Określanie w pełni kwalifikowanych nazw typów</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2593">Specifying Fully Qualified Type Names</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, bool throwOnError, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, throwOnError As Boolean, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member GetType : string * bool * bool -&gt; Type" Usage="System.Type.GetType (typeName, throwOnError, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="6cdc9-2594">Nazwa kwalifikowanego dla zestawu typu można pobrać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2594">The assembly-qualified name of the type to get.</span>
          </span>
          <span data-ttu-id="6cdc9-2595">Zobacz <see cref="P:System.Type.AssemblyQualifiedName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2595">See <see cref="P:System.Type.AssemblyQualifiedName" />.</span>
          </span>
          <span data-ttu-id="6cdc9-2596">Jeśli typ jest zawierający obecnie wykonywany zestaw lub biblioteki Mscorlib.dll, wystarczy podać nazwę typu kwalifikowana przez jego przestrzeń nazw.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2596">If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="6cdc9-2597">
            <see langword="true" /> Aby zgłosić wyjątek, jeśli nie można odnaleźć typu; <see langword="false" /> do zwrócenia <see langword="null" />. Określanie <see langword="false" /> powoduje również pominięcie niektórych warunków wyjątków, ale nie wszystkie z nich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2597">
              <see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />.Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span>
          </span>
          <span data-ttu-id="6cdc9-2598">Zobacz sekcję Wyjątki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2598">See the Exceptions section.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="6cdc9-2599">
            <see langword="true" /> Aby wykonać wyszukiwanie bez uwzględniania wielkości liter dla <c>typeName</c>, <see langword="false" /> przeprowadzić wyszukiwanie dla <c>typeName</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2599">
              <see langword="true" /> to perform a case-insensitive search for <c>typeName</c>, <see langword="false" /> to perform a case-sensitive search for <c>typeName</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-2600">Pobiera <see cref="T:System.Type" /> o określonej nazwie, określając czy zgłosić wyjątek, jeśli typ nie zostanie znaleziony i przeprowadzić wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2600">Gets the <see cref="T:System.Type" /> with the specified name, specifying whether to throw an exception if the type is not found and whether to perform a case-sensitive search.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-2601">Typ o określonej nazwie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2601">The type with the specified name.</span>
          </span>
          <span data-ttu-id="6cdc9-2602">Jeśli typ nie zostanie znaleziony, <paramref name="throwOnError" /> parametr określa, czy <see langword="null" /> zwracany jest lub zostanie zgłoszony wyjątek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2602">If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span>
          </span>
          <span data-ttu-id="6cdc9-2603">W niektórych przypadkach występuje wyjątek niezależnie od wartości <paramref name="throwOnError" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2603">In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />.</span>
          </span>
          <span data-ttu-id="6cdc9-2604">Zobacz sekcję Wyjątki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2604">See the Exceptions section.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-2605">Możesz użyć <xref:System.Type.GetType%2A> metodę, aby uzyskać <xref:System.Type> obiektu dla typu w innym zestawie, jeśli znasz jego nazwę kwalifikowaną dla zestawu, który można uzyskać z <xref:System.Type.AssemblyQualifiedName>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2605">You can use the <xref:System.Type.GetType%2A> method to obtain a <xref:System.Type> object for a type in another assembly, if you know its assembly-qualified name which can be obtained from <xref:System.Type.AssemblyQualifiedName>.</span></span> <span data-ttu-id="6cdc9-2606"><xref:System.Type.GetType%2A> powoduje, że ładowanie zestawu określonego w `typeName`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2606"><xref:System.Type.GetType%2A> causes loading of the assembly specified in `typeName`.</span></span> <span data-ttu-id="6cdc9-2607">Można również załadować zestawu przy użyciu <xref:System.Reflection.Assembly.Load%2A> metody, a następnie użyj <xref:System.Type.GetType%2A> lub <xref:System.Reflection.Assembly.GetTypes%2A> metody <xref:System.Reflection.Assembly> klasy, aby uzyskać <xref:System.Type> obiektów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2607">You can also load an assembly using the <xref:System.Reflection.Assembly.Load%2A> method, and then use the <xref:System.Type.GetType%2A> or <xref:System.Reflection.Assembly.GetTypes%2A> methods of the <xref:System.Reflection.Assembly> class to get <xref:System.Type> objects.</span></span> <span data-ttu-id="6cdc9-2608">Jeśli typ znajduje się w zestawie znane w czasie kompilacji program, jest bardziej wydajne, aby użyć `typeof` w języku C# <xref:System.Type.GetType%2A> w języku Visual Basic lub `typeid` w języku C++.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2608">If a type is in an assembly known to your program at compile time, it is more efficient to use `typeof` in C#, <xref:System.Type.GetType%2A> in Visual Basic, or `typeid` in C++.</span></span>  
  
 <span data-ttu-id="6cdc9-2609">`GetType` działa tylko na zestawy, ładowane z dysku.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2609">`GetType` only works on assemblies loaded from disk.</span></span> <span data-ttu-id="6cdc9-2610">Jeśli wywołasz `GetType` do wyszukania w typ zdefiniowany w zestawie dynamicznym zdefiniowane przy użyciu <xref:System.Reflection.Emit> usług, możesz otrzymać niespójne zachowanie.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2610">If you call `GetType` to look up a type defined in a dynamic assembly defined using the <xref:System.Reflection.Emit> services, you might get inconsistent behavior.</span></span> <span data-ttu-id="6cdc9-2611">Zachowanie zależy od tego, czy zestaw dynamiczny jest trwała, oznacza to, utworzony za pomocą `RunAndSave` lub `Save` dostępu tryby <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2611">The behavior depends on whether the dynamic assembly is persistent, that is, created using the `RunAndSave` or `Save` access modes of the <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> enumeration.</span></span> <span data-ttu-id="6cdc9-2612">Jeśli zestaw dynamiczny jest trwały i został zapisany na dysku przed `GetType` jest wywoływana, moduł ładujący wyszukuje zestaw zapisane na dysku, ładuje tego zestawu i pobiera typ z tego zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2612">If the dynamic assembly is persistent and has been written to disk before `GetType` is called, the loader finds the saved assembly on disk, loads that assembly, and retrieves the type from that assembly.</span></span> <span data-ttu-id="6cdc9-2613">Jeśli zestaw nie został zapisany na dysku po `GetType` jest wywoływana metoda zwraca `null`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2613">If the assembly has not been saved to disk when `GetType` is called, the method returns `null`.</span></span> <span data-ttu-id="6cdc9-2614">`GetType` nie rozpoznaje przejściowy dynamicznych zestawów; Dlatego wywołanie `GetType` można pobrać typu na przejściowy zwraca zestaw dynamiczny `null`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2614">`GetType` does not understand transient dynamic assemblies; therefore, calling `GetType` to retrieve a type in a transient dynamic assembly returns `null`.</span></span>  
  
 <span data-ttu-id="6cdc9-2615">Aby użyć `GetType` na modułu dynamicznego subskrybować <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> zdarzenia i wywołania `GetType` przed zapisaniem.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2615">To use `GetType` on a dynamic module, subscribe to the <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> event and call `GetType` before saving.</span></span> <span data-ttu-id="6cdc9-2616">W przeciwnym razie otrzymasz dwie kopie zestawu w pamięci.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2616">Otherwise, you will get two copies of the assembly in memory.</span></span>  
  
 <span data-ttu-id="6cdc9-2617">`throwOnError` Parametr określa, co się stanie, gdy typ nie zostanie znaleziony i powoduje również pominięcie niektórych warunków wyjątków, zgodnie z opisem w sekcji wyjątki.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2617">The `throwOnError` parameter specifies what happens when the type is not found, and also suppresses certain other exception conditions, as described in the Exceptions section.</span></span> <span data-ttu-id="6cdc9-2618">Niektóre wyjątki są zgłaszane niezależnie od wartości `throwOnError`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2618">Some exceptions are thrown regardless of the value of `throwOnError`.</span></span> <span data-ttu-id="6cdc9-2619">Na przykład, jeśli typ zostanie znaleziony, ale nie może zostać załadowany <xref:System.TypeLoadException> jest zgłaszany nawet wtedy, gdy `throwOnError` jest `false`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2619">For example, if the type is found but cannot be loaded, a <xref:System.TypeLoadException> is thrown even if `throwOnError` is `false`.</span></span>  
  
 <span data-ttu-id="6cdc9-2620">W poniższej tabeli przedstawiono, jakie elementy członkowskie klasy podstawowej są zwracane przez `Get` metody uwzględnianiem typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2620">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="6cdc9-2621">Typ elementu członkowskiego</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2621">Member Type</span></span>|<span data-ttu-id="6cdc9-2622">Static</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2622">Static</span></span>|<span data-ttu-id="6cdc9-2623">Niestatyczna</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2623">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="6cdc9-2624">Konstruktor</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2624">Constructor</span></span>|<span data-ttu-id="6cdc9-2625">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2625">No</span></span>|<span data-ttu-id="6cdc9-2626">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2626">No</span></span>|  
|<span data-ttu-id="6cdc9-2627">Pole</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2627">Field</span></span>|<span data-ttu-id="6cdc9-2628">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2628">No</span></span>|<span data-ttu-id="6cdc9-2629">Tak.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2629">Yes.</span></span> <span data-ttu-id="6cdc9-2630">Pole jest zawsze ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2630">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6cdc9-2631">Zdarzenie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2631">Event</span></span>|<span data-ttu-id="6cdc9-2632">Nie dotyczy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2632">Not applicable</span></span>|<span data-ttu-id="6cdc9-2633">Zasadą systemu typu jest to, że dziedziczenie jest takie samo, jak w przypadku metod, które implementują właściwość.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2633">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6cdc9-2634">Odbicie traktuje właściwości jako ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2634">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-2635">Patrz Uwaga 2 poniżej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2635">See note 2 below.</span></span>|  
|<span data-ttu-id="6cdc9-2636">Metoda</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2636">Method</span></span>|<span data-ttu-id="6cdc9-2637">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2637">No</span></span>|<span data-ttu-id="6cdc9-2638">Tak.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2638">Yes.</span></span> <span data-ttu-id="6cdc9-2639">Metodą (zarówno wirtualną, jak i niewirtualną) może być ukrycie przez nazwę lub przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2639">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6cdc9-2640">Typu zagnieżdżony</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2640">Nested Type</span></span>|<span data-ttu-id="6cdc9-2641">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2641">No</span></span>|<span data-ttu-id="6cdc9-2642">Nie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2642">No</span></span>|  
|<span data-ttu-id="6cdc9-2643">Właściwość</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2643">Property</span></span>|<span data-ttu-id="6cdc9-2644">Nie dotyczy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2644">Not applicable</span></span>|<span data-ttu-id="6cdc9-2645">Zasadą systemu typu jest to, że dziedziczenie jest takie samo, jak w przypadku metod, które implementują właściwość.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2645">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6cdc9-2646">Odbicie traktuje właściwości jako ukryte przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2646">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-2647">Patrz Uwaga 2 poniżej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2647">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="6cdc9-2648">Ukrycie przez nazwę i podpis dotyczy wszystkich części podpisu, w tym modyfikatorów niestandardowych, zwraca typy, typy parametrów, wartowników i niezarządzane konwencje wywoływania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2648">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="6cdc9-2649">To jest porównanie binarne.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2649">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="6cdc9-2650">W celu odbicia właściwości i zdarzenia są ukrywane przez nazwę i podpis.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2650">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="6cdc9-2651">Jeśli istnieje właściwość z akcesorem pobierania i ustawiania w klasie bazowej, ale odziedziczona klasa ma tylko akcesor pobierania, właściwość klasy odziedziczonej ukrywa właściwości klasy bazowej, a nie można uzyskać dostępu do metody ustawiającej w klasie bazowej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2651">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="6cdc9-2652">Atrybuty niestandardowe nie są częścią wspólnego typu systemowego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2652">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="6cdc9-2653">Tablic lub typów modelu COM nie są wyszukiwane chyba, że już zostały załadowane do tabeli dostępnych klas.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2653">Arrays or COM types are not searched for unless they have already been loaded into the table of available classes.</span></span>  
  
 <span data-ttu-id="6cdc9-2654">`typeName` może być nazwa typu kwalifikowana przez jego przestrzeń nazw lub kwalifikowaną dla zestawu, która zawiera nazwę specyfikacja nazwy zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2654">`typeName` can be the type name qualified by its namespace or an assembly-qualified name that includes an assembly name specification.</span></span> <span data-ttu-id="6cdc9-2655">Zobacz <xref:System.Type.AssemblyQualifiedName%2A>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2655">See <xref:System.Type.AssemblyQualifiedName%2A>.</span></span>  
  
 <span data-ttu-id="6cdc9-2656">Jeśli `typeName` obejmuje przestrzeń nazw, ale nie nazwę zestawu, Metoda ta wyszukuje tylko do obiektu wywołującego zestawu i Mscorlib.dll, w tej kolejności.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2656">If `typeName` includes the namespace but not the assembly name, this method searches only the calling object's assembly and Mscorlib.dll, in that order.</span></span> <span data-ttu-id="6cdc9-2657">Jeśli typeName jest w pełni kwalifikowaną nazwą zestawu częściowego lub pełny, Metoda ta wyszukuje w określonym zestawie.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2657">If typeName is fully qualified with the partial or complete assembly name, this method searches in the specified assembly.</span></span> <span data-ttu-id="6cdc9-2658">Jeśli zestaw ma silną nazwą, wymagana jest nazwa kompletny zestaw.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2658">If the assembly has a strong name, a complete assembly name is required.</span></span>  
  
 <span data-ttu-id="6cdc9-2659"><xref:System.Type.AssemblyQualifiedName%2A> Właściwość zwraca w pełni kwalifikowaną nazwę typu w tym typów zagnieżdżonych, nazwa zestawu i argumentów typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2659">The <xref:System.Type.AssemblyQualifiedName%2A> property returns a fully qualified type name including nested types, the assembly name, and type arguments.</span></span> <span data-ttu-id="6cdc9-2660">Wszystkie kompilatory, które obsługują aparat plików wykonywalnych języka wspólnego, w trakcie wykonania wyemitują prostą nazwę klasy zagnieżdżonej, a odbicie podczas kwerendy stworzy zniekształcone nazwy zgodnie z następującymi konwencjami.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2660">All compilers that support the common language runtime will emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-2661">W wersji 2.0 środowiska .NET Framework architektura procesora jest dodawana do tożsamości zestawu i może być określona jako część zestawu ciągu nazw.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2661">In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.</span></span> <span data-ttu-id="6cdc9-2662">Na przykład "ProcessorArchitecture = msil".</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2662">For example, "ProcessorArchitecture=msil".</span></span> <span data-ttu-id="6cdc9-2663">Jednak nie są uwzględnione w ciągu zwracanego przez <xref:System.Type.AssemblyQualifiedName%2A> właściwość ze względu na zgodność.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2663">However, it is not included in the string returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, for compatibility reasons.</span></span> <span data-ttu-id="6cdc9-2664">Można również załadować typów, tworząc <xref:System.Reflection.AssemblyName> obiektu i przekazywania go do odpowiedniego przeciążenia <xref:System.Reflection.Assembly.Load%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2664">You can also load types by creating an <xref:System.Reflection.AssemblyName> object and passing it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method.</span></span> <span data-ttu-id="6cdc9-2665">Następnie można użyć <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> metodę, aby załadować typów z zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2665">You can then use the <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> method to load types from the assembly.</span></span> <span data-ttu-id="6cdc9-2666">Zobacz też <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2666">See also <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span></span>  
  
|<span data-ttu-id="6cdc9-2667">Ogranicznik</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2667">Delimiter</span></span>|<span data-ttu-id="6cdc9-2668">Znaczenie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2668">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="6cdc9-2669">Ukośnik odwrotny (\\)</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2669">Backslash (\\)</span></span>|<span data-ttu-id="6cdc9-2670">Znak ucieczki.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2670">Escape character.</span></span>|  
|<span data-ttu-id="6cdc9-2671">Początkowych (')</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2671">Backtick (\`)</span></span>|<span data-ttu-id="6cdc9-2672">Poprzedza co najmniej jedną cyfrę reprezentującą liczbę parametrów typu, znajduje się na końcu nazwy typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2672">Precedes one or more digits representing the number of type parameters, located at the end of the name of a generic type.</span></span>|  
|<span data-ttu-id="6cdc9-2673">Nawiasy kwadratowe ([])</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2673">Brackets ([])</span></span>|<span data-ttu-id="6cdc9-2674">Ujmij listy argumentów typu rodzajowego, aby uzyskać skonstruowany typ rodzajowy; na liście argumentów typu należy ująć typu kwalifikowanego zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2674">Enclose a generic type argument list, for a constructed generic type; within a type argument list, enclose an assembly-qualified type.</span></span>|  
|<span data-ttu-id="6cdc9-2675">Przecinek (,)</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2675">Comma (,)</span></span>|<span data-ttu-id="6cdc9-2676">Poprzedza nazwę zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2676">Precedes the Assembly name.</span></span>|  
|<span data-ttu-id="6cdc9-2677">Kropka (.)</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2677">Period (.)</span></span>|<span data-ttu-id="6cdc9-2678">Wskazuje przestrzeń nazw identyfikatorów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2678">Denotes namespace identifiers.</span></span>|  
|<span data-ttu-id="6cdc9-2679">Znak plus (+)</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2679">Plus sign (+)</span></span>|<span data-ttu-id="6cdc9-2680">Poprzedza klasę zagnieżdżoną.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2680">Precedes a nested class.</span></span>|  
  
 <span data-ttu-id="6cdc9-2681">Na przykład w pełni kwalifikowana nazwa klasy może wyglądać następująco:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2681">For example, the fully qualified name for a class might look like this:</span></span>  
  
```  
TopNamespace.SubNameSpace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="6cdc9-2682">Jeśli przestrzeń nazw zostały TopNamespace.Sub+Namespace, a następnie ciąg musi poprzedzać znak plus (+) przy użyciu znaku ucieczki (\\), aby zapobiec interpretacji jako separator zagnieżdżenia.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2682">If the namespace were TopNamespace.Sub+Namespace, then the string would have to precede the plus sign (+) with an escape character (\\) to prevent it from being interpreted as a nesting separator.</span></span> <span data-ttu-id="6cdc9-2683">Odbicie emituje tego ciągu w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2683">Reflection emits this string as follows:</span></span>  
  
```  
TopNamespace.Sub\+Namespace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="6cdc9-2684">A "++" staje się "\\+\\+", a "\\"staje się"\\\\".</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2684">A "++" becomes "\\+\\+", and a "\\" becomes "\\\\".</span></span>  
  
 <span data-ttu-id="6cdc9-2685">Ta nazwa kwalifikowana może utrwalona i później używana do ładowania <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2685">This qualified name can be persisted and later used to load the <xref:System.Type>.</span></span> <span data-ttu-id="6cdc9-2686">Aby wyszukać i załadować <xref:System.Type>, użyj <xref:System.Type.GetType%2A> albo z typem nazwy tylko lub nazwą kwalifikowaną typu zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2686">To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name.</span></span> <span data-ttu-id="6cdc9-2687"><xref:System.Type.GetType%2A> z typem nazwy tylko będzie szukać <xref:System.Type> w zestawie wywołującego, a następnie w zestawie systemowym.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2687"><xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly.</span></span> <span data-ttu-id="6cdc9-2688"><xref:System.Type.GetType%2A> z zestawem kwalifikowanej nazwy typu będzie szukać <xref:System.Type> w każdym zestawie.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2688"><xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.</span></span>  
  
 <span data-ttu-id="6cdc9-2689">Nazwy typów mogą obejmować końcowe znaki, które wyznaczają dodatkowe informacje dotyczące typu, na przykład to, czy typ jest typem odwołania, typem wskaźnika lub typem tablicowym.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2689">Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type.</span></span> <span data-ttu-id="6cdc9-2690">Aby pobrać, wpisz nazwę bez tych znaków końcowych, należy użyć `t.GetElementType().ToString()`, gdzie `t` jest typem.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2690">To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where `t` is the type.</span></span>  
  
 <span data-ttu-id="6cdc9-2691">Spacje są istotne we wszystkich składnikach nazwy z wyjątkiem nazwy zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2691">Spaces are relevant in all type name components except the assembly name.</span></span> <span data-ttu-id="6cdc9-2692">Spacje przed separatorem w nazwie zestawu ',' są istotne, ale spacje po separatorze ',' są ignorowane.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2692">In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.</span></span>  
  
 <span data-ttu-id="6cdc9-2693">Nazwa typu ogólnego kończy się ciągiem początkowych (\`) następują cyfry reprezentujący liczbę wszystkich argumentów typu rodzajowego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2693">The name of a generic type ends with a backtick (\`) followed by digits representing the number of generic type arguments.</span></span> <span data-ttu-id="6cdc9-2694">Celem tego przekręcaniu nazwy jest umożliwienie kompilatory do obsługi typów ogólnych o takiej samej nazwie, ale z różną liczbę parametrów typu, w tym samym zakresie.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2694">The purpose of this name mangling is to allow compilers to support generic types with the same name but with different numbers of type parameters, occurring in the same scope.</span></span> <span data-ttu-id="6cdc9-2695">Na przykład odbicia zwraca zniekształcone nazwy `Tuple`1` and `krotki`2` z metod ogólnych `Tuple(Of T)` i `Tuple(Of T0, T1)` w języku Visual Basic lub `Tuple<T>` i krotki`\<T0, T1>` w języku Visual C#.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2695">For example, reflection returns the mangled names `Tuple`1` and `Tuple`2` from the generic methods `Tuple(Of T)` and `Tuple(Of T0, T1)` in Visual Basic, or `Tuple<T>` and Tuple`\<T0, T1>` in Visual C#.</span></span>  
  
 <span data-ttu-id="6cdc9-2696">Dla typów ogólnych lista argumentów typu jest ujęty w nawiasy i argumenty typu są oddzielone przecinkami.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2696">For generic types, the type argument list is enclosed in brackets, and the type arguments are separated by commas.</span></span> <span data-ttu-id="6cdc9-2697">Na przykład ogólny <xref:System.Collections.Generic.Dictionary%602> ma dwa parametry typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2697">For example, a generic <xref:System.Collections.Generic.Dictionary%602> has two type parameters.</span></span> <span data-ttu-id="6cdc9-2698">A <xref:System.Collections.Generic.Dictionary%602> z `MyType` przy użyciu kluczy typu <xref:System.String> może być reprezentowany w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2698">A <xref:System.Collections.Generic.Dictionary%602> of `MyType` with keys of type <xref:System.String> might be represented as follows:</span></span>  
  
```  
System.Collections.Generic.Dictionary`2[System.String,MyType]  
```  
  
 <span data-ttu-id="6cdc9-2699">Aby określić typu kwalifikowanego zestawu w obrębie listy argumentów typu, należy ująć typu kwalifikowanego zestawu w nawiasy kwadratowe.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2699">To specify an assembly-qualified type within a type argument list, enclose the assembly-qualified type within brackets.</span></span> <span data-ttu-id="6cdc9-2700">W przeciwnym razie przecinki oddzielające części nazwy kwalifikowanej zestawu są interpretowane jako rozdzielający argumentów typu dodatkowe.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2700">Otherwise, the commas that separate the parts of the assembly-qualified name are interpreted as delimiting additional type arguments.</span></span> <span data-ttu-id="6cdc9-2701">Na przykład <xref:System.Collections.Generic.Dictionary%602> z `MyType` z MyAssembly.dll przy użyciu kluczy typu <xref:System.String>, może być następujący:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2701">For example, a <xref:System.Collections.Generic.Dictionary%602> of `MyType` from MyAssembly.dll, with keys of type <xref:System.String>, might be specified as follows:</span></span>  
  
```  
Type.GetType("System.Collections.Generic.Dictionary`2[System.String,[MyType,MyAssembly]]")  
```  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-2702">Typu kwalifikowanego zestawu mogą być ujęte w nawiasy kwadratowe, tylko wtedy, gdy pojawia się on w obrębie lista parametrów typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2702">An assembly-qualified type can be enclosed in brackets only when it appears within a type parameter list.</span></span> <span data-ttu-id="6cdc9-2703">Reguły dotyczące wyszukiwania zestawów dla typów kwalifikowana i niekwalifikowanej w liście parametrów typu są takie same jak reguły dla typów nierodzajowymi kwalifikowana i niekwalifikowane.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2703">The rules for searching assemblies for qualified and unqualified types in type parameter lists are the same as the rules for qualified and unqualified nongeneric types.</span></span>  
  
 <span data-ttu-id="6cdc9-2704">Typy dopuszczające wartości zerowe są w wyjątkowym przypadku okna typów ogólnych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2704">Nullable types are a special case of generic types.</span></span> <span data-ttu-id="6cdc9-2705">Na przykład dopuszczający wartości null <xref:System.Int32> jest reprezentowany przez ciąg "System.Nullable'1[System.Int32]".</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2705">For example, a nullable <xref:System.Int32> is represented by the string "System.Nullable\`1[System.Int32]".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-2706">W języku C#, C++ i Visual Basic można również uzyskać przy użyciu operatorów typu typy dopuszczające wartości null.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2706">In C#, C++, and Visual Basic you can also get nullable types using type operators.</span></span> <span data-ttu-id="6cdc9-2707">Na przykład nullable <xref:System.Boolean> typ zwracany przez `typeof(Nullable<bool>)` w języku C#, `Nullable<Boolean>::typeid` w języku C++ i przez `GetType(Nullable(Of Boolean))` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2707">For example, the nullable <xref:System.Boolean> type is returned by `typeof(Nullable<bool>)` in C#, by `Nullable<Boolean>::typeid` in C++, and by `GetType(Nullable(Of Boolean))` in Visual Basic.</span></span>  
  
 <span data-ttu-id="6cdc9-2708">W poniższej tabeli przedstawiono składnię, możesz za pomocą `GetType` dla różnych typów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2708">The following table shows the syntax you use with `GetType` for various types.</span></span>  
  
|<span data-ttu-id="6cdc9-2709">Aby uzyskać</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2709">To Get</span></span>|<span data-ttu-id="6cdc9-2710">Zastosowanie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2710">Use</span></span>|  
|------------|---------|  
|<span data-ttu-id="6cdc9-2711">Dopuszczający wartości null <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="6cdc9-2711">A nullable <xref:System.Int32></span></span>|<span data-ttu-id="6cdc9-2712">`Type.GetType("System.Nullable`1[System.Int32]")\`</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2712">`Type.GetType("System.Nullable`1[System.Int32]")\`</span></span>|  
|<span data-ttu-id="6cdc9-2713">Niezarządzany wskaźnik do `MyType`</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2713">An unmanaged pointer to `MyType`</span></span>|`Type.GetType("MyType*")`|  
|<span data-ttu-id="6cdc9-2714">Niezarządzany wskaźnik do wskaźnika do `MyType`</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2714">An unmanaged pointer to a pointer to `MyType`</span></span>|`Type.GetType("MyType**")`|  
|<span data-ttu-id="6cdc9-2715">Zarządzane wskaźnik lub odwołanie do `MyType`</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2715">A managed pointer or reference to `MyType`</span></span>|<span data-ttu-id="6cdc9-2716">`Type.GetType("MyType&")`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2716">`Type.GetType("MyType&")`.</span></span> <span data-ttu-id="6cdc9-2717">Należy pamiętać, że w przeciwieństwie do wskaźników, odwołań są ograniczone do jednego poziomu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2717">Note that unlike pointers, references are limited to one level.</span></span>|  
|<span data-ttu-id="6cdc9-2718">Klasy nadrzędnej i zagnieżdżone klasy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2718">A parent class and a nested class</span></span>|`Type.GetType("MyParentClass+MyNestedClass")`|  
|<span data-ttu-id="6cdc9-2719">Jednowymiarowa tablica dolną granicę równą 0</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2719">A one-dimensional array with a lower bound of 0</span></span>|`Type.GetType("MyArray[]")`|  
|<span data-ttu-id="6cdc9-2720">Jednowymiarowa tablica o nieznanych dolna granica</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2720">A one-dimensional array with an unknown lower bound</span></span>|`Type.GetType("MyArray[*]")`|  
|<span data-ttu-id="6cdc9-2721">N wymiarową tablicą</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2721">An n-dimensional array</span></span>|<span data-ttu-id="6cdc9-2722">Przecinek (,) znajduje się wewnątrz nawiasów w sumie n-1 razy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2722">A comma (,) inside the brackets a total of n-1 times.</span></span> <span data-ttu-id="6cdc9-2723">Na przykład `System.Object[,,]` reprezentuje trójwymiarowym `Object` tablicy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2723">For example, `System.Object[,,]` represents a three-dimensional `Object` array.</span></span>|  
|<span data-ttu-id="6cdc9-2724">Tablicy dwuwymiarowej tablicy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2724">A two-dimensional array's array</span></span>|`Type.GetType("MyArray[][]")`|  
|<span data-ttu-id="6cdc9-2725">Prostokątnej dwuwymiarowej tablicy przy użyciu nieznanego dolne granice</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2725">A rectangular two-dimensional array with unknown lower bounds</span></span>|`Type.GetType("MyArray[,]")`|  
|<span data-ttu-id="6cdc9-2726">Typ ogólny z jednego typu argumentu</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2726">A generic type with one type argument</span></span>|<span data-ttu-id="6cdc9-2727">`Type.GetType("MyGenericType`1[MyType]")\`</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2727">`Type.GetType("MyGenericType`1[MyType]")\`</span></span>|  
|<span data-ttu-id="6cdc9-2728">Typ ogólny z dwoma argumentami typu</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2728">A generic type with two type arguments</span></span>|<span data-ttu-id="6cdc9-2729">`Type.GetType("MyGenericType`2[MyType,AnotherType]")\`</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2729">`Type.GetType("MyGenericType`2[MyType,AnotherType]")\`</span></span>|  
|<span data-ttu-id="6cdc9-2730">Typ ogólny z dwóch argumentów typu kwalifikowanego zestawu</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2730">A generic type with two assembly-qualified type arguments</span></span>|<span data-ttu-id="6cdc9-2731">`Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")"</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2731">`Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")\`</span></span>|  
|<span data-ttu-id="6cdc9-2732">Kwalifikowanych dla zestawu typu ogólnego z nieprawidłowym argumentem typu kwalifikowanego zestawu</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2732">An assembly-qualified generic type with an assembly-qualified type argument</span></span>|<span data-ttu-id="6cdc9-2733">`Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")"</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2733">`Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")\`</span></span>|  
|<span data-ttu-id="6cdc9-2734">Typ ogólny, którego argument typu jest typ ogólny z dwoma argumentami typu</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2734">A generic type whose type argument is a generic type with two type arguments</span></span>|<span data-ttu-id="6cdc9-2735">`Type.GetType("MyGenericType`[AnotherGenericType 1`2[MyType,AnotherType]]")`</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2735">`Type.GetType("MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]")`</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-2736">
            <paramref name="typeName" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2736">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="6cdc9-2737">Inicjator klasy jest wywoływany i zgłasza wyjątek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2737">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="6cdc9-2738">
            <paramref name="throwOnError" /> jest <see langword="true" /> i nie można odnaleźć typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2738">
              <paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.</span>
          </span>
          <span data-ttu-id="6cdc9-2739">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2739">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2740">
            <paramref name="throwOnError" /> jest <see langword="true" /> i <paramref name="typeName" /> zawiera nieprawidłowe znaki, takie jak osadzona karta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2740">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.</span>
          </span>
          <span data-ttu-id="6cdc9-2741">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2741">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2742">
            <paramref name="throwOnError" /> jest <see langword="true" /> i <paramref name="typeName" /> jest ciągiem pustym.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2742">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span>
          </span>
          <span data-ttu-id="6cdc9-2743">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2743">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2744">
            <paramref name="throwOnError" /> jest <see langword="true" /> i <paramref name="typeName" /> reprezentuje typ tablicy z nieprawidłowym rozmiarem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2744">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span>
          </span>
          <span data-ttu-id="6cdc9-2745">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2745">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2746">
            <paramref name="typeName" /> reprezentuje tablicę <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2746">
              <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6cdc9-2747">
            <paramref name="throwOnError" /> jest <see langword="true" /> i <paramref name="typeName" /> ma nieprawidłową składnię.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2747">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax.</span>
          </span>
          <span data-ttu-id="6cdc9-2748">Na przykład "MyType [, \*,]".</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2748">For example, "MyType[,\*,]".</span>
          </span>
          <span data-ttu-id="6cdc9-2749">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2749">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2750">
            <paramref name="typeName" /> reprezentuje typ ogólny, który jest typem wskaźnika <see langword="ByRef" /> typu, lub <see cref="T:System.Void" /> jako jeden z argumentów typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2750">
              <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          </span>
          <span data-ttu-id="6cdc9-2751">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2751">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2752">
            <paramref name="typeName" /> reprezentuje typ ogólny, który ma niepoprawną liczbę argumentów typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2752">
              <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          </span>
          <span data-ttu-id="6cdc9-2753">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2753">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2754">
            <paramref name="typeName" /> reprezentuje typ ogólny i jeden z argumentów typu nie spełniają ograniczeń dla odpowiedniego parametru typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2754">
              <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="6cdc9-2755">
            <paramref name="throwOnError" /> jest <see langword="true" /> i nie znaleziono zestawu lub jednej z jego zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2755">
              <paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="6cdc9-2756">Zestaw lub jeden z jego elementów zależnych został znaleziony, ale nie można go załadować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2756">The assembly or one of its dependencies was found, but could not be loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="6cdc9-2757">Zestaw lub jeden z jego elementów zależnych nie są prawidłowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2757">The assembly or one of its dependencies is not valid.</span>
          </span>
          <span data-ttu-id="6cdc9-2758">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2758">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2759">W wersji 2.0 lub nowsza aparatu plików wykonywalnych języka jest aktualnie załadowana, a zestaw został skompilowany przy użyciu nowszej wersji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2759">Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.TypeLoadException" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="M:System.Reflection.Assembly.GetAssembly(System.Type)" />
        <altmember cref="M:System.Reflection.Assembly.GetType(System.String)" />
        <altmember cref="T:System.Reflection.AssemblyName" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md">
          <span data-ttu-id="6cdc9-2760">Określanie w pełni kwalifikowanych nazw typów</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2760">Specifying Fully Qualified Type Names</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt; assemblyResolver, Func&lt;System.Reflection.Assembly,string,bool,Type&gt; typeResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, class System.Func`2&lt;class System.Reflection.AssemblyName, class System.Reflection.Assembly&gt; assemblyResolver, class System.Func`4&lt;class System.Reflection.Assembly, string, bool, class System.Type&gt; typeResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, assemblyResolver As Func(Of AssemblyName, Assembly), typeResolver As Func(Of Assembly, String, Boolean, Type)) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, Func&lt;System::Reflection::AssemblyName ^, System::Reflection::Assembly ^&gt; ^ assemblyResolver, Func&lt;System::Reflection::Assembly ^, System::String ^, bool, Type ^&gt; ^ typeResolver);" />
      <MemberSignature Language="F#" Value="static member GetType : string * Func&lt;System.Reflection.AssemblyName, System.Reflection.Assembly&gt; * Func&lt;System.Reflection.Assembly, string, bool, Type&gt; -&gt; Type" Usage="System.Type.GetType (typeName, assemblyResolver, typeResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="assemblyResolver" Type="System.Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt;" />
        <Parameter Name="typeResolver" Type="System.Func&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt;" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="6cdc9-2761">Nazwa typu, który można pobrać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2761">The name of the type to get.</span>
          </span>
          <span data-ttu-id="6cdc9-2762">Jeśli <c>typeResolver</c> parametr zostanie podany, nazwa typu może być dowolny ciąg, który <c>typeResolver</c> jest w stanie rozwiązywania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2762">If the <c>typeResolver</c> parameter is provided, the type name can be any string that <c>typeResolver</c> is capable of resolving.</span>
          </span>
          <span data-ttu-id="6cdc9-2763">Jeśli <c>assemblyResolver</c> parametr ma pod warunkiem, lub jeśli rozpoznawania typu Standardowy jest używany, <c>typeName</c> musi być kwalifikowana nazwa zestawu (zobacz <see cref="P:System.Type.AssemblyQualifiedName" />), chyba że typ jest w trakcie wykonywania zestaw lub biblioteki Mscorlib.dll, w których przypadku wystarczy podać nazwę typu kwalifikowana przez jego przestrzeń nazw.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2763">If the <c>assemblyResolver</c> parameter is provided or if standard type resolution is used, <c>typeName</c> must be an assembly-qualified name (see <see cref="P:System.Type.AssemblyQualifiedName" />), unless the type is in the currently executing assembly or in Mscorlib.dll, in which case it is sufficient to supply the type name qualified by its namespace.</span>
          </span>
        </param>
        <param name="assemblyResolver">
          <span data-ttu-id="6cdc9-2764">Metoda, która lokalizuje i zwraca zestaw, który jest określony w <c>typeName</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2764">A method that locates and returns the assembly that is specified in <c>typeName</c>.</span>
          </span>
          <span data-ttu-id="6cdc9-2765">Nazwa zestawu jest przekazywany do <c>assemblyResolver</c> jako <see cref="T:System.Reflection.AssemblyName" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2765">The assembly name is passed to <c>assemblyResolver</c> as an <see cref="T:System.Reflection.AssemblyName" /> object.</span>
          </span>
          <span data-ttu-id="6cdc9-2766">Jeśli <c>typeName</c> nie zawiera nazwy zestawu, <c>assemblyResolver</c> nie zostanie wywołana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2766">If <c>typeName</c> does not contain the name of an assembly, <c>assemblyResolver</c> is not called.</span>
          </span>
          <span data-ttu-id="6cdc9-2767">Jeśli <c>assemblyResolver</c> nie jest podany, standardowego zestawu rozpoznawanie odbywa się.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2767">If <c>assemblyResolver</c> is not supplied, standard assembly resolution is performed.</span>
          </span>
          <span data-ttu-id="6cdc9-2768">Uwaga nie przechodzą z nieznanych lub niezaufanych wywołujących.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2768">Caution   Do not pass methods from unknown or untrusted callers.</span>
          </span>
          <span data-ttu-id="6cdc9-2769">Ten sposób może spowodować podniesienie uprawnień dla złośliwego kodu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2769">Doing so could result in elevation of privilege for malicious code.</span>
          </span>
          <span data-ttu-id="6cdc9-2770">Użyj tylko określonych przez siebie metod lub tych, które znasz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2770">Use only methods that you provide or that you are familiar with.</span>
          </span>
        </param>
        <param name="typeResolver">
          <span data-ttu-id="6cdc9-2771">Metody, która lokalizuje i zwraca typ, który jest określony przez <c>typeName</c> z zestawu, który jest zwracany przez <c>assemblyResolver</c> lub rozpoznawania zestawu standardowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2771">A method that locates and returns the type that is specified by <c>typeName</c> from the assembly that is returned by <c>assemblyResolver</c> or by standard assembly resolution.</span>
          </span>
          <span data-ttu-id="6cdc9-2772">Jeśli nie podano żadnego zestawu, <c>typeResolver</c> metoda może dostarczyć jeden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2772">If no assembly is provided, the <c>typeResolver</c> method can provide one.</span>
          </span>
          <span data-ttu-id="6cdc9-2773">Ta metoda również przyjmuje parametr, który określa, czy należy wykonać wyszukiwanie bez uwzględniania wielkości liter; <see langword="false" /> jest przekazywany do tego parametru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2773">The method also takes a parameter that specifies whether to perform a case-insensitive search; <see langword="false" /> is passed to that parameter.</span>
          </span>
          <span data-ttu-id="6cdc9-2774">Uwaga nie przechodzą z nieznanych lub niezaufanych wywołujących.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2774">Caution   Do not pass methods from unknown or untrusted callers.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-2775">Pobiera typ o określonej nazwie, opcjonalnie podania niestandardowych metod można rozpoznać zestawu i typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2775">Gets the type with the specified name, optionally providing custom methods to resolve the assembly and the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-2776">Typ o określonej nazwie lub <see langword="null" /> Jeśli typ nie zostanie znaleziony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2776">The type with the specified name, or <see langword="null" /> if the type is not found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-2777">Scenariusze użycia dotyczące tę metodę i szczegółowe informacje o `assemblyResolver` i `typeResolver` parametrów można znaleźć w <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> przeciążenie metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2777">Usage scenarios for this method and details about the `assemblyResolver` and `typeResolver` parameters can be found in the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-2778">Jeśli `typeName` nie można znaleźć, wywołanie <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%29> metoda zwraca `null`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2778">If `typeName` cannot be found, the call to the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%29> method returns `null`.</span></span> <span data-ttu-id="6cdc9-2779">Nie zostanie zgłoszony wyjątek.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2779">It does not throw an exception.</span></span> <span data-ttu-id="6cdc9-2780">Do kontrolowania tego, czy wyjątek jest generowany, wywołania przeciążenia <xref:System.Type.GetType%2A> metody, która ma `throwOnError` parametru.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2780">To control whether an exception is thrown, call an overload of the <xref:System.Type.GetType%2A> method that has a `throwOnError` parameter.</span></span>  
  
 <span data-ttu-id="6cdc9-2781">Wywołanie tego przeciążenia metody jest taka sama jak wywołanie <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> przeciążenie metody i określając `false` dla `throwOnError` i `ignoreCase` parametrów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2781">Calling this method overload is the same as calling the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload and specifying `false` for the `throwOnError` and `ignoreCase` parameters.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-2782">
            <paramref name="typeName" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2782">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="6cdc9-2783">Inicjator klasy jest wywoływany i zgłasza wyjątek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2783">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6cdc9-2784">Błąd występuje, gdy <paramref name="typeName" /> jest przekształcany do nazwy typu i nazwy zestawu (na przykład, gdy nazwa typu prostego zawiera specjalne znaku o niezmienionym znaczeniu).</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2784">An error occurs when <paramref name="typeName" /> is parsed into a type name and an assembly name (for example, when the simple type name includes an unescaped special character).</span>
          </span>
          <span data-ttu-id="6cdc9-2785">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2785">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2786">
            <paramref name="typeName" /> reprezentuje typ ogólny, który jest typem wskaźnika <see langword="ByRef" /> typu, lub <see cref="T:System.Void" /> jako jeden z argumentów typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2786">
              <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          </span>
          <span data-ttu-id="6cdc9-2787">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2787">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2788">
            <paramref name="typeName" /> reprezentuje typ ogólny, który ma niepoprawną liczbę argumentów typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2788">
              <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          </span>
          <span data-ttu-id="6cdc9-2789">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2789">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2790">
            <paramref name="typeName" /> reprezentuje typ ogólny i jeden z argumentów typu nie spełniają ograniczeń dla odpowiedniego parametru typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2790">
              <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="6cdc9-2791">
            <paramref name="typeName" /> reprezentuje tablicę <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2791">
              <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="6cdc9-2792">Zestaw lub jeden z jego elementów zależnych został znaleziony, ale nie można go załadować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2792">The assembly or one of its dependencies was found, but could not be loaded.</span>
          </span>
          <span data-ttu-id="6cdc9-2793">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2793">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2794">
            <paramref name="typeName" /> zawiera nieprawidłową nazwę zestawu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2794">
              <paramref name="typeName" /> contains an invalid assembly name.</span>
          </span>
          <span data-ttu-id="6cdc9-2795">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2795">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2796">
            <paramref name="typeName" /> jest nazwą prawidłowego zestawu bez nazwy typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2796">
              <paramref name="typeName" /> is a valid assembly name without a type name.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="6cdc9-2797">Zestaw lub jeden z jego elementów zależnych nie są prawidłowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2797">The assembly or one of its dependencies is not valid.</span>
          </span>
          <span data-ttu-id="6cdc9-2798">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2798">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2799">Zestaw został skompilowany przy użyciu nowszej wersji aparatu plików wykonywalnych języka wspólnego niż wersja, która jest aktualnie załadowana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2799">The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt; assemblyResolver, Func&lt;System.Reflection.Assembly,string,bool,Type&gt; typeResolver, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, class System.Func`2&lt;class System.Reflection.AssemblyName, class System.Reflection.Assembly&gt; assemblyResolver, class System.Func`4&lt;class System.Reflection.Assembly, string, bool, class System.Type&gt; typeResolver, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, assemblyResolver As Func(Of AssemblyName, Assembly), typeResolver As Func(Of Assembly, String, Boolean, Type), throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, Func&lt;System::Reflection::AssemblyName ^, System::Reflection::Assembly ^&gt; ^ assemblyResolver, Func&lt;System::Reflection::Assembly ^, System::String ^, bool, Type ^&gt; ^ typeResolver, bool throwOnError);" />
      <MemberSignature Language="F#" Value="static member GetType : string * Func&lt;System.Reflection.AssemblyName, System.Reflection.Assembly&gt; * Func&lt;System.Reflection.Assembly, string, bool, Type&gt; * bool -&gt; Type" Usage="System.Type.GetType (typeName, assemblyResolver, typeResolver, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="assemblyResolver" Type="System.Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt;" />
        <Parameter Name="typeResolver" Type="System.Func&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt;" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="6cdc9-2800">Nazwa typu, który można pobrać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2800">The name of the type to get.</span>
          </span>
          <span data-ttu-id="6cdc9-2801">Jeśli <c>typeResolver</c> parametr zostanie podany, nazwa typu może być dowolny ciąg, który <c>typeResolver</c> jest w stanie rozwiązywania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2801">If the <c>typeResolver</c> parameter is provided, the type name can be any string that <c>typeResolver</c> is capable of resolving.</span>
          </span>
          <span data-ttu-id="6cdc9-2802">Jeśli <c>assemblyResolver</c> parametr ma pod warunkiem, lub jeśli rozpoznawania typu Standardowy jest używany, <c>typeName</c> musi być kwalifikowana nazwa zestawu (zobacz <see cref="P:System.Type.AssemblyQualifiedName" />), chyba że typ jest w trakcie wykonywania zestaw lub biblioteki Mscorlib.dll, w których przypadku wystarczy podać nazwę typu kwalifikowana przez jego przestrzeń nazw.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2802">If the <c>assemblyResolver</c> parameter is provided or if standard type resolution is used, <c>typeName</c> must be an assembly-qualified name (see <see cref="P:System.Type.AssemblyQualifiedName" />), unless the type is in the currently executing assembly or in Mscorlib.dll, in which case it is sufficient to supply the type name qualified by its namespace.</span>
          </span>
        </param>
        <param name="assemblyResolver">
          <span data-ttu-id="6cdc9-2803">Metoda, która lokalizuje i zwraca zestaw, który jest określony w <c>typeName</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2803">A method that locates and returns the assembly that is specified in <c>typeName</c>.</span>
          </span>
          <span data-ttu-id="6cdc9-2804">Nazwa zestawu jest przekazywany do <c>assemblyResolver</c> jako <see cref="T:System.Reflection.AssemblyName" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2804">The assembly name is passed to <c>assemblyResolver</c> as an <see cref="T:System.Reflection.AssemblyName" /> object.</span>
          </span>
          <span data-ttu-id="6cdc9-2805">Jeśli <c>typeName</c> nie zawiera nazwy zestawu, <c>assemblyResolver</c> nie zostanie wywołana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2805">If <c>typeName</c> does not contain the name of an assembly, <c>assemblyResolver</c> is not called.</span>
          </span>
          <span data-ttu-id="6cdc9-2806">Jeśli <c>assemblyResolver</c> nie jest podany, standardowego zestawu rozpoznawanie odbywa się.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2806">If <c>assemblyResolver</c> is not supplied, standard assembly resolution is performed.</span>
          </span>
          <span data-ttu-id="6cdc9-2807">Uwaga nie przechodzą z nieznanych lub niezaufanych wywołujących.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2807">Caution   Do not pass methods from unknown or untrusted callers.</span>
          </span>
          <span data-ttu-id="6cdc9-2808">Ten sposób może spowodować podniesienie uprawnień dla złośliwego kodu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2808">Doing so could result in elevation of privilege for malicious code.</span>
          </span>
          <span data-ttu-id="6cdc9-2809">Użyj tylko określonych przez siebie metod lub tych, które znasz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2809">Use only methods that you provide or that you are familiar with.</span>
          </span>
        </param>
        <param name="typeResolver">
          <span data-ttu-id="6cdc9-2810">Metody, która lokalizuje i zwraca typ, który jest określony przez <c>typeName</c> z zestawu, który jest zwracany przez <c>assemblyResolver</c> lub rozpoznawania zestawu standardowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2810">A method that locates and returns the type that is specified by <c>typeName</c> from the assembly that is returned by <c>assemblyResolver</c> or by standard assembly resolution.</span>
          </span>
          <span data-ttu-id="6cdc9-2811">Jeśli nie podano żadnego zestawu, metoda może dostarczyć jeden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2811">If no assembly is provided, the method can provide one.</span>
          </span>
          <span data-ttu-id="6cdc9-2812">Ta metoda również przyjmuje parametr, który określa, czy należy wykonać wyszukiwanie bez uwzględniania wielkości liter; <see langword="false" /> jest przekazywany do tego parametru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2812">The method also takes a parameter that specifies whether to perform a case-insensitive search; <see langword="false" /> is passed to that parameter.</span>
          </span>
          <span data-ttu-id="6cdc9-2813">Uwaga nie przechodzą z nieznanych lub niezaufanych wywołujących.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2813">Caution   Do not pass methods from unknown or untrusted callers.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="6cdc9-2814">
            <see langword="true" /> Aby zgłosić wyjątek, jeśli nie można odnaleźć typu; <see langword="false" /> do zwrócenia <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2814">
              <see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cdc9-2815">Określanie <see langword="false" /> powoduje również pominięcie niektórych warunków wyjątków, ale nie wszystkie z nich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2815">Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span>
          </span>
          <span data-ttu-id="6cdc9-2816">Zobacz sekcję Wyjątki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2816">See the Exceptions section.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-2817">Pobiera typ o określonej nazwie, określająca, czy zgłosić wyjątek, jeśli typ nie zostanie znaleziony i opcjonalnie podania niestandardowych metod można rozpoznać zestawu i typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2817">Gets the type with the specified name, specifying whether to throw an exception if the type is not found, and optionally providing custom methods to resolve the assembly and the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-2818">Typ o określonej nazwie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2818">The type with the specified name.</span>
          </span>
          <span data-ttu-id="6cdc9-2819">Jeśli typ nie zostanie znaleziony, <paramref name="throwOnError" /> parametr określa, czy <see langword="null" /> zwracany jest lub zostanie zgłoszony wyjątek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2819">If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span>
          </span>
          <span data-ttu-id="6cdc9-2820">W niektórych przypadkach występuje wyjątek niezależnie od wartości <paramref name="throwOnError" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2820">In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />.</span>
          </span>
          <span data-ttu-id="6cdc9-2821">Zobacz sekcję Wyjątki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2821">See the Exceptions section.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-2822">Scenariusze użycia dotyczące tę metodę i szczegółowe informacje o `assemblyResolver` i `typeResolver` parametrów można znaleźć w <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> przeciążenie metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2822">Usage scenarios for this method and details about the `assemblyResolver` and `typeResolver` parameters can be found in the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload.</span></span>  
  
 <span data-ttu-id="6cdc9-2823">Wywołanie tego przeciążenia metody jest taka sama jak wywołanie <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> przeciążenie metody i określając `false` dla `ignoreCase` parametru.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2823">Calling this method overload is the same as calling the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload and specifying `false` for the `ignoreCase` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-2824">
            <paramref name="typeName" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2824">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="6cdc9-2825">Inicjator klasy jest wywoływany i zgłasza wyjątek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2825">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="6cdc9-2826">
            <paramref name="throwOnError" /> jest <see langword="true" /> i nie można odnaleźć typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2826">
              <paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.</span>
          </span>
          <span data-ttu-id="6cdc9-2827">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2827">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2828">
            <paramref name="throwOnError" /> jest <see langword="true" /> i <paramref name="typeName" /> zawiera nieprawidłowe znaki, takie jak osadzona karta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2828">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.</span>
          </span>
          <span data-ttu-id="6cdc9-2829">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2829">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2830">
            <paramref name="throwOnError" /> jest <see langword="true" /> i <paramref name="typeName" /> jest ciągiem pustym.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2830">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span>
          </span>
          <span data-ttu-id="6cdc9-2831">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2831">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2832">
            <paramref name="throwOnError" /> jest <see langword="true" /> i <paramref name="typeName" /> reprezentuje typ tablicy z nieprawidłowym rozmiarem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2832">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span>
          </span>
          <span data-ttu-id="6cdc9-2833">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2833">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2834">
            <paramref name="typeName" /> reprezentuje tablicę <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2834">
              <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6cdc9-2835">Błąd występuje, gdy <paramref name="typeName" /> jest przekształcany do nazwy typu i nazwy zestawu (na przykład, gdy nazwa typu prostego zawiera specjalne znaku o niezmienionym znaczeniu).</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2835">An error occurs when <paramref name="typeName" /> is parsed into a type name and an assembly name (for example, when the simple type name includes an unescaped special character).</span>
          </span>
          <span data-ttu-id="6cdc9-2836">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2836">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2837">
            <paramref name="throwOnError" /> jest <see langword="true" /> i <paramref name="typeName" /> ma nieprawidłową składnię "(na przykład MyType[,\*,]").</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2837">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax (for example, "MyType[,\*,]").</span>
          </span>
          <span data-ttu-id="6cdc9-2838">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2838">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2839">
            <paramref name="typeName" /> reprezentuje typ ogólny, który jest typem wskaźnika <see langword="ByRef" /> typu, lub <see cref="T:System.Void" /> jako jeden z argumentów typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2839">
              <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          </span>
          <span data-ttu-id="6cdc9-2840">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2840">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2841">
            <paramref name="typeName" /> reprezentuje typ ogólny, który ma niepoprawną liczbę argumentów typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2841">
              <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          </span>
          <span data-ttu-id="6cdc9-2842">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2842">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2843">
            <paramref name="typeName" /> reprezentuje typ ogólny i jeden z argumentów typu nie spełniają ograniczeń dla odpowiedniego parametru typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2843">
              <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="6cdc9-2844">
            <paramref name="throwOnError" /> jest <see langword="true" /> i nie znaleziono zestawu lub jednej z jego zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2844">
              <paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span>
          </span>
          <span data-ttu-id="6cdc9-2845">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2845">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2846">
            <paramref name="typeName" /> zawiera nieprawidłową nazwę zestawu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2846">
              <paramref name="typeName" /> contains an invalid assembly name.</span>
          </span>
          <span data-ttu-id="6cdc9-2847">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2847">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2848">
            <paramref name="typeName" /> jest nazwą prawidłowego zestawu bez nazwy typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2848">
              <paramref name="typeName" /> is a valid assembly name without a type name.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="6cdc9-2849">Zestaw lub jeden z jego elementów zależnych został znaleziony, ale nie można go załadować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2849">The assembly or one of its dependencies was found, but could not be loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="6cdc9-2850">Zestaw lub jeden z jego elementów zależnych nie są prawidłowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2850">The assembly or one of its dependencies is not valid.</span>
          </span>
          <span data-ttu-id="6cdc9-2851">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2851">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-2852">Zestaw został skompilowany przy użyciu nowszej wersji aparatu plików wykonywalnych języka wspólnego niż wersja, która jest aktualnie załadowana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2852">The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt; assemblyResolver, Func&lt;System.Reflection.Assembly,string,bool,Type&gt; typeResolver, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, class System.Func`2&lt;class System.Reflection.AssemblyName, class System.Reflection.Assembly&gt; assemblyResolver, class System.Func`4&lt;class System.Reflection.Assembly, string, bool, class System.Type&gt; typeResolver, bool throwOnError, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, assemblyResolver As Func(Of AssemblyName, Assembly), typeResolver As Func(Of Assembly, String, Boolean, Type), throwOnError As Boolean, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, Func&lt;System::Reflection::AssemblyName ^, System::Reflection::Assembly ^&gt; ^ assemblyResolver, Func&lt;System::Reflection::Assembly ^, System::String ^, bool, Type ^&gt; ^ typeResolver, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member GetType : string * Func&lt;System.Reflection.AssemblyName, System.Reflection.Assembly&gt; * Func&lt;System.Reflection.Assembly, string, bool, Type&gt; * bool * bool -&gt; Type" Usage="System.Type.GetType (typeName, assemblyResolver, typeResolver, throwOnError, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="assemblyResolver" Type="System.Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt;" />
        <Parameter Name="typeResolver" Type="System.Func&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt;" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="6cdc9-2853">Nazwa typu, który można pobrać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2853">The name of the type to get.</span>
          </span>
          <span data-ttu-id="6cdc9-2854">Jeśli <c>typeResolver</c> parametr zostanie podany, nazwa typu może być dowolny ciąg, który <c>typeResolver</c> jest w stanie rozwiązywania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2854">If the <c>typeResolver</c> parameter is provided, the type name can be any string that <c>typeResolver</c> is capable of resolving.</span>
          </span>
          <span data-ttu-id="6cdc9-2855">Jeśli <c>assemblyResolver</c> parametr ma pod warunkiem, lub jeśli rozpoznawania typu Standardowy jest używany, <c>typeName</c> musi być kwalifikowana nazwa zestawu (zobacz <see cref="P:System.Type.AssemblyQualifiedName" />), chyba że typ jest w trakcie wykonywania zestaw lub biblioteki Mscorlib.dll, w których przypadku wystarczy podać nazwę typu kwalifikowana przez jego przestrzeń nazw.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2855">If the <c>assemblyResolver</c> parameter is provided or if standard type resolution is used, <c>typeName</c> must be an assembly-qualified name (see <see cref="P:System.Type.AssemblyQualifiedName" />), unless the type is in the currently executing assembly or in Mscorlib.dll, in which case it is sufficient to supply the type name qualified by its namespace.</span>
          </span>
        </param>
        <param name="assemblyResolver">
          <span data-ttu-id="6cdc9-2856">Metoda, która lokalizuje i zwraca zestaw, który jest określony w <c>typeName</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2856">A method that locates and returns the assembly that is specified in <c>typeName</c>.</span>
          </span>
          <span data-ttu-id="6cdc9-2857">Nazwa zestawu jest przekazywany do <c>assemblyResolver</c> jako <see cref="T:System.Reflection.AssemblyName" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2857">The assembly name is passed to <c>assemblyResolver</c> as an <see cref="T:System.Reflection.AssemblyName" /> object.</span>
          </span>
          <span data-ttu-id="6cdc9-2858">Jeśli <c>typeName</c> nie zawiera nazwy zestawu, <c>assemblyResolver</c> nie zostanie wywołana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2858">If <c>typeName</c> does not contain the name of an assembly, <c>assemblyResolver</c> is not called.</span>
          </span>
          <span data-ttu-id="6cdc9-2859">Jeśli <c>assemblyResolver</c> nie jest podany, standardowego zestawu rozpoznawanie odbywa się.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2859">If <c>assemblyResolver</c> is not supplied, standard assembly resolution is performed.</span>
          </span>
          <span data-ttu-id="6cdc9-2860">Uwaga nie przechodzą z nieznanych lub niezaufanych wywołujących.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2860">Caution   Do not pass methods from unknown or untrusted callers.</span>
          </span>
          <span data-ttu-id="6cdc9-2861">Ten sposób może spowodować podniesienie uprawnień dla złośliwego kodu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2861">Doing so could result in elevation of privilege for malicious code.</span>
          </span>
          <span data-ttu-id="6cdc9-2862">Użyj tylko określonych przez siebie metod lub tych, które znasz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2862">Use only methods that you provide or that you are familiar with.</span>
          </span>
        </param>
        <param name="typeResolver">
          <span data-ttu-id="6cdc9-2863">Metody, która lokalizuje i zwraca typ, który jest określony przez <c>typeName</c> z zestawu, który jest zwracany przez <c>assemblyResolver</c> lub rozpoznawania zestawu standardowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2863">A method that locates and returns the type that is specified by <c>typeName</c> from the assembly that is returned by <c>assemblyResolver</c> or by standard assembly resolution.</span>
          </span>
          <span data-ttu-id="6cdc9-2864">Jeśli nie podano żadnego zestawu, metoda może dostarczyć jeden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2864">If no assembly is provided, the method can provide one.</span>
          </span>
          <span data-ttu-id="6cdc9-2865">Ta metoda również przyjmuje parametr, który określa, czy należy wykonać wyszukiwanie bez uwzględniania wielkości liter; wartość <c>ignoreCase</c> jest przekazywany do tego parametru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2865">The method also takes a parameter that specifies whether to perform a case-insensitive search; the value of <c>ignoreCase</c> is passed to that parameter.</span>
          </span>
          <span data-ttu-id="6cdc9-2866">Uwaga nie przechodzą z nieznanych lub niezaufanych wywołujących.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2866">Caution   Do not pass methods from unknown or untrusted callers.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="6cdc9-2867">
            <see langword="true" /> Aby zgłosić wyjątek, jeśli nie można odnaleźć typu; <see langword="false" /> do zwrócenia <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2867">
              <see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cdc9-2868">Określanie <see langword="false" /> powoduje również pominięcie niektórych warunków wyjątków, ale nie wszystkie z nich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2868">Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span>
          </span>
          <span data-ttu-id="6cdc9-2869">Zobacz sekcję Wyjątki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2869">See the Exceptions section.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="6cdc9-2870">
            <see langword="true" /> Aby wykonać wyszukiwanie bez uwzględniania wielkości liter dla <c>typeName</c>, <see langword="false" /> przeprowadzić wyszukiwanie dla <c>typeName</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2870">
              <see langword="true" /> to perform a case-insensitive search for <c>typeName</c>, <see langword="false" /> to perform a case-sensitive search for <c>typeName</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-2871">Pobiera typ o określonej nazwie, określania, czy przeprowadzić wyszukiwanie i czy chcesz zgłosić wyjątek, jeśli typ nie zostanie znaleziony i opcjonalnie podania niestandardowych metod można rozpoznać zestawu i typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2871">Gets the type with the specified name, specifying whether to perform a case-sensitive search and whether to throw an exception if the type is not found, and optionally providing custom methods to resolve the assembly and the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-2872">Typ o określonej nazwie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2872">The type with the specified name.</span>
          </span>
          <span data-ttu-id="6cdc9-2873">Jeśli typ nie zostanie znaleziony, <paramref name="throwOnError" /> parametr określa, czy <see langword="null" /> zwracany jest lub zostanie zgłoszony wyjątek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2873">If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span>
          </span>
          <span data-ttu-id="6cdc9-2874">W niektórych przypadkach występuje wyjątek niezależnie od wartości <paramref name="throwOnError" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2874">In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />.</span>
          </span>
          <span data-ttu-id="6cdc9-2875">Zobacz sekcję Wyjątki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-2875">See the Exceptions section.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-2876">Użyj tego przeciążenia metody i jego skojarzone przeciążenia (<xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%29> i <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%29>) zastąpić domyślną implementację elementu <xref:System.Type.GetType%2A> metody z implementacjami bardziej elastyczne.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2876">Use this method overload and its associated overloads (<xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%29> and <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%29>) to replace the default implementation of the <xref:System.Type.GetType%2A> method with more flexible implementations.</span></span> <span data-ttu-id="6cdc9-2877">Podając własne metody, które rozpoznać nazwy typu i nazwy zestawów, zawierające je, możesz wykonać następujące czynności:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2877">By providing your own methods that resolve type names and the names of the assemblies that contain them, you can do the following:</span></span>  
  
-   <span data-ttu-id="6cdc9-2878">Kontroli wersji typu jest ładowany z zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2878">Control which version of an assembly a type is loaded from.</span></span>  
  
-   <span data-ttu-id="6cdc9-2879">Podaj inne miejsce do wyszukania nazwy typu, który nie zawiera nazwy zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2879">Provide another place to look for a type name that does not include an assembly name.</span></span>  
  
-   <span data-ttu-id="6cdc9-2880">Ładowanie zestawów przy użyciu nazwy zestawów częściowej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2880">Load assemblies using partial assembly names.</span></span>  
  
-   <span data-ttu-id="6cdc9-2881">Zwróć podklasy <xref:System.Type?displayProperty=nameWithType> nie są tworzone przez środowisko uruchomieniowe języka wspólnego (CLR).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2881">Return subclasses of <xref:System.Type?displayProperty=nameWithType> that are not created by the common language runtime (CLR).</span></span>  
  
 <span data-ttu-id="6cdc9-2882">Na przykład serializacji z tolerancją dla wersji ta metoda umożliwia wyszukiwanie dla zestawu "o najlepszej zgodności" przy użyciu nazwy częściowej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2882">For example, in version-tolerant serialization this method enables you to search for a "best fit" assembly by using a partial name.</span></span> <span data-ttu-id="6cdc9-2883">Inne przeciążenia <xref:System.Type.GetType%2A> metody wymagają nazwę typu kwalifikowanego zestawu, który zawiera numer wersji.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2883">Other overloads of the <xref:System.Type.GetType%2A> method require an assembly-qualified type name, which includes the version number.</span></span>  
  
 <span data-ttu-id="6cdc9-2884">Alternatywnych implementacji system typów może być konieczne do zwrócenia podklasy <xref:System.Type?displayProperty=nameWithType> nie są tworzone przez środowisko CLR; wszystkie typy, które są zwracane przez inne przeciążenia <xref:System.Type.GetType%2A> metody są typami środowiska wykonawczego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2884">Alternate implementations of the type system may need to return subclasses of <xref:System.Type?displayProperty=nameWithType> that are not created by the CLR; all types that are returned by other overloads of the <xref:System.Type.GetType%2A> method are runtime types.</span></span>  
  
<a name="usage_notes"></a>   
## <a name="usage-notes"></a><span data-ttu-id="6cdc9-2885">Uwagi dotyczące użytkowania</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2885">Usage Notes</span></span>  
 <span data-ttu-id="6cdc9-2886">Tego przeciążenia metody i jego skojarzone przeciążenia przeanalizować `typeName` w nazwie typu i nazwy zestawu, a następnie rozpoznawania nazw.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2886">This method overload and its associated overloads parse `typeName` into the name of a type and the name of an assembly, and then resolve the names.</span></span> <span data-ttu-id="6cdc9-2887">Rozpoznawanie nazwy zestawu wcześniejsza rozpoznawanie nazwy typu, ponieważ nazwa typu muszą być rozwiązane w kontekście zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2887">Resolution of the assembly name occurs before resolution of the type name, because a type name must be resolved in the context of an assembly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-2888">Jeśli nie jesteś zaznajomiony z pojęciem nazw kwalifikowanych dla zestawu typu, zobacz <xref:System.Type.AssemblyQualifiedName%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2888">If you are unfamiliar with the concept of assembly-qualified type names, see the <xref:System.Type.AssemblyQualifiedName%2A> property.</span></span>  
  
 <span data-ttu-id="6cdc9-2889">Jeśli `typeName` nie jest kwalifikowana nazwa zestawu, rozpoznawania zestawu jest pomijany.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2889">If `typeName` is not an assembly-qualified name, assembly resolution is skipped.</span></span> <span data-ttu-id="6cdc9-2890">Można rozwiązać nazwy niekwalifikowanej typów w kontekście Mscorlib.dll lub zawierający obecnie wykonywany zestaw lub opcjonalnie możesz podać zestawu w `typeResolver` parametru.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2890">Unqualified type names can be resolved in the context of Mscorlib.dll or the currently executing assembly, or you can optionally provide an assembly in the `typeResolver` parameter.</span></span> <span data-ttu-id="6cdc9-2891">W tym lub pominięcie Nazwa zestawu dla różnych rodzajów rozpoznawania nazw są wyświetlane jako tabelę w [rozpoznawanie nazw mieszanych](#mixed_name_resolution) sekcji.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2891">The effects of including or omitting the assembly name for different kinds of name resolution are displayed as a table in the [Mixed Name Resolution](#mixed_name_resolution) section.</span></span>  
  
 <span data-ttu-id="6cdc9-2892">Uwagi dotyczące użycia ogólne:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2892">General usage notes:</span></span>  
  
-   <span data-ttu-id="6cdc9-2893">Nie przekazuj metody `assemblyResolver` lub `typeResolver` jeśli pochodzą z nieznanych lub niezaufanych wywołujących.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2893">Do not pass methods to `assemblyResolver` or `typeResolver` if they come from unknown or untrusted callers.</span></span> <span data-ttu-id="6cdc9-2894">Użyj tylko określonych przez siebie metod lub tych, które znasz.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2894">Use only methods that you provide or that you are familiar with.</span></span>  
  
    > [!CAUTION]
    >  <span data-ttu-id="6cdc9-2895">Za pomocą metod z nieznanych lub niezaufanych wywołujących może spowodować podniesienie uprawnień dla złośliwego kodu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2895">Using methods from unknown or untrusted callers could result in elevation of privilege for malicious code.</span></span>  
  
-   <span data-ttu-id="6cdc9-2896">Jeżeli pominięto `assemblyResolver` i/lub `typeResolver` parametrów, wartość `throwOnError` parametr został przekazany do metody, które wykonują domyślnego rozwiązania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2896">If you omit the `assemblyResolver` and/or `typeResolver` parameters, the value of the `throwOnError` parameter is passed to the methods that perform the default resolution.</span></span>  
  
-   <span data-ttu-id="6cdc9-2897">Jeśli `throwOnError` jest `true`, ta metoda wyrzuca <xref:System.TypeLoadException> podczas `typeResolver` zwraca `null`, a <xref:System.IO.FileNotFoundException> podczas `assemblyResolver` zwraca `null`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2897">If `throwOnError` is `true`, this method throws a <xref:System.TypeLoadException> when `typeResolver` returns `null`, and a <xref:System.IO.FileNotFoundException> when `assemblyResolver` returns `null`.</span></span>  
  
-   <span data-ttu-id="6cdc9-2898">Ta metoda nie przechwytuje wyjątków zgłaszanych przez `assemblyResolver` i `typeResolver`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2898">This method does not catch exceptions thrown by `assemblyResolver` and `typeResolver`.</span></span> <span data-ttu-id="6cdc9-2899">Odpowiedzialność za wszelkie wyjątki wyrzucane przez metody rozpoznawania nazw.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2899">You are responsible for any exceptions that are thrown by the resolver methods.</span></span>  
  
<a name="resolving_assemblies"></a>   
### <a name="resolving-assemblies"></a><span data-ttu-id="6cdc9-2900">Rozpoznawanie zespołów</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2900">Resolving Assemblies</span></span>  
 <span data-ttu-id="6cdc9-2901">`assemblyResolver` Metoda otrzymuje <xref:System.Reflection.AssemblyName> obiektu, który jest generowany przez analizowanie ciągu nazwy zestawu, który znajduje się w `typeName`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2901">The `assemblyResolver` method receives an <xref:System.Reflection.AssemblyName> object, which is produced by parsing the string assembly name that is included in `typeName`.</span></span> <span data-ttu-id="6cdc9-2902">Jeśli `typeName` nie zawiera nazwy zestawu `assemblyResolver` nie jest wywoływany i `null` jest przekazywany do `typeResolver`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2902">If `typeName` does not contain an assembly name, `assemblyResolver` is not called and `null` is passed to `typeResolver`.</span></span>  
  
 <span data-ttu-id="6cdc9-2903">Jeśli `assemblyResolver` nie jest podany, standardowego zestawu badania jest używana do lokalizowania zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2903">If `assemblyResolver` is not supplied, standard assembly probing is used to locate the assembly.</span></span> <span data-ttu-id="6cdc9-2904">Jeśli `assemblyResolver` zostanie podany, <xref:System.Type.GetType%2A> metody nie powoduje standardowa badania; w takim przypadku należy zagwarantować, że Twoje `assemblyResolver` może obsłużyć wszystkie zestawy przekazywania do niej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2904">If `assemblyResolver` is provided, the <xref:System.Type.GetType%2A> method does not do standard probing; in that case you must ensure that your `assemblyResolver` can handle all the assemblies you pass to it.</span></span>  
  
 <span data-ttu-id="6cdc9-2905">`assemblyResolver` Metoda powinna zwrócić `null` Jeśli zestaw nie jest możliwe.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2905">The `assemblyResolver` method should return `null` if the assembly cannot be resolved.</span></span> <span data-ttu-id="6cdc9-2906">Jeśli `assemblyResolver` zwraca `null`, `typeResolver` nie jest wywoływana, a żadne dalsze przetwarzanie odbywa się; ponadto, jeśli `throwOnError` jest `true`, <xref:System.IO.FileNotFoundException> zgłaszany.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2906">If `assemblyResolver` returns `null`, `typeResolver` is not called and no further processing occurs; additionally, if `throwOnError` is `true`, a <xref:System.IO.FileNotFoundException> is thrown.</span></span>  
  
 <span data-ttu-id="6cdc9-2907">Jeśli <xref:System.Reflection.AssemblyName> przekazana do `assemblyResolver` częściowym jest nazwa co najmniej jeden z jego części `null`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2907">If the <xref:System.Reflection.AssemblyName> that is passed to `assemblyResolver` is a partial name, one or more of its parts are `null`.</span></span> <span data-ttu-id="6cdc9-2908">Na przykład, jeśli go nie ma wersji <xref:System.Reflection.AssemblyName.Version%2A> właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2908">For example, if it has no version, the <xref:System.Reflection.AssemblyName.Version%2A> property is `null`.</span></span> <span data-ttu-id="6cdc9-2909">Jeśli <xref:System.Reflection.AssemblyName.Version%2A> właściwości <xref:System.Reflection.AssemblyName.CultureInfo%2A> właściwości i <xref:System.Reflection.AssemblyName.GetPublicKeyToken%2A> wszystkie zwrotu metody `null`, a następnie podano prostą nazwę zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2909">If the <xref:System.Reflection.AssemblyName.Version%2A> property, the <xref:System.Reflection.AssemblyName.CultureInfo%2A> property, and the <xref:System.Reflection.AssemblyName.GetPublicKeyToken%2A> method all return `null`, then only the simple name of the assembly was supplied.</span></span> <span data-ttu-id="6cdc9-2910">`assemblyResolver` Metody można użyć lub zignorować wszystkie części nazwy zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2910">The `assemblyResolver` method can use or ignore all parts of the assembly name.</span></span>  
  
 <span data-ttu-id="6cdc9-2911">Efekty opcje rozdzielczości w innym zestawie są wyświetlane jako tabeli [rozpoznawanie nazw mieszanych](#mixed_name_resolution) dotyczącej nazwy typów prostych i kwalifikowanych dla zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2911">The effects of different assembly resolution options are displayed as a table in the [Mixed Name Resolution](#mixed_name_resolution) section, for simple and assembly-qualified type names.</span></span>  
  
<a name="resolving_types"></a>   
### <a name="resolving-types"></a><span data-ttu-id="6cdc9-2912">Rozpoznawanie typów</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2912">Resolving Types</span></span>  
 <span data-ttu-id="6cdc9-2913">Jeśli `typeName` nie określa nazwy zestawu `typeResolver` zawsze jest wywoływany.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2913">If `typeName` does not specify an assembly name, `typeResolver` is always called.</span></span> <span data-ttu-id="6cdc9-2914">Jeśli `typeName` Określa nazwę zestawu `typeResolver` jest wywoływana tylko wtedy, gdy jest to nazwa zestawu jest pomyślnie rozpoznana.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2914">If `typeName` specifies an assembly name, `typeResolver` is called only when the assembly name is successfully resolved.</span></span> <span data-ttu-id="6cdc9-2915">Jeśli `assemblyResolver` lub standardowego zestawu sondowanie zwraca `null`, `typeResolver` nie zostanie wywołana.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2915">If `assemblyResolver` or standard assembly probing returns `null`, `typeResolver` is not called.</span></span>  
  
 <span data-ttu-id="6cdc9-2916">`typeResolver` Metoda otrzymuje trzy argumenty:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2916">The `typeResolver` method receives three arguments:</span></span>  
  
-   <span data-ttu-id="6cdc9-2917">Zestaw do wyszukiwania lub `null` Jeśli `typeName` nie zawiera nazwy zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2917">The assembly to search or `null` if `typeName` does not contain an assembly name.</span></span>  
  
-   <span data-ttu-id="6cdc9-2918">Prosta nazwa typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2918">The simple name of the type.</span></span> <span data-ttu-id="6cdc9-2919">W przypadku typu zagnieżdżonego to najbardziej zewnętrznego typu zawierającego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2919">In the case of a nested type, this is the outermost containing type.</span></span> <span data-ttu-id="6cdc9-2920">W przypadku typu ogólnego to prostą nazwę typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2920">In the case of a generic type, this is the simple name of the generic type.</span></span>  
  
-   <span data-ttu-id="6cdc9-2921">Wartość logiczna, która jest `true` Jeśli wielkość liter nazwy typu ma być ignorowane.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2921">A Boolean value that is `true` if the case of type names is to be ignored.</span></span>  
  
 <span data-ttu-id="6cdc9-2922">Implementacja określa sposób, są używane następujące argumenty.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2922">The implementation determines the way these arguments are used.</span></span> <span data-ttu-id="6cdc9-2923">`typeResolver` Metoda powinna zwrócić `null` Jeśli nie można rozpoznać typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2923">The `typeResolver` method should return `null` if it cannot resolve the type.</span></span> <span data-ttu-id="6cdc9-2924">Jeśli `typeResolver` zwraca `null` i `throwOnError` jest `true`, to przeciążenie <xref:System.Type.GetType%2A> zgłasza <xref:System.TypeLoadException>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2924">If `typeResolver` returns `null` and `throwOnError` is `true`, this overload of <xref:System.Type.GetType%2A> throws a <xref:System.TypeLoadException>.</span></span>  
  
 <span data-ttu-id="6cdc9-2925">Efekty opcje rozpoznawania innego typu są wyświetlane jako tabeli [rozpoznawanie nazw mieszanych](#mixed_name_resolution) dotyczącej nazwy typów prostych i kwalifikowanych dla zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2925">The effects of different type resolution options are displayed as a table in the [Mixed Name Resolution](#mixed_name_resolution) section, for simple and assembly-qualified type names.</span></span>  
  
#### <a name="resolving-nested-types"></a><span data-ttu-id="6cdc9-2926">Rozpoznawanie zagnieżdżonych typów</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2926">Resolving Nested Types</span></span>  
 <span data-ttu-id="6cdc9-2927">Jeśli `typeName` jest typem zagnieżdżonym tylko nazwę prowadzące z typem jest przekazywany do `typeResolver`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2927">If `typeName` is a nested type, only the name of the outermost containing type is passed to `typeResolver`.</span></span> <span data-ttu-id="6cdc9-2928">Gdy `typeResolver` zwraca tego typu <xref:System.Type.GetNestedType%2A> metoda jest wywoływana cyklicznie, dopóki najbardziej typu zagnieżdżonego zostanie rozwiązany.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2928">When `typeResolver` returns this type, the <xref:System.Type.GetNestedType%2A> method is called recursively until the innermost nested type has been resolved.</span></span>  
  
#### <a name="resolving-generic-types"></a><span data-ttu-id="6cdc9-2929">Rozpoznawanie typów rodzajowych</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2929">Resolving Generic Types</span></span>  
 <span data-ttu-id="6cdc9-2930"><xref:System.Type.GetType%2A> Nosi nazwę cyklicznie, aby rozwiązać typów ogólnych: aby najpierw rozwiązać typ ogólny, a następnie Rozwiąż argumentów typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2930">The <xref:System.Type.GetType%2A> is called recursively to resolve generic types: First to resolve the generic type itself, and then to resolve its type arguments.</span></span> <span data-ttu-id="6cdc9-2931">Jeśli argument typu ogólnego, <xref:System.Type.GetType%2A> nosi nazwę cyklicznie, aby rozwiązać argumentów typu i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2931">If a type argument is generic, <xref:System.Type.GetType%2A> is called recursively to resolve its type arguments, and so on.</span></span>  
  
 <span data-ttu-id="6cdc9-2932">Kombinacja `assemblyResolver` i `typeResolver` podane muszą być w stanie rozwiązywania wszystkich poziomów to rekursji.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2932">The combination of `assemblyResolver` and `typeResolver` that you provide must be capable of resolving all levels of this recursion.</span></span> <span data-ttu-id="6cdc9-2933">Załóżmy, że podajesz `assemblyResolver` sterującą ładowanie `MyAssembly`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2933">For example, suppose you supply an `assemblyResolver` that controls the loading of `MyAssembly`.</span></span> <span data-ttu-id="6cdc9-2934">Załóżmy, że chcesz usunąć typ ogólny `Dictionary<string, MyType>` (`Dictionary(Of String, MyType)` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2934">Suppose you want to resolve the generic type `Dictionary<string, MyType>` (`Dictionary(Of String, MyType)` in Visual Basic).</span></span> <span data-ttu-id="6cdc9-2935">Następująca nazwa typu ogólnego może zostać przekazany:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2935">You might pass the following generic type name:</span></span>  
  
```  
"System.Collections.Generic.Dictionary`2[System.String,[MyNamespace.MyType, MyAssembly]]"  
```  
  
 <span data-ttu-id="6cdc9-2936">Należy zauważyć, że `MyType` jest argumentem typu tylko kwalifikowanego zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2936">Notice that `MyType` is the only assembly-qualified type argument.</span></span> <span data-ttu-id="6cdc9-2937">Nazwy <xref:System.Collections.Generic.Dictionary%602> i <xref:System.String> klasy nie są kwalifikowaną dla zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2937">The names of the <xref:System.Collections.Generic.Dictionary%602> and <xref:System.String> classes are not assembly-qualified.</span></span> <span data-ttu-id="6cdc9-2938">Twoje `typeResolver` stanie dojścia musi być jednym z zestawów lub `null`, ponieważ będzie ona otrzymywać `null` dla <xref:System.Collections.Generic.Dictionary%602> i <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2938">Your `typeResolver` must be able handle either an assembly or `null`, because it will receive `null` for <xref:System.Collections.Generic.Dictionary%602> and <xref:System.String>.</span></span> <span data-ttu-id="6cdc9-2939">Może obsługiwać tego przypadku poprzez wywołanie przeciążenia <xref:System.Type.GetType%2A> metody, która przyjmuje ciąg, ponieważ obie nazwy niekwalifikowanej typów Mscorlib.dll:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2939">It can handle that case by calling an overload of the <xref:System.Type.GetType%2A> method that takes a string, because both of the unqualified type names are in Mscorlib.dll:</span></span>  
  
 [!code-csharp[GetTypeOnSteroids#1](~/samples/snippets/csharp/VS_Snippets_CLR/gettypeonsteroids/cs/source.cs#1)]  
  
 <span data-ttu-id="6cdc9-2940">`assemblyResolver` Metoda nie jest wywoływana dla typu słownika i typu string, ponieważ te nazwy typów nie są kwalifikowaną dla zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2940">The `assemblyResolver` method is not called for the dictionary type and the string type, because those type names are not assembly-qualified.</span></span>  
  
 <span data-ttu-id="6cdc9-2941">Teraz załóżmy, że zamiast `System.String`, pierwszy typ ogólny, argument jest `YourType`, z `YourAssembly`:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2941">Now suppose that instead of `System.String`, the first generic argument type is `YourType`, from `YourAssembly`:</span></span>  
  
```  
"System.Collections.Generic.Dictionary`2[[YourNamespace.YourType, YourAssembly, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null], [MyNamespace.MyType, MyAssembly]]"  
```  
  
 <span data-ttu-id="6cdc9-2942">Ponieważ ten zestaw jest, aby biblioteka Mscorlib.dll ani zawierający obecnie wykonywany zestaw, nie można rozpoznać `YourType` bez nazwy kwalifikowanej zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2942">Because this assembly is neither Mscorlib.dll nor the currently executing assembly, you cannot resolve `YourType` without an assembly-qualified name.</span></span> <span data-ttu-id="6cdc9-2943">Ponieważ Twoje `assemblyResolve` będzie wywoływany rekursywnie, musi być w stanie obsłużyć tego przypadku.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2943">Because your `assemblyResolve` will be called recursively, it must be able to handle this case.</span></span> <span data-ttu-id="6cdc9-2944">Zamiast zwracać `null` dla zestawów innych niż `MyAssembly`, wykonuje obecnie ładowanie zestawu z użyciem podane <xref:System.Reflection.AssemblyName> obiektu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2944">Instead of returning `null` for assemblies other than `MyAssembly`, it now performs an assembly load using the supplied <xref:System.Reflection.AssemblyName> object.</span></span>  
  
 [!code-csharp[GetTypeOnSteroids#2](~/samples/snippets/csharp/VS_Snippets_CLR/gettypeonsteroids/cs/source.cs#2)]  
  
 <span data-ttu-id="6cdc9-2945">Powrót do [uwagi dotyczące użycia](#usage_notes).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2945">Back to [Usage Notes](#usage_notes).</span></span>  
  
#### <a name="resolving-type-names-with-special-characters"></a><span data-ttu-id="6cdc9-2946">Rozpoznawanie nazw typów ze znakami specjalnymi</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2946">Resolving Type Names with Special Characters</span></span>  
 <span data-ttu-id="6cdc9-2947">Niektóre znaki mają specjalne znaczenie w nazw kwalifikowanych dla zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2947">Certain characters have special meanings in assembly-qualified names.</span></span> <span data-ttu-id="6cdc9-2948">Nazwa typu prostego, który zawiera te znaki, znaki powodować błędy podczas analizowania gdy prosta nazwa jest częścią kwalifikowana nazwa zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2948">If a simple type name contains these characters, the characters cause parsing errors when the simple name is part of an assembly-qualified name.</span></span> <span data-ttu-id="6cdc9-2949">Aby uniknąć błędów podczas analizowania, znaki specjalne znakiem kreski ułamkowej odwróconej ucieczki musi przed można przekazać nazwę kwalifikowaną dla zestawu, aby <xref:System.Type.GetType%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2949">To avoid the parsing errors, you must escape the special characters with a backslash before you can pass the assembly-qualified name to the <xref:System.Type.GetType%2A> method.</span></span> <span data-ttu-id="6cdc9-2950">Na przykład, jeśli typ ma nazwę `Strange]Type`, znaku ucieczki musi zostać dodany wcześniej nawias kwadratowy w następujący sposób: `Strange\]Type`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2950">For example, if a type is named `Strange]Type`, the escape character must be added ahead of the square bracket as follows: `Strange\]Type`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-2951">Nazwy tych znaków specjalnych nie można utworzyć w języku Visual Basic lub C#, ale można utworzyć za pomocą języka Microsoft intermediate language (MSIL) lub emitowanie dynamicznych zestawów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2951">Names with such special characters cannot be created in Visual Basic or C#, but can be created by using Microsoft intermediate language (MSIL) or by emitting dynamic assemblies.</span></span>  
  
 <span data-ttu-id="6cdc9-2952">W poniższej tabeli przedstawiono znaki specjalne dla nazwy typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2952">The following table shows the special characters for type names.</span></span>  
  
|<span data-ttu-id="6cdc9-2953">Znak</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2953">Character</span></span>|<span data-ttu-id="6cdc9-2954">Znaczenie</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2954">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="6cdc9-2955">`,` (przecinek)</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2955">`,` (comma)</span></span>|<span data-ttu-id="6cdc9-2956">/ / / Ogranicznik nazw kwalifikowanych dla zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2956">Delimiter for assembly-qualified names.</span></span>|  
|<span data-ttu-id="6cdc9-2957">`[]` (nawiasy kwadratowe)</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2957">`[]` (square brackets)</span></span>|<span data-ttu-id="6cdc9-2958">Jako parę sufiks wskazuje typ tablicy; jako parę ogranicznik otacza listy argumentów ogólnych i nazw kwalifikowanych dla zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2958">As a suffix pair, indicates an array type; as a delimiter pair, encloses generic argument lists and assembly-qualified names.</span></span>|  
|<span data-ttu-id="6cdc9-2959">`&` (handlowe "i")</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2959">`&` (ampersand)</span></span>|<span data-ttu-id="6cdc9-2960">Jako sufiks wskazuje, że typ jest typem referencyjnym.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2960">As a suffix, indicates that a type is a reference type.</span></span>|  
|<span data-ttu-id="6cdc9-2961">`*` (gwiazdka)</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2961">`*` (asterisk)</span></span>|<span data-ttu-id="6cdc9-2962">Jako sufiks wskazuje, że typ jest typem wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2962">As a suffix, indicates that a type is a pointer type.</span></span>|  
|<span data-ttu-id="6cdc9-2963">`+` (znak plus)</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2963">`+` (plus)</span></span>|<span data-ttu-id="6cdc9-2964">/ / / Ogranicznik zagnieżdżone typy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2964">Delimiter for nested types.</span></span>|  
|<span data-ttu-id="6cdc9-2965">`\` (ukośnik odwrotny)</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2965">`\` (backslash)</span></span>|<span data-ttu-id="6cdc9-2966">Znak ucieczki.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2966">Escape character.</span></span>|  
  
 <span data-ttu-id="6cdc9-2967">Właściwości, takie jak <xref:System.Type.AssemblyQualifiedName%2A> return prawidłowo poprzedzone znakiem zmiany znaczenia ciągów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2967">Properties such as <xref:System.Type.AssemblyQualifiedName%2A> return correctly escaped strings.</span></span> <span data-ttu-id="6cdc9-2968">Należy przekazać poprawnie o zmienionym znaczeniu ciągów w celu <xref:System.Type.GetType%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2968">You must pass correctly escaped strings to the <xref:System.Type.GetType%2A> method.</span></span> <span data-ttu-id="6cdc9-2969">Z kolei <xref:System.Type.GetType%2A> metoda przekazuje poprawnie o zmienionym znaczeniu nazwy `typeResolver` oraz metody rozpoznawania typu domyślnego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2969">In turn, the <xref:System.Type.GetType%2A> method passes correctly escaped names to `typeResolver` and to the default type resolution methods.</span></span> <span data-ttu-id="6cdc9-2970">Jeśli chcesz porównać nazwy do nazwy o niezmienionym znaczeniu w `typeResolver`, należy usunąć znaki ucieczki.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2970">If you need to compare a name to an unescaped name in `typeResolver`, you must remove the escape characters.</span></span>  
  
 <span data-ttu-id="6cdc9-2971">Powrót do [uwagi dotyczące użycia](#usage_notes).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2971">Back to [Usage Notes](#usage_notes).</span></span>  
  
<a name="mixed_name_resolution"></a>   
## <a name="mixed-name-resolution"></a><span data-ttu-id="6cdc9-2972">Rozpoznawanie nazw mieszanych</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2972">Mixed Name Resolution</span></span>  
 <span data-ttu-id="6cdc9-2973">W poniższej tabeli przedstawiono interakcje między `assemblyResolver`, `typeResolver`i rozpoznawania nazw domyślnego dla wszystkich kombinacji nazwy typu i nazwy zestawu w `typeName`:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2973">The following table summarizes the interactions between `assemblyResolver`, `typeResolver`, and default name resolution, for all combinations of type name and assembly name in `typeName`:</span></span>  
  
|<span data-ttu-id="6cdc9-2974">Nazwa typu zawartości</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2974">Contents of type name</span></span>|<span data-ttu-id="6cdc9-2975">Metoda rozpoznawania zestawu</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2975">Assembly resolver method</span></span>|<span data-ttu-id="6cdc9-2976">Metody rozpoznawania typu</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2976">Type resolver method</span></span>|<span data-ttu-id="6cdc9-2977">Wynik</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2977">Result</span></span>|  
|---------------------------|------------------------------|--------------------------|------------|  
|<span data-ttu-id="6cdc9-2978">typ, zestaw</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2978">type, assembly</span></span>|<span data-ttu-id="6cdc9-2979">null</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2979">null</span></span>|<span data-ttu-id="6cdc9-2980">null</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2980">null</span></span>|<span data-ttu-id="6cdc9-2981">Równoważne z wywoływaniem <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> przeciążenie metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2981">Equivalent to calling the <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> method overload.</span></span>|  
|<span data-ttu-id="6cdc9-2982">typ, zestaw</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2982">type, assembly</span></span>|<span data-ttu-id="6cdc9-2983">podano</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2983">provided</span></span>|<span data-ttu-id="6cdc9-2984">null</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2984">null</span></span>|<span data-ttu-id="6cdc9-2985">`assemblyResolver` Zwraca zestaw lub zwraca `null` Jeśli nie można rozpoznać zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2985">`assemblyResolver` returns the assembly or returns `null` if it cannot resolve the assembly.</span></span> <span data-ttu-id="6cdc9-2986">Jeśli zestaw nie zostanie rozwiązany, <xref:System.Reflection.Assembly.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> przeciążenie metody jest używana do ładowania typów z zestawu; w przeciwnym razie wystąpi próba rozpoznać typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2986">If the assembly is resolved, the <xref:System.Reflection.Assembly.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> method overload is used to load the type from the assembly; otherwise, there is no attempt to resolve the type.</span></span>|  
|<span data-ttu-id="6cdc9-2987">typ, zestaw</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2987">type, assembly</span></span>|<span data-ttu-id="6cdc9-2988">null</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2988">null</span></span>|<span data-ttu-id="6cdc9-2989">podano</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2989">provided</span></span>|<span data-ttu-id="6cdc9-2990">Równoważne do konwertowania nazwy zestawu, aby <xref:System.Reflection.AssemblyName> obiektu i wywoływania <xref:System.Reflection.Assembly.Load%28System.Reflection.AssemblyName%29?displayProperty=nameWithType> przeciążenia metody, aby uzyskać zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2990">Equivalent to converting the assembly name to an <xref:System.Reflection.AssemblyName> object and calling the <xref:System.Reflection.Assembly.Load%28System.Reflection.AssemblyName%29?displayProperty=nameWithType> method overload to get the assembly.</span></span> <span data-ttu-id="6cdc9-2991">Jeśli zestaw nie zostanie rozwiązany, zostanie on przekazany do `typeResolver`; w przeciwnym razie `typeResolver` nie jest wywoływany i nie dalsze próby rozwiązania typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2991">If the assembly is resolved, it is passed to `typeResolver`; otherwise, `typeResolver` is not called and there is no further attempt to resolve the type.</span></span>|  
|<span data-ttu-id="6cdc9-2992">typ, zestaw</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2992">type, assembly</span></span>|<span data-ttu-id="6cdc9-2993">podano</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2993">provided</span></span>|<span data-ttu-id="6cdc9-2994">podano</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2994">provided</span></span>|<span data-ttu-id="6cdc9-2995">`assemblyResolver` Zwraca zestaw lub zwraca `null` Jeśli nie można rozpoznać zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2995">`assemblyResolver` returns the assembly or returns `null` if it cannot resolve the assembly.</span></span> <span data-ttu-id="6cdc9-2996">Jeśli zestaw nie zostanie rozwiązany, zostanie on przekazany do `typeResolver`; w przeciwnym razie `typeResolver` nie jest wywoływany i nie dalsze próby rozwiązania typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2996">If the assembly is resolved, it is passed to `typeResolver`; otherwise, `typeResolver` is not called and there is no further attempt to resolve the type.</span></span>|  
|<span data-ttu-id="6cdc9-2997">— typ</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2997">type</span></span>|<span data-ttu-id="6cdc9-2998">wartość NULL, podana</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2998">null, provided</span></span>|<span data-ttu-id="6cdc9-2999">null</span><span class="sxs-lookup"><span data-stu-id="6cdc9-2999">null</span></span>|<span data-ttu-id="6cdc9-3000">Równoważne z wywoływaniem <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> przeciążenie metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3000">Equivalent to calling the <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> method overload.</span></span> <span data-ttu-id="6cdc9-3001">Ponieważ nie podano nazwy zestawu, przeszukiwane są tylko Biblioteka Mscorlib.dll i zawierający obecnie wykonywany zestaw.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3001">Because the assembly name is not provided, only Mscorlib.dll and the currently executing assembly are searched.</span></span> <span data-ttu-id="6cdc9-3002">Jeśli `assemblyResolver` zostanie podana, zostanie zignorowany.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3002">If `assemblyResolver` is provided, it is ignored.</span></span>|  
|<span data-ttu-id="6cdc9-3003">— typ</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3003">type</span></span>|<span data-ttu-id="6cdc9-3004">wartość NULL, podana</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3004">null, provided</span></span>|<span data-ttu-id="6cdc9-3005">podano</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3005">provided</span></span>|<span data-ttu-id="6cdc9-3006">`typeResolver` jest wywoływana, i `null` jest przekazywana do zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3006">`typeResolver` is called, and `null` is passed for the assembly.</span></span> <span data-ttu-id="6cdc9-3007">`typeResolver` można podać typ z dowolnego zestawu, w tym zestawów, które ładuje do tego celu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3007">`typeResolver` can provide a type from any assembly, including assemblies it loads for the purpose.</span></span> <span data-ttu-id="6cdc9-3008">Jeśli `assemblyResolver` zostanie podana, zostanie zignorowany.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3008">If `assemblyResolver` is provided, it is ignored.</span></span>|  
|<span data-ttu-id="6cdc9-3009">zestaw</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3009">assembly</span></span>|<span data-ttu-id="6cdc9-3010">wartość NULL, podana</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3010">null, provided</span></span>|<span data-ttu-id="6cdc9-3011">wartość NULL, podana</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3011">null, provided</span></span>|<span data-ttu-id="6cdc9-3012">Element <xref:System.IO.FileLoadException> jest generowany, ponieważ nazwa zestawu jest analizowany, tak jakby był on nazwę typu kwalifikowanego zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3012">A <xref:System.IO.FileLoadException> is thrown, because the assembly name is parsed as if it were an assembly-qualified type name.</span></span> <span data-ttu-id="6cdc9-3013">Skutkuje to nieprawidłowa nazwa zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3013">This results in an invalid assembly name.</span></span>|  
  
 <span data-ttu-id="6cdc9-3014">Powrót do: [uwagi dotyczące użycia](#usage_notes), [rozpoznawania zestawów](#resolving_assemblies), [rozpoznawanie typów](#resolving_types).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3014">Back to: [Usage Notes](#usage_notes), [Resolving Assemblies](#resolving_assemblies), [Resolving Types](#resolving_types).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-3015">
            <paramref name="typeName" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3015">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="6cdc9-3016">Inicjator klasy jest wywoływany i zgłasza wyjątek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3016">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="6cdc9-3017">
            <paramref name="throwOnError" /> jest <see langword="true" /> i nie można odnaleźć typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3017">
              <paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.</span>
          </span>
          <span data-ttu-id="6cdc9-3018">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3018">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3019">
            <paramref name="throwOnError" /> jest <see langword="true" /> i <paramref name="typeName" /> zawiera nieprawidłowe znaki, takie jak osadzona karta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3019">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.</span>
          </span>
          <span data-ttu-id="6cdc9-3020">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3020">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3021">
            <paramref name="throwOnError" /> jest <see langword="true" /> i <paramref name="typeName" /> jest ciągiem pustym.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3021">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span>
          </span>
          <span data-ttu-id="6cdc9-3022">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3022">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3023">
            <paramref name="throwOnError" /> jest <see langword="true" /> i <paramref name="typeName" /> reprezentuje typ tablicy z nieprawidłowym rozmiarem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3023">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span>
          </span>
          <span data-ttu-id="6cdc9-3024">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3024">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3025">
            <paramref name="typeName" /> reprezentuje tablicę <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3025">
              <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6cdc9-3026">Błąd występuje, gdy <paramref name="typeName" /> jest przekształcany do nazwy typu i nazwy zestawu (na przykład, gdy nazwa typu prostego zawiera specjalne znaku o niezmienionym znaczeniu).</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3026">An error occurs when <paramref name="typeName" /> is parsed into a type name and an assembly name (for example, when the simple type name includes an unescaped special character).</span>
          </span>
          <span data-ttu-id="6cdc9-3027">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3027">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3028">
            <paramref name="throwOnError" /> jest <see langword="true" /> i <paramref name="typeName" /> ma nieprawidłową składnię "(na przykład MyType[,\*,]").</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3028">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax (for example, "MyType[,\*,]").</span>
          </span>
          <span data-ttu-id="6cdc9-3029">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3029">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3030">
            <paramref name="typeName" /> reprezentuje typ ogólny, który jest typem wskaźnika <see langword="ByRef" /> typu, lub <see cref="T:System.Void" /> jako jeden z argumentów typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3030">
              <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          </span>
          <span data-ttu-id="6cdc9-3031">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3031">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3032">
            <paramref name="typeName" /> reprezentuje typ ogólny, który ma niepoprawną liczbę argumentów typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3032">
              <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          </span>
          <span data-ttu-id="6cdc9-3033">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3033">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3034">
            <paramref name="typeName" /> reprezentuje typ ogólny i jeden z argumentów typu nie spełniają ograniczeń dla odpowiedniego parametru typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3034">
              <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="6cdc9-3035">
            <paramref name="throwOnError" /> jest <see langword="true" /> i nie znaleziono zestawu lub jednej z jego zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3035">
              <paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="6cdc9-3036">Zestaw lub jeden z jego elementów zależnych został znaleziony, ale nie można go załadować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3036">The assembly or one of its dependencies was found, but could not be loaded.</span>
          </span>
          <span data-ttu-id="6cdc9-3037">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3037">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3038">
            <paramref name="typeName" /> zawiera nieprawidłową nazwę zestawu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3038">
              <paramref name="typeName" /> contains an invalid assembly name.</span>
          </span>
          <span data-ttu-id="6cdc9-3039">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3039">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3040">
            <paramref name="typeName" /> jest nazwą prawidłowego zestawu bez nazwy typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3040">
              <paramref name="typeName" /> is a valid assembly name without a type name.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="6cdc9-3041">Zestaw lub jeden z jego elementów zależnych nie są prawidłowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3041">The assembly or one of its dependencies is not valid.</span>
          </span>
          <span data-ttu-id="6cdc9-3042">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3042">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3043">Zestaw został skompilowany przy użyciu nowszej wersji aparatu plików wykonywalnych języka wspólnego niż wersja, która jest aktualnie załadowana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3043">The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeArray">
      <MemberSignature Language="C#" Value="public static Type[] GetTypeArray (object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type[] GetTypeArray(object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeArray(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeArray (args As Object()) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;Type ^&gt; ^ GetTypeArray(cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="static member GetTypeArray : obj[] -&gt; Type[]" Usage="System.Type.GetTypeArray args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="args">
          <span data-ttu-id="6cdc9-3044">Tablica obiektów o typach, aby określić.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3044">An array of objects whose types to determine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-3045">Pobiera typy obiektów w określonej tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3045">Gets the types of the objects in the specified array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-3046">Tablica <see cref="T:System.Type" /> obiektów reprezentujących rodzaje odpowiednie elementy w <paramref name="args" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3046">An array of <see cref="T:System.Type" /> objects representing the types of the corresponding elements in <paramref name="args" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6cdc9-3047">Poniższy przykład kodu demonstruje sposób używania <xref:System.Type.GetTypeArray%2A> metody, aby wyświetlić listę typów elementów tablicy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3047">The following code example demonstrates how to use the <xref:System.Type.GetTypeArray%2A> method to list the types of the elements of an array.</span></span>  
  
 [!code-cpp[Type_GetTypeCode#3](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeCode/CPP/type_gettypecode.cpp#3)]
 [!code-csharp[Type_GetTypeCode#3](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeCode/CS/type_gettypecode.cs#3)]
 [!code-vb[Type_GetTypeCode#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeCode/VB/type_gettypecode.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-3048">
            <paramref name="args" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3048">
              <paramref name="args" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cdc9-3049">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3049">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3050">Co najmniej jeden z elementów w <paramref name="args" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3050">One or more of the elements in <paramref name="args" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="6cdc9-3051">Inicjatory klasy są wywoływane, i zgłasza wyjątek, co najmniej jeden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3051">The class initializers are invoked and at least one throws an exception.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public static TypeCode GetTypeCode (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TypeCode GetTypeCode(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeCode(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TypeCode GetTypeCode(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member GetTypeCode : Type -&gt; TypeCode" Usage="System.Type.GetTypeCode type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="6cdc9-3052">Typ, którego bazowego typu kodu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3052">The type whose underlying type code to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-3053">Pobiera podstawowy kod typu określonego <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3053">Gets the underlying type code of the specified <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-3054">Kod typu podstawowego lub <see cref="F:System.TypeCode.Empty" /> Jeśli <paramref name="type" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3054">The code of the underlying type, or <see cref="F:System.TypeCode.Empty" /> if <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3055">Przy dziedziczeniu z <xref:System.Type>, zachowania tej metody można zmienić poprzez zastąpienie <xref:System.Type.GetTypeCodeImpl%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3055">When you inherit from <xref:System.Type>, you can change the behavior of this method by overriding the <xref:System.Type.GetTypeCodeImpl%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3056">Poniższy przykład kodu demonstruje sposób, w jaki <xref:System.TypeCode> używać wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3056">The following code example demonstrates how the <xref:System.TypeCode> enumeration can be used.</span></span> <span data-ttu-id="6cdc9-3057">W bloku decyzji wewnątrz `WriteObjectInfo` metody <xref:System.TypeCode> z <xref:System.Object> parametru jest badany i odpowiedni komunikat jest wyświetlony w konsoli.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3057">In a decision block inside the `WriteObjectInfo` method, the <xref:System.TypeCode> of an <xref:System.Object> parameter is examined, and an appropriate message is written to the console.</span></span>  
  
 [!code-cpp[System.TypeCode#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TypeCode/CPP/iconvertible.cpp#2)]
 [!code-csharp[System.TypeCode#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TypeCode/CS/iconvertible.cs#2)]
 [!code-vb[System.TypeCode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TypeCode/VB/iconvertible.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TypeCode" />
        <altmember cref="M:System.Type.GetTypeCodeImpl" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeCodeImpl">
      <MemberSignature Language="C#" Value="protected virtual TypeCode GetTypeCodeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.TypeCode GetTypeCodeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeCodeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetTypeCodeImpl () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual TypeCode GetTypeCodeImpl();" />
      <MemberSignature Language="F#" Value="abstract member GetTypeCodeImpl : unit -&gt; TypeCode&#xA;override this.GetTypeCodeImpl : unit -&gt; TypeCode" Usage="type.GetTypeCodeImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3058">Zwraca podstawowy kod typu tego <see cref="T:System.Type" /> wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3058">Returns the underlying type code of this <see cref="T:System.Type" /> instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-3059">Kod typu podstawowego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3059">The type code of the underlying type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3060">Ta metoda zapewnia to implementacja `static` (w języku C#) lub `Shared` (w języku Visual Basic) <xref:System.Type.GetTypeCode%28System.Type%29> metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3060">This method provides the implementation for the `static` (in C#) or `Shared` (in Visual Basic) <xref:System.Type.GetTypeCode%28System.Type%29> method.</span></span> <span data-ttu-id="6cdc9-3061">Przy dziedziczeniu z <xref:System.Type>, możesz zastąpić tę metodę, aby podać własną implementację <xref:System.Type.GetTypeCode%2A>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3061">When you inherit from <xref:System.Type>, you can override this method to provide your own implementation of <xref:System.Type.GetTypeCode%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TypeCode" />
        <altmember cref="M:System.Type.GetTypeCode(System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetTypeFromCLSID">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3062">Pobiera typ ze skojarzonym identyfikatorem określonej klasy (CLSID).</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3062">Gets the type associated with the specified class identifier (CLSID).</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetTypeFromCLSID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromCLSID (Guid clsid);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromCLSID(valuetype System.Guid clsid) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromCLSID(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromCLSID (clsid As Guid) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromCLSID(Guid clsid);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromCLSID : Guid -&gt; Type" Usage="System.Type.GetTypeFromCLSID clsid" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="clsid">
          <span data-ttu-id="6cdc9-3063">Identyfikator CLSID typu, który można pobrać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3063">The CLSID of the type to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-3064">Pobiera typ ze skojarzonym identyfikatorem określonej klasy (CLSID).</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3064">Gets the type associated with the specified class identifier (CLSID).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-3065">
            <see langword="System.__ComObject" /> niezależnie od tego, czy identyfikator CLSID jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3065">
              <see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3066"><xref:System.Type.GetTypeFromCLSID%2A> Metoda obsługuje dostęp z późnym wiązaniem do niezarządzanych obiektów COM z aplikacji .NET Framework, gdy wiesz identyfikator klasy obiektu COM (CLSID).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3066">The <xref:System.Type.GetTypeFromCLSID%2A> method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).</span></span>  <span data-ttu-id="6cdc9-3067">Identyfikator klasy dla klasy COM jest zdefiniowany w kluczu HKEY_CLASSES_ROOT\CLSID rejestru.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3067">The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\CLSID key of the registry.</span></span> <span data-ttu-id="6cdc9-3068">Można pobrać wartość <xref:System.Type.IsCOMObject%2A> właściwości w celu określenia, czy typ zwracany przez tę metodę jest obiektem COM.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3068">You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="6cdc9-3069">Możesz wywołać <xref:System.Type.GetTypeFromProgID%2A> metody z późnym wiązaniem dostępu do modelu COM obiekty, których identyfikator programowy (ProgID) wiadomo.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3069">You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.</span></span>  
  
 <span data-ttu-id="6cdc9-3070">Utworzenie wystąpienia niezarządzanych obiektu modelu COM z jego identyfikator CLSID jest procesem dwuetapowym:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3070">Instantiating an unmanaged COM object from its CLSID is a two-step process:</span></span>  
  
1.  <span data-ttu-id="6cdc9-3071">Pobierz <xref:System.Type> obiekt, który reprezentuje`__ComObject` , który odpowiada identyfikator CLSID, wywołując <xref:System.Type.GetTypeFromCLSID%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3071">Get a <xref:System.Type> object that represents the`__ComObject` that corresponds to the CLSID by calling the <xref:System.Type.GetTypeFromCLSID%2A> method.</span></span>  
  
2.  <span data-ttu-id="6cdc9-3072">Wywołaj <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> metodę, aby utworzyć wystąpienie obiektu COM.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3072">Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> method to instantiate the COM object.</span></span>  
  
 <span data-ttu-id="6cdc9-3073">Zobacz przykład ilustracja.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3073">See the example for an illustration.</span></span>  
  
 <span data-ttu-id="6cdc9-3074"><xref:System.Type.GetTypeFromCLSID%28System.Guid%29> Przeciążenia ignoruje wszelkie wyjątki, które mogą wystąpić podczas tworzenia wystąpienia <xref:System.Type> na podstawie obiektu `clsid` argumentu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3074">The <xref:System.Type.GetTypeFromCLSID%28System.Guid%29> overload ignores any exception that may occur when instantiating a <xref:System.Type> object based on the `clsid` argument.</span></span> <span data-ttu-id="6cdc9-3075">Należy zauważyć, że jest zgłaszany żaden wyjątek, jeśli `clsid` nie zostanie znaleziony w rejestrze.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3075">Note that no exception is thrown if `clsid` is not found in the registry.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3076">W poniższym przykładzie użyto identyfikator CLSID programu Microsoft Word [obiekt aplikacji](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word) można pobrać typu modelu COM, który reprezentuje aplikację Microsoft Word.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3076">The following example uses the CLSID of the Microsoft Word [Application object](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word) to retrieve a COM type that represents the Microsoft Word application.</span></span> <span data-ttu-id="6cdc9-3077">Następnie tworzy wystąpienie typu przez wywołanie metody <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> metody i zamyka te błędy, wywołując [Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word) metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3077">It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method, and closes it by calling the [Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word) method.</span></span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid1.cs#1)]
 [!code-vb[System.Type.GetTypeFromCLSID#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>
            <span data-ttu-id="6cdc9-3078">Ta metoda jest przeznaczona do użycia podczas pracy z obiektami COM, a nie z obiektami .NET Framework.</span>
            <span class="sxs-lookup">
              <span data-stu-id="6cdc9-3078">This method is intended for use when working with COM objects, not with .NET Framework objects.</span>
            </span>
            <span data-ttu-id="6cdc9-3079">Wszystkie zarządzane obiekty, w tym te, które są widoczne dla modelu COM (oznacza to, że ich <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> atrybut jest <see langword="true" />) ma identyfikator GUID, który jest zwracany przez <see cref="P:System.Type.GUID" /> właściwości.</span>
            <span class="sxs-lookup">
              <span data-stu-id="6cdc9-3079">All managed objects, including those that are visible to COM (that is, their <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribute is <see langword="true" />) have a GUID that is returned by the <see cref="P:System.Type.GUID" /> property.</span>
            </span>
            <span data-ttu-id="6cdc9-3080">Mimo że metoda zwraca <see cref="T:System.Type" /> obiektów obiekt, który odnosi się do identyfikatora GUID dla programu .NET Framework, nie można użyć, które <see cref="T:System.Type" /> obiektu do utworzenia wystąpienia typu przez wywołanie metody <see cref="M:System.Activator.CreateInstance(System.Type)" /> metody, jak w poniższym przykładzie pokazano.</span>
            <span class="sxs-lookup">
              <span data-stu-id="6cdc9-3080">Although the method returns a <see cref="T:System.Type" /> object that corresponds to the GUID for .NET Framework objects, you can't use that <see cref="T:System.Type" /> object to create a type instance by calling the  <see cref="M:System.Activator.CreateInstance(System.Type)" /> method, as the following example shows.</span>
            </span>
            <span data-ttu-id="6cdc9-3081">[! code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [! kodu vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span>
            <span class="sxs-lookup">
              <span data-stu-id="6cdc9-3081">[!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span>
            </span>
            <span data-ttu-id="6cdc9-3082">Zamiast tego <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> powinna służyć wyłącznie do pobrania identyfikatora GUID niezarządzanych obiektów COM i wynikowy <see cref="T:System.Type" /> obiekt, który jest przekazywany do <see cref="M:System.Activator.CreateInstance(System.Type)" /> metody musi reprezentować obiekt COM niezarządzanych.</span>
            <span class="sxs-lookup">
              <span data-stu-id="6cdc9-3082">Instead, the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> should only be used to retrieve the GUID of an unmanaged COM object, and the resulting <see cref="T:System.Type" /> object that is passed to the <see cref="M:System.Activator.CreateInstance(System.Type)" /> method must represent an unmanaged COM object.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromCLSID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromCLSID (Guid clsid, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromCLSID(valuetype System.Guid clsid, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromCLSID(System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromCLSID (clsid As Guid, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromCLSID(Guid clsid, bool throwOnError);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromCLSID : Guid * bool -&gt; Type" Usage="System.Type.GetTypeFromCLSID (clsid, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.Guid" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="clsid">
          <span data-ttu-id="6cdc9-3083">Identyfikator CLSID typu, który można pobrać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3083">The CLSID of the type to get.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="6cdc9-3084">
            <see langword="true" /> Umożliwia zgłoszenie każdego wyjątku, który występuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3084">
              <see langword="true" /> to throw any exception that occurs.</span>
          </span>
          <span data-ttu-id="6cdc9-3085">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3085">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3086">
            <see langword="false" /> umożliwia zignorowanie każdego wyjątku, który występuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3086">
              <see langword="false" /> to ignore any exception that occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-3087">Pobiera typ ze skojarzonym identyfikatorem określonej klasy (CLSID) określająca, czy zgłosić wyjątek, jeśli wystąpi błąd podczas ładowania typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3087">Gets the type associated with the specified class identifier (CLSID), specifying whether to throw an exception if an error occurs while loading the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-3088">
            <see langword="System.__ComObject" /> niezależnie od tego, czy identyfikator CLSID jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3088">
              <see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3089"><xref:System.Type.GetTypeFromCLSID%2A> Metoda obsługuje dostęp z późnym wiązaniem do niezarządzanych obiektów COM z aplikacji .NET Framework, gdy wiesz identyfikator klasy obiektu COM (CLSID).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3089">The <xref:System.Type.GetTypeFromCLSID%2A> method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).</span></span>  <span data-ttu-id="6cdc9-3090">Identyfikator klasy dla klasy COM jest zdefiniowany w kluczu HKEY_CLASSES_ROOT\CLSID rejestru.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3090">The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\CLSID key of the registry.</span></span> <span data-ttu-id="6cdc9-3091">Można pobrać wartość <xref:System.Type.IsCOMObject%2A> właściwości w celu określenia, czy typ zwracany przez tę metodę jest obiektem COM.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3091">You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="6cdc9-3092">Możesz wywołać <xref:System.Type.GetTypeFromProgID%2A> metody z późnym wiązaniem dostępu do modelu COM obiekty, których identyfikator programowy (ProgID) wiadomo.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3092">You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.</span></span>  
  
 <span data-ttu-id="6cdc9-3093">Utworzenie wystąpienia niezarządzanych obiektu modelu COM z jego identyfikator CLSID jest procesem dwuetapowym:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3093">Instantiating an unmanaged COM object from its CLSID is a two-step process:</span></span>  
  
1.  <span data-ttu-id="6cdc9-3094">Pobierz <xref:System.Type> obiekt, który reprezentuje `__ComObject` , który odpowiada identyfikator CLSID, wywołując <xref:System.Type.GetTypeFromCLSID%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3094">Get a <xref:System.Type> object that represents the `__ComObject` that corresponds to the CLSID by calling the <xref:System.Type.GetTypeFromCLSID%2A> method.</span></span>  
  
2.  <span data-ttu-id="6cdc9-3095">Wywołaj <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> metodę, aby utworzyć wystąpienie obiektu COM.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3095">Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> method to instantiate the COM object.</span></span>  
  
 <span data-ttu-id="6cdc9-3096">Zobacz przykład ilustracja.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3096">See the example for an illustration.</span></span>  
  
 <span data-ttu-id="6cdc9-3097">Wyjątki, takie jak <xref:System.OutOfMemoryException> zostanie zgłoszony podczas określania `true` dla `throwOnError`, ale zakończy się niepowodzeniem dla niezarejestrowanych CLSID.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3097">Exceptions such as <xref:System.OutOfMemoryException> will be thrown when specifying `true` for `throwOnError`, but it will not fail for unregistered CLSIDs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3098">W poniższym przykładzie użyto identyfikator CLSID programu Microsoft Word [obiekt aplikacji](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word) można pobrać typu modelu COM, który reprezentuje aplikację Microsoft Word.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3098">The following example uses the CLSID of the Microsoft Word [Application object](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word) to retrieve a COM type that represents the Microsoft Word application.</span></span> <span data-ttu-id="6cdc9-3099">Następnie tworzy wystąpienie typu przez wywołanie metody <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> metody i zamyka te błędy, wywołując [Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word) metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3099">It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method, and closes it by calling the [Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word) method.</span></span> <span data-ttu-id="6cdc9-3100">Wyjątek jest generowany, jeśli wystąpi błąd podczas ładowania typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3100">An exception is thrown if an error occurs while loading the type.</span></span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid_ex2.cs#2)]
 [!code-vb[System.Type.GetTypeFromCLSID#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid_ex2.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>
            <span data-ttu-id="6cdc9-3101">Ta metoda jest przeznaczona do użycia podczas pracy z obiektami COM, a nie z obiektami .NET Framework.</span>
            <span class="sxs-lookup">
              <span data-stu-id="6cdc9-3101">This method is intended for use when working with COM objects, not with .NET Framework objects.</span>
            </span>
            <span data-ttu-id="6cdc9-3102">Wszystkie zarządzane obiekty, w tym te, które są widoczne dla modelu COM (oznacza to, że ich <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> atrybut jest <see langword="true" />) ma identyfikator GUID, który jest zwracany przez <see cref="P:System.Type.GUID" /> właściwości.</span>
            <span class="sxs-lookup">
              <span data-stu-id="6cdc9-3102">All managed objects, including those that are visible to COM (that is, their <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribute is <see langword="true" />) have a GUID that is returned by the <see cref="P:System.Type.GUID" /> property.</span>
            </span>
            <span data-ttu-id="6cdc9-3103">Mimo że metoda zwraca <see cref="T:System.Type" /> obiektów obiekt, który odnosi się do identyfikatora GUID dla programu .NET Framework, nie można użyć, które <see cref="T:System.Type" /> obiektu do utworzenia wystąpienia typu przez wywołanie metody <see cref="M:System.Activator.CreateInstance(System.Type)" /> metody, jak w poniższym przykładzie pokazano.</span>
            <span class="sxs-lookup">
              <span data-stu-id="6cdc9-3103">Although the method returns a <see cref="T:System.Type" /> object that corresponds to the GUID for .NET Framework objects, you can't use that <see cref="T:System.Type" /> object to create a type instance by calling the  <see cref="M:System.Activator.CreateInstance(System.Type)" /> method, as the following example shows.</span>
            </span>
            <span data-ttu-id="6cdc9-3104">[! code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [! kodu vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span>
            <span class="sxs-lookup">
              <span data-stu-id="6cdc9-3104">[!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span>
            </span>
            <span data-ttu-id="6cdc9-3105">Zamiast tego <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> powinna służyć wyłącznie do pobrania identyfikatora GUID niezarządzanych obiektów COM i wynikowy <see cref="T:System.Type" /> obiekt, który jest przekazywany do <see cref="M:System.Activator.CreateInstance(System.Type)" /> metody musi reprezentować obiekt COM niezarządzanych.</span>
            <span class="sxs-lookup">
              <span data-stu-id="6cdc9-3105">Instead, the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> should only be used to retrieve the GUID of an unmanaged COM object, and the resulting <see cref="T:System.Type" /> object that is passed to the <see cref="M:System.Activator.CreateInstance(System.Type)" /> method must represent an unmanaged COM object.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromCLSID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromCLSID (Guid clsid, string server);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromCLSID(valuetype System.Guid clsid, string server) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromCLSID(System.Guid,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromCLSID (clsid As Guid, server As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromCLSID(Guid clsid, System::String ^ server);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromCLSID : Guid * string -&gt; Type" Usage="System.Type.GetTypeFromCLSID (clsid, server)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.Guid" />
        <Parameter Name="server" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="clsid">
          <span data-ttu-id="6cdc9-3106">Identyfikator CLSID typu, który można pobrać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3106">The CLSID of the type to get.</span>
          </span>
        </param>
        <param name="server">
          <span data-ttu-id="6cdc9-3107">Serwer, z którego można załadować typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3107">The server from which to load the type.</span>
          </span>
          <span data-ttu-id="6cdc9-3108">Jeśli nazwa serwera jest <see langword="null" />, ta metoda zostanie automatycznie przywrócona do komputera lokalnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3108">If the server name is <see langword="null" />, this method automatically reverts to the local machine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-3109">Pobiera typ ze skojarzonym identyfikatorem określonej klasy (CLSID) z określonego serwera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3109">Gets the type associated with the specified class identifier (CLSID) from the specified server.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-3110">
            <see langword="System.__ComObject" /> niezależnie od tego, czy identyfikator CLSID jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3110">
              <see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3111"><xref:System.Type.GetTypeFromCLSID%2A> Metoda obsługuje dostęp z późnym wiązaniem do niezarządzanych obiektów COM z aplikacji .NET Framework, gdy wiesz identyfikator klasy obiektu COM (CLSID).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3111">The <xref:System.Type.GetTypeFromCLSID%2A> method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).</span></span>  <span data-ttu-id="6cdc9-3112">Identyfikator klasy dla klasy COM jest zdefiniowany w kluczu HKEY_CLASSES_ROOT\CLSID rejestru.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3112">The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\CLSID key of the registry.</span></span> <span data-ttu-id="6cdc9-3113">Można pobrać wartość <xref:System.Type.IsCOMObject%2A> właściwości w celu określenia, czy typ zwracany przez tę metodę jest obiektem COM.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3113">You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="6cdc9-3114">Możesz wywołać <xref:System.Type.GetTypeFromProgID%2A> metody z późnym wiązaniem dostępu do modelu COM obiekty, których identyfikator programowy (ProgID) wiadomo.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3114">You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.</span></span>  
  
 <span data-ttu-id="6cdc9-3115">Utworzenie wystąpienia niezarządzanych obiektu modelu COM z jego identyfikator CLSID jest procesem dwuetapowym:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3115">Instantiating an unmanaged COM object from its CLSID is a two-step process:</span></span>  
  
1.  <span data-ttu-id="6cdc9-3116">Pobierz <xref:System.Type> obiekt, który reprezentuje `__ComObject` , który odpowiada identyfikator CLSID, wywołując <xref:System.Type.GetTypeFromCLSID%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3116">Get a <xref:System.Type> object that represents the `__ComObject` that corresponds to the CLSID by calling the <xref:System.Type.GetTypeFromCLSID%2A> method.</span></span>  
  
2.  <span data-ttu-id="6cdc9-3117">Wywołaj <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> metodę, aby utworzyć wystąpienie obiektu COM.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3117">Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> method to instantiate the COM object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3118">W poniższym przykładzie użyto identyfikator CLSID programu Microsoft Word [obiekt aplikacji](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word) można pobrać typu modelu COM, który reprezentuje aplikację Microsoft Word z serwerem o nazwie computer17.central.contoso.com.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3118">The following example uses the CLSID of the Microsoft Word [Application object](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word) to retrieve a COM type that represents the Microsoft Word application from a server named computer17.central.contoso.com.</span></span> <span data-ttu-id="6cdc9-3119">Następnie tworzy wystąpienie typu przez wywołanie metody <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> metody i zamyka te błędy, wywołując [Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word) metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3119">It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method, and closes it by calling the [Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word) method.</span></span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid_ex3.cs#3)]
 [!code-vb[System.Type.GetTypeFromCLSID#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid_ex3.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>
            <span data-ttu-id="6cdc9-3120">Ta metoda jest przeznaczona do użycia podczas pracy z obiektami COM, a nie z obiektami .NET Framework.</span>
            <span class="sxs-lookup">
              <span data-stu-id="6cdc9-3120">This method is intended for use when working with COM objects, not with .NET Framework objects.</span>
            </span>
            <span data-ttu-id="6cdc9-3121">Wszystkie zarządzane obiekty, w tym te, które są widoczne dla modelu COM (oznacza to, że ich <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> atrybut jest <see langword="true" />) ma identyfikator GUID, który jest zwracany przez <see cref="P:System.Type.GUID" /> właściwości.</span>
            <span class="sxs-lookup">
              <span data-stu-id="6cdc9-3121">All managed objects, including those that are visible to COM (that is, their <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribute is <see langword="true" />) have a GUID that is returned by the <see cref="P:System.Type.GUID" /> property.</span>
            </span>
            <span data-ttu-id="6cdc9-3122">Mimo że metoda zwraca <see cref="T:System.Type" /> obiektów obiekt, który odnosi się do identyfikatora GUID dla programu .NET Framework, nie można użyć, które <see cref="T:System.Type" /> obiektu do utworzenia wystąpienia typu przez wywołanie metody <see cref="M:System.Activator.CreateInstance(System.Type)" /> metody, jak w poniższym przykładzie pokazano.</span>
            <span class="sxs-lookup">
              <span data-stu-id="6cdc9-3122">Although the method returns a <see cref="T:System.Type" /> object that corresponds to the GUID for .NET Framework objects, you can't use that <see cref="T:System.Type" /> object to create a type instance by calling the  <see cref="M:System.Activator.CreateInstance(System.Type)" /> method, as the following example shows.</span>
            </span>
            <span data-ttu-id="6cdc9-3123">[! code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [! kodu vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span>
            <span class="sxs-lookup">
              <span data-stu-id="6cdc9-3123">[!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span>
            </span>
            <span data-ttu-id="6cdc9-3124">Zamiast tego <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> powinna służyć wyłącznie do pobrania identyfikatora GUID niezarządzanych obiektów COM i wynikowy <see cref="T:System.Type" /> obiekt, który jest przekazywany do <see cref="M:System.Activator.CreateInstance(System.Type)" /> metody musi reprezentować obiekt COM niezarządzanych.</span>
            <span class="sxs-lookup">
              <span data-stu-id="6cdc9-3124">Instead, the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> should only be used to retrieve the GUID of an unmanaged COM object, and the resulting <see cref="T:System.Type" /> object that is passed to the <see cref="M:System.Activator.CreateInstance(System.Type)" /> method must represent an unmanaged COM object.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromCLSID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromCLSID (Guid clsid, string server, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromCLSID(valuetype System.Guid clsid, string server, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromCLSID (clsid As Guid, server As String, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromCLSID(Guid clsid, System::String ^ server, bool throwOnError);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromCLSID : Guid * string * bool -&gt; Type" Usage="System.Type.GetTypeFromCLSID (clsid, server, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.Guid" />
        <Parameter Name="server" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="clsid">
          <span data-ttu-id="6cdc9-3125">Identyfikator CLSID typu, który można pobrać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3125">The CLSID of the type to get.</span>
          </span>
        </param>
        <param name="server">
          <span data-ttu-id="6cdc9-3126">Serwer, z którego można załadować typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3126">The server from which to load the type.</span>
          </span>
          <span data-ttu-id="6cdc9-3127">Jeśli nazwa serwera jest <see langword="null" />, ta metoda zostanie automatycznie przywrócona do komputera lokalnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3127">If the server name is <see langword="null" />, this method automatically reverts to the local machine.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="6cdc9-3128">
            <see langword="true" /> Umożliwia zgłoszenie każdego wyjątku, który występuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3128">
              <see langword="true" /> to throw any exception that occurs.</span>
          </span>
          <span data-ttu-id="6cdc9-3129">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3129">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3130">
            <see langword="false" /> umożliwia zignorowanie każdego wyjątku, który występuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3130">
              <see langword="false" /> to ignore any exception that occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-3131">Pobiera typ ze skojarzonym identyfikatorem określonej klasy (CLSID) z określonego serwera w określeniu, czy zgłosić wyjątek, jeśli wystąpi błąd podczas ładowania typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3131">Gets the type associated with the specified class identifier (CLSID) from the specified server, specifying whether to throw an exception if an error occurs while loading the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-3132">
            <see langword="System.__ComObject" /> niezależnie od tego, czy identyfikator CLSID jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3132">
              <see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3133"><xref:System.Type.GetTypeFromCLSID%2A> Metoda obsługuje dostęp z późnym wiązaniem do niezarządzanych obiektów COM z aplikacji .NET Framework, gdy wiesz identyfikator klasy obiektu COM (CLSID).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3133">The <xref:System.Type.GetTypeFromCLSID%2A> method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).</span></span>  <span data-ttu-id="6cdc9-3134">Identyfikator klasy dla klasy COM jest zdefiniowany w kluczu HKEY_CLASSES_ROOT\CLSID rejestru.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3134">The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\CLSID key of the registry.</span></span> <span data-ttu-id="6cdc9-3135">Można pobrać wartość <xref:System.Type.IsCOMObject%2A> właściwości w celu określenia, czy typ zwracany przez tę metodę jest obiektem COM.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3135">You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="6cdc9-3136">Możesz wywołać <xref:System.Type.GetTypeFromProgID%2A> metody z późnym wiązaniem dostępu do modelu COM obiekty, których identyfikator programowy (ProgID) wiadomo.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3136">You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.</span></span>  
  
 <span data-ttu-id="6cdc9-3137">Utworzenie wystąpienia niezarządzanych obiektu modelu COM z jego identyfikator CLSID jest procesem dwuetapowym:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3137">Instantiating an unmanaged COM object from its CLSID is a two-step process:</span></span>  
  
1.  <span data-ttu-id="6cdc9-3138">Pobierz <xref:System.Type> obiekt, który reprezentuje `__ComObject` , który odpowiada identyfikator CLSID, wywołując <xref:System.Type.GetTypeFromCLSID%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3138">Get a <xref:System.Type> object that represents the `__ComObject` that corresponds to the CLSID by calling the <xref:System.Type.GetTypeFromCLSID%2A> method.</span></span>  
  
2.  <span data-ttu-id="6cdc9-3139">Wywołaj <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> metodę, aby utworzyć wystąpienie obiektu COM.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3139">Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> method to instantiate the COM object.</span></span>  
  
 <span data-ttu-id="6cdc9-3140">Wyjątki, takie jak <xref:System.OutOfMemoryException> zostanie zgłoszony podczas określania `true` dla `throwOnError`, ale zakończy się niepowodzeniem dla niezarejestrowanych CLSID.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3140">Exceptions such as <xref:System.OutOfMemoryException> will be thrown when specifying `true` for `throwOnError`, but it will not fail for unregistered CLSIDs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3141">W poniższym przykładzie użyto identyfikator CLSID programu Microsoft Word [obiekt aplikacji](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word) można pobrać typu modelu COM, który reprezentuje aplikację Microsoft Word z serwerem o nazwie computer17.central.contoso.com.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3141">The following example uses the CLSID of the Microsoft Word [Application object](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word) to retrieve a COM type that represents the Microsoft Word application from a server named computer17.central.contoso.com.</span></span> <span data-ttu-id="6cdc9-3142">Następnie tworzy wystąpienie typu przez wywołanie metody <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> metody i zamyka te błędy, wywołując [Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word) metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3142">It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method, and closes it by calling the [Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word) method.</span></span> <span data-ttu-id="6cdc9-3143">Wyjątek jest generowany, jeśli wystąpi błąd podczas ładowania typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3143">An exception is thrown if an error occurs while loading the type.</span></span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid_ex4.cs#4)]
 [!code-vb[System.Type.GetTypeFromCLSID#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid_ex4.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>
            <span data-ttu-id="6cdc9-3144">Ta metoda jest przeznaczona do użycia podczas pracy z obiektami COM, a nie z obiektami .NET Framework.</span>
            <span class="sxs-lookup">
              <span data-stu-id="6cdc9-3144">This method is intended for use when working with COM objects, not with .NET Framework objects.</span>
            </span>
            <span data-ttu-id="6cdc9-3145">Wszystkie zarządzane obiekty, w tym te, które są widoczne dla modelu COM (oznacza to, że ich <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> atrybut jest <see langword="true" />) ma identyfikator GUID, który jest zwracany przez <see cref="P:System.Type.GUID" /> właściwości.</span>
            <span class="sxs-lookup">
              <span data-stu-id="6cdc9-3145">All managed objects, including those that are visible to COM (that is, their <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribute is <see langword="true" />) have a GUID that is returned by the <see cref="P:System.Type.GUID" /> property.</span>
            </span>
            <span data-ttu-id="6cdc9-3146">Mimo że <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> metoda zwraca <see cref="T:System.Type" /> obiekt, który odnosi się do identyfikatora GUID dla konkretnego obiektu zarządzanego nie można użyć, które <see cref="T:System.Type" /> obiektu do utworzenia wystąpienia typu przez wywołanie metody <see cref="M:System.Activator.CreateInstance(System.Type)" /> metody, jak w poniższym przykładzie pojawi się.</span>
            <span class="sxs-lookup">
              <span data-stu-id="6cdc9-3146">Although the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> method returns a <see cref="T:System.Type" /> object that corresponds to the GUID for a particular managed object, you can't use that <see cref="T:System.Type" /> object to create a type instance by calling the  <see cref="M:System.Activator.CreateInstance(System.Type)" /> method, as the following example shows.</span>
            </span>
            <span data-ttu-id="6cdc9-3147">[! code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [! kodu vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span>
            <span class="sxs-lookup">
              <span data-stu-id="6cdc9-3147">[!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span>
            </span>
            <span data-ttu-id="6cdc9-3148">Zamiast tego <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> powinna służyć wyłącznie do pobrania identyfikatora GUID niezarządzanych obiektów COM i wynikowy <see cref="T:System.Type" /> obiekt, który jest przekazywany do <see cref="M:System.Activator.CreateInstance(System.Type)" /> metody musi reprezentować obiekt COM niezarządzanych.</span>
            <span class="sxs-lookup">
              <span data-stu-id="6cdc9-3148">Instead, the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> should only be used to retrieve the GUID of an unmanaged COM object, and the resulting <see cref="T:System.Type" /> object that is passed to the <see cref="M:System.Activator.CreateInstance(System.Type)" /> method must represent an unmanaged COM object.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromHandle">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromHandle (RuntimeTypeHandle handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromHandle(valuetype System.RuntimeTypeHandle handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromHandle (handle As RuntimeTypeHandle) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromHandle(RuntimeTypeHandle handle);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromHandle : RuntimeTypeHandle -&gt; Type" Usage="System.Type.GetTypeFromHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.RuntimeTypeHandle" />
      </Parameters>
      <Docs>
        <param name="handle">
          <span data-ttu-id="6cdc9-3149">Obiekt, który odwołuje się do typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3149">The object that refers to the type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-3150">Pobiera typ przywoływany przez dojście do określonego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3150">Gets the type referenced by the specified type handle.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-3151">Typ odwołuje się określony <see cref="T:System.RuntimeTypeHandle" />, lub <see langword="null" /> Jeśli <see cref="P:System.RuntimeTypeHandle.Value" /> właściwość <paramref name="handle" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3151">The type referenced by the specified <see cref="T:System.RuntimeTypeHandle" />, or <see langword="null" /> if the <see cref="P:System.RuntimeTypeHandle.Value" /> property of <paramref name="handle" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3152">Uchwyty są prawidłowe tylko w domenie aplikacji, w którym zostały uzyskane.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3152">The handles are valid only in the application domain in which they were obtained.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3153">W poniższym przykładzie użyto <xref:System.Type.GetTypeFromHandle%2A> metodę, aby uzyskać <xref:System.Type> obiektu z <xref:System.RuntimeTypeHandle> dostarczone przez <xref:System.Type.GetTypeHandle%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3153">The following example uses the <xref:System.Type.GetTypeFromHandle%2A> method to get a <xref:System.Type> object from a <xref:System.RuntimeTypeHandle> provided by the <xref:System.Type.GetTypeHandle%2A> method.</span></span>  
  
 [!code-cpp[Type_GetTypeFromHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeFromHandle/CPP/type_gettypefromhandle.cpp#1)]
 [!code-csharp[Type_GetTypeFromHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromHandle/CS/type_gettypefromhandle.cs#1)]
 [!code-vb[Type_GetTypeFromHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeFromHandle/VB/type_gettypefromhandle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="6cdc9-3154">Inicjator klasy jest wywoływany i zgłasza wyjątek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3154">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <altmember cref="T:System.RuntimeTypeHandle" />
        <altmember cref="P:System.Type.TypeHandle" />
        <altmember cref="M:System.Type.GetTypeHandle(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetTypeFromProgID">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3155">Pobiera typ skojarzony z identyfikatorem określony program (ProgID).</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3155">Gets the type associated with the specified program identifier (ProgID).</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetTypeFromProgID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromProgID (string progID);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromProgID(string progID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromProgID(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromProgID (progID As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromProgID(System::String ^ progID);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromProgID : string -&gt; Type" Usage="System.Type.GetTypeFromProgID progID" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="progID">
          <span data-ttu-id="6cdc9-3156">Identyfikator ProgID typ do pobrania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3156">The ProgID of the type to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-3157">Pobiera typ ze skojarzonym identyfikatorem określony program (ProgID), zwracając wartość null, jeśli napotka błąd podczas ładowania <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3157">Gets the type associated with the specified program identifier (ProgID), returning null if an error is encountered while loading the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-3158">Typ skojarzoną z określonym identyfikatorem ProgID, jeśli <paramref name="progID" /> jest prawidłowego wpisu w rejestrze, a typem jest z nią skojarzona; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3158">The type associated with the specified ProgID, if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3159">Ta metoda umożliwia obsługę COM.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3159">This method is provided for COM support.</span></span> <span data-ttu-id="6cdc9-3160">ProgID nie są używane w Microsoft .NET Framework, ponieważ zostały zastąpione przez koncepcji przestrzeni nazw.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3160">ProgIDs are not used in the Microsoft .NET Framework because they have been superseded by the concept of namespace.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6cdc9-3161">
            <paramref name="progID" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3161">
              <paramref name="progID" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="6cdc9-3162">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3162">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="6cdc9-3163">Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3163">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Runtime.InteropServices.RegistrationServices.GetProgIdForType(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromProgID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromProgID (string progID, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromProgID(string progID, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromProgID(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromProgID (progID As String, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromProgID(System::String ^ progID, bool throwOnError);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromProgID : string * bool -&gt; Type" Usage="System.Type.GetTypeFromProgID (progID, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="progID">
          <span data-ttu-id="6cdc9-3164">Identyfikator ProgID typ do pobrania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3164">The ProgID of the type to get.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="6cdc9-3165">
            <see langword="true" /> Umożliwia zgłoszenie każdego wyjątku, który występuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3165">
              <see langword="true" /> to throw any exception that occurs.</span>
          </span>
          <span data-ttu-id="6cdc9-3166">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3166">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3167">
            <see langword="false" /> umożliwia zignorowanie każdego wyjątku, który występuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3167">
              <see langword="false" /> to ignore any exception that occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-3168">Pobiera typ ze skojarzonym identyfikatorem określony program (ProgID) określająca, czy zgłosić wyjątek, jeśli wystąpi błąd podczas ładowania typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3168">Gets the type associated with the specified program identifier (ProgID), specifying whether to throw an exception if an error occurs while loading the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-3169">Typ skojarzony z identyfikatorem określony program (ProgID), jeśli <paramref name="progID" /> jest prawidłowego wpisu w rejestrze, a typem jest z nią skojarzona; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3169">The type associated with the specified program identifier (ProgID), if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3170">Ta metoda umożliwia obsługę COM.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3170">This method is provided for COM support.</span></span> <span data-ttu-id="6cdc9-3171">Identyfikatorów programu nie są używane w programie Microsoft .NET Framework, ponieważ zostały zastąpione przez koncepcji przestrzeni nazw.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3171">Program IDs are not used in Microsoft .NET Framework because they have been superseded by the concept of namespace.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3172">Poniższy przykład pobiera typ, przekazując ProgID, określająca, czy zgłosić wyjątek, jeśli identyfikator ProgID jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3172">The following example retrieves a type by passing a ProgID, specifying whether to throw an exception if the ProgID is invalid.</span></span> <span data-ttu-id="6cdc9-3173">Przykład następnie wyświetla identyfikator klasy związane z ProgID, wraz z dowolnego komunikat o wyjątku dotyczy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3173">The example then displays the ClassID related to the ProgID, along with any applicable exception message.</span></span>  
  
 [!code-cpp[Type_GetTypeFromProgID2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeFromProgID2/CPP/type_gettypefromprogid2.cpp#1)]
 [!code-csharp[Type_GetTypeFromProgID2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromProgID2/CS/type_gettypefromprogid2.cs#1)]
 [!code-vb[Type_GetTypeFromProgID2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeFromProgID2/VB/type_gettypefromprogid2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6cdc9-3174">
            <paramref name="progID" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3174">
              <paramref name="progID" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Runtime.InteropServices.COMException">
          <span data-ttu-id="6cdc9-3175">Określony identyfikator ProgID nie jest zarejestrowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3175">The specified ProgID is not registered.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="6cdc9-3176">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3176">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="6cdc9-3177">Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3177">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Runtime.InteropServices.RegistrationServices.GetProgIdForType(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromProgID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromProgID (string progID, string server);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromProgID(string progID, string server) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromProgID(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromProgID (progID As String, server As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromProgID(System::String ^ progID, System::String ^ server);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromProgID : string * string -&gt; Type" Usage="System.Type.GetTypeFromProgID (progID, server)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
        <Parameter Name="server" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="progID">
          <span data-ttu-id="6cdc9-3178">ProgID typ do pobrania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3178">The progID of the type to get.</span>
          </span>
        </param>
        <param name="server">
          <span data-ttu-id="6cdc9-3179">Serwer, z którego można załadować typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3179">The server from which to load the type.</span>
          </span>
          <span data-ttu-id="6cdc9-3180">Jeśli nazwa serwera jest <see langword="null" />, ta metoda zostanie automatycznie przywrócona do komputera lokalnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3180">If the server name is <see langword="null" />, this method automatically reverts to the local machine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-3181">Pobiera typ ze skojarzonym identyfikatorem określony program (progID) z określonego serwera, zwracając wartość null, jeśli wystąpił błąd podczas ładowania typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3181">Gets the type associated with the specified program identifier (progID) from the specified server, returning null if an error is encountered while loading the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-3182">Typ skojarzony z identyfikatorem określony program (progID), jeśli <paramref name="progID" /> jest prawidłowego wpisu w rejestrze, a typem jest z nią skojarzona; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3182">The type associated with the specified program identifier (progID), if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3183">Ta metoda umożliwia obsługę COM.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3183">This method is provided for COM support.</span></span> <span data-ttu-id="6cdc9-3184">Identyfikatorów programu nie są używane w programie Microsoft .NET Framework, ponieważ zostały zastąpione przez koncepcji przestrzeni nazw.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3184">Program IDs are not used in Microsoft .NET Framework because they have been superseded by the concept of namespace.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3185">Poniższy przykład pobiera typ, przekazując ProgID i nazwę serwera.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3185">The following example retrieves a type by passing a ProgID and server name.</span></span> <span data-ttu-id="6cdc9-3186">Przykład następnie wyświetla identyfikator klasy związane z identyfikator ProgID lub zgłasza wyjątek, jeśli identyfikator ProgID lub nazwa serwera jest nieprawidłowa.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3186">The example then displays the ClassID related to the ProgID, or throws an exception if the ProgID or the server name is invalid.</span></span>  
  
 [!code-cpp[Type_GetTypeFromProgID3#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeFromProgID3/CPP/Type_GetTypeFromProgID3.cpp#1)]
 [!code-csharp[Type_GetTypeFromProgID3#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromProgID3/CS/type_gettypefromprogid3.cs#1)]
 [!code-vb[Type_GetTypeFromProgID3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeFromProgID3/VB/type_gettypefromprogid3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6cdc9-3187">
            <paramref name="prodID" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3187">
              <paramref name="prodID" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="6cdc9-3188">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3188">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="6cdc9-3189">Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3189">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Runtime.InteropServices.RegistrationServices.GetProgIdForType(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromProgID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromProgID (string progID, string server, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromProgID(string progID, string server, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromProgID(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromProgID (progID As String, server As String, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromProgID(System::String ^ progID, System::String ^ server, bool throwOnError);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromProgID : string * string * bool -&gt; Type" Usage="System.Type.GetTypeFromProgID (progID, server, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
        <Parameter Name="server" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="progID">
          <span data-ttu-id="6cdc9-3190">ProgID <see cref="T:System.Type" /> można pobrać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3190">The progID of the <see cref="T:System.Type" /> to get.</span>
          </span>
        </param>
        <param name="server">
          <span data-ttu-id="6cdc9-3191">Serwer, z którego można załadować typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3191">The server from which to load the type.</span>
          </span>
          <span data-ttu-id="6cdc9-3192">Jeśli nazwa serwera jest <see langword="null" />, ta metoda zostanie automatycznie przywrócona do komputera lokalnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3192">If the server name is <see langword="null" />, this method automatically reverts to the local machine.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="6cdc9-3193">
            <see langword="true" /> Umożliwia zgłoszenie każdego wyjątku, który występuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3193">
              <see langword="true" /> to throw any exception that occurs.</span>
          </span>
          <span data-ttu-id="6cdc9-3194">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3194">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3195">
            <see langword="false" /> umożliwia zignorowanie każdego wyjątku, który występuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3195">
              <see langword="false" /> to ignore any exception that occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-3196">Pobiera typ ze skojarzonym identyfikatorem określony program (progID) z określonego serwera w określeniu, czy zgłosić wyjątek, jeśli wystąpi błąd podczas ładowania typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3196">Gets the type associated with the specified program identifier (progID) from the specified server, specifying whether to throw an exception if an error occurs while loading the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-3197">Typ skojarzony z identyfikatorem określony program (progID), jeśli <paramref name="progID" /> jest prawidłowego wpisu w rejestrze, a typem jest z nią skojarzona; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3197">The type associated with the specified program identifier (progID), if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3198">Ta metoda umożliwia obsługę COM.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3198">This method is provided for COM support.</span></span> <span data-ttu-id="6cdc9-3199">Identyfikatorów programu nie są używane w programie Microsoft .NET Framework, ponieważ zostały zastąpione przez koncepcji przestrzeni nazw.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3199">Program IDs are not used in Microsoft .NET Framework because they have been superseded by the concept of namespace.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3200">Poniższy przykład pobiera typ, przekazując ProgID i nazwę serwera.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3200">The following example retrieves a type by passing a ProgID and server name.</span></span> <span data-ttu-id="6cdc9-3201">Przykład następnie wyświetla identyfikator klasy związane z ProgID, określająca, czy zgłosić wyjątek, jeśli identyfikator ProgID lub nazwa serwera jest nieprawidłowa.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3201">The example then displays the ClassID related to the ProgID, specifying whether to throw an exception if the ProgID or the server name is invalid.</span></span>  
  
 [!code-cpp[Type_GetTypeFromProgID4#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeFromProgID4/CPP/Type_GetTypeFromProgID4.cpp#1)]
 [!code-csharp[Type_GetTypeFromProgID4#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromProgID4/CS/type_gettypefromprogid4.cs#1)]
 [!code-vb[Type_GetTypeFromProgID4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeFromProgID4/VB/type_gettypefromprogid4.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6cdc9-3202">
            <paramref name="progID" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3202">
              <paramref name="progID" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Runtime.InteropServices.COMException">
          <span data-ttu-id="6cdc9-3203">Określony identyfikator progID nie jest zarejestrowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3203">The specified progID is not registered.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="6cdc9-3204">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3204">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="6cdc9-3205">Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3205">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Runtime.InteropServices.RegistrationServices.GetProgIdForType(System.Type)" />
        <altmember cref="T:System.TypeLoadException" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeHandle">
      <MemberSignature Language="C#" Value="public static RuntimeTypeHandle GetTypeHandle (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.RuntimeTypeHandle GetTypeHandle(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeHandle(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeHandle (o As Object) As RuntimeTypeHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static RuntimeTypeHandle GetTypeHandle(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="static member GetTypeHandle : obj -&gt; RuntimeTypeHandle" Usage="System.Type.GetTypeHandle o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeTypeHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">
          <span data-ttu-id="6cdc9-3206">Obiekt, dla którego można pobrać typu obsługi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3206">The object for which to get the type handle.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-3207">Pobiera uchwytu <see cref="T:System.Type" /> określonego obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3207">Gets the handle for the <see cref="T:System.Type" /> of a specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-3208">Dojście do <see cref="T:System.Type" /> określonego <see cref="T:System.Object" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3208">The handle for the <see cref="T:System.Type" /> of the specified <see cref="T:System.Object" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3209">Uchwyty są prawidłowe tylko w domenie aplikacji, w którym zostały uzyskane.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3209">The handles are valid only in the application domain in which they were obtained.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3210">W poniższym przykładzie zdefiniowano klasę `MyClass1`, pobiera jego wystąpienie i pobiera uchwyt środowiska uruchomieniowego obiektu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3210">The following example defines the class `MyClass1`, gets an instance of it, and retrieves the runtime handle of the object.</span></span>  
  
 [!code-cpp[Type_GetTypeHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeHandle/CPP/Type_GetTypeHandle.cpp#1)]
 [!code-csharp[Type_GetTypeHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeHandle/CS/type_gettypehandle.cs#1)]
 [!code-vb[Type_GetTypeHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeHandle/VB/type_gettypehandle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-3211">
            <paramref name="o" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3211">
              <paramref name="o" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.RuntimeTypeHandle" />
        <altmember cref="P:System.Type.TypeHandle" />
        <altmember cref="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)" />
      </Docs>
    </Member>
    <Member MemberName="GUID">
      <MemberSignature Language="C#" Value="public abstract Guid GUID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid GUID" />
      <MemberSignature Language="DocId" Value="P:System.Type.GUID" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property GUID As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Guid GUID { Guid get(); };" />
      <MemberSignature Language="F#" Value="member this.GUID : Guid" Usage="System.Type.GUID" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.GUID</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3212">Pobiera identyfikator GUID skojarzony z <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3212">Gets the GUID associated with the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-3213">Identyfikator GUID skojarzony z <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3213">The GUID associated with the <see cref="T:System.Type" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3214">Identyfikator GUID jest skojarzony z typu przy użyciu <xref:System.Runtime.InteropServices.GuidAttribute> atrybutu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3214">A GUID is associated with a type using the <xref:System.Runtime.InteropServices.GuidAttribute> attribute.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3215">Poniższy przykład tworzy klasę `MyClass1` w metodę publiczną, tworzy `Type` obiekt odpowiadający `MyClass1`i pobiera <xref:System.Guid> struktury za pomocą `GUID` właściwość `Type` klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3215">The following example creates the class `MyClass1` with a public method, creates a `Type` object corresponding to `MyClass1`, and gets the <xref:System.Guid> structure using the `GUID` property of the `Type` class.</span></span>  
  
 [!code-cpp[Type_Guid#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_Guid/CPP/type_guid.cpp#1)]
 [!code-csharp[Type_Guid#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_Guid/CS/type_guid.cs#1)]
 [!code-vb[Type_Guid#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_Guid/VB/type_guid.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Guid" />
      </Docs>
    </Member>
    <Member MemberName="HasElementType">
      <MemberSignature Language="C#" Value="public bool HasElementType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasElementType" />
      <MemberSignature Language="DocId" Value="P:System.Type.HasElementType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasElementType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasElementType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasElementType : bool" Usage="System.Type.HasElementType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.HasElementType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3216">Pobiera wartość wskazującą czy bieżący <see cref="T:System.Type" /> obejmuje lub odwołuje się do innego typu; który jest, czy bieżący <see cref="T:System.Type" /> jest tablicą, wskaźnik, lub jest przekazywany przez odwołanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3216">Gets a value indicating whether the current <see cref="T:System.Type" /> encompasses or refers to another type; that is, whether the current <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-3217">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> jest tablicą, wskaźnik, lub jest przekazywany przez odwołanie; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3217">
              <see langword="true" /> if the <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3218">Na przykład Type.GetType("Int32[]"). Zwraca HasElementType `true`, ale Type.GetType("Int32"). Zwraca HasElementType `false`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3218">For example, Type.GetType("Int32[]").HasElementType returns `true`, but Type.GetType("Int32").HasElementType returns `false`.</span></span> <span data-ttu-id="6cdc9-3219">Zwraca także HasElementType `true` dla "Int32 \*" i "Int32 &".</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3219">HasElementType also returns `true` for "Int32\*" and "Int32&".</span></span>  
  
 <span data-ttu-id="6cdc9-3220">Jeśli bieżący <xref:System.Type> reprezentuje typ ogólny lub parametr typu w definicji typu ogólnego lub metody rodzajowej, właściwość ta zwraca zawsze `false`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3220">If the current <xref:System.Type> represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3221">Poniższy przykład zwraca `true` lub `false` w zależności od tego, czy obiekt jest tablicą, typu odwołania lub wskaźnik.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3221">The following example returns `true` or `false` depending on whether or not the object is an array, a reference type, or a pointer.</span></span>  
  
 [!code-cpp[Type_HasElementType#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_HasElementType/CPP/type_haselementtype.cpp#1)]
 [!code-csharp[Type_HasElementType#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_HasElementType/CS/type_haselementtype.cs#1)]
 [!code-vb[Type_HasElementType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_HasElementType/VB/type_haselementtype.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.HasElementTypeImpl" />
        <altmember cref="P:System.Type.IsArray" />
        <altmember cref="P:System.Type.IsPointer" />
        <altmember cref="P:System.Type.IsByRef" />
        <altmember cref="M:System.Type.GetElementType" />
        <altmember cref="M:System.Type.GetType" />
      </Docs>
    </Member>
    <Member MemberName="HasElementTypeImpl">
      <MemberSignature Language="C#" Value="protected abstract bool HasElementTypeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool HasElementTypeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.HasElementTypeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function HasElementTypeImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool HasElementTypeImpl();" />
      <MemberSignature Language="F#" Value="abstract member HasElementTypeImpl : unit -&gt; bool" Usage="type.HasElementTypeImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3222">W przypadku przesłonięcia w klasie pochodnej, implementuje <see cref="P:System.Type.HasElementType" /> właściwości i określa, czy bieżący <see cref="T:System.Type" /> obejmuje lub odwołuje się do innego typu; który jest, czy bieżący <see cref="T:System.Type" /> jest tablicą, wskaźnik, lub jest przekazywany przez odwołanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3222">When overridden in a derived class, implements the <see cref="P:System.Type.HasElementType" /> property and determines whether the current <see cref="T:System.Type" /> encompasses or refers to another type; that is, whether the current <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-3223">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> jest tablicą, wskaźnik, lub jest przekazywany przez odwołanie; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3223">
              <see langword="true" /> if the <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3224">Na przykład Type.GetType("Int32[]"). Zwraca HasElementTypeImpl `true`, ale Type.GetType("Int32"). Zwraca HasElementTypeImpl `false`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3224">For example, Type.GetType("Int32[]").HasElementTypeImpl returns `true`, but Type.GetType("Int32").HasElementTypeImpl returns `false`.</span></span> <span data-ttu-id="6cdc9-3225">Zwraca także HasElementTypeImpl `true` dla "Int32 \*" i "Int32 &".</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3225">HasElementTypeImpl also returns `true` for "Int32\*" and "Int32&".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3226">W poniższym przykładzie zdefiniowano klasę `MyTypeDelegator`, co zastępuje `HasElementTypeImpl` metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3226">The following example defines the class `MyTypeDelegator`, which overrides the `HasElementTypeImpl` method.</span></span> <span data-ttu-id="6cdc9-3227">Sprawdza, czy główna klasa `HasElementType` właściwości i wyświetla typ elementu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3227">The main class checks for the `HasElementType` property and displays the element type.</span></span>  
  
 [!code-cpp[Type_HasElementTypeImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_HasElementTypeImpl/CPP/type_haselementtypeimpl.cpp#1)]
 [!code-csharp[Type_HasElementTypeImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_HasElementTypeImpl/CS/type_haselementtypeimpl.cs#1)]
 [!code-vb[Type_HasElementTypeImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_HasElementTypeImpl/VB/type_haselementtypeimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.HasElementType" />
        <altmember cref="P:System.Type.IsArray" />
        <altmember cref="P:System.Type.IsPointer" />
        <altmember cref="P:System.Type.IsByRef" />
        <altmember cref="M:System.Type.GetElementType" />
        <altmember cref="M:System.Type.GetType" />
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeMember">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3228">Wywołuje określonego członka bieżącego <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3228">Invokes a specific member of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] -&gt; obj&#xA;override this.InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] -&gt; obj" Usage="type.InvokeMember (name, invokeAttr, binder, target, args)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="6cdc9-3229">Ciąg zawierający nazwę konstruktora, metody, właściwości lub pól członka do wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3229">The string containing the name of the constructor, method, property, or field member to invoke.</span>
          </span>
          <span data-ttu-id="6cdc9-3230">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3230">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3231">Ciąg pusty ("") do wywołania domyślny element członkowski.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3231">An empty string ("") to invoke the default member.</span>
          </span>
          <span data-ttu-id="6cdc9-3232">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3232">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3233">Aby uzyskać <see langword="IDispatch" /> członków, ciąg reprezentujący identyfikator DispID, na przykład "[identyfikator DispID = 3]".</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3233">For <see langword="IDispatch" /> members, a string representing the DispID, for example "[DispID=3]".</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="6cdc9-3234">Maska bitów składająca się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3234">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="6cdc9-3235">Dostęp może być jednym z <see langword="BindingFlags" /> takich jak <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />i tak dalej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3235">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span>
          </span>
          <span data-ttu-id="6cdc9-3236">Typ wyszukiwania nie muszą być określane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3236">The type of lookup need not be specified.</span>
          </span>
          <span data-ttu-id="6cdc9-3237">W przypadku pominięcia typ wyszukiwania <see langword="BindingFlags.Public" />  |  <see langword="BindingFlags.Instance" />  |  <see langword="BindingFlags.Static" /> są używane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3237">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" /> are used.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="6cdc9-3238">Obiekt, który określa zestaw właściwości i umożliwia powiązanie, które może obejmować wybór metody przeciążonej, wymuszanie typów argumentu i wywołanie elementu członkowskiego przez odbicie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3238">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="6cdc9-3239">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3239">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3240">Odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic), aby użyć <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3240">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
          <span data-ttu-id="6cdc9-3241">Należy pamiętać, że jawne określenie <see cref="T:System.Reflection.Binder" /> obiekt może być wymagane dla pomyślnie wywołanie przeciążenia metody ze zmiennymi argumentami.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3241">Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be required for successfully invoking method overloads with variable arguments.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="6cdc9-3242">Obiekt do wywołania określonego elementu członkowskiego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3242">The object on which to invoke the specified member.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="6cdc9-3243">Tablica zawierająca argumenty do przekazania do składowej na potrzeby wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3243">An array containing the arguments to pass to the member to invoke.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-3244">Wywołuje określony element członkowski, dopasowanie określoną listę argumentów i za pomocą ograniczeń w określonym powiązaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3244">Invokes the specified member, using the specified binding constraints and matching the specified argument list.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-3245">Obiekt reprezentujący wartość zwracaną wywołanego elementu członkowskiego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3245">An object representing the return value of the invoked member.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-3246">Nie można użyć <xref:System.Type.InvokeMember%2A> do wywoływania metody rodzajowej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3246">You cannot use <xref:System.Type.InvokeMember%2A> to invoke a generic method.</span></span>  
  
 <span data-ttu-id="6cdc9-3247">Następujące <xref:System.Reflection.BindingFlags> flagi filtru może służyć do definiowania elementów członkowskich, które można uwzględnić w wyszukiwaniu:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3247">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="6cdc9-3248">Określ `BindingFlags.Public` obejmujący publiczne elementy członkowskie w wyszukiwaniu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3248">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="6cdc9-3249">Określ `BindingFlags.NonPublic` obejmujący elementów członkowskich niepublicznych (czyli prywatnych i chronionych elementów członkowskich) w wyszukiwaniu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3249">Specify `BindingFlags.NonPublic` to include non-public members (that is, private and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="6cdc9-3250">Określ `BindingFlags.FlattenHierarchy` obejmujący statyczne elementy członkowskie w hierarchii.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3250">Specify `BindingFlags.FlattenHierarchy` to include static members up the hierarchy.</span></span>  
  
 <span data-ttu-id="6cdc9-3251">Następujące <xref:System.Reflection.BindingFlags> flagi modyfikatora może służyć do zmiany sposobu działania wyszukiwania:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3251">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="6cdc9-3252">`BindingFlags.IgnoreCase` Aby zignorować wielkość liter `name`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3252">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="6cdc9-3253">`BindingFlags.DeclaredOnly` Aby wyszukać tylko do elementów członkowskich zadeklarowanych w <xref:System.Type>, nie elementów członkowskich, które zostały po prostu odziedziczone.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3253">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="6cdc9-3254">Następujące <xref:System.Reflection.BindingFlags> flagi wywołania może służyć do określenia, jaką akcję należy podjąć przy użyciu elementu członkowskiego:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3254">The following <xref:System.Reflection.BindingFlags> invocation flags can be used to denote what action to take with the member:</span></span>  
  
-   <span data-ttu-id="6cdc9-3255">`CreateInstance` Aby wywołać konstruktora.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3255">`CreateInstance` to invoke a constructor.</span></span> <span data-ttu-id="6cdc9-3256">`name` jest ignorowany.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3256">`name` is ignored.</span></span> <span data-ttu-id="6cdc9-3257">Nieprawidłowy inne flagi wywołania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3257">Not valid with other invocation flags.</span></span>  
  
-   <span data-ttu-id="6cdc9-3258">`InvokeMethod` do wywołania metody, ale nie konstruktorze lub inicjatorze typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3258">`InvokeMethod` to invoke a method, but not a constructor or a type initializer.</span></span> <span data-ttu-id="6cdc9-3259">Nie jest prawidłowy z `SetField` lub `SetProperty`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3259">Not valid with `SetField` or `SetProperty`.</span></span> <span data-ttu-id="6cdc9-3260">Jeśli `InvokeMethod` jest określony przez siebie, `BindingFlags.Public`, `BindingFlags.Instance`, i `BindingFlags.Static` są automatycznie dołączane.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3260">If `InvokeMethod` is specified by itself, `BindingFlags.Public`, `BindingFlags.Instance`, and `BindingFlags.Static` are automatically included.</span></span>  
  
-   <span data-ttu-id="6cdc9-3261">`GetField` można pobrać wartości pola.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3261">`GetField` to get the value of a field.</span></span> <span data-ttu-id="6cdc9-3262">Nie jest prawidłowy z `SetField`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3262">Not valid with `SetField`.</span></span>  
  
-   <span data-ttu-id="6cdc9-3263">`SetField` można ustawić wartości pola.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3263">`SetField` to set the value of a field.</span></span> <span data-ttu-id="6cdc9-3264">Nie jest prawidłowy z `GetField`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3264">Not valid with `GetField`.</span></span>  
  
-   <span data-ttu-id="6cdc9-3265">`GetProperty` można pobrać właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3265">`GetProperty` to get a property.</span></span> <span data-ttu-id="6cdc9-3266">Nie jest prawidłowy z `SetProperty`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3266">Not valid with `SetProperty`.</span></span>  
  
-   <span data-ttu-id="6cdc9-3267">`SetProperty` można ustawić właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3267">`SetProperty` to set a property.</span></span> <span data-ttu-id="6cdc9-3268">Nie jest prawidłowy z `GetProperty`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3268">Not valid with `GetProperty`.</span></span>  
  
 <span data-ttu-id="6cdc9-3269">Aby uzyskać więcej informacji, zobacz <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3269">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="6cdc9-3270">Metoda zostanie wywołana, jeśli są spełnione oba poniższe warunki:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3270">A method will be invoked if both of the following conditions are true:</span></span>  
  
-   <span data-ttu-id="6cdc9-3271">Liczba parametrów w deklaracji metody jest równa liczbie argumentów `args` tablicy (chyba że argumenty domyślne są zdefiniowane w składowej i `BindingFlags.OptionalParamBinding` jest określony).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3271">The number of parameters in the method declaration equals the number of arguments in the `args` array (unless default arguments are defined on the member and `BindingFlags.OptionalParamBinding` is specified).</span></span>  
  
-   <span data-ttu-id="6cdc9-3272">Typ każdego argumentu mogą być konwertowane przez binder typowi parametru.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3272">The type of each argument can be converted by the binder to the type of the parameter.</span></span>  
  
 <span data-ttu-id="6cdc9-3273">Obiekt wiążący znajdzie wszystkie metody dopasowania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3273">The binder will find all of the matching methods.</span></span> <span data-ttu-id="6cdc9-3274">Te metody zostaną znalezione, oparte na typie powiązania żądane (<xref:System.Reflection.BindingFlags> wartości `InvokeMethod`, `GetProperty`i tak dalej).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3274">These methods are found based upon the type of binding requested (<xref:System.Reflection.BindingFlags> values `InvokeMethod`, `GetProperty`, and so on).</span></span> <span data-ttu-id="6cdc9-3275">Zestaw metod są filtrowane według nazwy, liczba argumentów i zestaw modyfikatorów wyszukiwania zdefiniowane w obiekt wiążący.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3275">The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.</span></span>  
  
 <span data-ttu-id="6cdc9-3276">Po wybraniu metody jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3276">After the method is selected, it is invoked.</span></span> <span data-ttu-id="6cdc9-3277">Dostępność jest sprawdzana w tym momencie.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3277">Accessibility is checked at that point.</span></span> <span data-ttu-id="6cdc9-3278">Wyszukiwanie może kontrolować, które zestaw metod, przeszukiwane są na podstawie atrybutu ułatwień dostępu powiązany z metodą.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3278">The search may control which set of methods are searched based upon the accessibility attribute associated with the method.</span></span> <span data-ttu-id="6cdc9-3279"><xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> Metody <xref:System.Reflection.Binder> klasy jest odpowiedzialny za wybranie wywoływanej metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3279">The <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> method of the <xref:System.Reflection.Binder> class is responsible for selecting the method to be invoked.</span></span> <span data-ttu-id="6cdc9-3280">Domyślny integrator wybiera najbardziej określonego dopasowania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3280">The default binder selects the most specific match.</span></span>  
  
 <span data-ttu-id="6cdc9-3281">Ograniczenia dostępu są ignorowane w przypadku w pełni zaufany kod; oznacza to, konstruktory prywatne, metody, pola i właściwości mogą być dostępne i wywoływane za pośrednictwem <xref:System.Reflection> zawsze, gdy kod jest w pełni zaufany.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3281">Access restrictions are ignored for fully trusted code; that is, private constructors, methods, fields, and properties can be accessed and invoked through <xref:System.Reflection> whenever the code is fully trusted.</span></span>  
  
 <span data-ttu-id="6cdc9-3282">Możesz użyć `Type.InvokeMember` można ustawić pola na określoną wartość, określając <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3282">You can use `Type.InvokeMember` to set a field to a particular value by specifying <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span></span> <span data-ttu-id="6cdc9-3283">Na przykład, jeśli chcesz ustawić pole publiczne wystąpienia o nazwie F klasy C i F jest `String`, można użyć kodu takiego jak:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3283">For example, if you want to set a public instance field named F on class C, and F is a `String`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {"strings new value"});`  
  
 <span data-ttu-id="6cdc9-3284">Jeśli jest F `String[]`, można użyć kodu takiego jak:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3284">If F is a `String[]`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {new String[]{"a","z","c","d"}});`  
  
 <span data-ttu-id="6cdc9-3285">która zainicjuje pole F do tej nowej tablicy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3285">which will initialize the field F to this new array.</span></span> <span data-ttu-id="6cdc9-3286">Można również użyć `Type.InvokeMember` próba ustawienia pozycji w tablicy, podając indeks wartości, a następnie wartość następnego przy użyciu następującego kodu:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3286">You can also use `Type.InvokeMember` to set a position in an array by supplying the index of the value and then the next value by using code such as the following:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {1, "b"});`  
  
 <span data-ttu-id="6cdc9-3287">Spowoduje to zmianę w tablicy, która F zawiera ciąg "b", ciąg "z".</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3287">This will change string "z" in the array that F holds to string "b".</span></span>  
  
 <span data-ttu-id="6cdc9-3288">Gdy wywołujesz `IDispatch` elementu członkowskiego, możesz określić identyfikator DispID zamiast nazwy elementu członkowskiego, używając formatu ciągu "[identyfikator DispID = ##]".</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3288">When you invoke an `IDispatch` member, you can specify the DispID instead of the member name, using the string format "[DispID=##]".</span></span> <span data-ttu-id="6cdc9-3289">Na przykład, jeśli identyfikator DispID MyComMethod wynosi 3, możesz określić ciąg "[identyfikator DispID = 3]" zamiast "MyComMethod".</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3289">For example, if the DispID of MyComMethod is 3, you can specify the string "[DispID=3]" instead of "MyComMethod".</span></span> <span data-ttu-id="6cdc9-3290">Wywoływanie składowej przez identyfikator DispID jest szybsze niż Wyszukiwanie elementu członkowskiego według nazwy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3290">Invoking a member by DispID is faster than looking up the member by name.</span></span> <span data-ttu-id="6cdc9-3291">W scenariuszach złożoną agregację DispID czasami jest jedynym sposobem, aby wywołać żądanego elementu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3291">In complex aggregation scenarios, the DispID is sometimes the only way to invoke the desired member.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-3292">Począwszy od [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], Metoda ta może służyć do dostępu do elementów członkowskich niepublicznych, jeśli obiekt wywołujący zostało udzielone <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> Flaga, a jeśli zestaw uprawnień elementów członkowskich niepublicznych jest ograniczony do obiektu wywołującego przyznania zestawu lub być podzbiorem jej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3292">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="6cdc9-3293">(Zobacz [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3293">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="6cdc9-3294">Aby używać tej funkcji, powinien dotyczyć aplikacji [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3294">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3295">W poniższym przykładzie użyto `InvokeMember` do dostępu do elementów członkowskich typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3295">The following example uses `InvokeMember` to access members of a type.</span></span>  
  
 [!code-cpp[InvokeMem#1](~/samples/snippets/cpp/VS_Snippets_CLR/InvokeMem/CPP/invokemem.cpp#1)]
 [!code-csharp[InvokeMem#1](~/samples/snippets/csharp/VS_Snippets_CLR/InvokeMem/CS/invokemem.cs#1)]
 [!code-vb[InvokeMem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/InvokeMem/VB/invokemem.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-3296">
            <paramref name="invokeAttr" /> nie zawiera <see langword="CreateInstance" /> i <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3296">
              <paramref name="invokeAttr" /> does not contain <see langword="CreateInstance" /> and <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6cdc9-3297">
            <paramref name="invokeAttr" /> nie jest prawidłowym <see cref="T:System.Reflection.BindingFlags" /> atrybutu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3297">
              <paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute.</span>
          </span>
          <span data-ttu-id="6cdc9-3298">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3298">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3299">
            <paramref name="invokeAttr" /> nie zawiera jedną z następujących flag powiązania: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, lub <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3299">
              <paramref name="invokeAttr" /> does not contain one of the following binding flags: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="6cdc9-3300">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3300">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3301">
            <paramref name="invokeAttr" /> zawiera <see langword="CreateInstance" /> w połączeniu z <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, lub <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3301">
              <paramref name="invokeAttr" /> contains <see langword="CreateInstance" /> combined with <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="6cdc9-3302">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3302">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3303">
            <paramref name="invokeAttr" /> zawiera zarówno <see langword="GetField" /> i <see langword="SetField" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3303">
              <paramref name="invokeAttr" /> contains both <see langword="GetField" /> and <see langword="SetField" />.</span>
          </span>
          <span data-ttu-id="6cdc9-3304">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3304">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3305">
            <paramref name="invokeAttr" /> zawiera zarówno <see langword="GetProperty" /> i <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3305">
              <paramref name="invokeAttr" /> contains both <see langword="GetProperty" /> and <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="6cdc9-3306">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3306">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3307">
            <paramref name="invokeAttr" /> zawiera <see langword="InvokeMethod" /> w połączeniu z <see langword="SetField" /> lub <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3307">
              <paramref name="invokeAttr" /> contains <see langword="InvokeMethod" /> combined with <see langword="SetField" /> or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="6cdc9-3308">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3308">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3309">
            <paramref name="invokeAttr" /> zawiera <see langword="SetField" /> i <paramref name="args" /> ma więcej niż jeden element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3309">
              <paramref name="invokeAttr" /> contains <see langword="SetField" /> and <paramref name="args" /> has more than one element.</span>
          </span>
          <span data-ttu-id="6cdc9-3310">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3310">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3311">Ta metoda jest wywoływana dla obiektu COM i jedną z następujących flag powiązania nie przekazano: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" />, lub <see langword="BindingFlags.PutRefDispProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3311">This method is called on a COM object and one of the following binding flags was not passed in: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" />, or <see langword="BindingFlags.PutRefDispProperty" />.</span>
          </span>
          <span data-ttu-id="6cdc9-3312">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3312">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3313">Jedna z nich tablic nazwany parametr zawiera ciąg, który jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3313">One of the named parameter arrays contains a string that is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="6cdc9-3314">Określony element członkowski jest inicjator klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3314">The specified member is a class initializer.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingFieldException">
          <span data-ttu-id="6cdc9-3315">Nie można odnaleźć pola lub właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3315">The field or property cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="6cdc9-3316">Brak metody można znaleźć odpowiadającej argumentów <paramref name="args" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3316">No method can be found that matches the arguments in <paramref name="args" />.</span>
          </span>
          <span data-ttu-id="6cdc9-3317">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3317">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3318">Bieżący <see cref="T:System.Type" /> obiekt reprezentuje typ, który zawiera parametry typu otwartego, czyli <see cref="P:System.Type.ContainsGenericParameters" /> zwraca <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3318">The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetException">
          <span data-ttu-id="6cdc9-3319">Nie można wywołać określonego elementu członkowskiego <paramref name="target" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3319">The specified member cannot be invoked on <paramref name="target" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="6cdc9-3320">Więcej niż jednej metody odpowiadającego kryteriom powiązania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3320">More than one method matches the binding criteria.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="6cdc9-3321">.NET Compact Framework nie obsługuje obecnie tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3321">The .NET Compact Framework does not currently support this method.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6cdc9-3322">Metody reprezentowanej przez <paramref name="name" /> ma jeden lub więcej określonych parametrów typu rodzajowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3322">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters.</span>
          </span>
          <span data-ttu-id="6cdc9-3323">Oznacza to, że metody <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> właściwość zwraca <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3323">That is, the method's <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> property returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="6cdc9-3324">W celu uzyskiwania dostępu do elementów członkowskich niepublicznych, niezależnie od ich zestawu uprawnień.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3324">for accessing non-public members regardless of their grant set.</span>
          </span>
          <span data-ttu-id="6cdc9-3325">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3325">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="6cdc9-3326">Aby wywoływać kod niezarządzany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3326">to call unmanaged code.</span>
          </span>
          <span data-ttu-id="6cdc9-3327">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3327">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="T:System.Reflection.ParameterAttributes" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] * System.Globalization.CultureInfo -&gt; obj&#xA;override this.InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] * System.Globalization.CultureInfo -&gt; obj" Usage="type.InvokeMember (name, invokeAttr, binder, target, args, culture)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="6cdc9-3328">Ciąg zawierający nazwę konstruktora, metody, właściwości lub pól członka do wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3328">The string containing the name of the constructor, method, property, or field member to invoke.</span>
          </span>
          <span data-ttu-id="6cdc9-3329">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3329">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3330">Ciąg pusty ("") do wywołania domyślny element członkowski.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3330">An empty string ("") to invoke the default member.</span>
          </span>
          <span data-ttu-id="6cdc9-3331">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3331">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3332">Aby uzyskać <see langword="IDispatch" /> członków, ciąg reprezentujący identyfikator DispID, na przykład "[identyfikator DispID = 3]".</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3332">For <see langword="IDispatch" /> members, a string representing the DispID, for example "[DispID=3]".</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="6cdc9-3333">Maska bitów składająca się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3333">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="6cdc9-3334">Dostęp może być jednym z <see langword="BindingFlags" /> takich jak <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />i tak dalej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3334">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span>
          </span>
          <span data-ttu-id="6cdc9-3335">Typ wyszukiwania nie muszą być określane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3335">The type of lookup need not be specified.</span>
          </span>
          <span data-ttu-id="6cdc9-3336">W przypadku pominięcia typ wyszukiwania <see langword="BindingFlags.Public" />  |  <see langword="BindingFlags.Instance" />  |  <see langword="BindingFlags.Static" /> są używane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3336">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" /> are used.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="6cdc9-3337">Obiekt, który określa zestaw właściwości i umożliwia powiązanie, które może obejmować wybór metody przeciążonej, wymuszanie typów argumentu i wywołanie elementu członkowskiego przez odbicie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3337">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="6cdc9-3338">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3338">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3339">Odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic), aby użyć <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3339">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
          <span data-ttu-id="6cdc9-3340">Należy pamiętać, że jawne określenie <see cref="T:System.Reflection.Binder" /> obiekt może być wymagane dla pomyślnie wywołanie przeciążenia metody ze zmiennymi argumentami.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3340">Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be required for successfully invoking method overloads with variable arguments.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="6cdc9-3341">Obiekt do wywołania określonego elementu członkowskiego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3341">The object on which to invoke the specified member.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="6cdc9-3342">Tablica zawierająca argumenty do przekazania do składowej na potrzeby wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3342">An array containing the arguments to pass to the member to invoke.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="6cdc9-3343">Obiekt reprezentujący globalizacji ustawienia regionalne, które będą niezbędne do konwersji specyficzne dla ustawień regionalnych, takich jak konwertowanie liczbowych <see cref="T:System.String" /> do <see cref="T:System.Double" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3343">The object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric <see cref="T:System.String" /> to a <see cref="T:System.Double" />.</span>
          </span>
          <span data-ttu-id="6cdc9-3344">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3344">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3345">Odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic) do użycia bieżący wątek <see cref="T:System.Globalization.CultureInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3345">A null reference (<see langword="Nothing" /> in Visual Basic) to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-3346">Wywołuje określony element członkowski, dopasowanie określoną listę argumentów i kultury i za pomocą ograniczeń w określonym powiązaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3346">Invokes the specified member, using the specified binding constraints and matching the specified argument list and culture.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-3347">Obiekt reprezentujący wartość zwracaną wywołanego elementu członkowskiego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3347">An object representing the return value of the invoked member.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3348">Mimo że domyślny integrator nie przetwarza <xref:System.Globalization.CultureInfo> ( `culture` parametru), można użyć streszczenia <xref:System.Reflection.Binder?displayProperty=nameWithType> klasy do napisania niestandardowego integratora, który przetwarza `culture`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3348">Although the default binder does not process <xref:System.Globalization.CultureInfo> (the `culture` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `culture`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-3349">Nie można użyć <xref:System.Type.InvokeMember%2A> do wywoływania metody rodzajowej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3349">You cannot use <xref:System.Type.InvokeMember%2A> to invoke a generic method.</span></span>  
  
 <span data-ttu-id="6cdc9-3350">Następujące <xref:System.Reflection.BindingFlags> flagi filtru może służyć do definiowania elementów członkowskich, które można uwzględnić w wyszukiwaniu:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3350">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="6cdc9-3351">Określ `BindingFlags.Public` obejmujący publiczne elementy członkowskie w wyszukiwaniu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3351">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="6cdc9-3352">Określ `BindingFlags.NonPublic` obejmujący elementów członkowskich niepublicznych (czyli prywatne, wewnętrzne i chronione elementy członkowskie) w wyszukiwaniu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3352">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="6cdc9-3353">Określ `BindingFlags.FlattenHierarchy` obejmujący statyczne elementy członkowskie w hierarchii.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3353">Specify `BindingFlags.FlattenHierarchy` to include static members up the hierarchy.</span></span>  
  
 <span data-ttu-id="6cdc9-3354">Następujące <xref:System.Reflection.BindingFlags> flagi modyfikatora może służyć do zmiany sposobu działania wyszukiwania:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3354">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="6cdc9-3355">`BindingFlags.IgnoreCase` Aby zignorować wielkość liter `name`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3355">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="6cdc9-3356">`BindingFlags.DeclaredOnly` Aby wyszukać tylko do elementów członkowskich zadeklarowanych w <xref:System.Type>, nie elementów członkowskich, które zostały po prostu odziedziczone.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3356">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="6cdc9-3357">Następujące <xref:System.Reflection.BindingFlags> flagi wywołania może służyć do określenia, jaką akcję należy podjąć przy użyciu elementu członkowskiego:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3357">The following <xref:System.Reflection.BindingFlags> invocation flags can be used to denote what action to take with the member:</span></span>  
  
-   <span data-ttu-id="6cdc9-3358">`CreateInstance` Aby wywołać konstruktora.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3358">`CreateInstance` to invoke a constructor.</span></span> <span data-ttu-id="6cdc9-3359">`name` jest ignorowany.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3359">`name` is ignored.</span></span> <span data-ttu-id="6cdc9-3360">Nieprawidłowy inne flagi wywołania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3360">Not valid with other invocation flags.</span></span>  
  
-   <span data-ttu-id="6cdc9-3361">`InvokeMethod` do wywołania metody, ale nie konstruktorze lub inicjatorze typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3361">`InvokeMethod` to invoke a method, but not a constructor or a type initializer.</span></span> <span data-ttu-id="6cdc9-3362">Nie jest prawidłowy z `SetField` lub `SetProperty`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3362">Not valid with `SetField` or `SetProperty`.</span></span> <span data-ttu-id="6cdc9-3363">Jeśli `InvokeMethod` jest określony przez siebie, `BindingFlags.Public`, `BindingFlags.Instance`, i `BindingFlags.Static` są automatycznie dołączane.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3363">If `InvokeMethod` is specified by itself, `BindingFlags.Public`, `BindingFlags.Instance`, and `BindingFlags.Static` are automatically included.</span></span>  
  
-   <span data-ttu-id="6cdc9-3364">`GetField` można pobrać wartości pola.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3364">`GetField` to get the value of a field.</span></span> <span data-ttu-id="6cdc9-3365">Nie jest prawidłowy z `SetField`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3365">Not valid with `SetField`.</span></span>  
  
-   <span data-ttu-id="6cdc9-3366">`SetField` można ustawić wartości pola.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3366">`SetField` to set the value of a field.</span></span> <span data-ttu-id="6cdc9-3367">Nie jest prawidłowy z `GetField`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3367">Not valid with `GetField`.</span></span>  
  
-   <span data-ttu-id="6cdc9-3368">`GetProperty` można pobrać właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3368">`GetProperty` to get a property.</span></span> <span data-ttu-id="6cdc9-3369">Nie jest prawidłowy z `SetProperty`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3369">Not valid with `SetProperty`.</span></span>  
  
-   <span data-ttu-id="6cdc9-3370">`SetProperty` można ustawić właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3370">`SetProperty` to set a property.</span></span> <span data-ttu-id="6cdc9-3371">Nie jest prawidłowy z `GetProperty`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3371">Not valid with `GetProperty`.</span></span>  
  
 <span data-ttu-id="6cdc9-3372">Aby uzyskać więcej informacji, zobacz <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3372">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="6cdc9-3373">Metoda zostanie wywołana, jeśli są spełnione oba poniższe warunki:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3373">A method will be invoked if both of the following conditions are true:</span></span>  
  
-   <span data-ttu-id="6cdc9-3374">Liczba parametrów w deklaracji metody jest równa liczbie argumentów `args` tablicy (chyba że argumenty domyślne są zdefiniowane w składowej i `BindingFlags.OptionalParamBinding` jest określony).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3374">The number of parameters in the method declaration equals the number of arguments in the `args` array (unless default arguments are defined on the member and `BindingFlags.OptionalParamBinding` is specified).</span></span>  
  
-   <span data-ttu-id="6cdc9-3375">Typ każdego argumentu mogą być konwertowane przez binder typowi parametru.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3375">The type of each argument can be converted by the binder to the type of the parameter.</span></span>  
  
 <span data-ttu-id="6cdc9-3376">Obiekt wiążący znajdzie wszystkie metody dopasowania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3376">The binder will find all of the matching methods.</span></span> <span data-ttu-id="6cdc9-3377">Te metody zostaną znalezione, oparte na typie powiązania żądane (<xref:System.Reflection.BindingFlags> wartości `InvokeMethod`, `GetProperty`i tak dalej).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3377">These methods are found based upon the type of binding requested (<xref:System.Reflection.BindingFlags> values `InvokeMethod`, `GetProperty`, and so on).</span></span> <span data-ttu-id="6cdc9-3378">Zestaw metod są filtrowane według nazwy, liczba argumentów i zestaw modyfikatorów wyszukiwania zdefiniowane w obiekt wiążący.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3378">The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.</span></span>  
  
 <span data-ttu-id="6cdc9-3379">Po wybraniu metody jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3379">After the method is selected, it is invoked.</span></span> <span data-ttu-id="6cdc9-3380">Dostępność jest sprawdzana w tym momencie.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3380">Accessibility is checked at that point.</span></span> <span data-ttu-id="6cdc9-3381">Wyszukiwanie może kontrolować, które zestaw metod, przeszukiwane są na podstawie atrybutu ułatwień dostępu powiązany z metodą.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3381">The search may control which set of methods are searched based upon the accessibility attribute associated with the method.</span></span> <span data-ttu-id="6cdc9-3382"><xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> Metody <xref:System.Reflection.Binder> klasy jest odpowiedzialny za wybranie wywoływanej metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3382">The <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> method of the <xref:System.Reflection.Binder> class is responsible for selecting the method to be invoked.</span></span> <span data-ttu-id="6cdc9-3383">Domyślny integrator wybiera najbardziej określonego dopasowania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3383">The default binder selects the most specific match.</span></span>  
  
 <span data-ttu-id="6cdc9-3384">Ograniczenia dostępu są ignorowane w przypadku w pełni zaufany kod; oznacza to, że konstruktory prywatne, metody, pola i właściwości umożliwia dostęp i wywoływany przez odbicie, zawsze wtedy, gdy kod jest w pełni zaufany.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3384">Access restrictions are ignored for fully trusted code; that is, private constructors, methods, fields, and properties can be accessed and invoked through Reflection whenever the code is fully trusted.</span></span>  
  
 <span data-ttu-id="6cdc9-3385">Możesz użyć `Type.InvokeMember` można ustawić pola na określoną wartość, określając <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3385">You can use `Type.InvokeMember` to set a field to a particular value by specifying <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span></span> <span data-ttu-id="6cdc9-3386">Na przykład, jeśli chcesz ustawić pole publiczne wystąpienia o nazwie F klasy C i F jest `String` można użyć kodu takiego jak:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3386">For example, if you want to set a public instance field named F on class C, and F is a `String` you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {"strings new value"}, null);`  
  
 <span data-ttu-id="6cdc9-3387">Jeśli jest F `String[]`, można użyć kodu takiego jak:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3387">If F is a `String[]`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {new String[]{"a","z","c","d"}}, null);`  
  
 <span data-ttu-id="6cdc9-3388">która zainicjuje pole F do tej nowej tablicy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3388">which will initialize the field F to this new array.</span></span> <span data-ttu-id="6cdc9-3389">Można również użyć `Type.InvokeMember` próba ustawienia pozycji w tablicy, podając indeks wartości, a następnie wartość następnego przy użyciu następującego kodu:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3389">You can also use `Type.InvokeMember` to set a position in an array by supplying the index of the value and then the next value by using code such as the following:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {1, "b"}, null);`  
  
 <span data-ttu-id="6cdc9-3390">Spowoduje to zmianę w tablicy, która F zawiera ciąg "b", ciąg "z".</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3390">This will change string "z" in the array that F holds to string "b".</span></span>  
  
 <span data-ttu-id="6cdc9-3391">Gdy wywołujesz `IDispatch` elementu członkowskiego, możesz określić identyfikator DispID zamiast nazwy elementu członkowskiego, używając formatu ciągu "[identyfikator DispID = ##]".</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3391">When you invoke an `IDispatch` member you can specify the DispID instead of the member name, using the string format "[DispID=##]".</span></span> <span data-ttu-id="6cdc9-3392">Na przykład, jeśli identyfikator DispID MyComMethod wynosi 3, możesz określić ciąg "[identyfikator DispID = 3]" zamiast "MyComMethod".</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3392">For example, if the DispID of MyComMethod is 3, you can specify the string "[DispID=3]" instead of "MyComMethod".</span></span> <span data-ttu-id="6cdc9-3393">Wywoływanie składowej przez identyfikator DispID jest szybsze niż Wyszukiwanie elementu członkowskiego według nazwy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3393">Invoking a member by DispID is faster than looking up the member by name.</span></span> <span data-ttu-id="6cdc9-3394">W scenariuszach złożoną agregację DispID czasami jest jedynym sposobem, aby wywołać żądanego elementu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3394">In complex aggregation scenarios, the DispID is sometimes the only way to invoke the desired member.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-3395">Począwszy od [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], Metoda ta może służyć do dostępu do elementów członkowskich niepublicznych, jeśli obiekt wywołujący zostało udzielone <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> Flaga, a jeśli zestaw uprawnień elementów członkowskich niepublicznych jest ograniczony do obiektu wywołującego przyznania zestawu lub być podzbiorem jej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3395">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="6cdc9-3396">(Zobacz [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3396">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="6cdc9-3397">Aby używać tej funkcji, powinien dotyczyć aplikacji [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3397">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-3398">
            <paramref name="invokeAttr" /> nie zawiera <see langword="CreateInstance" /> i <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3398">
              <paramref name="invokeAttr" /> does not contain <see langword="CreateInstance" /> and <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6cdc9-3399">
            <paramref name="invokeAttr" /> nie jest prawidłowym <see cref="T:System.Reflection.BindingFlags" /> atrybutu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3399">
              <paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute.</span>
          </span>
          <span data-ttu-id="6cdc9-3400">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3400">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3401">
            <paramref name="invokeAttr" /> nie zawiera jedną z następujących flag powiązania: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, lub <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3401">
              <paramref name="invokeAttr" /> does not contain one of the following binding flags: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="6cdc9-3402">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3402">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3403">
            <paramref name="invokeAttr" /> zawiera <see langword="CreateInstance" /> w połączeniu z <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, lub <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3403">
              <paramref name="invokeAttr" /> contains <see langword="CreateInstance" /> combined with <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="6cdc9-3404">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3404">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3405">
            <paramref name="invokeAttr" /> zawiera zarówno <see langword="GetField" /> i <see langword="SetField" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3405">
              <paramref name="invokeAttr" /> contains both <see langword="GetField" /> and <see langword="SetField" />.</span>
          </span>
          <span data-ttu-id="6cdc9-3406">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3406">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3407">
            <paramref name="invokeAttr" /> zawiera zarówno <see langword="GetProperty" /> i <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3407">
              <paramref name="invokeAttr" /> contains both <see langword="GetProperty" /> and <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="6cdc9-3408">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3408">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3409">
            <paramref name="invokeAttr" /> zawiera <see langword="InvokeMethod" /> w połączeniu z <see langword="SetField" /> lub <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3409">
              <paramref name="invokeAttr" /> contains <see langword="InvokeMethod" /> combined with <see langword="SetField" /> or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="6cdc9-3410">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3410">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3411">
            <paramref name="invokeAttr" /> zawiera <see langword="SetField" /> i <paramref name="args" /> ma więcej niż jeden element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3411">
              <paramref name="invokeAttr" /> contains <see langword="SetField" /> and <paramref name="args" /> has more than one element.</span>
          </span>
          <span data-ttu-id="6cdc9-3412">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3412">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3413">Ta metoda jest wywoływana dla obiektu COM i jedną z następujących flag powiązania nie przekazano: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" />, lub <see langword="BindingFlags.PutRefDispProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3413">This method is called on a COM object and one of the following binding flags was not passed in: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" />, or <see langword="BindingFlags.PutRefDispProperty" />.</span>
          </span>
          <span data-ttu-id="6cdc9-3414">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3414">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3415">Jedna z nich tablic nazwany parametr zawiera ciąg, który jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3415">One of the named parameter arrays contains a string that is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="6cdc9-3416">Określony element członkowski jest inicjator klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3416">The specified member is a class initializer.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingFieldException">
          <span data-ttu-id="6cdc9-3417">Nie można odnaleźć pola lub właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3417">The field or property cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="6cdc9-3418">Brak metody można znaleźć odpowiadającej argumentów <paramref name="args" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3418">No method can be found that matches the arguments in <paramref name="args" />.</span>
          </span>
          <span data-ttu-id="6cdc9-3419">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3419">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3420">Bieżący <see cref="T:System.Type" /> obiekt reprezentuje typ, który zawiera parametry typu otwartego, czyli <see cref="P:System.Type.ContainsGenericParameters" /> zwraca <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3420">The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetException">
          <span data-ttu-id="6cdc9-3421">Nie można wywołać określonego elementu członkowskiego <paramref name="target" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3421">The specified member cannot be invoked on <paramref name="target" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="6cdc9-3422">Więcej niż jednej metody odpowiadającego kryteriom powiązania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3422">More than one method matches the binding criteria.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6cdc9-3423">Metody reprezentowanej przez <paramref name="name" /> ma jeden lub więcej określonych parametrów typu rodzajowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3423">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters.</span>
          </span>
          <span data-ttu-id="6cdc9-3424">Oznacza to, że metody <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> właściwość zwraca <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3424">That is, the method's <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> property returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="6cdc9-3425">W celu uzyskiwania dostępu do elementów członkowskich niepublicznych, niezależnie od ich zestawu uprawnień.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3425">for accessing non-public members regardless of their grant set.</span>
          </span>
          <span data-ttu-id="6cdc9-3426">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3426">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="6cdc9-3427">Aby wywoływać kod niezarządzany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3427">to call unmanaged code.</span>
          </span>
          <span data-ttu-id="6cdc9-3428">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3428">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="T:System.Reflection.ParameterAttributes" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public abstract object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, valuetype System.Reflection.ParameterModifier[] modifiers, class System.Globalization.CultureInfo culture, string[] namedParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::String ^&gt; ^ namedParameters);" />
      <MemberSignature Language="F#" Value="abstract member InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] * System.Reflection.ParameterModifier[] * System.Globalization.CultureInfo * string[] -&gt; obj" Usage="type.InvokeMember (name, invokeAttr, binder, target, args, modifiers, culture, namedParameters)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="namedParameters" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="6cdc9-3429">Ciąg zawierający nazwę konstruktora, metody, właściwości lub pól członka do wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3429">The string containing the name of the constructor, method, property, or field member to invoke.</span>
          </span>
          <span data-ttu-id="6cdc9-3430">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3430">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3431">Ciąg pusty ("") do wywołania domyślny element członkowski.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3431">An empty string ("") to invoke the default member.</span>
          </span>
          <span data-ttu-id="6cdc9-3432">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3432">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3433">Aby uzyskać <see langword="IDispatch" /> członków, ciąg reprezentujący identyfikator DispID, na przykład "[identyfikator DispID = 3]".</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3433">For <see langword="IDispatch" /> members, a string representing the DispID, for example "[DispID=3]".</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="6cdc9-3434">Maska bitów składająca się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3434">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="6cdc9-3435">Dostęp może być jednym z <see langword="BindingFlags" /> takich jak <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />i tak dalej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3435">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span>
          </span>
          <span data-ttu-id="6cdc9-3436">Typ wyszukiwania nie muszą być określane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3436">The type of lookup need not be specified.</span>
          </span>
          <span data-ttu-id="6cdc9-3437">W przypadku pominięcia typ wyszukiwania <see langword="BindingFlags.Public" />  |  <see langword="BindingFlags.Instance" />  |  <see langword="BindingFlags.Static" /> są używane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3437">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" /> are used.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="6cdc9-3438">Obiekt, który określa zestaw właściwości i umożliwia powiązanie, które może obejmować wybór metody przeciążonej, wymuszanie typów argumentu i wywołanie elementu członkowskiego przez odbicie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3438">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="6cdc9-3439">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3439">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3440">Odwołanie o wartości null (Nothing w języku Visual Basic), aby użyć <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3440">A null reference (Nothing in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
          <span data-ttu-id="6cdc9-3441">Należy pamiętać, że jawne określenie <see cref="T:System.Reflection.Binder" /> obiekt może być wymagane dla pomyślnie wywołanie przeciążenia metody ze zmiennymi argumentami.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3441">Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be required for successfully invoking method overloads with variable arguments.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="6cdc9-3442">Obiekt do wywołania określonego elementu członkowskiego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3442">The object on which to invoke the specified member.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="6cdc9-3443">Tablica zawierająca argumenty do przekazania do składowej na potrzeby wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3443">An array containing the arguments to pass to the member to invoke.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="6cdc9-3444">Tablica <see cref="T:System.Reflection.ParameterModifier" /> obiektów reprezentujących atrybuty skojarzone z odpowiednim elementem w <c>args</c> tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3444">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>args</c> array.</span>
          </span>
          <span data-ttu-id="6cdc9-3445">Parametr skojarzonych z nimi atrybutów są przechowywane w podpisie elementu członkowskiego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3445">A parameter's associated attributes are stored in the member's signature.</span>
          </span>
          <span data-ttu-id="6cdc9-3446">Tylko wtedy, gdy wywołanie składnika modelu COM, domyślny integrator przetwarza tego parametru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3446">The default binder processes this parameter only when calling a COM component.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="6cdc9-3447">
            <see cref="T:System.Globalization.CultureInfo" /> Obiekt reprezentujący globalizacji ustawienia regionalne, które mogą być konieczne w przypadku konwersji specyficzne dla ustawień regionalnych, takich jak konwertowanie ciągów liczbowych na wartość o podwójnej precyzji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3447">The <see cref="T:System.Globalization.CultureInfo" /> object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric String to a Double.</span>
          </span>
          <span data-ttu-id="6cdc9-3448">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3448">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3449">Odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic) do użycia bieżący wątek <see cref="T:System.Globalization.CultureInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3449">A null reference (<see langword="Nothing" /> in Visual Basic) to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</span>
          </span>
        </param>
        <param name="namedParameters">
          <span data-ttu-id="6cdc9-3450">Tablica zawierająca nazwy parametrów, do której wartości w <c>args</c> tablicy są przekazywane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3450">An array containing the names of the parameters to which the values in the <c>args</c> array are passed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-3451">W przypadku przesłonięcia w klasie pochodnej, wywołuje określonego elementu członkowskiego, dopasowanie określoną listę argumentów, Modyfikatory i kultury i za pomocą ograniczeń w określonym powiązaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3451">When overridden in a derived class, invokes the specified member, using the specified binding constraints and matching the specified argument list, modifiers and culture.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-3452">Obiekt reprezentujący wartość zwracaną wywołanego elementu członkowskiego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3452">An object representing the return value of the invoked member.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3453">`InvokeMember` wywołuje członek konstruktora lub metody, pobiera lub ustawia element właściwości, pobiera lub ustawia element członkowski pola danych lub pobiera lub ustawia element członkowski tablicy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3453">`InvokeMember` calls a constructor member or a method member, gets or sets a property member, gets or sets a data field member, or gets or sets an element of an array member.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-3454">Nie można użyć <xref:System.Type.InvokeMember%2A> do wywoływania metody rodzajowej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3454">You cannot use <xref:System.Type.InvokeMember%2A> to invoke a generic method.</span></span>  
  
 <span data-ttu-id="6cdc9-3455">Gdy wywołujesz `IDispatch` elementu członkowskiego, możesz określić identyfikator DispID zamiast nazwy elementu członkowskiego, używając formatu ciągu "[identyfikator DispID = ##]".</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3455">When you invoke an `IDispatch` member you can specify the DispID instead of the member name, using the string format "[DispID=##]".</span></span> <span data-ttu-id="6cdc9-3456">Na przykład, jeśli identyfikator DispID MyComMethod wynosi 3, możesz określić ciąg "[identyfikator DispID = 3]" zamiast "MyComMethod".</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3456">For example, if the DispID of MyComMethod is 3, you can specify the string "[DispID=3]" instead of "MyComMethod".</span></span> <span data-ttu-id="6cdc9-3457">Wywoływanie składowej przez identyfikator DispID jest szybsze niż Wyszukiwanie elementu członkowskiego według nazwy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3457">Invoking a member by DispID is faster than looking up the member by name.</span></span> <span data-ttu-id="6cdc9-3458">W scenariuszach złożoną agregację DispID czasami jest jedynym sposobem, aby wywołać żądanego elementu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3458">In complex aggregation scenarios, the DispID is sometimes the only way to invoke the desired member.</span></span>  
  
 <span data-ttu-id="6cdc9-3459">Mimo że domyślny integrator nie przetwarza <xref:System.Reflection.ParameterModifier> lub <xref:System.Globalization.CultureInfo> ( `modifiers` i `culture` parametrów), można użyć streszczenia <xref:System.Reflection.Binder?displayProperty=nameWithType> klasy do napisania niestandardowego integratora, który przetwarza `modifiers` i `culture`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3459">Although the default binder does not process <xref:System.Reflection.ParameterModifier> or <xref:System.Globalization.CultureInfo> (the `modifiers` and `culture` parameters), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers` and `culture`.</span></span> <span data-ttu-id="6cdc9-3460">`ParameterModifier` jest używana tylko podczas wywoływania przez współdziałania z modelem COM i są obsługiwane tylko w przypadku parametrów, które są przekazywane przez odwołanie.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3460">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="6cdc9-3461">Każdy parametr w `namedParameters` tablicy pobiera wartość w odpowiednim elementem w `args` tablicy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3461">Each parameter in the `namedParameters` array gets the value in the corresponding element in the `args` array.</span></span> <span data-ttu-id="6cdc9-3462">Jeśli długość `args` jest większa niż długość `namedParameters`, pozostałe wartości argumentów są przekazywane w kolejności.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3462">If the length of `args` is greater than the length of `namedParameters`, the remaining argument values are passed in order.</span></span>  
  
 <span data-ttu-id="6cdc9-3463">`namedParameters` Tablicy można zmienić kolejność argumentów w tablicy wejściowej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3463">The `namedParameters` array can be used to change the order of arguments in an input array.</span></span> <span data-ttu-id="6cdc9-3464">Na przykład, biorąc pod uwagę metody `M(string a, int b)` (`M(ByVal a As String, ByVal b As Integer)` w języku Visual Basic) i Tablica wejściowa `{ 42, "x" }`, Tablica wejściowa mogą być przekazywane bez zmian do `args` Jeśli tablica `{ "b", "a" }` podano dla `namedParameters`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3464">For example, given the method `M(string a, int b)` (`M(ByVal a As String, ByVal b As Integer)` in Visual Basic) and the input array `{ 42, "x" }`, the input array can be passed unchanged to `args` if the array `{ "b", "a" }` is supplied for `namedParameters`.</span></span>  
  
 <span data-ttu-id="6cdc9-3465">Następujące <xref:System.Reflection.BindingFlags> flagi filtru może służyć do definiowania elementów członkowskich, które można uwzględnić w wyszukiwaniu:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3465">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="6cdc9-3466">Określ `BindingFlags.Public` obejmujący publiczne elementy członkowskie w wyszukiwaniu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3466">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="6cdc9-3467">Określ `BindingFlags.NonPublic` obejmujący elementów członkowskich niepublicznych (czyli prywatne, wewnętrzne i chronione elementy członkowskie) w wyszukiwaniu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3467">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="6cdc9-3468">Określ `BindingFlags.FlattenHierarchy` obejmujący statyczne elementy członkowskie w hierarchii.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3468">Specify `BindingFlags.FlattenHierarchy` to include static members up the hierarchy.</span></span>  
  
 <span data-ttu-id="6cdc9-3469">Następujące <xref:System.Reflection.BindingFlags> flagi modyfikatora może służyć do zmiany sposobu działania wyszukiwania:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3469">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="6cdc9-3470">`BindingFlags.IgnoreCase` Aby zignorować wielkość liter `name`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3470">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="6cdc9-3471">`BindingFlags.DeclaredOnly` Aby wyszukać tylko do elementów członkowskich zadeklarowanych w <xref:System.Type>, nie elementów członkowskich, które zostały po prostu odziedziczone.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3471">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="6cdc9-3472">Następujące <xref:System.Reflection.BindingFlags> flagi wywołania może służyć do określenia, jaką akcję należy podjąć przy użyciu elementu członkowskiego:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3472">The following <xref:System.Reflection.BindingFlags> invocation flags can be used to denote what action to take with the member:</span></span>  
  
-   <span data-ttu-id="6cdc9-3473">`CreateInstance` Aby wywołać konstruktora.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3473">`CreateInstance` to invoke a constructor.</span></span> <span data-ttu-id="6cdc9-3474">`name` jest ignorowany.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3474">`name` is ignored.</span></span> <span data-ttu-id="6cdc9-3475">Nieprawidłowy inne flagi wywołania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3475">Not valid with other invocation flags.</span></span>  
  
-   <span data-ttu-id="6cdc9-3476">`InvokeMethod` do wywołania metody, ale nie konstruktorze lub inicjatorze typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3476">`InvokeMethod` to invoke a method, but not a constructor or a type initializer.</span></span> <span data-ttu-id="6cdc9-3477">Nie jest prawidłowy z `SetField` lub `SetProperty`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3477">Not valid with `SetField` or `SetProperty`.</span></span> <span data-ttu-id="6cdc9-3478">Jeśli `InvokeMethod` jest określony przez siebie, `BindingFlags.Public`, `BindingFlags.Instance`, i `BindingFlags.Static` są automatycznie dołączane.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3478">If `InvokeMethod` is specified by itself, `BindingFlags.Public`, `BindingFlags.Instance`, and `BindingFlags.Static` are automatically included.</span></span>  
  
-   <span data-ttu-id="6cdc9-3479">`GetField` można pobrać wartości pola.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3479">`GetField` to get the value of a field.</span></span> <span data-ttu-id="6cdc9-3480">Nie jest prawidłowy z `SetField`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3480">Not valid with `SetField`.</span></span>  
  
-   <span data-ttu-id="6cdc9-3481">`SetField` można ustawić wartości pola.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3481">`SetField` to set the value of a field.</span></span> <span data-ttu-id="6cdc9-3482">Nie jest prawidłowy z `GetField`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3482">Not valid with `GetField`.</span></span>  
  
-   <span data-ttu-id="6cdc9-3483">`GetProperty` można pobrać właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3483">`GetProperty` to get a property.</span></span> <span data-ttu-id="6cdc9-3484">Nie jest prawidłowy z `SetProperty`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3484">Not valid with `SetProperty`.</span></span>  
  
-   <span data-ttu-id="6cdc9-3485">`SetProperty` można ustawić właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3485">`SetProperty` to set a property.</span></span> <span data-ttu-id="6cdc9-3486">Nie jest prawidłowy z `GetProperty`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3486">Not valid with `GetProperty`.</span></span>  
  
 <span data-ttu-id="6cdc9-3487">Aby uzyskać więcej informacji, zobacz <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3487">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="6cdc9-3488">Metoda zostanie wywołana, jeśli są spełnione oba poniższe warunki:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3488">A method will be invoked if both of the following conditions are true:</span></span>  
  
-   <span data-ttu-id="6cdc9-3489">Liczba parametrów w deklaracji metody jest równa liczbie argumentów `args` tablicy (chyba że argumenty domyślne są zdefiniowane w składowej i `BindingFlags.OptionalParamBinding` jest określony).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3489">The number of parameters in the method declaration equals the number of arguments in the `args` array (unless default arguments are defined on the member and `BindingFlags.OptionalParamBinding` is specified).</span></span>  
  
-   <span data-ttu-id="6cdc9-3490">Typ każdego argumentu mogą być konwertowane przez binder typowi parametru.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3490">The type of each argument can be converted by the binder to the type of the parameter.</span></span>  
  
 <span data-ttu-id="6cdc9-3491">Obiekt wiążący znajdzie wszystkie metody dopasowania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3491">The binder will find all of the matching methods.</span></span> <span data-ttu-id="6cdc9-3492">Te metody zostaną znalezione, oparte na typie powiązania żądane (<xref:System.Reflection.BindingFlags> wartości `InvokeMethod`, `GetProperty`i tak dalej).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3492">These methods are found based upon the type of binding requested (<xref:System.Reflection.BindingFlags> values `InvokeMethod`, `GetProperty`, and so on).</span></span> <span data-ttu-id="6cdc9-3493">Zestaw metod są filtrowane według nazwy, liczba argumentów i zestaw modyfikatorów wyszukiwania zdefiniowane w obiekt wiążący.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3493">The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.</span></span>  
  
 <span data-ttu-id="6cdc9-3494">Po wybraniu metody jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3494">After the method is selected, it is invoked.</span></span> <span data-ttu-id="6cdc9-3495">Dostępność jest sprawdzana w tym momencie.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3495">Accessibility is checked at that point.</span></span> <span data-ttu-id="6cdc9-3496">Wyszukiwanie może kontrolować, które zestaw metod, przeszukiwane są na podstawie atrybutu ułatwień dostępu powiązany z metodą.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3496">The search may control which set of methods are searched based upon the accessibility attribute associated with the method.</span></span> <span data-ttu-id="6cdc9-3497"><xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> Metody <xref:System.Reflection.Binder> klasy jest odpowiedzialny za wybranie wywoływanej metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3497">The <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> method of the <xref:System.Reflection.Binder> class is responsible for selecting the method to be invoked.</span></span> <span data-ttu-id="6cdc9-3498">Domyślny integrator wybiera najbardziej określonego dopasowania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3498">The default binder selects the most specific match.</span></span>  
  
 <span data-ttu-id="6cdc9-3499">`InvokeMember` może służyć do wywołania metody z parametrami, które mają przypisane wartości domyślne.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3499">`InvokeMember` can be used to invoke methods with parameters that have default values.</span></span> <span data-ttu-id="6cdc9-3500">Aby powiązać z tych metod, wymaga odbicia <xref:System.Reflection.BindingFlags.OptionalParamBinding?displayProperty=nameWithType> należy określić.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3500">To bind to these methods, Reflection requires <xref:System.Reflection.BindingFlags.OptionalParamBinding?displayProperty=nameWithType> to be specified.</span></span> <span data-ttu-id="6cdc9-3501">Dla parametru, który ma wartość domyślną, możesz podać inną wartość, lub podaj <xref:System.Reflection.Missing.Value?displayProperty=nameWithType> Aby użyć wartości domyślnej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3501">For a parameter that has a default value, you can either supply a different value, or supply <xref:System.Reflection.Missing.Value?displayProperty=nameWithType> to use the default value.</span></span>  
  
 <span data-ttu-id="6cdc9-3502">Rozważmy na przykład metody takie jak MyMethod (int x, float y = w wersji 2.0).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3502">For example, consider a method such as MyMethod(int x, float y = 2.0).</span></span> <span data-ttu-id="6cdc9-3503">Aby wywołać tej metody za pomocą tylko pierwszy argument jako MyMethod(4), jedną z powyższych flag powiązania i przekazać dwa argumenty, a mianowicie 4 dla pierwszego argumentu i `Missing.Value` dla drugiego argumentu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3503">To invoke this method with only the first argument as MyMethod(4), pass one of the above binding flags and pass two arguments, namely, 4 for the first argument and `Missing.Value` for the second argument.</span></span> <span data-ttu-id="6cdc9-3504">Chyba że używasz `Missing.Value`, nie może pominąć parametrów opcjonalnych za pomocą `Invoke` metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3504">Unless you use `Missing.Value`, you may not omit optional parameters with the `Invoke` method.</span></span> <span data-ttu-id="6cdc9-3505">Jeśli należy to zrobić, użyj `InvokeMember` zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3505">If you must do so, use `InvokeMember` instead.</span></span>  
  
 <span data-ttu-id="6cdc9-3506">Ograniczenia dostępu są ignorowane w przypadku w pełni zaufany kod; oznacza to, konstruktory prywatne, metody, pola i właściwości mogą być dostępne i wywoływane za pośrednictwem <xref:System.Reflection> zawsze, gdy kod jest w pełni zaufany.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3506">Access restrictions are ignored for fully trusted code; that is, private constructors, methods, fields, and properties can be accessed and invoked through <xref:System.Reflection> whenever the code is fully trusted.</span></span>  
  
 <span data-ttu-id="6cdc9-3507">Możesz użyć `Type.InvokeMember` można ustawić pola na określoną wartość, określając <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3507">You can use `Type.InvokeMember` to set a field to a particular value by specifying <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span></span> <span data-ttu-id="6cdc9-3508">Na przykład, jeśli chcesz ustawić pole publiczne wystąpienia o nazwie F klasy C i F jest `String`, można użyć kodu takiego jak:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3508">For example, if you want to set a public instance field named F on class C, and F is a `String`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {"strings new value"}, null, null, null);`  
  
 <span data-ttu-id="6cdc9-3509">Jeśli jest F `String[]`, można użyć kodu takiego jak:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3509">If F is a `String[]`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {new String[]{"a","z","c","d"}}, null, null, null);`  
  
 <span data-ttu-id="6cdc9-3510">która zainicjuje pole F do tej nowej tablicy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3510">which will initialize the field F to this new array.</span></span> <span data-ttu-id="6cdc9-3511">Można również użyć `Type.InvokeMember` próba ustawienia pozycji w tablicy, podając indeks wartości, a następnie wartość następnego przy użyciu następującego kodu:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3511">You can also use `Type.InvokeMember` to set a position in an array by supplying the index of the value and then the next value by using code such as the following:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {1, "b"}, null, null, null);`  
  
 <span data-ttu-id="6cdc9-3512">Spowoduje to zmianę w tablicy, która F zawiera ciąg "b", ciąg "z".</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3512">This will change string "z" in the array that F holds to string "b".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-3513">Począwszy od [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], Metoda ta może służyć do dostępu do elementów członkowskich niepublicznych, jeśli obiekt wywołujący zostało udzielone <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> Flaga, a jeśli zestaw uprawnień elementów członkowskich niepublicznych jest ograniczony do obiektu wywołującego przyznania zestawu lub być podzbiorem jej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3513">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="6cdc9-3514">(Zobacz [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3514">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="6cdc9-3515">Aby używać tej funkcji, powinien dotyczyć aplikacji [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3515">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-3516">
            <paramref name="invokeAttr" /> nie zawiera <see langword="CreateInstance" /> i <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3516">
              <paramref name="invokeAttr" /> does not contain <see langword="CreateInstance" /> and <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6cdc9-3517">
            <paramref name="args" /> i <paramref name="modifiers" /> nie mają tę samą długość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3517">
              <paramref name="args" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
          <span data-ttu-id="6cdc9-3518">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3518">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3519">
            <paramref name="invokeAttr" /> nie jest prawidłowym <see cref="T:System.Reflection.BindingFlags" /> atrybutu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3519">
              <paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute.</span>
          </span>
          <span data-ttu-id="6cdc9-3520">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3520">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3521">
            <paramref name="invokeAttr" /> nie zawiera jedną z następujących flag powiązania: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, lub <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3521">
              <paramref name="invokeAttr" /> does not contain one of the following binding flags: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="6cdc9-3522">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3522">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3523">
            <paramref name="invokeAttr" /> zawiera <see langword="CreateInstance" /> w połączeniu z <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, lub <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3523">
              <paramref name="invokeAttr" /> contains <see langword="CreateInstance" /> combined with <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="6cdc9-3524">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3524">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3525">
            <paramref name="invokeAttr" /> zawiera zarówno <see langword="GetField" /> i <see langword="SetField" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3525">
              <paramref name="invokeAttr" /> contains both <see langword="GetField" /> and <see langword="SetField" />.</span>
          </span>
          <span data-ttu-id="6cdc9-3526">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3526">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3527">
            <paramref name="invokeAttr" /> zawiera zarówno <see langword="GetProperty" /> i <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3527">
              <paramref name="invokeAttr" /> contains both <see langword="GetProperty" /> and <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="6cdc9-3528">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3528">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3529">
            <paramref name="invokeAttr" /> zawiera <see langword="InvokeMethod" /> w połączeniu z <see langword="SetField" /> lub <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3529">
              <paramref name="invokeAttr" /> contains <see langword="InvokeMethod" /> combined with <see langword="SetField" /> or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="6cdc9-3530">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3530">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3531">
            <paramref name="invokeAttr" /> zawiera <see langword="SetField" /> i <paramref name="args" /> ma więcej niż jeden element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3531">
              <paramref name="invokeAttr" /> contains <see langword="SetField" /> and <paramref name="args" /> has more than one element.</span>
          </span>
          <span data-ttu-id="6cdc9-3532">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3532">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3533">Tablica parametrów nazwanych jest większa niż tablica argumentów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3533">The named parameter array is larger than the argument array.</span>
          </span>
          <span data-ttu-id="6cdc9-3534">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3534">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3535">Ta metoda jest wywoływana dla obiektu COM i jedną z następujących flag powiązania nie przekazano: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" />, lub <see langword="BindingFlags.PutRefDispProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3535">This method is called on a COM object and one of the following binding flags was not passed in: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" />, or <see langword="BindingFlags.PutRefDispProperty" />.</span>
          </span>
          <span data-ttu-id="6cdc9-3536">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3536">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3537">Jedna z nich tablic nazwany parametr zawiera ciąg, który jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3537">One of the named parameter arrays contains a string that is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="6cdc9-3538">Określony element członkowski jest inicjator klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3538">The specified member is a class initializer.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingFieldException">
          <span data-ttu-id="6cdc9-3539">Nie można odnaleźć pola lub właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3539">The field or property cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="6cdc9-3540">Brak metody można znaleźć odpowiadającej argumentów <paramref name="args" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3540">No method can be found that matches the arguments in <paramref name="args" />.</span>
          </span>
          <span data-ttu-id="6cdc9-3541">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3541">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3542">Brak elementów członkowskich, można znaleźć zawierającej nazwy argumentów dostarczone w <paramref name="namedParameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3542">No member can be found that has the argument names supplied in <paramref name="namedParameters" />.</span>
          </span>
          <span data-ttu-id="6cdc9-3543">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3543">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-3544">Bieżący <see cref="T:System.Type" /> obiekt reprezentuje typ, który zawiera parametry typu otwartego, czyli <see cref="P:System.Type.ContainsGenericParameters" /> zwraca <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3544">The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetException">
          <span data-ttu-id="6cdc9-3545">Nie można wywołać określonego elementu członkowskiego <paramref name="target" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3545">The specified member cannot be invoked on <paramref name="target" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="6cdc9-3546">Więcej niż jednej metody odpowiadającego kryteriom powiązania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3546">More than one method matches the binding criteria.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6cdc9-3547">Metody reprezentowanej przez <paramref name="name" /> ma jeden lub więcej określonych parametrów typu rodzajowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3547">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters.</span>
          </span>
          <span data-ttu-id="6cdc9-3548">Oznacza to, że metody <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> właściwość zwraca <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3548">That is, the method's <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> property returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="6cdc9-3549">W celu uzyskiwania dostępu do elementów członkowskich niepublicznych, niezależnie od ich zestawu uprawnień.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3549">for accessing non-public members regardless of their grant set.</span>
          </span>
          <span data-ttu-id="6cdc9-3550">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3550">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="6cdc9-3551">Aby wywoływać kod niezarządzany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3551">to call unmanaged code.</span>
          </span>
          <span data-ttu-id="6cdc9-3552">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3552">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="T:System.Reflection.ParameterAttributes" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
      </Docs>
    </Member>
    <Member MemberName="IsAbstract">
      <MemberSignature Language="C#" Value="public bool IsAbstract { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAbstract" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsAbstract" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAbstract As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAbstract { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAbstract : bool" Usage="System.Type.IsAbstract" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsAbstract</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3553">Pobiera wartość wskazującą czy <see cref="T:System.Type" /> jest abstrakcyjny i musi zostać zastąpiona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3553">Gets a value indicating whether the <see cref="T:System.Type" /> is abstract and must be overridden.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-3554">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> jest abstrakcyjna; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3554">
              <see langword="true" /> if the <see cref="T:System.Type" /> is abstract; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3555"><xref:System.Type.IsAbstract%2A> Właściwość zwraca `true` w następujących przypadkach:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3555">The <xref:System.Type.IsAbstract%2A> property returns `true` in the following cases:</span></span>  
  
-   <span data-ttu-id="6cdc9-3556">Bieżącym typem jest abstrakcyjna; oznacza to, że ten nie można utworzyć wystąpienia, ale tylko może służyć jako klasa bazowa dla klas pochodnych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3556">The current type is abstract; that is, it cannot be instantiated, but can only serve as the base class for derived classes.</span></span> <span data-ttu-id="6cdc9-3557">W języku C#, klasy abstrakcyjne są oznaczone [abstrakcyjne](~/docs/csharp/language-reference/keywords/abstract.md) słowo kluczowe w języku Visual Basic są oznaczone [MustInherit](~/docs/visual-basic/language-reference/modifiers/mustinherit.md) — słowo kluczowe.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3557">In C#, abstract classes are marked with the [abstract](~/docs/csharp/language-reference/keywords/abstract.md) keyword; in Visual Basic, they are marked with the [MustInherit](~/docs/visual-basic/language-reference/modifiers/mustinherit.md) keyword.</span></span>  
  
-   <span data-ttu-id="6cdc9-3558">Bieżący typ jest interfejsem.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3558">The current type is an interface.</span></span>  
  
 <span data-ttu-id="6cdc9-3559">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, właściwość ta zwraca zawsze `false`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3559">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3560">Poniższy przykład tworzy tablicę <xref:System.Type> obiekty reprezentujące następujących typów: zawiera zwraca typ `true` Jeśli określony obiekt jest `abstract`; w przeciwnym razie zwraca `false`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3560">The following example creates an array of <xref:System.Type> objects that represent the following types:contains type returns `true` if the specified object is `abstract`; otherwise, it returns `false`.</span></span>  
  
-   <span data-ttu-id="6cdc9-3561">`AbstractClass`, klasa abstrakcyjna (klasa jest oznaczona jako `abstract` w języku C# i `MustInherit` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3561">`AbstractClass`, an abstract class (a class marked as `abstract` in C# and `MustInherit` in Visual Basic).</span></span>  
  
-   <span data-ttu-id="6cdc9-3562">`DerivedClass`, klasa, która dziedziczy `AbstractClass`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3562">`DerivedClass`, a class that inherits from `AbstractClass`.</span></span>  
  
-   <span data-ttu-id="6cdc9-3563">`SingleClass`,-dziedziczone klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3563">`SingleClass`, a non-inheritable class.</span></span> <span data-ttu-id="6cdc9-3564">Jest on zdefiniowany jako `sealed` w języku C# i `NotInheritable` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3564">It is defined as `sealed` in C# and `NotInheritable` in Visual Basic.</span></span>  
  
-   <span data-ttu-id="6cdc9-3565">`ITypeInfo`, interfejs.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3565">`ITypeInfo`, an interface.</span></span>  
  
-   <span data-ttu-id="6cdc9-3566">`ImplementingClass`, klasa, która implementuje `ITypeInfo` interfejsu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3566">`ImplementingClass`, a class that implements the `ITypeInfo` interface.</span></span>  
  
 <span data-ttu-id="6cdc9-3567">Metoda ta zwraca `true` tylko w przypadku `AbstractClass`, klasa abstrakcyjna, i `ITypeInfo`, interfejs.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3567">The method returns `true` only for `AbstractClass`, the abstract class, and `ITypeInfo`, the interface.</span></span>  
  
 [!code-csharp[System.Type.IsAbstract#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isabstract/cs/isabstract1.cs#1)]
 [!code-vb[System.Type.IsAbstract#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isabstract/vb/isabstract1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsAnsiClass">
      <MemberSignature Language="C#" Value="public bool IsAnsiClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAnsiClass" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsAnsiClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAnsiClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAnsiClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAnsiClass : bool" Usage="System.Type.IsAnsiClass" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsAnsiClass</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3568">Pobiera wartość wskazującą czy ciąg formatu atrybut <see langword="AnsiClass" /> wybrano <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3568">Gets a value indicating whether the string format attribute <see langword="AnsiClass" /> is selected for the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-3569">
            <see langword="true" /> Jeśli ciąg formatu atrybut <see langword="AnsiClass" /> wybrano <see cref="T:System.Type" />; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3569">
              <see langword="true" /> if the string format attribute <see langword="AnsiClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3570"><xref:System.Reflection.TypeAttributes.StringFormatMask> Wybiera atrybuty format ciągu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3570">The <xref:System.Reflection.TypeAttributes.StringFormatMask> selects the string format attributes.</span></span> <span data-ttu-id="6cdc9-3571">Atrybuty formatu ciągu ulepszenia współdziałania, definiując, jak interpretować ciągów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3571">The string format attributes enhance interoperability by defining how strings should be interpreted.</span></span>  
  
 <span data-ttu-id="6cdc9-3572">Jeśli bieżący <xref:System.Type> reprezentuje typ ogólny, właściwość ta odnoszą się do definicji typu ogólnego, z którego skonstruowano.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3572">If the current <xref:System.Type> represents a generic type, this property pertains to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="6cdc9-3573">Na przykład jeśli bieżący <xref:System.Type> reprezentuje `MyGenericType<int>` (`MyGenericType(Of Integer)` w języku Visual Basic), wartość tej właściwości jest określana przez `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3573">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="6cdc9-3574">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu ogólnego, właściwość ta zwraca zawsze `false`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3574">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3575">Poniższy przykład pobiera informacje o polu i sprawdza, czy `AnsiClass` atrybutu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3575">The following example gets the field information and checks for the `AnsiClass` attribute.</span></span>  
  
 [!code-cpp[Type_IsAnsiClass#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsAnsiClass/CPP/Type_IsAnsiClass.cpp#1)]
 [!code-csharp[Type_IsAnsiClass#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsAnsiClass/CS/type_isansiclass.cs#1)]
 [!code-vb[Type_IsAnsiClass#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsAnsiClass/VB/type_isansiclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsUnicodeClass" />
        <altmember cref="P:System.Type.IsAutoClass" />
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public bool IsArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsArray" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsArray" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsArray { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsArray : bool" Usage="System.Type.IsArray" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsArray</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3576">Pobiera wartość wskazującą, czy typ jest tablicą.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3576">Gets a value that indicates whether the type is an array.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-3577">
            <see langword="true" /> Jeśli bieżący typ jest tablicą; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3577">
              <see langword="true" /> if the current type is an array; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3578"><xref:System.Type.IsArray%2A> Właściwość zwraca `false` dla <xref:System.Array> klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3578">The <xref:System.Type.IsArray%2A> property returns `false` for the <xref:System.Array> class.</span></span> <span data-ttu-id="6cdc9-3579">Również zwraca `false` Jeśli bieżące wystąpienie jest <xref:System.Type> obiekt, który reprezentuje typ kolekcji lub interfejs, zaprojektowane do pracy z kolekcjami, takich jak <xref:System.Collections.IEnumerable> lub <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3579">It also returns `false` if the current instance is a <xref:System.Type> object that represents a collection type or an interface designed to work with collections, such as <xref:System.Collections.IEnumerable> or <xref:System.Collections.Generic.IEnumerable%601>.</span></span>  
  
 <span data-ttu-id="6cdc9-3580">Aby sprawdzić, czy tablica, należy użyć kodu takiego jak:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3580">To check for an array, use code such as:</span></span>  
  
```csharp  
typeof(Array).IsAssignableFrom(type)  
```  
  
```vb  
GetType(Array).IsAssignableFrom(type)  
```  
  
 <span data-ttu-id="6cdc9-3581">Jeśli bieżący typ reprezentuje typ ogólny lub parametr typu w definicji typu ogólnego lub metody rodzajowej, właściwość ta zwraca zawsze `false`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3581">If the current type represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="6cdc9-3582">Ta właściwość jest tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3582">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3583">Poniższy przykład demonstruje użycie <xref:System.Type.IsArray%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3583">The following example demonstrates using the <xref:System.Type.IsArray%2A> property.</span></span>  
  
 [!code-csharp[System.Type.IsArray#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isarray/cs/isarray2.cs#1)]
 [!code-vb[System.Type.IsArray#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isarray/vb/isarray2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsArrayImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsArrayImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsArrayImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsArrayImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsArrayImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsArrayImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsArrayImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsArrayImpl : unit -&gt; bool" Usage="type.IsArrayImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3584">W przypadku przesłonięcia w klasie pochodnej, implementuje <see cref="P:System.Type.IsArray" /> właściwości i określa, czy <see cref="T:System.Type" /> jest tablicą.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3584">When overridden in a derived class, implements the <see cref="P:System.Type.IsArray" /> property and determines whether the <see cref="T:System.Type" /> is an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-3585">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> jest tablicą, a w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3585">
              <see langword="true" /> if the <see cref="T:System.Type" /> is an array; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3586">Wystąpienie <xref:System.Array> klasy musi zwracać `false` , ponieważ jest to obiekt, nie tablica.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3586">An instance of the <xref:System.Array> class must return `false` because it is an object, not an array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3587">Poniższy przykład zastępuje `IsArrayImpl` method in Class metoda `MyTypeDelegator` klasy sprawdza, czy zmienna jest tablicą, a następnie wyświetla wynik.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3587">The following example overrides the `IsArrayImpl` method in the `MyTypeDelegator` class, checks if a variable is an array, and displays the result.</span></span>  
  
 [!code-cpp[Type_IsArrayImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsArrayImpl/CPP/type_isarrayimpl.cpp#1)]
 [!code-csharp[Type_IsArrayImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsArrayImpl/CS/type_isarrayimpl.cs#1)]
 [!code-vb[Type_IsArrayImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsArrayImpl/VB/type_isarrayimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsArray" />
      </Docs>
    </Member>
    <Member MemberName="IsAssignableFrom">
      <MemberSignature Language="C#" Value="public virtual bool IsAssignableFrom (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsAssignableFrom(class System.Type c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsAssignableFrom(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsAssignableFrom (c As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsAssignableFrom(Type ^ c);" />
      <MemberSignature Language="F#" Value="abstract member IsAssignableFrom : Type -&gt; bool&#xA;override this.IsAssignableFrom : Type -&gt; bool" Usage="type.IsAssignableFrom c" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.IsAssignableFrom(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="6cdc9-3588">Typ do porównania z bieżącym typem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3588">The type to compare with the current type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-3589">Określa, czy wystąpienia określonego typu można przypisać do wystąpienia typu bieżącego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3589">Determines whether an instance of a specified type can be assigned to an instance of the current type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-3590">
            <see langword="true" /> Jeśli dowolny z następujących warunków jest spełniony:</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3590">
              <see langword="true" /> if any of the following conditions is true:</span>
          </span>
          <span data-ttu-id="6cdc9-3591">
-   <paramref name="c" /> i bieżące wystąpienie reprezentują tego samego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3591">
-   <paramref name="c" /> and the current instance represent the same type.</span>
          </span>
          <span data-ttu-id="6cdc9-3592">
-   <paramref name="c" /> pochodzi bezpośrednio lub pośrednio od bieżącego wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3592">
-   <paramref name="c" /> is derived either directly or indirectly from the current instance.</span>
          </span>
          <span data-ttu-id="6cdc9-3593">
            <paramref name="c" /> pochodzi bezpośrednio z bieżącym wystąpieniem dziedziczy bieżące wystąpienie; <paramref name="c" /> pochodzi pośrednio od bieżącego wystąpienia, jeśli jest dziedziczona z serii co najmniej jedną klasę, które dziedziczą z bieżącym wystąpieniem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3593">
              <paramref name="c" /> is derived directly from the current instance if it inherits from the current instance; <paramref name="c" /> is derived indirectly from the current instance if it inherits from a succession of one or more classes that inherit from the current instance.</span>
          </span>
          <span data-ttu-id="6cdc9-3594">-Bieżące wystąpienie jest interfejsem, który <paramref name="c" /> implementuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3594">-   The current instance is an interface that <paramref name="c" /> implements.</span>
          </span>
          <span data-ttu-id="6cdc9-3595">
-   <paramref name="c" /> jest parametr typu ogólnego, a bieżące wystąpienie reprezentuje jedną z ograniczeń <paramref name="c" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3595">
-   <paramref name="c" /> is a generic type parameter, and the current instance represents one of the constraints of <paramref name="c" />.</span>
          </span>
          <span data-ttu-id="6cdc9-3596">W poniższym przykładzie bieżące wystąpienie jest <see cref="T:System.Type" /> obiekt, który reprezentuje <see cref="T:System.IO.Stream" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3596">In the following example, the current instance is a <see cref="T:System.Type" /> object that represents the <see cref="T:System.IO.Stream" /> class.</span>
          </span>
          <span data-ttu-id="6cdc9-3597">
            <c>GenericWithConstraint</c> jest typem ogólnym, na której parametr typu ogólnego, musi być typu <see cref="T:System.IO.Stream" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3597">
              <c>GenericWithConstraint</c> is a generic type whose generic type parameter must be of type    <see cref="T:System.IO.Stream" />.</span>
          </span>
          <span data-ttu-id="6cdc9-3598">Przekazywanie jako parametr typu ogólnego <see cref="M:System.Type.IsAssignableFrom(System.Type)" /> wskazuje, czy wystąpienie parametru typu generycznego można przypisać do <see cref="T:System.IO.Stream" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3598">Passing its generic type parameter to the <see cref="M:System.Type.IsAssignableFrom(System.Type)" /> indicates that  an instance of the generic type parameter can be assigned to an <see cref="T:System.IO.Stream" /> object.</span>
          </span>
          <span data-ttu-id="6cdc9-3599">[! code-csharp[System.Type.IsAssignableFrom#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/IsAssignableFrom2.cs#2)] [! kodu vb[System.Type.IsAssignableFrom#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/IsAssignableFrom2.vb#2)]</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3599">[!code-csharp[System.Type.IsAssignableFrom#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/IsAssignableFrom2.cs#2)] [!code-vb[System.Type.IsAssignableFrom#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/IsAssignableFrom2.vb#2)]</span>
          </span>
          <span data-ttu-id="6cdc9-3600">
-   <paramref name="c" /> Typ reprezentujący wartość, a bieżące wystąpienie reprezentuje <c>Nullable&lt;c&gt; </c> (<c>Nullable (Of c)</c> w języku Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3600">
-   <paramref name="c" /> represents a value type, and the current instance represents <c>Nullable&lt;c&gt;</c> (<c>Nullable(Of c)</c> in Visual Basic).</span>
          </span>
          <span data-ttu-id="6cdc9-3601">
            <see langword="false" /> Jeśli żaden z tych warunków jest spełniony, lub jeśli <paramref name="c" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3601">
              <see langword="false" /> if none of these conditions are true, or if <paramref name="c" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3602"><xref:System.Type.IsAssignableFrom%2A> Metoda może służyć do określenia, czy wystąpienie `c` można przypisać z wystąpieniem bieżącego typu, metoda jest najbardziej przydatna podczas obsługi obiektów, których typy nie są znane w czasie projektowania i umożliwia warunkowe przypisanie w poniższym przykładzie pokazano.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3602">The <xref:System.Type.IsAssignableFrom%2A> method can be used to determine whether an instance of `c` can be assigned to an instance of the current type, The method is most useful when you are handling objects whose types are not known at design time and allows for conditional assignment, as the following example shows.</span></span>  
  
 [!code-csharp[System.Type.IsAssignableFrom#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/IsAssignableFrom3.cs#3)]
 [!code-vb[System.Type.IsAssignableFrom#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/IsAssignableFrom3.vb#3)]  
  
 <span data-ttu-id="6cdc9-3603">Ta metoda ten sposób zapewnia, że wiersz kodu, takie jak następujące będą wykonywane w czasie wykonywania bez niepotrzebnego <xref:System.InvalidCastException> lub wyjątku podobnych wyjątek:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3603">This method thus ensures that a line of code like the following will execute at runtime without throwing an <xref:System.InvalidCastException> exception or a similar exception:</span></span>  
  
 [!code-csharp[System.Type.IsAssignableFrom#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/IsAssignableFrom3.cs#4)]
 [!code-vb[System.Type.IsAssignableFrom#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/IsAssignableFrom3.vb#4)]  
  
 <span data-ttu-id="6cdc9-3604">Metoda ta może być zastąpiona przez klasę pochodną.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3604">This method can be overridden by a derived class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-3605">Definicja typu ogólnego nie jest możliwy do przypisania z zamkniętej skonstruowanego typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3605">A generic type definition is not assignable from a closed constructed type.</span></span> <span data-ttu-id="6cdc9-3606">Oznacza to, że nie można przypisać zamknięte skonstruowanego typu `MyGenericList<int>` (`MyGenericList(Of Integer)` w języku Visual Basic) do zmiennej typu `MyGenericList<T>`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3606">That is, you cannot assign the closed constructed type `MyGenericList<int>` (`MyGenericList(Of Integer)` in Visual Basic) to a variable of type `MyGenericList<T>`.</span></span>  
  
 <span data-ttu-id="6cdc9-3607">Jeśli `c` parametr jest typu <xref:System.Reflection.Emit.TypeBuilder>, wynik jest oparty na typie, który ma zostać utworzony.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3607">If the `c` parameter is of type <xref:System.Reflection.Emit.TypeBuilder>, the result is based on the type that is to be built.</span></span> <span data-ttu-id="6cdc9-3608">Poniższy przykład kodu demonstruje, to przy użyciu wbudowanego typu o nazwie `B`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3608">The following code example demonstrates this using a built type named `B`.</span></span>  
  
 [!code-csharp[System.Type.IsAssignableFrom#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/isassignablefrom_ex1.cs#1)]
 [!code-vb[System.Type.IsAssignableFrom#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/isassignablefrom_ex1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3609">W poniższym przykładzie pokazano `IsAssignableFrom` przy użyciu metody zdefiniowanych klas, tablic liczby całkowitej i typy ogólne.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3609">The following example demonstrates the `IsAssignableFrom` method using defined classes, integer arrays, and generics.</span></span>  
  
 [!code-cpp[TestIsAssignableFrom#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestIsAssignableFrom/cpp/testisassignablefrom.cpp#1)]
 [!code-csharp[TestIsAssignableFrom#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestIsAssignableFrom/CS/testisassignablefrom.cs#1)]
 [!code-vb[TestIsAssignableFrom#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestIsAssignableFrom/VB/testisassignablefrom.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAutoClass">
      <MemberSignature Language="C#" Value="public bool IsAutoClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAutoClass" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsAutoClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAutoClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAutoClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAutoClass : bool" Usage="System.Type.IsAutoClass" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsAutoClass</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3610">Pobiera wartość wskazującą czy ciąg formatu atrybut <see langword="AutoClass" /> wybrano <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3610">Gets a value indicating whether the string format attribute <see langword="AutoClass" /> is selected for the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-3611">
            <see langword="true" /> Jeśli ciąg formatu atrybut <see langword="AutoClass" /> wybrano <see cref="T:System.Type" />; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3611">
              <see langword="true" /> if the string format attribute <see langword="AutoClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3612"><xref:System.Reflection.TypeAttributes.StringFormatMask> Wybiera atrybuty format ciągu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3612">The <xref:System.Reflection.TypeAttributes.StringFormatMask> selects the string format attributes.</span></span> <span data-ttu-id="6cdc9-3613">Atrybuty formatu ciągu ulepszenia współdziałania, definiując, jak interpretować ciągów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3613">The string format attributes enhance interoperability by defining how strings should be interpreted.</span></span>  
  
 <span data-ttu-id="6cdc9-3614">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, właściwość ta ma zastosowanie do definicji typu ogólnego, z którego skonstruowano.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3614">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="6cdc9-3615">Na przykład jeśli bieżący <xref:System.Type> reprezentuje `MyGenericType<int>` (`MyGenericType(Of Integer)` w języku Visual Basic), wartość tej właściwości jest określana przez `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3615">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="6cdc9-3616">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu ogólnego, właściwość ta zwraca zawsze `false`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3616">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsAnsiClass" />
        <altmember cref="P:System.Type.IsUnicodeClass" />
      </Docs>
    </Member>
    <Member MemberName="IsAutoLayout">
      <MemberSignature Language="C#" Value="public bool IsAutoLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAutoLayout" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsAutoLayout" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAutoLayout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAutoLayout { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAutoLayout : bool" Usage="System.Type.IsAutoLayout" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsAutoLayout</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3617">Pobiera wartość wskazującą, czy pola bieżącego typu są ułożone automatycznie przez środowisko uruchomieniowe języka wspólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3617">Gets a value indicating whether the fields of the current type are laid out automatically by the common language runtime.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-3618">
            <see langword="true" /> Jeśli <see cref="P:System.Type.Attributes" /> zawiera właściwości bieżącego typu <see cref="F:System.Reflection.TypeAttributes.AutoLayout" />; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3618">
              <see langword="true" /> if the <see cref="P:System.Type.Attributes" /> property of the current type includes <see cref="F:System.Reflection.TypeAttributes.AutoLayout" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3619">Ta właściwość jest udostępniana dla wygody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3619">This property is provided as a convenience.</span></span> <span data-ttu-id="6cdc9-3620">Alternatywnie, można użyć <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> wartości wyliczenia, aby wybrać atrybuty układu typu, a następnie w celu przetestowania, czy <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> jest ustawiona.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3620">Alternatively, you can use the <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> enumeration value to select the type layout attributes, and then test whether <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> is set.</span></span> <span data-ttu-id="6cdc9-3621"><xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>,<xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, I <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> wartości wyliczenia wskazuje sposób pola tego typu są ułożone w pamięci.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3621">The <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>,<xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, and <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> enumeration values indicate the way the fields of the type are laid out in memory.</span></span>  
  
 <span data-ttu-id="6cdc9-3622">W przypadku typów dynamicznych, możesz określić <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> podczas tworzenia tego typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3622">For dynamic types, you can specify <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> when you create the type.</span></span> <span data-ttu-id="6cdc9-3623">W kodzie, należy zastosować <xref:System.Runtime.InteropServices.StructLayoutAttribute> atrybutem <xref:System.Runtime.InteropServices.LayoutKind.Auto?displayProperty=nameWithType> wartość wyliczenia do typu, aby określić odpowiedni sposób, aby zmienić układ klasy środowiska uruchomieniowego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3623">In code, apply the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute with the <xref:System.Runtime.InteropServices.LayoutKind.Auto?displayProperty=nameWithType> enumeration value to the type, to let the runtime determine the appropriate way to lay out the class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-3624">Nie można użyć <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> metodę pozwala ustalić czy <xref:System.Runtime.InteropServices.StructLayoutAttribute> zastosowano do typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3624">You cannot use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method to determine whether the <xref:System.Runtime.InteropServices.StructLayoutAttribute> has been applied to a type.</span></span>  
  
 <span data-ttu-id="6cdc9-3625">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, właściwość ta ma zastosowanie do definicji typu ogólnego, z którego skonstruowano.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3625">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="6cdc9-3626">Na przykład jeśli bieżący <xref:System.Type> reprezentuje `MyGenericType<int>` (`MyGenericType(Of Integer)` w języku Visual Basic), wartość tej właściwości jest określana przez `MyGenericType<T>.`</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3626">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>.`</span></span>  
  
 <span data-ttu-id="6cdc9-3627">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, właściwość ta zwraca zawsze `false`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3627">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3628">Poniższy przykład tworzy wystąpienie tego typu i wyświetla <xref:System.Type.IsAutoLayout%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3628">The following example creates an instance of the type and displays the <xref:System.Type.IsAutoLayout%2A> property.</span></span>  
  
 [!code-cpp[Type_IsAutoLayout#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsAutoLayout/CPP/type_isautolayout.cpp#1)]
 [!code-csharp[Type_IsAutoLayout#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsAutoLayout/CS/type_isautolayout.cs#1)]
 [!code-vb[Type_IsAutoLayout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsAutoLayout/VB/type_isautolayout.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsLayoutSequential" />
        <altmember cref="P:System.Type.IsExplicitLayout" />
        <related type="Article" href="~/docs/standard/metadata-and-self-describing-components.md">
          <span data-ttu-id="6cdc9-3629">Składniki samoopisujące się i metadane</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3629">Metadata and Self-Describing Components</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsByRef">
      <MemberSignature Language="C#" Value="public bool IsByRef { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsByRef" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsByRef" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsByRef As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsByRef { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsByRef : bool" Usage="System.Type.IsByRef" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsByRef</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3630">Pobiera wartość wskazującą czy <see cref="T:System.Type" /> jest przekazywany przez odwołanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3630">Gets a value indicating whether the <see cref="T:System.Type" /> is passed by reference.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-3631">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> jest przekazywany przez odwołanie; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3631">
              <see langword="true" /> if the <see cref="T:System.Type" /> is passed by reference; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3632">Aby przejść do rzeczywistego typu, wyłuskania typ, który został przekazany przez odwołanie, a następnie wywołaj <xref:System.Type.GetElementType%2A> tego typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3632">To get to the actual type, dereference the type that was passed by reference, and then call <xref:System.Type.GetElementType%2A> on that type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3633">W poniższym przykładzie pokazano użycie `IsByRef` właściwość do sprawdzenia, czy określony typ jest przekazywany przez odwołanie.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3633">The following example demonstrates a use of the `IsByRef` property to check whether a specified type is passed by reference.</span></span> <span data-ttu-id="6cdc9-3634">W przykładzie zdefiniowano klasę `MyTypeDelegator`, co zastępuje `HasElementTypeImpl` metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3634">The example defines the class `MyTypeDelegator`, which overrides the `HasElementTypeImpl` method.</span></span> <span data-ttu-id="6cdc9-3635">Sprawdza, czy główna klasa `HasElementType` właściwości i wyświetla typ elementu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3635">The main class checks for the `HasElementType` property and displays the element type.</span></span>  
  
 [!code-cpp[Type_HasElementTypeImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_HasElementTypeImpl/CPP/type_haselementtypeimpl.cpp#1)]
 [!code-csharp[Type_HasElementTypeImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_HasElementTypeImpl/CS/type_haselementtypeimpl.cs#1)]
 [!code-vb[Type_HasElementTypeImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_HasElementTypeImpl/VB/type_haselementtypeimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsByRefImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsByRefImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsByRefImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsByRefImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsByRefImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsByRefImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsByRefImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsByRefImpl : unit -&gt; bool" Usage="type.IsByRefImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3636">W przypadku przesłonięcia w klasie pochodnej, implementuje <see cref="P:System.Type.IsByRef" /> właściwości i określa, czy <see cref="T:System.Type" /> jest przekazywany przez odwołanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3636">When overridden in a derived class, implements the <see cref="P:System.Type.IsByRef" /> property and determines whether the <see cref="T:System.Type" /> is passed by reference.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-3637">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> jest przekazywany przez odwołanie; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3637">
              <see langword="true" /> if the <see cref="T:System.Type" /> is passed by reference; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Type.IsByRef" />
      </Docs>
    </Member>
    <Member MemberName="IsByRefLike">
      <MemberSignature Language="C#" Value="public virtual bool IsByRefLike { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsByRefLike" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsByRefLike" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsByRefLike As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsByRefLike { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsByRefLike : bool" Usage="System.Type.IsByRefLike" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClass">
      <MemberSignature Language="C#" Value="public bool IsClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClass" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsClass : bool" Usage="System.Type.IsClass" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsClass</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3638">Pobiera wartość wskazującą czy <see cref="T:System.Type" /> klasy lub delegata; oznacza to, nie jest typem wartości lub interfejs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3638">Gets a value indicating whether the <see cref="T:System.Type" /> is a class or a delegate; that is, not a value type or interface.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-3639">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> jest klasą; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3639">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a class; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3640">Ta właściwość zwraca `true` dla klasy, a także delegatów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3640">This property returns `true` for classes as well as delegates.</span></span> <span data-ttu-id="6cdc9-3641">Zwraca `false` dla typów wartości (w przypadku struktur i wyliczenia) nawet wtedy, gdy są one ramce.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3641">It returns `false` for value types (for structures and enumerations) even if they are boxed.</span></span>  
  
 <span data-ttu-id="6cdc9-3642">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, właściwość ta zwraca zawsze `true`. Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, właściwość ta zwraca `true` Jeśli definicja typu ogólnego jest definicją klasy; oznacza to też nie definiuje interfejs lub typu wartościowego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3642">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `true`.If the current <xref:System.Type> represents a constructed generic type, this property returns `true` if the generic type definition is a class definition; that is, it does not define an interface or a value type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-3643">Ta właściwość zwraca `true` dla `Type` wystąpienia reprezentujące <xref:System.Enum> i <xref:System.ValueType> klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3643">This property returns `true` for `Type` instances that represent the <xref:System.Enum> and <xref:System.ValueType> classes.</span></span> <span data-ttu-id="6cdc9-3644">Te dwie klasy są typami podstawowymi dla wyliczeń i typy wartości, odpowiednio, ale nie są one wyliczenia ani typów wartości, samodzielnie.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3644">These two classes are the base types for enumerations and value types, respectively, but they are not enumerations or value types themselves.</span></span> <span data-ttu-id="6cdc9-3645">Aby uzyskać więcej informacji, zobacz <xref:System.Type.IsValueType%2A> i <xref:System.Type.IsEnum%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3645">For more information, see the <xref:System.Type.IsValueType%2A> and <xref:System.Type.IsEnum%2A> properties.</span></span>  
  
 <span data-ttu-id="6cdc9-3646"><xref:System.Reflection.TypeAttributes.ClassSemanticsMask?displayProperty=nameWithType> Wartość wyliczenia wyróżnia deklaracji typu klasy lub interfejsu. Jednak zarówno klasy i typy wartości są oznaczone <xref:System.Reflection.TypeAttributes.Class?displayProperty=nameWithType> atrybutu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3646">The <xref:System.Reflection.TypeAttributes.ClassSemanticsMask?displayProperty=nameWithType> enumeration value  distinguishes a type declaration as class or interface.However, both classes and value types are marked with the <xref:System.Reflection.TypeAttributes.Class?displayProperty=nameWithType> attribute.</span></span> <span data-ttu-id="6cdc9-3647">Jeśli pobieranie wartości właściwości atrybutów i użyj typu <xref:System.Reflection.TypeAttributes.ClassSemanticsMask?displayProperty=nameWithType> wartość, aby określić, czy typ jest klasą zamiast typu wartości, musisz również wywołać <xref:System.Type.IsValueType%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3647">If you retrieve the value of a type's Attributes property and use the <xref:System.Reflection.TypeAttributes.ClassSemanticsMask?displayProperty=nameWithType> value to determine whether a type is a class instead of a value type, you must also call the <xref:System.Type.IsValueType%2A> property.</span></span> <span data-ttu-id="6cdc9-3648">Przykład <xref:System.Reflection.TypeAttributes> wyliczenia zawiera dodatkowe informacje, a także anexample.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3648">The example for the <xref:System.Reflection.TypeAttributes> enumeration contains additional information as well as anexample.</span></span>  
  
 <span data-ttu-id="6cdc9-3649">Ta właściwość jest tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3649">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3650">Poniższy przykład tworzy wystąpienie typu i wskazuje, czy typ jest klasą.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3650">The following example creates an instance of a type and indicates whether the type is a class.</span></span>  
  
 [!code-cpp[Type_IsClass#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsClass/CPP/type_isclass.cpp#1)]
 [!code-csharp[Type_IsClass#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsClass/CS/type_isclass.cs#1)]
 [!code-vb[Type_IsClass#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsClass/VB/type_isclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsInterface" />
        <altmember cref="P:System.Type.IsValueType" />
        <altmember cref="F:System.Reflection.TypeAttributes.ClassSemanticsMask" />
      </Docs>
    </Member>
    <Member MemberName="IsCOMObject">
      <MemberSignature Language="C#" Value="public bool IsCOMObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCOMObject" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsCOMObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCOMObject As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCOMObject { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCOMObject : bool" Usage="System.Type.IsCOMObject" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsCOMObject</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3651">Pobiera wartość wskazującą czy <see cref="T:System.Type" /> jest obiektem COM.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3651">Gets a value indicating whether the <see cref="T:System.Type" /> is a COM object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-3652">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> jest obiektem COM; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3652">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a COM object; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3653">Ta metoda zwraca `false` dla interfejsów COM, ponieważ nie są obiektami.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3653">This method returns `false` for COM interfaces because they are not objects.</span></span> <span data-ttu-id="6cdc9-3654">Interfejsy modelu COM może być implementowany przez obiekty programu Microsoft .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3654">COM interfaces can be implemented by Microsoft .NET Framework objects.</span></span>  
  
 <span data-ttu-id="6cdc9-3655">Można również załadować klasy COM i uzyskać `Type` obiektu dla tej klasy COM za pomocą [Tlbimp.exe (Importer biblioteki typów)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) narzędzia.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3655">You can also load a COM class and get a `Type` object for that COM class by using the [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool.</span></span>  
  
 <span data-ttu-id="6cdc9-3656">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, właściwość ta ma zastosowanie do definicji typu ogólnego, z którego skonstruowano.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3656">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="6cdc9-3657">Na przykład jeśli bieżący <xref:System.Type> reprezentuje `MyGenericType<int`> (`MyGenericType(Of Integer)` w języku Visual Basic), wartość tej właściwości jest określana przez `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3657">For example, if the current <xref:System.Type> represents `MyGenericType<int`> (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="6cdc9-3658">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, właściwość ta zwraca zawsze `false`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3658">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsCOMObjectImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsCOMObjectImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsCOMObjectImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsCOMObjectImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsCOMObjectImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsCOMObjectImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsCOMObjectImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsCOMObjectImpl : unit -&gt; bool" Usage="type.IsCOMObjectImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3659">W przypadku przesłonięcia w klasie pochodnej, implementuje <see cref="P:System.Type.IsCOMObject" /> właściwości i określa, czy <see cref="T:System.Type" /> jest obiektem COM.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3659">When overridden in a derived class, implements the <see cref="P:System.Type.IsCOMObject" /> property and determines whether the <see cref="T:System.Type" /> is a COM object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-3660">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> jest obiektem COM; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3660">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a COM object; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3661">Ta metoda zwraca `false` dla interfejsów COM, ponieważ nie są obiektami.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3661">This method returns `false` for COM interfaces because they are not objects.</span></span> <span data-ttu-id="6cdc9-3662">Interfejsy modelu COM może być implementowany przez obiekty programu Microsoft .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3662">COM interfaces can be implemented by Microsoft .NET Framework objects.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsCOMObject" />
      </Docs>
    </Member>
    <Member MemberName="IsConstructedGenericType">
      <MemberSignature Language="C#" Value="public virtual bool IsConstructedGenericType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConstructedGenericType" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsConstructedGenericType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsConstructedGenericType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsConstructedGenericType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsConstructedGenericType : bool" Usage="System.Type.IsConstructedGenericType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3663">Pobiera wartość wskazującą, czy ten obiekt reprezentuje zbudowany typ ogólny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3663">Gets a value that indicates whether this object represents a constructed generic type.</span>
          </span>
          <span data-ttu-id="6cdc9-3664">Można utworzyć wystąpienia elementu zbudowany typ ogólny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3664">You can create instances of a constructed generic type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-3665">
            <see langword="true" /> Jeśli ten obiekt reprezentuje zbudowany typ ogólny; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3665">
              <see langword="true" /> if this object represents a constructed generic type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3666">Skonstruowany typ rodzajowy miał jawnie typów dostarczonych dla wszystkich jego parametrów typu rodzajowego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3666">A constructed generic type has had explicit types supplied for all of its generic type parameters.</span></span> <span data-ttu-id="6cdc9-3667">Ona również jest określana jako zamknięty typ ogólny.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3667">It is also referred to as a closed generic type.</span></span>  
  
 <span data-ttu-id="6cdc9-3668">Gdy ta właściwość jest `true`, można utworzyć wystąpienia typu bieżącego; znajduje się w `false`, to nie jest możliwe.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3668">When this property is `true`, you can create instances of the current type; when it is `false`, you can't.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsContextful">
      <MemberSignature Language="C#" Value="public bool IsContextful { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsContextful" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsContextful" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsContextful As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsContextful { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsContextful : bool" Usage="System.Type.IsContextful" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsContextful</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3669">Pobiera wartość wskazującą czy <see cref="T:System.Type" /> może znajdować się w kontekście.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3669">Gets a value indicating whether the <see cref="T:System.Type" /> can be hosted in a context.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-3670">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> może być hostowana w kontekście, w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3670">
              <see langword="true" /> if the <see cref="T:System.Type" /> can be hosted in a context; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3671">Kontekst przechwytuje wywołania do składowych klasy i wymusza zasady, które są stosowane do klasy, takie jak synchronizacja.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3671">A context intercepts calls to the class members and enforces policies that are applied to the class, such as synchronization.</span></span> <span data-ttu-id="6cdc9-3672">Aby uzyskać szczegółowe informacje o kontekstach komunikacji zdalnej, zobacz <xref:System.Runtime.Remoting.Contexts.Context>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3672">For more detailed information on remoting contexts, see <xref:System.Runtime.Remoting.Contexts.Context>.</span></span>  
  
 <span data-ttu-id="6cdc9-3673">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, właściwość ta zwraca zawsze `false`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3673">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3674">W poniższym przykładzie pokazano `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, i <xref:System.Type.IsPrimitive%2A> właściwości <xref:System.Type> klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3674">The following example demonstrates the `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, and <xref:System.Type.IsPrimitive%2A> properties of the <xref:System.Type> class.</span></span> <span data-ttu-id="6cdc9-3675">Sprawdza, czy dany typ może być hostowana w kontekście, czy mogą być przekazywane przez odwołanie i zezwolić na określony typ jest typem danych pierwotnych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3675">It checks whether the given type can be hosted in the context, whether it can be marshaled by reference, and whether the type is a primitive data type.</span></span>  
  
 [!code-cpp[Type_IsContextful#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsContextful/CPP/type_iscontextful.cpp#1)]
 [!code-csharp[Type_IsContextful#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsContextful/CS/type_iscontextful.cs#1)]
 [!code-vb[Type_IsContextful#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsContextful/VB/type_iscontextful.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsContextfulImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsContextfulImpl">
      <MemberSignature Language="C#" Value="protected virtual bool IsContextfulImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsContextfulImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsContextfulImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsContextfulImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsContextfulImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsContextfulImpl : unit -&gt; bool&#xA;override this.IsContextfulImpl : unit -&gt; bool" Usage="type.IsContextfulImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3676">Implementuje <see cref="P:System.Type.IsContextful" /> właściwości i określa, czy <see cref="T:System.Type" /> może znajdować się w kontekście.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3676">Implements the <see cref="P:System.Type.IsContextful" /> property and determines whether the <see cref="T:System.Type" /> can be hosted in a context.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-3677">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> może być hostowana w kontekście, w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3677">
              <see langword="true" /> if the <see cref="T:System.Type" /> can be hosted in a context; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3678">Metoda ta może być zastąpiona przez klasę pochodną.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3678">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="6cdc9-3679">Kontekst przechwytuje wywołania do składowych klasy i wymuszać zasady, które są stosowane do klasy, takie jak synchronizacja.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3679">A context intercepts calls to the class members and enforce policies that are applied to the class, such as synchronization.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3680">W poniższym przykładzie pokazano użycie `IsContextfulImpl` metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3680">The following example demonstrates a use of the `IsContextfulImpl` method.</span></span>  
  
 [!code-cpp[Type_IsContextfulImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsContextfulImpl/CPP/type_iscontextfulimpl.cpp#1)]
 [!code-csharp[Type_IsContextfulImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsContextfulImpl/CS/type_iscontextfulimpl.cs#1)]
 [!code-vb[Type_IsContextfulImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsContextfulImpl/VB/type_iscontextfulimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsContextful" />
      </Docs>
    </Member>
    <Member MemberName="IsEnum">
      <MemberSignature Language="C#" Value="public virtual bool IsEnum { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnum" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsEnum" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsEnum As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsEnum { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEnum : bool" Usage="System.Type.IsEnum" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsEnum</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3681">Pobiera wartość wskazującą czy bieżący <see cref="T:System.Type" /> reprezentuje wyliczenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3681">Gets a value indicating whether the current <see cref="T:System.Type" /> represents an enumeration.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-3682">
            <see langword="true" /> Jeśli bieżący <see cref="T:System.Type" /> reprezentuje wyliczenia; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3682">
              <see langword="true" /> if the current <see cref="T:System.Type" /> represents an enumeration; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3683">Ta właściwość zwraca `true` wyliczania, ale nie dla <xref:System.Enum> samego typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3683">This property returns `true` for an enumeration, but not for the <xref:System.Enum> type itself.</span></span>  
  
 <span data-ttu-id="6cdc9-3684">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, właściwość ta ma zastosowanie do definicji typu ogólnego, z którego skonstruowano.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3684">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="6cdc9-3685">Na przykład jeśli bieżący <xref:System.Type> reprezentuje `MyGenericType<int>` (`MyGenericType(Of Integer)` w języku Visual Basic), wartość tej właściwości jest określana przez `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3685">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="6cdc9-3686">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, właściwość ta zwraca zawsze `false`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3686">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="6cdc9-3687">Ta właściwość jest tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3687">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3688">Poniższy przykład pokazuje sposób użycia `IsEnum` właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3688">The following example demonstrates how to use the `IsEnum` property.</span></span>  
  
 [!code-cpp[TestIsEnum#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestIsEnum/CPP/TestIsEnum.cpp#1)]
 [!code-csharp[TestIsEnum#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestIsEnum/CS/testisenum.cs#1)]
 [!code-vb[TestIsEnum#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestIsEnum/VB/testisenum.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsEnumDefined">
      <MemberSignature Language="C#" Value="public virtual bool IsEnumDefined (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEnumDefined(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsEnumDefined(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsEnumDefined (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsEnumDefined(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member IsEnumDefined : obj -&gt; bool&#xA;override this.IsEnumDefined : obj -&gt; bool" Usage="type.IsEnumDefined value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="6cdc9-3689">Wartość, która ma zostać przetestowana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3689">The value to be tested.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-3690">Zwraca wartość wskazującą, czy określona wartość istnieje w bieżącym typem wyliczenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3690">Returns a value that indicates whether the specified value exists in the current enumeration type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-3691">
            <see langword="true" /> Jeśli określona wartość jest elementem członkowskim bieżącego typu wyliczenia; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3691">
              <see langword="true" /> if the specified value is a member of the current enumeration type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6cdc9-3692">Bieżący typ nie jest wyliczeniem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3692">The current type is not an enumeration.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-3693">
            <paramref name="value" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3693">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6cdc9-3694">
            <paramref name="value" /> jest typem, który nie może być podstawowym typem wyliczenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3694">
              <paramref name="value" /> is of a type that cannot be the underlying type of an enumeration.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentTo">
      <MemberSignature Language="C#" Value="public virtual bool IsEquivalentTo (Type other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEquivalentTo(class System.Type other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsEquivalentTo(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsEquivalentTo (other As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsEquivalentTo(Type ^ other);" />
      <MemberSignature Language="F#" Value="abstract member IsEquivalentTo : Type -&gt; bool&#xA;override this.IsEquivalentTo : Type -&gt; bool" Usage="type.IsEquivalentTo other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="6cdc9-3695">Typ modelu COM, który jest testowany pod kątem równoważności z bieżącym typem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3695">The COM type that is tested for equivalence with the current type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-3696">Określa, czy dwa typy COM ma taką samą tożsamość i kwalifikują się do równoważeniu typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3696">Determines whether two COM types have the same identity and are eligible for type equivalence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-3697">
            <see langword="true" /> Jeśli typy modelu COM są równoważne; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3697">
              <see langword="true" /> if the COM types are equivalent; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="6cdc9-3698">Ta metoda zwraca też wartość <see langword="false" /> czy jeden typ w zestawie, który jest ładowany do wykonania, a drugi to w zestawie, który jest ładowany do kontekstu reflection-only.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3698">This method also returns <see langword="false" /> if one type is in an assembly that is loaded for execution, and the other is in an assembly that is loaded into the reflection-only context.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3699">Począwszy od [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], środowisko uruchomieniowe języka wspólnego obsługuje osadzanie informacji o typie dla typów modelu COM bezpośrednio do zestawów zarządzanych, zamiast zestawów zarządzanych uzyskać informacje o typie dla typów modelu COM z międzyoperacyjności zestawy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3699">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the common language runtime supports the embedding of type information for COM types directly into managed assemblies, instead of requiring the managed assemblies to obtain type information for COM types from interop assemblies.</span></span> <span data-ttu-id="6cdc9-3700">Informacje o typie osadzony zawiera tylko typy i elementy członkowskie, które są rzeczywiście używane przez zestaw zarządzany, dwóch zestawów zarządzanych, może być bardzo różne widoki tego samego typu COM.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3700">Because the embedded type information includes only the types and members that are actually used by a managed assembly, two managed assemblies might have very different views of the same COM type.</span></span> <span data-ttu-id="6cdc9-3701">Każdy zestaw zarządzany ma inną <xref:System.Type> obiektu do reprezentowania jej widok typów modelu COM.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3701">Each managed assembly has a different <xref:System.Type> object to represent its view of the COM type.</span></span> <span data-ttu-id="6cdc9-3702">Środowisko uruchomieniowe języka wspólnego obsługuje równoważności typu między te różne widoki dla interfejsy, struktury, wyliczenia i delegaty.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3702">The common language runtime supports type equivalence between these different views for interfaces, structures, enumerations, and delegates.</span></span>  
  
 <span data-ttu-id="6cdc9-3703">Równoważności typu oznacza o tym, że obiekt COM, który jest przekazywany z jednego zestawu zarządzanego do innego, mogą być rzutowane do odpowiedniego zarządzane typu w zestawie odbierania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3703">Type equivalence means that a COM object that is passed from one managed assembly to another can be cast to the appropriate managed type in the receiving assembly.</span></span> <span data-ttu-id="6cdc9-3704"><xref:System.Type.IsEquivalentTo%2A> Metoda umożliwia zestawu, aby ustalić, czy obiekt COM, uzyskany z innego zestawu ma taką samą tożsamość COM jako jeden z typów międzyoperacyjnych pierwszego zestawu własnych osadzone i dlatego mogą być rzutowane na tego typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3704">The <xref:System.Type.IsEquivalentTo%2A> method enables an assembly to determine that a COM object obtained from another assembly has the same COM identity as one of the first assembly's own embedded interop types, and thus can be cast to that type.</span></span>  
  
 <span data-ttu-id="6cdc9-3705">Aby uzyskać więcej informacji, zobacz [równoważności typów i osadzone typy międzyoperacyjne](~/docs/framework/interop/type-equivalence-and-embedded-interop-types.md).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3705">For more information, see [Type Equivalence and Embedded Interop Types](~/docs/framework/interop/type-equivalence-and-embedded-interop-types.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsExplicitLayout">
      <MemberSignature Language="C#" Value="public bool IsExplicitLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExplicitLayout" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsExplicitLayout" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExplicitLayout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExplicitLayout { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExplicitLayout : bool" Usage="System.Type.IsExplicitLayout" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsExplicitLayout</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3706">Pobiera wartość wskazującą, czy pola bieżącego typu są ułożone w jawnie określonych przesunięć.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3706">Gets a value indicating whether the fields of the current type are laid out at explicitly specified offsets.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-3707">
            <see langword="true" /> Jeśli <see cref="P:System.Type.Attributes" /> zawiera właściwości bieżącego typu <see cref="F:System.Reflection.TypeAttributes.ExplicitLayout" />; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3707">
              <see langword="true" /> if the <see cref="P:System.Type.Attributes" /> property of the current type includes <see cref="F:System.Reflection.TypeAttributes.ExplicitLayout" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3708">Ta właściwość jest udostępniana dla wygody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3708">This property is provided as a convenience.</span></span> <span data-ttu-id="6cdc9-3709">Alternatywnie, można użyć <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> wartości wyliczenia, aby wybrać atrybuty układu typu, a następnie w celu przetestowania, czy <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType> jest ustawiona.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3709">Alternatively, you can use the <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> enumeration value to select the type layout attributes, and then test whether <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType> is set.</span></span> <span data-ttu-id="6cdc9-3710"><xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>, <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, I <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> wartości wyliczenia wskazuje sposób pola tego typu są ułożone w pamięci.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3710">The <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>, <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, and <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> enumeration values indicate the way the fields of the type are laid out in memory.</span></span>  
  
 <span data-ttu-id="6cdc9-3711">W przypadku typów dynamicznych, możesz określić <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType> podczas tworzenia tego typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3711">For dynamic types, you can specify <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType> when you create the type.</span></span> <span data-ttu-id="6cdc9-3712">W kodzie, należy zastosować <xref:System.Runtime.InteropServices.StructLayoutAttribute> atrybutem <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> wartość wyliczenia do typu, aby określić przesunięcie, w których start pola zostaną wyraźnie wskazane.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3712">In code, apply the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute with the <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> enumeration value to the type, to specify that the offsets at which the fields start are specified explicitly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-3713">Nie można użyć <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> metodę pozwala ustalić czy <xref:System.Runtime.InteropServices.StructLayoutAttribute> zastosowano do typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3713">You cannot use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method to determine whether the <xref:System.Runtime.InteropServices.StructLayoutAttribute> has been applied to a type.</span></span>  
  
 <span data-ttu-id="6cdc9-3714">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, właściwość ta ma zastosowanie do definicji typu ogólnego, z którego skonstruowano.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3714">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="6cdc9-3715">Na przykład jeśli bieżący <xref:System.Type> reprezentuje `MyGenericType<int>` (`MyGenericType(Of Integer)` w języku Visual Basic), wartość tej właściwości jest określana przez `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3715">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="6cdc9-3716">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, właściwość ta zwraca zawsze `false`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3716">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3717">Poniższy przykład tworzy wystąpienie typu i wyświetla wartość jego <xref:System.Type.IsExplicitLayout%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3717">The following example creates an instance of a type and displays the value of its <xref:System.Type.IsExplicitLayout%2A> property.</span></span> <span data-ttu-id="6cdc9-3718">Używa ona `MySystemTime` klasy, która jest również w przykładzie kodu dla <xref:System.Runtime.InteropServices.StructLayoutAttribute>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3718">It uses the `MySystemTime` class, which is also in the code example for <xref:System.Runtime.InteropServices.StructLayoutAttribute>.</span></span>  
  
 [!code-csharp[Type_IsExplicitLayout#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsExplicitLayout/CS/type_isexplicitlayout.cs#1)]
 [!code-vb[Type_IsExplicitLayout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsExplicitLayout/VB/type_isexplicitlayout.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />
        <altmember cref="P:System.Type.IsAutoLayout" />
        <altmember cref="P:System.Type.IsLayoutSequential" />
        <related type="Article" href="~/docs/standard/metadata-and-self-describing-components.md">
          <span data-ttu-id="6cdc9-3719">Składniki samoopisujące się i metadane</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3719">Metadata and Self-Describing Components</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsGenericMethodParameter">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericMethodParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericMethodParameter" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericMethodParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericMethodParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericMethodParameter { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericMethodParameter : bool" Usage="System.Type.IsGenericMethodParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGenericParameter">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericParameter" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericParameter { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericParameter : bool" Usage="System.Type.IsGenericParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3720">Pobiera wartość wskazującą czy bieżący <see cref="T:System.Type" /> reprezentuje parametr typu w definicji typu ogólnego lub metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3720">Gets a value indicating whether the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-3721">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> obiekt reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej definicję; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3721">
              <see langword="true" /> if the <see cref="T:System.Type" /> object represents a type parameter of a generic type definition or generic method definition; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3722"><xref:System.Type> obiekty, które reprezentują parametry typu ogólnego, można uzyskać przez wywołanie metody <xref:System.Type.GetGenericArguments%2A> metody <xref:System.Type> obiekt, który reprezentuje definicję typu ogólnego lub <xref:System.Reflection.MethodInfo.GetGenericArguments%2A> metody <xref:System.Reflection.MethodInfo> obiekt, który reprezentuje metody ogólnej Definicja.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3722"><xref:System.Type> objects that represent generic type parameters can be obtained by calling the <xref:System.Type.GetGenericArguments%2A> method of a <xref:System.Type> object that represents a generic type definition, or the <xref:System.Reflection.MethodInfo.GetGenericArguments%2A> method of a <xref:System.Reflection.MethodInfo> object that represents a generic method definition.</span></span>  
  
-   <span data-ttu-id="6cdc9-3723">Dla typu ogólnego lub definicję metody <xref:System.Type.IsGenericParameter%2A> właściwość zwraca `true` dla każdego elementu tablicy wynikowej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3723">For a generic type or method definition, the <xref:System.Type.IsGenericParameter%2A> property returns `true` for every element of the resulting array.</span></span>  
  
-   <span data-ttu-id="6cdc9-3724">Zamknięte skonstruowanego typu lub metody <xref:System.Type.IsGenericParameter%2A> właściwość zwraca `false` dla każdego elementu w tablicy zwracanej przez <xref:System.Type.GetGenericArguments%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3724">For a closed constructed type or method, the <xref:System.Type.IsGenericParameter%2A> property returns `false` for every element of the array returned by the <xref:System.Type.GetGenericArguments%2A> method.</span></span>  
  
-   <span data-ttu-id="6cdc9-3725">Otwórz skonstruowanego typu lub metody niektóre elementy tablicy mogą być określone typy, a inne mogą mieć parametrów typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3725">For an open constructed type or method, some elements of the array might be specific types and others might be type parameters.</span></span> <span data-ttu-id="6cdc9-3726"><xref:System.Type.IsGenericParameter%2A> Zwraca `false` dla typów i `true` dla parametrów typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3726"><xref:System.Type.IsGenericParameter%2A> returns `false` for the types and `true` for the type parameters.</span></span> <span data-ttu-id="6cdc9-3727">Przykład kodu dla <xref:System.Type.ContainsGenericParameters%2A> właściwość pokazuje klasę ogólną za pomocą kombinacji typów parametrów typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3727">The code example for the <xref:System.Type.ContainsGenericParameters%2A> property demonstrates a generic class with a mixture of types and type parameters.</span></span>  
  
 <span data-ttu-id="6cdc9-3728">Aby uzyskać listę niezmiennych warunków dla terminów używanych w odbiciu rodzajowym, zobacz <xref:System.Type.IsGenericType%2A> uwagi dotyczące właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3728">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3729">W poniższym przykładzie użyto <xref:System.Type.IsGenericParameter%2A> właściwość do badania parametrów typu rodzajowego w typie ogólnym.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3729">The following example uses the <xref:System.Type.IsGenericParameter%2A> property to test for generic type parameters in a generic type.</span></span>  
  
 [!code-cpp[System.Type.IsGenericParameter#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericParameter/CPP/source.cpp#2)]
 [!code-csharp[System.Type.IsGenericParameter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericParameter/CS/source.cs#2)]
 [!code-vb[System.Type.IsGenericParameter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericParameter/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.GenericParameterPosition" />
        <altmember cref="M:System.Type.GetGenericArguments" />
        <altmember cref="M:System.Type.GetGenericParameterConstraints" />
        <altmember cref="P:System.Type.GenericParameterAttributes" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md">
          <span data-ttu-id="6cdc9-3730">Odbicie i typy ogólne</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3730">Reflection and Generic Types</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md">
          <span data-ttu-id="6cdc9-3731">Porady: zbadanie i tworzenie wystąpień typów ogólnych za pomocą odbicia</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3731">How to: Examine and Instantiate Generic Types with Reflection</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsGenericType">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericType" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericType : bool" Usage="System.Type.IsGenericType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3732">Pobiera wartość wskazującą, czy bieżący typ jest typem ogólnym.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3732">Gets a value indicating whether the current type is a generic type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-3733">
            <see langword="true" /> Jeśli bieżący typ jest typem podstawowym; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3733">
              <see langword="true" /> if the current type is a generic type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3734">Użyj <xref:System.Type.IsGenericType%2A> właściwości, aby określić, czy <xref:System.Type> obiekt reprezentuje typ ogólny.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3734">Use the <xref:System.Type.IsGenericType%2A> property to determine whether a <xref:System.Type> object represents a generic type.</span></span> <span data-ttu-id="6cdc9-3735">Użyj <xref:System.Type.ContainsGenericParameters%2A> właściwości, aby określić, czy <xref:System.Type> obiekt reprezentuje skonstruowanego typu otwartego lub zamkniętych skonstruowanego typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3735">Use the <xref:System.Type.ContainsGenericParameters%2A> property to determine whether a <xref:System.Type> object represents an open constructed type or a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-3736"><xref:System.Type.IsGenericType%2A> Właściwość zwraca `false` jeśli natychmiastowe nie jest to typ ogólny.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3736">The <xref:System.Type.IsGenericType%2A> property returns `false` if the immediate type is not generic.</span></span> <span data-ttu-id="6cdc9-3737">Na przykład tablica, której elementy są typu `A<int>` (`A(Of Integer)` w języku Visual Basic) sam nie jest typem ogólnym.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3737">For example, an array whose elements are of type `A<int>` (`A(Of Integer)` in Visual Basic) is not itself a generic type.</span></span>  
  
 <span data-ttu-id="6cdc9-3738">Poniższa tabela zawiera podsumowanie niezmiennych warunków dla typowych terminów używanych w odbiciu rodzajowym.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3738">The following table summarizes the invariant conditions for common terms used in generic reflection.</span></span>  
  
|<span data-ttu-id="6cdc9-3739">Termin</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3739">Term</span></span>|<span data-ttu-id="6cdc9-3740">Niezmiennej</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3740">Invariant</span></span>|  
|----------|---------------|  
|<span data-ttu-id="6cdc9-3741">Definicja typu ogólnego</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3741">generic type definition</span></span>|<span data-ttu-id="6cdc9-3742"><xref:System.Type.IsGenericTypeDefinition%2A> Właściwość `true`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3742">The <xref:System.Type.IsGenericTypeDefinition%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="6cdc9-3743">Definiuje typ ogólny.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3743">Defines a generic type.</span></span> <span data-ttu-id="6cdc9-3744">Skonstruowany typ jest tworzony przez wywołanie <xref:System.Type.MakeGenericType%2A> metody <xref:System.Type> obiekt, który reprezentuje definicji typu ogólnego i określając tablicę argumentów typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3744">A constructed type is created by calling the <xref:System.Type.MakeGenericType%2A> method on a <xref:System.Type> object that represents a generic type definition and specifying an array of type arguments.</span></span><br /><br /> <span data-ttu-id="6cdc9-3745"><xref:System.Type.MakeGenericType%2A> można wywołać tylko w definicji typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3745"><xref:System.Type.MakeGenericType%2A> can be called only on generic type definitions.</span></span><br /><br /> <span data-ttu-id="6cdc9-3746">Dowolna definicja typu ogólnego jest typem ogólnym ( <xref:System.Type.IsGenericType%2A> właściwość `true`), ale nie jest to prawdą.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3746">Any generic type definition is a generic type (the <xref:System.Type.IsGenericType%2A> property is `true`), but the converse is not true.</span></span>|  
|<span data-ttu-id="6cdc9-3747">Typ ogólny</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3747">generic type</span></span>|<span data-ttu-id="6cdc9-3748"><xref:System.Type.IsGenericType%2A> Właściwość `true`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3748">The <xref:System.Type.IsGenericType%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="6cdc9-3749">Może być definicji typu ogólnego, skonstruowanego typu otwartego lub zamkniętych skonstruowanego typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3749">Can be a generic type definition, an open constructed type, or a closed constructed type.</span></span><br /><br /> <span data-ttu-id="6cdc9-3750">Należy pamiętać, że tablica typu którego typ elementu jest ogólny sam nie jest typem ogólnym.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3750">Note that an array type whose element type is generic is not itself a generic type.</span></span> <span data-ttu-id="6cdc9-3751">To samo dotyczy programu <xref:System.Type> obiekt reprezentujący wskaźnik do typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3751">The same is true of a <xref:System.Type> object representing a pointer to a generic type.</span></span>|  
|<span data-ttu-id="6cdc9-3752">Otwórz skonstruowanego typu</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3752">open constructed type</span></span>|<span data-ttu-id="6cdc9-3753"><xref:System.Type.ContainsGenericParameters%2A> Właściwość `true`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3753">The <xref:System.Type.ContainsGenericParameters%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="6cdc9-3754">Przykłady to typ ogólny, który ma nieprzypisanych parametry typu, typ, który jest zagnieżdżony w definicji typu ogólnego lub skonstruowanego typu otwartego lub typ ogólny, który ma argument typu, dla którego <xref:System.Type.ContainsGenericParameters%2A> właściwość `true`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3754">Examples are a generic type that has unassigned type parameters, a type that is nested in a generic type definition or in an open constructed type, or a generic type that has a type argument for which the <xref:System.Type.ContainsGenericParameters%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="6cdc9-3755">Nie jest możliwe do utworzenia wystąpienia typu otwartego skonstruowany.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3755">It is not possible to create an instance of an open constructed type.</span></span><br /><br /> <span data-ttu-id="6cdc9-3756">Należy pamiętać, że nie wszystkie otwarte typy utworzone są rodzajowe.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3756">Note that not all open constructed types are generic.</span></span> <span data-ttu-id="6cdc9-3757">Na przykład nie jest ogólna tablica, którego typ elementu jest definicja typu ogólnego i nie jest ogólna wskaźnik do skonstruowanego typu otwartego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3757">For example, an array whose element type is a generic type definition is not generic, and a pointer to an open constructed type is not generic.</span></span>|  
|<span data-ttu-id="6cdc9-3758">skonstruowany typ zamknięty</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3758">closed constructed type</span></span>|<span data-ttu-id="6cdc9-3759"><xref:System.Type.ContainsGenericParameters%2A> Właściwość `false`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3759">The <xref:System.Type.ContainsGenericParameters%2A> property is `false`.</span></span><br /><br /> <span data-ttu-id="6cdc9-3760">Gdy zbadane cyklicznie, typ nie ma nieprzypisane ogólnych parametrów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3760">When examined recursively, the type has no unassigned generic parameters.</span></span>|  
|<span data-ttu-id="6cdc9-3761">Parametr typu ogólnego</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3761">generic type parameter</span></span>|<span data-ttu-id="6cdc9-3762"><xref:System.Type.IsGenericParameter%2A> Właściwość `true`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3762">The <xref:System.Type.IsGenericParameter%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="6cdc9-3763"><xref:System.Type.ContainsGenericParameters%2A> Właściwość `true`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3763">The <xref:System.Type.ContainsGenericParameters%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="6cdc9-3764">W definicji typu ogólnego jest symbolem zastępczym dla typu, który zostanie przypisany później.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3764">In a generic type definition, a placeholder for a type that will be assigned later.</span></span>|  
|<span data-ttu-id="6cdc9-3765">argument typu ogólnego</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3765">generic type argument</span></span>|<span data-ttu-id="6cdc9-3766">Może być dowolnego typu, w tym parametr typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3766">Can be any type, including a generic type parameter.</span></span><br /><br /> <span data-ttu-id="6cdc9-3767">Argumenty typu są określane jako tablicę <xref:System.Type> przekazywanym do <xref:System.Type.MakeGenericType%2A> metody podczas tworzenia zbudowany typ ogólny.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3767">Type arguments are specified as an array of <xref:System.Type> objects passed to the <xref:System.Type.MakeGenericType%2A> method when creating a constructed generic type.</span></span> <span data-ttu-id="6cdc9-3768">W przypadku wystąpienia wynikowy typ ma zostać utworzony <xref:System.Type.ContainsGenericParameters%2A> właściwość musi być `false` dla wszystkich argumentów typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3768">If instances of the resulting type are to be created, the <xref:System.Type.ContainsGenericParameters%2A> property must be `false` for all the type arguments.</span></span>|  
  
 <span data-ttu-id="6cdc9-3769">Następujący przykładowy kod i tabeli przedstawiono niektóre z tych warunków i invariants.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3769">The following code example and table illustrate some of these terms and invariants.</span></span> <span data-ttu-id="6cdc9-3770">`Derived` Klasy ma szczególne znaczenie, ponieważ jego typ podstawowy jest typem stworzonego elementu, który zawiera kombinację typów parametrów typu w jego lista argumentów typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3770">The `Derived` class is of particular interest because its base type is a constructed type that has a mixture of types and type parameters in its type argument list.</span></span>  
  
 [!code-cpp[System.Type.IsGenericType#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericType/cpp/remarks.cpp#2)]
 [!code-csharp[System.Type.IsGenericType#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericType/cs/remarks.cs#2)]
 [!code-vb[System.Type.IsGenericType#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericType/vb/remarks.vb#2)]  
  
 <span data-ttu-id="6cdc9-3771">W poniższej tabeli przedstawiono przykłady, które oraz tworzyć dotyczące klas `Base`, `Derived`, i `G`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3771">The following table shows examples that use and build on the classes `Base`, `Derived`, and `G`.</span></span> <span data-ttu-id="6cdc9-3772">W przypadku kodu C++ i C# jest taka sama, jest wyświetlana tylko jedna pozycja.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3772">When the C++ and C# code is the same, only one entry is shown.</span></span>  
  
|<span data-ttu-id="6cdc9-3773">Przykład</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3773">Example</span></span>|<span data-ttu-id="6cdc9-3774">Invariants</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3774">Invariants</span></span>|  
|-------------|----------------|  
|`Derived(Of V)`<br /><br /> `Derived<V>`|<span data-ttu-id="6cdc9-3775">Dla tego typu:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3775">For this type:</span></span><br /><br /> <span data-ttu-id="6cdc9-3776"><xref:System.Type.IsGenericType%2A> jest `true`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3776"><xref:System.Type.IsGenericType%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="6cdc9-3777"><xref:System.Type.IsGenericTypeDefinition%2A> jest `true`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3777"><xref:System.Type.IsGenericTypeDefinition%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="6cdc9-3778"><xref:System.Type.ContainsGenericParameters%2A> jest `true`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3778"><xref:System.Type.ContainsGenericParameters%2A> is `true`.</span></span>|  
|`Base(Of String, V)`<br /><br /> `Base<String,V>`<br /><br /> `Base<String^,V>`|<span data-ttu-id="6cdc9-3779">Dla tego typu:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3779">For this type:</span></span><br /><br /> <span data-ttu-id="6cdc9-3780"><xref:System.Type.IsGenericType%2A> jest `true`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3780"><xref:System.Type.IsGenericType%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="6cdc9-3781"><xref:System.Type.IsGenericTypeDefinition%2A> jest `false`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3781"><xref:System.Type.IsGenericTypeDefinition%2A> is `false`.</span></span><br /><br /> <span data-ttu-id="6cdc9-3782"><xref:System.Type.ContainsGenericParameters%2A> jest `true`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3782"><xref:System.Type.ContainsGenericParameters%2A> is `true`.</span></span>|  
|`Dim d() As Derived(Of Integer)`<br /><br /> `Derived<int>[] d;`<br /><br /> `array<Derived<int>^>^ d;`|<span data-ttu-id="6cdc9-3783">Dla typu zmiennej `d`:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3783">For the type of variable `d`:</span></span><br /><br /> <span data-ttu-id="6cdc9-3784"><xref:System.Type.IsGenericType%2A> jest `false` ponieważ `d` jest tablicą.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3784"><xref:System.Type.IsGenericType%2A> is `false` because `d` is an array.</span></span><br /><br /> <span data-ttu-id="6cdc9-3785"><xref:System.Type.IsGenericTypeDefinition%2A> jest `false`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3785"><xref:System.Type.IsGenericTypeDefinition%2A> is `false`.</span></span><br /><br /> <span data-ttu-id="6cdc9-3786"><xref:System.Type.ContainsGenericParameters%2A> jest `false`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3786"><xref:System.Type.ContainsGenericParameters%2A> is `false`.</span></span>|  
|<span data-ttu-id="6cdc9-3787">`T`, `U`, i `V` (wszędzie, gdzie są wyświetlane)</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3787">`T`, `U`, and `V` (everywhere they appear)</span></span>|<span data-ttu-id="6cdc9-3788"><xref:System.Type.IsGenericParameter%2A> jest `true`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3788"><xref:System.Type.IsGenericParameter%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="6cdc9-3789"><xref:System.Type.IsGenericType%2A> jest `false` ponieważ nie istnieje żaden sposób ograniczyć parametr typu do typów ogólnych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3789"><xref:System.Type.IsGenericType%2A> is `false` because there is no way to constrain a type parameter to generic types.</span></span><br /><br /> <span data-ttu-id="6cdc9-3790"><xref:System.Type.IsGenericTypeDefinition%2A> jest `false`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3790"><xref:System.Type.IsGenericTypeDefinition%2A> is `false`.</span></span><br /><br /> <span data-ttu-id="6cdc9-3791"><xref:System.Type.ContainsGenericParameters%2A> jest `true` ponieważ `T`, `U`, i `V` są same parametry typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3791"><xref:System.Type.ContainsGenericParameters%2A> is `true` because `T`, `U`, and `V` are themselves generic type parameters.</span></span> <span data-ttu-id="6cdc9-3792">To nie oznacza niczego o argumentach typu, które są przypisane do ich później.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3792">This does not imply anything about type arguments that are assigned to them later.</span></span>|  
|<span data-ttu-id="6cdc9-3793">Typ pola `F`</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3793">The type of field `F`</span></span>|<span data-ttu-id="6cdc9-3794"><xref:System.Type.IsGenericType%2A> jest `true`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3794"><xref:System.Type.IsGenericType%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="6cdc9-3795"><xref:System.Type.IsGenericTypeDefinition%2A> jest `false` , ponieważ typ przypisany do typu parametru `G`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3795"><xref:System.Type.IsGenericTypeDefinition%2A> is `false` because a type has been assigned to the type parameter of `G`.</span></span> <span data-ttu-id="6cdc9-3796">Należy pamiętać, że jest to równoważne wywołaniem <xref:System.Type.MakeGenericType%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3796">Note that this is equivalent to having called the <xref:System.Type.MakeGenericType%2A> method.</span></span><br /><br /> <span data-ttu-id="6cdc9-3797"><xref:System.Type.ContainsGenericParameters%2A> jest `true` ponieważ typ pola `F` ma argument typu, który jest typem otwartym skonstruowany.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3797"><xref:System.Type.ContainsGenericParameters%2A> is `true` because the type of field `F` has a type argument that is an open constructed type.</span></span> <span data-ttu-id="6cdc9-3798">Skonstruowany typ jest otwarty ponieważ jej argument typu (czyli `Base`) jest definicja typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3798">The constructed type is open because its type argument (that is, `Base`) is a generic type definition.</span></span> <span data-ttu-id="6cdc9-3799">Obrazuje to cykliczne rodzaj <xref:System.Type.IsGenericType%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3799">This illustrates the recursive nature of the <xref:System.Type.IsGenericType%2A> property.</span></span>|  
|<span data-ttu-id="6cdc9-3800">Klasa zagnieżdżona `Nested`</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3800">The nested class `Nested`</span></span>|<span data-ttu-id="6cdc9-3801"><xref:System.Type.IsGenericType%2A> jest `true`, nawet jeśli `Nested` klasa ma żadnych parametrów typu rodzajowego, własnych, ponieważ jest zagnieżdżony w typie ogólnym.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3801"><xref:System.Type.IsGenericType%2A> is `true`, even though the `Nested` class has no generic type parameters of its own, because it is nested in a generic type.</span></span><br /><br /> <span data-ttu-id="6cdc9-3802"><xref:System.Type.IsGenericTypeDefinition%2A> jest `true`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3802"><xref:System.Type.IsGenericTypeDefinition%2A> is `true`.</span></span> <span data-ttu-id="6cdc9-3803">Oznacza to, można wywołać <xref:System.Type.MakeGenericType%2A> metody i dostarczyć parametr typu otaczającego `Derived`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3803">That is, you can call the <xref:System.Type.MakeGenericType%2A> method and supply the type parameter of the enclosing type, `Derived`.</span></span><br /><br /> <span data-ttu-id="6cdc9-3804"><xref:System.Type.ContainsGenericParameters%2A> jest `true` ponieważ otaczający typ `Derived`, ma parametry typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3804"><xref:System.Type.ContainsGenericParameters%2A> is `true` because the enclosing type, `Derived`, has generic type parameters.</span></span> <span data-ttu-id="6cdc9-3805">Obrazuje to cykliczne rodzaj <xref:System.Type.ContainsGenericParameters%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3805">This illustrates the recursive nature of the <xref:System.Type.ContainsGenericParameters%2A> property.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3806">Poniższy przykład kodu wyświetla wartość <xref:System.Type.IsGenericType%2A>, <xref:System.Type.IsGenericTypeDefinition%2A>, <xref:System.Type.IsGenericParameter%2A>, i <xref:System.Type.ContainsGenericParameters%2A> właściwości typów, opisanych w sekcji uwag.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3806">The following code example displays the value of the <xref:System.Type.IsGenericType%2A>, <xref:System.Type.IsGenericTypeDefinition%2A>, <xref:System.Type.IsGenericParameter%2A>, and <xref:System.Type.ContainsGenericParameters%2A> properties for the types described in the Remarks section.</span></span> <span data-ttu-id="6cdc9-3807">Objaśnienia dotyczące wartości właściwości Zobacz towarzyszący tabelę w uwagi.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3807">For explanations of the property values, see the accompanying table in Remarks.</span></span>  
  
 [!code-cpp[System.Type.IsGenericType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericType/cpp/source.cpp#1)]
 [!code-csharp[System.Type.IsGenericType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericType/cs/source.cs#1)]
 [!code-vb[System.Type.IsGenericType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericType/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md">
          <span data-ttu-id="6cdc9-3808">Odbicie i typy ogólne</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3808">Reflection and Generic Types</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md">
          <span data-ttu-id="6cdc9-3809">Porady: zbadanie i tworzenie wystąpień typów ogólnych za pomocą odbicia</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3809">How to: Examine and Instantiate Generic Types with Reflection</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsGenericTypeDefinition">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericTypeDefinition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericTypeDefinition" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericTypeDefinition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericTypeDefinition { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericTypeDefinition : bool" Usage="System.Type.IsGenericTypeDefinition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3810">Pobiera wartość wskazującą czy bieżący <see cref="T:System.Type" /> reprezentuje definicji typu ogólnego, z którego można skonstruować innych typów ogólnych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3810">Gets a value indicating whether the current <see cref="T:System.Type" /> represents a generic type definition, from which other generic types can be constructed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-3811">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> obiekt reprezentuje definicji typu ogólnego; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3811">
              <see langword="true" /> if the <see cref="T:System.Type" /> object represents a generic type definition; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3812">Definicja typu ogólnego jest szablonem, z którego można skonstruować innych typów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3812">A generic type definition is a template from which other types can be constructed.</span></span> <span data-ttu-id="6cdc9-3813">Na przykład z definicji typu ogólnego `G<T>` (wyrażony w języku C# składni; `G(Of T)` w języku Visual Basic lub `generic <typename T> ref class G` w języku C++) można utworzyć i utworzyć wystąpienie typu `G<int>` (`G(Of Integer)` w języku Visual Basic), przez wywołanie metody <xref:System.Type.MakeGenericType%2A> metody z argumentem ogólnym lista zawierająca <xref:System.Int32> typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3813">For example, from the generic type definition `G<T>` (expressed in C# syntax; `G(Of T)` in Visual Basic or `generic <typename T> ref class G` in C++) you can construct and instantiate the type `G<int>` (`G(Of Integer)` in Visual Basic), by calling the <xref:System.Type.MakeGenericType%2A> method with a generic argument list containing the <xref:System.Int32> type.</span></span> <span data-ttu-id="6cdc9-3814">Biorąc pod uwagę <xref:System.Type> obiekt reprezentujący to skonstruowany typ <xref:System.Type.GetGenericTypeDefinition%2A> metoda otrzymuje w definicji typu ogólnego ponownie.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3814">Given a <xref:System.Type> object representing this constructed type, the <xref:System.Type.GetGenericTypeDefinition%2A> method gets the generic type definition back again.</span></span>  
  
 <span data-ttu-id="6cdc9-3815">Użyj <xref:System.Type.IsGenericTypeDefinition%2A> właściwości w celu określenia, czy można utworzyć nowych typów z bieżącego typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3815">Use the <xref:System.Type.IsGenericTypeDefinition%2A> property to determine whether you can create new types from the current type.</span></span> <span data-ttu-id="6cdc9-3816">Jeśli <xref:System.Type.IsGenericTypeDefinition%2A> właściwość zwraca `true`, można wywołać <xref:System.Type.MakeGenericType%2A> metodę w celu utworzenia nowych typów rodzajowych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3816">If the <xref:System.Type.IsGenericTypeDefinition%2A> property returns `true`, you can call the <xref:System.Type.MakeGenericType%2A> method to create new generic types.</span></span>  
  
 <span data-ttu-id="6cdc9-3817">Aby uzyskać listę niezmiennych warunków dla terminów używanych w odbiciu rodzajowym, zobacz <xref:System.Type.IsGenericType%2A> uwagi dotyczące właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3817">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3818">Poniższy przykład wyświetla informacje o typie, w tym, czy jest definicja typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3818">The following example displays information about a type, including whether or not it is a generic type definition.</span></span> <span data-ttu-id="6cdc9-3819">Skonstruowany typ, jego definicję typu ogólnego i typu zwykłego, zostaną wyświetlone informacje.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3819">Information is displayed for a constructed type, for its generic type definition, and for an ordinary type.</span></span>  
  
 [!code-cpp[System.Type.IsGenericTypeDefinition#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/CPP/source.cpp#1)]
 [!code-csharp[System.Type.IsGenericTypeDefinition#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/CS/source.cs#1)]
 [!code-vb[System.Type.IsGenericTypeDefinition#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="M:System.Type.GetGenericTypeDefinition" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md">
          <span data-ttu-id="6cdc9-3820">Odbicie i typy ogólne</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3820">Reflection and Generic Types</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md">
          <span data-ttu-id="6cdc9-3821">Porady: zbadanie i tworzenie wystąpień typów ogólnych za pomocą odbicia</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3821">How to: Examine and Instantiate Generic Types with Reflection</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsGenericTypeParameter">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericTypeParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericTypeParameter" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericTypeParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericTypeParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericTypeParameter { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericTypeParameter : bool" Usage="System.Type.IsGenericTypeParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsImport">
      <MemberSignature Language="C#" Value="public bool IsImport { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsImport" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsImport" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsImport As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsImport { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsImport : bool" Usage="System.Type.IsImport" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsImport</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3822">Pobiera wartość wskazującą czy <see cref="T:System.Type" /> ma <see cref="T:System.Runtime.InteropServices.ComImportAttribute" /> zastosowany, wskazujący, że został zaimportowany z biblioteki typów COM.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3822">Gets a value indicating whether the <see cref="T:System.Type" /> has a <see cref="T:System.Runtime.InteropServices.ComImportAttribute" /> attribute applied, indicating that it was imported from a COM type library.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-3823">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> ma <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3823">
              <see langword="true" /> if the <see cref="T:System.Type" /> has a <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3824">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, właściwość ta ma zastosowanie do definicji typu ogólnego, z którego skonstruowano.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3824">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="6cdc9-3825">Na przykład jeśli bieżący <xref:System.Type> reprezentuje `MyGenericType<int>` (`MyGenericType(Of Integer)` w języku Visual Basic), wartość tej właściwości jest określana przez `MyGenericType<T>.`</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3825">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>.`</span></span>  
  
 <span data-ttu-id="6cdc9-3826">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, właściwość ta zwraca zawsze `false`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3826">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsInstanceOfType">
      <MemberSignature Language="C#" Value="public virtual bool IsInstanceOfType (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsInstanceOfType(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsInstanceOfType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsInstanceOfType (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsInstanceOfType(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="abstract member IsInstanceOfType : obj -&gt; bool&#xA;override this.IsInstanceOfType : obj -&gt; bool" Usage="type.IsInstanceOfType o" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.IsInstanceOfType(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">
          <span data-ttu-id="6cdc9-3827">Obiekt do porównania z bieżącym typem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3827">The object to compare with the current type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-3828">Określa, czy określony obiekt jest wystąpieniem bieżącego <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3828">Determines whether the specified object is an instance of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-3829">
            <see langword="true" /> Jeśli bieżący <see langword="Type" /> znajduje się w hierarchii dziedziczenia obiektu reprezentowanego przez <paramref name="o" />, lub, jeśli bieżący <see langword="Type" /> jest interfejsem, <paramref name="o" /> implementuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3829">
              <see langword="true" /> if the current <see langword="Type" /> is in the inheritance hierarchy of the object represented by <paramref name="o" />, or if the current <see langword="Type" /> is an interface that <paramref name="o" /> implements.</span>
          </span>
          <span data-ttu-id="6cdc9-3830">
            <see langword="false" /> Jeśli żadna z tych warunków jest przypadek, gdy <paramref name="o" /> jest <see langword="null" />, lub, jeśli bieżący <see langword="Type" /> jest to otwarty typ ogólny (oznacza to, że <see cref="P:System.Type.ContainsGenericParameters" /> zwraca <see langword="true" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3830">
              <see langword="false" /> if neither of these conditions is the case, if <paramref name="o" /> is <see langword="null" />, or if the current <see langword="Type" /> is an open generic type (that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3831">Metoda ta może być zastąpiona przez klasę pochodną.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3831">This method can be overridden by a derived class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-3832">Skonstruowany typ nie jest wystąpieniem jego definicji typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3832">A constructed type is not an instance of its generic type definition.</span></span> <span data-ttu-id="6cdc9-3833">Oznacza to, że `MyGenericList<int>` (`MyGenericList(Of Integer)` w języku Visual Basic) nie jest wystąpieniem `MyGenericList<T>` (`MyGenericList(Of T)` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3833">That is, `MyGenericList<int>` (`MyGenericList(Of Integer)` in Visual Basic) is not an instance of `MyGenericList<T>` (`MyGenericList(Of T)` in Visual Basic).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3834">W poniższym przykładzie pokazano użycie `IsInstanceOfType` metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3834">The following example demonstrates the use of the `IsInstanceOfType` method.</span></span>  
  
 [!code-cpp[TestIsInstanceOfType#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestIsInstanceOfType/CPP/testisinstanceoftype.cpp#1)]
 [!code-csharp[TestIsInstanceOfType#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestIsInstanceOfType/CS/testisinstanceoftype.cs#1)]
 [!code-vb[TestIsInstanceOfType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestIsInstanceOfType/VB/testisinstanceoftype.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInterface">
      <MemberSignature Language="C#" Value="public bool IsInterface { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInterface" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsInterface" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInterface As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInterface { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInterface : bool" Usage="System.Type.IsInterface" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsInterface</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3835">Pobiera wartość wskazującą czy <see cref="T:System.Type" /> interfejsu; nie jest klasą lub typu wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3835">Gets a value indicating whether the <see cref="T:System.Type" /> is an interface; that is, not a class or a value type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-3836">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> jest interfejsem; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3836">
              <see langword="true" /> if the <see cref="T:System.Type" /> is an interface; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3837"><xref:System.Reflection.TypeAttributes.ClassSemanticsMask> Wyróżnia deklaracji typu jako typ klasy, interfejsu lub wartość.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3837">The <xref:System.Reflection.TypeAttributes.ClassSemanticsMask> distinguishes a type declaration as class, interface or value type.</span></span>  
  
 <span data-ttu-id="6cdc9-3838">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, właściwość ta zwraca zawsze `false`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3838">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="6cdc9-3839">Ta właściwość jest tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3839">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3840">Poniższy przykład tworzy interfejs, sprawdza, czy typ interfejsu i wskazuje, czy klasa ma `IsInterface` zestawu właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3840">The following example creates an interface, checks for the interface type, and indicates whether a class has the `IsInterface` property set.</span></span>  
  
 [!code-cpp[Type_IsInterface#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsInterface/CPP/type_isinterface.cpp#1)]
 [!code-csharp[Type_IsInterface#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsInterface/CS/type_isinterface.cs#1)]
 [!code-vb[Type_IsInterface#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsInterface/VB/type_isinterface.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsClass" />
        <altmember cref="P:System.Type.IsValueType" />
      </Docs>
    </Member>
    <Member MemberName="IsLayoutSequential">
      <MemberSignature Language="C#" Value="public bool IsLayoutSequential { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLayoutSequential" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsLayoutSequential" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLayoutSequential As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLayoutSequential { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLayoutSequential : bool" Usage="System.Type.IsLayoutSequential" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsLayoutSequential</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3841">Pobiera wartość wskazującą, czy pola bieżącego typu są ułożone sekwencyjnie w kolejności, że zostały zdefiniowane lub emitowany do metadanych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3841">Gets a value indicating whether the fields of the current type are laid out sequentially, in the order that they were defined or emitted to the metadata.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-3842">
            <see langword="true" /> Jeśli <see cref="P:System.Type.Attributes" /> zawiera właściwości bieżącego typu <see cref="F:System.Reflection.TypeAttributes.SequentialLayout" />; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3842">
              <see langword="true" /> if the <see cref="P:System.Type.Attributes" /> property of the current type includes <see cref="F:System.Reflection.TypeAttributes.SequentialLayout" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3843">Ta właściwość jest udostępniana dla wygody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3843">This property is provided as a convenience.</span></span> <span data-ttu-id="6cdc9-3844">Alternatywnie, można użyć <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> wartości wyliczenia, aby wybrać atrybuty układu typu, a następnie w celu przetestowania, czy <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> jest ustawiona.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3844">Alternatively, you can use the <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> enumeration value to select the type layout attributes, and then test whether <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> is set.</span></span> <span data-ttu-id="6cdc9-3845"><xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>, <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, I <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> wartości wyliczenia wskazuje sposób pola tego typu są ułożone w pamięci.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3845">The <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>, <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, and <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> enumeration values indicate the way the fields of the type are laid out in memory.</span></span>  
  
 <span data-ttu-id="6cdc9-3846">W przypadku typów dynamicznych, możesz określić <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> podczas tworzenia tego typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3846">For dynamic types, you can specify <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> when you create the type.</span></span> <span data-ttu-id="6cdc9-3847">W kodzie, należy zastosować <xref:System.Runtime.InteropServices.StructLayoutAttribute> atrybutem <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> wartość wyliczenia do typu, aby określić, że układ jest sekwencyjny.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3847">In code, apply the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute with the <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> enumeration value to the type, to specify that layout is sequential.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-3848">Nie można użyć <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> metodę pozwala ustalić czy <xref:System.Runtime.InteropServices.StructLayoutAttribute> zastosowano do typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3848">You cannot use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method to determine whether the <xref:System.Runtime.InteropServices.StructLayoutAttribute> has been applied to a type.</span></span>  
  
 <span data-ttu-id="6cdc9-3849">Aby uzyskać więcej informacji zobacz sekcję 9.1.2 specyfikacja Common Language Infrastructure (CLI) dokumentacji dotyczącej, "Partycja II: metadane definicji i semantyka".</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3849">For more information, see section 9.1.2 of the specification for the Common Language Infrastructure (CLI) documentation, "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="6cdc9-3850">Dokumentacja jest dostępna w trybie online; zobacz [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) w witrynie MSDN i [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) w witrynie Ecma International w sieci Web.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3850">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 <span data-ttu-id="6cdc9-3851">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, właściwość ta ma zastosowanie do definicji typu ogólnego, z którego skonstruowano.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3851">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="6cdc9-3852">Na przykład jeśli bieżący <xref:System.Type> reprezentuje `MyGenericType<int>` (`MyGenericType(Of Integer)` w języku Visual Basic), wartość tej właściwości jest określana przez `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3852">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="6cdc9-3853">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, właściwość ta zwraca zawsze `false`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3853">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3854">Poniższy przykład tworzy wystąpienie klasy, dla którego <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> wartości wyliczenia w <xref:System.Runtime.InteropServices.StructLayoutAttribute> klasa została ustawiona, sprawdza, czy <xref:System.Type.IsLayoutSequential%2A> właściwości i wyświetla wynik.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3854">The following example creates an instance of a class for which the <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> enumeration value in the <xref:System.Runtime.InteropServices.StructLayoutAttribute> class has been set, checks for the <xref:System.Type.IsLayoutSequential%2A> property, and displays the result.</span></span>  
  
 [!code-cpp[Type_IsLayoutSequential#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsLayoutSequential/CPP/type_islayoutsequential.cpp#1)]
 [!code-csharp[Type_IsLayoutSequential#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsLayoutSequential/CS/type_islayoutsequential.cs#1)]
 [!code-vb[Type_IsLayoutSequential#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsLayoutSequential/VB/type_islayoutsequential.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsAutoLayout" />
        <altmember cref="P:System.Type.IsExplicitLayout" />
        <related type="Article" href="~/docs/standard/metadata-and-self-describing-components.md">
          <span data-ttu-id="6cdc9-3855">Składniki samoopisujące się i metadane</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3855">Metadata and Self-Describing Components</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsMarshalByRef">
      <MemberSignature Language="C#" Value="public bool IsMarshalByRef { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMarshalByRef" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsMarshalByRef" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMarshalByRef As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMarshalByRef { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMarshalByRef : bool" Usage="System.Type.IsMarshalByRef" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsMarshalByRef</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3856">Pobiera wartość wskazującą czy <see cref="T:System.Type" /> jest przekazywany przez odwołanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3856">Gets a value indicating whether the <see cref="T:System.Type" /> is marshaled by reference.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-3857">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> jest organizowane przez odwołanie; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3857">
              <see langword="true" /> if the <see cref="T:System.Type" /> is marshaled by reference; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6cdc9-3858">W poniższym przykładzie pokazano `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, i <xref:System.Type.IsPrimitive%2A> właściwości <xref:System.Type> klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3858">The following example demonstrates the `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, and <xref:System.Type.IsPrimitive%2A> properties of the <xref:System.Type> class.</span></span> <span data-ttu-id="6cdc9-3859">Sprawdza, czy dany typ może być hostowana w kontekście, czy mogą być przekazywane przez odwołanie i zezwolić na określony typ jest typem danych pierwotnych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3859">It checks whether the given type can be hosted in the context, whether it can be marshaled by reference, and whether the type is a primitive data type.</span></span>  
  
 [!code-cpp[Type_IsContextful#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsContextful/CPP/type_iscontextful.cpp#1)]
 [!code-csharp[Type_IsContextful#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsContextful/CS/type_iscontextful.cs#1)]
 [!code-vb[Type_IsContextful#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsContextful/VB/type_iscontextful.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsMarshalByRefImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsMarshalByRefImpl">
      <MemberSignature Language="C#" Value="protected virtual bool IsMarshalByRefImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsMarshalByRefImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsMarshalByRefImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsMarshalByRefImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsMarshalByRefImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsMarshalByRefImpl : unit -&gt; bool&#xA;override this.IsMarshalByRefImpl : unit -&gt; bool" Usage="type.IsMarshalByRefImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3860">Implementuje <see cref="P:System.Type.IsMarshalByRef" /> właściwości i określa, czy <see cref="T:System.Type" /> jest przekazywany przez odwołanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3860">Implements the <see cref="P:System.Type.IsMarshalByRef" /> property and determines whether the <see cref="T:System.Type" /> is marshaled by reference.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-3861">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> jest organizowane przez odwołanie; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3861">
              <see langword="true" /> if the <see cref="T:System.Type" /> is marshaled by reference; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3862">Metoda ta może być zastąpiona przez klasę pochodną.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3862">This method can be overridden by a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3863">Poniższy przykład określa, czy dany typ jest przekazywany przez odwołanie, a następnie wyświetla wynik.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3863">The following example determines whether the given type is marshaled by reference and displays the result.</span></span>  
  
 [!code-cpp[Type_IsMarshalByRefImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsMarshalByRefImpl/CPP/type_ismarshalbyrefimpl.cpp#1)]
 [!code-csharp[Type_IsMarshalByRefImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsMarshalByRefImpl/CS/type_ismarshalbyrefimpl.cs#1)]
 [!code-vb[Type_IsMarshalByRefImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsMarshalByRefImpl/VB/type_ismarshalbyrefimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsMarshalByRef" />
      </Docs>
    </Member>
    <Member MemberName="IsNested">
      <MemberSignature Language="C#" Value="public bool IsNested { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNested" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNested" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNested As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNested { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNested : bool" Usage="System.Type.IsNested" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3864">Pobiera wartość wskazującą czy bieżący <see cref="T:System.Type" /> obiekt reprezentuje typ, którego definicja jest zagnieżdżona w definicji typu innego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3864">Gets a value indicating whether the current <see cref="T:System.Type" /> object represents a type whose definition is nested inside the definition of another type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-3865">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> jest zagnieżdżone wewnątrz innego typu; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3865">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested inside another type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3866"><xref:System.Type.IsNested%2A> Właściwość zwraca `true` dla wszystkich zagnieżdżonych typów, niezależnie od tego, widoczność.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3866">The <xref:System.Type.IsNested%2A> property returns `true` for all nested types, regardless of visibility.</span></span> <span data-ttu-id="6cdc9-3867">Aby sprawdzić zagnieżdżanie i widoczność w tym samym czasie, należy użyć powiązane właściwości <xref:System.Type.IsNestedAssembly%2A>, <xref:System.Type.IsNestedFamily%2A>, <xref:System.Type.IsNestedFamANDAssem%2A>, <xref:System.Type.IsNestedFamORAssem%2A>, <xref:System.Type.IsNestedPrivate%2A>, lub <xref:System.Type.IsNestedPublic%2A>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3867">To test for nesting and visibility at the same time, use the related properties <xref:System.Type.IsNestedAssembly%2A>, <xref:System.Type.IsNestedFamily%2A>, <xref:System.Type.IsNestedFamANDAssem%2A>, <xref:System.Type.IsNestedFamORAssem%2A>, <xref:System.Type.IsNestedPrivate%2A>, or <xref:System.Type.IsNestedPublic%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-3868"><xref:System.Reflection.TypeAttributes.VisibilityMask> Element członkowski wyliczenia wybiera atrybuty widoczności dla typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3868">The <xref:System.Reflection.TypeAttributes.VisibilityMask> enumeration member selects the visibility attributes for a type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3869">Poniższy przykład tworzy zewnętrznej klasy, wprowadzając szereg klas zagnieżdżonych, które mają różne rodzaje widoczności.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3869">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="6cdc9-3870">Następnie pobiera wartość liczby związanych z widocznością <xref:System.Type> właściwości dla typu nadrzędnego, a każdy z jego typów zagnieżdżonych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3870">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsNestedAssembly" />
        <altmember cref="P:System.Type.IsNestedFamily" />
        <altmember cref="P:System.Type.IsNestedFamANDAssem" />
        <altmember cref="P:System.Type.IsNestedFamORAssem" />
        <altmember cref="P:System.Type.IsNestedPrivate" />
        <altmember cref="P:System.Type.IsNestedPublic" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedAssembly">
      <MemberSignature Language="C#" Value="public bool IsNestedAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedAssembly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedAssembly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedAssembly : bool" Usage="System.Type.IsNestedAssembly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedAssembly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3871">Pobiera wartość wskazującą czy <see cref="T:System.Type" /> jest zagnieżdżony i są widoczne tylko w ramach ich własnych zestawach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3871">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only within its own assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-3872">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> jest zagnieżdżony i widoczne tylko w ramach ich własnych zestawach; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3872">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only within its own assembly; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3873">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu ogólnego, właściwość ta zwraca zawsze `false`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3873">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="6cdc9-3874"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> Wybiera atrybuty widoczności.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3874"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3875">Poniższy przykład tworzy zewnętrznej klasy, wprowadzając szereg klas zagnieżdżonych, które mają różne rodzaje widoczności.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3875">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="6cdc9-3876">Następnie pobiera wartość liczby związanych z widocznością <xref:System.Type> właściwości dla typu nadrzędnego, a każdy z jego typów zagnieżdżonych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3876">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamANDAssem">
      <MemberSignature Language="C#" Value="public bool IsNestedFamANDAssem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamANDAssem" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedFamANDAssem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedFamANDAssem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedFamANDAssem { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedFamANDAssem : bool" Usage="System.Type.IsNestedFamANDAssem" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedFamANDAssem</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3877">Pobiera wartość wskazującą czy <see cref="T:System.Type" /> jest zagnieżdżony i są widoczne tylko dla klas, które należą do jego własnej rodzinę i swój własny zestaw.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3877">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only to classes that belong to both its own family and its own assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-3878">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> jest zagnieżdżony i widoczne tylko dla klas, które należą do jego własnej rodzinę i swój własny zestaw; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3878">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only to classes that belong to both its own family and its own assembly; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3879">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu ogólnego, właściwość ta zwraca zawsze `false`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3879">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="6cdc9-3880"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> Wybiera atrybuty widoczności.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3880"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-3881">W językach C# i Visual Basic nie dołączaj semantykę, która zezwala na określanie typu zagnieżdżonego, która jest widoczna tylko dla typów chronionych w ich własnych zestawach.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3881">The C# and Visual Basic languages do not include semantics that allow you to define a nested type that is visible only to protected types in its own assembly.</span></span> <span data-ttu-id="6cdc9-3882">`protected internal` wgląd w języku C# i `Protected Friend` widoczność w języku Visual Basic określić typu zagnieżdżonego, który jest widoczny, chronione typy i typy w tym samym zestawie.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3882">`protected internal` visibility in C# and `Protected Friend` visibility in Visual Basic define a nested type that is visible both to protected types and to types in the same assembly.</span></span>  
  
 <span data-ttu-id="6cdc9-3883">A <xref:System.Type> rodziny obiektu jest zdefiniowana jako wszystkich obiektów tego samego <xref:System.Type> i jego podtypów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3883">A <xref:System.Type> object's family is defined as all objects of the same <xref:System.Type> and of its subtypes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3884">Poniższy przykład tworzy zewnętrznej klasy, wprowadzając szereg klas zagnieżdżonych, które mają różne rodzaje widoczności.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3884">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="6cdc9-3885">Następnie pobiera wartość liczby związanych z widocznością <xref:System.Type> właściwości dla typu nadrzędnego, a każdy z jego typów zagnieżdżonych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3885">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamily">
      <MemberSignature Language="C#" Value="public bool IsNestedFamily { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamily" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedFamily" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedFamily As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedFamily { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedFamily : bool" Usage="System.Type.IsNestedFamily" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedFamily</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3886">Pobiera wartość wskazującą czy <see cref="T:System.Type" /> jest zagnieżdżony i są widoczne tylko w obrębie własnej rodziny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3886">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only within its own family.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-3887">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> jest zagnieżdżony i widoczne tylko w obrębie własnej rodziny; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3887">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only within its own family; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3888">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu ogólnego, właściwość ta zwraca zawsze `false`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3888">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="6cdc9-3889"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> Wybiera atrybuty widoczności.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3889"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
 <span data-ttu-id="6cdc9-3890">A <xref:System.Type> rodziny obiektu jest zdefiniowana jako wszystkich obiektów dokładnie tych samych <xref:System.Type> i jego podtypów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3890">A <xref:System.Type> object's family is defined as all objects of the exact same <xref:System.Type> and of its subtypes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3891">Poniższy przykład tworzy zewnętrznej klasy, wprowadzając szereg klas zagnieżdżonych, które mają różne rodzaje widoczności.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3891">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="6cdc9-3892">Następnie pobiera wartość liczby związanych z widocznością <xref:System.Type> właściwości dla typu nadrzędnego, a każdy z jego typów zagnieżdżonych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3892">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamORAssem">
      <MemberSignature Language="C#" Value="public bool IsNestedFamORAssem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamORAssem" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedFamORAssem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedFamORAssem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedFamORAssem { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedFamORAssem : bool" Usage="System.Type.IsNestedFamORAssem" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedFamORAssem</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3893">Pobiera wartość wskazującą czy <see cref="T:System.Type" /> jest zagnieżdżony i są widoczne tylko dla klas, które należą do jednej swój własny rodziny i swój własny zestaw.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3893">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only to classes that belong to either its own family or to its own assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-3894">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> jest zagnieżdżony i widoczne tylko dla klas, które należą do jego własnej rodziny lub ich własnych zestawach; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3894">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only to classes that belong to its own family or to its own assembly; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3895">W przypadku widoczności typu `protected internal` w języku C# lub `Protected Friend` w języku Visual Basic <xref:System.Type.IsNestedFamORAssem%2A> właściwość zwraca `true`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3895">If the visibility of a type is `protected internal` in C# or `Protected Friend` in Visual Basic, the <xref:System.Type.IsNestedFamORAssem%2A> property returns `true`.</span></span>  
  
 <span data-ttu-id="6cdc9-3896">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu ogólnego, właściwość ta zwraca zawsze `false`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3896">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="6cdc9-3897"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> Wybiera atrybuty widoczności.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3897"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
 <span data-ttu-id="6cdc9-3898">A <xref:System.Type> rodziny obiektu jest zdefiniowana jako wszystkich obiektów dokładnie tych samych <xref:System.Type> i jego podtypów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3898">A <xref:System.Type> object's family is defined as all objects of the exact same <xref:System.Type> and of its subtypes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3899">Poniższy przykład tworzy zewnętrznej klasy, wprowadzając szereg klas zagnieżdżonych, które mają różne rodzaje widoczności.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3899">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="6cdc9-3900">Następnie pobiera wartość liczby związanych z widocznością <xref:System.Type> właściwości dla typu nadrzędnego, a każdy z jego typów zagnieżdżonych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3900">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedPrivate">
      <MemberSignature Language="C#" Value="public bool IsNestedPrivate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedPrivate" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedPrivate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedPrivate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedPrivate { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedPrivate : bool" Usage="System.Type.IsNestedPrivate" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedPrivate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3901">Pobiera wartość wskazującą czy <see cref="T:System.Type" /> jest zagnieżdżony, a następnie deklarować prywatnych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3901">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and declared private.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-3902">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> jest zagnieżdżony i zadeklarować prywatny; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3902">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and declared private; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3903">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu ogólnego, właściwość ta zwraca zawsze `false`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3903">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="6cdc9-3904"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> Wybiera atrybuty widoczności.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3904"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3905">Poniższy przykład tworzy zewnętrznej klasy, wprowadzając szereg klas zagnieżdżonych, które mają różne rodzaje widoczności.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3905">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="6cdc9-3906">Następnie pobiera wartość liczby związanych z widocznością <xref:System.Type> właściwości dla typu nadrzędnego, a każdy z jego typów zagnieżdżonych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3906">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedPublic">
      <MemberSignature Language="C#" Value="public bool IsNestedPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedPublic" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedPublic : bool" Usage="System.Type.IsNestedPublic" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedPublic</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3907">Pobiera wartość wskazującą, czy klasa jest zagnieżdżone i zadeklarowana publicznych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3907">Gets a value indicating whether a class is nested and declared public.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-3908">
            <see langword="true" /> Jeśli klasa jest publiczny zagnieżdżony i zadeklarowane; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3908">
              <see langword="true" /> if the class is nested and declared public; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3909">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu ogólnego, właściwość ta zwraca zawsze `false`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3909">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="6cdc9-3910"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> Wybiera atrybuty widoczności.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3910"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3911">Poniższy przykład tworzy zewnętrznej klasy, wprowadzając szereg klas zagnieżdżonych, które mają różne rodzaje widoczności.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3911">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="6cdc9-3912">Następnie pobiera wartość liczby związanych z widocznością <xref:System.Type> właściwości dla typu nadrzędnego, a każdy z jego typów zagnieżdżonych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3912">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNotPublic">
      <MemberSignature Language="C#" Value="public bool IsNotPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNotPublic" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNotPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNotPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNotPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNotPublic : bool" Usage="System.Type.IsNotPublic" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNotPublic</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3913">Pobiera wartość wskazującą czy <see cref="T:System.Type" /> nie jest zadeklarowany jako publiczny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3913">Gets a value indicating whether the <see cref="T:System.Type" /> is not declared public.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-3914">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> nie jest zadeklarowany jako publiczny i nie jest typem zagnieżdżonym; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3914">
              <see langword="true" /> if the <see cref="T:System.Type" /> is not declared public and is not a nested type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3915">Nie należy używać tej właściwości z typów zagnieżdżonych. Użyj <xref:System.Type.IsNestedPublic%2A> właściwości zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3915">Do not use this property with nested types; use the <xref:System.Type.IsNestedPublic%2A> property instead.</span></span>  
  
 <span data-ttu-id="6cdc9-3916">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu ogólnego, właściwość ta zwraca `false`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3916">If the current <xref:System.Type> represents a type parameter of a generic type, this property returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3917">Ten przykład usesthe `IsNotPublic` właściwości, aby uzyskać wgląd w tego typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3917">This example usesthe `IsNotPublic` property to get the visibility of the type.</span></span>  
  
 [!code-cpp[Classic Type.IsNotPublic Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.IsNotPublic Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/CS/source.cs#1)]
 [!code-vb[Classic Type.IsNotPublic Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/VB/source.vb#1)]  
  
 <span data-ttu-id="6cdc9-3918">Poniższy przykład kodu pokazuje, dlaczego nie można użyć `IsPublic` i `IsNotPublic` dla klas zagnieżdżonych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3918">The following code example demonstrates why you cannot use `IsPublic` and `IsNotPublic` for nested classes.</span></span>  
  
 [!code-cpp[Classic Type.IsNotPublic Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/CPP/source.cpp#2)]
 [!code-csharp[Classic Type.IsNotPublic Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/CS/source.cs#2)]
 [!code-vb[Classic Type.IsNotPublic Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/VB/source.vb#2)]  
  
 <span data-ttu-id="6cdc9-3919">Klasy zagnieżdżone, można zignorować w wynikach `IsPublic` i `IsNotPublic` i które należy zwrócić uwagę tylko wyniki `IsNestedPublic` i `IsNestedPrivate`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3919">For nested classes, ignore the results of `IsPublic` and `IsNotPublic` and pay attention only to the results of `IsNestedPublic` and `IsNestedPrivate`.</span></span> <span data-ttu-id="6cdc9-3920">Dane wyjściowe odbicia dla fragmentu kodu będzie następujący:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3920">The reflection output for this code fragment would be as follows:</span></span>  
  
|<span data-ttu-id="6cdc9-3921">Class</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3921">Class</span></span>|<span data-ttu-id="6cdc9-3922">IsNotPublic</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3922">IsNotPublic</span></span>|<span data-ttu-id="6cdc9-3923">IsPublic</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3923">IsPublic</span></span>|<span data-ttu-id="6cdc9-3924">IsNestedPublic</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3924">IsNestedPublic</span></span>|<span data-ttu-id="6cdc9-3925">IsNestedPrivate</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3925">IsNestedPrivate</span></span>|  
|-----------|-----------------|--------------|--------------------|---------------------|  
|<span data-ttu-id="6cdc9-3926">ELEMENT</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3926">A</span></span>|<span data-ttu-id="6cdc9-3927">FAŁSZ</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3927">FALSE</span></span>|<span data-ttu-id="6cdc9-3928">WARTOŚĆ TRUE</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3928">TRUE</span></span>|<span data-ttu-id="6cdc9-3929">FAŁSZ</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3929">FALSE</span></span>|<span data-ttu-id="6cdc9-3930">FAŁSZ</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3930">FALSE</span></span>|  
|<span data-ttu-id="6cdc9-3931">B</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3931">B</span></span>|<span data-ttu-id="6cdc9-3932">FAŁSZ</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3932">FALSE</span></span>|<span data-ttu-id="6cdc9-3933">FAŁSZ</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3933">FALSE</span></span>|<span data-ttu-id="6cdc9-3934">WARTOŚĆ TRUE</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3934">TRUE</span></span>|<span data-ttu-id="6cdc9-3935">FAŁSZ</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3935">FALSE</span></span>|  
|<span data-ttu-id="6cdc9-3936">C</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3936">C</span></span>|<span data-ttu-id="6cdc9-3937">FAŁSZ</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3937">FALSE</span></span>|<span data-ttu-id="6cdc9-3938">FAŁSZ</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3938">FALSE</span></span>|<span data-ttu-id="6cdc9-3939">FAŁSZ</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3939">FALSE</span></span>|<span data-ttu-id="6cdc9-3940">WARTOŚĆ TRUE</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3940">TRUE</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsPointer">
      <MemberSignature Language="C#" Value="public bool IsPointer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPointer" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsPointer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPointer As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPointer { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPointer : bool" Usage="System.Type.IsPointer" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsPointer</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3941">Pobiera wartość wskazującą czy <see cref="T:System.Type" /> jest wskaźnikiem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3941">Gets a value indicating whether the <see cref="T:System.Type" /> is a pointer.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-3942">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> jest wskaźnikiem typu; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3942">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a pointer; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3943">Jeśli bieżący <xref:System.Type> reprezentuje typ ogólny lub parametr typu w definicji typu ogólnego lub metody rodzajowej, właściwość ta zwraca zawsze `false`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3943">If the current <xref:System.Type> represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="6cdc9-3944">Ta właściwość jest tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3944">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3945">Poniższy przykład pokazuje wykorzystanie `IsPointer` właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3945">The following example shows a use of the `IsPointer` property.</span></span>  
  
 [!code-cpp[Type_HasElementTypeImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_HasElementTypeImpl/CPP/type_haselementtypeimpl.cpp#1)]
 [!code-csharp[Type_HasElementTypeImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_HasElementTypeImpl/CS/type_haselementtypeimpl.cs#1)]
 [!code-vb[Type_HasElementTypeImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_HasElementTypeImpl/VB/type_haselementtypeimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsPointerImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsPointerImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsPointerImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsPointerImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsPointerImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsPointerImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsPointerImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsPointerImpl : unit -&gt; bool" Usage="type.IsPointerImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3946">W przypadku przesłonięcia w klasie pochodnej, implementuje <see cref="P:System.Type.IsPointer" /> właściwości i określa, czy <see cref="T:System.Type" /> jest wskaźnikiem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3946">When overridden in a derived class, implements the <see cref="P:System.Type.IsPointer" /> property and determines whether the <see cref="T:System.Type" /> is a pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-3947">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> jest wskaźnikiem typu; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3947">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a pointer; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Type.IsPointer" />
      </Docs>
    </Member>
    <Member MemberName="IsPrimitive">
      <MemberSignature Language="C#" Value="public bool IsPrimitive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPrimitive" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsPrimitive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPrimitive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPrimitive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPrimitive : bool" Usage="System.Type.IsPrimitive" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsPrimitive</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3948">Pobiera wartość wskazującą czy <see cref="T:System.Type" /> jest jednym z typów pierwotnych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3948">Gets a value indicating whether the <see cref="T:System.Type" /> is one of the primitive types.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-3949">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> jest jednym z typów pierwotnych; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3949">
              <see langword="true" /> if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3950">Typy pierwotne są <xref:System.Boolean>, <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.IntPtr>, <xref:System.UIntPtr>, <xref:System.Char>, <xref:System.Double>, i <xref:System.Single>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3950">The primitive types are <xref:System.Boolean>, <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.IntPtr>, <xref:System.UIntPtr>, <xref:System.Char>, <xref:System.Double>, and <xref:System.Single>.</span></span>  
  
 <span data-ttu-id="6cdc9-3951">Jeśli bieżący <xref:System.Type> reprezentuje typ ogólny lub parametr typu w definicji typu ogólnego lub metody rodzajowej, właściwość ta zwraca zawsze `false`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3951">If the current <xref:System.Type> represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3952">W poniższym przykładzie pokazano `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, i <xref:System.Type.IsPrimitive%2A> właściwości <xref:System.Type> klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3952">The following example demonstrates the `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, and <xref:System.Type.IsPrimitive%2A> properties of the <xref:System.Type> class.</span></span> <span data-ttu-id="6cdc9-3953">Sprawdza, czy dany typ może być hostowana w kontekście, czy mogą być przekazywane przez odwołanie i zezwolić na określony typ jest typem danych pierwotnych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3953">It checks whether the given type can be hosted in the context, whether it can be marshaled by reference, and whether the type is a primitive data type.</span></span>  
  
 [!code-cpp[Type_IsContextful#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsContextful/CPP/type_iscontextful.cpp#1)]
 [!code-csharp[Type_IsContextful#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsContextful/CS/type_iscontextful.cs#1)]
 [!code-vb[Type_IsContextful#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsContextful/VB/type_iscontextful.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.Byte" />
        <altmember cref="T:System.SByte" />
        <altmember cref="T:System.Int16" />
        <altmember cref="T:System.UInt16" />
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.UInt32" />
        <altmember cref="T:System.Int64" />
        <altmember cref="T:System.UInt64" />
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Double" />
        <altmember cref="T:System.Single" />
        <altmember cref="M:System.Type.IsPrimitiveImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsPrimitiveImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsPrimitiveImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsPrimitiveImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsPrimitiveImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsPrimitiveImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsPrimitiveImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsPrimitiveImpl : unit -&gt; bool" Usage="type.IsPrimitiveImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3954">W przypadku przesłonięcia w klasie pochodnej, implementuje <see cref="P:System.Type.IsPrimitive" /> właściwości i określa, czy <see cref="T:System.Type" /> jest jednym z typów pierwotnych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3954">When overridden in a derived class, implements the <see cref="P:System.Type.IsPrimitive" /> property and determines whether the <see cref="T:System.Type" /> is one of the primitive types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-3955">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> jest jednym z typów pierwotnych; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3955">
              <see langword="true" /> if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3956">Typy pierwotne są <xref:System.Boolean>, <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.Char>, <xref:System.Double>, i <xref:System.Single>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3956">The primitive types are <xref:System.Boolean>, <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.Char>, <xref:System.Double>, and <xref:System.Single>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3957">Poniższy przykład określa, czy dany typ jest typem pierwotnym i wyświetla wynik.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3957">The following example determines whether the given type is a primitive type and displays the result.</span></span>  
  
 [!code-cpp[Type_IsPrimitiveImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsPrimitiveImpl/CPP/type_isprimitiveimpl.cpp#1)]
 [!code-csharp[Type_IsPrimitiveImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsPrimitiveImpl/CS/type_isprimitiveimpl.cs#1)]
 [!code-vb[Type_IsPrimitiveImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsPrimitiveImpl/VB/type_isprimitiveimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.Byte" />
        <altmember cref="T:System.SByte" />
        <altmember cref="T:System.Int16" />
        <altmember cref="T:System.UInt16" />
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.UInt32" />
        <altmember cref="T:System.Int64" />
        <altmember cref="T:System.UInt64" />
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Double" />
        <altmember cref="T:System.Single" />
        <altmember cref="P:System.Type.IsPrimitive" />
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public bool IsPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPublic : bool" Usage="System.Type.IsPublic" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsPublic</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3958">Pobiera wartość wskazującą czy <see cref="T:System.Type" /> jest zadeklarowany jako publiczny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3958">Gets a value indicating whether the <see cref="T:System.Type" /> is declared public.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-3959">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> jest zadeklarowany jako publiczny i nie jest typem zagnieżdżonym; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3959">
              <see langword="true" /> if the <see cref="T:System.Type" /> is declared public and is not a nested type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3960">Nie należy używać z typów zagnieżdżonych. Użyj <xref:System.Type.IsNestedPublic%2A> zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3960">Do not use with nested types; use <xref:System.Type.IsNestedPublic%2A> instead.</span></span>  
  
 <span data-ttu-id="6cdc9-3961">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu ogólnego, właściwość ta zwraca `true`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3961">If the current <xref:System.Type> represents a type parameter of a generic type, this property returns `true`.</span></span>  
  
 <span data-ttu-id="6cdc9-3962"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> Wybiera atrybuty widoczności.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3962"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3963">Poniższy przykład tworzy wystąpienie `MyTestClass`, sprawdza, czy `IsPublic` właściwości i wyświetla wynik.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3963">The following example creates an instance of `MyTestClass`, checks for the `IsPublic` property, and displays the result.</span></span>  
  
 [!code-cpp[Type.IsPublic#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type.IsPublic/CPP/type_ispublic.cpp#1)]
 [!code-csharp[Type.IsPublic#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type.IsPublic/CS/type_ispublic.cs#1)]
 [!code-vb[Type.IsPublic#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type.IsPublic/VB/type_ispublic.vb#1)]  
  
 <span data-ttu-id="6cdc9-3964">Klasy zagnieżdżone, można zignorować w wynikach `IsPublic` i `IsNotPublic` i które należy zwrócić uwagę tylko wyniki <xref:System.Type.IsNestedPublic%2A> i <xref:System.Type.IsNestedPrivate%2A>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3964">For nested classes, ignore the results of `IsPublic` and `IsNotPublic` and pay attention only to the results of <xref:System.Type.IsNestedPublic%2A> and <xref:System.Type.IsNestedPrivate%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="public bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSealed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSealed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSealed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSealed : bool" Usage="System.Type.IsSealed" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsSealed</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3965">Pobiera wartość wskazującą czy <see cref="T:System.Type" /> jest zadeklarowany jako zapieczętowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3965">Gets a value indicating whether the <see cref="T:System.Type" /> is declared sealed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-3966">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> jest zadeklarowany jako sealed; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3966">
              <see langword="true" /> if the <see cref="T:System.Type" /> is declared sealed; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3967">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu ogólnego, właściwość ta zwraca zawsze `true`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3967">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-3968">Poniższy przykład tworzy wystąpienie `sealed` klasy sprawdza, czy `IsSealed` właściwości i wyświetla wynik.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3968">The following example creates an instance of a `sealed` class, checks for the `IsSealed` property, and displays the result.</span></span>  
  
 [!code-cpp[Type_IsSealed#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsSealed/CPP/type_issealed.cpp#1)]
 [!code-csharp[Type_IsSealed#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsSealed/CS/type_issealed.cs#1)]
 [!code-vb[Type_IsSealed#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsSealed/VB/type_issealed.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityCritical">
      <MemberSignature Language="C#" Value="public virtual bool IsSecurityCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityCritical" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSecurityCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSecurityCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityCritical { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecurityCritical : bool" Usage="System.Type.IsSecurityCritical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3969">Pobiera wartość wskazującą, czy bieżący typ jest krytyczne dla bezpieczeństwa lub zabezpieczenia bezpieczny krytyczny na bieżącym poziomie zaufania i dlatego mogą wykonywać krytyczne operacje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3969">Gets a value that indicates whether the current type is security-critical or security-safe-critical at the current trust level, and therefore can perform critical operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-3970">
            <see langword="true" /> w przypadku bieżącego typu zabezpieczenia krytyczny lub zabezpieczenia bezpieczny krytyczny bieżącym poziomie zaufania. <see langword="false" /> , gdy jest za przezroczysty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3970">
              <see langword="true" /> if the current type is security-critical or security-safe-critical at the current trust level; <see langword="false" /> if it is transparent.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3971"><xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, I <xref:System.Type.IsSecurityTransparent%2A> właściwości raportu poziom przezroczystości typu na jego bieżący poziom zaufania, zgodnie z ustaleniami środowisko uruchomieniowe języka wspólnego (CLR).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3971">The <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, and <xref:System.Type.IsSecurityTransparent%2A> properties report the transparency level of the type at its current trust level, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="6cdc9-3972">W poniższej tabeli przedstawiono kombinacje tych właściwości:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3972">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="6cdc9-3973">Poziom zabezpieczeń</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3973">Security level</span></span>|<span data-ttu-id="6cdc9-3974">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3974">IsSecurityCritical</span></span>|<span data-ttu-id="6cdc9-3975">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3975">IsSecuritySafeCritical</span></span>|<span data-ttu-id="6cdc9-3976">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3976">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="6cdc9-3977">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3977">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="6cdc9-3978">Bezpieczne krytyczne</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3978">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="6cdc9-3979">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3979">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="6cdc9-3980">Korzystanie z tych właściwości jest znacznie prostsze niż badanie adnotacje zabezpieczeń zestawu i jego typów, sprawdzania bieżącego poziomu zaufania i próby zduplikowania reguł w środowisku uruchomieniowym.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3980">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6cdc9-3981">Dla zestawów częściowego zaufania wartość tej właściwości zależy od bieżącego poziomu zaufania dla zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3981">For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</span></span> <span data-ttu-id="6cdc9-3982">Jeżeli zestaw jest ładowany do domeny aplikacji częściowo zaufanej (na przykład w domenie aplikacji w trybie piaskownicy), środowisko wykonawcze ignoruje adnotacje zabezpieczeń zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3982">If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="6cdc9-3983">Zestaw i wszystkie jego typy są traktowane jako przezroczyste.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3983">The assembly and all its types are treated as transparent.</span></span> <span data-ttu-id="6cdc9-3984">Środowisko wykonawcze zwraca uwagę na adnotacje zabezpieczeń zestawu częściowego zaufania tylko wtedy, gdy zestaw ten jest ładowany do w pełni zaufanej domeny aplikacji (na przykład, do domyślnej domeny aplikacji z aplikacji pulpitu).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3984">The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="6cdc9-3985">Z drugiej strony zaufany zestaw (czyli zestaw z silną nazwą zainstalowaną w globalnej pamięci podręcznej zestawów) zawsze jest ładowany z pełnym zaufaniem, bez względu na poziom zaufania domeny aplikacji, więc jego bieżący poziom zaufania zawsze jest w pełni zaufany.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3985">By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</span></span> <span data-ttu-id="6cdc9-3986">Aktualne poziomy zaufania zestawów i domen aplikacji można określić za pomocą <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> i <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3986">You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="6cdc9-3987">Aby uzyskać więcej informacji dotyczących odbicia i przejrzystości, zobacz [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3987">For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span> <span data-ttu-id="6cdc9-3988">Aby uzyskać informacje o przezroczystości, zobacz [zmiany zabezpieczeń](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3988">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsSecuritySafeCritical" />
        <altmember cref="P:System.Type.IsSecurityTransparent" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md">
          <span data-ttu-id="6cdc9-3989">Zagadnienia dotyczące zabezpieczeń dla odbicia</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3989">Security Considerations for Reflection</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/security/security-changes.md">
          <span data-ttu-id="6cdc9-3990">Zmiany zabezpieczeń w programie .NET Framework</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3990">Security Changes in the .NET Framework</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsSecuritySafeCritical">
      <MemberSignature Language="C#" Value="public virtual bool IsSecuritySafeCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecuritySafeCritical" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSecuritySafeCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSecuritySafeCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecuritySafeCritical { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecuritySafeCritical : bool" Usage="System.Type.IsSecuritySafeCritical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-3991">Pobiera wartość, która wskazuje, czy bieżący typ zabezpieczenia bezpieczny krytyczny bieżącym poziomie zaufania. oznacza to, czy go może wykonywać krytyczne operacje i może zostać oceniony przez kod przezroczysty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3991">Gets a value that indicates whether the current type is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-3992">
            <see langword="true" /> w przypadku bieżącego typu zabezpieczenia bezpieczny krytyczny bieżącym poziomie zaufania. <see langword="false" /> przypadku krytyczne dla bezpieczeństwa lub przezroczyste.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-3992">
              <see langword="true" /> if the current type is security-safe-critical at the current trust level; <see langword="false" /> if it is security-critical or transparent.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-3993"><xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, I <xref:System.Type.IsSecurityTransparent%2A> właściwości raportu poziom przezroczystości typu na jego bieżący poziom zaufania, zgodnie z ustaleniami środowisko uruchomieniowe języka wspólnego (CLR).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3993">The <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, and <xref:System.Type.IsSecurityTransparent%2A> properties report the transparency level of the type at its current trust level, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="6cdc9-3994">W poniższej tabeli przedstawiono kombinacje tych właściwości:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3994">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="6cdc9-3995">Poziom zabezpieczeń</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3995">Security level</span></span>|<span data-ttu-id="6cdc9-3996">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3996">IsSecurityCritical</span></span>|<span data-ttu-id="6cdc9-3997">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3997">IsSecuritySafeCritical</span></span>|<span data-ttu-id="6cdc9-3998">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3998">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="6cdc9-3999">Krytyczny</span><span class="sxs-lookup"><span data-stu-id="6cdc9-3999">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="6cdc9-4000">Bezpieczne krytyczne</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4000">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="6cdc9-4001">Przezroczyste</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4001">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="6cdc9-4002">Korzystanie z tych właściwości jest znacznie prostsze niż badanie adnotacje zabezpieczeń zestawu i jego typów, sprawdzania bieżącego poziomu zaufania i próby zduplikowania reguł w środowisku uruchomieniowym.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4002">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6cdc9-4003">Dla zestawów częściowego zaufania wartość tej właściwości zależy od bieżącego poziomu zaufania dla zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4003">For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</span></span> <span data-ttu-id="6cdc9-4004">Jeżeli zestaw jest ładowany do domeny aplikacji częściowo zaufanej (na przykład w domenie aplikacji w trybie piaskownicy), środowisko wykonawcze ignoruje adnotacje zabezpieczeń zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4004">If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="6cdc9-4005">Zestaw i wszystkie jego typy są traktowane jako przezroczyste.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4005">The assembly and all its types are treated as transparent.</span></span> <span data-ttu-id="6cdc9-4006">Środowisko wykonawcze zwraca uwagę na adnotacje zabezpieczeń zestawu częściowego zaufania tylko wtedy, gdy zestaw ten jest ładowany do w pełni zaufanej domeny aplikacji (na przykład, do domyślnej domeny aplikacji z aplikacji pulpitu).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4006">The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="6cdc9-4007">Z drugiej strony zaufany zestaw (czyli zestaw z silną nazwą zainstalowaną w globalnej pamięci podręcznej zestawów) zawsze jest ładowany z pełnym zaufaniem, bez względu na poziom zaufania domeny aplikacji, więc jego bieżący poziom zaufania zawsze jest w pełni zaufany.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4007">By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</span></span> <span data-ttu-id="6cdc9-4008">Aktualne poziomy zaufania zestawów i domen aplikacji można określić za pomocą <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> i <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4008">You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="6cdc9-4009">Aby uzyskać więcej informacji dotyczących odbicia i przejrzystości, zobacz [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4009">For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span> <span data-ttu-id="6cdc9-4010">Aby uzyskać informacje o przezroczystości, zobacz [zmiany zabezpieczeń](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4010">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsSecurityCritical" />
        <altmember cref="P:System.Type.IsSecurityTransparent" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md">
          <span data-ttu-id="6cdc9-4011">Zagadnienia dotyczące zabezpieczeń dla odbicia</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4011">Security Considerations for Reflection</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/security/security-changes.md">
          <span data-ttu-id="6cdc9-4012">Zmiany zabezpieczeń w programie .NET Framework</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4012">Security Changes in the .NET Framework</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsSecurityTransparent">
      <MemberSignature Language="C#" Value="public virtual bool IsSecurityTransparent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityTransparent" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSecurityTransparent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSecurityTransparent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityTransparent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecurityTransparent : bool" Usage="System.Type.IsSecurityTransparent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-4013">Pobiera wartość wskazującą, czy bieżący typ jest niewidoczne na bieżącym poziomie zaufania i dlatego nie można wykonać operacji krytycznych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4013">Gets a value that indicates whether the current type is transparent at the current trust level, and therefore cannot perform critical operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-4014">
            <see langword="true" /> Jeśli typ jest przezroczyste dla zabezpieczeń na bieżącym poziomie zaufania; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4014">
              <see langword="true" /> if the type is security-transparent at the current trust level; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-4015">Jeśli ta właściwość zwraca `true`, <xref:System.Type.IsSecurityCritical%2A> i <xref:System.Type.IsSecuritySafeCritical%2A> return właściwości `false`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4015">If this property returns `true`, the <xref:System.Type.IsSecurityCritical%2A> and <xref:System.Type.IsSecuritySafeCritical%2A> properties return `false`.</span></span>  
  
 <span data-ttu-id="6cdc9-4016"><xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, I <xref:System.Type.IsSecurityTransparent%2A> właściwości raportu poziom przezroczystości typu na jego bieżący poziom zaufania, zgodnie z ustaleniami środowisko uruchomieniowe języka wspólnego (CLR).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4016">The <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, and <xref:System.Type.IsSecurityTransparent%2A> properties report the transparency level of the type at its current trust level, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="6cdc9-4017">Korzystanie z tych właściwości jest znacznie prostsze niż badanie adnotacje zabezpieczeń zestawu i jego typów, sprawdzania bieżącego poziomu zaufania i próby zduplikowania reguł w środowisku uruchomieniowym.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4017">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6cdc9-4018">Dla zestawów częściowego zaufania wartość tej właściwości zależy od bieżącego poziomu zaufania dla zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4018">For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</span></span> <span data-ttu-id="6cdc9-4019">Jeżeli zestaw jest ładowany do domeny aplikacji częściowo zaufanej (na przykład w domenie aplikacji w trybie piaskownicy), środowisko wykonawcze ignoruje adnotacje zabezpieczeń zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4019">If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="6cdc9-4020">Zestaw i wszystkie jego typy są traktowane jako przezroczyste.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4020">The assembly and all its types are treated as transparent.</span></span> <span data-ttu-id="6cdc9-4021">Środowisko wykonawcze zwraca uwagę na adnotacje zabezpieczeń zestawu częściowego zaufania tylko wtedy, gdy zestaw ten jest ładowany do w pełni zaufanej domeny aplikacji (na przykład, do domyślnej domeny aplikacji z aplikacji pulpitu).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4021">The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="6cdc9-4022">Z drugiej strony zaufany zestaw (czyli zestaw z silną nazwą zainstalowaną w globalnej pamięci podręcznej zestawów) zawsze jest ładowany z pełnym zaufaniem, bez względu na poziom zaufania domeny aplikacji, więc jego bieżący poziom zaufania zawsze jest w pełni zaufany.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4022">By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</span></span> <span data-ttu-id="6cdc9-4023">Aktualne poziomy zaufania zestawów i domen aplikacji można określić za pomocą <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> i <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4023">You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="6cdc9-4024">Aby uzyskać więcej informacji dotyczących odbicia i przejrzystości, zobacz [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4024">For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span> <span data-ttu-id="6cdc9-4025">Aby uzyskać informacje o przezroczystości, zobacz [zmiany zabezpieczeń](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4025">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsSecurityCritical" />
        <altmember cref="P:System.Type.IsSecuritySafeCritical" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md">
          <span data-ttu-id="6cdc9-4026">Zagadnienia dotyczące zabezpieczeń dla odbicia</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4026">Security Considerations for Reflection</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/security/security-changes.md">
          <span data-ttu-id="6cdc9-4027">Zmiany zabezpieczeń w programie .NET Framework</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4027">Security Changes in the .NET Framework</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsSerializable">
      <MemberSignature Language="C#" Value="public virtual bool IsSerializable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSerializable" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSerializable" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSerializable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSerializable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSerializable : bool" Usage="System.Type.IsSerializable" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsSerializable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-4028">Pobiera wartość wskazującą czy <see cref="T:System.Type" /> jest możliwy do serializacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4028">Gets a value indicating whether the <see cref="T:System.Type" /> is serializable.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-4029">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> jest możliwy do serializacji; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4029">
              <see langword="true" /> if the <see cref="T:System.Type" /> is serializable; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 
<span data-ttu-id="6cdc9-4030">Typy, które są zdefiniowane w programie .NET Standard nie są oznaczone <xref:System.SerializableAttribute>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4030">Types that are defined in the .NET Standard are not marked with <xref:System.SerializableAttribute>.</span></span> <span data-ttu-id="6cdc9-4031">Zamiast tego każda implementacja .NET określa, czy typ jest możliwy do serializacji.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4031">Instead, each .NET implementation determines whether a type is serializable.</span></span> <span data-ttu-id="6cdc9-4032">W czasie wykonywania, można użyć <xref:System.Type.IsSerializable%2A> właściwości w celu określenia, czy tę implementację obsługuje serializacji wystąpienia tego typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4032">At run time, you can use the <xref:System.Type.IsSerializable%2A> property to determine whether that implementation supports serialization of an instance of the type.</span></span> <span data-ttu-id="6cdc9-4033">Aby uzyskać więcej informacji i obejrzeć przykład, zobacz [sposobu ustalenia, czy obiekt standardowy .NET jest możliwy do serializacji](~/docs/standard/serialization/how-to-determine-if-netstandard-object-is-serializable.md).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4033">For more information and an example, see [How to determine if a .NET Standard object is serializable](~/docs/standard/serialization/how-to-determine-if-netstandard-object-is-serializable.md).</span></span>
  
 <span data-ttu-id="6cdc9-4034">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, właściwość ta ma zastosowanie do definicji typu ogólnego, z którego skonstruowano.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4034">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="6cdc9-4035">Na przykład jeśli bieżący <xref:System.Type> reprezentuje `MyGenericType<int>` (`MyGenericType(Of Integer)` w języku Visual Basic), wartość tej właściwości jest określana przez `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4035">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="6cdc9-4036">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, właściwość ta zwraca zawsze `false`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4036">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-4037">Poniższy przykład tworzy wystąpienie `MyTestClass` klasy, ustawia atrybut [Serializable] i sprawdza `IsSerializable` właściwość `true` lub `false`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4037">The following example creates an instance of `MyTestClass` class, sets the [Serializable] attribute, and checks the `IsSerializable` property for `true` or `false`.</span></span>  
  
 [!code-cpp[Type_IsSerializable#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsSerializable/CPP/type_isserializable.cpp#1)]
 [!code-csharp[Type_IsSerializable#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsSerializable/CS/type_isserializable.cs#1)]
 [!code-vb[Type_IsSerializable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsSerializable/VB/type_isserializable.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
      </Docs>
    </Member>
    <Member MemberName="IsSignatureType">
      <MemberSignature Language="C#" Value="public virtual bool IsSignatureType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSignatureType" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSignatureType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSignatureType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSignatureType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSignatureType : bool" Usage="System.Type.IsSignatureType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSpecialName">
      <MemberSignature Language="C#" Value="public bool IsSpecialName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSpecialName" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSpecialName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSpecialName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSpecialName { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSpecialName : bool" Usage="System.Type.IsSpecialName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsSpecialName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-4038">Pobiera wartość wskazującą, czy typ ma nazwę, która wymaga specjalnej obsługi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4038">Gets a value indicating whether the type has a name that requires special handling.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-4039">
            <see langword="true" /> Jeśli typ ma nazwę, która wymaga specjalnej obsługi; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4039">
              <see langword="true" /> if the type has a name that requires special handling; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-4040">Nazwy, które zaczynają się od lub zawierać znaku podkreślenia (_), metod dostępu do właściwości i metod przeciążenia operatora to przykłady typów, które mogą wymagać specjalnego traktowania przez niektóre kompilatory.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4040">Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of types that might require special treatment by some compilers.</span></span>  
  
 <span data-ttu-id="6cdc9-4041">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, właściwość ta ma zastosowanie do definicji typu ogólnego, z którego skonstruowano.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4041">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="6cdc9-4042">Na przykład jeśli bieżący <xref:System.Type> reprezentuje `MyGenericType<int>` (`MyGenericType(Of Integer)` w języku Visual Basic), wartość tej właściwości jest określana przez `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4042">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="6cdc9-4043">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, właściwość ta zwraca zawsze `false`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4043">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsSubclassOf">
      <MemberSignature Language="C#" Value="public virtual bool IsSubclassOf (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubclassOf(class System.Type c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsSubclassOf(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsSubclassOf (c As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSubclassOf(Type ^ c);" />
      <MemberSignature Language="F#" Value="abstract member IsSubclassOf : Type -&gt; bool&#xA;override this.IsSubclassOf : Type -&gt; bool" Usage="type.IsSubclassOf c" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.IsSubclassOf(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="6cdc9-4044">Typ do porównania z bieżącym typem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4044">The type to compare with the current type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-4045">Określa, czy bieżący <see cref="T:System.Type" /> pochodzi z określonego <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4045">Determines whether the current <see cref="T:System.Type" /> derives from the specified <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-4046">
            <see langword="true" /> Jeśli bieżący <see langword="Type" /> pochodzi od klasy <paramref name="c" />; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4046">
              <see langword="true" /> if the current <see langword="Type" /> derives from <paramref name="c" />; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="6cdc9-4047">Ta metoda zwraca też wartość <see langword="false" /> Jeśli <paramref name="c" /> i bieżący <see langword="Type" /> są takie same.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4047">This method also returns <see langword="false" /> if <paramref name="c" /> and the current <see langword="Type" /> are equal.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-4048">Możesz wywołać <xref:System.Type.IsSubclassOf%2A> metodę, aby określić jedną z następujących czynności:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4048">You can call the <xref:System.Type.IsSubclassOf%2A> method to determine any of the following:</span></span>  
  
-   <span data-ttu-id="6cdc9-4049">Czy jedna klasa pochodzi z innego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4049">Whether one class derives from another.</span></span>  
  
-   <span data-ttu-id="6cdc9-4050">Czy typ pochodzi od klasy <xref:System.ValueType>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4050">Whether a type derives from <xref:System.ValueType>.</span></span> <span data-ttu-id="6cdc9-4051">Jednak <xref:System.Type.IsValueType%2A> jest bardziej efektywne sposobem ustalenia, czy typ jest typem wartości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4051">However, the <xref:System.Type.IsValueType%2A> is a more efficient way to determine whether a type is a value type.</span></span>  
  
-   <span data-ttu-id="6cdc9-4052">Czy typ pochodzi od klasy <xref:System.Enum>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4052">Whether a type derives from <xref:System.Enum>.</span></span> <span data-ttu-id="6cdc9-4053">Jednak <xref:System.Type.IsEnum%2A> metoda jest bardziej efektywne sposobem ustalenia, czy typ jest wyliczeniem.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4053">However, the <xref:System.Type.IsEnum%2A> method is a more efficient way to determine whether a type is an enumeration.</span></span>  
  
-   <span data-ttu-id="6cdc9-4054">Czy typ jest delegatem, oznacza to, czy wywodzi się z poziomu <xref:System.Delegate> lub <xref:System.MulticastDelegate>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4054">Whether a type is a delegate, that is, whether it derives from either <xref:System.Delegate> or <xref:System.MulticastDelegate>.</span></span>  
  
 <span data-ttu-id="6cdc9-4055"><xref:System.Type.IsSubclassOf%2A> Metoda nie może służyć do określenia, czy interfejs pochodzi z innego interfejsu lub tego, czy klasa implementuje interfejs.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4055">The <xref:System.Type.IsSubclassOf%2A> method cannot be used to determine whether an interface derives from another interface, or whether a class implements an interface.</span></span> <span data-ttu-id="6cdc9-4056">Użyj <xref:System.Type.IsAssignableFrom%2A> metody, w tym celu, co ilustruje poniższy przykład.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4056">Use the <xref:System.Type.IsAssignableFrom%2A> method for that purpose, as the following example shows.</span></span>  
  
 [!code-csharp[System.Type.IsSubclassOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.issubclassof/cs/issubclassof_interface1.cs#1)]
 [!code-vb[System.Type.IsSubclassOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.issubclassof/vb/issubclassof_interface1.vb#1)]  
  
 <span data-ttu-id="6cdc9-4057">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, pochodzi z jej ograniczenia klasy lub <xref:System.Object?displayProperty=nameWithType> Jeśli go nie ma ograniczenia klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4057">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, it derives from its class constraint or from <xref:System.Object?displayProperty=nameWithType> if it has no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-4058">Z wyjątkiem w przypadku korzystania z interfejsów, <xref:System.Type.IsSubclassOf%2A> jest przeciwny z <xref:System.Type.IsAssignableFrom%2A>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4058">Except when used with interfaces, <xref:System.Type.IsSubclassOf%2A> is the converse of <xref:System.Type.IsAssignableFrom%2A>.</span></span> <span data-ttu-id="6cdc9-4059">Oznacza to jeśli `t1.IsSubclassOf(t2)` jest `true`, następnie `t2.IsAssignableFrom(t1)` jest również `true`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4059">That is, if `t1.IsSubclassOf(t2)` is `true`, then `t2.IsAssignableFrom(t1)` is also `true`.</span></span>  
  
 <span data-ttu-id="6cdc9-4060">Metoda ta może być zastąpiona przez klasę pochodną.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4060">This method can be overridden by a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-4061">Poniższy przykład tworzy klasę o nazwie `Class1` i Klasa pochodna o nazwie `DerivedC1`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4061">The following example creates a class named `Class1` and a derived class named `DerivedC1`.</span></span> <span data-ttu-id="6cdc9-4062">Wywołuje <xref:System.Type.IsSubclassOf%2A> metodę, aby pokazać, że `DerivedC1` jest podklasą `Class1`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4062">It calls the <xref:System.Type.IsSubclassOf%2A> method to show that `DerivedC1` is a subclass of `Class1`.</span></span>  
  
 [!code-csharp[TestIsSubclassOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestIsSubclassOf/CS/testissubclassof.cs#1)]
 [!code-vb[TestIsSubclassOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestIsSubclassOf/VB/testissubclassof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-4063">
            <paramref name="c" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4063">
              <paramref name="c" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Type.BaseType" />
      </Docs>
    </Member>
    <Member MemberName="IsSZArray">
      <MemberSignature Language="C#" Value="public virtual bool IsSZArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSZArray" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSZArray" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSZArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSZArray { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSZArray : bool" Usage="System.Type.IsSZArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTypeDefinition">
      <MemberSignature Language="C#" Value="public virtual bool IsTypeDefinition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTypeDefinition" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsTypeDefinition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsTypeDefinition { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsTypeDefinition : bool" Usage="System.Type.IsTypeDefinition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnicodeClass">
      <MemberSignature Language="C#" Value="public bool IsUnicodeClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUnicodeClass" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsUnicodeClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUnicodeClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUnicodeClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsUnicodeClass : bool" Usage="System.Type.IsUnicodeClass" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsUnicodeClass</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-4064">Pobiera wartość wskazującą czy ciąg formatu atrybut <see langword="UnicodeClass" /> wybrano <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4064">Gets a value indicating whether the string format attribute <see langword="UnicodeClass" /> is selected for the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-4065">
            <see langword="true" /> Jeśli ciąg formatu atrybut <see langword="UnicodeClass" /> wybrano <see cref="T:System.Type" />; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4065">
              <see langword="true" /> if the string format attribute <see langword="UnicodeClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-4066"><xref:System.Reflection.TypeAttributes.StringFormatMask> Służy do wybierania atrybuty format ciągu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4066">The <xref:System.Reflection.TypeAttributes.StringFormatMask> is used to select the string format attributes.</span></span> <span data-ttu-id="6cdc9-4067">Atrybuty formatu ciągu ulepszenia współdziałania, definiując, jak interpretować ciągów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4067">The string format attributes enhance interoperability by defining how strings should be interpreted.</span></span>  
  
 <span data-ttu-id="6cdc9-4068">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, właściwość ta ma zastosowanie do definicji typu ogólnego, z którego skonstruowano.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4068">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="6cdc9-4069">Na przykład jeśli bieżący <xref:System.Type> reprezentuje `MyGenericType<int>` (`MyGenericType(Of Integer)` w języku Visual Basic), wartość tej właściwości jest określana przez `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4069">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="6cdc9-4070">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, właściwość ta zwraca zawsze `false`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4070">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsAnsiClass" />
        <altmember cref="P:System.Type.IsAutoClass" />
      </Docs>
    </Member>
    <Member MemberName="IsValueType">
      <MemberSignature Language="C#" Value="public bool IsValueType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueType" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsValueType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValueType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValueType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValueType : bool" Usage="System.Type.IsValueType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsValueType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-4071">Pobiera wartość wskazującą czy <see cref="T:System.Type" /> jest typem wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4071">Gets a value indicating whether the <see cref="T:System.Type" /> is a value type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-4072">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> jest typem wartości; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4072">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a value type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-4073">Typy wartości są typy, które są reprezentowane jako sekwencje bitów; typy wartości nie są klas lub interfejsów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4073">Value types are types that are represented as sequences of bits; value types are not classes or interfaces.</span></span> <span data-ttu-id="6cdc9-4074">Typy wartości są określane jako "struktur" w niektórych językach programowania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4074">Value types are referred to as "structs" in some programming languages.</span></span> <span data-ttu-id="6cdc9-4075">Typy wyliczeniowe są w wyjątkowym przypadku okna typów wartości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4075">Enums are a special case of value types.</span></span>  
  
 <span data-ttu-id="6cdc9-4076">Ta właściwość zwraca `false` dla <xref:System.ValueType> klasy, ponieważ <xref:System.ValueType> nie jest typem wartości, sam.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4076">This property returns `false` for the <xref:System.ValueType> class, because <xref:System.ValueType> is not a value type itself.</span></span> <span data-ttu-id="6cdc9-4077">Jest klasą bazową dla wszystkich typów wartości, a w związku z tym dowolny typ wartości można przypisać do niej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4077">It is the base class for all value types, and therefore any value type can be assigned to it.</span></span> <span data-ttu-id="6cdc9-4078">To nie jest możliwe Jeśli <xref:System.ValueType> sam był typem wartości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4078">This would not be possible if <xref:System.ValueType> itself was a value type.</span></span> <span data-ttu-id="6cdc9-4079">Typy wartości jest ramce, gdy są one przypisane do pola typu <xref:System.ValueType>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4079">Value types are boxed when they are assigned to a field of type <xref:System.ValueType>.</span></span>  
  
 <span data-ttu-id="6cdc9-4080">Ta właściwość zwraca `true` wyliczenia, ale nie <xref:System.Enum> samego typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4080">This property returns `true` for enumerations, but not for the <xref:System.Enum> type itself.</span></span> <span data-ttu-id="6cdc9-4081">Aby uzyskać przykład demonstrujący ten problem, zobacz <xref:System.Type.IsEnum%2A>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4081">For an example that demonstrates this behavior, see <xref:System.Type.IsEnum%2A>.</span></span>  
  
 <span data-ttu-id="6cdc9-4082">Ta właściwość jest tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4082">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-4083">Poniższy przykład tworzy zmienną typu `MyEnum`, sprawdza, czy `IsValueType` właściwości i wyświetla wynik.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4083">The following example creates a variable of type `MyEnum`, checks for the `IsValueType` property, and displays the result.</span></span>  
  
 [!code-cpp[Type_IsValueType#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsValueType/CPP/type_isvaluetype.cpp#1)]
 [!code-csharp[Type_IsValueType#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsValueType/CS/type_isvaluetype.cs#1)]
 [!code-vb[Type_IsValueType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsValueType/VB/type_isvaluetype.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsClass" />
        <altmember cref="P:System.Type.IsInterface" />
        <altmember cref="T:System.ValueType" />
        <altmember cref="M:System.Type.IsValueTypeImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsValueTypeImpl">
      <MemberSignature Language="C#" Value="protected virtual bool IsValueTypeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsValueTypeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsValueTypeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsValueTypeImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsValueTypeImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsValueTypeImpl : unit -&gt; bool&#xA;override this.IsValueTypeImpl : unit -&gt; bool" Usage="type.IsValueTypeImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-4084">Implementuje <see cref="P:System.Type.IsValueType" /> właściwości i określa, czy <see cref="T:System.Type" /> typu wartości; oznacza to, że nie jest klasą lub interfejs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4084">Implements the <see cref="P:System.Type.IsValueType" /> property and determines whether the <see cref="T:System.Type" /> is a value type; that is, not a class or an interface.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-4085">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> jest typem wartości; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4085">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a value type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-4086">Ta metoda jest dostarczana, aby umożliwić implementowania systemów alternatywnego typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4086">This method is provided to enable the implementation of alternate type systems.</span></span> <span data-ttu-id="6cdc9-4087">Ogólnie nieużywanych w kodzie aplikacji.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4087">It is not generally used in application code.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsClass" />
        <altmember cref="P:System.Type.IsInterface" />
        <altmember cref="T:System.ValueType" />
        <altmember cref="P:System.Type.IsValueType" />
      </Docs>
    </Member>
    <Member MemberName="IsVariableBoundArray">
      <MemberSignature Language="C#" Value="public virtual bool IsVariableBoundArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVariableBoundArray" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsVariableBoundArray" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsVariableBoundArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsVariableBoundArray { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsVariableBoundArray : bool" Usage="System.Type.IsVariableBoundArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVisible" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsVisible" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVisible { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsVisible : bool" Usage="System.Type.IsVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-4088">Pobiera wartość wskazującą czy <see cref="T:System.Type" /> może zostać oceniony przez kod poza zestawem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4088">Gets a value indicating whether the <see cref="T:System.Type" /> can be accessed by code outside the assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-4089">
            <see langword="true" /> Jeśli bieżący <see cref="T:System.Type" /> jest typ publiczny lub publiczny zagnieżdżony typ taki sposób, że wszystkie typy otaczającej są publiczne; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4089">
              <see langword="true" /> if the current <see cref="T:System.Type" /> is a public type or a public nested type such that all the enclosing types are public; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-4090">Aby ustalić, czy typ jest częścią interfejsu publicznego zestaw składników, należy użyć tej właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4090">Use this property to determine whether a type is part of the public interface of a component assembly.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-4091">Poniższy przykład kodu sprawdza dwie klasy, tylko jeden z nich jest widoczna spoza zestawu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4091">The following code example tests two classes, only one of which is visible outside the assembly.</span></span>  
  
 [!code-cpp[System.Type.IsVisible#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsVisible/CPP/source.cpp#1)]
 [!code-csharp[System.Type.IsVisible#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsVisible/CS/source.cs#1)]
 [!code-vb[System.Type.IsVisible#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsVisible/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MakeArrayType">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-4092">Zwraca <see cref="T:System.Type" /> obiekt, który reprezentuje tablicę bieżącego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4092">Returns a <see cref="T:System.Type" /> object that represents an array of the current type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MakeArrayType">
      <MemberSignature Language="C#" Value="public virtual Type MakeArrayType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakeArrayType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeArrayType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakeArrayType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakeArrayType();" />
      <MemberSignature Language="F#" Value="abstract member MakeArrayType : unit -&gt; Type&#xA;override this.MakeArrayType : unit -&gt; Type" Usage="type.MakeArrayType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-4093">Zwraca <see cref="T:System.Type" /> obiektów reprezentująca tablicę jednowymiarową bieżącego typu z dolną granicę równą zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4093">Returns a <see cref="T:System.Type" /> object representing a one-dimensional array of the current type, with a lower bound of zero.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-4094">A <see cref="T:System.Type" /> obiektów reprezentująca tablicę jednowymiarową bieżącego typu z dolną granicę równą zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4094">A <see cref="T:System.Type" /> object representing a one-dimensional array of the current type, with a lower bound of zero.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-4095"><xref:System.Type.MakeArrayType%2A> Metoda zapewnia sposób wygenerować typy tablic z typów elementów, których są obliczane w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4095">The <xref:System.Type.MakeArrayType%2A> method provides a way to generate array types whose element types are computed at run time.</span></span>  
  
 <span data-ttu-id="6cdc9-4096">**Uwaga** środowiska uruchomieniowego języka wspólnego rozróżnia wektorów (oznacza to, że tablice jednowymiarowe, które są zawsze liczony od zera) i tablic wielowymiarowych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4096">**Note** The common language runtime makes a distinction between vectors (that is, one-dimensional arrays that are always zero-based) and multidimensional arrays.</span></span> <span data-ttu-id="6cdc9-4097">Wektor, który zawsze ma tylko jeden wymiar, nie jest taka sama jak tablicy wielowymiarowej, który ma miejsce tylko jeden wymiar.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4097">A vector, which always has only one dimension, is not the same as a multidimensional array that happens to have only one dimension.</span></span> <span data-ttu-id="6cdc9-4098">Tego przeciążenia metody należy używać tylko do utworzenia typy wektorów i jest jedynym sposobem, aby utworzyć typ wektora.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4098">This method overload can only be used to create vector types, and it is the only way to create a vector type.</span></span> <span data-ttu-id="6cdc9-4099">Użyj <xref:System.Type.MakeArrayType%28System.Int32%29> przeciążenia metody, aby utworzyć typy tablic wielowymiarowych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4099">Use the <xref:System.Type.MakeArrayType%28System.Int32%29> method overload to create multidimensional array types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-4100">Poniższy przykład kodu tworzy tablicę, `ref` (`ByRef` w języku Visual Basic) oraz typy wskaźników dla `Test` klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4100">The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.</span></span>  
  
 [!code-cpp[System.Type.MakeXxxType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CPP/source.cpp#1)]
 [!code-csharp[System.Type.MakeXxxType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CS/source.cs#1)]
 [!code-vb[System.Type.MakeXxxType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.MakeXxxType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="6cdc9-4101">Wywoływana metoda nie jest obsługiwana w klasie bazowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4101">The invoked method is not supported in the base class.</span>
          </span>
          <span data-ttu-id="6cdc9-4102">Klasy pochodne muszą zapewniać implementację.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4102">Derived classes must provide an implementation.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="6cdc9-4103">Bieżącym typem jest <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4103">The current type is <see cref="T:System.TypedReference" />.</span>
          </span>
          <span data-ttu-id="6cdc9-4104">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4104">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-4105">Bieżącym typem jest <see langword="ByRef" /> typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4105">The current type is a <see langword="ByRef" /> type.</span>
          </span>
          <span data-ttu-id="6cdc9-4106">Oznacza to, że <see cref="P:System.Type.IsByRef" /> zwraca <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4106">That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.MakeByRefType" />
        <altmember cref="M:System.Type.MakePointerType" />
      </Docs>
    </Member>
    <Member MemberName="MakeArrayType">
      <MemberSignature Language="C#" Value="public virtual Type MakeArrayType (int rank);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakeArrayType(int32 rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeArrayType(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakeArrayType (rank As Integer) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakeArrayType(int rank);" />
      <MemberSignature Language="F#" Value="abstract member MakeArrayType : int -&gt; Type&#xA;override this.MakeArrayType : int -&gt; Type" Usage="type.MakeArrayType rank" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rank">
          <span data-ttu-id="6cdc9-4107">Liczba wymiarów tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4107">The number of dimensions for the array.</span>
          </span>
          <span data-ttu-id="6cdc9-4108">Ta liczba musi być mniejsza lub równa 32.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4108">This number must be less than or equal to 32.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-4109">Zwraca <see cref="T:System.Type" /> obiekt reprezentujący bieżącego typu, o określoną liczbę wymiarów tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4109">Returns a <see cref="T:System.Type" /> object representing an array of the current type, with the specified number of dimensions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-4110">Obiekt reprezentujący bieżącego typu, o określoną liczbę wymiarów tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4110">An object representing an array of the current type, with the specified number of dimensions.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-4111"><xref:System.Type.MakeArrayType%2A> Metoda zapewnia sposób wygenerować typy tablic z typów elementów, których są obliczane w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4111">The <xref:System.Type.MakeArrayType%2A> method provides a way to generate array types whose element types are computed at run time.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-4112">Środowisko uruchomieniowe języka wspólnego rozróżnia wektorów (oznacza to, że tablice jednowymiarowe, które są zawsze liczony od zera) i tablic wielowymiarowych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4112">The common language runtime makes a distinction between vectors (that is, one-dimensional arrays that are always zero-based) and multidimensional arrays.</span></span> <span data-ttu-id="6cdc9-4113">Wektor, który zawsze ma tylko jeden wymiar, nie jest taka sama jak tablicy wielowymiarowej, który ma miejsce tylko jeden wymiar.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4113">A vector, which always has only one dimension, is not the same as a multidimensional array that happens to have only one dimension.</span></span> <span data-ttu-id="6cdc9-4114">Nie można użyć tego przeciążenia metody, aby utworzyć typ wektora; Jeśli `rank` wynosi 1, tego przeciążenia metody zwraca typ tablicy wielowymiarowej, która ma jeden wymiar.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4114">You cannot use this method overload to create a vector type; if `rank` is 1, this method overload returns a multidimensional array type that happens to have one dimension.</span></span> <span data-ttu-id="6cdc9-4115">Użyj <xref:System.Type.MakeArrayType> przeciążenia metody, aby utworzyć typy wektorów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4115">Use the <xref:System.Type.MakeArrayType> method overload to create vector types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-4116">Poniższy przykład kodu tworzy tablicę, `ref` (`ByRef` w języku Visual Basic) oraz typy wskaźników dla `Test` klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4116">The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.</span></span>  
  
 [!code-cpp[System.Type.MakeXxxType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CPP/source.cpp#1)]
 [!code-csharp[System.Type.MakeXxxType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CS/source.cs#1)]
 [!code-vb[System.Type.MakeXxxType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.MakeXxxType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">
          <span data-ttu-id="6cdc9-4117">
            <paramref name="rank" /> jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4117">
              <paramref name="rank" /> is invalid.</span>
          </span>
          <span data-ttu-id="6cdc9-4118">Na przykład 0 ani ujemna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4118">For example, 0 or negative.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="6cdc9-4119">Wywoływana metoda nie jest obsługiwana w klasie bazowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4119">The invoked method is not supported in the base class.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="6cdc9-4120">Bieżącym typem jest <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4120">The current type is <see cref="T:System.TypedReference" />.</span>
          </span>
          <span data-ttu-id="6cdc9-4121">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4121">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-4122">Bieżącym typem jest <see langword="ByRef" /> typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4122">The current type is a <see langword="ByRef" /> type.</span>
          </span>
          <span data-ttu-id="6cdc9-4123">Oznacza to, że <see cref="P:System.Type.IsByRef" /> zwraca <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4123">That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
          <span data-ttu-id="6cdc9-4124">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4124">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-4125">
            <paramref name="rank" /> jest większe niż 32.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4125">
              <paramref name="rank" /> is greater than 32.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.MakeByRefType" />
        <altmember cref="M:System.Type.MakePointerType" />
      </Docs>
    </Member>
    <Member MemberName="MakeByRefType">
      <MemberSignature Language="C#" Value="public virtual Type MakeByRefType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakeByRefType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeByRefType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakeByRefType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakeByRefType();" />
      <MemberSignature Language="F#" Value="abstract member MakeByRefType : unit -&gt; Type&#xA;override this.MakeByRefType : unit -&gt; Type" Usage="type.MakeByRefType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-4126">Zwraca <see cref="T:System.Type" /> obiekt, który reprezentuje bieżący typ, gdy dane są przekazywane jako <see langword="ref" /> parametru (<see langword="ByRef" /> parametru w języku Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4126">Returns a <see cref="T:System.Type" /> object that represents the current type when passed as a <see langword="ref" /> parameter (<see langword="ByRef" /> parameter in Visual Basic).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-4127">A <see cref="T:System.Type" /> obiekt, który reprezentuje bieżący typ, gdy dane są przekazywane jako <see langword="ref" /> parametru (<see langword="ByRef" /> parametru w języku Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4127">A <see cref="T:System.Type" /> object that represents the current type when passed as a <see langword="ref" /> parameter (<see langword="ByRef" /> parameter in Visual Basic).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-4128"><xref:System.Type.MakeByRefType%2A> Metoda zapewnia sposób generowania `ref` typów (`ByRef` w języku Visual Basic) dla parametru listy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4128">The <xref:System.Type.MakeByRefType%2A> method provides a way to generate `ref` types (`ByRef` in Visual Basic) for parameter lists.</span></span>  
  
 <span data-ttu-id="6cdc9-4129">Przy użyciu składni języka Microsoft intermediate language (MSIL), jeśli bieżący <xref:System.Type> obiekt reprezentuje <xref:System.Int32>, Metoda ta zwraca <xref:System.Type> obiekt reprezentujący `Int32&`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4129">Using the syntax of Microsoft intermediate language (MSIL), if the current <xref:System.Type> object represents <xref:System.Int32>, this method returns a <xref:System.Type> object representing `Int32&`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-4130">Poniższy przykład kodu tworzy tablicę, `ref` (`ByRef` w języku Visual Basic) oraz typy wskaźników dla `Test` klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4130">The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.</span></span>  
  
 [!code-cpp[System.Type.MakeXxxType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CPP/source.cpp#1)]
 [!code-csharp[System.Type.MakeXxxType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CS/source.cs#1)]
 [!code-vb[System.Type.MakeXxxType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.MakeXxxType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="6cdc9-4131">Wywoływana metoda nie jest obsługiwana w klasie bazowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4131">The invoked method is not supported in the base class.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="6cdc9-4132">Bieżącym typem jest <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4132">The current type is <see cref="T:System.TypedReference" />.</span>
          </span>
          <span data-ttu-id="6cdc9-4133">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4133">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-4134">Bieżącym typem jest <see langword="ByRef" /> typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4134">The current type is a <see langword="ByRef" /> type.</span>
          </span>
          <span data-ttu-id="6cdc9-4135">Oznacza to, że <see cref="P:System.Type.IsByRef" /> zwraca <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4135">That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.MakeArrayType" />
        <altmember cref="M:System.Type.MakePointerType" />
      </Docs>
    </Member>
    <Member MemberName="MakeGenericMethodParameter">
      <MemberSignature Language="C#" Value="public static Type MakeGenericMethodParameter (int position);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type MakeGenericMethodParameter(int32 position) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeGenericMethodParameter(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeGenericMethodParameter (position As Integer) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ MakeGenericMethodParameter(int position);" />
      <MemberSignature Language="F#" Value="static member MakeGenericMethodParameter : int -&gt; Type" Usage="System.Type.MakeGenericMethodParameter position" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="position">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeGenericType">
      <MemberSignature Language="C#" Value="public virtual Type MakeGenericType (params Type[] typeArguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakeGenericType(class System.Type[] typeArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeGenericType(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakeGenericType (ParamArray typeArguments As Type()) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakeGenericType(... cli::array &lt;Type ^&gt; ^ typeArguments);" />
      <MemberSignature Language="F#" Value="abstract member MakeGenericType : Type[] -&gt; Type&#xA;override this.MakeGenericType : Type[] -&gt; Type" Usage="type.MakeGenericType typeArguments" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArguments" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArguments">
          <span data-ttu-id="6cdc9-4136">Tablica typów do podstawienia dla parametrów typu bieżącego typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4136">An array of types to be substituted for the type parameters of the current generic type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-4137">Zastępuje elementy tablicy, rodzajów bieżącej definicji typu ogólnego dla parametrów typu i zwraca <see cref="T:System.Type" /> obiekt reprezentujący wynikowy tworzony typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4137">Substitutes the elements of an array of types for the type parameters of the current generic type definition and returns a <see cref="T:System.Type" /> object representing the resulting constructed type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-4138">A <see cref="T:System.Type" /> reprezentuje zbudowany typ sformułowany, zastępując elementy <paramref name="typeArguments" /> dla parametrów typu bieżącego typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4138">A <see cref="T:System.Type" /> representing the constructed type formed by substituting the elements of <paramref name="typeArguments" /> for the type parameters of the current generic type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-4139"><xref:System.Type.MakeGenericType%2A> Metoda umożliwia pisanie kodu, który przypisuje określone typy parametrów typu w definicji typu ogólnego, co powoduje utworzenie <xref:System.Type> obiekt, który reprezentuje zbudowany określonego typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4139">The <xref:System.Type.MakeGenericType%2A> method allows you to write code that assigns specific types to the type parameters of a generic type definition, thus creating a <xref:System.Type> object that represents a particular constructed type.</span></span> <span data-ttu-id="6cdc9-4140">Możesz użyć tej funkcji <xref:System.Type> obiektu do utworzenia wystąpienia środowiska wykonawczego skonstruowanego typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4140">You can use this <xref:System.Type> object to create run-time instances of the constructed type.</span></span>  
  
 <span data-ttu-id="6cdc9-4141">Typy są konstruowane przy użyciu <xref:System.Type.MakeGenericType%2A> może być otwarty, oznacza to, że niektóre z ich argumentami typu może być otaczającej metody rodzajowe i typy parametrów typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4141">Types constructed with <xref:System.Type.MakeGenericType%2A> can be open, that is, some of their type arguments can be type parameters of enclosing generic methods or types.</span></span> <span data-ttu-id="6cdc9-4142">Można na przykład takie Otwórz typy utworzone podczas emitowanie dynamicznych zestawów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4142">You might use such open constructed types when you emit dynamic assemblies.</span></span> <span data-ttu-id="6cdc9-4143">Rozważmy na przykład klasy `Base` i `Derived` w poniższym kodzie.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4143">For example, consider the classes `Base` and `Derived` in the following code.</span></span>  
  
 [!code-cpp[System.Type.MakeGenericType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.makegenerictype/cpp/remarks.cpp#1)]
 [!code-csharp[System.Type.MakeGenericType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.makegenerictype/cs/remarks.cs#1)]
 [!code-vb[System.Type.MakeGenericType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.makegenerictype/vb/remarks.vb#1)]  
  
 <span data-ttu-id="6cdc9-4144">Aby wygenerować `Derived` w zestawie dynamicznym, należy go utworzyć jego typ podstawowy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4144">To generate `Derived` in a dynamic assembly, it is necessary to construct its base type.</span></span> <span data-ttu-id="6cdc9-4145">Aby to zrobić, należy wywołać <xref:System.Type.MakeGenericType%2A> metody <xref:System.Type> obiekt reprezentujący klasę `Base`, za pomocą argumentów typu rodzajowego <xref:System.Int32> i parametr typu `V` z `Derived`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4145">To do this, call the <xref:System.Type.MakeGenericType%2A> method on a <xref:System.Type> object representing the class `Base`, using the generic type arguments <xref:System.Int32> and the type parameter `V` from `Derived`.</span></span> <span data-ttu-id="6cdc9-4146">Ponieważ typy i parametry typu ogólnego są reprezentowane przez <xref:System.Type> obiektów, oba te elementy tablicy mogą być przekazywane do <xref:System.Type.MakeGenericType%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4146">Because types and generic type parameters are both represented by <xref:System.Type> objects, an array containing both can be passed to the <xref:System.Type.MakeGenericType%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-4147">Skonstruowany typ takich jak `Base<int, V>` jest przydatne w przypadku gdy emitowanie kodu, ale nie można wywołać <xref:System.Type.MakeGenericType%2A> metody dla tego typu, ponieważ nie jest definicja typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4147">A constructed type such as `Base<int, V>` is useful when emitting code, but you cannot call the <xref:System.Type.MakeGenericType%2A> method on this type because it is not a generic type definition.</span></span> <span data-ttu-id="6cdc9-4148">Aby utworzyć zamknięte skonstruowanego typu, który może być utworzone, należy najpierw wywołać <xref:System.Type.GetGenericTypeDefinition%2A> metodę, aby uzyskać <xref:System.Type> obiekt reprezentujący definicji typu ogólnego, a następnie wywołać <xref:System.Type.MakeGenericType%2A> z argumentami odpowiedniego typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4148">To create a closed constructed type that can be instantiated, first call the <xref:System.Type.GetGenericTypeDefinition%2A> method to get a <xref:System.Type> object representing the generic type definition and then call <xref:System.Type.MakeGenericType%2A> with the desired type arguments.</span></span>  
  
 <span data-ttu-id="6cdc9-4149"><xref:System.Type> Obiektu zwróconego przez <xref:System.Type.MakeGenericType%2A> jest taka sama jak <xref:System.Type> można uzyskać przez wywołanie <xref:System.Object.GetType%2A> metody wynikowy tworzony typ, lub <xref:System.Object.GetType%2A> metoda dowolnego skonstruowany typ, który został utworzony z tej samej ogólny Definicja typu przy użyciu tych samych argumentów typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4149">The <xref:System.Type> object returned by <xref:System.Type.MakeGenericType%2A> is the same as the <xref:System.Type> obtained by calling the <xref:System.Object.GetType%2A> method of the resulting constructed type, or the <xref:System.Object.GetType%2A> method of any constructed type that was created from the same generic type definition using the same type arguments.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6cdc9-4150">Tablica typów ogólnych sam nie jest typem ogólnym.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4150">An array of generic types is not itself a generic type.</span></span> <span data-ttu-id="6cdc9-4151">Nie można wywołać <xref:System.Type.MakeGenericType%2A> na tablicy wpisz na przykład `C<T>[]` (`Dim ac() As C(Of T)` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4151">You cannot call <xref:System.Type.MakeGenericType%2A> on an array type such as `C<T>[]` (`Dim ac() As C(Of T)` in Visual Basic).</span></span> <span data-ttu-id="6cdc9-4152">Do konstruowania zamknięty typ ogólny z `C<T>[]`, wywołaj <xref:System.Type.GetElementType%2A> uzyskać definicji typu ogólnego `C<T>`; wywołania <xref:System.Type.MakeGenericType%2A> w definicji typu ogólnego do utworzenia skonstruowanego typu; i na koniec wywołania <xref:System.Type.MakeArrayType%2A> metody skonstruowany typ do utworzenia typu tablicy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4152">To construct a closed generic type from `C<T>[]`, call <xref:System.Type.GetElementType%2A> to obtain the generic type definition `C<T>`; call <xref:System.Type.MakeGenericType%2A> on the generic type definition to create the constructed type; and finally call the <xref:System.Type.MakeArrayType%2A> method on the constructed type to create the array type.</span></span> <span data-ttu-id="6cdc9-4153">To samo dotyczy typów wskaźnika i `ref` typów (`ByRef` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4153">The same is true of pointer types and `ref` types (`ByRef` in Visual Basic).</span></span>  
  
 <span data-ttu-id="6cdc9-4154">Aby uzyskać listę niezmiennych warunków dla terminów używanych w odbiciu rodzajowym, zobacz <xref:System.Type.IsGenericType%2A> uwagi dotyczące właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4154">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
## <a name="nested-types"></a><span data-ttu-id="6cdc9-4155">Zagnieżdżone typy</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4155">Nested Types</span></span>  
 <span data-ttu-id="6cdc9-4156">Jeśli nie zdefiniowano typu ogólnego przy użyciu języka C#, C++ lub Visual Basic, jego zagnieżdżone typy są rodzajowe.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4156">If a generic type is defined using C#, C++, or Visual Basic, then its nested types are all generic.</span></span> <span data-ttu-id="6cdc9-4157">Ta zasada obowiązuje, nawet jeśli typy zagnieżdżone nie może mieć typu parametrów we własnym zakresie, ponieważ wszystkie trzy języki obejmują parametry typu otaczającej typów w liście parametrów typu w przypadku zagnieżdżonych typów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4157">This is true even if the nested types have no type parameters of their own, because all three languages include the type parameters of enclosing types in the type parameter lists of nested types.</span></span> <span data-ttu-id="6cdc9-4158">Należy wziąć pod uwagę następujące klasy:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4158">Consider the following classes:</span></span>  
  
 [!code-cpp[System.Type.MakeGenericType#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.makegenerictype/cpp/remarks.cpp#2)]
 [!code-csharp[System.Type.MakeGenericType#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.makegenerictype/cs/remarks.cs#2)]
 [!code-vb[System.Type.MakeGenericType#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.makegenerictype/vb/remarks.vb#2)]  
  
 <span data-ttu-id="6cdc9-4159">Lista parametrów typu klasy zagnieżdżonej `Inner` ma dwa parametry typu `T` i `U`, pierwszy z nich jest parametr typu klasy otaczającej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4159">The type parameter list of the nested class `Inner` has two type parameters, `T` and `U`, the first of which is the type parameter of its enclosing class.</span></span> <span data-ttu-id="6cdc9-4160">Podobnie, lista parametrów typu klasy zagnieżdżonej `Innermost1` ma trzy parametry typu, `T`, `U`, i `V`, za pomocą `T` i `U` pochodzące z jej otaczającej klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4160">Similarly, the type parameter list of the nested class `Innermost1` has three type parameters, `T`, `U`, and `V`, with `T` and `U` coming from its enclosing classes.</span></span> <span data-ttu-id="6cdc9-4161">Klasa zagnieżdżona `Innermost2` ma dwa parametry typu `T` i `U`, które pochodzą z jej otaczającej klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4161">The nested class `Innermost2` has two type parameters, `T` and `U`, which come from its enclosing classes.</span></span>  
  
 <span data-ttu-id="6cdc9-4162">Jeśli lista parametrów typu otaczającego ma więcej niż jeden parametr typu, wszystkie parametry typu w kolejności zostaną uwzględnione na liście parametrów typu typu zagnieżdżonego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4162">If the parameter list of the enclosing type has more than one type parameter, all the type parameters in order are included in the type parameter list of the nested type.</span></span>  
  
 <span data-ttu-id="6cdc9-4163">Aby skonstruować typu ogólnego z definicji typu ogólnego dla typu zagnieżdżonego, należy wywołać <xref:System.Type.MakeGenericType%2A> metody za pomocą tablicy utworzone przez złączenie tablicami argument typu wszystkich otaczający typów, począwszy od najbardziej zewnętrznego typu ogólnego, i kończącą Wpisz tablica argumentów typu zagnieżdżonego, ma parametry typu swój własny.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4163">To construct a generic type from the generic type definition for a nested type, call the <xref:System.Type.MakeGenericType%2A> method with the array formed by concatenating the type argument arrays of all the enclosing types, beginning with the outermost generic type, and ending with the type argument array of the nested type itself, if it has type parameters of its own.</span></span> <span data-ttu-id="6cdc9-4164">Aby utworzyć wystąpienie `Innermost1`, wywołania <xref:System.Type.MakeGenericType%2A> metody z tablicę zawierającą trzy typy ma być przypisane do T, U i V. Aby utworzyć wystąpienie `Innermost2`, wywołanie <xref:System.Type.MakeGenericType%2A> metody z tablicę zawierającą dwa typy ma być przypisane do T i U.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4164">To create an instance of `Innermost1`, call the <xref:System.Type.MakeGenericType%2A> method with an array containing three types, to be assigned to T, U, and V. To create an instance of `Innermost2`, call the <xref:System.Type.MakeGenericType%2A> method with an array containing two types, to be assigned to T and U.</span></span>  
  
 <span data-ttu-id="6cdc9-4165">Języki propagować parametrów typu w otaczającej typów w ten sposób, aby można było używać parametrów typu otaczającego typu do zdefiniowania pola zagnieżdżonych typów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4165">The languages propagate the type parameters of enclosing types in this fashion so you can use the type parameters of an enclosing type to define fields of nested types.</span></span> <span data-ttu-id="6cdc9-4166">W przeciwnym razie parametrów typu nie jest w zakresie, w ramach organów zagnieżdżone typy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4166">Otherwise, the type parameters would not be in scope within the bodies of the nested types.</span></span> <span data-ttu-id="6cdc9-4167">Można zdefiniować typy zagnieżdżone bez propagowanie parametrów typu w otaczającej typów, emitowanie kodu w zestawach dynamicznych lub używając [Ilasm.exe (asembler IL)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4167">It is possible to define nested types without propagating the type parameters of enclosing types, by emitting code in dynamic assemblies or by using the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span> <span data-ttu-id="6cdc9-4168">Należy wziąć pod uwagę następujący kod MSIL assembler:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4168">Consider the following code for the MSIL assembler:</span></span>  
  
```  
.class public Outer<T> {  
    .class nested public Inner<U> {  
        .class nested public Innermost {  
        }  
    }  
}  
```  
  
 <span data-ttu-id="6cdc9-4169">W tym przykładzie nie jest możliwe zdefiniowanie pola typu `T` lub `U` w klasie `Innermost`, ponieważ te parametry typu nie są w zakresie.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4169">In this example, it is not possible to define a field of type `T` or `U` in class `Innermost`, because those type parameters are not in scope.</span></span> <span data-ttu-id="6cdc9-4170">W poniższym kodzie asemblera zdefiniowano klasy zagnieżdżone, które zachowują się sposób, w jaki gdyby zdefiniowany w języku C++, Visual Basic i C#:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4170">The following assembler code defines nested classes that behave the way they would if defined in C++, Visual Basic, and C#:</span></span>  
  
```  
.class public Outer<T> {  
    .class nested public Inner<T, U> {  
        .class nested public Innermost<T, U, V> {  
        }  
    }  
}  
```  
  
 <span data-ttu-id="6cdc9-4171">Możesz użyć [Ildasm.exe (dezasembler IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) do zbadania zagnieżdżonych klas zdefiniowanych w językach wysokiego poziomu i sprawdź, czy ten schemat nazewnictwa.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4171">You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine nested classes defined in the high-level languages and observe this naming scheme.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-4172">W poniższym przykładzie użyto <xref:System.Type.MakeGenericType%2A> metodę w celu utworzenia skonstruowanego typu w definicji typu ogólnego dla <xref:System.Collections.Generic.Dictionary%602> typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4172">The following example uses the <xref:System.Type.MakeGenericType%2A> method to create a constructed type from the generic type definition for the <xref:System.Collections.Generic.Dictionary%602> type.</span></span> <span data-ttu-id="6cdc9-4173">Reprezentuje zbudowany typ <xref:System.Collections.Generic.Dictionary%602> z `Test` obiektów za pomocą kluczy ciągu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4173">The constructed type represents a <xref:System.Collections.Generic.Dictionary%602> of `Test` objects with string keys.</span></span>  
  
 [!code-cpp[System.Type.BindGenericParameters#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.BindGenericParameters/CPP/source.cpp#1)]
 [!code-csharp[System.Type.BindGenericParameters#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.BindGenericParameters/CS/source.cs#1)]
 [!code-vb[System.Type.BindGenericParameters#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.BindGenericParameters/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6cdc9-4174">Bieżący typ nie reprezentuje definicji typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4174">The current type does not represent a generic type definition.</span>
          </span>
          <span data-ttu-id="6cdc9-4175">Oznacza to, że <see cref="P:System.Type.IsGenericTypeDefinition" /> zwraca <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4175">That is, <see cref="P:System.Type.IsGenericTypeDefinition" /> returns <see langword="false" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-4176">
            <paramref name="typeArguments" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4176">
              <paramref name="typeArguments" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cdc9-4177">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4177">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-4178">Każdy z elementów <paramref name="typeArguments" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4178">Any element of <paramref name="typeArguments" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6cdc9-4179">Liczba elementów w <paramref name="typeArguments" /> nie jest taka sama jak liczba parametrów typu w bieżącej definicji typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4179">The number of elements in <paramref name="typeArguments" /> is not the same as the number of type parameters in the current generic type definition.</span>
          </span>
          <span data-ttu-id="6cdc9-4180">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4180">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-4181">Każdy z elementów <paramref name="typeArguments" /> nie spełnia warunków ograniczenia określone dla odpowiedniego parametru typu bieżącego typu ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4181">Any element of <paramref name="typeArguments" /> does not satisfy the constraints specified for the corresponding type parameter of the current generic type.</span>
          </span>
          <span data-ttu-id="6cdc9-4182">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4182">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-4183">
            <paramref name="typeArguments" /> zawiera element, który jest typem wskaźnika (<see cref="P:System.Type.IsPointer" /> zwraca <see langword="true" />), typ przez odwołanie (<see cref="P:System.Type.IsByRef" /> zwraca <see langword="true" />), lub <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4183">
              <paramref name="typeArguments" /> contains an element that is a pointer type (<see cref="P:System.Type.IsPointer" /> returns <see langword="true" />), a by-ref type (<see cref="P:System.Type.IsByRef" /> returns <see langword="true" />), or <see cref="T:System.Void" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="6cdc9-4184">Wywoływana metoda nie jest obsługiwana w klasie bazowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4184">The invoked method is not supported in the base class.</span>
          </span>
          <span data-ttu-id="6cdc9-4185">Klasy pochodne muszą zapewniać implementację.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4185">Derived classes must provide an implementation.</span>
          </span>
        </exception>
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
        <altmember cref="M:System.Type.GetGenericTypeDefinition" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md">
          <span data-ttu-id="6cdc9-4186">Odbicie i typy ogólne</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4186">Reflection and Generic Types</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md">
          <span data-ttu-id="6cdc9-4187">Porady: zbadanie i tworzenie wystąpień typów ogólnych za pomocą odbicia</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4187">How to: Examine and Instantiate Generic Types with Reflection</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="MakePointerType">
      <MemberSignature Language="C#" Value="public virtual Type MakePointerType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakePointerType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakePointerType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakePointerType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakePointerType();" />
      <MemberSignature Language="F#" Value="abstract member MakePointerType : unit -&gt; Type&#xA;override this.MakePointerType : unit -&gt; Type" Usage="type.MakePointerType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-4188">Zwraca <see cref="T:System.Type" /> obiekt, który reprezentuje wskaźnik do bieżącego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4188">Returns a <see cref="T:System.Type" /> object that represents a pointer to the current type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-4189">A <see cref="T:System.Type" /> obiekt, który reprezentuje wskaźnik do bieżącego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4189">A <see cref="T:System.Type" /> object that represents a pointer to the current type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-4190"><xref:System.Type.MakePointerType%2A> Metoda zapewnia sposób generowania typów wskaźnika do listy parametrów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4190">The <xref:System.Type.MakePointerType%2A> method provides a way to generate pointer types for parameter lists.</span></span>  
  
 <span data-ttu-id="6cdc9-4191">Przy użyciu składni języka Microsoft intermediate language (MSIL), jeśli bieżący <xref:System.Type> obiekt reprezentuje <xref:System.Int32>, Metoda ta zwraca <xref:System.Type> obiekt reprezentujący `Int32*`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4191">Using the syntax of Microsoft intermediate language (MSIL), if the current <xref:System.Type> object represents <xref:System.Int32>, this method returns a <xref:System.Type> object representing `Int32*`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-4192">Poniższy przykład kodu tworzy tablicę, `ref` (`ByRef` w języku Visual Basic) oraz typy wskaźników dla `Test` klasy.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4192">The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.</span></span>  
  
 [!code-cpp[System.Type.MakeXxxType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CPP/source.cpp#1)]
 [!code-csharp[System.Type.MakeXxxType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CS/source.cs#1)]
 [!code-vb[System.Type.MakeXxxType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.MakeXxxType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="6cdc9-4193">Wywoływana metoda nie jest obsługiwana w klasie bazowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4193">The invoked method is not supported in the base class.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="6cdc9-4194">Bieżącym typem jest <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4194">The current type is <see cref="T:System.TypedReference" />.</span>
          </span>
          <span data-ttu-id="6cdc9-4195">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4195">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-4196">Bieżącym typem jest <see langword="ByRef" /> typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4196">The current type is a <see langword="ByRef" /> type.</span>
          </span>
          <span data-ttu-id="6cdc9-4197">Oznacza to, że <see cref="P:System.Type.IsByRef" /> zwraca <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4197">That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.MakeByRefType" />
        <altmember cref="M:System.Type.MakeArrayType" />
      </Docs>
    </Member>
    <Member MemberName="MemberType">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberTypes MemberType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MemberTypes MemberType" />
      <MemberSignature Language="DocId" Value="P:System.Type.MemberType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MemberType As MemberTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MemberTypes MemberType { System::Reflection::MemberTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.MemberType : System.Reflection.MemberTypes" Usage="System.Type.MemberType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.MemberType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-4198">Pobiera <see cref="T:System.Reflection.MemberTypes" /> wartość wskazującą, czy ten element członkowski jest typem lub typu zagnieżdżonego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4198">Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a type or a nested type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-4199">A <see cref="T:System.Reflection.MemberTypes" /> wartość wskazującą, czy ten element członkowski jest typem lub typu zagnieżdżonego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4199">A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a type or a nested type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-4200">Ta właściwość zastępuje <xref:System.Reflection.MemberInfo.MemberType%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4200">This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="6cdc9-4201">Dlatego podczas badania zbiór <xref:System.Reflection.MemberInfo> obiektów — na przykład tablica zwrócona przez <xref:System.Type.GetMembers%2A>— <xref:System.Reflection.MemberInfo.MemberType%2A> właściwość zwraca <xref:System.Reflection.MemberTypes.NestedType?displayProperty=nameWithType> kiedy dany element jest typu zagnieżdżonego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4201">Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects—for example, the array returned by <xref:System.Type.GetMembers%2A>—the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes.NestedType?displayProperty=nameWithType> when a given member is a nested type.</span></span>  
  
 <span data-ttu-id="6cdc9-4202">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, właściwość ta ma zastosowanie do definicji typu ogólnego, z którego skonstruowano.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4202">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="6cdc9-4203">Na przykład jeśli bieżący <xref:System.Type> reprezentuje `MyGenericType<int>` (`MyGenericType(Of Integer)` w języku Visual Basic), wartość tej właściwości jest określana przez `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4203">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="6cdc9-4204">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, właściwość ta zwraca zawsze <xref:System.Reflection.MemberTypes.TypeInfo?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4204">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns <xref:System.Reflection.MemberTypes.TypeInfo?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-4205">Poniższy kod przedstawia przykład `MemberType` pola jako parametr do `GetMember` metody:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4205">The following code example shows the `MemberType` field as a parameter to the `GetMember` method:</span></span>  
  
 [!code-cpp[Classic Type.MemberType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.MemberType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.MemberType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.MemberType Example/CS/source.cs#1)]
 [!code-vb[Classic Type.MemberType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.MemberType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberTypes" />
      </Docs>
    </Member>
    <Member MemberName="Missing">
      <MemberSignature Language="C#" Value="public static readonly object Missing;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly object Missing" />
      <MemberSignature Language="DocId" Value="F:System.Type.Missing" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Missing As Object " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Object ^ Missing;" />
      <MemberSignature Language="F#" Value=" staticval mutable Missing : obj" Usage="System.Type.Missing" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-4206">Reprezentuje wartość Brak w <see cref="T:System.Type" /> informacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4206">Represents a missing value in the <see cref="T:System.Type" /> information.</span>
          </span>
          <span data-ttu-id="6cdc9-4207">To pole jest tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4207">This field is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-4208">Użyj `Missing` pola do wywoływania przez odbicie, aby uzyskać wartość domyślna parametru.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4208">Use the `Missing` field for invocation through reflection to obtain the default value of a parameter.</span></span> <span data-ttu-id="6cdc9-4209">Jeśli `Missing` pola są przekazywane do wartości parametru i nie ma wartości domyślnej dla tego parametru <xref:System.ArgumentException> zgłaszany.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4209">If the `Missing` field is passed in for a parameter value and there is no default value for that parameter, an <xref:System.ArgumentException> is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-4210">Poniższy przykład kodu pokazuje użycie `Missing` pola, które można wywołać metody z jej argumentów domyślnych.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4210">The following code example shows the use of the `Missing` field to invoke a method with its default arguments.</span></span>  
  
 [!code-cpp[Classic Type.Missing Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.Missing Example/cpp/source.cpp#1)]
 [!code-csharp[Classic Type.Missing Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.Missing Example/cs/source.cs#1)]
 [!code-vb[Classic Type.Missing Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.Missing Example/VB/source.vb#1)]  
  
 <span data-ttu-id="6cdc9-4211">Ten kod generuje następujące dane wyjściowe:</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4211">This code produces the following output:</span></span>  
  
 <span data-ttu-id="6cdc9-4212">= 10, b = 55.3 c = 12</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4212">a = 10 b = 55.3 c = 12</span></span>  
  
 <span data-ttu-id="6cdc9-4213">= 10, b = 1,3 c = 1</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4213">a = 10 b = 1.3 c = 1</span></span>  
  
 <span data-ttu-id="6cdc9-4214">= 10, b = 1.2 c = 1</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4214">a = 10 b = 1.2 c = 1</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.Missing" />
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberSignature Language="DocId" Value="P:System.Type.Module" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Module As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Reflection::Module ^ Module { System::Reflection::Module ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Module : System.Reflection.Module" Usage="System.Type.Module" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.Module</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-4215">Pobiera moduł (DLL), w którym bieżącego <see cref="T:System.Type" /> jest zdefiniowana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4215">Gets the module (the DLL) in which the current <see cref="T:System.Type" /> is defined.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-4216">Moduł, w którym bieżącego <see cref="T:System.Type" /> jest zdefiniowana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4216">The module in which the current <see cref="T:System.Type" /> is defined.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-4217">Jeśli bieżący <xref:System.Type> reprezentuje zbudowany typ ogólny, właściwość ta zwraca modułu, w którym zdefiniowano definicji typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4217">If the current <xref:System.Type> represents a constructed generic type, this property returns the module in which the generic type definition was defined.</span></span> <span data-ttu-id="6cdc9-4218">Na przykład, jeśli utworzysz wystąpienie `MyGenericStack<int>`, <xref:System.Type.Module%2A> właściwość skonstruowanego typu zwraca modułu, w którym `MyGenericStack<T>` jest zdefiniowana.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4218">For example, if you create an instance of `MyGenericStack<int>`, the <xref:System.Type.Module%2A> property for the constructed type returns the module in which `MyGenericStack<T>` is defined.</span></span>  
  
 <span data-ttu-id="6cdc9-4219">Podobnie jeśli bieżący <xref:System.Type> reprezentuje parametr ogólny `T`, właściwość ta zwraca zestaw, który zawiera typ ogólny, który definiuje `T`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4219">Similarly, if the current <xref:System.Type> represents a generic parameter `T`, this property returns the assembly that contains the generic type that defines `T`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-4220">Ten poniższy przykład demonstruje użycie <xref:System.Type.Namespace%2A> i `Module` właściwości i <xref:System.Type.ToString%2A> metody <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4220">This following example demonstrates a use of the <xref:System.Type.Namespace%2A> and `Module` properties and the <xref:System.Type.ToString%2A> method of <xref:System.Type>.</span></span>  
  
 [!code-cpp[Type_ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_ToString/CPP/type_tostring.cpp#1)]
 [!code-csharp[Type_ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_ToString/CS/type_tostring.cs#1)]
 [!code-vb[Type_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_ToString/VB/type_tostring.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.Module" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public abstract string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Type.Name" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Type.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public abstract string Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Type.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ Namespace { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string" Usage="System.Type.Namespace" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.Namespace</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-4221">Pobiera obszar nazw <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4221">Gets the namespace of the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-4222">Przestrzeń nazw <see cref="T:System.Type" />; <see langword="null" /> czy bieżące wystąpienie nie ma obszaru nazw reprezentuje parametr ogólny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4222">The namespace of the <see cref="T:System.Type" />; <see langword="null" /> if the current instance has no namespace or represents a generic parameter.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-4223">Przestrzeń nazw jest logiczną projektowania nazewnictwa wygody używane głównie do zdefiniowania zakresu w aplikacji i organizowanie klasami i innymi typami w strukturze hierarchicznej jednego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4223">A namespace is a logical design-time naming convenience, used mainly to define scope in an application and organize classes and other types in a single hierarchical structure.</span></span> <span data-ttu-id="6cdc9-4224">Z punktu widzenia środowiska uruchomieniowego nie ma żadnych obszarów nazw.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4224">From the viewpoint of the runtime, there are no namespaces.</span></span>  
  
 <span data-ttu-id="6cdc9-4225">Jeśli bieżący <xref:System.Type> reprezentuje typ ogólny skonstruowany, właściwość ta zwraca przestrzeni nazw, który zawiera definicję typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4225">If the current <xref:System.Type> represents a constructed generic type, this property returns the namespace that contains the generic type definition.</span></span> <span data-ttu-id="6cdc9-4226">Podobnie jeśli bieżący <xref:System.Type> reprezentuje parametr ogólny `T`, właściwość ta zwraca przestrzeni nazw, który zawiera definicję typu ogólnego, który definiuje `T`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4226">Similarly, if the current <xref:System.Type> represents a generic parameter `T`, this property returns the namespace that contains the generic type definition that defines `T`.</span></span>  
  
 <span data-ttu-id="6cdc9-4227">Jeśli bieżący <xref:System.Type> obiekt reprezentuje parametr ogólny, właściwość ta zwraca `null`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4227">If the current <xref:System.Type> object represents a generic parameter, this property returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-4228">Ten poniższy przykład demonstruje użycie `Namespace` i <xref:System.Type.Module%2A> właściwości i <xref:System.Type.ToString%2A> metody <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4228">This following example demonstrates a use of the `Namespace` and <xref:System.Type.Module%2A> properties and the <xref:System.Type.ToString%2A> method of <xref:System.Type>.</span></span>  
  
 [!code-cpp[Type_ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_ToString/CPP/type_tostring.cpp#1)]
 [!code-csharp[Type_ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_ToString/CS/type_tostring.cs#1)]
 [!code-vb[Type_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_ToString/VB/type_tostring.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.FullName" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md">
          <span data-ttu-id="6cdc9-4229">Określanie w pełni kwalifikowanych nazw typów</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4229">Specifying Fully Qualified Type Names</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (Type left, Type right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Type left, class System.Type right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.op_Equality(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As Type, right As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(Type ^ left, Type ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : Type * Type -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Type" />
        <Parameter Name="right" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="6cdc9-4230">Pierwszy obiekt, który ma zostać porównany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4230">The first object to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6cdc9-4231">Drugi obiekt, który będzie porównywany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4231">The second object to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-4232">Wskazuje, czy dwa <see cref="T:System.Type" /> obiekty są sobie równe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4232">Indicates whether two <see cref="T:System.Type" /> objects are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-4233">
            <see langword="true" /> Jeśli <paramref name="left" /> jest równa <paramref name="right" />; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4233">
              <see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (Type left, Type right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Type left, class System.Type right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.op_Inequality(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As Type, right As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(Type ^ left, Type ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : Type * Type -&gt; bool" Usage="System.Type.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Type" />
        <Parameter Name="right" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="6cdc9-4234">Pierwszy obiekt, który ma zostać porównany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4234">The first object to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="6cdc9-4235">Drugi obiekt, który będzie porównywany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4235">The second object to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-4236">Wskazuje, czy dwa <see cref="T:System.Type" /> obiekty nie są równe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4236">Indicates whether two <see cref="T:System.Type" /> objects are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-4237">
            <see langword="true" /> Jeśli <paramref name="left" /> nie jest równa <paramref name="right" />; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4237">
              <see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectedType">
      <MemberSignature Language="C#" Value="public override Type ReflectedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReflectedType" />
      <MemberSignature Language="DocId" Value="P:System.Type.ReflectedType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReflectedType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReflectedType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReflectedType : Type" Usage="System.Type.ReflectedType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.ReflectedType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-4238">Pobiera obiekt klasy, który został użyty do uzyskania tego elementu członkowskiego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4238">Gets the class object that was used to obtain this member.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-4239">
            <see langword="Type" /> Obiektu za pomocą którego należy to <see cref="T:System.Type" /> obiekt został uzyskany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4239">The <see langword="Type" /> object through which this <see cref="T:System.Type" /> object was obtained.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-4240">Aby uzyskać <xref:System.Type> obiektów, wartość tej właściwości jest zawsze taka sama jak wartość <xref:System.Type.DeclaringType%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4240">For <xref:System.Type> objects, the value of this property is always the same as the value of the <xref:System.Type.DeclaringType%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-4241">W tym przykładzie jest wyświetlany odbitych typ klasy zagnieżdżonej.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4241">This example displays the reflected type of a nested class.</span></span>  
  
 [!code-cpp[Classic Type.ReflectedType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.ReflectedType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.ReflectedType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.ReflectedType Example/CS/source.cs#1)]
 [!code-vb[Classic Type.ReflectedType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.ReflectedType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="P:System.Type.DeclaringType" />
      </Docs>
    </Member>
    <Member MemberName="ReflectionOnlyGetType">
      <MemberSignature Language="C#" Value="public static Type ReflectionOnlyGetType (string typeName, bool throwIfNotFound, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type ReflectionOnlyGetType(string typeName, bool throwIfNotFound, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReflectionOnlyGetType (typeName As String, throwIfNotFound As Boolean, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ ReflectionOnlyGetType(System::String ^ typeName, bool throwIfNotFound, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member ReflectionOnlyGetType : string * bool * bool -&gt; Type" Usage="System.Type.ReflectionOnlyGetType (typeName, throwIfNotFound, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="throwIfNotFound" Type="System.Boolean" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="6cdc9-4242">Nazwa kwalifikowanego dla zestawu <see cref="T:System.Type" /> można pobrać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4242">The assembly-qualified name of the <see cref="T:System.Type" /> to get.</span>
          </span>
        </param>
        <param name="throwIfNotFound">
          <span data-ttu-id="6cdc9-4243">
            <see langword="true" /> Aby zgłosić <see cref="T:System.TypeLoadException" /> Jeśli nie można odnaleźć typu; <see langword="false" /> do zwrócenia <see langword="null" /> Jeśli nie można odnaleźć typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4243">
              <see langword="true" /> to throw a <see cref="T:System.TypeLoadException" /> if the type cannot be found; <see langword="false" /> to return <see langword="null" /> if the type cannot be found.</span>
          </span>
          <span data-ttu-id="6cdc9-4244">Określanie <see langword="false" /> powoduje również pominięcie niektórych warunków wyjątków, ale nie wszystkie z nich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4244">Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span>
          </span>
          <span data-ttu-id="6cdc9-4245">Zobacz sekcję Wyjątki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4245">See the Exceptions section.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="6cdc9-4246">
            <see langword="true" /> Aby wykonać wyszukiwanie bez uwzględniania wielkości liter dla <c>typeName</c>; <see langword="false" /> przeprowadzić wyszukiwanie dla <c>typeName</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4246">
              <see langword="true" /> to perform a case-insensitive search for <c>typeName</c>; <see langword="false" /> to perform a case-sensitive search for <c>typeName</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-4247">Pobiera <see cref="T:System.Type" /> o określonej nazwie określenie, czy przeprowadzić wyszukiwanie i czy chcesz zgłosić wyjątek, jeśli typ nie zostanie znaleziony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4247">Gets the <see cref="T:System.Type" /> with the specified name, specifying whether to perform a case-sensitive search and whether to throw an exception if the type is not found.</span>
          </span>
          <span data-ttu-id="6cdc9-4248">Typ jest ładowany w celu odbicia, nie do wykonania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4248">The type is loaded for reflection only, not for execution.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-4249">Typ o określonej nazwie, jeśli znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4249">The type with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cdc9-4250">Jeśli typ nie zostanie znaleziony, <paramref name="throwIfNotFound" /> parametr określa, czy <see langword="null" /> zwracany jest lub zostanie zgłoszony wyjątek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4250">If the type is not found, the <paramref name="throwIfNotFound" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span>
          </span>
          <span data-ttu-id="6cdc9-4251">W niektórych przypadkach występuje wyjątek niezależnie od wartości <paramref name="throwIfNotFound" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4251">In some cases, an exception is thrown regardless of the value of <paramref name="throwIfNotFound" />.</span>
          </span>
          <span data-ttu-id="6cdc9-4252">Zobacz sekcję Wyjątki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4252">See the Exceptions section.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-4253">Jeśli zestawu zawierającego typ nie jest już załadowane do kontekstu reflection-only, za pomocą <xref:System.Type.ReflectionOnlyGetType%2A> metodą jest odpowiednikiem pierwszego ładowania zestawu w celu odbicia tylko przy użyciu <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> metody, a następnie ładowania typu przez wywołanie metody zestawu <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4253">If the assembly containing the type is not already loaded into the reflection-only context, using the <xref:System.Type.ReflectionOnlyGetType%2A> method is equivalent to first loading the assembly for reflection only, using the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> method, and then loading the type by calling the assembly's <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="6cdc9-4254">Aby uzyskać informacji na temat nazw kwalifikowanych dla zestawu, zobacz <xref:System.Type.AssemblyQualifiedName%2A?displayProperty=nameWithType> właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4254">For information about assembly-qualified names, see the <xref:System.Type.AssemblyQualifiedName%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="6cdc9-4255">Aby uzyskać więcej informacji na temat określania nazwy typów, zobacz <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29> przeciążenie metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4255">For additional details on specifying type names, see the <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload.</span></span>  
  
 <span data-ttu-id="6cdc9-4256">Jeśli zestaw jest już załadowany w celu wykonywania, kolejną kopię są ładowane do kontekstu reflection-only.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4256">If the assembly is already loaded for execution, another copy is loaded into the reflection-only context.</span></span>  
  
 <span data-ttu-id="6cdc9-4257">`throwIfNotFound` Parametr określa, co się stanie, gdy typ nie zostanie znaleziony i powoduje również pominięcie niektórych warunków wyjątków, zgodnie z opisem w sekcji wyjątki.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4257">The `throwIfNotFound` parameter specifies what happens when the type is not found, and also suppresses certain other exception conditions, as described in the Exceptions section.</span></span> <span data-ttu-id="6cdc9-4258">Niektóre wyjątki są zgłaszane niezależnie od wartości `throwIfNotFound`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4258">Some exceptions are thrown regardless of the value of `throwIfNotFound`.</span></span> <span data-ttu-id="6cdc9-4259">Na przykład, jeśli zestaw nie jest prawidłowy <xref:System.BadImageFormatException> jest zgłaszany nawet wtedy, gdy `throwIfNotFound` jest `false`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4259">For example, if the assembly is not valid, a <xref:System.BadImageFormatException> is thrown even if `throwIfNotFound` is `false`.</span></span>  
  
 <span data-ttu-id="6cdc9-4260">Aby uzyskać więcej informacji o korzystaniu z kontekstu reflection-only, zobacz [porady: ładowanie zestawów do kontekstu Reflection-Only](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4260">For more information about using the reflection-only context, see [How to: Load Assemblies into the Reflection-Only Context](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cdc9-4261">
            <paramref name="typeName" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4261">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="6cdc9-4262">Inicjator klasy jest wywoływany i zgłasza wyjątek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4262">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="6cdc9-4263">
            <paramref name="throwIfNotFound" /> jest <see langword="true" /> i nie można odnaleźć typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4263">
              <paramref name="throwIfNotFound" /> is <see langword="true" /> and the type is not found.</span>
          </span>
          <span data-ttu-id="6cdc9-4264">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4264">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-4265">
            <paramref name="throwIfNotFound" /> jest <see langword="true" /> i <paramref name="typeName" /> zawiera nieprawidłowe znaki, takie jak osadzona karta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4265">
              <paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.</span>
          </span>
          <span data-ttu-id="6cdc9-4266">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4266">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-4267">
            <paramref name="throwIfNotFound" /> jest <see langword="true" /> i <paramref name="typeName" /> jest ciągiem pustym.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4267">
              <paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span>
          </span>
          <span data-ttu-id="6cdc9-4268">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4268">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-4269">
            <paramref name="throwIfNotFound" /> jest <see langword="true" /> i <paramref name="typeName" /> reprezentuje typ tablicy z nieprawidłowym rozmiarem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4269">
              <paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span>
          </span>
          <span data-ttu-id="6cdc9-4270">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4270">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-4271">
            <paramref name="typeName" /> reprezentuje tablicę <see cref="T:System.TypedReference" /> obiektów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4271">
              <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" /> objects.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6cdc9-4272">
            <paramref name="typeName" /> nie ma nazwy zestawu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4272">
              <paramref name="typeName" /> does not include the assembly name.</span>
          </span>
          <span data-ttu-id="6cdc9-4273">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4273">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-4274">
            <paramref name="throwIfNotFound" /> jest <see langword="true" /> i <paramref name="typeName" /> ma nieprawidłową składnię, na przykład "MyType [, \*,]".</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4274">
              <paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax; for example, "MyType[,\*,]".</span>
          </span>
          <span data-ttu-id="6cdc9-4275">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4275">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-4276">
            <paramref name="typeName" /> reprezentuje typ ogólny, który jest typem wskaźnika <see langword="ByRef" /> typu, lub <see cref="T:System.Void" /> jako jeden z argumentów typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4276">
              <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          </span>
          <span data-ttu-id="6cdc9-4277">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4277">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-4278">
            <paramref name="typeName" /> reprezentuje typ ogólny, który ma niepoprawną liczbę argumentów typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4278">
              <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          </span>
          <span data-ttu-id="6cdc9-4279">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4279">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-4280">
            <paramref name="typeName" /> reprezentuje typ ogólny i jeden z argumentów typu nie spełniają ograniczeń dla odpowiedniego parametru typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4280">
              <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="6cdc9-4281">
            <paramref name="throwIfNotFound" /> jest <see langword="true" /> i nie znaleziono zestawu lub jednej z jego zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4281">
              <paramref name="throwIfNotFound" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="6cdc9-4282">Zestaw lub jeden z jego elementów zależnych został znaleziony, ale nie można go załadować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4282">The assembly or one of its dependencies was found, but could not be loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="6cdc9-4283">Zestaw lub jeden z jego elementów zależnych nie są prawidłowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4283">The assembly or one of its dependencies is not valid.</span>
          </span>
          <span data-ttu-id="6cdc9-4284">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4284">-or-</span>
          </span>
          <span data-ttu-id="6cdc9-4285">Zestaw został skompilowany przy użyciu nowszej wersji aparatu plików wykonywalnych języka wspólnego niż wersja, która jest aktualnie załadowana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4285">The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.TypeLoadException" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="M:System.Reflection.Assembly.GetAssembly(System.Type)" />
        <altmember cref="M:System.Reflection.Assembly.GetType(System.String)" />
        <altmember cref="T:System.Reflection.AssemblyName" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md">
          <span data-ttu-id="6cdc9-4286">Określanie w pełni kwalifikowanych nazw typów</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4286">Specifying Fully Qualified Type Names</span>
          </span>
        </related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md">
          <span data-ttu-id="6cdc9-4287">Porady: ładowanie zestawów do kontekstu Reflection-Only</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4287">How to: Load Assemblies into the Reflection-Only Context</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="StructLayoutAttribute">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.InteropServices.StructLayoutAttribute StructLayoutAttribute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.InteropServices.StructLayoutAttribute StructLayoutAttribute" />
      <MemberSignature Language="DocId" Value="P:System.Type.StructLayoutAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property StructLayoutAttribute As StructLayoutAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Runtime::InteropServices::StructLayoutAttribute ^ StructLayoutAttribute { System::Runtime::InteropServices::StructLayoutAttribute ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StructLayoutAttribute : System.Runtime.InteropServices.StructLayoutAttribute" Usage="System.Type.StructLayoutAttribute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.StructLayoutAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-4288">Pobiera <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> układ bieżącego typu, który opisuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4288">Gets a <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> that describes the layout of the current type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-4289">Pobiera <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> , który opisuje funkcje brutto układ bieżącego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4289">Gets a <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> that describes the gross layout features of the current type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-4290"><xref:System.Runtime.InteropServices.StructLayoutAttribute> nie jest zwracana przez <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4290"><xref:System.Runtime.InteropServices.StructLayoutAttribute> is not returned by the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method.</span></span> <span data-ttu-id="6cdc9-4291">Zamiast tego należy używać tej właściwości, aby z niej skorzystać.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4291">Instead, use this property to get it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-4292">Poniższy przykładowy kod najpierw definiuje klasy, struktury i struktury z atrybutami specjalnego układu (struktur są zagnieżdżone w obrębie klasy).</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4292">The following code example first defines a class, a structure, and a structure with special layout attributes (the structures are nested within the class).</span></span> <span data-ttu-id="6cdc9-4293">Następnie w przykładzie <xref:System.Type.StructLayoutAttribute%2A> właściwości w celu uzyskania <xref:System.Runtime.InteropServices.StructLayoutAttribute> dla każdego typu i wyświetla właściwości atrybutów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4293">The example then uses the <xref:System.Type.StructLayoutAttribute%2A> property to obtain a <xref:System.Runtime.InteropServices.StructLayoutAttribute> for each type, and displays the properties of the attributes.</span></span>  
  
 [!code-cpp[Type.StructLayoutAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type.StructLayoutAttribute/CPP/Type.StructLayoutAttribute.cpp#1)]
 [!code-csharp[Type.StructLayoutAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type.StructLayoutAttribute/CS/source.cs#1)]
 [!code-vb[Type.StructLayoutAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type.StructLayoutAttribute/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="6cdc9-4294">Wywoływana metoda nie jest obsługiwana w klasie bazowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4294">The invoked method is not supported in the base class.</span>
          </span>
        </exception>
        <altmember cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Type.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _Type.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Type.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.System#Runtime#InteropServices#_Type#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _Type.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Type.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_Type::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid">
          <span data-ttu-id="6cdc9-4295">Zarezerwowane do użytku w przyszłości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4295">Reserved for future use.</span>
          </span>
          <span data-ttu-id="6cdc9-4296">Musi być wartością IID_NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4296">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="rgszNames">
          <span data-ttu-id="6cdc9-4297">Przekazana tablica nazw ma być mapowana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4297">Passed-in array of names to be mapped.</span>
          </span>
        </param>
        <param name="cNames">
          <span data-ttu-id="6cdc9-4298">Liczba nazw, które mają być mapowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4298">Count of the names to be mapped.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="6cdc9-4299">Ustawienia regionalne kontekstu, w którym można interpretować nazwy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4299">The locale context in which to interpret the names.</span>
          </span>
        </param>
        <param name="rgDispId">
          <span data-ttu-id="6cdc9-4300">Tablica przydzielana przez obiekt wywołujący, który otrzymuje numery identyfikacyjne odpowiadających nazw.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4300">Caller-allocated array which receives the IDs corresponding to the names.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-4301">Zestaw nazw jest mapowany na odpowiedni zestaw identyfikatorów wysyłania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4301">Maps a set of names to a corresponding set of dispatch identifiers.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-4302">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4302">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="6cdc9-4303">Aby uzyskać więcej informacji na temat `IDispatch::GetIDsOfNames`, zobacz: Biblioteka MSDN.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4303">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="6cdc9-4304">Dostęp z późnym wiązaniem przy użyciu COM <c>IDispatch</c> interfejs nie jest obsługiwany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4304">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Type.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _Type.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Type.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.System#Runtime#InteropServices#_Type#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _Type.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Type.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_Type::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo">
          <span data-ttu-id="6cdc9-4305">Informacje o typie, który będzie zwracany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4305">The type information to return.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="6cdc9-4306">Identyfikator regionalny dla informacji o typie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4306">The locale identifier for the type information.</span>
          </span>
        </param>
        <param name="ppTInfo">
          <span data-ttu-id="6cdc9-4307">Wskaźnik do obiektu informacji żądanego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4307">A pointer to the requested type information object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-4308">Pobiera informacje o typie dla obiektu, których następnie można użyć do uzyskania informacji o typie interfejsu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4308">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-4309">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4309">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="6cdc9-4310">Aby uzyskać więcej informacji na temat `IDispatch::GetTypeInfo`, zobacz: Biblioteka MSDN.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4310">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="6cdc9-4311">Dostęp z późnym wiązaniem przy użyciu COM <c>IDispatch</c> interfejs nie jest obsługiwany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4311">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Type.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _Type.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Type.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.System#Runtime#InteropServices#_Type#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _Type.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Type.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_Type::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo">
          <span data-ttu-id="6cdc9-4312">Wskazuje lokalizację, która odbiera informację o liczbie typów dostarczanych przez obiekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4312">Points to a location that receives the number of type information interfaces provided by the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-4313">Pobiera informację o liczbie typów interfejsów, jakie zawiera obiekt (0 lub 1).</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4313">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-4314">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4314">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="6cdc9-4315">Aby uzyskać więcej informacji na temat `IDispatch::GetTypeInfoCount`, zobacz: Biblioteka MSDN.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4315">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="6cdc9-4316">Dostęp z późnym wiązaniem przy użyciu COM <c>IDispatch</c> interfejs nie jest obsługiwany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4316">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Type.Invoke">
      <MemberSignature Language="C#" Value="void _Type.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Type.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.System#Runtime#InteropServices#_Type#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _Type.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Type.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_Type::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember">
          <span data-ttu-id="6cdc9-4317">Określa element członkowski.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4317">Identifies the member.</span>
          </span>
        </param>
        <param name="riid">
          <span data-ttu-id="6cdc9-4318">Zarezerwowane do użytku w przyszłości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4318">Reserved for future use.</span>
          </span>
          <span data-ttu-id="6cdc9-4319">Musi być wartością IID_NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4319">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="6cdc9-4320">Ustawienia regionalne kontekstu, w którym można interpretować argumenty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4320">The locale context in which to interpret arguments.</span>
          </span>
        </param>
        <param name="wFlags">
          <span data-ttu-id="6cdc9-4321">Flagi opisujące kontekst wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4321">Flags describing the context of the call.</span>
          </span>
        </param>
        <param name="pDispParams">
          <span data-ttu-id="6cdc9-4322">Wskaźnik do struktury zawiera tablicę argumentów, tablicę identyfikatorów DISPID argumentu dla nazwanych argumentów i zlicza liczbę elementów w tablicach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4322">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span>
          </span>
        </param>
        <param name="pVarResult">
          <span data-ttu-id="6cdc9-4323">Wskaźnik miejsca, gdzie ma być przechowywany wynik.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4323">Pointer to the location where the result is to be stored.</span>
          </span>
        </param>
        <param name="pExcepInfo">
          <span data-ttu-id="6cdc9-4324">Wskaźnik do struktury, która zawiera informacje o wyjątku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4324">Pointer to a structure that contains exception information.</span>
          </span>
        </param>
        <param name="puArgErr">
          <span data-ttu-id="6cdc9-4325">Indeks pierwszego argumentu, który zawiera błąd.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4325">The index of the first argument that has an error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cdc9-4326">Umożliwia dostęp do właściwości i metod udostępnianych przez obiekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4326">Provides access to properties and methods exposed by an object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-4327">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4327">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="6cdc9-4328">Aby uzyskać więcej informacji na temat `IDispatch::Invoke`, zobacz: Biblioteka MSDN.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4328">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="6cdc9-4329">Dostęp z późnym wiązaniem przy użyciu COM <c>IDispatch</c> interfejs nie jest obsługiwany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4329">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="type.ToString " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.ToString</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-4330">Zwraca <see langword="String" /> reprezentujący nazwę bieżącego <see langword="Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4330">Returns a <see langword="String" /> representing the name of the current <see langword="Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cdc9-4331">A <see cref="T:System.String" /> reprezentujący nazwę bieżącego <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4331">A <see cref="T:System.String" /> representing the name of the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-4332">Ta metoda zwraca w pełni kwalifikowaną wspólnego języka środowiska uruchomieniowego przestrzeni nazw i nazwę dla wszystkich pierwotnych typów.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4332">This method returns the fully qualified common language runtime namespace and name for all primitive types.</span></span> <span data-ttu-id="6cdc9-4333">Na przykład C# instrukcja, `(long)0.Type().ToString()` zwraca "System.Int64", a nie tylko "Int64".</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4333">For example, the C# instruction, `(long)0.Type().ToString()` returns "System.Int64" instead of merely "Int64".</span></span>  
  
 <span data-ttu-id="6cdc9-4334">Jeśli bieżący <xref:System.Type> reprezentuje typ ogólny, typ i argumentów typu są kwalifikowane według przestrzeni nazw i typ zagnieżdżony, ale nie przez zestaw.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4334">If the current <xref:System.Type> represents a generic type, the type and its type arguments are qualified by namespace and by nested type, but not by assembly.</span></span> <span data-ttu-id="6cdc9-4335">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, Metoda ta zwraca niekwalifikowana nazwa parametru typu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4335">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method returns the unqualified name of the type parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-4336">Ten poniższy przykład demonstruje użycie <xref:System.Type.Namespace%2A> i <xref:System.Type.Module%2A> właściwości i `ToString` metody <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4336">This following example demonstrates a use of the <xref:System.Type.Namespace%2A> and <xref:System.Type.Module%2A> properties and the `ToString` method of <xref:System.Type>.</span></span>  
  
 [!code-cpp[Type_ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_ToString/CPP/type_tostring.cpp#1)]
 [!code-csharp[Type_ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_ToString/CS/type_tostring.cs#1)]
 [!code-vb[Type_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_ToString/VB/type_tostring.vb#1)]  
  
 <span data-ttu-id="6cdc9-4337">W poniższym przykładzie porównano ciągów zwracanych przez <xref:System.Type.ToString%2A> metody i `Name`, <xref:System.Type.FullName%2A>, i <xref:System.Type.AssemblyQualifiedName%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4337">The following example compares the strings returned by the <xref:System.Type.ToString%2A> method and the `Name`, <xref:System.Type.FullName%2A>, and <xref:System.Type.AssemblyQualifiedName%2A> properties.</span></span>  
  
 [!code-csharp[System.Type.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.tostring/cs/fullname1.cs#1)]
 [!code-vb[System.Type.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.tostring/vb/fullname1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="TypeHandle">
      <MemberSignature Language="C#" Value="public virtual RuntimeTypeHandle TypeHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeTypeHandle TypeHandle" />
      <MemberSignature Language="DocId" Value="P:System.Type.TypeHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TypeHandle As RuntimeTypeHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property RuntimeTypeHandle TypeHandle { RuntimeTypeHandle get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeHandle : RuntimeTypeHandle" Usage="System.Type.TypeHandle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.TypeHandle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeTypeHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-4338">Pobiera uchwyt dla bieżącego <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4338">Gets the handle for the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-4339">Dojście do bieżącego <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4339">The handle for the current <see cref="T:System.Type" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-4340">`TypeHandle` hermetyzuje wskaźnik do struktury danych wewnętrznych, który reprezentuje typ.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4340">`TypeHandle` encapsulates a pointer to an internal data structure that represents the type.</span></span> <span data-ttu-id="6cdc9-4341">Tego dojścia jest unikatowa w okresie istnienia procesu.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4341">This handle is unique during the process lifetime.</span></span> <span data-ttu-id="6cdc9-4342">Uchwyt jest prawidłowy tylko w domenie aplikacji, w której zostały pobrane.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4342">The handle is valid only in the application domain in which it was obtained.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cdc9-4343">Poniższy przykład zwraca uchwyt danego typu i przechodzi uchwyt do metody, która pobiera typ dojścia i wyświetla go.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4343">The following example returns the handle of the corresponding type and passes the handle to a method that gets the type from the handle and displays it.</span></span>  
  
 [!code-cpp[Type_TypeHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_TypeHandle/CPP/type_typehandle.cpp#1)]
 [!code-csharp[Type_TypeHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_TypeHandle/CS/type_typehandle.cs#1)]
 [!code-vb[Type_TypeHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_TypeHandle/VB/type_typehandle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="6cdc9-4344">.NET Compact Framework nie obsługuje obecnie tej właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4344">The .NET Compact Framework does not currently support this property.</span>
          </span>
        </exception>
        <altmember cref="T:System.RuntimeTypeHandle" />
        <altmember cref="M:System.Type.GetTypeHandle(System.Object)" />
        <altmember cref="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)" />
      </Docs>
    </Member>
    <Member MemberName="TypeInitializer">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo TypeInitializer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ConstructorInfo TypeInitializer" />
      <MemberSignature Language="DocId" Value="P:System.Type.TypeInitializer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeInitializer As ConstructorInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::ConstructorInfo ^ TypeInitializer { System::Reflection::ConstructorInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeInitializer : System.Reflection.ConstructorInfo" Usage="System.Type.TypeInitializer" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.TypeInitializer</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-4345">Pobiera inicjator dla typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4345">Gets the initializer for the type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-4346">Obiekt, który zawiera nazwę Konstruktor klasy <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4346">An object that contains the name of the class constructor for the <see cref="T:System.Type" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cdc9-4347">Inicjatory klasy są również dostępne za pośrednictwem <xref:System.Type.FindMembers%2A> metodę, lub za pomocą przeciążenia <xref:System.Type.GetMember%2A>, <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetConstructor%2A>, i <xref:System.Type.GetConstructors%2A> metod, które przyjmują <xref:System.Reflection.BindingFlags> jako parametr.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4347">Class initializers are also available through the <xref:System.Type.FindMembers%2A> method, or through overloads of the <xref:System.Type.GetMember%2A>, <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetConstructor%2A>, and <xref:System.Type.GetConstructors%2A> methods that take <xref:System.Reflection.BindingFlags> as a parameter.</span></span>  
  
 <span data-ttu-id="6cdc9-4348">Jeśli bieżący <xref:System.Type> reprezentuje parametr typu w definicji typu ogólnego lub metody rodzajowej, właściwość ta zwraca `null`.</span><span class="sxs-lookup"><span data-stu-id="6cdc9-4348">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
      </Docs>
    </Member>
    <Member MemberName="UnderlyingSystemType">
      <MemberSignature Language="C#" Value="public abstract Type UnderlyingSystemType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type UnderlyingSystemType" />
      <MemberSignature Language="DocId" Value="P:System.Type.UnderlyingSystemType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property UnderlyingSystemType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ UnderlyingSystemType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnderlyingSystemType : Type" Usage="System.Type.UnderlyingSystemType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.UnderlyingSystemType</InterfaceMember>
        <InterfaceMember>P:System.Reflection.IReflect.UnderlyingSystemType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6cdc9-4349">Wskazuje typ dostarczane przez środowisko uruchomieniowe języka wspólnego reprezentujący tego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4349">Indicates the type provided by the common language runtime that represents this type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6cdc9-4350">Podstawowy typ systemu <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cdc9-4350">The underlying system type for the <see cref="T:System.Type" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Type.BaseType" />
      </Docs>
    </Member>
  </Members>
</Type>