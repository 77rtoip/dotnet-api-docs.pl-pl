<Type Name="Func&lt;T1,T2,TResult&gt;" FullName="System.Func&lt;T1,T2,TResult&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="91afaafff85a355e053b2c519b43ae59af462f80" /><Meta Name="ms.sourcegitcommit" Value="f9e71795ba0f9c2dfaa74bec233343ed0f3ffd99" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="03/14/2019" /><Meta Name="ms.locfileid" Value="57955949" /></Metadata><TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T1,in T2,out TResult&gt;(T1 arg1, T2 arg2);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`3&lt;- T1, - T2, + TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`3" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of In T1, In T2, Out TResult)(arg1 As T1, arg2 As T2) As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename TResult&gt;&#xA;public delegate TResult Func(T1 arg1, T2 arg2);" />
  <TypeSignature Language="F#" Value="type Func&lt;'T1, 'T2, 'Result&gt; = delegate of 'T1 * 'T2 -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg1" Type="T1" Index="0" FrameworkAlternate="xamarinmac-3.0" />
    <Parameter Name="arg2" Type="T2" Index="1" FrameworkAlternate="xamarinmac-3.0" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1"><span data-ttu-id="032d4-101">Typ pierwszego parametru metody, która hermetyzuje tego delegata.</span><span class="sxs-lookup"><span data-stu-id="032d4-101">The type of the first parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="T2"><span data-ttu-id="032d4-102">Typ drugiego parametru metody, która hermetyzuje tego delegata.</span><span class="sxs-lookup"><span data-stu-id="032d4-102">The type of the second parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="TResult"><span data-ttu-id="032d4-103">Typ wartości zwracanej metody, która hermetyzuje tego delegata.</span><span class="sxs-lookup"><span data-stu-id="032d4-103">The type of the return value of the method that this delegate encapsulates.</span></span></typeparam>
    <param name="arg1"><span data-ttu-id="032d4-104">Pierwszy parametr metody, która hermetyzuje tego delegata.</span><span class="sxs-lookup"><span data-stu-id="032d4-104">The first parameter of the method that this delegate encapsulates.</span></span></param>
    <param name="arg2"><span data-ttu-id="032d4-105">Drugi parametr metody, która hermetyzuje tego delegata.</span><span class="sxs-lookup"><span data-stu-id="032d4-105">The second parameter of the method that this delegate encapsulates.</span></span></param>
    <summary><span data-ttu-id="032d4-106">Hermetyzuje metody, która zawiera dwa parametry i zwraca wartość typu określonego przez <typeparamref name="TResult" /> parametru.</span><span class="sxs-lookup"><span data-stu-id="032d4-106">Encapsulates a method that has two parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</span></span></summary>
    <returns><span data-ttu-id="032d4-107">Wartość zwracaną przez metodę, która hermetyzuje tego delegata.</span><span class="sxs-lookup"><span data-stu-id="032d4-107">The return value of the method that this delegate encapsulates.</span></span></returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="032d4-108">Ten delegat służy do reprezentowania metody, która może być przekazywany jako parametr bez jawnego deklarowania niestandardową klasę delegatów.</span><span class="sxs-lookup"><span data-stu-id="032d4-108">You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="032d4-109">Metoda zhermetyzowany musi odpowiadać podpis metody, który jest definiowany przez ten delegat.</span><span class="sxs-lookup"><span data-stu-id="032d4-109">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="032d4-110">Oznacza to, czy zhermetyzowany metoda musi mieć dwa parametry, z których każdy jest przekazywany do niego przez wartość, a aplikacja musi zwracać wartość.</span><span class="sxs-lookup"><span data-stu-id="032d4-110">This means that the encapsulated method must have two parameters, each of which is passed to it by value, and that it must return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="032d4-111">Metody, która zawiera dwa parametry i zwraca odwołanie do `void` (lub w języku Visual Basic, który jest zadeklarowany jako `Sub` , a nie jako `Function`), używają ogólnej <xref:System.Action%602> delegowania, zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="032d4-111">To reference a method that has two parameters and returns `void` (or in Visual Basic, that is declared as a `Sub` rather than as a `Function`), use the generic <xref:System.Action%602> delegate instead.</span></span>  
  
 <span data-ttu-id="032d4-112">Kiedy używasz <xref:System.Func%603> delegata jest konieczne jawne zdefiniowanie delegata, która hermetyzuje metody z dwoma parametrami.</span><span class="sxs-lookup"><span data-stu-id="032d4-112">When you use the <xref:System.Func%603> delegate you do not have to explicitly define a delegate that encapsulates a method with two parameters.</span></span> <span data-ttu-id="032d4-113">Na przykład, poniższy kod deklaruje jawnie delegat o nazwie `ExtractMethod` i odwołanie do `ExtractWords` metodę, aby jego wystąpienie delegata.</span><span class="sxs-lookup"><span data-stu-id="032d4-113">For example, the following code explicitly declares a delegate named `ExtractMethod` and assigns a reference to the `ExtractWords` method to its delegate instance.</span></span>  
  
 [!code-csharp[System.Func~3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Delegate.cs#1)]
 [!code-vb[System.Func~3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~3/vb/Delegate.vb#1)]  
  
 <span data-ttu-id="032d4-114">Poniższy przykład upraszcza ten kod przez utworzenie wystąpienia <xref:System.Func%603> delegata zamiast jawnie nowe delegowanie definiowanie i przypisywanie metodę o nazwie.</span><span class="sxs-lookup"><span data-stu-id="032d4-114">The following example simplifies this code by instantiating a <xref:System.Func%603> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-csharp[System.Func~3#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Func3.cs#2)]
 [!code-vb[System.Func~3#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~3/vb/Func3.vb#2)]  
  
 <span data-ttu-id="032d4-115">Możesz użyć <xref:System.Func%603> delegowanie przy użyciu metod anonimowych w języku C#, tak jak pokazano w poniższym przykładzie.</span><span class="sxs-lookup"><span data-stu-id="032d4-115">You can use the <xref:System.Func%603> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="032d4-116">(Wprowadzenie do metod anonimowych, zobacz [anonimowymi](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span><span class="sxs-lookup"><span data-stu-id="032d4-116">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
  
 [!code-csharp[System.Func~3#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Anon.cs#3)]  
  
 <span data-ttu-id="032d4-117">Można również przypisywać w wyrażeniu lambda <xref:System.Func%603> delegować, tak jak pokazano w poniższym przykładzie.</span><span class="sxs-lookup"><span data-stu-id="032d4-117">You can also assign a lambda expression to a <xref:System.Func%603> delegate, as the following example illustrates.</span></span> <span data-ttu-id="032d4-118">(Wprowadzenie do wyrażenia lambda, zobacz [wyrażeń Lambda](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) i [wyrażeń Lambda](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span><span class="sxs-lookup"><span data-stu-id="032d4-118">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) and [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 [!code-csharp[System.Func~3#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Lambda.cs#4)]
 [!code-vb[System.Func~3#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~3/vb/lambda.vb#4)]  
  
 <span data-ttu-id="032d4-119">Podstawowy typ wyrażenia lambda jest jednym z ogólnego `Func` delegatów.</span><span class="sxs-lookup"><span data-stu-id="032d4-119">The underlying type of a lambda expression is one of the generic `Func` delegates.</span></span> <span data-ttu-id="032d4-120">Dzięki temu można przekazać wyrażenia lambda jako parametr bez jawnie przypisywania do delegata.</span><span class="sxs-lookup"><span data-stu-id="032d4-120">This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.</span></span> <span data-ttu-id="032d4-121">W szczególności ponieważ wiele metod typów w <xref:System.Linq> przestrzeń nazw ma <xref:System.Func%603> parametrów można przekazywać te metody wyrażenia lambda bez jawnego wystąpienia <xref:System.Func%603> delegować.</span><span class="sxs-lookup"><span data-stu-id="032d4-121">In particular, because many methods of types in the <xref:System.Linq> namespace have <xref:System.Func%603> parameters, you can pass these methods a lambda expression without explicitly instantiating a <xref:System.Func%603> delegate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="032d4-122">Poniższy przykład pokazuje, jak zadeklarować i użyj <xref:System.Func%603> delegować.</span><span class="sxs-lookup"><span data-stu-id="032d4-122">The following example demonstrates how to declare and use a <xref:System.Func%603> delegate.</span></span> <span data-ttu-id="032d4-123">W tym przykładzie deklaruje <xref:System.Func%603> zmiennej i przypisuje mu Wyrażenie lambda, która przyjmuje <xref:System.String> wartość i <xref:System.Int32> wartości jako parametry.</span><span class="sxs-lookup"><span data-stu-id="032d4-123">This example declares a <xref:System.Func%603> variable and assigns it a lambda expression that takes a <xref:System.String> value and an <xref:System.Int32> value as parameters.</span></span> <span data-ttu-id="032d4-124">Wyrażenie lambda zwraca `true` Jeśli długość <xref:System.String> parametr jest równy wartości <xref:System.Int32> parametru.</span><span class="sxs-lookup"><span data-stu-id="032d4-124">The lambda expression returns `true` if the length of the <xref:System.String> parameter is equal to the value of the <xref:System.Int32> parameter.</span></span> <span data-ttu-id="032d4-125">Delegat, który hermetyzuje tej metody są następnie używane w zapytaniu, aby ciągi filtrów w tablicy ciągów.</span><span class="sxs-lookup"><span data-stu-id="032d4-125">The delegate that encapsulates this method is subsequently used in a query to filter strings in an array of strings.</span></span>  
  
 [!code-csharp[System.Func~3#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Example.cs#5)]
 [!code-vb[System.Func~3#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~3/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md"><span data-ttu-id="032d4-126">Wyrażenia lambda (Przewodnik programowania w języku C#)</span><span class="sxs-lookup"><span data-stu-id="032d4-126">Lambda Expressions (C# Programming Guide)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md"><span data-ttu-id="032d4-127">Wyrażenia lambda</span><span class="sxs-lookup"><span data-stu-id="032d4-127">Lambda Expressions</span></span></related>
    <related type="Article" href="~/docs/csharp/programming-guide/delegates/index.md"><span data-ttu-id="032d4-128">Delegaty (Przewodnik programowania w języku C#)</span><span class="sxs-lookup"><span data-stu-id="032d4-128">Delegates (C# Programming Guide)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/delegates/index.md"><span data-ttu-id="032d4-129">Delegatów w języku Visual Basic</span><span class="sxs-lookup"><span data-stu-id="032d4-129">Delegates in Visual Basic</span></span></related>
  </Docs>
</Type>