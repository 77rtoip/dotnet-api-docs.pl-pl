<Type Name="IEquatable&lt;T&gt;" FullName="System.IEquatable&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c71b1ce8bef586f2453604f33dc3ca2e6f5af9bc" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="37728042" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IEquatable&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEquatable`1&lt;T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IEquatable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEquatable(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEquatable" />
  <TypeSignature Language="F#" Value="type IEquatable&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="282e7-101">Typ obiektów do porównania.</span>
      <span class="sxs-lookup">
        <span data-stu-id="282e7-101">The type of objects to compare.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="282e7-102">Definiuje metodę uogólniony, implementujący do utworzenia metody typu określania równości wystąpienia typu wartości lub klasy.</span>
      <span class="sxs-lookup">
        <span data-stu-id="282e7-102">Defines a generalized method that a value type or class implements to create a type-specific method for determining equality of instances.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="282e7-103">Ten interfejs jest implementowany przez typy, których wartości mogą być utożsamia (na przykład liczbowe i ciągu klasy).</span><span class="sxs-lookup"><span data-stu-id="282e7-103">This interface is implemented by types whose values can be equated (for example, the numeric and string classes).</span></span> <span data-ttu-id="282e7-104">Typ wartości lub klasa implementuje <xref:System.IEquatable%601.Equals%2A> metodę w celu utworzenia metody typu odpowiedniego do określania równości wystąpień.</span><span class="sxs-lookup"><span data-stu-id="282e7-104">A value type or class implements the <xref:System.IEquatable%601.Equals%2A> method to create a type-specific method suitable for determining equality of instances.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="282e7-105"><xref:System.IComparable%601> Interfejs definiuje <xref:System.IComparable%601.CompareTo%2A> metody, która określa kolejność sortowania wystąpienia typu implementującego.</span><span class="sxs-lookup"><span data-stu-id="282e7-105">The <xref:System.IComparable%601> interface defines the <xref:System.IComparable%601.CompareTo%2A> method, which determines the sort order of instances of the implementing type.</span></span> <span data-ttu-id="282e7-106"><xref:System.IEquatable%601> Interfejs definiuje <xref:System.IEquatable%601.Equals%2A> metody, która określa równości wystąpienia typu implementującego.</span><span class="sxs-lookup"><span data-stu-id="282e7-106">The <xref:System.IEquatable%601> interface defines the <xref:System.IEquatable%601.Equals%2A> method, which determines the equality of instances of the implementing type.</span></span>  
  
 <span data-ttu-id="282e7-107"><xref:System.IEquatable%601> Interfejs jest wykorzystywany przez obiekty kolekcji ogólnych, takich jak <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.Generic.List%601>, i <xref:System.Collections.Generic.LinkedList%601> podczas testowania pod kątem równości w metodami, takimi jak `Contains`, `IndexOf`, `LastIndexOf`, i `Remove`.</span><span class="sxs-lookup"><span data-stu-id="282e7-107">The <xref:System.IEquatable%601> interface is used by generic collection objects such as <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.Generic.List%601>, and <xref:System.Collections.Generic.LinkedList%601> when testing for equality in such methods as `Contains`, `IndexOf`, `LastIndexOf`, and `Remove`.</span></span> <span data-ttu-id="282e7-108">Powinny zostać wdrożone dla dowolnego obiektu, które mogą być przechowywane w kolekcji ogólnych.</span><span class="sxs-lookup"><span data-stu-id="282e7-108">It should be implemented for any object that might be stored in a generic collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="282e7-109">Zobacz przykład <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="282e7-109">See the example for the <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <span data-ttu-id="282e7-110">
        <para>Zastąp parametr typu <see cref="T:System.IEquatable`1" /> interfejsu z typem, który implementuje ten interfejs.  W przypadku zaimplementowania <see cref="T:System.IEquatable`1" />, należy również zastąpić implementacji klasy podstawowej <see cref="M:System.Object.Equals(System.Object)" /> i <see cref="M:System.Object.GetHashCode" /> tak, aby ich zachowanie było spójne z tymi, które <see cref="M:System.IEquatable`1.Equals(`0)" /> metody. Jeśli zastąpisz <see cref="M:System.Object.Equals(System.Object)" />, zastąpiona implementacji nazywa się również w wywołaniach statycznych <see langword="Equals(System.Object, System.Object)" /> metody w klasie. Ponadto powinien przeciążać <see langword="op_Equality" /> i <see langword="op_Inequality" /> operatorów. Daje to gwarancję, że wszystkie testy pod kątem równości zwracają spójne wyniki.  <block subset="none" type="note"><para> Aby uzyskać informacji o zastępowanie <see cref="M:System.Object.Equals(System.Object)" />, zobacz <see cref="M:System.Object.Equals(System.Object)" /> artykułu.  </para></block>  Dla typu wartości, należy zawsze wdrożenia <see cref="T:System.IEquatable`1" /> i zastąpić <see cref="M:System.Object.Equals(System.Object)" /> zapewnienia lepszej wydajności. <see cref="M:System.Object.Equals(System.Object)" /> pola typu wartości i opiera się na podstawie odbicia, aby porównać dwie wartości dla równości. Zarówno implementacji <see cref="M:System.IEquatable`1.Equals(`0)" /> i zastąpienie metody <see cref="M:System.Object.Equals(System.Object)" /> powinna zwrócić spójne wyniki.  W przypadku zaimplementowania <see cref="T:System.IEquatable`1" />, należy także zaimplementować <see cref="T:System.IComparable`1" /> w przypadku wystąpienia tego typu mogą być uporządkowane lub sortowania. Jeśli Twój typ implementuje <see cref="T:System.IComparable`1" />, prawie zawsze także implementować <see cref="T:System.IEquatable`1" />.</para>
        <para>Należy pamiętać, że niektóre projekty, gdy typem obsługuje relacji zamówienia, ale równości mogą się różnić od szeregowania relacji. Należy wziąć pod uwagę `Person` klasy, gdzie sortowanie w kolejności alfabetycznej. Dwie osoby o takiej samej nazwie sortowania takie same, ale nie są ta sama osoba.</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="282e7-110">
          <para>Replace the type parameter of the <see cref="T:System.IEquatable`1" /> interface with the type that is implementing this interface.  If you implement <see cref="T:System.IEquatable`1" />, you should also override the base class implementations of <see cref="M:System.Object.Equals(System.Object)" /> and <see cref="M:System.Object.GetHashCode" /> so that their behavior is consistent with that of the <see cref="M:System.IEquatable`1.Equals(`0)" /> method. If you do override <see cref="M:System.Object.Equals(System.Object)" />, your overridden implementation is also called in calls to the static <see langword="Equals(System.Object, System.Object)" /> method on your class. In addition, you should overload the <see langword="op_Equality" /> and <see langword="op_Inequality" /> operators. This ensures that all tests for equality return consistent results.  <block subset="none" type="note"><para> For information on overriding <see cref="M:System.Object.Equals(System.Object)" />, see the <see cref="M:System.Object.Equals(System.Object)" /> article.  </para></block>  For a value type, you should always implement <see cref="T:System.IEquatable`1" /> and override <see cref="M:System.Object.Equals(System.Object)" /> for better performance. <see cref="M:System.Object.Equals(System.Object)" /> boxes value types and relies on reflection to compare two values for equality. Both your implementation of <see cref="M:System.IEquatable`1.Equals(`0)" /> and your override of <see cref="M:System.Object.Equals(System.Object)" /> should return consistent results.  If you implement <see cref="T:System.IEquatable`1" />, you should also implement <see cref="T:System.IComparable`1" /> if instances of your type can be ordered or sorted. If your type implements <see cref="T:System.IComparable`1" />, you almost always also implement <see cref="T:System.IEquatable`1" />.</para>
          <para>Note that there are some designs where a type supports an order relation, but equality may be distinct from an ordering relation. Consider a `Person` class where you sort alphabetically. Two people with the same name sort the same, but are not the same person.</para>
        </span>
      </span>
    </block>
    <altmember cref="T:System.IComparable`1" />
    <altmember cref="T:System.IComparable" />
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (T other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(!T other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IEquatable`1.Equals(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(T other);" />
      <MemberSignature Language="F#" Value="abstract member Equals : 'T -&gt; bool" Usage="iEquatable.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="T" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="282e7-111">Obiekt do porównania z tym obiektem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="282e7-111">An object to compare with this object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="282e7-112">Wskazuje, czy bieżący obiekt jest taki sam jak inny obiekt tego samego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="282e7-112">Indicates whether the current object is equal to another object of the same type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="282e7-113">
            <see langword="true" /> Jeśli bieżący obiekt jest równy <paramref name="other" /> parametru; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="282e7-113">
              <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="282e7-114">Implementacja <xref:System.IEquatable%601.Equals%2A> metoda jest przeznaczona do wykonywania testu równości z innego obiektu tego typu `T`, taki sam jak bieżący obiekt.</span><span class="sxs-lookup"><span data-stu-id="282e7-114">The implementation of the <xref:System.IEquatable%601.Equals%2A> method is intended to perform a test for equality with another object of type `T`, the same type as the current object.</span></span> <span data-ttu-id="282e7-115"><xref:System.IEquatable%601.Equals(%600)> Metoda jest wywoływana w następujących okolicznościach:</span><span class="sxs-lookup"><span data-stu-id="282e7-115">The <xref:System.IEquatable%601.Equals(%600)> method is called in the following circumstances:</span></span>  
  
-   <span data-ttu-id="282e7-116">Gdy `Equals` metoda jest wywoływana i `other` argument jest silnie typizowane obiektu typu `T`.</span><span class="sxs-lookup"><span data-stu-id="282e7-116">When the `Equals` method is called and the `other` argument is a strongly-typed object of type `T`.</span></span> <span data-ttu-id="282e7-117">(Jeśli `other` nie jest typu `T`, base <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> metoda jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="282e7-117">(If `other` is not of type `T`, the base <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method is called.</span></span> <span data-ttu-id="282e7-118">Z dwóch metod <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> zapewnia nieco większą wydajność.)</span><span class="sxs-lookup"><span data-stu-id="282e7-118">Of the two methods, <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> offers slightly better performance.)</span></span>  
  
-   <span data-ttu-id="282e7-119">Kiedy są wywoływane metody wyszukiwania liczby obiektów kolekcji ogólnej.</span><span class="sxs-lookup"><span data-stu-id="282e7-119">When the search methods of a number of generic collection objects are called.</span></span> <span data-ttu-id="282e7-120">Niektóre z tych typów i metod ich następujące:</span><span class="sxs-lookup"><span data-stu-id="282e7-120">Some of these types and their methods include the following:</span></span>  
  
    -   <span data-ttu-id="282e7-121">Niektóre z przeciążenia ogólne <xref:System.Array.BinarySearch%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="282e7-121">Some of the generic overloads of the <xref:System.Array.BinarySearch%2A> method.</span></span>  
  
    -   <span data-ttu-id="282e7-122">Metody wyszukiwania <xref:System.Collections.Generic.List%601> klasy, łącznie z <xref:System.Collections.Generic.List%601.Contains%28%600%29?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.LastIndexOf%2A?displayProperty=nameWithType>, i <xref:System.Collections.Generic.List%601.Remove%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="282e7-122">The search methods of the <xref:System.Collections.Generic.List%601> class, including <xref:System.Collections.Generic.List%601.Contains%28%600%29?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.LastIndexOf%2A?displayProperty=nameWithType>, and <xref:System.Collections.Generic.List%601.Remove%2A?displayProperty=nameWithType>.</span></span>  
  
    -   <span data-ttu-id="282e7-123">Metody wyszukiwania <xref:System.Collections.Generic.Dictionary%602> klasy, łącznie z <xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A> i <xref:System.Collections.Generic.IDictionary%602.Remove%2A>.</span><span class="sxs-lookup"><span data-stu-id="282e7-123">The search methods of the <xref:System.Collections.Generic.Dictionary%602> class, including <xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A> and <xref:System.Collections.Generic.IDictionary%602.Remove%2A>.</span></span>  
  
    -   <span data-ttu-id="282e7-124">Metody wyszukiwania ogólnego <xref:System.Collections.Generic.LinkedList%601> klasy, łącznie z <xref:System.Collections.Generic.LinkedList%601.Contains%2A?displayProperty=nameWithType> i <xref:System.Collections.Generic.LinkedList%601.Remove%2A>.</span><span class="sxs-lookup"><span data-stu-id="282e7-124">The search methods of the generic <xref:System.Collections.Generic.LinkedList%601> class, including <xref:System.Collections.Generic.LinkedList%601.Contains%2A?displayProperty=nameWithType> and <xref:System.Collections.Generic.LinkedList%601.Remove%2A>.</span></span>  
  
 <span data-ttu-id="282e7-125">Oznacza to, aby obsłużyć taką możliwość, że obiekty klasy będą przechowywane w tablicy lub obiektu kolekcji ogólnej, to dobry pomysł, aby zaimplementować <xref:System.IEquatable%601> tak, aby obiekt można łatwo zidentyfikować i manipulować.</span><span class="sxs-lookup"><span data-stu-id="282e7-125">In other words, to handle the possibility that objects of a class will be stored in an array or a generic collection object, it is a good idea to implement <xref:System.IEquatable%601> so that the object can be easily identified and manipulated.</span></span>  
  
 <span data-ttu-id="282e7-126">Podczas implementowania <xref:System.IEquatable%601.Equals%2A> metody definiowania równości odpowiednio dla typu określonego przez argument typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="282e7-126">When implementing the <xref:System.IEquatable%601.Equals%2A> method, define equality appropriately for the type specified by the generic type argument.</span></span> <span data-ttu-id="282e7-127">Na przykład, jeśli argument typu jest <xref:System.Int32>, definiowanie równości odpowiednio do porównywania dwóch liczb całkowitych ze znakiem 32-bitowych.</span><span class="sxs-lookup"><span data-stu-id="282e7-127">For example, if the type argument is <xref:System.Int32>, define equality appropriately for the comparison of two 32-bit signed integers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="282e7-128">W poniższym przykładzie pokazano częściową implementację programu `Person` klasę, która implementuje <xref:System.IEquatable%601> i ma dwie właściwości `LastName` i `SSN`.</span><span class="sxs-lookup"><span data-stu-id="282e7-128">The following example shows the partial implementation of a `Person` class that implements <xref:System.IEquatable%601> and has two properties, `LastName` and `SSN`.</span></span> <span data-ttu-id="282e7-129"><xref:System.IEquatable%601.Equals%2A> Metoda zwraca `True` Jeśli `SSN` właściwości dwóch `Person` obiektów jest identyczna; w przeciwnym razie zwraca `False`.</span><span class="sxs-lookup"><span data-stu-id="282e7-129">The <xref:System.IEquatable%601.Equals%2A> method returns `True` if the `SSN` property of two `Person` objects is identical; otherwise, it returns `False`.</span></span>  
  
 [!code-csharp[System.GenericIEquatable.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/EqualsEx2.cs#3)]
 [!code-vb[System.GenericIEquatable.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/EqualsEx2.vb#3)]  
  
 <span data-ttu-id="282e7-130">`Person` następnie można przechowywać obiekty w <xref:System.Collections.Generic.List%601> obiektu i mogą być identyfikowane przez `Contains` metody, jak w poniższym przykładzie pokazano.</span><span class="sxs-lookup"><span data-stu-id="282e7-130">`Person` objects can then be stored in a <xref:System.Collections.Generic.List%601> object and can be identified by the `Contains` method, as the following example shows.</span></span>  
  
 [!code-csharp[System.GenericIEquatable.Equals#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/Snippet12.cs#12)]
 [!code-vb[System.GenericIEquatable.Equals#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/Snippet12.vb#12)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="282e7-131">
            <para>W przypadku zaimplementowania <see cref="M:System.IEquatable`1.Equals(`0)" />, należy również zastąpić implementacji klasy podstawowej <see cref="M:System.Object.Equals(System.Object)" /> i <see cref="M:System.Object.GetHashCode" /> tak, aby ich zachowanie było spójne z tymi, które <see cref="M:System.IEquatable`1.Equals(`0)" /> metody. Jeśli zastąpisz <see cref="M:System.Object.Equals(System.Object)" />, zastąpiona implementacji nazywa się również w wywołaniach statycznych <see langword="Equals(System.Object, System.Object)" /> metody w klasie. Ponadto powinien przeciążać <see langword="op_Equality" /> i <see langword="op_Inequality" /> operatorów. Daje to gwarancję, że wszystkie testy pod kątem równości zwracają spójne wyniki, co pokazano w przykładzie.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="282e7-131">
              <para>If you implement <see cref="M:System.IEquatable`1.Equals(`0)" />, you should also override the base class implementations of <see cref="M:System.Object.Equals(System.Object)" /> and <see cref="M:System.Object.GetHashCode" /> so that their behavior is consistent with that of the <see cref="M:System.IEquatable`1.Equals(`0)" /> method. If you do override <see cref="M:System.Object.Equals(System.Object)" />, your overridden implementation is also called in calls to the static <see langword="Equals(System.Object, System.Object)" /> method on your class. In addition, you should overload the <see langword="op_Equality" /> and <see langword="op_Inequality" /> operators. This ensures that all tests for equality return consistent results, which the example illustrates.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>