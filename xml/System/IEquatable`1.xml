<Type Name="IEquatable&lt;T&gt;" FullName="System.IEquatable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f169ba3e3ec57eac1b6bb82d978c55c2b059e3fb" /><Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="12/01/2018" /><Meta Name="ms.locfileid" Value="52737432" /></Metadata><TypeSignature Language="C#" Value="public interface IEquatable&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEquatable`1&lt;T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IEquatable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEquatable(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEquatable" />
  <TypeSignature Language="F#" Value="type IEquatable&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">Typ obiektów do porównania.</typeparam>
    <summary>Definiuje metodę uogólniony, implementujący do utworzenia metody typu określania równości wystąpienia typu wartości lub klasy.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten interfejs jest implementowany przez typy, których wartości mogą być utożsamia (na przykład liczbowe i ciągu klasy). Typ wartości lub klasa implementuje <xref:System.IEquatable%601.Equals%2A> metodę w celu utworzenia metody typu odpowiedniego do określania równości wystąpień.  
  
> [!NOTE]
>  <xref:System.IComparable%601> Interfejs definiuje <xref:System.IComparable%601.CompareTo%2A> metody, która określa kolejność sortowania wystąpienia typu implementującego. <xref:System.IEquatable%601> Interfejs definiuje <xref:System.IEquatable%601.Equals%2A> metody, która określa równości wystąpienia typu implementującego.  
  
 <xref:System.IEquatable%601> Interfejs jest wykorzystywany przez obiekty kolekcji ogólnych, takich jak <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.Generic.List%601>, i <xref:System.Collections.Generic.LinkedList%601> podczas testowania pod kątem równości w metodami, takimi jak `Contains`, `IndexOf`, `LastIndexOf`, i `Remove`. Powinny zostać wdrożone dla dowolnego obiektu, które mogą być przechowywane w kolekcji ogólnych.  
  
   
  
## Examples  
 Zobacz przykład <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> metody.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Zastąp parametr typu <see cref="T:System.IEquatable`1" /> interfejsu z typem, który implementuje ten interfejs.  
  
W przypadku zaimplementowania <see cref="T:System.IEquatable`1" />, należy również zastąpić implementacji klasy podstawowej <see cref="M:System.Object.Equals(System.Object)" /> i <see cref="M:System.Object.GetHashCode" /> tak, aby ich zachowanie było spójne z tymi, które <see cref="M:System.IEquatable`1.Equals(`0)" /> metody. Jeśli zastąpisz <see cref="M:System.Object.Equals(System.Object)" />, zastąpiona implementacji nazywa się również w wywołaniach statycznych <see langword="Equals(System.Object, System.Object)" /> metody w klasie. Ponadto powinien przeciążać <see langword="op_Equality" /> i <see langword="op_Inequality" /> operatorów. Daje to gwarancję, że wszystkie testy pod kątem równości zwracają spójne wyniki.  
  
 <block subset="none" type="note"><para>  
 Aby uzyskać informacji o zastępowanie <see cref="M:System.Object.Equals(System.Object)" />, zobacz <see cref="M:System.Object.Equals(System.Object)" /> artykułu.  
  
</para></block>  
  
 Dla typu wartości, należy zawsze wdrożenia <see cref="T:System.IEquatable`1" /> i zastąpić <see cref="M:System.Object.Equals(System.Object)" /> zapewnienia lepszej wydajności. <see cref="M:System.Object.Equals(System.Object)" /> pola typy wartości i opiera się na podstawie odbicia, aby porównać dwie wartości dla równości. Zarówno implementacji <see cref="M:System.IEquatable`1.Equals(`0)" /> i zastąpienie metody <see cref="M:System.Object.Equals(System.Object)" /> powinna zwrócić spójne wyniki.  
  
W przypadku zaimplementowania <see cref="T:System.IEquatable`1" />, należy także zaimplementować <see cref="T:System.IComparable`1" /> w przypadku wystąpienia tego typu mogą być uporządkowane lub sortowania. Jeśli Twój typ implementuje <see cref="T:System.IComparable`1" />, prawie zawsze także implementować <see cref="T:System.IEquatable`1" />.</para>
      <para>Należy pamiętać, że nie istnieją niektóre projekty, gdy typem obsługuje relacji zamówienia, ale równości mogą się różnić od szeregowania relacji. Należy wziąć pod uwagę `Person` klasy, gdzie sortowanie w kolejności alfabetycznej. Dwie osoby o takiej samej nazwie sortowania takie same, ale nie są ta sama osoba.</para></block>
    <altmember cref="T:System.IComparable`1" />
    <altmember cref="T:System.IComparable" />
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (T other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(!T other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IEquatable`1.Equals(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(T other);" />
      <MemberSignature Language="F#" Value="abstract member Equals : 'T -&gt; bool" Usage="iEquatable.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="T" />
      </Parameters>
      <Docs>
        <param name="other">Obiekt do porównania z tym obiektem.</param>
        <summary>Wskazuje, czy bieżący obiekt jest taki sam jak inny obiekt tego samego typu.</summary>
        <returns><see langword="true" /> Jeśli bieżący obiekt jest równy <paramref name="other" /> parametru; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementacja <xref:System.IEquatable%601.Equals%2A> metoda jest przeznaczona do wykonywania testu równości z innego obiektu tego typu `T`, taki sam jak bieżący obiekt. <xref:System.IEquatable%601.Equals(%600)> Metoda jest wywoływana w następujących okolicznościach:  
  
-   Gdy `Equals` metoda jest wywoływana i `other` argument jest silnie typizowane obiektu typu `T`. (Jeśli `other` nie jest typu `T`, base <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> metoda jest wywoływana. Z dwóch metod <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> zapewnia nieco większą wydajność.)  
  
-   Kiedy są wywoływane metody wyszukiwania liczby obiektów kolekcji ogólnej. Niektóre z tych typów i metod ich następujące:  
  
    -   Niektóre z przeciążenia ogólne <xref:System.Array.BinarySearch%2A> metody.  
  
    -   Metody wyszukiwania <xref:System.Collections.Generic.List%601> klasy, łącznie z <xref:System.Collections.Generic.List%601.Contains%28%600%29?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.LastIndexOf%2A?displayProperty=nameWithType>, i <xref:System.Collections.Generic.List%601.Remove%2A?displayProperty=nameWithType>.  
  
    -   Metody wyszukiwania <xref:System.Collections.Generic.Dictionary%602> klasy, łącznie z <xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A> i <xref:System.Collections.Generic.IDictionary%602.Remove%2A>.  
  
    -   Metody wyszukiwania ogólnego <xref:System.Collections.Generic.LinkedList%601> klasy, łącznie z <xref:System.Collections.Generic.LinkedList%601.Contains%2A?displayProperty=nameWithType> i <xref:System.Collections.Generic.LinkedList%601.Remove%2A>.  
  
 Oznacza to, aby obsłużyć taką możliwość, że obiekty klasy będą przechowywane w tablicy lub obiektu kolekcji ogólnej, to dobry pomysł, aby zaimplementować <xref:System.IEquatable%601> tak, aby obiekt można łatwo zidentyfikować i manipulować.  
  
 Podczas implementowania <xref:System.IEquatable%601.Equals%2A> metody definiowania równości odpowiednio dla typu określonego przez argument typu ogólnego. Na przykład, jeśli argument typu jest <xref:System.Int32>, definiowanie równości odpowiednio do porównywania dwóch liczb całkowitych ze znakiem 32-bitowych.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano częściową implementację programu `Person` klasę, która implementuje <xref:System.IEquatable%601> i ma dwie właściwości `LastName` i `SSN`. <xref:System.IEquatable%601.Equals%2A> Metoda zwraca `True` Jeśli `SSN` właściwości dwóch `Person` obiektów jest identyczna; w przeciwnym razie zwraca `False`.  
  
 [!code-csharp[System.GenericIEquatable.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/EqualsEx2.cs#3)]
 [!code-vb[System.GenericIEquatable.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/EqualsEx2.vb#3)]  
  
 `Person` następnie można przechowywać obiekty w <xref:System.Collections.Generic.List%601> obiektu i mogą być identyfikowane przez `Contains` metody, jak w poniższym przykładzie pokazano.  
  
 [!code-csharp[System.GenericIEquatable.Equals#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/Snippet12.cs#12)]
 [!code-vb[System.GenericIEquatable.Equals#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/Snippet12.vb#12)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>W przypadku zaimplementowania <see cref="M:System.IEquatable`1.Equals(`0)" />, należy również zastąpić implementacji klasy podstawowej <see cref="M:System.Object.Equals(System.Object)" /> i <see cref="M:System.Object.GetHashCode" /> tak, aby ich zachowanie było spójne z tymi, które <see cref="M:System.IEquatable`1.Equals(`0)" /> metody. Jeśli zastąpisz <see cref="M:System.Object.Equals(System.Object)" />, zastąpiona implementacji nazywa się również w wywołaniach statycznych <see langword="Equals(System.Object, System.Object)" /> metody w klasie. Ponadto powinien przeciążać <see langword="op_Equality" /> i <see langword="op_Inequality" /> operatorów. Daje to gwarancję, że wszystkie testy pod kątem równości zwracają spójne wyniki, co pokazano w przykładzie.</para></block>
      </Docs>
    </Member>
  </Members>
</Type>