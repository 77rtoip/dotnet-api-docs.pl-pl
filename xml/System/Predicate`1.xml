<Type Name="Predicate&lt;T&gt;" FullName="System.Predicate&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cb5fc5b302f7803870d563f96c660b043c9450c0" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69419537" /></Metadata><TypeSignature Language="C#" Value="public delegate bool Predicate&lt;in T&gt;(T obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Predicate`1&lt;- T&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Predicate`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Predicate(Of In T)(obj As T) As Boolean " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate bool Predicate(T obj);" />
  <TypeSignature Language="F#" Value="type Predicate&lt;'T&gt; = delegate of 'T -&gt; bool" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="obj" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Boolean</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">Typ obiektu do porównania.</typeparam>
    <param name="obj">Obiekt, który ma zostać porównany z kryteriami zdefiniowanymi w metodzie reprezentowanej przez tego delegata.</param>
    <summary>Reprezentuje metodę, która definiuje zestaw kryteriów i określa, czy określony obiekt spełnia te kryteria.</summary>
    <returns><see langword="true" />Jeśli <paramref name="obj" /> spełnia kryteria zdefiniowane w metodzie reprezentowanej przez tego delegata; <see langword="false" />w przeciwnym razie.</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten delegat jest używany przez kilka metod <xref:System.Array> klasy i <xref:System.Collections.Generic.List%601> do wyszukiwania elementów w kolekcji.  
  
 <xref:System.Predicate%601> Zazwyczaj delegat jest reprezentowany przez wyrażenie lambda. Ze względu na to, że zmienne o zakresie lokalnym są dostępne dla wyrażenia lambda, można łatwo sprawdzić warunek, który nie jest precyzyjnie znany w czasie kompilacji. Jest to symulowane w poniższym przykładzie, który definiuje `HockeyTeam` klasę, która zawiera informacje o krajowym zespole kija hokejowego League i roku, w którym został on uwzględniony. W przykładzie zdefiniowano tablicę wartości całkowitych, które reprezentują lata i losowo przypisuje jeden element tablicy do `foundedBeforeYear`, który jest zmienną, która znajduje się lokalnie w zakresie `Main` metody przykładu. Ze względu na to, że zmienne o zakresie lokalnym są dostępne dla wyrażenia lambda, wyrażenie <xref:System.Collections.Generic.List%601.FindAll%2A?displayProperty=nameWithType> lambda przesłane do metody jest w `HockeyTeam` stanie zwrócić obiekt dla każdego zespołu z zamiaru lub przed nim.  
  
 [!code-csharp[System.Predicate\`1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicate1.cs#3)]
 [!code-vb[System.Predicate\`1#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicate1.vb#3)]  
  
   
  
## Examples  
 Poniższy przykład kodu używa <xref:System.Predicate%601> delegata <xref:System.Array.Find%2A?displayProperty=nameWithType> z metodą <xref:System.Drawing.Point> do wyszukiwania tablicy struktury. Przykład jawnie definiuje <xref:System.Predicate%601> delegata o nazwie `predicate` i przypisuje mu metodę o `FindPoints` nazwie, `true` która zwraca, jeśli iloczyn <xref:System.Drawing.Point.X%2A?displayProperty=nameWithType> i <xref:System.Drawing.Point.Y%2A?displayProperty=nameWithType> pola jest większy niż 100 000. Należy zauważyć, że jest to niestandardowe użycie wyrażenia lambda zamiast jawnie zdefiniować delegata typu <xref:System.Predicate%601>, jak pokazano w drugim przykładzie.  
  
 [!code-csharp[System.Predicate\`1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicateex2.cs#4)]
 [!code-vb[System.Predicate\`1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicateex2.vb#4)]  
  
 Poniższy przykład jest identyczny z poprzednim przykładem, z tą różnicą, że używa wyrażenia lambda do <xref:System.Predicate%601> reprezentowania delegata.  Każdy element `points` tablicy jest przenoszona do wyrażenia lambda, dopóki wyrażenie nie znajdzie elementu, który spełnia kryteria wyszukiwania. W takim przypadku wyrażenie lambda zwraca wartość `true` , jeśli iloczyn pól X i Y jest większy niż 100 000.  
  
 [!code-csharp[System.Predicate\`1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicateex1.cs#2)]
 [!code-vb[System.Predicate\`1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicateex1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Array.Find``1(``0[],System.Predicate{``0})" />
  </Docs>
</Type>
