<Type Name="Predicate&lt;T&gt;" FullName="System.Predicate&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="aec57cef3fed8cea256c30b4abcc1cef689abe97" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37727093" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate bool Predicate&lt;in T&gt;(T obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Predicate`1&lt;- T&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Predicate`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Predicate(Of In T)(obj As T) As Boolean " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate bool Predicate(T obj);" />
  <TypeSignature Language="F#" Value="type Predicate&lt;'T&gt; = delegate of 'T -&gt; bool" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="obj" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Boolean</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">Typ obiektu do porównania.</typeparam>
    <param name="obj">Obiekt do porównania kryteria zdefiniowane w metodzie, reprezentowane przez ten delegat.</param>
    <summary>Reprezentuje metodę, która definiuje określone kryteria i określa, czy określony obiekt spełnia te kryteria.</summary>
    <returns>
      <see langword="true" /> Jeśli <paramref name="obj" /> spełnia kryteria zdefiniowane w metodzie, reprezentowane przez ten delegat; w przeciwnym razie <see langword="false" />.</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten delegat jest używana przez kilka metod <xref:System.Array> i <xref:System.Collections.Generic.List%601> klasy do wyszukiwania elementów w kolekcji.  
  
 Zazwyczaj <xref:System.Predicate%601> delegata jest reprezentowane przez wyrażenie lambda. Zmienne lokalne o określonym zakresie nie są dostępne do wyrażenia lambda, jest łatwy do testowania dla warunku, który nie jest dokładnie znany w czasie kompilacji. Jest to symulowane w poniższym przykładzie, który definiuje `HockeyTeam` klasę, która zawiera informacje o krajowych Ligi Hockey zespołu i roku, w którym została założona. W przykładzie zdefiniowano tablicę wartości całkowitych, które reprezentują lat i losowo przypisuje jeden element w tablicy, aby `foundedBeforeYear`, która jest zmienną, która lokalnie jest ograniczone do omawianego w przykładzie `Main` metody. Zmienne lokalne o określonym zakresie nie są dostępne do wyrażenia lambda, wyrażenia lambda przekazanego <xref:System.Collections.Generic.List%601.FindAll%2A?displayProperty=nameWithType> metoda jest w stanie zwrócić `HockeyTeam` obiekt dla każdego zespołu założona w lub przed tym roku.  
  
 [!code-csharp[System.Predicate\`1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicate1.cs#3)]
 [!code-vb[System.Predicate\`1#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicate1.vb#3)]  
  
   
  
## Examples  
 Poniższy przykład kodu wykorzystuje <xref:System.Predicate%601> delegowanie przy użyciu <xref:System.Array.Find%2A?displayProperty=nameWithType> metodę wyszukiwania tablicę <xref:System.Drawing.Point> struktury. W przykładzie wyraźnie zdefiniowano <xref:System.Predicate%601> delegat o nazwie `predicate` i przypisuje mu metodę o nazwie `FindPoints` zwracającego `true` Jeśli wynikiem <xref:System.Drawing.Point.X%2A?displayProperty=nameWithType> i <xref:System.Drawing.Point.Y%2A?displayProperty=nameWithType> pola jest większa niż 100 000. Zauważ, że wszelkie użycia wyrażenia lambda, a nie umożliwia jawne zdefiniowanie delegat typu <xref:System.Predicate%601>, tak jak pokazano w drugim przykładzie.  
  
 [!code-csharp[System.Predicate\`1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicateex2.cs#4)]
 [!code-vb[System.Predicate\`1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicateex2.vb#4)]  
  
 Poniższy przykład jest identyczny z poprzednim, z tą różnicą, że używa wyrażenia lambda do reprezentowania <xref:System.Predicate%601> delegować.  Każdy element obiektu `points` tablicy jest przekazywany do wyrażenia lambda, dopóki wyrażenie wyszukuje element, który spełnia kryteria wyszukiwania. W tym przypadku wyrażenie lambda zwraca `true` Jeśli produktu X i Y pola jest większa niż 100 000.  
  
 [!code-csharp[System.Predicate\`1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicateex1.cs#2)]
 [!code-vb[System.Predicate\`1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicateex1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Array.Find``1(``0[],System.Predicate{``0})" />
  </Docs>
</Type>