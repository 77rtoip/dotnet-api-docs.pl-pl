<Type Name="IObservable&lt;T&gt;" FullName="System.IObservable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bce716cd0c3354619ffbdd10290d061e39634ace" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69405926" /></Metadata><TypeSignature Language="C#" Value="public interface IObservable&lt;out T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IObservable`1&lt;+ T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IObservable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IObservable(Of Out T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IObservable" />
  <TypeSignature Language="F#" Value="type IObservable&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">Obiekt, który zawiera informacje o powiadomieniach.</typeparam>
    <summary>Definiuje dostawcę powiadomień wypychanych.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Interfejsy <xref:System.IObserver%601> i<xref:System.IObservable%601> zapewniają uogólniony mechanizm powiadomień opartych na wypychaniu, znany również jako Wzorzec projektowy obserwatora. Interfejs reprezentuje klasę, która wysyła powiadomienia (dostawca) <xref:System.IObserver%601> ; interfejs reprezentuje klasę, która otrzymuje je (obserwator). <xref:System.IObservable%601> `T`reprezentuje klasę, która zawiera informacje o powiadomieniach. W niektórych powiadomieniach <xref:System.IObserver%601> wypychanych implementacja i `T` może reprezentować ten sam typ.  
  
 Dostawca musi zaimplementować pojedynczą metodę <xref:System.IObservable%601.Subscribe%2A>, która wskazuje, że obserwator chce otrzymywać powiadomienia oparte na wypychaniu. Wywołujący do metody przekażą wystąpienie obserwatora. Metoda zwraca <xref:System.IDisposable> implementację, która umożliwia obserwatorom anulowanie powiadomień w dowolnym momencie przed zatrzymaniem wysyłania przez dostawcę.  
  
 W danym momencie dany dostawca może mieć zero, jeden lub wiele obserwatorów. Dostawca jest odpowiedzialny za przechowywanie odwołań do obserwatorów i upewnienie się, że są one ważne przed wysłaniem powiadomień. <xref:System.IObservable%601> Interfejs nie przyjmuje żadnych założeń dotyczących liczby obserwatorów ani kolejności, w której wysyłane są powiadomienia.  
  
 Dostawca wysyła następujące trzy rodzaje powiadomień do obserwatora poprzez wywoływanie <xref:System.IObserver%601> metod:  
  
-   Bieżące dane. Dostawca może wywołać <xref:System.IObserver%601.OnNext%2A?displayProperty=nameWithType> metodę, aby przekazać obserwatorowi `T` obiekt, który ma bieżące dane, zmienione dane lub dane świeże.  
  
-   Warunek błędu. Dostawca może wywołać <xref:System.IObserver%601.OnError%2A?displayProperty=nameWithType> metodę, aby powiadomić obserwatora o wystąpieniu błędu.  
  
-   Brak dalszych danych. Dostawca może wywołać <xref:System.IObserver%601.OnCompleted%2A?displayProperty=nameWithType> metodę, aby powiadomić obserwatora, że zakończył wysyłanie powiadomień.  
  
   
  
## Examples  
 Poniższy przykład ilustruje Wzorzec projektowy obserwatora. Definiuje `Location` klasę, która zawiera informacje o szerokości geograficznej i długości geograficznej.  
  
 [!code-csharp[System.IObserver.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#5)]
 [!code-vb[System.IObserver.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#5)]  
  
 `LocationTracker` Klasa<xref:System.IObservable%601> zawiera implementację. Jego `TrackLocation` Metoda jest przenoszona do `Location` obiektu dopuszczającego wartość null, który zawiera dane geograficzne i długości geograficznej. Jeśli wartość nie `null` `TrackLocation` jest<xref:System.IObserver%601.OnNext%2A> , metoda wywołuje metodę każdego obserwatora. `Location`  
  
 [!code-csharp[System.IObserver.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#6)]
 [!code-vb[System.IObserver.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#6)]  
  
 Jeśli wartość jest `null` `LocationUnknownException` , `TrackLocation` Metoda tworzy wystąpienie obiektu, który jest przedstawiony w poniższym przykładzie. `Location` Następnie wywołuje on wszystkie <xref:System.IObserver%601.OnError%2A> metody obserwatora i przekazuje go do `LocationUnknownException` obiektu. Należy zauważyć `LocationUnknownException` , że <xref:System.Exception>pochodzi on z, ale nie dodaje żadnych nowych członków.  
  
 [!code-csharp[System.IObserver.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#7)]
 [!code-vb[System.IObserver.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#7)]  
  
 Obserwatorzy rejestrują się w celu otrzymywania powiadomień z `TrackLocation` obiektu przez wywołanie jego <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> metody, która przypisuje odwołanie do obiektu obserwatora do prywatnego <xref:System.Collections.Generic.List%601> obiektu ogólnego. Metoda zwraca `Unsubscriber` obiekt, który <xref:System.IDisposable> jest implementacją, która umożliwia obserwatorom zaprzestanie otrzymywania powiadomień. `LocationTracker` Klasa zawiera`EndTransmission` również metodę. Gdy żadne dalsze dane lokalizacji nie są dostępne, metoda wywołuje każdą <xref:System.IObserver%601.OnCompleted%2A> metodę obserwatora, a następnie czyści wewnętrzną listę obserwatorów.  
  
 W tym przykładzie `LocationReporter` Klasa <xref:System.IObserver%601> zawiera implementację. Informacje o bieżącej lokalizacji są wyświetlane w konsoli programu. Jego Konstruktor zawiera `name` parametr, który `LocationReporter` umożliwia wystąpienie, aby można było identyfikować siebie w danych wyjściowych ciągu. Zawiera `Subscribe` również metodę, która otacza wywołanie <xref:System.IObservable%601.Subscribe%2A> metody dostawcy. Umożliwia to metodu przypisanie zwróconego <xref:System.IDisposable> odwołania do zmiennej prywatnej. Klasa zawiera również <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> metodę, która wywołuje metodęobiektu,któryjestzwracanyprzezmetodę.<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> `Unsubscribe` `LocationReporter` Poniższy kod definiuje `LocationReporter` klasę.  
  
 [!code-csharp[System.IObserver.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#8)]
 [!code-vb[System.IObserver.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#8)]  
  
 Poniższy kod tworzy wystąpienie dostawcy i obserwatora.  
  
 [!code-csharp[System.IObserver.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/program.cs#9)]
 [!code-vb[System.IObserver.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/module1.vb#9)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IObserver`1" />
    <related type="Article" href="https://msdn.microsoft.com/library/3680171f-f522-453c-aa4a-54f755a78f88">Wzorzec projektowy obserwatora</related>
  </Docs>
  <Members>
    <Member MemberName="Subscribe">
      <MemberSignature Language="C#" Value="public IDisposable Subscribe (IObserver&lt;out T&gt; observer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IDisposable Subscribe(class System.IObserver`1&lt;!T&gt; observer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IObservable`1.Subscribe(System.IObserver{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Subscribe (observer As IObserver(Of Out T)) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IDisposable ^ Subscribe(IObserver&lt;T&gt; ^ observer);" />
      <MemberSignature Language="F#" Value="abstract member Subscribe : IObserver&lt;'T&gt; -&gt; IDisposable" Usage="iObservable.Subscribe observer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="observer" Type="System.IObserver&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="observer">Obiekt, który ma otrzymywać powiadomienia.</param>
        <summary>Powiadamia dostawcę o tym, że obserwator otrzymuje powiadomienia.</summary>
        <returns>Odwołanie do interfejsu, który umożliwia obserwatorom zaprzestanie otrzymywania powiadomień, zanim dostawca zakończył ich wysyłanie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda <xref:System.IObservable%601.Subscribe%2A> musi zostać wywołana, aby zarejestrować obserwatora na potrzeby powiadomień wypychanych. Typowa implementacja <xref:System.IObservable%601.Subscribe%2A> metody wykonuje następujące czynności:  
  
-   Przechowuje odwołanie do obserwatora w obiekcie kolekcji, takim jak <xref:System.Collections.Generic.List%601> obiekt.  
  
-   Zwraca odwołanie do <xref:System.IDisposable> interfejsu. Dzięki temu obserwatorzy mogą anulować subskrypcję (to oznacza, aby zrezygnować z otrzymywania powiadomień), zanim dostawca ukończy ich wysyłanie i wezwał <xref:System.IObserver%601.OnCompleted%2A> metodę subskrybenta.  
  
 W danym momencie określone wystąpienie <xref:System.IObservable%601> implementacji jest odpowiedzialne za obsługę wszystkich subskrypcji i powiadamianie wszystkich subskrybentów. Chyba że dokumentacja konkretnej <xref:System.IObservable%601> implementacji wskazuje w inny sposób, obserwatorzy nie powinni wprowadzać żadnych założeń <xref:System.IObservable%601> dotyczących implementacji, takich jak kolejność powiadomień, które otrzymają wiele obserwatorów.  
  
   
  
## Examples  
 Poniższy przykład ilustruje <xref:System.IObservable%601.Subscribe%2A> metodę dla aplikacji, która raportuje informacje o szerokości geograficznej i długości geograficznej. Definiuje <xref:System.Collections.Generic.IList%601> obiekt kolekcji, który przechowuje odwołania do wszystkich obserwatorów. Zwraca również klasę prywatną o nazwie `Unsubscriber` <xref:System.IDisposable> implementującej interfejs i umożliwia subskrybentom zaprzestanie otrzymywania powiadomień o zdarzeniach.  Zapoznaj się z przykładową <xref:System.IObservable%601> sekcją w temacie, aby zapoznać się z kompletnym przykładem.  
  
 [!code-csharp[System.IObserver.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#13)]
 [!code-vb[System.IObserver.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#13)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IObserver`1" />
      </Docs>
    </Member>
  </Members>
</Type>
