<Type Name="TimeZoneInfo" FullName="System.TimeZoneInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3190022f4f0c8167570d4dfa17fea05691d4aa2b" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36429353" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class TimeZoneInfo : IEquatable&lt;TimeZoneInfo&gt;, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit TimeZoneInfo extends System.Object implements class System.IEquatable`1&lt;class System.TimeZoneInfo&gt;, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.TimeZoneInfo" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TimeZoneInfo&#xA;Implements IDeserializationCallback, IEquatable(Of TimeZoneInfo), ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TimeZoneInfo sealed : IEquatable&lt;TimeZoneInfo ^&gt;, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type TimeZoneInfo = class&#xA;    interface IEquatable&lt;TimeZoneInfo&gt;&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.TimeZoneInfo&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje wszystkie strefy czasowej na świecie.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Strefę czasową to region geograficzny, w którym jest używane jednocześnie.  
  
 <xref:System.TimeZoneInfo> Klasy oferuje istotne ulepszenia w stosunku do <xref:System.TimeZone> klasy, która zawiera tylko ograniczoną funkcjonalność.  
  
 <xref:System.TimeZone> Klasy rozpoznaje tylko w lokalnej strefie czasowej i przekonwertować czasu między uniwersalny czas koordynowany (UTC) a czasem lokalnym. A <xref:System.TimeZoneInfo> object może reprezentować żadnych stref czasowych i metod <xref:System.TimeZoneInfo> klasa może być używana do przekonwertowania na odpowiedni czas w dowolnej strefie czasowej czasu w jednej strefie czasowej. Elementy członkowskie <xref:System.TimeZoneInfo> klasa obsługuje następujące operacje:  
  
-   Pobieranie strefy czasowej, który jest już zdefiniowany przez system operacyjny.  
  
-   Wyliczanie stref czasowych, które są dostępne w systemie.  
  
-   Konwertowanie godzin między strefami czasowymi inny.  
  
-   Tworzenie nowej strefy czasowej, który nie jest już zdefiniowany przez system operacyjny.  
  
-   Serializacja strefę czasową dla nowszej pobierania.  
  
> [!NOTE]
>  Wystąpienie <xref:System.TimeZoneInfo> klasy nie można modyfikować. Po utworzeniu wystąpienia obiektu, nie można modyfikować jej wartości.  
  
 Nie można utworzyć wystąpienia <xref:System.TimeZoneInfo> przy użyciu `new` — słowo kluczowe. Zamiast tego należy wywołać jeden statyczny element członkowski <xref:System.TimeZoneInfo> klasy pokazano w poniższej tabeli.  
  
|Statyczny element członkowski|Opis|  
|------------------------|-----------------|  
|<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> — Metoda|Tworzy niestandardowe strefy czasowej z danymi dostarczonymi przez aplikację.|  
|<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> — Metoda|Tworzy strefę czasową zdefiniowana w rejestrze systemu na podstawie identyfikatora strefy.|  
|<xref:System.TimeZoneInfo.FromSerializedString%2A> — Metoda|Deserializuje wartość ciągu, aby ponownie utworzyć wcześniej serializacji <xref:System.TimeZoneInfo> obiektu.|  
|<xref:System.TimeZoneInfo.GetSystemTimeZones%2A> — Metoda|Zwraca element wyliczalny <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> z <xref:System.TimeZoneInfo> obiektów, które reprezentuje wszystkich stref czasowych, które są dostępne w systemie lokalnym.|  
|<xref:System.TimeZoneInfo.Local%2A> Właściwość|Tworzy wystąpienie <xref:System.TimeZoneInfo> obiekt, który reprezentuje w lokalnej strefie czasowej.|  
|<xref:System.TimeZoneInfo.Utc%2A> Właściwość|Tworzy wystąpienie <xref:System.TimeZoneInfo> obiekt, który reprezentuje strefy UTC.|  
  
 Można użyć <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metodę, aby utworzyć strefę czasową, która nie jest zdefiniowana w rejestrze systemu lokalnego. Następnie można użyć <xref:System.TimeZoneInfo.ToSerializedString%2A> właściwości można zapisać informacji o obiekcie strefy czasowej jako ciąg znaków, które mogą być przechowywane w niektórych formularz, który jest dostępny dla aplikacji. Można użyć <xref:System.TimeZoneInfo.FromSerializedString%2A> metodę, aby przekonwertować serializacji ciągu z powrotem do <xref:System.TimeZoneInfo> obiektu.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BaseUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan BaseUtcOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan BaseUtcOffset" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.BaseUtcOffset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseUtcOffset As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan BaseUtcOffset { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseUtcOffset : TimeSpan" Usage="System.TimeZoneInfo.BaseUtcOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera odstęp czasu między bieżącej strefy czasowej (czas standardowy) i uniwersalny czas koordynowany (UTC).</summary>
        <value>Obiekt, który wskazuje odstęp czasu między bieżącej strefy czasowej (czas standardowy) i uniwersalny czas koordynowany (UTC).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przedział czasu zwrócony przez <xref:System.TimeZoneInfo.BaseUtcOffset%2A> właściwości mogą należeć do zakresu od 14 godzin (dla strefy czasowej, która jest 14 godzin przed uniwersalny czas koordynowany (UTC))-14 godzin (dla strefy czasowej, która jest 14 godzin za UTC). Strefy czasowe są wcześniejsze UTC mają przesunięcie dodatnią; strefy czasowe, które znajdują się za UTC ma ujemne przesunięcie.  
  
 <xref:System.TimeZoneInfo.BaseUtcOffset%2A> Wartość jest reprezentowany jako całkowitą liczbę minut. Nie może zawierać ułamkowych liczbę minut.  
  
> [!NOTE]
>  Ponieważ <xref:System.TimeZoneInfo.BaseUtcOffset%2A> jest właściwością <xref:System.TimeZoneInfo> obiektu, a nie <xref:System.TimeZoneInfo.AdjustmentRule> obiektu <xref:System.TimeZoneInfo> klasy dotyczy jednego przesunięcie od czasu UTC wszystkie strefy czasowej. Do strefy czasowej, który zmodyfikował jego przesunięcie od czasu UTC, należy utworzyć nowe przy użyciu strefy czasowej <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metody.  
  
 <xref:System.TimeZoneInfo.BaseUtcOffset%2A> Właściwości różni się od <xref:System.TimeZoneInfo.GetUtcOffset%2A> metody w następujący sposób:  
  
-   <xref:System.TimeZoneInfo.BaseUtcOffset%2A> Właściwość zwraca różnicę między czasem UTC i strefy czasowej (czas standardowy); <xref:System.TimeZoneInfo.GetUtcOffset%2A> metoda zwraca różnicę między czasem UTC i czasem strefę czasową w określonym punkcie w czasie.  
  
-   <xref:System.TimeZoneInfo.GetUtcOffset%2A> Metoda odzwierciedla stosowania żadnych reguł korygowania zgodnie ze strefą czasową; <xref:System.TimeZoneInfo.BaseUtcOffset%2A> nie obsługuje właściwości.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.TimeZoneInfo.BaseUtcOffset%2A> właściwości do wyświetlenia różnicy między czasem lokalnym i uniwersalny czas koordynowany (UTC).  
  
 [!code-csharp[System.TimeZone2.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#1)]
 [!code-vb[System.TimeZone2.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.TimeZoneInfo.GetUtcOffset" />
      </Docs>
    </Member>
    <Member MemberName="ClearCachedData">
      <MemberSignature Language="C#" Value="public static void ClearCachedData ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearCachedData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ClearCachedData" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearCachedData ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearCachedData();" />
      <MemberSignature Language="F#" Value="static member ClearCachedData : unit -&gt; unit" Usage="System.TimeZoneInfo.ClearCachedData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Czyści dane strefy czasowej z pamięci podręcznej.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dane buforowane strefy czasowej obejmują dane dotyczące lokalnej strefy czasowej, strefy uniwersalny czas koordynowany (UTC) i wszelkich stref czasowych, które są pobierane przy użyciu metod, takich jak <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> i <xref:System.TimeZoneInfo.GetSystemTimeZones%2A>.  
  
 Może wywołać <xref:System.TimeZoneInfo.ClearCachedData%2A> metodę, aby zmniejszyć ilość pamięci przeznaczone do aplikacji buforowania informacji o strefie czasowej lub w celu odzwierciedlenia faktu, że strefa czasowa systemu lokalnego została zmieniona.  
  
 Nie zaleca się do przechowywania odwołań do stref czasowych UTC i lokalnych. Po wywołaniu <xref:System.TimeZoneInfo.ClearCachedData%2A> metody tych zmiennych obiektu będzie Niezdefiniowany <xref:System.TimeZoneInfo> obiektów, które nie są już odwołania do <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> lub <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>. Na przykład w poniższym kodzie drugi wywołanie <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> metoda zgłasza <xref:System.ArgumentException> ponieważ `local` zmiennej przestaje być uważany za równa <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.TimeZone2.BestPractices#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/cs/System.TimeZone2.BestPractices.cs#1)]
 [!code-vb[System.TimeZone2.BestPractices#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/vb/System.TimeZone2.BestPractices.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje godzinę na czas, w szczególności strefy czasowej.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTime(valuetype System.DateTime dateTime, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTime (dateTime, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">Data i godzina, które można przekonwertować.</param>
        <param name="destinationTimeZone">Strefa czasowa przekonwertować <c>dateTime</c> do.</param>
        <summary>Konwertuje godzinę na czas, w szczególności strefy czasowej.</summary>
        <returns>Data i godzina w strefie czasowej docelowego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas wykonywania konwersji, <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29> metoda stosowana żadnych reguł korygowania obowiązująca w `destinationTimeZone` strefy czasowej.  
  
 To przeciążenie metody <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> metoda Określa źródłową strefą czasową od wartości `dateTime` parametru <xref:System.DateTime.Kind%2A> właściwości, jak to pokazano w poniższej tabeli.  
  
|Wartość właściwości Kind|Strefa czasowa źródła|Zachowanie — metoda|  
|-------------------------|----------------------|---------------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>|Konwertuje lokalnego czasu na czas w `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A>|Konwertuje godzinę w uniwersalnego czasu koordynowanego (UTC) `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Zakłada się, że <xref:System.TimeZoneInfo.Local%2A>.|Konwertuje lokalnego czasu na czas w `destinationTimeZone`.|  
  
 <xref:System.DateTime.Kind%2A> Właściwości zwracana <xref:System.DateTime> wartość jest ustawiona, jak pokazano w poniższej tabeli.  
  
|Warunek|Zwracana wartość właściwość Kind|  
|---------------|----------------------------------|  
|`destinationTimeZone` Jest <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|`destinationTimeZone` Jest <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|Wszystkie inne wartości daty i godziny i strefy czasowe docelowego.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 Jeśli wartość `dateTime` parametr jest niejednoznaczny czasu lokalnego, jest interpretowany jako (czas standardowy). Jeśli `dateTime` parametr jest nieprawidłowy czasu lokalnego, ta metoda zgłasza <xref:System.ArgumentException>.  
  
 Jeśli konwersji `dateTime` wynikiem jest wartość daty i godziny jest starsza niż <xref:System.DateTime.MinValue?displayProperty=nameWithType> lub nowszej niż <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, ta metoda zwraca <xref:System.DateTime.MinValue?displayProperty=nameWithType> lub <xref:System.DateTime.MaxValue?displayProperty=nameWithType>odpowiednio.  
  
 Można także przekonwertować przez wywołanie do lub z UTC <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> i <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład konwertuje tablicę wartości daty i godziny razy w strefie czasowej Wschodniej Stanów Zjednoczonych i Kanady. Pokazuje, że źródłową strefą czasową zależy od <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> właściwości źródła <xref:System.DateTime> wartość. Przedstawiono również który <xref:System.TimeZoneInfo.ConvertTime%2A> metoda przyjmuje ustawienia strefy czasowej pod uwagę, ponieważ korekty strefy czasowej odbywa się w strefach czasowych źródłowym i docelowym o 2:00 na 7 listopada 2010.  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime1.cs#1)]
 [!code-vb[System.TimeZoneInfo.ConvertTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Wartość <paramref name="dateTime" /> parametr reprezentuje nieprawidłową wartość czas.</exception>
        <exception cref="T:System.ArgumentNullException">Wartość <paramref name="destinationTimeZone" /> parametr jest <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Na [! Systemy include[WinXP](~/includes/WinXP-MD.MD)], ta metoda rozpoznaje tylko bieżącej regule korekty podczas wykonywania konwersji, jeśli <paramref name="dateTime" /> jest traktowany jako czas lokalny lub, jeśli <paramref name="destinationTimeZone" /> jest <see cref="P:System.TimeZoneInfo.Local" />. Metoda nie może w związku z tym dokładnie przekonwertować czasu kropki przed wprowadzenia bieżącej regule dopasowania. Aby uzyskać więcej informacji, zobacz Uwagi dotyczące obiektów wywołujących sekcji w <see cref="P:System.TimeZoneInfo.Local" /> właściwości.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ConvertTime (DateTimeOffset dateTimeOffset, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ConvertTime(valuetype System.DateTimeOffset dateTimeOffset, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ConvertTime(DateTimeOffset dateTimeOffset, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTimeOffset * TimeZoneInfo -&gt; DateTimeOffset" Usage="System.TimeZoneInfo.ConvertTime (dateTimeOffset, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Data i godzina, które można przekonwertować.</param>
        <param name="destinationTimeZone">Strefa czasowa przekonwertować <c>dateTime</c> do.</param>
        <summary>Konwertuje godzinę na czas, w szczególności strefy czasowej.</summary>
        <returns>Data i godzina w strefie czasowej docelowego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas wykonywania konwersji, <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29> metoda stosowana żadnych reguł korygowania obowiązująca w `destinationTimeZone` strefy czasowej.  
  
 To przeciążenie różni się od innych przeciążeń <xref:System.TimeZoneInfo.ConvertTime%2A> metody akceptując <xref:System.DateTimeOffset> wartość jako swój pierwszy parametr. Określa datę i godzinę jako przesunięcia z uniwersalnego czasu koordynowanego (UTC), a nie jako datę i godzinę w strefie czasowej określonej. W związku z tym `dateTimeOffset` parametru nie może reprezentować niejednoznaczny czas lub nieprawidłową wartość czas.  
  
 Podczas konwertowania `dateTimeOffset` wartość na czas w strefie czasowej docelowego, ta metoda uwzględnia żadnych reguł korygowania obowiązująca w strefie czasowej docelowego.  
  
 Jeśli konwersji `dateTimeOffset` wynikiem jest wartość daty i godziny jest starsza niż <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> lub nowszej niż <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, ta metoda zwraca <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> lub <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>odpowiednio.  
  
   
  
## Examples  
 Poniższy przykład konwertuje tablicę <xref:System.DateTimeOffset> wartości godziny w strefie czasowej Wschodniej Stanów Zjednoczonych i Kanady. Które zastosowano <xref:System.TimeZoneInfo.ConvertTime%2A> metoda przyjmuje ustawienia strefy czasowej pod uwagę, ponieważ korekty strefy czasowej odbywa się w strefach czasowych źródłowym i docelowym o 2:00 na 7 listopada 2010.  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime2.cs#2)]
 [!code-vb[System.TimeZoneInfo.ConvertTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Wartość <paramref name="destinationTimeZone" /> parametr jest <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Na [! Systemy include[WinXP](~/includes/WinXP-MD.MD)], ta metoda dotyczą tylko bieżącej regule korekty konwersji strefy czasowej <paramref name="dateTimeOffset" /> jest traktowany jako czas lokalny lub, jeśli <paramref name="destinationTimeZone" /> jest <see cref="P:System.TimeZoneInfo.Local" />. Metoda nie może w związku z tym dokładnie przekonwertować czasu kropki przed wprowadzenia bieżącej regule dopasowania. Aby uzyskać więcej informacji, zobacz Uwagi dotyczące obiektów wywołujących sekcji w <see cref="P:System.TimeZoneInfo.Local" /> właściwości.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo sourceTimeZone, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTime(valuetype System.DateTime dateTime, class System.TimeZoneInfo sourceTimeZone, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo ^ sourceTimeZone, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTime * TimeZoneInfo * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTime (dateTime, sourceTimeZone, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="sourceTimeZone" Type="System.TimeZoneInfo" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">Data i godzina, które można przekonwertować.</param>
        <param name="sourceTimeZone">Strefę czasową <c>dateTime</c>.</param>
        <param name="destinationTimeZone">Strefa czasowa przekonwertować <c>dateTime</c> do.</param>
        <summary>Konwertuje godzinę z jedną strefę czasową.</summary>
        <returns>Daty i godziny w strefie czasowej docelowego umożliwiająca <paramref name="dateTime" /> parametru w strefie czasowej źródła.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas wykonywania konwersji, <xref:System.TimeZoneInfo.ConvertTime%2A> metoda stosowana żadnych reguł korygowania obowiązująca w `destinationTimeZone` strefy czasowej.  
  
 Wartość <xref:System.DateTime.Kind%2A> właściwość `dateTime` parametru musi odpowiadać typowi `sourceTimeZone` parametru, jak to pokazano w poniższej tabeli.  
  
|Wartość DateTime.Kind|wartość sourceTimeZone|Zachowanie — metoda|  
|-------------------------|--------------------------|---------------------|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Equals <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|Konwertuje `dateTime` na strefę czasową docelowy czas.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Nie równa się <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|Zgłasza wyjątek <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Equals <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|Konwertuje `dateTime` na strefę czasową docelowy czas.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Nie równa się <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|Zgłasza wyjątek <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Wszystkie.|Konwertuje `dateTime` na strefę czasową docelowy czas.|  
  
 Można także przekonwertować do lub z uniwersalnego czasu koordynowanego (UTC), przez wywołanie metody <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> i <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> metody.  
  
 <xref:System.DateTime.Kind%2A> Właściwości zwracana <xref:System.DateTime> wartość jest ustawiona, jak pokazano w poniższej tabeli.  
  
|Warunek|Zwracana wartość właściwość Kind|  
|---------------|----------------------------------|  
|`destinationTimeZone` Argument jest <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|`destinationTimeZone` Argument jest <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|Wszystkie inne daty i wartości czasu, stref czasowych źródła i stref czasowych docelowego.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 Jeśli wartość `dateTime` parametr jest niejednoznaczny czas w strefie czasowej źródła, jest interpretowany jako (czas standardowy). Jeśli `dateTime` parametr ma nieprawidłową wartość czas w strefie czasowej źródła, ta metoda zgłasza <xref:System.ArgumentException>.  
  
 Jeśli konwersji `dateTime` wynikiem jest wartość daty i godziny jest starsza niż <xref:System.DateTime.MinValue?displayProperty=nameWithType> lub nowszej niż <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, ta metoda zwraca <xref:System.DateTime.MinValue?displayProperty=nameWithType> lub <xref:System.DateTime.MaxValue?displayProperty=nameWithType>odpowiednio.  
  
 <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29> Metoda zgłasza <xref:System.ArgumentException> wyjątek Jeśli <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> właściwość `dateTime` argument jest <xref:System.DateTimeKind.Local?displayProperty=nameWithType> , ale `sourceTimeZone` argument nie jest <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>. Aby określić, czy w lokalnej strefie czasowej lub strefy czasowej uniwersalnego źródłową strefą czasową metody testów równości odwołań zamiast testowanie pod kątem równości wartości z <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29> metody. Należy pamiętać, że <xref:System.TimeZoneInfo> obiekty reprezentujące lokalną strefę czasową i które są pobierane przez wywołanie metody <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> braku równości referencyjnej z metody <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>. Ponadto <xref:System.TimeZoneInfo> obiekty reprezentujące lokalnych lub strefy uniwersalnego czasu i które są pobierane przez iteracja kolekcji zwróconej przez <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> braku równości referencyjnej z metody <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> lub <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>. Alternatywnie, można wywołać <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29> metody.  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29> do przekonwertowania na czas lokalny z Hawaje (czas standardowy).  
  
 [!code-csharp[System.TimeZone2.Concepts#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#9)]
 [!code-vb[System.TimeZone2.Concepts#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.DateTime.Kind" /> Właściwość <paramref name="dateTime" /> parametr jest <see cref="F:System.DateTimeKind.Local" />, ale <paramref name="sourceTimeZone" /> parametru nie jest równa <see cref="F:System.DateTimeKind.Local" />.  - lub - <see cref="P:System.DateTime.Kind" /> właściwość <paramref name="dateTime" /> parametr jest <see cref="F:System.DateTimeKind.Utc" />, ale <paramref name="sourceTimeZone" /> parametru nie jest równa <see cref="P:System.TimeZoneInfo.Utc" />.  - lub - <paramref name="dateTime" /> parametr ma nieprawidłową wartość czas (to znaczy reprezentuje czas, który nie istnieje ze względu na strefę czasową reguł korygowania).</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceTimeZone" /> Parametr jest <see langword="null" />.  - lub - <paramref name="destinationTimeZone" /> parametr jest <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Na [! Systemy include[WinXP](~/includes/WinXP-MD.MD)], ta metoda ma zastosowanie tylko bieżącej regule korekty podczas wykonywania konwersji, jeśli <paramref name="dateTime" /> jest traktowana jako czas lokalny, jeśli <paramref name="sourceTimeZone" /> jest <see cref="P:System.TimeZoneInfo.Local" />, lub jeśli <paramref name="destinationTimeZone" /> jest <see cref="P:System.TimeZoneInfo.Local" />. Metoda nie może w związku z tym dokładnie przekonwertować czasu kropki przed wprowadzenia bieżącej regule dopasowania. Aby uzyskać więcej informacji, zobacz Uwagi dotyczące obiektów wywołujących sekcji w <see cref="P:System.TimeZoneInfo.Local" /> właściwości.</para>
        </block>
        <altmember cref="Overload:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTimeBySystemTimeZoneId">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje godzinę na czas w innej strefie czasowej, na podstawie identyfikatora strefy czasowej.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeBySystemTimeZoneId(valuetype System.DateTime dateTime, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeBySystemTimeZoneId(DateTime dateTime, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTime * string -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTime, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dateTime">Data i godzina, które można przekonwertować.</param>
        <param name="destinationTimeZoneId">Identyfikator strefy czasowej docelowego.</param>
        <summary>Konwertuje godzinę na czas w innej strefie czasowej, na podstawie identyfikatora strefy czasowej.</summary>
        <returns>Data i godzina w strefie czasowej docelowego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas wykonywania konwersji, <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> metoda stosowana żadnych reguł korygowania obowiązująca w `destinationTimeZoneId` strefy czasowej.  
  
 To przeciążenie jest w przeważającej mierze identyczny jak wywołanie <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> metody, z wyjątkiem, że pozwala na określenie strefy czasowej docelowym za pomocą jego identyfikatora, a nie przez odwołanie do obiektu. Ta metoda jest użyteczna, gdy czas muszą być konwertowane bez pobierania obiektu strefy czasowej, odpowiadający jej i nie trzeba wiedzieć, czy czas przekonwertowanego jest standard lub czas letni.  
  
 <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%29> Metoda Określa źródłową strefą czasową od wartości `dateTime` parametru <xref:System.DateTime.Kind%2A> właściwości, jak to pokazano w poniższej tabeli.  
  
|Wartość właściwości Kind|Strefa czasowa źródła|Zachowanie — metoda|  
|-------------------------|----------------------|---------------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>|Konwertuje lokalnego czasu na czas w `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A>|Konwertuje godzinę w uniwersalnego czasu koordynowanego (UTC) `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Zakłada się, że <xref:System.TimeZoneInfo.Local%2A>.|Konwertuje lokalnego czasu na czas w `destinationTimeZone`.|  
  
 <xref:System.DateTime.Kind%2A> Właściwości zwracana <xref:System.DateTime> wartość jest ustawiona, jak pokazano w poniższej tabeli.  
  
|Warunek|Zwracana wartość właściwość Kind|  
|---------------|----------------------------------|  
|`destinationTimeZone` Jest `TimeZoneInfo.Utc.Id`.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|Inne `destinationTimeZone` wartość.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 Jeśli wartość `dateTime` parametr jest niejednoznaczny czasu lokalnego, jest interpretowany jako (czas standardowy). Jeśli `dateTime` parametr jest nieprawidłowy czasu lokalnego, ta metoda zgłasza <xref:System.ArgumentException>.  
  
 Jeśli konwersji `dateTime` wynikiem jest wartość daty i godziny jest starsza niż <xref:System.DateTime.MinValue?displayProperty=nameWithType> lub nowszej niż <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, ta metoda zwraca <xref:System.DateTime.MinValue?displayProperty=nameWithType> lub <xref:System.DateTime.MaxValue?displayProperty=nameWithType>odpowiednio.  
  
 Ta metoda pobiera strefy czasowej, którego identyfikator jest określona przez `destinationTimeZoneId` parametru z rejestru. Nie można pobrać obiektu strefy czasowej, który został utworzony za pomocą <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metody. `destinationTimeZoneId` Parametru musi odpowiadać dokładnie klucza rejestru strefy czasowej długości, ale nie w przypadku pomyślnego dopasowania zapasowej; oznacza to, że porównanie `destinationTimeZoneId` ze strefą czasową identyfikatorów jest rozróżniana wielkość liter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationTimeZoneId" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Odnaleziono identyfikator strefy czasowej, ale dane rejestru są uszkodzone.</exception>
        <exception cref="T:System.Security.SecurityException">Proces nie ma wymaganych uprawnień do odczytu z klucza rejestru, który zawiera informacje o strefie czasowej.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">
          <paramref name="destinationTimeZoneId" /> Identyfikator nie został znaleziony w systemie lokalnym.</exception>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ConvertTimeBySystemTimeZoneId (DateTimeOffset dateTimeOffset, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ConvertTimeBySystemTimeZoneId(valuetype System.DateTimeOffset dateTimeOffset, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTimeOffset,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ConvertTimeBySystemTimeZoneId(DateTimeOffset dateTimeOffset, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTimeOffset * string -&gt; DateTimeOffset" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTimeOffset, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Data i godzina, które można przekonwertować.</param>
        <param name="destinationTimeZoneId">Identyfikator strefy czasowej docelowego.</param>
        <summary>Konwertuje godzinę na czas w innej strefie czasowej, na podstawie identyfikatora strefy czasowej.</summary>
        <returns>Data i godzina w strefie czasowej docelowego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas wykonywania konwersji, <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> metoda stosowana żadnych reguł korygowania obowiązująca w `destinationTimeZoneId` strefy czasowej.  
  
 To przeciążenie jest taki sam jak wywołanie <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> metody, z wyjątkiem, że pozwala na określenie strefy czasowej docelowym za pomocą jego identyfikatora, a nie przez odwołanie do obiektu. Ta metoda jest użyteczna, gdy czas muszą być konwertowane bez pobierania obiektu strefy czasowej, odpowiadający jej i nie trzeba wiedzieć, czy czas przekonwertowanego jest standard lub czas letni.  
  
 Ponieważ `dateTimeOffset` parametr reprezentuje datę i czas wraz z tego czasu przesunięcie z uniwersalnego czasu koordynowanego (UTC), nie może reprezentować, niejednoznaczny czas lub nieprawidłową wartość czas.  
  
 Ta metoda pobiera strefy czasowej, którego identyfikator jest określona przez `destinationTimeZoneId` parametru z rejestru. Nie można pobrać obiektu strefy czasowej, który został utworzony za pomocą <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metody. `destinationTimeZoneId` Parametru musi odpowiadać dokładnie klucza rejestru strefy czasowej długości, ale nie w przypadku pomyślnego dopasowania zapasowej; oznacza to, że porównanie `destinationTimeZoneId` ze strefą czasową identyfikatorów jest rozróżniana wielkość liter.  
  
 Podczas konwertowania `dateTimeOffset` wartość na czas w strefie czasowej docelowy metody uwzględnia żadnych reguł korygowania obowiązująca w strefie czasowej docelowego.  
  
 Jeśli konwersji `dateTimeOffset` wynikiem jest wartość daty i godziny jest starsza niż <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> lub nowszej niż <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, ta metoda zwraca <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> lub <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>odpowiednio.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationTimeZoneId" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Odnaleziono identyfikator strefy czasowej, ale dane rejestru są uszkodzone.</exception>
        <exception cref="T:System.Security.SecurityException">Proces nie ma wymaganych uprawnień do odczytu z klucza rejestru, który zawiera informacje o strefie czasowej.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">
          <paramref name="destinationTimeZoneId" /> Identyfikator nie został znaleziony w systemie lokalnym.</exception>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeBySystemTimeZoneId(valuetype System.DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeBySystemTimeZoneId(DateTime dateTime, System::String ^ sourceTimeZoneId, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTime * string * string -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTime, sourceTimeZoneId, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="sourceTimeZoneId" Type="System.String" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dateTime">Data i godzina, które można przekonwertować.</param>
        <param name="sourceTimeZoneId">Identyfikator strefy czasowej źródła.</param>
        <param name="destinationTimeZoneId">Identyfikator strefy czasowej docelowego.</param>
        <summary>Konwertuje godzinę między strefami czasowymi drugiego w oparciu o identyfikatory stref czasowych.</summary>
        <returns>Daty i godziny w strefie czasowej docelowego umożliwiająca <paramref name="dateTime" /> parametru w strefie czasowej źródła.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas wykonywania konwersji, <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> metoda stosowana żadnych reguł korygowania obowiązująca w `destinationTimeZoneId` strefy czasowej.  
  
 Mimo że jest on podobny do <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> metody, można użyć <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> Aby określić źródłowy i docelowy stref czasowych przy użyciu ich identyfikatorów zamiast ich <xref:System.TimeZoneInfo> obiektów. Ta metoda jest użyteczna, gdy czas muszą być konwertowane bez pobierania obiektu strefy czasowej, odpowiadający jej i nie trzeba wiedzieć, czy czas przekonwertowanego jest standard lub czas letni.  
  
 Ta metoda pobiera stref czasowych, których identyfikatory zostały `sourceTimeZoneId` i `destinationTimeZoneId` parametrów z rejestru. Nie można pobrać obiektów stref czasowych, które są tworzone przy użyciu <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metody.  
  
 Wartość <xref:System.DateTime.Kind%2A> właściwość `dateTime` parametru musi odpowiadać typowi `sourceTimeZoneId` parametru, jak to pokazano w poniższej tabeli.  
  
|Wartość DateTime.Kind|wartość sourceTimeZone|Zachowanie — metoda|  
|-------------------------|--------------------------|---------------------|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Equals `TimeZoneInfo.Utc.Id`.|Konwertuje `dateTime` na strefę czasową docelowy czas.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Nie równa się `TimeZoneInfo.Utc.Id`.|Zgłasza wyjątek <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Equals `TimeZoneInfo.Local.Id`.|Konwertuje `dateTime` na strefę czasową docelowy czas.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Nie równa się `TimeZoneInfo.Local.Id`.|Zgłasza wyjątek <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Wszystkie.|Konwertuje `dateTime` na strefę czasową docelowy czas.|  
  
 Ponieważ opiera się na wywołania <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> metody <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> metoda wykonuje wyszukiwanie bez uwzględniania wielkości liter zlokalizować stref czasowych, które odpowiadają `sourceTimeZoneId` i `destinationTimeZoneId`.  
  
 Jeśli wartość `dateTime` parametr jest niejednoznaczny czas w strefie czasowej źródła, jest interpretowany jako (czas standardowy). Jeśli `dateTime` parametr ma nieprawidłową wartość czas w strefie czasowej źródła, ta metoda zgłasza <xref:System.ArgumentException>.  
  
 <xref:System.DateTime.Kind%2A> Właściwości zwracana <xref:System.DateTime> ma wartość <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> chyba, że strefa czasowa docelowym jest uniwersalny czas koordynowany (UTC), w którym to przypadku ustawiono <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> metodę w celu wyświetlenia czas, który odpowiada na czas lokalny system w miastach osiem świata.  
  
 [!code-csharp[System.TimeZone2.Conversions#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#3)]
 [!code-vb[System.TimeZone2.Conversions#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.DateTime.Kind" /> Właściwość <paramref name="dateTime" /> parametru nie odpowiada źródłową strefą czasową.  - lub - <paramref name="dateTime" /> jest nieprawidłową wartość czas w strefie czasowej źródła.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceTimeZoneId" /> jest <see langword="null" />.  - lub - <paramref name="destinationTimeZoneId" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Znaleziono identyfikatory stref czasowych, ale dane rejestru są uszkodzone.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wymaganych uprawnień do odczytu klucze rejestru, które zawierają dane strefy czasowej.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">
          <paramref name="sourceTimeZoneId" /> Identyfikator nie został znaleziony w systemie lokalnym.  - lub - <paramref name="destinationTimeZoneId" /> identyfikator nie został znaleziony w systemie lokalnym.</exception>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeFromUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeFromUtc (DateTime dateTime, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeFromUtc(valuetype System.DateTime dateTime, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeFromUtc(DateTime dateTime, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeFromUtc : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeFromUtc (dateTime, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">Uniwersalnego czasu koordynowanego (UTC).</param>
        <param name="destinationTimeZone">Strefa czasowa przekonwertować <c>dateTime</c> do.</param>
        <summary>Konwertuje czas w strefie czasowej określonej uniwersalny czas koordynowany (UTC).</summary>
        <returns>Data i godzina w strefie czasowej docelowego. Jego <see cref="P:System.DateTime.Kind" /> właściwość jest <see cref="F:System.DateTimeKind.Utc" /> Jeśli <paramref name="destinationTimeZone" /> jest <see cref="P:System.TimeZoneInfo.Utc" />; w przeciwnym razie jego <see cref="P:System.DateTime.Kind" /> jest właściwość <see cref="F:System.DateTimeKind.Unspecified" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas wykonywania konwersji, <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> metoda stosowana żadnych reguł korygowania obowiązująca w `destinationTimeZone` strefy czasowej.  
  
 Dokładne zachowanie tej metody zależy od wartości <xref:System.DateTime.Kind%2A> właściwość `dateTime` parametru, jak to pokazano w poniższej tabeli.  
  
|Właściwość DateTime.Kind|Konwersja|  
|----------------------------|----------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Zgłasza wyjątek <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> lub <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Konwertuje uniwersalny czas koordynowany (UTC).|  
  
 Jeśli konwersji `dateTime` wynikiem jest wartość daty i godziny jest starsza niż <xref:System.DateTime.MinValue?displayProperty=nameWithType> lub nowszej niż <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, ta metoda zwraca <xref:System.DateTime.MinValue?displayProperty=nameWithType> lub <xref:System.DateTime.MaxValue?displayProperty=nameWithType>odpowiednio.  
  
   
  
## Examples  
 Poniższy przykład konwertuje środkowy czas uniwersalny czas koordynowany (UTC).  
  
 [!code-csharp[System.TimeZone2.Concepts#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#8)]
 [!code-vb[System.TimeZone2.Concepts#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.DateTime.Kind" /> Właściwość <paramref name="dateTime" /> jest <see cref="F:System.DateTimeKind.Local" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationTimeZone" /> jest <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Na [! Systemy include[WinXP](~/includes/WinXP-MD.MD)], ta metoda dotyczą tylko bieżącej regule korekty konwersji strefy czasowej <paramref name="destinationTimeZone" /> jest <see cref="P:System.TimeZoneInfo.Local" />. Metoda nie może w związku z tym dokładnie przekonwertować czasu kropki przed wprowadzenia bieżącej regule dopasowania. Aby uzyskać więcej informacji, zobacz Uwagi dotyczące obiektów wywołujących sekcji w <see cref="P:System.TimeZoneInfo.Local" /> właściwości.</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTimeToUtc">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje datę i godzinę uniwersalny czas koordynowany (UTC).</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTimeToUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeToUtc (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeToUtc(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeToUtc(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeToUtc : DateTime -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeToUtc dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Data i godzina, które można przekonwertować.</param>
        <summary>Konwertuje określoną datą i godziną uniwersalny czas koordynowany (UTC).</summary>
        <returns>Uniwersalny czas koordynowany (UTC) umożliwiająca <paramref name="dateTime" /> parametru. <see cref="T:System.DateTime" /> Wartości <see cref="P:System.DateTime.Kind" /> ma zawsze wartość właściwości <see cref="F:System.DateTimeKind.Utc" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Konwersja dokładnie wykonać zależy od wartości <xref:System.DateTime.Kind%2A> właściwość `dateTime` parametru, jak to pokazano w poniższej tabeli.  
  
|Właściwość DateTime.Kind|Konwersja|  
|----------------------------|----------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Konwertuje od lokalnego czasu uniwersalnego czasu koordynowanego (UTC).|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Założono `dateTime` jest czasem lokalnym i konwertuje od lokalnego czasu na czas UTC.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Zwraca `dateTime` bez zmian.|  
  
 Jeśli `dateTime` odpowiada niejednoznaczne czasu lokalnego, ta metoda przyjęto założenie, jest standardowe czasu lokalnego. Jeśli `dateTime` odpowiada nieprawidłowy czas lokalny, metoda zgłasza <xref:System.ArgumentException>.  
  
> [!NOTE]
>  Jeśli bieżący komputer lokalny strefy czasowej zawiera wiele reguł korygowania, to przeciążenie metody <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> metoda może zwracać wyniki, które różnią się od <xref:System.TimeZone.ToUniversalTime%2A?displayProperty=nameWithType> i <xref:System.DateTime.ToUniversalTime%2A?displayProperty=nameWithType> metody. <xref:System.TimeZone.ToUniversalTime%2A?displayProperty=nameWithType> zawsze dotyczy bieżącego reguła korekty konwersji strefy czasowej, czy `dateTime` znajduje się w jego zakresie. I podczas wykonywania na [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)], <xref:System.DateTime.ToUniversalTime%2A?displayProperty=nameWithType> dotyczą również bieżącej regule korekty konwersji strefy czasowej, czy `dateTime` znajduje się w jego zakresie.  
  
 Jeśli odpowiednikiem UTC `dateTime` jest starsza niż <xref:System.DateTime.MinValue?displayProperty=nameWithType> lub nowszym który <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, ta metoda zwraca <xref:System.DateTime.MinValue> lub <xref:System.DateTime.MaxValue>odpowiednio.  
  
   
  
## Examples  
 Poniższy przykład przedstawia konwersji wartości godziny, którego <xref:System.DateTime.Kind%2A> właściwość jest <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, i <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>odpowiednio. Również dwie konwersji niejednoznaczne i nieprawidłowe razy.  
  
 [!code-csharp[System.TimeZone2.Conversions#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#1)]
 [!code-vb[System.TimeZone2.Conversions#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see langword="TimeZoneInfo.Local.IsInvalidDateTime(" />
          <paramref name="dateTime" />
          <see langword=")" /> Zwraca <see langword="true" />.</exception>
        <block subset="none" type="usage">
          <para>Na [! Systemy include[WinXP](~/includes/WinXP-MD.MD)], ta metoda dotyczy tylko bieżącej regule korekty konwersji strefy czasowej. Metoda nie może w związku z tym dokładnie przekonwertować czasu kropki przed wprowadzenia bieżącej regule dopasowania. Aby uzyskać więcej informacji, zobacz Uwagi dotyczące obiektów wywołujących sekcji w <see cref="P:System.TimeZoneInfo.Local" /> właściwości.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeToUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeToUtc (DateTime dateTime, TimeZoneInfo sourceTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeToUtc(valuetype System.DateTime dateTime, class System.TimeZoneInfo sourceTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeToUtc(DateTime dateTime, TimeZoneInfo ^ sourceTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeToUtc : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeToUtc (dateTime, sourceTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="sourceTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">Data i godzina, które można przekonwertować.</param>
        <param name="sourceTimeZone">Strefę czasową <c>dateTime</c>.</param>
        <summary>Konwertuje czas w strefie czasowej określonej uniwersalny czas koordynowany (UTC).</summary>
        <returns>Uniwersalny czas koordynowany (UTC) umożliwiająca <paramref name="dateTime" /> parametru. <see cref="T:System.DateTime" /> Obiektu <see cref="P:System.DateTime.Kind" /> ma zawsze wartość właściwości <see cref="F:System.DateTimeKind.Utc" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.DateTime.Kind%2A> właściwość `dateTime` parametr ma wartość <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> i `sourceTimeZone` parametr ma wartość <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>, ta metoda zwraca `dateTime` bez wykonywania wszelkiej konwersji.  
  
 Jeśli `dateTime` odpowiada niejednoznaczny czas, ta metoda przyjęto założenie, czas standardowy strefy czasowej źródła. Jeśli `dateTime` odpowiada nieprawidłową wartość czas, ta metoda zgłasza <xref:System.ArgumentException>.  
  
 Jeśli odpowiednikiem uniwersalny czas koordynowany (UTC) `dateTime` jest starsza niż <xref:System.DateTime.MinValue?displayProperty=nameWithType> lub nowszym który <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, ta metoda zwraca <xref:System.DateTime.MinValue> lub <xref:System.DateTime.MaxValue>odpowiednio.  
  
   
  
## Examples  
 Poniższy przykład pobiera bieżącą datę w lokalnym systemie konwertuje ją na uniwersalny czas koordynowany (UTC), a następnie konwertuje go na Tokio (czas standardowy) i koniec konwertuje z Tokio Standard czasu UTC. Należy pamiętać, że dwukrotnie UTC są identyczne.  
  
 [!code-csharp[System.TimeZone2.Conversions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]
 [!code-vb[System.TimeZone2.Conversions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateTime" />
          <see langword=".Kind" /> jest <see cref="F:System.DateTimeKind.Utc" /> i <paramref name="sourceTimeZone" /> nie jest równa <see cref="P:System.TimeZoneInfo.Utc" />.  - lub - <paramref name="dateTime" /><see langword=".Kind" /> jest <see cref="F:System.DateTimeKind.Local" /> i <paramref name="sourceTimeZone" /> nie jest równa <see cref="P:System.TimeZoneInfo.Local" />.  - lub - <paramref name="sourceTimeZone" /><see langword=".IsInvalidDateTime(" /><paramref name="dateTime" /><see langword=")" /> zwraca <see langword="true" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceTimeZone" /> jest <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Na [! Systemy include[WinXP](~/includes/WinXP-MD.MD)], metoda dotyczą tylko bieżącej regule korekty konwersji strefy czasowej <paramref name="sourceTimeZone" /> jest <see cref="P:System.TimeZoneInfo.Local" />. Metoda nie może w związku z tym dokładnie przekonwertować czasu kropki przed wprowadzenia bieżącej regule dopasowania. Aby uzyskać więcej informacji, zobacz Uwagi dotyczące obiektów wywołujących sekcji w <see cref="P:System.TimeZoneInfo.Local" /> właściwości.</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateCustomTimeZone">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Definiuje strefę czasową, która nie znajduje się na komputerze lokalnym.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="standardDisplayName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">Identyfikator strefy czasowej.</param>
        <param name="baseUtcOffset">Obiekt, który reprezentuje odstęp czasu między tym strefa czasowa i uniwersalny czas koordynowany (UTC).</param>
        <param name="displayName">Wyświetlana nazwa nowej strefy czasowej.</param>
        <param name="standardDisplayName">Nazwa nowej strefy czasowej (czas standardowy).</param>
        <summary>Tworzy niestandardowe strefy czasowej z określonym identyfikatorem, przesunięcie z uniwersalnego czasu koordynowanego (UTC), nazwę wyświetlaną i nazwę wyświetlaną (czas standardowy).</summary>
        <returns>Dla nowej strefy czasowej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To przeciążenie metody <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29> metoda jest przydatna do tworzenia strefy czasowej, który ma bez korekt (to znaczy strefę czasową nieobsługującego czasu letniego). Aby zdefiniować strefy czasowej, zawierający dostosowania dotyczące czasu letniego, użyj <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> lub <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> metody.  
  
 W poniższej tabeli przedstawiono relację między parametrami, które są dostarczane do <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> metody i właściwości <xref:System.TimeZoneInfo> obiektu, do którego są zwracane przez wywołanie metody.  
  
|Parametr CreateCustomTimeZone|Właściwość TimeZoneInfo|  
|------------------------------------|---------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
  
 Zazwyczaj strefy czasowej (czas standardowy) nazwa i identyfikator są takie same. Jednak długość identyfikatora strefy czasowej nie może przekraczać 32 znaków. Ciąg przekazany do `displayName` parametru następuje stosunkowo standardowym formacie. Pierwsza część Nazwa wyświetlana jest podstawowy przesunięcie strefy czasowej od uniwersalny czas koordynowany, który jest wskazywany przez akronimem GMT (uniwersalny Greenwich), w nawiasach. Następuje to ciąg identyfikujący strefę czasową, jeden lub więcej miasta, regiony lub krajów w strefie czasowej lub oba. Na przykład:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
   
  
## Examples  
 Poniższy przykład tworzy niestandardowe strefę czasową dla Mawson i Holme Bay regionów Antarktyka. Wyświetla wynik konwersji lokalnego czasu na czas w nowej strefy czasowej.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#1)]
 [!code-vb[System.TimeZone2.CreateTimeZone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="id" /> Parametr jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="id" /> Parametr jest pustym ciągiem ("").  - lub - <paramref name="baseUtcOffset" /> parametru nie reprezentuje całkowitą liczbę minut.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="baseUtcOffset" /> Parametr jest większa niż 14 godzin lub mniejsza niż-14 godzin.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, class System.TimeZoneInfo/AdjustmentRule[] adjustmentRules) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String, daylightDisplayName As String, adjustmentRules As TimeZoneInfo.AdjustmentRule()) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName, System::String ^ daylightDisplayName, cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ adjustmentRules);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string * string * TimeZoneInfo.AdjustmentRule[] -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="standardDisplayName" Type="System.String" />
        <Parameter Name="daylightDisplayName" Type="System.String" />
        <Parameter Name="adjustmentRules" Type="System.TimeZoneInfo+AdjustmentRule[]" />
      </Parameters>
      <Docs>
        <param name="id">Identyfikator strefy czasowej.</param>
        <param name="baseUtcOffset">Obiekt, który reprezentuje odstęp czasu między tym strefa czasowa i uniwersalny czas koordynowany (UTC).</param>
        <param name="displayName">Wyświetlana nazwa nowej strefy czasowej.</param>
        <param name="standardDisplayName">Nazwa (czas standardowy) dla nowej strefy czasowej.</param>
        <param name="daylightDisplayName">Nazwa nowej strefy czasowej czasu letniego.</param>
        <param name="adjustmentRules">Tablica, która wspomaga podstawowej przesunięcie UTC w określonym okresie.</param>
        <summary>Tworzy niestandardowe strefy czasowej z określonym identyfikatorem, przesunięcie z uniwersalnego czasu koordynowanego (UTC), nazwę wyświetlaną, nazwą (czas standardowy), nazwę czasu letniego i reguły czasu letniego.</summary>
        <returns>A <see cref="T:System.TimeZoneInfo" /> obiekt, który reprezentuje nowej strefy czasowej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To przeciążenie metody <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> metoda jest przydatna do tworzenia strefy czasowej, która obsługuje czasu letniego. Aby zdefiniować strefy czasowej, która nie obsługuje czasu letniego, użyj <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> lub <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> metody.  
  
 W poniższej tabeli przedstawiono relację między parametrami, które są dostarczane do <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> — metoda i członków <xref:System.TimeZoneInfo> obiektu, do którego są zwracane przez wywołanie metody.  
  
|Parametr CreateCustomTimeZone|TimeZoneInfo member|  
|------------------------------------|-------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
|`daylightDisplayName`|<xref:System.TimeZoneInfo.DaylightName%2A>|  
|`adjustmentRules`|Tablica <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> obiekty zwrócone przez <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> metody.|  
  
 Zazwyczaj strefy czasowej (czas standardowy) nazwa i identyfikator są takie same. Jednak długość identyfikatora strefy czasowej nie może przekraczać 32 znaków. Ciąg przekazany do `displayName` parametru następuje stosunkowo standardowym formacie. Pierwsza część Nazwa wyświetlana jest podstawowy przesunięcie strefy czasowej od uniwersalny czas koordynowany, który jest wskazywany przez akronimem GMT (uniwersalny Greenwich), w nawiasach. Następuje to ciąg identyfikujący strefę czasową, jeden lub więcej miasta, regiony lub krajów w strefie czasowej lub oba. Na przykład:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
 `baseUtcOffset` Parametr określa przesunięcie strefy czasowej niestandardowych z uniwersalnego czasu koordynowanego (UTC) dla wszystkich reguł korygowania strefy czasowej. Innymi słowy <xref:System.TimeZoneInfo> model obiektów założono, że przesunięcie strefy czasowej z UTC jest stałe cały czas życia strefę czasową i istnieje niezależnie od zasady szczególne dostosowanie. Do strefy czasowej, który zmienił jego przesunięcie od czasu UTC, należy utworzyć nowy obiekt strefy czasowej.  
  
 Reguły korekty strefy czasowej są zdefiniowane w następujący sposób:  
  
1.  Wywołanie każdej <xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A> lub <xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A> metodę, aby zdefiniować początkową i końcową czas przejścia dla każdej reguły korekty.  
  
2.  Wywoływanie <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> metody dla każdej reguły korekty.  
  
3.  Przypisywanie reguły dopasowania do tablicy mogą być przekazywane jako `adjustmentRules` parametru.  
  
   
  
## Examples  
 Poniższy przykład tworzy strefę czasową niestandardowych dla stacji Palmer, Wyspy Anvers Antarktyki. Następnie konwertuje lokalnego czasu na czas w nowej strefy czasowej i wyświetla wyniki.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#2)]
 [!code-vb[System.TimeZone2.CreateTimeZone#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="id" /> Parametr jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="id" /> Parametr jest pustym ciągiem ("").  - lub - <paramref name="baseUtcOffset" /> parametru nie reprezentuje całkowitą liczbę minut.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="baseUtcOffset" /> Parametr jest większa niż 14 godzin lub mniejsza niż-14 godzin.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Reguły korekty określone w <paramref name="adjustmentRules" /> parametru nakładają się na siebie.  - lub - reguł korygowania określone <paramref name="adjustmentRules" /> parametru nie znajdują się w kolejności chronologicznej.  - lub - co najmniej jeden element w <paramref name="adjustmentRules" /> są <see langword="null" />.  - lub - data może mieć wiele reguł korygowania zastosować dla niego.  - lub - sumę <paramref name="baseUtcOffset" /> parametru i <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> wartość co najmniej jeden obiekt w <paramref name="adjustmentRules" /> tablicy jest większa niż 14 godzin lub mniejsza niż-14 godzin.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, class System.TimeZoneInfo/AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String, daylightDisplayName As String, adjustmentRules As TimeZoneInfo.AdjustmentRule(), disableDaylightSavingTime As Boolean) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName, System::String ^ daylightDisplayName, cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ adjustmentRules, bool disableDaylightSavingTime);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string * string * TimeZoneInfo.AdjustmentRule[] * bool -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules, disableDaylightSavingTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="standardDisplayName" Type="System.String" />
        <Parameter Name="daylightDisplayName" Type="System.String" />
        <Parameter Name="adjustmentRules" Type="System.TimeZoneInfo+AdjustmentRule[]" />
        <Parameter Name="disableDaylightSavingTime" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="id">Identyfikator strefy czasowej.</param>
        <param name="baseUtcOffset">A <see cref="T:System.TimeSpan" /> obiekt, który reprezentuje odstęp czasu między tym strefa czasowa i uniwersalny czas koordynowany (UTC).</param>
        <param name="displayName">Wyświetlana nazwa nowej strefy czasowej.</param>
        <param name="standardDisplayName">Nazwa nowej strefy czasowej (czas standardowy).</param>
        <param name="daylightDisplayName">Nazwa nowej strefy czasowej czasu letniego.</param>
        <param name="adjustmentRules">Tablica <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> obiektów, które rozszerzyć podstawowej przesunięcie UTC w określonym okresie.</param>
        <param name="disableDaylightSavingTime">
          <see langword="true" /> Aby odrzucić informacje dotyczące czasu letniego znajdujące się w <c>adjustmentRules</c> z nowego obiektu; w przeciwnym razie <see langword="false" />.</param>
        <summary>Tworzy niestandardowe strefy czasowej z określonym identyfikatorem, przesunięcie z uniwersalnego czasu koordynowanego (UTC), nazwę wyświetlaną, nazwę (czas standardowy), nazwą czasu letniego, reguły czasu letniego i wartość, która wskazuje, czy odzwierciedla zwrócony obiekt informacje o czasu letniego.</summary>
        <returns>Dla nowej strefy czasowej. Jeśli <paramref name="disableDaylightSavingTime" /> parametr jest <see langword="true" />, zwrócony obiekt nie ma czasu letniego danych.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można użyć tego przeciążenia <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> metodę w celu utworzenia niestandardowych strefy czasowej, których obsługę czasu letniego można ustalić według warunków w czasie wykonywania.  
  
 W poniższej tabeli przedstawiono relację między parametrami, które są dostarczane do <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> — metoda i członków <xref:System.TimeZoneInfo> obiektu, do którego są zwracane przez wywołanie metody.  
  
|Parametr CreateCustomTimeZone|Właściwość TimeZoneInfo|  
|------------------------------------|---------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
|`daylightDisplayName`|<xref:System.TimeZoneInfo.DaylightName%2A> Jeśli `disableDaylightSavingTime` jest `false`; <xref:System.String.Empty?displayProperty=nameWithType> Jeśli `disableDaylightSavingTime` jest `true`.|  
|`adjustmentRules`|Tablica <xref:System.TimeZoneInfo.AdjustmentRule> obiekty zwrócone przez <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> — metoda Jeśli `disableDaylightSavingTime` jest `false`; pusta tablica zwrócona przez <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> metody Jeśli `disableDaylightSavingTime` jest `true`.|  
|`disableDaylightSavingTime`|Nie <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>.|  
  
 Zazwyczaj strefy czasowej (czas standardowy) nazwa i identyfikator są takie same. Jednak długość identyfikatora strefy czasowej nie może przekraczać 32 znaków. Ciąg przekazany do `displayName` parametru następuje stosunkowo standardowym formacie. Pierwsza część Nazwa wyświetlana jest podstawowy przesunięcie strefy czasowej od uniwersalny czas koordynowany, który jest wskazywany przez akronimem GMT (uniwersalny Greenwich), w nawiasach. Następuje to ciąg identyfikujący strefę czasową, jeden lub więcej miasta, regiony lub krajów w strefie czasowej lub oba. Na przykład:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
 Reguły korekty strefy czasowej są zdefiniowane w następujący sposób:  
  
1.  Wywołanie każdej <xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A> lub <xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A> metodę, aby zdefiniować początkową i końcową reguły przejścia dla każdej reguły korekty.  
  
2.  Wywoływanie <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> metody dla każdej reguły korekty.  
  
3.  Przypisywanie reguły dopasowania do tablicy mogą być przekazywane jako `adjustmentRules` parametru.  
  
 Jeśli `disableDaylightSavingTime` parametr jest `false`, operacja ta metoda jest taki sam jak <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> przeciążenia. Jeśli `disableDaylightSavingTime` jest `true`, zwrócony obiekt nie zawiera żadnych reguł korygowania i <xref:System.TimeZoneInfo.DaylightName%2A> właściwości, której wartość jest pustym ciągiem.  
  
   
  
## Examples  
 Poniższy przykład tworzy strefę czasową niestandardowych dla stacji Palmer, Wyspy Anvers Antarktyki. Ustawia `disableDaylightSavingTime` parametr w wywołaniu <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> metodę `true`. Następnie wyświetla nazwa czasu letniego dla nowej strefy czasowej, jeśli jest dostępny, a liczba reguł korygowania, aby upewnić się, że dla nowej strefy czasowej nie ma czasu letniego informacji.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#3)]
 [!code-vb[System.TimeZone2.CreateTimeZone#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="id" /> Parametr jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="id" /> Parametr jest pustym ciągiem ("").  - lub - <paramref name="baseUtcOffset" /> parametru nie reprezentuje całkowitą liczbę minut.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="baseUtcOffset" /> Parametr jest większa niż 14 godzin lub mniejsza niż-14 godzin.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Reguły korekty określone w <paramref name="adjustmentRules" /> parametru nakładają się na siebie.  - lub - reguł korygowania określone <paramref name="adjustmentRules" /> parametru nie znajdują się w kolejności chronologicznej.  - lub - co najmniej jeden element w <paramref name="adjustmentRules" /> są <see langword="null" />.  - lub - data może mieć wiele reguł korygowania zastosować dla niego.  - lub - sumę <paramref name="baseUtcOffset" /> parametru i <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> wartość co najmniej jeden obiekt w <paramref name="adjustmentRules" /> tablicy jest większa niż 14 godzin lub mniejsza niż-14 godzin.</exception>
      </Docs>
    </Member>
    <Member MemberName="DaylightName">
      <MemberSignature Language="C#" Value="public string DaylightName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DaylightName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.DaylightName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DaylightName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DaylightName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DaylightName : string" Usage="System.TimeZoneInfo.DaylightName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę wyświetlaną dla bieżącej strefy czasowej czasu letniego.</summary>
        <value>Nazwa wyświetlana strefy czasowej czasu letniego.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nazwa wyświetlana jest zlokalizowana w oparciu kultury zainstalowane w systemie operacyjnym Windows.  
  
 A <xref:System.TimeZoneInfo.DaylightName%2A> właściwości, której wartość nie jest <xref:System.String.Empty?displayProperty=nameWithType> lub `null` nie musi oznaczać, że strefa czasowa obsługuje czasu letniego. Aby ustalić, czy strefa czasowa obsługuje czasu letniego, sprawdź wartość jej <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> właściwości.  
  
 W większości przypadków <xref:System.TimeZoneInfo.DaylightName%2A> właściwość stref czasowych zdefiniowanych w rejestrze nie jest <xref:System.String.Empty?displayProperty=nameWithType> lub `null`. Jednak <xref:System.TimeZoneInfo.DaylightName%2A> ustawioną właściwość niestandardowych stref czasowych <xref:System.String.Empty?displayProperty=nameWithType>. Ten błąd występuje podczas niestandardowych stref czasowych są tworzone przez <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> lub <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%2CSystem.String%2CSystem.TimeZoneInfo.AdjustmentRule%5B%5D%2CSystem.Boolean%29?displayProperty=nameWithType> przeciążenia i `disableDaylightSavingTime` parametr jest `true`. W związku z tym kodzie należy nigdy zakładać, że wartość <xref:System.TimeZoneInfo.DaylightName%2A> właściwość nie jest `null` lub jest pusty.  
  
 <xref:System.TimeZoneInfo.DaylightName%2A> Właściwości jest odpowiednikiem <xref:System.TimeZone.DaylightName%2A> właściwość <xref:System.TimeZone> klasy.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano metodę o nazwie `DisplayDateWithTimeZoneName` używającą <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> metodę, aby określić, czy ma być wyświetlana nazwa (czas standardowy) lub czas letni strefę czasową.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string" Usage="System.TimeZoneInfo.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę wyświetlaną ogólnego, który reprezentuje strefę czasową.</summary>
        <value>Nazwa wyświetlana ogólne strefy czasowej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nazwa wyświetlana jest zlokalizowana w oparciu kultury zainstalowane w systemie operacyjnym Windows.  
  
 Nazwy wyświetlane strefy czasowej dla stref czasowych systemu Windows, wykonaj dość standardowym formacie. Pierwsza część Nazwa wyświetlana jest podstawowy przesunięcie strefy czasowej od uniwersalny czas koordynowany, który jest wskazywany przez akronimem GMT (uniwersalny Greenwich), w nawiasach. Dla uniwersalnego czasu koordynowanego akronim GMT z przesunięcie nie jest ujęte w nawiasy.  Następuje to ciąg identyfikujący strefie czasowej lub co najmniej jeden miasta, regiony lub krajów w strefie czasowej. Na przykład:  
  
```  
(GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
   
  
## Examples  
 Poniższy przykład pobiera <xref:System.TimeZoneInfo> obiekt, który reprezentuje w lokalnej strefie czasowej i danych wyjściowych, nazwa wyświetlana, nazwa (czas standardowy) i nazwa czasu letniego. Dane wyjściowe są wyświetlane dla systemu w Stanach Zjednoczonych Pacyficzny standardowa strefy czasowej.  
  
 [!code-csharp[System.TimeZone2.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]
 [!code-vb[System.TimeZone2.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Określa, czy dwa <see cref="T:System.TimeZoneInfo" /> obiekty są takie same.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="timeZoneInfo.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Drugi obiekt do porównania z bieżącym obiektem.</param>
        <summary>Określa, czy bieżący <see cref="T:System.TimeZoneInfo" /> obiektu a innym obiektem, są takie same.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="obj" /> jest <see cref="T:System.TimeZoneInfo" /> obiekt, który jest taki sam, jak bieżące wystąpienie w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda konwertuje lub rzutuje `obj` do <xref:System.TimeZoneInfo> obiektu i porównuje ją z bieżącym wystąpieniem. Testowanie równości jest oparta na porównania wartości. Bieżący <xref:System.TimeZoneInfo> wystąpienia i `obj` są traktowane jako równe w następujących warunkach:  
  
-   Typ środowiska wykonawczego `obj` jest <xref:System.TimeZoneInfo>.  
  
-   Dwa obiekty mają takie same <xref:System.TimeZoneInfo.Id%2A> wartości właściwości.  
  
-   Dwa obiekty mają te same reguły korekty.  
  
 Jeśli `obj` jest `null`, ta metoda zwraca `false`.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.TimeZoneInfo.Equals%28System.Object%29> metodę, aby określić, czy w lokalnej strefie czasowej jest czas pacyficzny lub czas wschodni.  
  
 [!code-csharp[System.TimeZoneInfo.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.equals/cs/equals1.cs#1)]
 [!code-vb[System.TimeZoneInfo.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (TimeZoneInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.TimeZoneInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.Equals(System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As TimeZoneInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(TimeZoneInfo ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : TimeZoneInfo -&gt; bool" Usage="timeZoneInfo.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="other">Drugi obiekt do porównania z bieżącym obiektem.</param>
        <summary>Określa, czy bieżący <see cref="T:System.TimeZoneInfo" /> obiektu, a drugi <see cref="T:System.TimeZoneInfo" /> obiektu są takie same.</summary>
        <returns>
          <see langword="true" /> Jeśli dwa <see cref="T:System.TimeZoneInfo" /> obiekty są równe; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Równość opiera się na porównania wartości. Dwa <xref:System.TimeZoneInfo> obiekty są traktowane jako równe w następujących warunkach:  
  
-   Wartość ich <xref:System.TimeZoneInfo.Id%2A> właściwości jest taka sama.  
  
-   Mają te same reguły korekty.  
  
 <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> Zwraca wartość Boolean, będącej wynikiem obliczenia wyrażenia następujące:  
  
 ```csharp 
 other.Id == this.Id && HasSameRules(other);  
 ```
  
 ```vb
 other.Id = me.Id AndAlso HasSameRules(other)  
 ```

 Jeśli `other` parametru nie jest zainicjowany <xref:System.TimeZoneInfo> obiektu, ta metoda zwraca `false`.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29> metodę, aby określić, czy w lokalnej strefie czasowej jest czas pacyficzny lub czas wschodni.  
  
 [!code-csharp[System.TimeZone2.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#7)]
 [!code-vb[System.TimeZone2.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindSystemTimeZoneById">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo FindSystemTimeZoneById (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo FindSystemTimeZoneById(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindSystemTimeZoneById (id As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ FindSystemTimeZoneById(System::String ^ id);" />
      <MemberSignature Language="F#" Value="static member FindSystemTimeZoneById : string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.FindSystemTimeZoneById id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">Identyfikator strefy czasowej, co odpowiada <see cref="P:System.TimeZoneInfo.Id" /> właściwości.</param>
        <summary>Pobiera <see cref="T:System.TimeZoneInfo" /> obiektu z rejestru na podstawie jej identyfikatora.</summary>
        <returns>Obiekt, którego identyfikator jest wartością elementu <paramref name="id" /> parametru.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `id` Parametru musi odpowiadać dokładnie klucza rejestru strefy czasowej długości, ale nie w przypadku pomyślnego dopasowania zapasowej; oznacza to, że porównanie `id` ze strefą czasową identyfikatorów jest rozróżniana wielkość liter. Jeśli chcesz pobrać oparte na wyniki pasujące częściowo obiektów stref czasowych, może zapisać procedur niestandardowych, które współpracują z kolekcji tylko do odczytu <xref:System.TimeZoneInfo> obiekty zwrócone przez <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> metody.  
  
 <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> próbuje dopasować `id` podklucza nazw strefy NT\CurrentVersion\Time HKEY_LOCAL_MACHINE\Software\Microsoft\Windows gałęzi rejestru w systemach Windows XP i Windows Vista. Tej gałęzi nie zawiera niekoniecznie jest kompleksowa lista identyfikatorów strefy czasowej. Jeśli jest to wymagane przez aplikację, można utworzyć strefy czasowej określonej przez wywoływanie jednej z przeciążeń <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> — metoda, przez wywołanie <xref:System.TimeZoneInfo.FromSerializedString%2A> do deserializacji <xref:System.TimeZoneInfo> obiekt, który reprezentuje wymagane strefy czasowej. Jednak utworzone przez te wywołania metody stref czasowych nie znajdują się w rejestrze i nie można pobrać przy użyciu <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> metody. Te niestandardowe strefach czasowych jest możliwy tylko za pośrednictwem zwracane przez odwołanie do obiektu <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> lub <xref:System.TimeZoneInfo.FromSerializedString%2A> wywołania metody.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> metoda pobierania Tokio standardową strefę czasową. To <xref:System.TimeZoneInfo> obiekt jest następnie używany do konwertowania czasu lokalnego do czasu Warszawy i czy jest Tokio (czas standardowy) lub czas letni Tokio.  
  
 [!code-csharp[System.TimeZone2.Conversions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]
 [!code-vb[System.TimeZone2.Conversions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">System nie ma wystarczającej ilości pamięci do przechowywania informacji o strefie czasowej.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="id" /> Parametr jest <see langword="null" />.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">Określony przez identyfikator strefy czasowej <paramref name="id" /> nie został znaleziony. Oznacza to, że klucz rejestru, którego nazwa odpowiada <paramref name="id" /> nie istnieje, lub że klucz istnieje, ale nie zawiera żadnych danych strefy czasowej.</exception>
        <exception cref="T:System.Security.SecurityException">Proces nie ma wymaganych uprawnień do odczytu z klucza rejestru, który zawiera informacje o strefie czasowej.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Odnaleziono identyfikator strefy czasowej, ale dane rejestru są uszkodzone.</exception>
        <altmember cref="P:System.TimeZoneInfo.Id" />
      </Docs>
    </Member>
    <Member MemberName="FromSerializedString">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo FromSerializedString (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo FromSerializedString(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.FromSerializedString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromSerializedString (source As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ FromSerializedString(System::String ^ source);" />
      <MemberSignature Language="F#" Value="static member FromSerializedString : string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.FromSerializedString source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Reprezentacja ciągu zserializowana <see cref="T:System.TimeZoneInfo" /> obiektu.</param>
        <summary>Deserializuje ciąg, aby ponownie utworzyć oryginalny serializacji <see cref="T:System.TimeZoneInfo" /> obiektu.</summary>
        <returns>Oryginalny serializacji obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest to alternatywa dla zapewnienia całego kodu, które są wymagane do utworzenia strefy czasowej, która nie znajduje się w rejestrze. Możesz zdefiniować niestandardowy strefy czasowej, a następnie użyć <xref:System.TimeZoneInfo.ToSerializedString%2A> metody autonomiczny plik wykonywalny lub Użyj instalacji aplikacji program zapisać strefę czasową w postaci ciągu. Aplikację można pobrać ten ciąg w lokalizacji magazynu i za pomocą wystąpienia <xref:System.TimeZoneInfo.FromSerializedString%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład próbuje pobrać Antarktyka/południowego strefy czasowej z systemu lokalnego. Jeśli nie powiedzie się, kod próbuje pobrać informacji o strefie czasowej z pliku tekstowego w katalogu aplikacji. Jeśli ta próba nie powiedzie się, kod tworzy strefę czasową i zapisuje informacje o strefie czasowej do pliku tekstowego.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]
 [!code-vb[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="source" /> Parametr jest <see cref="F:System.String.Empty" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> Parametr jest pustym ciągiem.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Parametr źródłowy nie można przeprowadzić deserializacji do <see cref="T:System.TimeZoneInfo" /> obiektu.</exception>
        <altmember cref="M:System.TimeZoneInfo.ToSerializedString" />
      </Docs>
    </Member>
    <Member MemberName="GetAdjustmentRules">
      <MemberSignature Language="C#" Value="public TimeZoneInfo.AdjustmentRule[] GetAdjustmentRules ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.TimeZoneInfo/AdjustmentRule[] GetAdjustmentRules() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAdjustmentRules" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAdjustmentRules () As TimeZoneInfo.AdjustmentRule()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ GetAdjustmentRules();" />
      <MemberSignature Language="F#" Value="member this.GetAdjustmentRules : unit -&gt; TimeZoneInfo.AdjustmentRule[]" Usage="timeZoneInfo.GetAdjustmentRules " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo+AdjustmentRule[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera tablicę <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> obiektów, które mają zastosowanie do bieżącego <see cref="T:System.TimeZoneInfo" /> obiektu.</summary>
        <returns>Tablica obiektów dla tej strefy czasowej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> Metoda pobiera tablicę <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> obiektów. Każdy obiekt w tablicy definiuje skuteczne datę początkową i końcową tego korekta strefy czasowej, a także jej delta (dokładną za pomocą którego dostosowania powoduje, że czas zmienić ilość). Ponadto dwie właściwości zwracają <xref:System.TimeZoneInfo.TransitionTime?displayProperty=nameWithType> obiekty, które określają, kiedy występuje każdego roczne przejścia do i z (czas standardowy).  
  
 Jeśli strefa czasowa ma wiele reguł korygowania, są one zazwyczaj układane z najwcześniejszą (pod indeksem 0) do najnowszej (w indeksie <xref:System.Array.Length%2A> -1).  
  
 Jeśli strefa czasowa nie ma dopasowania reguł, <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> metoda zwraca pustą tablicę (tablica której <xref:System.Array.Length%2A> wynosi zero).  
  
 Wszelkie modyfikacje elementy tablicy zwracanej przez <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> — metoda nie są uwzględniane w reguł korygowania, które należą do określonej strefy czasowej. Aby zmodyfikować reguł korygowania strefę czasową (na przykład odzwierciedla jego historycznych przejścia do i z czasu letniego) należy utworzyć nowej strefy czasowej z regułami odpowiednie korekty, zamiast zmodyfikować istniejący.  
  
   
  
## Examples  
 Poniższy przykład pobiera wszystkich stref czasowych zdefiniowanych w lokalnym systemu i wyświetla pełnych informacji na temat ich zasady dopasowania do konsoli.  
  
 [!code-csharp[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#3)]
 [!code-vb[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">System nie ma wystarczającej ilości pamięci do utworzenia kopii reguł korygowania w pamięci.</exception>
        <altmember cref="T:System.TimeZoneInfo.AdjustmentRule" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAmbiguousTimeOffsets">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca informacje o możliwych dat i godzin, które niejednoznaczne daty i godziny mogą być mapowane na.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAmbiguousTimeOffsets">
      <MemberSignature Language="C#" Value="public TimeSpan[] GetAmbiguousTimeOffsets (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan[] GetAmbiguousTimeOffsets(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeSpan&gt; ^ GetAmbiguousTimeOffsets(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.GetAmbiguousTimeOffsets : DateTime -&gt; TimeSpan[]" Usage="timeZoneInfo.GetAmbiguousTimeOffsets dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Data i godzina.</param>
        <summary>Zwraca informacje o możliwych dat i godzin, które niejednoznaczne daty i godziny mogą być mapowane na.</summary>
        <returns>Tablica obiektów reprezentująca możliwe uniwersalny czas koordynowany (UTC) przesunięcia, że do określonej daty i godziny mogą być mapowane na.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dokładne zachowanie tej metody zależy od relacji między <xref:System.DateTime.Kind%2A> właściwości i <xref:System.TimeZoneInfo> obiektu, jak to pokazano w poniższej tabeli.  
  
|Typ obiektu TimeZoneInfo|Wartość właściwości Kind|Zachowanie|  
|------------------------------|-------------------------|--------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> lub <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Niejednoznaczny czas zwraca przesunięcia dla `dateTime`.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Konwertuje `dateTime` czasu lokalnego, a następnie zwraca przesunięcia niejednoznaczny czas dla wybranego okresu.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|Dowolna wartość.|Zgłasza wyjątek <xref:System.ArgumentException>.|  
|Inne strefy czasowej.|<xref:System.DateTimeKind.Local> lub <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Konwertuje `dateTime` określonej strefy czasowej i określa, czy ten czas jest niejednoznaczna.|  
|Inne strefy czasowej.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Określa, czy `dateTime` jest niejednoznaczny w określonej strefy czasowej.|  
  
 Kolejność <xref:System.TimeSpan> obiektów w tablicy zwracanej przez tę metodę jest niezdefiniowana. Jednak może ustalić, który element reprezentuje przesunięcia strefy czasowej (czas standardowy) porównując jego wartość ze strefą czasową <xref:System.TimeZoneInfo.BaseUtcOffset%2A> właściwości. Aby mapować niejednoznaczny czas na strefę czasową (czas standardowy), zobacz [porady: Rozwiązywanie niejednoznacznych wartości czasu](~/docs/standard/datetime/resolve-ambiguous-times.md).  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano metodę o nazwie `ShowPossibleUtcTimes` używającą <xref:System.TimeZoneInfo.GetAmbiguousTimeOffsets%28System.DateTime%29> metodę mapowania niejednoznaczny czas jego możliwości razy odpowiedniego uniwersalny czas koordynowany (UTC).  
  
 [!code-csharp[System.TimeZone2.GetAmbiguousTimeOffsets#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#1)]
 [!code-vb[System.TimeZone2.GetAmbiguousTimeOffsets#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#1)]  
  
 Następnie można wywołać metody przy użyciu kodu, takie jak następujące:  
  
 [!code-csharp[System.TimeZone2.GetAmbiguousTimeOffsets#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#2)]
 [!code-vb[System.TimeZone2.GetAmbiguousTimeOffsets#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateTime" /> nie jest niejednoznaczny czas.</exception>
        <block subset="none" type="usage">
          <para>Na [! Systemy include[WinXP](~/includes/WinXP-MD.MD)] Ta metoda dotyczy tylko bieżącej regule korekty podczas określania czy <paramref name="dateTime" /> jest niejednoznaczny, jeśli bieżące wystąpienie jest <see cref="P:System.TimeZoneInfo.Local" />. Metoda nie może w związku z tym dokładnie zgłaszać niejednoznaczny czas przesunięć kropki przed wprowadzenia bieżącej regule dopasowania. Aby uzyskać więcej informacji, zobacz Uwagi dotyczące obiektów wywołujących sekcji w <see cref="P:System.TimeZoneInfo.Local" /> właściwości.</para>
        </block>
        <altmember cref="Overload:System.TimeZoneInfo.IsAmbiguousTime" />
      </Docs>
    </Member>
    <Member MemberName="GetAmbiguousTimeOffsets">
      <MemberSignature Language="C#" Value="public TimeSpan[] GetAmbiguousTimeOffsets (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan[] GetAmbiguousTimeOffsets(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeSpan&gt; ^ GetAmbiguousTimeOffsets(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.GetAmbiguousTimeOffsets : DateTimeOffset -&gt; TimeSpan[]" Usage="timeZoneInfo.GetAmbiguousTimeOffsets dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Data i godzina.</param>
        <summary>Zwraca informacje o możliwych dat i godzin, które niejednoznaczne daty i godziny mogą być mapowane na.</summary>
        <returns>Tablica obiektów reprezentująca możliwe uniwersalny czas koordynowany (UTC) przesunięcia, że do określonej daty i godziny mogą być mapowane na.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dokładne zachowanie tej metody zależy od relacji między <xref:System.DateTimeOffset.Offset%2A> właściwość `dateTimeOffset` parametru i <xref:System.TimeZoneInfo> obiektu. Jeśli wartość <xref:System.DateTimeOffset.Offset%2A> właściwość odpowiada przesunięcia możliwe bieżącej strefy czasowej z uniwersalnego czasu koordynowanego (UTC) dla że data i godzina, metoda zwraca możliwe przesunięcia. W przeciwnym razie konwertuje `dateTimeOffset` do czasu w bieżącej strefy czasowej, a następnie zwraca przesunięcia możliwe, z których daty i godziny.  
  
 Kolejność <xref:System.TimeSpan> obiektów w tablicy zwracanej przez tę metodę jest niezdefiniowana. Jednak może ustalić, który element reprezentuje przesunięcia strefy czasowej (czas standardowy) porównując jego wartość ze strefą czasową <xref:System.TimeZoneInfo.BaseUtcOffset%2A> właściwości. Aby mapować niejednoznaczny czas na strefę czasową (czas standardowy), zobacz [porady: Rozwiązywanie niejednoznacznych wartości czasu](~/docs/standard/datetime/resolve-ambiguous-times.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateTimeOffset" /> nie jest niejednoznaczny czas.</exception>
        <block subset="none" type="usage">
          <para>Na [! Systemy include[WinXP](~/includes/WinXP-MD.MD)] Ta metoda dotyczy tylko bieżącej regule korekty podczas określania czy <paramref name="dateTimeOffset" /> jest niejednoznaczny, jeśli bieżące wystąpienie jest <see cref="P:System.TimeZoneInfo.Local" />. Metoda nie może w związku z tym dokładnie zgłaszać niejednoznaczny czas przesunięć kropki przed wprowadzenia bieżącej regule dopasowania. Aby uzyskać więcej informacji, zobacz Uwagi dotyczące obiektów wywołujących sekcji w <see cref="P:System.TimeZoneInfo.Local" /> właściwości.</para>
        </block>
        <altmember cref="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="timeZoneInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pełni rolę funkcji skrótu do tworzenia skrótów algorytmów i struktury danych, takich jak tabele hash.</summary>
        <returns>32-bitowe liczby całkowite ze znakiem służy jako wartość skrótu dla tego <see cref="T:System.TimeZoneInfo" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać dodatkowe szczegóły dotyczące <xref:System.TimeZoneInfo.GetHashCode%2A> metody, zobacz <xref:System.Object.GetHashCode%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSystemTimeZones">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;TimeZoneInfo&gt; GetSystemTimeZones ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.TimeZoneInfo&gt; GetSystemTimeZones() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetSystemTimeZones" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSystemTimeZones () As ReadOnlyCollection(Of TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;TimeZoneInfo ^&gt; ^ GetSystemTimeZones();" />
      <MemberSignature Language="F#" Value="static member GetSystemTimeZones : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;TimeZoneInfo&gt;" Usage="System.TimeZoneInfo.GetSystemTimeZones " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.TimeZoneInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca kolekcję posortowane stref czasowych o tym, które informacje są dostępne w systemie lokalnym.</summary>
        <returns>Kolekcja tylko do odczytu <see cref="T:System.TimeZoneInfo" /> obiektów.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> Metoda pobiera wszystkie informacje dostępne strefy czasowej z podkluczy rejestru HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time stref klucza. Jeśli nie można pomyślnie pobrać i przeanalizować wartości właściwości określonego ciągu indywidualnego <xref:System.TimeZoneInfo> obiekty, ta metoda ustawia wartości na ciąg pusty ("").  
  
> [!IMPORTANT]
>  <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> Metoda zwraca zbiór <xref:System.TimeZoneInfo> tylko obiekty stref czasowych zdefiniowanych w rejestrze. Nie ma stref czasowych utworzone za pomocą przeciążeń <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metody. Są one dostępne za pośrednictwem tylko odwołanie do obiektu zwracany przez metodę tworzenia strefy czasowej.  
  
 Kolekcja zwracana przez tę metodę jest sortowana przez przesunięcie czasu UTC, a dla stref czasowych, które mają tego samego przesunięcie czasu UTC, według nazwy wyświetlanej przy użyciu bieżącej kultury. Aby uzyskać informacje o nazwę wyświetlaną, zobacz <xref:System.TimeZoneInfo.DisplayName%2A>.  
  
 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> Obsługuje obiektu zwróconego przez tę metodę <xref:System.Collections.Generic.IEnumerable%601> interfejsu, co oznacza, że można powtórzyć, za pomocą `foreach` (w języku C#) lub `For Each…Next` (w języku Visual Basic) instrukcje. Każdej iteracji pętli zapewnia następnej <xref:System.TimeZoneInfo> obiektu w kolekcji.  
  
 Kolekcja <xref:System.TimeZoneInfo> obiektów reprezentuje stref czasowych zdefiniowanych na komputerze lokalnym; go nie dostarcza pełne informacje dla wszystkich stref czasowych okresach czasu. Jeśli aplikacja wymaga stref czasowych nie znaleziono na komputerze lokalnym, można utworzyć niestandardowy stref czasowych przy użyciu przeciążeń <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metody. Aby uzyskać więcej informacji, zobacz [porady: tworzenie stref czasowych bez reguł korygowania](~/docs/standard/datetime/create-time-zones-without-adjustment-rules.md) i [porady: tworzenie stref czasowych przy użyciu reguł korygowania](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md).  
  
 Można również określić, czy poszczególne strefy czasowej jest zdefiniowana na komputerze lokalnym przez wywołanie metody <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> — metoda i podając identyfikator strefy czasowej, aby pobrać jako parametr.  
  
   
  
## Examples  
 Poniższy przykład pobiera kolekcję obiektów stref czasowych, które reprezentują stref czasowych zdefiniowanych na komputerze i zapisuje informacje na temat ich do pliku tekstowego.  
  
 [!code-csharp[System.TimeZone2.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/getsystemtimezones1.cs#6)]
 [!code-vb[System.TimeZone2.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/getsystemtimezones1.vb#6)]
  [!code-powershell[System.TimeZone2.Class#6](~/samples/snippets/powershell/VS_Snippets_CLR_System/System.TimeZone2.Class/PS/Timezone2_Examples.ps1)]   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">Jest za mało pamięci do przechowywania wszystkich informacji o strefie czasowej.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma uprawnień do odczytu z kluczy rejestru, które zawierają informacje o strefie czasowej.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUtcOffset">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Oblicza przesunięcie lub różnicę czasu w tej strefie czasowej i uniwersalny czas koordynowany (UTC) dla określonej daty i godziny.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan GetUtcOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetUtcOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.GetUtcOffset : DateTime -&gt; TimeSpan" Usage="timeZoneInfo.GetUtcOffset dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Data i godzina, które można określić przesunięcie.</param>
        <summary>Oblicza przesunięcie lub różnicę czasu w tej strefie czasowej i uniwersalny czas koordynowany (UTC) dla określonej daty i godziny.</summary>
        <returns>Obiekt, który wskazuje odstęp czasu między dwoma stref czasowych.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przedział czasu zwrócony obejmuje wszystkie problemy dotyczące różnic z powodu stosowania reguł dopasowania do bieżącej strefy czasowej. Różni się od <xref:System.TimeZoneInfo.BaseUtcOffset%2A> właściwość, która zwraca różnicę między uniwersalny czas koordynowany (UTC) i strefy czasowej (czas standardowy) i, w związku z tym nie uwzględnia reguł korygowania.  
  
 Jeśli `dateTime` parametru <xref:System.DateTime.Kind%2A> nie odpowiada właściwości obiektu strefy czasowej, ta metoda wykonuje konwersję konieczne przed zwróceniem wyniku. Na przykład, to może wystąpić, jeśli <xref:System.DateTime.Kind%2A> właściwość jest <xref:System.DateTimeKind.Local?displayProperty=nameWithType> , ale nie jest obiektem strefę czasową w lokalnej strefie czasowej. Jeśli `dateTime` jest niejednoznaczny, lub jeśli przekonwertowanego czasu jest niejednoznaczny, ta metoda interpretuje niejednoznaczne czasu jako czas standardowy. Jeśli `dateTime` jest nieprawidłowy, ta metoda zwraca <xref:System.TimeSpan> obiektów, które odzwierciedla różnica między czasem UTC i strefy czasowej (czas standardowy).  
  
 <xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29?displayProperty=nameWithType> Metoda jest podobna operacja <xref:System.TimeZone.GetUtcOffset%2A> metody <xref:System.TimeZone> klasy.  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie <xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29> metody z różnych strefach czasowych i wartości daty, które mają inne <xref:System.DateTime.Kind%2A> wartości właściwości.  
  
 [!code-csharp[System.TimeZone2.GetUtcOffset#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/cs/System.TimeZone2.GetUtcOffset.cs#1)]
 [!code-vb[System.TimeZone2.GetUtcOffset#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/vb/System.TimeZone2.GetUtcOffset.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Na [! Systemy include[WinXP](~/includes/WinXP-MD.MD)] Ta metoda dotyczy tylko bieżącej regule korekty podczas obliczania przesunięcie od czasu UTC, czy bieżące wystąpienie jest <see cref="P:System.TimeZoneInfo.Local" />. W związku z tym metoda może nie dokładnie obliczyć różnica między czasem lokalnym i UTC na <paramref name="dateTime" />. Aby uzyskać więcej informacji, zobacz Uwagi dotyczące obiektów wywołujących sekcji w <see cref="P:System.TimeZoneInfo.Local" /> właściwości.</para>
        </block>
        <altmember cref="P:System.TimeZoneInfo.BaseUtcOffset" />
      </Docs>
    </Member>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan GetUtcOffset (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetUtcOffset(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.GetUtcOffset : DateTimeOffset -&gt; TimeSpan" Usage="timeZoneInfo.GetUtcOffset dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Data i godzina, które można określić przesunięcie.</param>
        <summary>Oblicza przesunięcie lub różnicę czasu w tej strefie czasowej i uniwersalny czas koordynowany (UTC) dla określonej daty i godziny.</summary>
        <returns>Obiekt, który wskazuje odstęp czasu między uniwersalny czas koordynowany (UTC) i strefę czasową.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przedział czasu zwrócony obejmuje wszystkie problemy dotyczące różnic z powodu stosowania reguł dopasowania do bieżącej strefy czasowej. Różni się od <xref:System.TimeZoneInfo.BaseUtcOffset%2A> właściwość, która zwraca różnicę między uniwersalny czas koordynowany (UTC) i strefy czasowej (czas standardowy) i, w związku z tym nie uwzględnia reguł korygowania.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Na [! Systemy include[WinXP](~/includes/WinXP-MD.MD)] Ta metoda dotyczy tylko bieżącej regule korekty podczas obliczania przesunięcie od czasu UTC, czy bieżące wystąpienie jest <see cref="P:System.TimeZoneInfo.Local" />. W związku z tym metoda może nie dokładnie obliczyć różnica między czasem lokalnym i UTC na <paramref name="dateTimeOffset" />. Aby uzyskać więcej informacji, zobacz Uwagi dotyczące obiektów wywołujących sekcji w <see cref="P:System.TimeZoneInfo.Local" /> właściwości.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="HasSameRules">
      <MemberSignature Language="C#" Value="public bool HasSameRules (TimeZoneInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasSameRules(class System.TimeZoneInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.HasSameRules(System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasSameRules (other As TimeZoneInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasSameRules(TimeZoneInfo ^ other);" />
      <MemberSignature Language="F#" Value="member this.HasSameRules : TimeZoneInfo -&gt; bool" Usage="timeZoneInfo.HasSameRules other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="other">Drugi obiekt do porównania z bieżącym <see cref="T:System.TimeZoneInfo" /> obiektu.</param>
        <summary>Wskazuje, czy bieżący obiekt, a drugi <see cref="T:System.TimeZoneInfo" /> obiekt ma te same reguły korekty.</summary>
        <returns>
          <see langword="true" /> Jeśli dwie strefy czasowe mają identyczne dostosowania reguł i identyczne base przesunięcie; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podobnie jak <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> metody <xref:System.TimeZoneInfo.HasSameRules%2A> metody wskazuje, czy dwie strefy czasowe mieć tego samego podstawowego przesunięcie (zgodnie z definicją w <xref:System.TimeZoneInfo.BaseUtcOffset%2A> właściwości) i tym samym reguły korekty. W odróżnieniu od <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> metody <xref:System.TimeZoneInfo.HasSameRules%2A> przy porównywaniu identyfikatorów stref czasowych (zgodnie z definicją w <xref:System.TimeZoneInfo.Id%2A> właściwości).  
  
   
  
## Examples  
 Zazwyczaj liczba stref czasowych zdefiniowanych w rejestrze mają tego samego przesunięcie od uniwersalny czas koordynowany (UTC) i tej samej reguły korekty. W poniższym przykładzie przedstawiono listę tych stref czasowych w konsoli.  
  
 [!code-csharp[System.TimeZone2.HasSameRules#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/cs/HasSameRules.cs#1)]
 [!code-vb[System.TimeZone2.HasSameRules#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/vb/HasSameRules.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="other" /> Parametr jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Id { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Id : string" Usage="System.TimeZoneInfo.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera identyfikator strefy czasowej.</summary>
        <value>Identyfikator strefy czasowej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikator strefy czasowej jest ciąg klucza, który unikatowo identyfikuje daną strefę czasową. W systemie Windows XP i Windows Vista odpowiadający mu podkluczy strefy NT\CurrentVersion\Time HKEY_LOCAL_MACHINE\Software\Microsoft\Windows gałęzi rejestru. Mogą być przekazywane jako parametr <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> metody można pobrać z rejestru daną strefę czasową.  
  
> [!IMPORTANT]
>  Mimo że nazwa klucza w rejestrze systemu Windows może zawierać maksymalnie 255 znaków, zaleca się identyfikatora przypisać niestandardowe strefę czasową 32 znaków. Im dłuższy identyfikator, tym większe prawdopodobieństwo, że będzie nieprawidłową nazwę klucza podane podczas pobierania go.  
  
 Wartość <xref:System.TimeZoneInfo.Id%2A> właściwość jest zwykle, ale nie zawsze identyczna ze <xref:System.TimeZoneInfo.StandardName%2A> właściwości. Identyfikator skoordynowanego uniwersalnych strefy czasowej jest UTC.  
  
   
  
## Examples  
 Poniższy przykład zawiera identyfikator każdej ze stref czasowych zdefiniowanych na komputerze lokalnym.  
  
 [!code-csharp[System.TimeZone2.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#5)]
 [!code-vb[System.TimeZone2.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsAmbiguousTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Określa, czy określoną datę i godzinę w daną strefę czasową jest niejednoznaczny i mogą być mapowane na dwa lub więcej razy uniwersalny czas koordynowany (UTC).</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsAmbiguousTime">
      <MemberSignature Language="C#" Value="public bool IsAmbiguousTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAmbiguousTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbiguousTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsAmbiguousTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsAmbiguousTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Wartość daty i godziny.</param>
        <summary>Określa, czy określoną datę i godzinę w daną strefę czasową jest niejednoznaczny i mogą być mapowane na dwa lub więcej razy uniwersalny czas koordynowany (UTC).</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="dateTime" /> parametr jest niejednoznaczny; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Niejednoznaczny czas znajduje się w zakresie czasu dla bieżącej strefy czasowej. Oznacza to, że można go czas standardowy lub czasie, będącą wynikiem zastosowania reguła korekty. Zazwyczaj powoduje niejednoznacznych wartości czasu, gdy zegar jest ustawiony, aby powrócić do (czas standardowy) od czasu letniego. Zobacz sekcję przykład ilustrację.  
  
 Uniwersalny czas koordynowany (UTC) nie ma żadnych niejednoznacznych wartości czasu; żadna czasu stref, które nie obsługują czasu letniego. W związku z tym tych stref czasowych mieć reguł korygowania i wywołania <xref:System.TimeZoneInfo.IsAmbiguousTime%2A> zawsze zwracany metody `false`.  
  
 Dla stref czasowych honorujących czasu letniego, dokładne zachowanie tej metody zależy od relacji między <xref:System.DateTime.Kind%2A> właściwości i <xref:System.TimeZoneInfo> obiektu, jak to pokazano w poniższej tabeli.  
  
|Typ obiektu TimeZoneInfo|Wartość właściwości Kind|Zachowanie|  
|------------------------------|-------------------------|--------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> lub <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Określa, czy `dateTime` parametru jest niejednoznaczna.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Konwertuje `dateTime` na czas lokalny i określa, czy ten czas jest niejednoznaczna.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType> lub <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Zwraca `false`.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Jeśli `dateTime` jest niejednoznaczny, zakłada jest czas standardowy, konwertuje ją na czas UTC i zwraca `false`.|  
|Inne strefy czasowej.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> lub <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Konwertuje `dateTime` na czas w strefie czasowej określonej i określa, czy ten czas jest niejednoznaczna.|  
|Inne strefy czasowej.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Określa, czy `dateTime` jest niejednoznaczna.|  
  
   
  
## Examples  
 W strefie czas pacyficzny czas letni kończy się o 2:00 4 listopada 2007. Poniższy przykład przekazuje czas w odstępach jednej minuty od godziny 12:59 4 listopada 2007 do 2:01:00 4 listopada 2007 aby <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29> metody <xref:System.TimeZoneInfo> obiekt, który reprezentuje czas pacyficzny strefy. Dane wyjściowe konsoli wskazuje, że cały czas od godziny 1:00 4 listopada 2007 do 01:59:00 4 listopada 2007 są niejednoznaczne.  
  
 [!code-csharp[System.TimeZone2.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#8)]
 [!code-vb[System.TimeZone2.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.DateTime.Kind" /> Właściwość <paramref name="dateTime" /> wartość jest <see cref="F:System.DateTimeKind.Local" /> i <paramref name="dateTime" /> jest nieprawidłowa godzina.</exception>
        <block subset="none" type="usage">
          <para>Na [! Systemy include[WinXP](~/includes/WinXP-MD.MD)] Ta metoda ma zastosowanie tylko bieżącej regule dopasowania, gdy bieżące wystąpienie jest <see cref="P:System.TimeZoneInfo.Local" />. W związku z tym metoda może nie dokładnie zgłaszać czy <paramref name="dateTime" /> jest niejednoznaczny czas dla okresów przed wprowadzenia bieżącej regule dopasowania. Aby uzyskać więcej informacji, zobacz Uwagi dotyczące obiektów wywołujących sekcji w <see cref="P:System.TimeZoneInfo.Local" /> właściwości.</para>
        </block>
        <altmember cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsAmbiguousTime">
      <MemberSignature Language="C#" Value="public bool IsAmbiguousTime (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAmbiguousTime(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbiguousTime(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.IsAmbiguousTime : DateTimeOffset -&gt; bool" Usage="timeZoneInfo.IsAmbiguousTime dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Data i godzina.</param>
        <summary>Określa, czy określoną datę i godzinę w daną strefę czasową jest niejednoznaczny i mogą być mapowane na dwa lub więcej razy uniwersalny czas koordynowany (UTC).</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="dateTimeOffset" /> parametr jest niejednoznaczny w bieżącej strefy czasowej; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Niejednoznaczny czas znajduje się w zakresie czasu dla bieżącej strefy czasowej. Oznacza to, że może ona czas standardowy lub czasie, będącą wynikiem zastosowania reguła korekty. Zazwyczaj powoduje niejednoznacznych wartości czasu, gdy zegar jest ustawiony, aby powrócić do (czas standardowy) od czasu letniego. Uniwersalny czas koordynowany (UTC) nie ma żadnych niejednoznacznych wartości czasu; żadna czasu stref, które nie obsługują czasu letniego.  
  
 Dokładne zachowanie metody zależy od relacji między <xref:System.DateTimeOffset.Offset%2A> właściwość `dateTimeOffset` parametr i strefę czasową. Jeśli wartość <xref:System.DateTimeOffset.Offset%2A> określa metodę właściwość jest potencjalnie przesunięcia z bieżącej strefy czasowej UTC, czy ta data i godzina jest niejednoznaczna. W przeciwnym razie konwertuje `dateTimeOffset` na czas w bieżącej strefy czasowej, a następnie określa, czy ta data i godzina jest niejednoznaczna.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Na [! Systemy include[WinXP](~/includes/WinXP-MD.MD)] Ta metoda ma zastosowanie tylko bieżącej regule dopasowania, gdy bieżące wystąpienie jest <see cref="P:System.TimeZoneInfo.Local" />. W związku z tym metoda może nie dokładnie zgłaszać czy <paramref name="dateTimeOffset" /> jest niejednoznaczny czas dla okresów przed wprowadzenia bieżącej regule dopasowania. Aby uzyskać więcej informacji, zobacz Uwagi dotyczące obiektów wywołujących sekcji w <see cref="P:System.TimeZoneInfo.Local" /> właściwości.</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsDaylightSavingTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wskazuje, czy określoną datą i godziną mieści się w zakresie czasu letniego dla bieżącego <see cref="T:System.TimeZoneInfo" /> strefa czasowa obiektu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsDaylightSavingTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Wartość daty i godziny.</param>
        <summary>Wskazuje, czy określoną datą i godziną mieści się w zakresie czasu letniego dla bieżącej strefy czasowej <see cref="T:System.TimeZoneInfo" /> obiektu.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="dateTime" /> parametr jest Uwzględniaj czasu; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> dotyczy relacji między strefy czasowej reprezentowany przez <xref:System.TimeZoneInfo> obiektu i <xref:System.DateTime.Kind%2A> właściwość `dateTime` parametru, jak to pokazano w poniższej tabeli.  
  
|Wystąpień obiektów TimeZoneInfo|Właściwość DateTime.Kind|Wynik|  
|-------------------------|----------------------------|------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Local`|Określa, czy `dateTime` jest czasu letniego.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Utc`|Konwertuje `dateTime` z uniwersalnego czasu koordynowanego (UTC) na czas lokalny i określa, czy jest ono czasu letniego.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Unspecified`|Zakłada się, że `dateTime` reprezentuje czas lokalny i określa, czy jest ono czasu letniego.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|`DateTimeKind.Local`, `DateTimeKind.Unspecified`, lub `DateTimeKind.Utc`|Zwraca `false` (UTC nie obsługuje zmiany czasu).|  
|Inne <xref:System.TimeZoneInfo> obiektu.|`DateTimeKind.Local`|Konwertuje lokalnego czasu na czas <xref:System.TimeZoneInfo> obiektu i określa, czy jest on czasu letniego.|  
|Inne <xref:System.TimeZoneInfo> obiektu.|`DateTimeKind.Utc`|Konwertuje czas UTC <xref:System.TimeZoneInfo> obiektu i określa, czy jest on czasu letniego.|  
|Inne <xref:System.TimeZoneInfo> obiektu.|`DateTimeKind.Unspecified`|Określa, czy `dateTime` jest czasu letniego.|  
  
 Jeśli strefa czasowa reprezentowany przez <xref:System.TimeZoneInfo> obiekt nie obsługuje czasu letniego, metoda zawsze zwraca `false`. Liczba stref czasowych, łącznie z <xref:System.TimeZoneInfo.Utc%2A>, na przykład czasu letniego.  Aby ustalić, czy strefa czasowa obsługuje czasu letniego, pobrać wartość jego <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> właściwości.  
  
 Jeśli `dateTime` parametr określa niejednoznaczny czas w strefie czasowej bieżącego obiektu, <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> interpretuje metody `dateTime` jako (czas standardowy) i zwraca `false` jeśli jego <xref:System.DateTime.Kind%2A> jest właściwość <xref:System.DateTimeKind.Local?displayProperty=nameWithType> lub <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Jeśli <xref:System.DateTime.Kind%2A> właściwość jest <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, ta metoda będzie wybierz poprawny niejednoznaczny czas i wskazać, czy czasu letniego.  
  
 Ponieważ <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29?displayProperty=nameWithType> metoda może zwracać `false` daty i czasu, który jest niejednoznaczny (to znaczy, datę i godzinę reprezentujące (czas standardowy) albo zmiany czasu, w szczególności strefy czasowej), <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29?displayProperty=nameWithType> metody mogą łączyć się z <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> metodę, aby określić, czy czas może być czasu letniego. Ponieważ niejednoznaczny czas, który może być zarówno czasu letniego, jak i czas standardowy, <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29> można wywołać metody najpierw do określenia, czy data i godzina może być czasu letniego. Jeśli metoda zwraca `false`, <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> można wywołać metody, aby określić, czy <xref:System.DateTime> wartość czasu letniego. Poniższy przykład przedstawia tej metody.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#2)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#2)]  
  
 Jeśli `dateTime` parametr określa nieprawidłową wartość czas, zgłasza wyjątek w wywołaniu metody <xref:System.ArgumentException> Jeśli wartość `dateTime` parametru <xref:System.DateTime.Kind%2A> właściwość jest <xref:System.DateTimeKind.Local?displayProperty=nameWithType>; w przeciwnym razie metoda zwraca `false`.  
  
 Wywołanie <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> metodę, aby określić, czy używać strefę czasową <xref:System.TimeZoneInfo.StandardName%2A> wartość lub jej <xref:System.TimeZoneInfo.DaylightName%2A> wartości podczas wyświetlania Nazwa strefy czasowej. Zobacz sekcję przykład ilustrację.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano metodę o nazwie `DisplayDateWithTimeZoneName` używającą <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> metodę, aby określić, czy ma być wyświetlana nazwa (czas standardowy) lub czas letni strefę czasową.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.DateTime.Kind" /> Właściwość <paramref name="dateTime" /> wartość jest <see cref="F:System.DateTimeKind.Local" /> i <paramref name="dateTime" /> jest nieprawidłowa godzina.</exception>
        <block subset="none" type="usage">
          <para>Na [! Systemy include[WinXP](~/includes/WinXP-MD.MD)] Ta metoda ma zastosowanie tylko bieżącej regule dopasowania, gdy bieżące wystąpienie jest <see cref="P:System.TimeZoneInfo.Local" />. W związku z tym metoda może nie dokładnie zgłaszać czy <paramref name="dateTime" /> jest czasu letniego dla okresów przed wprowadzenia bieżącej regule dopasowania. Aby uzyskać więcej informacji, zobacz Uwagi dotyczące obiektów wywołujących sekcji w <see cref="P:System.TimeZoneInfo.Local" /> właściwości.</para>
        </block>
        <altmember cref="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : DateTimeOffset -&gt; bool" Usage="timeZoneInfo.IsDaylightSavingTime dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Wartość daty i godziny.</param>
        <summary>Wskazuje, czy określoną datą i godziną mieści się w zakresie czasu letniego dla bieżącej strefy czasowej <see cref="T:System.TimeZoneInfo" /> obiektu.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="dateTimeOffset" /> parametr jest Uwzględniaj czasu; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> dotyczy relacji między strefy czasowej reprezentowany przez <xref:System.TimeZoneInfo> obiektu i <xref:System.DateTimeOffset.Offset%2A> właściwość `dateTimeOffset` parametru. Jeśli `dateTimeOffset` nie odpowiada przesunięcie bieżącej strefy czasowej z uniwersalnego czasu koordynowanego (UTC), konwertuje metody, których czas na czas w bieżącej strefy czasowej. Następnie określa, czy ta data i godzina jest letni zaoszczędzenie czasu.  
  
 Jeśli strefa czasowa reprezentowany przez <xref:System.TimeZoneInfo> obiekt nie obsługuje czasu letniego, metoda zawsze zwraca `false`. Aby ustalić, czy strefa czasowa obsługuje czasu letniego, pobrać wartość jego <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Na [! Systemy include[WinXP](~/includes/WinXP-MD.MD)] Ta metoda ma zastosowanie tylko bieżącej regule dopasowania, gdy bieżące wystąpienie jest <see cref="P:System.TimeZoneInfo.Local" />. W związku z tym metoda może nie dokładnie zgłaszać czy <paramref name="dateTimeOffset" /> jest czasu letniego dla okresów przed wprowadzenia bieżącej regule dopasowania. Aby uzyskać więcej informacji, zobacz Uwagi dotyczące obiektów wywołujących sekcji w <see cref="P:System.TimeZoneInfo.Local" /> właściwości.</para>
        </block>
        <altmember cref="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      </Docs>
    </Member>
    <Member MemberName="IsInvalidTime">
      <MemberSignature Language="C#" Value="public bool IsInvalidTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsInvalidTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsInvalidTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsInvalidTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsInvalidTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Wartość daty i godziny.</param>
        <summary>Wskazuje, czy do określonej daty i godziny jest nieprawidłowy.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="dateTime" /> jest nieprawidłowy; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nieprawidłowa godzina znajduje się w zakresie czasu dla bieżącej strefy czasowej, która nie może być mapowany do uniwersalnego czasu koordynowanego (UTC) z powodu stosowania reguła korekty. Zazwyczaj razy nieprawidłowe wystąpić, gdy czas ruchów do przodu dla czasu letniego. Zobacz sekcję przykład ilustrację.  
  
 Wartość <xref:System.DateTime.Kind%2A> właściwość `dateTime` parametr ma wpływ na czy `dateTime` reprezentuje nieprawidłową wartość czas, jak to pokazano w poniższej tabeli.  
  
|Właściwość DateTime.Kind|Obiekt informacje o strefie czasowej (jeśli dotyczy)|Zachowanie|  
|----------------------------|-------------------------------------------|--------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|Określa, czy czas jest nieprawidłowy.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType> lub strefy czasu lokalnego.|Konwertuje `dateTime` czasu <xref:System.TimeZoneInfo> obiektu i zwraca `false`.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Nie dotyczy.|Założono `dateTime` jest czasem <xref:System.TimeZoneInfo> obiektu i określa, czy jest nieprawidłowy.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Nie dotyczy.|Zwraca `false`.|  
  
   
  
## Examples  
 W strefie czas pacyficzny czas letni rozpoczyna się o 2:00 2 kwietnia 2006 roku. Poniższy kod powoduje przekazanie czas w odstępach jednej minuty od godziny 1:59 2 kwietnia 2006 do 3:01:00. 2 kwietnia 2006 do <xref:System.TimeZoneInfo.IsInvalidTime%2A> metody <xref:System.TimeZoneInfo> obiekt, który reprezentuje czas pacyficzny strefy. Dane wyjściowe konsoli wskazuje, że cały czas od 2:00 2 kwietnia 2006 do 2:59:00 2 kwietnia 2006 są nieprawidłowe.  
  
 [!code-csharp[System.TimeZone2.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#9)]
 [!code-vb[System.TimeZone2.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#9)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Na [! Systemy include[WinXP](~/includes/WinXP-MD.MD)], ta metoda ma zastosowanie tylko reguła korekty, gdy bieżące wystąpienie jest <see cref="P:System.TimeZoneInfo.Local" />. W związku z tym metoda może nie dokładnie zgłaszać czy <paramref name="dateTime" /> jest nieprawidłowy czas dla okresów przed wprowadzenia bieżącej regule dopasowania. Aby uzyskać więcej informacji, zobacz Uwagi dotyczące obiektów wywołujących sekcji w <see cref="P:System.TimeZoneInfo.Local" /> właściwości.</para>
        </block>
        <altmember cref="Overload:System.TimeZoneInfo.IsAmbiguousTime" />
      </Docs>
    </Member>
    <Member MemberName="Local">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo Local { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZoneInfo Local" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Local" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Local As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZoneInfo ^ Local { TimeZoneInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Local : TimeZoneInfo" Usage="System.TimeZoneInfo.Local" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.TimeZoneInfo" /> obiekt, który reprezentuje w lokalnej strefie czasowej.</summary>
        <value>Obiekt, który reprezentuje w lokalnej strefie czasowej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W lokalnej strefie czasowej jest strefy czasowej na komputerze, na którym jest wykonywany kod.  
  
> [!IMPORTANT]
>  Należy zawsze dostęp do strefy czasu lokalnego za pośrednictwem <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> właściwości, a nie czas lokalny przypisywanie strefy do <xref:System.TimeZoneInfo> zmienna obiektu. Zapobiega to <xref:System.TimeZoneInfo> trwa unieważniona przez wywołanie do zmiennej obiektu <xref:System.TimeZoneInfo.ClearCachedData%2A> metody.  
  
 <xref:System.TimeZoneInfo> Obiektu zwróconego przez <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> właściwość odzwierciedla ustawienie **automatycznie Dostosuj uwzględniaj zmiany** wyboru lub **automatycznie dostosuj zegar do zapisywania czasu letniego Czas** wyboru w Panelu sterowania **Data i godzina** aplikacji dla systemu Windows XP i Windows Vista, odpowiednio. Jeśli pole wyboru jest zaznaczone, buforowaną kopię w lokalnej strefie czasowej nie zawiera czasu letniego informacji. Oznacza to, że:  
  
-   Lokalna strefa czasowa <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> metoda zwraca tablicę o długości wynosi zero.  
  
-   Lokalna strefa czasowa <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> zwraca właściwość `false`.  
  
-   Strefa czas lokalny nie ma żadnych razy niejednoznaczne lub nieprawidłowy (wszystkie wywołania <xref:System.TimeZoneInfo.IsAmbiguousTime%2A> lub <xref:System.TimeZoneInfo.IsInvalidTime%2A> zwracać `false`).  
  
-   Wszystkie wywołania <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A> z poszczególnych godzin czasu lokalnego zwróci wartość false.  
  
 Nie dotyczy, jednak jeśli odwołanie do lokalnej strefy czasowej są pobierane przy użyciu <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> metody.  
  
 <xref:System.TimeZoneInfo.Local%2A> Właściwość odpowiada <xref:System.TimeZone.CurrentTimeZone%2A> właściwość <xref:System.TimeZone> klasy.  
  
   
  
## Examples  
 Poniższy przykład pobiera <xref:System.TimeZoneInfo> obiekt, który reprezentuje w lokalnej strefie czasowej i danych wyjściowych, nazwa wyświetlana, nazwa (czas standardowy) i nazwa czasu letniego.  
  
 [!code-csharp[System.TimeZone2.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]
 [!code-vb[System.TimeZone2.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Podczas konwertowania daty i godziny [! INCLUDE[WinXP](~/includes/WinXP-MD.MD)] rozpoznaje tylko bieżącą korekty regułę, która dotyczy wszystkich dat, łącznie z datami niskiego poziomu (czyli dat starsze niż data rozpoczęcia bieżącego reguła korekty). Na [! INCLUDE[WinXP](~/includes/WinXP-MD.MD)], aby zapobiec lokalnych informacji daty i godziny dostarczonych przez <see cref="P:System.TimeZoneInfo.Local" /> obiektu rozbieżności od daty i godziny informacje wyświetlane na pasku zadań <see cref="T:System.TimeZoneInfo" /> obiektu zwróconego przez <see cref="P:System.TimeZoneInfo.Local" />właściwości dotyczą również bieżącej regule korekty daty niższego poziomu. Aplikacje działające na [! INCLUDE[WinXP](~/includes/WinXP-MD.MD)] w przeszłości dokładne daty lokalne, które wymagają oraz obliczenia czasu musi obejścia tego problemu za pomocą <see cref="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" /> metoda pobierania <see cref="T:System.TimeZoneInfo" /> obiektu odpowiadającego w lokalnej strefie czasowej.  W poniższym przykładzie przedstawiono ilustracja dla [! System include[WinXP](~/includes/WinXP-MD.MD)] w Stanach Zjednoczonych Czas pacyficzny strefy. Ponieważ wszystkie wywołania pierwszych trzech metod Użyj lokalnej strefy czasowej zwrócony przez <see cref="P:System.TimeZoneInfo.Local" /> właściwości, dotyczą one (co poszło obowiązywać w 2007) reguła korekty bieżącej strefy czasowej na datę w 2006. Bieżąca reguła korekty zapewnia przejścia do czasu letniego występuje na drugi niedziela marca; poprzednie reguły, które obowiązywały w 2006 dostępne w celu przejścia do czasu letniego występuje na pierwszą niedzielę kwietnia. Tylko czwarty wywołania metody, która używa <see cref="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" /> metoda pobierania w lokalnej strefie czasowej, wykonuje dokładnie tego historycznych Data i godzina konwersji.  [! code-csharp[System.TimeZoneInfo.ConvertTimeToUtc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttimetoutc/cs/converttimetoutc.cs#1)] [! code-vb[System.TimeZoneInfo.ConvertTimeToUtc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttimetoutc/vb/converttimetoutc.vb#1)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="StandardName">
      <MemberSignature Language="C#" Value="public string StandardName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StandardName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.StandardName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StandardName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StandardName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StandardName : string" Usage="System.TimeZoneInfo.StandardName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę wyświetlaną dla strefy czasowej czasu standardowego.</summary>
        <value>Nazwa wyświetlana strefy czasowej (czas standardowy).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nazwa wyświetlana jest zlokalizowana w oparciu kultury zainstalowane w systemie operacyjnym Windows.  
  
 <xref:System.TimeZoneInfo.StandardName%2A> Jest taka sama jak właściwość <xref:System.TimeZone.StandardName%2A> właściwość <xref:System.TimeZone> klasy.  
  
 Jeśli język systemu operacyjnego jest angielski, wartość <xref:System.TimeZoneInfo.StandardName%2A> właściwość jest zwykle, ale nie zawsze identyczna ze <xref:System.TimeZoneInfo.Id%2A> właściwości.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano metodę o nazwie `DisplayDateWithTimeZoneName` używającą <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> metodę, aby określić, czy ma być wyświetlana nazwa (czas standardowy) lub czas letni strefę czasową.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool SupportsDaylightSavingTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsDaylightSavingTime" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SupportsDaylightSavingTime As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SupportsDaylightSavingTime { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportsDaylightSavingTime : bool" Usage="System.TimeZoneInfo.SupportsDaylightSavingTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy wszystkie reguły czasu letniego strefę czasową.</summary>
        <value>
          <see langword="true" /> Jeśli strefa czasowa obsługuje czasu letniego; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> właściwości lokalnej strefy czasowej zwrócony przez <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> właściwość odzwierciedla ustawienia Panelu sterowania **Data i godzina** wyboru aplikacji, który definiuje czy system automatycznie Dopasowuje dla czasu letniego. Jeśli go nie jest zaznaczona, lub strefy czasowej nie będą wyświetlane nie pole wyboru, wartość tej właściwości jest `false`.  
  
   
  
## Examples  
 Poniższy przykład pobiera zbiór wszystkich stref czasowych, które są dostępne w systemie lokalnym i wyświetla nazwy tych, które nie obsługują czasu letniego.  
  
 [!code-csharp[System.TimeZone2.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#4)]
 [!code-vb[System.TimeZone2.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#4)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">Obiekt, który zainicjował wywołanie zwrotne. Funkcje tego parametru nie są obecnie implementowane.</param>
        <summary>Uruchamia się po zakończeniu deserializacji obiektu.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Runtime.Serialization.SerializationException">
          <see cref="T:System.TimeZoneInfo" /> Obiekt zawiera nieprawidłowe lub uszkodzone dane.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <see cref="T:System.Runtime.Serialization.SerializationInfo" /> Obiektu, aby wypełnić z danymi.</param>
        <param name="context">Lokalizacja docelowa tej serializacji (zobacz <see cref="T:System.Runtime.Serialization.StreamingContext" />).</param>
        <summary>Wypełnia <see cref="T:System.Runtime.Serialization.SerializationInfo" /> obiektu o dane potrzebne do serializacji bieżącego <see cref="T:System.TimeZoneInfo" /> obiektu.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="info" /> Parametr jest <see langword="null" />.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego. Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</permission>
      </Docs>
    </Member>
    <Member MemberName="ToSerializedString">
      <MemberSignature Language="C#" Value="public string ToSerializedString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToSerializedString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ToSerializedString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToSerializedString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToSerializedString();" />
      <MemberSignature Language="F#" Value="member this.ToSerializedString : unit -&gt; string" Usage="timeZoneInfo.ToSerializedString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konwertuje bieżący <see cref="T:System.TimeZoneInfo" /> obiektu na ciąg serializacji.</summary>
        <returns>Ciąg reprezentujący bieżące <see cref="T:System.TimeZoneInfo" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aplikacje korzystające z stref czasowych, które zwykle nie są zdefiniowane w rejestrze systemu Windows można użyć <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metody tworzenia wystąpienia niezbędne stref czasowych jako <xref:System.TimeZoneInfo> obiektów. Aplikacja może wywoływać <xref:System.TimeZoneInfo.ToSerializedString%2A> metodę, aby przekonwertować obiekt strefy czasowej na ciąg.  
  
 <xref:System.TimeZoneInfo> Obiektu również powinny być przechowywane w lokalizacji, w którym aplikacji mogą być pobierane w razie potrzeby. Możliwe lokalizacje obejmują:  
  
-   Rejestr.  
  
-   Plik zasobów aplikacji.  
  
-   Plik zewnętrznych, takich jak plik tekstowy.  
  
   
  
## Examples  
 Poniższy przykład próbuje pobrać Antarktyka/południowego strefy czasowej z systemu lokalnego. Jeśli nie powiedzie się, kod próbuje pobrać informacji o strefie czasowej z pliku tekstowego w katalogu aplikacji. Jeśli ta próba nie powiedzie się, kod tworzy strefę czasową i zapisuje informacje o nim w pliku tekstowym.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]
 [!code-vb[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.FromSerializedString(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="timeZoneInfo.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca bieżącą <see cref="T:System.TimeZoneInfo" /> nazwę wyświetlaną obiektu.</summary>
        <returns>Wartość <see cref="P:System.TimeZoneInfo.DisplayName" /> właściwości bieżącego <see cref="T:System.TimeZoneInfo" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas przypisywania kolekcję, która zawiera <xref:System.TimeZoneInfo> obiekty do formantu listy, takich jak <xref:System.Windows.Forms.ListBox> formantu, formantu automatycznie wywołuje <xref:System.TimeZoneInfo.ToString%2A> metodę, aby wyodrębnić ciąg opisujący każdy obiekt może być reprezentowana na liście. W związku z tym nie trzeba przechowywać zrozumiały opis obiektu jako ciąg, a użytkownik musi używać tego ciągu w celu wyodrębnienia obiektu z kolekcji. Zobacz [jak: Wyliczanie obecny stref czasowych na komputerze](~/docs/standard/datetime/enumerate-time-zones.md) uzyskać więcej szczegółowych informacji.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Utc">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo Utc { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZoneInfo Utc" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Utc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Utc As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZoneInfo ^ Utc { TimeZoneInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Utc : TimeZoneInfo" Usage="System.TimeZoneInfo.Utc" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.TimeZoneInfo" /> obiekt, który reprezentuje strefy uniwersalny czas koordynowany (UTC).</summary>
        <value>Obiekt, który reprezentuje strefy uniwersalny czas koordynowany (UTC).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest to wbudowanego obiektu; informacje na ten temat <xref:System.TimeZoneInfo> obiektu nie została pobrana z rejestru.  
  
> [!IMPORTANT]
>  Należy zawsze dostęp do strefy uniwersalny czas koordynowany (UTC) za pośrednictwem <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType> właściwości, a nie przypisywanie strefy czasowej UTC <xref:System.TimeZoneInfo> zmienna obiektu. Zapobiega to <xref:System.TimeZoneInfo> trwa unieważniona przez wywołanie do zmiennej obiektu <xref:System.TimeZoneInfo.ClearCachedData%2A> metody.  
  
 Uniwersalny czas koordynowany była wcześniej znana jako czas uniwersalny Greenwich (GMT).  
  
   
  
## Examples  
 Poniższy przykład pobiera <xref:System.TimeZoneInfo> obiekt, który reprezentuje uniwersalny czas koordynowany (UTC) i wyświetla jego nazwa wyświetlana, nazwa (czas standardowy) i nazwa czasu letniego.  
  
 [!code-csharp[System.TimeZone2.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#3)]
 [!code-vb[System.TimeZone2.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>