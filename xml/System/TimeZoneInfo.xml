<Type Name="TimeZoneInfo" FullName="System.TimeZoneInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9bf169f066a8b7ff359372b5ab4b62607f600cf4" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55310674" /></Metadata><TypeSignature Language="C#" Value="public sealed class TimeZoneInfo : IEquatable&lt;TimeZoneInfo&gt;, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit TimeZoneInfo extends System.Object implements class System.IEquatable`1&lt;class System.TimeZoneInfo&gt;, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.TimeZoneInfo" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TimeZoneInfo&#xA;Implements IDeserializationCallback, IEquatable(Of TimeZoneInfo), ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TimeZoneInfo sealed : IEquatable&lt;TimeZoneInfo ^&gt;, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type TimeZoneInfo = class&#xA;    interface IEquatable&lt;TimeZoneInfo&gt;&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.TimeZoneInfo&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5;xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje wszystkie strefy czasowej na całym świecie.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Strefa czasowa to region geograficzny, w którym używane jest tym samym czasie.  
  
 <xref:System.TimeZoneInfo> Klasa oferuje znaczne ulepszenia <xref:System.TimeZone> klasy, która zawiera tylko ograniczoną funkcjonalnością.  
  
 <xref:System.TimeZone> Klasy rozpoznaje tylko lokalnej strefy czasowej i Konwertowanie godzin między uniwersalnego czasu koordynowanego (UTC) i czasem lokalnym. A <xref:System.TimeZoneInfo> object może reprezentować wszystkie strefy czasowej i metod <xref:System.TimeZoneInfo> klasy można przekonwertować wartość czasu w jednej strefie czasowej na odpowiedni czas w dowolnej strefie czasowej. Elementy członkowskie <xref:System.TimeZoneInfo> klasa obsługuje następujące operacje:  
  
-   Pobieranie strefę czasową, która jest już zdefiniowany przez system operacyjny.  
  
-   Wyliczanie stref czasowych, które są dostępne w systemie.  
  
-   Konwertowanie godzin między różnych strefach czasowych.  
  
-   Tworzenie nowej strefy czasowej, który nie jest już zdefiniowany przez system operacyjny.  
  
-   Serializacja strefę czasową dla nowszych pobierania.  
  
> [!NOTE]
>  Wystąpienie <xref:System.TimeZoneInfo> klasy jest niezmienny. Po utworzeniu obiektu nie można modyfikować jego wartości.  
  
 Nie można utworzyć wystąpienia <xref:System.TimeZoneInfo> przy użyciu `new` — słowo kluczowe. Zamiast tego należy wywołać jedną z statyczne elementy członkowskie <xref:System.TimeZoneInfo> klasy pokazano w poniższej tabeli.  
  
|Nazwa członka statycznego|Opis|  
|------------------------|-----------------|  
|<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> — Metoda|Tworzy niestandardowa strefa czasowa z danymi dostarczonymi przez aplikację.|  
|<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> — Metoda|Tworzy na podstawie jego identyfikatora strefy czasowej.|  
|<xref:System.TimeZoneInfo.FromSerializedString%2A> — Metoda|Deserializuje wartość ciągu, aby ponownie utworzyć wcześniej serializacji <xref:System.TimeZoneInfo> obiektu.|  
|<xref:System.TimeZoneInfo.GetSystemTimeZones%2A> — Metoda|Zwraca element wyliczalny <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> z <xref:System.TimeZoneInfo> obiektem, który reprezentuje wszystkie strefy czasowe, które są dostępne w systemie lokalnym.|  
|<xref:System.TimeZoneInfo.Local%2A> Właściwość|Tworzy wystąpienie <xref:System.TimeZoneInfo> obiekt, który reprezentuje lokalnej strefy czasowej.|  
|<xref:System.TimeZoneInfo.Utc%2A> Właściwość|Tworzy wystąpienie <xref:System.TimeZoneInfo> obiekt, który reprezentuje strefie UTC.|  
  
 Możesz użyć <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metodę, aby utworzyć strefę czasową, która nie jest zdefiniowana w rejestrze systemu lokalnego w systemach Windows lub klasy strefy czasowej w [biblioteki ICU](http://userguide.icu-project.org/datetime/timezone) w systemie Linux lub macOS. Następnie można użyć <xref:System.TimeZoneInfo.ToSerializedString%2A> właściwość do zapisania informacji o obiekcie strefę czasową jako ciąg znaków, które mogą być przechowywane w pewnej postaci, który jest dostępny do aplikacji. Możesz użyć <xref:System.TimeZoneInfo.FromSerializedString%2A> metodę, aby przekonwertować ciąg serializacji z powrotem do <xref:System.TimeZoneInfo> obiektu.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BaseUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan BaseUtcOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan BaseUtcOffset" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.BaseUtcOffset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseUtcOffset As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan BaseUtcOffset { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseUtcOffset : TimeSpan" Usage="System.TimeZoneInfo.BaseUtcOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera różnicę czasu między bieżącej strefy czasowej (czas standardowy) i uniwersalny czas koordynowany (UTC).</summary>
        <value>Obiekt, który wskazuje różnicę czasu między bieżącej strefy czasowej (czas standardowy) i uniwersalny czas koordynowany (UTC).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przedział czasu, zwracany przez <xref:System.TimeZoneInfo.BaseUtcOffset%2A> właściwości do zakresu od 14 godzin (dla strefy czasowej, która jest 14 godzin przed uniwersalnego czasu koordynowanego (UTC)) do-14 godzin (dla strefy czasowej, która jest 14 godzin za UTC). Strefy czasowe, które są przed UTC ma pozytywny przesunięcie; strefy czasowe, które znajdują się za UTC mają ujemne przesunięcie.  
  
 <xref:System.TimeZoneInfo.BaseUtcOffset%2A> Wartość jest reprezentowana w postaci liczby całkowitej minut. Nie może zawierać ułamkowe liczbę minut.  
  
> [!NOTE]
>  Ponieważ <xref:System.TimeZoneInfo.BaseUtcOffset%2A> jest właściwością <xref:System.TimeZoneInfo> obiektu, a nie od <xref:System.TimeZoneInfo.AdjustmentRule> obiektu <xref:System.TimeZoneInfo> klasy dotyczy pojedyncze przesunięcie względem czasu UTC wszystkich dostosowań na strefę czasową. Do strefy czasowej, który został zmodyfikowany przez przesunięcie względem czasu UTC, należy utworzyć nową strefę czasową, używając <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metody.  
  
 <xref:System.TimeZoneInfo.BaseUtcOffset%2A> Właściwość różni się od <xref:System.TimeZoneInfo.GetUtcOffset%2A> metody w następujący sposób:  
  
-   <xref:System.TimeZoneInfo.BaseUtcOffset%2A> Właściwość zwraca różnicę między czasem UTC i czasem standardowa strefy czasowej; <xref:System.TimeZoneInfo.GetUtcOffset%2A> metoda zwraca różnicę między czasem UTC i czasem strefę czasową w określonym punkcie w czasie.  
  
-   <xref:System.TimeZoneInfo.GetUtcOffset%2A> Metoda odzwierciedla stosowania żadnych reguł dopasowania w strefie czasowej; <xref:System.TimeZoneInfo.BaseUtcOffset%2A> nie obsługuje właściwości.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.TimeZoneInfo.BaseUtcOffset%2A> właściwość do wyświetlenia różnicy między czasem lokalnym i uniwersalny czas koordynowany (UTC).  
  
 [!code-csharp[System.TimeZone2.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#1)]
 [!code-vb[System.TimeZone2.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.TimeZoneInfo.GetUtcOffset" />
      </Docs>
    </Member>
    <Member MemberName="ClearCachedData">
      <MemberSignature Language="C#" Value="public static void ClearCachedData ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearCachedData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ClearCachedData" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearCachedData ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearCachedData();" />
      <MemberSignature Language="F#" Value="static member ClearCachedData : unit -&gt; unit" Usage="System.TimeZoneInfo.ClearCachedData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Czyści buforowane dane strefy czasowej.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Strefa czasowa pamięci podręcznej danych obejmuje dane dotyczące lokalnej strefy czasowej i strefy uniwersalnego czasu koordynowanego (UTC).  
  
 Może wywołać `ClearCachedData` metodę, aby zmniejszyć ilość pamięci przeznaczone do aplikacji w pamięci podręcznej, informacje o strefie czasowej, lub aby uwzględnić fakt, że strefa czasowa systemu lokalnego została zmieniona.  
  
 Nie zaleca się do przechowywania odwołań do stref czasowych UTC i lokalnych. Po wywołaniu `ClearCachedData` metody te zmienne obiektu jest niezdefiniowana <xref:System.TimeZoneInfo> obiekty, które nie są już odwołania do <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> lub <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>. Na przykład w poniższym kodzie, drugie wywołanie <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> metoda zgłasza wyjątek <xref:System.ArgumentException> ponieważ `local` zmiennej przestaje być uważany za równy <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.TimeZone2.BestPractices#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/cs/System.TimeZone2.BestPractices.cs#1)]
 [!code-vb[System.TimeZone2.BestPractices#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/vb/System.TimeZone2.BestPractices.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje godzinę do czasu w określonej strefie czasowej.</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Konwertowanie godzin między strefami czasowymi</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTime(valuetype System.DateTime dateTime, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTime (dateTime, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">Data i godzina, które można przekonwertować.</param>
        <param name="destinationTimeZone">Strefa czasowa, aby przekonwertować <paramref name="dateTime" /> do.</param>
        <summary>Konwertuje godzinę do czasu w określonej strefie czasowej.</summary>
        <returns>Data i godzina w strefie czasowej docelowego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas wykonywania konwersji <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29> metoda stosowana żadnych reguł dopasowania obowiązuje w `destinationTimeZone` strefy czasowej.  
  
 To przeciążenie <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> Metoda określa źródłowej strefy czasowej z wartości `dateTime` parametru <xref:System.DateTime.Kind%2A> właściwości, jak pokazano w poniższej tabeli.  
  
|Wartość właściwości Kind|Źródłowa strefa czasowa|Zachowanie metody|  
|-------------------------|----------------------|---------------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>|Konwertuje czas lokalny z czasem `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A>|Konwertuje uniwersalnego czasu koordynowanego (UTC) z czasem `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Zakłada się, że <xref:System.TimeZoneInfo.Local%2A>.|Konwertuje czas lokalny z czasem `destinationTimeZone`.|  
  
 <xref:System.DateTime.Kind%2A> Właściwości zwracanego <xref:System.DateTime> wartość jest ustawiona, jak pokazano w poniższej tabeli.  
  
|Warunek|Zwracana wartość właściwości Kind|  
|---------------|----------------------------------|  
|`destinationTimeZone` Jest <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|`destinationTimeZone` Jest <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|Wszystkie inne wartości daty i godziny i strefy czasowe docelowego.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 Jeśli wartość `dateTime` parametr jest niejednoznaczny czas lokalny, będzie interpretowany jako (czas standardowy). Jeśli `dateTime` parametr jest nieprawidłowy czas lokalny, ta metoda wyrzuca <xref:System.ArgumentException>.  
  
 Jeśli konwersja `dateTime` wyniki w wartości daty i godziny, która jest starsza niż <xref:System.DateTime.MinValue?displayProperty=nameWithType> lub późniejsza niż <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, Metoda ta zwraca <xref:System.DateTime.MinValue?displayProperty=nameWithType> lub <xref:System.DateTime.MaxValue?displayProperty=nameWithType>odpowiednio.  
  
 Można również przeprowadzić konwersję z czasu UTC lub przez wywołanie metody <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> i <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład konwertuje tablicę wartości daty i godziny na czas w strefie czasowej wschodni Stanów Zjednoczonych i Kanady. Pokazuje, że źródłowa strefa czasowa zależy od <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> właściwości źródła <xref:System.DateTime> wartość. Pokazano także, <xref:System.TimeZoneInfo.ConvertTime%2A> metoda przyjmuje zmiany strefy czasowej na konto, ponieważ dostosowania strefy czasowej odbywa się w strefach czasowych źródłowym i docelowym o 2:00 w dniu 7 listopada 2010.  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime1.cs#1)]
 [!code-vb[System.TimeZoneInfo.ConvertTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Wartość <paramref name="dateTime" /> parametr reprezentuje Nieprawidłowa godzina.</exception>
        <exception cref="T:System.ArgumentNullException">Wartość <paramref name="destinationTimeZone" /> parametr <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Konwertowanie godzin między strefami czasowymi</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ConvertTime (DateTimeOffset dateTimeOffset, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ConvertTime(valuetype System.DateTimeOffset dateTimeOffset, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ConvertTime(DateTimeOffset dateTimeOffset, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTimeOffset * TimeZoneInfo -&gt; DateTimeOffset" Usage="System.TimeZoneInfo.ConvertTime (dateTimeOffset, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Data i godzina, które można przekonwertować.</param>
        <param name="destinationTimeZone">Strefa czasowa, aby przekonwertować <paramref name="dateTime" /> do.</param>
        <summary>Konwertuje godzinę do czasu w określonej strefie czasowej.</summary>
        <returns>Data i godzina w strefie czasowej docelowego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas wykonywania konwersji <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29> metoda stosowana żadnych reguł dopasowania obowiązuje w `destinationTimeZone` strefy czasowej.  
  
 To przeciążenie różni się od innych przeciążeń <xref:System.TimeZoneInfo.ConvertTime%2A> metoda akceptując <xref:System.DateTimeOffset> wartość jako pierwszy parametr. Określa datę i godzinę jako przesunięcie względem uniwersalnego czasu koordynowanego (UTC), a nie jako daty i godziny w określonej strefie czasowej. W rezultacie `dateTimeOffset` parametru nie może reprezentować niejednoznaczny czas lub nieprawidłowy.  
  
 W celu przeliczenia `dateTimeOffset` wartość na czas w docelowej strefie czasowej, ta metoda uwzględnia żadnych reguł dopasowania obowiązuje w docelowej strefie czasowej.  
  
 Jeśli konwersja `dateTimeOffset` wyniki w wartości daty i godziny, która jest starsza niż <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> lub późniejsza niż <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, Metoda ta zwraca <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> lub <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>odpowiednio.  
  
   
  
## Examples  
 Poniższy przykład konwertuje tablicę <xref:System.DateTimeOffset> wartości na czas w strefie czasowej wschodni Stanów Zjednoczonych i Kanady. Pokazuje, że <xref:System.TimeZoneInfo.ConvertTime%2A> metoda przyjmuje zmiany strefy czasowej na konto, ponieważ dostosowania strefy czasowej odbywa się w strefach czasowych źródłowym i docelowym o 2:00 w dniu 7 listopada 2010.  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime2.cs#2)]
 [!code-vb[System.TimeZoneInfo.ConvertTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Wartość <paramref name="destinationTimeZone" /> parametr <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Konwertowanie godzin między strefami czasowymi</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo sourceTimeZone, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTime(valuetype System.DateTime dateTime, class System.TimeZoneInfo sourceTimeZone, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo ^ sourceTimeZone, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTime * TimeZoneInfo * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTime (dateTime, sourceTimeZone, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="sourceTimeZone" Type="System.TimeZoneInfo" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">Data i godzina, które można przekonwertować.</param>
        <param name="sourceTimeZone">Strefa czasowa <paramref name="dateTime" />.</param>
        <param name="destinationTimeZone">Strefa czasowa, aby przekonwertować <paramref name="dateTime" /> do.</param>
        <summary>Konwertuje godzinę w jednej strefie czasowej.</summary>
        <returns>Data i godzina w strefie czasowej docelowego, który odpowiada <paramref name="dateTime" /> parametru w źródłowej strefie czasowej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas wykonywania konwersji <xref:System.TimeZoneInfo.ConvertTime%2A> metoda stosowana żadnych reguł dopasowania obowiązuje w `destinationTimeZone` strefy czasowej.  
  
 Wartość <xref:System.DateTime.Kind%2A> właściwość `dateTime` parametru musi odpowiadać typowi `sourceTimeZone` parametru, jak pokazano w poniższej tabeli.  
  
|Wartość DateTime.Kind|sourceTimeZone value|Zachowanie metody|  
|-------------------------|--------------------------|---------------------|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Równa się <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|Konwertuje `dateTime` docelowa strefa czasowa czasu.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Nie równa się <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|Zgłasza <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Równa się <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|Konwertuje `dateTime` docelowa strefa czasowa czasu.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Nie równa się <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|Zgłasza <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Wszystkie.|Konwertuje `dateTime` docelowa strefa czasowa czasu.|  
  
 Można również przeprowadzić konwersję do lub z uniwersalnego czasu koordynowanego (UTC), wywołując <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> i <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> metody.  
  
 <xref:System.DateTime.Kind%2A> Właściwości zwracanego <xref:System.DateTime> wartość jest ustawiona, jak pokazano w poniższej tabeli.  
  
|Warunek|Zwracana wartość właściwości Kind|  
|---------------|----------------------------------|  
|`destinationTimeZone` Argument jest <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|`destinationTimeZone` Argument jest <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|Wszystkie inne daty i wartości czasu, stref czasowych źródła i stref czasowych docelowego.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 Jeśli wartość `dateTime` parametr jest niejednoznaczny czas w źródłowej strefie czasowej, będzie interpretowany jako (czas standardowy). Jeśli `dateTime` parametr jest nieprawidłowy w źródłowej strefie czasowej, ta metoda wyrzuca <xref:System.ArgumentException>.  
  
 Jeśli konwersja `dateTime` wyniki w wartości daty i godziny, która jest starsza niż <xref:System.DateTime.MinValue?displayProperty=nameWithType> lub późniejsza niż <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, Metoda ta zwraca <xref:System.DateTime.MinValue?displayProperty=nameWithType> lub <xref:System.DateTime.MaxValue?displayProperty=nameWithType>odpowiednio.  
  
 <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29> Metoda zgłasza wyjątek <xref:System.ArgumentException> wyjątek Jeśli <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> właściwość `dateTime` argument jest <xref:System.DateTimeKind.Local?displayProperty=nameWithType> ale `sourceTimeZone` argument nie jest <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>. Aby ustalić, czy źródłowa strefa czasowa jest lokalnej strefy czasowej lub strefy czasowej uniwersalny, metody testuje pod kątem równości odwołań zamiast testowanie na równoważność wartości za pomocą <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29> metody. Należy pamiętać, że <xref:System.TimeZoneInfo> obiekty reprezentujące lokalną strefę czasową i które są pobierane przez wywołanie metody <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> metoda ma równości referencyjnej z <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>. Ponadto <xref:System.TimeZoneInfo> obiekty reprezentujące lokalnych lub strefy czasowej uniwersalnego i które są pobierane przez iteracja zbiorze zwróconym przez <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> metoda ma równości referencyjnej z <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> lub <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>. Alternatywnie, można wywołać <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29> metody.  
  
   
  
## Examples  
 Poniższy przykład ilustruje użycie <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29> metod konwertowania z Hawaje (czas standardowy) na czas lokalny.  
  
 [!code-csharp[System.TimeZone2.Concepts#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#9)]
 [!code-vb[System.TimeZone2.Concepts#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see cref="P:System.DateTime.Kind" /> Właściwość <paramref name="dateTime" /> parametr jest <see cref="F:System.DateTimeKind.Local" />, ale <paramref name="sourceTimeZone" /> parametr nie jest równa <see cref="F:System.DateTimeKind.Local" />.  
  
—lub— 
<see cref="P:System.DateTime.Kind" /> Właściwość <paramref name="dateTime" /> parametr jest <see cref="F:System.DateTimeKind.Utc" />, ale <paramref name="sourceTimeZone" /> parametr nie jest równa <see cref="P:System.TimeZoneInfo.Utc" />.  
  
—lub— 
<paramref name="dateTime" /> Parametr jest nieprawidłowy (oznacza to, że reprezentuje czas, który nie istnieje ze względu na strefę czasową reguł korygowania).</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceTimeZone" /> Parametr <see langword="null" />.  
  
—lub— 
<paramref name="destinationTimeZone" /> Parametr <see langword="null" />.</exception>
        <altmember cref="Overload:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId" />
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Konwertowanie godzin między strefami czasowymi</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTimeBySystemTimeZoneId">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje godzinę do czasu w innej strefie czasowej na podstawie identyfikatora strefy czasowej.</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Konwertowanie godzin między strefami czasowymi</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeBySystemTimeZoneId(valuetype System.DateTime dateTime, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeBySystemTimeZoneId(DateTime dateTime, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTime * string -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTime, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dateTime">Data i godzina, które można przekonwertować.</param>
        <param name="destinationTimeZoneId">Identyfikator docelowa strefa czasowa.</param>
        <summary>Konwertuje godzinę do czasu w innej strefie czasowej na podstawie identyfikatora strefy czasowej.</summary>
        <returns>Data i godzina w strefie czasowej docelowego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas wykonywania konwersji <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> metoda stosowana żadnych reguł dopasowania obowiązuje w `destinationTimeZoneId` strefy czasowej.  
  
 To przeciążenie jest w przeważającej mierze identyczny jak wywołanie <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> metody, z wyjątkiem, że można określić docelowa strefa czasowa, za pomocą jego identyfikatora, a nie przez odwołanie do obiektu. Ta metoda jest najbardziej użyteczna po przekonwertowaniu przez czas bez pobierania obiektu strefę czasową, która odnosi się do niego i nie musisz wiedzieć, czy przekonwertowanego czasu jest standardowy lub czasu letniego.  
  
 <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%29> Metoda określa źródłowej strefy czasowej z wartości `dateTime` parametru <xref:System.DateTime.Kind%2A> właściwości, jak pokazano w poniższej tabeli.  
  
|Wartość właściwości Kind|Źródłowa strefa czasowa|Zachowanie metody|  
|-------------------------|----------------------|---------------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>|Konwertuje czas lokalny z czasem `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A>|Konwertuje uniwersalnego czasu koordynowanego (UTC) z czasem `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Zakłada się, że <xref:System.TimeZoneInfo.Local%2A>.|Konwertuje czas lokalny z czasem `destinationTimeZone`.|  
  
 <xref:System.DateTime.Kind%2A> Właściwości zwracanego <xref:System.DateTime> wartość jest ustawiona, jak pokazano w poniższej tabeli.  
  
|Warunek|Zwracana wartość właściwości Kind|  
|---------------|----------------------------------|  
|`destinationTimeZone` Jest `TimeZoneInfo.Utc.Id`.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|Inne `destinationTimeZone` wartość.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 Jeśli wartość `dateTime` parametr jest niejednoznaczny czas lokalny, będzie interpretowany jako (czas standardowy). Jeśli `dateTime` parametr jest nieprawidłowy czas lokalny, ta metoda wyrzuca <xref:System.ArgumentException>.  
  
 Jeśli konwersja `dateTime` wyniki w wartości daty i godziny, która jest starsza niż <xref:System.DateTime.MinValue?displayProperty=nameWithType> lub późniejsza niż <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, Metoda ta zwraca <xref:System.DateTime.MinValue?displayProperty=nameWithType> lub <xref:System.DateTime.MaxValue?displayProperty=nameWithType>odpowiednio.  
  
 Ta metoda umożliwia pobranie informacji o strefie czasowej, którego identyfikator jest określona przez `destinationTimeZoneId` parametru z rejestru w systemach Windows i z [biblioteki ICU](http://userguide.icu-project.org/datetime/timezone) w systemie Linux i macOS. Nie może pobrać obiektu strefy czasowej, który jest tworzony przy użyciu <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metody. `destinationTimeZoneId` Parametru musi dokładnie odpowiadać elementowi identyfikator strefy czasowej długości, ale nie w przypadku pomyślnego dopasowania nastąpi; oznacza to, że porównanie `destinationTimeZoneId` ze strefą czasową identyfikatory jest rozróżniana wielkość liter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZoneId" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Znaleziono identyfikator strefy czasowej, ale dane rejestru są uszkodzone.</exception>
        <exception cref="T:System.Security.SecurityException">Ten proces nie ma wymaganych uprawnień do odczytu z klucza rejestru, który zawiera informacje o strefie czasowej.</exception>
        <exception cref="T:System.TimeZoneNotFoundException"><paramref name="destinationTimeZoneId" /> Identyfikator nie został znaleziony w systemie lokalnym.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Konwertowanie godzin między strefami czasowymi</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ConvertTimeBySystemTimeZoneId (DateTimeOffset dateTimeOffset, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ConvertTimeBySystemTimeZoneId(valuetype System.DateTimeOffset dateTimeOffset, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTimeOffset,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ConvertTimeBySystemTimeZoneId(DateTimeOffset dateTimeOffset, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTimeOffset * string -&gt; DateTimeOffset" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTimeOffset, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Data i godzina, które można przekonwertować.</param>
        <param name="destinationTimeZoneId">Identyfikator docelowa strefa czasowa.</param>
        <summary>Konwertuje godzinę do czasu w innej strefie czasowej na podstawie identyfikatora strefy czasowej.</summary>
        <returns>Data i godzina w strefie czasowej docelowego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas wykonywania konwersji <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> metoda stosowana żadnych reguł dopasowania obowiązuje w `destinationTimeZoneId` strefy czasowej.  
  
 To przeciążenie jest taka sama jak wywołanie <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> metody, z wyjątkiem, że można określić docelowa strefa czasowa, za pomocą jego identyfikatora, a nie przez odwołanie do obiektu. Ta metoda jest najbardziej użyteczna po przekonwertowaniu przez czas bez pobierania obiektu strefę czasową, która odnosi się do niego i nie musisz wiedzieć, czy przekonwertowanego czasu jest standardowy lub czasu letniego.  
  
 Ponieważ `dateTimeOffset` parametru reprezentuje datę i czas wraz z tego czasu przesunięcie względem uniwersalnego czasu koordynowanego (UTC), nie może reprezentować, niejednoznaczny czas lub nieprawidłowy.  
  
 Ta metoda pobiera strefy czasowej, którego identyfikator jest określona przez `destinationTimeZoneId` parametru z rejestru w systemach Windows i z [biblioteki ICU](http://userguide.icu-project.org/datetime/timezone) w systemie Linux i macOS. Nie może pobrać obiektu strefy czasowej, który jest tworzony przy użyciu <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metody. `destinationTimeZoneId` Parametru musi dokładnie odpowiadać elementowi identyfikator strefy czasowej długości, ale nie w przypadku pomyślnego dopasowania nastąpi; oznacza to, że porównanie `destinationTimeZoneId` ze strefą czasową identyfikatory jest rozróżniana wielkość liter.  
  
 W celu przeliczenia `dateTimeOffset` wartość na czas w docelowej strefie czasowej, metoda uwzględnia żadnych reguł dopasowania obowiązuje w docelowej strefie czasowej.  
  
 Jeśli konwersja `dateTimeOffset` wyniki w wartości daty i godziny, która jest starsza niż <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> lub późniejsza niż <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, Metoda ta zwraca <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> lub <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>odpowiednio.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZoneId" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Znaleziono identyfikator strefy czasowej, ale dane rejestru są uszkodzone.</exception>
        <exception cref="T:System.Security.SecurityException">Ten proces nie ma wymaganych uprawnień do odczytu z klucza rejestru, który zawiera informacje o strefie czasowej.</exception>
        <exception cref="T:System.TimeZoneNotFoundException"><paramref name="destinationTimeZoneId" /> Identyfikator nie został znaleziony w systemie lokalnym.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Konwertowanie godzin między strefami czasowymi</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeBySystemTimeZoneId(valuetype System.DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeBySystemTimeZoneId(DateTime dateTime, System::String ^ sourceTimeZoneId, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTime * string * string -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTime, sourceTimeZoneId, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="sourceTimeZoneId" Type="System.String" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dateTime">Data i godzina, które można przekonwertować.</param>
        <param name="sourceTimeZoneId">Identyfikator źródłowej strefy czasowej.</param>
        <param name="destinationTimeZoneId">Identyfikator docelowa strefa czasowa.</param>
        <summary>Konwertuje godzinę w jednej strefie czasowej do drugiego w oparciu o identyfikatory stref czasowych.</summary>
        <returns>Data i godzina w strefie czasowej docelowego, który odpowiada <paramref name="dateTime" /> parametru w źródłowej strefie czasowej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas wykonywania konwersji <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> metoda stosowana żadnych reguł dopasowania obowiązuje w `destinationTimeZoneId` strefy czasowej.  
  
 Mimo że jest on podobny do <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> metody, można użyć <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> Aby określić źródłowy i docelowy stref czasowych przy użyciu ich identyfikatorów zamiast ich <xref:System.TimeZoneInfo> obiektów. Ta metoda jest najbardziej użyteczna po przekonwertowaniu przez czas bez pobierania obiektu strefę czasową, która odnosi się do niego i nie musisz wiedzieć, czy przekonwertowanego czasu jest standardowy lub czasu letniego.  
  
 Ta metoda pobiera strefach czasowych, których identyfikatory to `sourceTimeZoneId` i `destinationTimeZoneId` parametrów w rejestrze w systemach Windows i z [biblioteki ICU](http://userguide.icu-project.org/datetime/timezone) w systemie Linux i macOS. Nie można pobrać, obiektów stref czasowych, które są tworzone przy użyciu <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metody.  
  
 Wartość <xref:System.DateTime.Kind%2A> właściwość `dateTime` parametru musi odpowiadać typowi `sourceTimeZoneId` parametru, jak pokazano w poniższej tabeli.  
  
|Wartość DateTime.Kind|sourceTimeZone value|Zachowanie metody|  
|-------------------------|--------------------------|---------------------|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Równa się `TimeZoneInfo.Utc.Id`.|Konwertuje `dateTime` docelowa strefa czasowa czasu.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Nie równa się `TimeZoneInfo.Utc.Id`.|Zgłasza <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Równa się `TimeZoneInfo.Local.Id`.|Konwertuje `dateTime` docelowa strefa czasowa czasu.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Nie równa się `TimeZoneInfo.Local.Id`.|Zgłasza <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Wszystkie.|Konwertuje `dateTime` docelowa strefa czasowa czasu.|  
  
 Ponieważ opiera się na wywołania <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> metody <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> metoda przeprowadza wyszukiwanie bez uwzględniania wielkości liter, aby zlokalizować stref czasowych, które odpowiadają `sourceTimeZoneId` i `destinationTimeZoneId`.  
  
 Jeśli wartość `dateTime` parametr jest niejednoznaczny czas w źródłowej strefie czasowej, będzie interpretowany jako (czas standardowy). Jeśli `dateTime` parametr jest nieprawidłowy w źródłowej strefie czasowej, ta metoda wyrzuca <xref:System.ArgumentException>.  
  
 <xref:System.DateTime.Kind%2A> Właściwości zwracanego <xref:System.DateTime> wartość jest równa <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> chyba, że docelowa strefa czasowa jest uniwersalny czas koordynowany (UTC), w którym to przypadku ustawiana jest na <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> metodę w celu wyświetlenia czas, który odnosi się do czasu lokalnego w miastach osiem świata.  
  
 [!code-csharp[System.TimeZone2.Conversions#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#3)]
 [!code-vb[System.TimeZone2.Conversions#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see cref="P:System.DateTime.Kind" /> Właściwość <paramref name="dateTime" /> parametru nie odpowiada źródłowa strefa czasowa.  
  
—lub— 
 <paramref name="dateTime" /> jest nieprawidłowy w źródłowej strefie czasowej.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceTimeZoneId" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="destinationTimeZoneId" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Znaleziono identyfikatorów strefy czasowej, ale dane rejestru są uszkodzone.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wymaganych uprawnień do odczytu z kluczy rejestru, które przechowują dane w strefie czasowej.</exception>
        <exception cref="T:System.TimeZoneNotFoundException"><paramref name="sourceTimeZoneId" /> Identyfikator nie został znaleziony w systemie lokalnym.  
  
—lub— 
<paramref name="destinationTimeZoneId" /> Identyfikator nie został znaleziony w systemie lokalnym.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Konwertowanie godzin między strefami czasowymi</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeFromUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeFromUtc (DateTime dateTime, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeFromUtc(valuetype System.DateTime dateTime, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeFromUtc(DateTime dateTime, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeFromUtc : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeFromUtc (dateTime, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">Uniwersalny czas koordynowany (UTC).</param>
        <param name="destinationTimeZone">Strefa czasowa, aby przekonwertować <paramref name="dateTime" /> do.</param>
        <summary>Konwertuje wartość godziny w określonej strefy czasowej uniwersalnego czasu koordynowanego (UTC).</summary>
        <returns>Data i godzina w strefie czasowej docelowego. Jego <see cref="P:System.DateTime.Kind" /> właściwość <see cref="F:System.DateTimeKind.Utc" /> Jeśli <paramref name="destinationTimeZone" /> jest <see cref="P:System.TimeZoneInfo.Utc" />; w przeciwnym razie jego <see cref="P:System.DateTime.Kind" /> właściwość <see cref="F:System.DateTimeKind.Unspecified" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas wykonywania konwersji <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> metoda stosowana żadnych reguł dopasowania obowiązuje w `destinationTimeZone` strefy czasowej.  
  
 Dokładne zachowanie tej metody jest zależny od wartości <xref:System.DateTime.Kind%2A> właściwość `dateTime` parametru, jak pokazano w poniższej tabeli.  
  
|Właściwość DateTime.Kind|Konwersja|  
|----------------------------|----------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Zgłasza <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> lub <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Konwertuje od skoordynowanego czasu uniwersalnego (UTC).|  
  
 Jeśli konwersja `dateTime` wyniki w wartości daty i godziny, która jest starsza niż <xref:System.DateTime.MinValue?displayProperty=nameWithType> lub późniejsza niż <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, Metoda ta zwraca <xref:System.DateTime.MinValue?displayProperty=nameWithType> lub <xref:System.DateTime.MaxValue?displayProperty=nameWithType>odpowiednio.  
  
   
  
## Examples  
 Poniższy przykład Konwertuje czas środkowy uniwersalnego czasu koordynowanego (UTC).  
  
 [!code-csharp[System.TimeZone2.Concepts#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#8)]
 [!code-vb[System.TimeZone2.Concepts#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see cref="P:System.DateTime.Kind" /> Właściwość <paramref name="dateTime" /> jest <see cref="F:System.DateTimeKind.Local" />.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZone" /> jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Konwertowanie godzin między strefami czasowymi</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTimeToUtc">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje datę i godzinę do uniwersalnego czasu koordynowanego (UTC).</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Konwertowanie godzin między strefami czasowymi</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTimeToUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeToUtc (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeToUtc(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeToUtc(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeToUtc : DateTime -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeToUtc dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Data i godzina, które można przekonwertować.</param>
        <summary>Konwertuje określoną datę i godzinę do uniwersalnego czasu koordynowanego (UTC).</summary>
        <returns>Uniwersalny czas koordynowany (UTC), umożliwiająca <paramref name="dateTime" /> parametru. <see cref="T:System.DateTime" /> Wartości <see cref="P:System.DateTime.Kind" /> ma zawsze wartość właściwości <see cref="F:System.DateTimeKind.Utc" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dokładne konwersji, wykonywane jest zależny od wartości <xref:System.DateTime.Kind%2A> właściwość `dateTime` parametru, jak pokazano w poniższej tabeli.  
  
|Właściwość DateTime.Kind|Konwersja|  
|----------------------------|----------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Konwertuje czas lokalny do uniwersalnego czasu koordynowanego (UTC).|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Przyjęto założenie, `dateTime` jest czasem lokalnym i konwertuje od czasu lokalnego na UTC.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Zwraca `dateTime` bez zmian.|  
  
 Jeśli `dateTime` odpowiada niejednoznaczny czas lokalny, ta metoda przyjęto założenie, jest standardowy czas lokalny. Jeśli `dateTime` odnosi się do nieprawidłowych czasu lokalnego, metoda zgłasza wyjątek <xref:System.ArgumentException>.  
  
> [!NOTE]
>  Jeśli bieżący komputer lokalny strefy czasowej zawiera wiele reguł dopasowania, to przeciążenie <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> metoda może zwrócić wyniki, które różnią się od <xref:System.TimeZone.ToUniversalTime%2A?displayProperty=nameWithType> i <xref:System.DateTime.ToUniversalTime%2A?displayProperty=nameWithType> metody. <xref:System.TimeZone.ToUniversalTime%2A?displayProperty=nameWithType> stosowana jest zawsze bieżącej reguły korekty konwersji strefy czasowej, czy `dateTime` mieści się w jego zakres dat. A podczas wykonywania w [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)], <xref:System.DateTime.ToUniversalTime%2A?displayProperty=nameWithType> dotyczą również bieżącą regułę dopasowania konwersji strefy czasowej, czy `dateTime` mieści się w jego zakres dat.  
  
 Jeśli UTC wielokrotność `dateTime` jest starsza niż <xref:System.DateTime.MinValue?displayProperty=nameWithType> lub nowszej, <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, Metoda ta zwraca <xref:System.DateTime.MinValue> lub <xref:System.DateTime.MaxValue>, odpowiednio.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano konwersji wartości czasu, którego <xref:System.DateTime.Kind%2A> właściwość <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, i <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, odpowiednio. Ilustruje konwersji niejednoznaczne i nieprawidłowe godziny.  
  
 [!code-csharp[System.TimeZone2.Conversions#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#1)]
 [!code-vb[System.TimeZone2.Conversions#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see langword="TimeZoneInfo.Local.IsInvalidDateTime(" />
          <paramref name="dateTime" />
          <see langword=")" /> Zwraca <see langword="true" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Konwertowanie godzin między strefami czasowymi</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeToUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeToUtc (DateTime dateTime, TimeZoneInfo sourceTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeToUtc(valuetype System.DateTime dateTime, class System.TimeZoneInfo sourceTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeToUtc(DateTime dateTime, TimeZoneInfo ^ sourceTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeToUtc : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeToUtc (dateTime, sourceTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="sourceTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">Data i godzina, które można przekonwertować.</param>
        <param name="sourceTimeZone">Strefa czasowa <paramref name="dateTime" />.</param>
        <summary>Konwertuje wartość godziny w określonej strefy czasowej do uniwersalnego czasu koordynowanego (UTC).</summary>
        <returns>Uniwersalny czas koordynowany (UTC), umożliwiająca <paramref name="dateTime" /> parametru. <see cref="T:System.DateTime" /> Obiektu <see cref="P:System.DateTime.Kind" /> ma zawsze wartość właściwości <see cref="F:System.DateTimeKind.Utc" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.DateTime.Kind%2A> właściwość `dateTime` parametr ma wartość <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> i `sourceTimeZone` parametr ma wartość <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>, Metoda ta zwraca `dateTime` bez wykonywania żadnych konwersji.  
  
 Jeśli `dateTime` odpowiada niejednoznaczny czas, ta metoda przyjęto założenie, że jest standardowy czas źródłowa strefa czasowa. Jeśli `dateTime` odpowiada Nieprawidłowa godzina, ta metoda zgłasza wyjątek <xref:System.ArgumentException>.  
  
 Jeśli uniwersalnego czasu koordynowanego (UTC) wielokrotność `dateTime` jest starsza niż <xref:System.DateTime.MinValue?displayProperty=nameWithType> lub nowszej, <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, ta metoda zwraca <xref:System.DateTime.MinValue> lub <xref:System.DateTime.MaxValue>odpowiednio.  
  
   
  
## Examples  
 Poniższy przykład pobiera bieżącą datę z systemu lokalnego i konwertuje je do uniwersalnego czasu koordynowanego (UTC), a następnie konwertuje ją na Tokio (czas standardowy) i na koniec konwertuje z Tokio (czas standardowy) UTC. Należy pamiętać, że dwukrotność UTC są identyczne.  
  
 [!code-csharp[System.TimeZone2.Conversions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]
 [!code-vb[System.TimeZone2.Conversions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" />.<see langword="Kind" /> jest <see cref="F:System.DateTimeKind.Utc" /> i <paramref name="sourceTimeZone" /> nie jest równa <see cref="P:System.TimeZoneInfo.Utc" />.  
  
—lub— 
 <paramref name="dateTime" />.<see langword="Kind" /> jest <see cref="F:System.DateTimeKind.Local" /> i <paramref name="sourceTimeZone" /> nie jest równa <see cref="P:System.TimeZoneInfo.Local" />.  
  
—lub— 
 <paramref name="sourceTimeZone" /><see langword=".IsInvalidDateTime(" /><paramref name="dateTime" /><see langword=")" /> Zwraca <see langword="true" />.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceTimeZone" /> jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Konwertowanie godzin między strefami czasowymi</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateCustomTimeZone">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Określa strefę czasową, która nie znajduje się na komputerze lokalnym.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="standardDisplayName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">Identyfikator strefy czasowej.</param>
        <param name="baseUtcOffset">Obiekt, który reprezentuje odstęp czasu między tej strefy czasowej i uniwersalny czas koordynowany (UTC).</param>
        <param name="displayName">Nazwa wyświetlana dla nowej strefy czasowej.</param>
        <param name="standardDisplayName">Nazwa nowej strefy czasowej (czas standardowy).</param>
        <summary>Tworzy niestandardowa strefa czasowa z określonym identyfikatorem, przesunięcie względem uniwersalnego czasu koordynowanego (UTC), nazwę wyświetlaną i nazwę wyświetlaną (czas standardowy).</summary>
        <returns>Dla nowej strefy czasowej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To przeciążenie <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29> metoda jest odpowiednia do tworzenia strefę czasową, która ma bez korekt (czyli strefę czasową, która nie obsługuje zmiany czasu). Aby zdefiniować strefę czasową, która zawiera dostosowania do czasu, należy użyć <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> lub <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> metody.  
  
 W poniższej tabeli przedstawiono relację między parametrami, które są dostarczane do <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> metody i właściwości <xref:System.TimeZoneInfo> obiektów, które są zwracane przez wywołanie metody.  
  
|CreateCustomTimeZone parameter|TimeZoneInfo property|  
|------------------------------------|---------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
  
 Zazwyczaj strefy czasowej (czas standardowy) nazwa i identyfikator są takie same. Jednak długość identyfikatora strefy czasowej nie może przekraczać 32 znaków. Ciąg przekazany do `displayName` parametru następuje stosunkowo standardowego formatu. Pierwszą część nazwy wyświetlanej jest podstawowy przesunięcie strefy czasowej, od skoordynowanego czasu uniwersalnego, która jest wskazywany przez akronimem GMT (uniwersalny Greenwich), ujęte w nawiasy. Następuje to ciąg, który identyfikuje strefę czasową, jeden lub więcej miast, regionów i krajów w strefie czasowej lub obu. Na przykład:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
   
  
## Examples  
 Poniższy przykład tworzy niestandardowa strefa czasowa dla regionów Mawson i Zatoka Holme Antarktyda. Następnie wyświetla wynik konwersji czasu lokalnego na czas w nowej strefy czasowej.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#1)]
 [!code-vb[System.TimeZone2.CreateTimeZone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="id" /> Parametr <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="id" /> Parametr jest pustym ciągiem ("").  
  
—lub— 
<paramref name="baseUtcOffset" /> Parametru nie reprezentuje liczbę całkowitą minut.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="baseUtcOffset" /> Parametru jest większe niż 14 godzin lub mniejsze niż-14 godzin.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a6af8647-7893-4f29-95a9-d94c65a6e8dd">Instrukcje: Tworzenie stref czasowych bez reguł korygowania</related>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, class System.TimeZoneInfo/AdjustmentRule[] adjustmentRules) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String, daylightDisplayName As String, adjustmentRules As TimeZoneInfo.AdjustmentRule()) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName, System::String ^ daylightDisplayName, cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ adjustmentRules);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string * string * TimeZoneInfo.AdjustmentRule[] -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="standardDisplayName" Type="System.String" />
        <Parameter Name="daylightDisplayName" Type="System.String" />
        <Parameter Name="adjustmentRules" Type="System.TimeZoneInfo+AdjustmentRule[]" />
      </Parameters>
      <Docs>
        <param name="id">Identyfikator strefy czasowej.</param>
        <param name="baseUtcOffset">Obiekt, który reprezentuje odstęp czasu między tej strefy czasowej i uniwersalny czas koordynowany (UTC).</param>
        <param name="displayName">Nazwa wyświetlana dla nowej strefy czasowej.</param>
        <param name="standardDisplayName">Nazwa (czas standardowy) dla nowej strefy czasowej.</param>
        <param name="daylightDisplayName">Nazwa czasu letniego dla nowej strefy czasowej.</param>
        <param name="adjustmentRules">Tablica, która wspomaga podstawowy przesunięcie czasu UTC w określonym okresie.</param>
        <summary>Tworzy niestandardowy strefy czasowej przy użyciu określonego identyfikatora, przesunięcie względem uniwersalnego czasu koordynowanego (UTC), nazwę wyświetlaną nazwę (czas standardowy), nazwa czasu letniego i reguły czasu letniego.</summary>
        <returns>A <see cref="T:System.TimeZoneInfo" /> obiekt, który reprezentuje nowej strefy czasowej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To przeciążenie <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> metoda jest odpowiednia do tworzenia strefy czasowej, który obsługuje czasu letniego. Aby zdefiniować strefę czasową, która nie obsługuje zmiany czasu, należy użyć <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> lub <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> metody.  
  
 W poniższej tabeli przedstawiono relację między parametrami, które są dostarczane do <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> metody i członkowie <xref:System.TimeZoneInfo> obiektów, które są zwracane przez wywołanie metody.  
  
|CreateCustomTimeZone parameter|TimeZoneInfo member|  
|------------------------------------|-------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
|`daylightDisplayName`|<xref:System.TimeZoneInfo.DaylightName%2A>|  
|`adjustmentRules`|Tablica <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> obiektów zwróconych przez <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> metody.|  
  
 Zazwyczaj strefy czasowej (czas standardowy) nazwa i identyfikator są takie same. Jednak długość identyfikatora strefy czasowej nie może przekraczać 32 znaków. Ciąg przekazany do `displayName` parametru następuje stosunkowo standardowego formatu. Pierwszą część nazwy wyświetlanej jest podstawowy przesunięcie strefy czasowej, od skoordynowanego czasu uniwersalnego, która jest wskazywany przez akronimem GMT (uniwersalny Greenwich), ujęte w nawiasy. Następuje to ciąg, który identyfikuje strefę czasową, jeden lub więcej miast, regionów i krajów w strefie czasowej lub obu. Na przykład:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
 `baseUtcOffset` Parametr określa przesunięcie strefy czasowej niestandardowe z uniwersalnego czasu koordynowanego (UTC) dla wszystkich reguł korygowania strefy czasowej. Innymi słowy <xref:System.TimeZoneInfo> modelu obiektów założono, że przesunięcie strefy czasowej względem czasu UTC jest stałe w całym cyklu życia strefy czasowej i istnieje niezależnie od określonego dopasowania zasad. Do strefy czasowej, które uległy zmianie jego przesunięcie względem czasu UTC, należy utworzyć nowy obiekt strefy czasowej.  
  
 Strefę czasową reguł korygowania są zdefiniowane w następujący sposób:  
  
1.  Wywołanie dowolnej <xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A> lub <xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A> metodę, aby zdefiniować początkowe i końcowe czas przejścia dla każdej reguły dopasowania.  
  
2.  Wywoływanie <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> metody dla każdej reguły dopasowania.  
  
3.  Przypisywanie reguły dopasowania do tablicy mogą być przekazywane jako `adjustmentRules` parametru.  
  
   
  
## Examples  
 Poniższy przykład tworzy niestandardowa strefa czasowa dla stacji Palmer, Wyspa Anvers w Antarktyda. Następnie Konwertuje czas lokalny na czas w nowej strefy czasowej i wyświetla wynik.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#2)]
 [!code-vb[System.TimeZone2.CreateTimeZone#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="id" /> Parametr <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="id" /> Parametr jest pustym ciągiem ("").  
  
—lub— 
<paramref name="baseUtcOffset" /> Parametru nie reprezentuje liczbę całkowitą minut.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="baseUtcOffset" /> Parametru jest większe niż 14 godzin lub mniejsze niż-14 godzin.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Reguły dostosowania określone w <paramref name="adjustmentRules" /> parametru nakładają się na siebie.  
  
—lub— 
Reguły dostosowania określone w <paramref name="adjustmentRules" /> parametru nie są w kolejności chronologicznej.  
  
—lub— 
Jeden lub więcej elementów w <paramref name="adjustmentRules" /> są <see langword="null" />.  
  
—lub— 
Wartość typu date może zawierać wiele reguł dopasowania zastosowano.  
  
—lub— 
Suma <paramref name="baseUtcOffset" /> parametru i <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> wartość jednego lub więcej obiektów w <paramref name="adjustmentRules" /> tablicy jest większy niż 14 godzin lub mniejsze niż-14 godzin.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/c52ef192-13a9-435f-8015-3b12eae8c47c">Instrukcje: Tworzenie stref czasowych przy użyciu reguł korygowania</related>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, class System.TimeZoneInfo/AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String, daylightDisplayName As String, adjustmentRules As TimeZoneInfo.AdjustmentRule(), disableDaylightSavingTime As Boolean) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName, System::String ^ daylightDisplayName, cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ adjustmentRules, bool disableDaylightSavingTime);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string * string * TimeZoneInfo.AdjustmentRule[] * bool -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules, disableDaylightSavingTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="standardDisplayName" Type="System.String" />
        <Parameter Name="daylightDisplayName" Type="System.String" />
        <Parameter Name="adjustmentRules" Type="System.TimeZoneInfo+AdjustmentRule[]" />
        <Parameter Name="disableDaylightSavingTime" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="id">Identyfikator strefy czasowej.</param>
        <param name="baseUtcOffset">A <see cref="T:System.TimeSpan" /> obiekt, który reprezentuje odstęp czasu między tej strefy czasowej i uniwersalny czas koordynowany (UTC).</param>
        <param name="displayName">Nazwa wyświetlana dla nowej strefy czasowej.</param>
        <param name="standardDisplayName">Nazwa nowej strefy czasowej (czas standardowy).</param>
        <param name="daylightDisplayName">Nazwa czasu letniego dla nowej strefy czasowej.</param>
        <param name="adjustmentRules">Tablica <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> obiekty, które polepszają podstawowy przesunięcie czasu UTC w określonym okresie.</param>
        <param name="disableDaylightSavingTime"><see langword="true" /> Aby odrzucić informacje dotyczące czasu letniego znajdujące się w <paramref name="adjustmentRules" /> za pomocą nowego obiektu; w przeciwnym razie <see langword="false" />.</param>
        <summary>Tworzy niestandardowa strefa czasowa z określonym identyfikatorem, przesunięcie względem uniwersalnego czasu koordynowanego (UTC), nazwę wyświetlaną, nazwę (czas standardowy), nazwa czasu letniego, reguły czasu letniego i wartość, która wskazuje, czy odzwierciedla zwróconego obiektu informacje o czasu letniego.</summary>
        <returns>Dla nowej strefy czasowej. Jeśli <paramref name="disableDaylightSavingTime" /> parametr jest <see langword="true" />, zwrócony obiekt nie ma żadnych danych czasu letniego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Umożliwia to przeciążenie <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> metodę, aby utworzyć niestandardowa strefa czasowa, którego obsługę czasu można określić warunki w czasie wykonywania.  
  
 W poniższej tabeli przedstawiono relację między parametrami, które są dostarczane do <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> metody i członkowie <xref:System.TimeZoneInfo> obiektów, które są zwracane przez wywołanie metody.  
  
|CreateCustomTimeZone parameter|TimeZoneInfo property|  
|------------------------------------|---------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
|`daylightDisplayName`|<xref:System.TimeZoneInfo.DaylightName%2A> Jeśli `disableDaylightSavingTime` jest `false`; <xref:System.String.Empty?displayProperty=nameWithType> Jeśli `disableDaylightSavingTime` jest `true`.|  
|`adjustmentRules`|Tablica <xref:System.TimeZoneInfo.AdjustmentRule> obiektów zwróconych przez <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> metoda Jeśli `disableDaylightSavingTime` jest `false`; pusta tablica zwrócona przez <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> metoda Jeśli `disableDaylightSavingTime` jest `true`.|  
|`disableDaylightSavingTime`|Nie <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>.|  
  
 Zazwyczaj strefy czasowej (czas standardowy) nazwa i identyfikator są takie same. Jednak długość identyfikatora strefy czasowej nie może przekraczać 32 znaków. Ciąg przekazany do `displayName` parametru następuje stosunkowo standardowego formatu. Pierwszą część nazwy wyświetlanej jest podstawowy przesunięcie strefy czasowej, od skoordynowanego czasu uniwersalnego, która jest wskazywany przez akronimem GMT (uniwersalny Greenwich), ujęte w nawiasy. Następuje to ciąg, który identyfikuje strefę czasową, jeden lub więcej miast, regionów i krajów w strefie czasowej lub obu. Na przykład:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
 Strefę czasową reguł korygowania są zdefiniowane w następujący sposób:  
  
1.  Wywołanie dowolnej <xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A> lub <xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A> metodę, aby zdefiniować początkowe i końcowe przejścia reguły dla każdej reguły dopasowania.  
  
2.  Wywoływanie <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> metody dla każdej reguły dopasowania.  
  
3.  Przypisywanie reguły dopasowania do tablicy mogą być przekazywane jako `adjustmentRules` parametru.  
  
 Jeśli `disableDaylightSavingTime` parametr jest `false`, działanie tej metody jest taka sama jak <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> przeciążenia. Jeśli `disableDaylightSavingTime` jest `true`, zwrócony obiekt nie zawiera żadnych reguł dopasowania i <xref:System.TimeZoneInfo.DaylightName%2A> właściwość, której wartość jest ciągiem pustym.  
  
   
  
## Examples  
 Poniższy przykład tworzy niestandardowa strefa czasowa dla stacji Palmer, Wyspa Anvers w Antarktyda. Ustawia `disableDaylightSavingTime` parametr w wywołaniu <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> metody `true`. Następnie wyświetla nazwa czasu letniego dla nowej strefy czasowej, jeśli jest obecna, a liczba reguł korygowania, aby upewnić się, że dla nowej strefy czasowej nie ma czasu informacji.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#3)]
 [!code-vb[System.TimeZone2.CreateTimeZone#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="id" /> Parametr <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="id" /> Parametr jest pustym ciągiem ("").  
  
—lub— 
<paramref name="baseUtcOffset" /> Parametru nie reprezentuje liczbę całkowitą minut.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="baseUtcOffset" /> Parametru jest większe niż 14 godzin lub mniejsze niż-14 godzin.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Reguły dostosowania określone w <paramref name="adjustmentRules" /> parametru nakładają się na siebie.  
  
—lub— 
Reguły dostosowania określone w <paramref name="adjustmentRules" /> parametru nie są w kolejności chronologicznej.  
  
—lub— 
Jeden lub więcej elementów w <paramref name="adjustmentRules" /> są <see langword="null" />.  
  
—lub— 
Wartość typu date może zawierać wiele reguł dopasowania zastosowano.  
  
—lub— 
Suma <paramref name="baseUtcOffset" /> parametru i <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> wartość jednego lub więcej obiektów w <paramref name="adjustmentRules" /> tablicy jest większy niż 14 godzin lub mniejsze niż-14 godzin.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a6af8647-7893-4f29-95a9-d94c65a6e8dd">Instrukcje: Tworzenie stref czasowych bez reguł korygowania</related>
        <related type="Article" href="https://msdn.microsoft.com/library/c52ef192-13a9-435f-8015-3b12eae8c47c">Instrukcje: Tworzenie stref czasowych przy użyciu reguł korygowania</related>
      </Docs>
    </Member>
    <Member MemberName="DaylightName">
      <MemberSignature Language="C#" Value="public string DaylightName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DaylightName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.DaylightName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DaylightName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DaylightName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DaylightName : string" Usage="System.TimeZoneInfo.DaylightName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę wyświetlaną dla bieżącej strefy czasowej czasu letniego.</summary>
        <value>Nazwa wyświetlana zmiany czasu strefy czasowej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nazwa wyświetlana jest zlokalizowana w oparciu o kulturę zainstalowane z systemem operacyjnym Windows.  
  
 A <xref:System.TimeZoneInfo.DaylightName%2A> właściwość, której wartość nie jest <xref:System.String.Empty?displayProperty=nameWithType> lub `null` nie musi oznaczać, że strefa czasowa obsługuje czasu letniego. Aby ustalić, czy strefa czasowa obsługuje czasu letniego, sprawdź wartość jej <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> właściwości.  
  
 W większości przypadków `DaylightName` właściwość stref czasowych zdefiniowanych w systemie nie ma <xref:System.String.Empty?displayProperty=nameWithType> lub `null`. Jednak <xref:System.TimeZoneInfo.DaylightName%2A> właściwości niestandardowych stref czasowych można ustawić <xref:System.String.Empty?displayProperty=nameWithType>. Ten błąd występuje podczas niestandardowych stref czasowych są tworzone przez <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> lub <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%2CSystem.String%2CSystem.TimeZoneInfo.AdjustmentRule%5B%5D%2CSystem.Boolean%29?displayProperty=nameWithType> przeciążenia i `disableDaylightSavingTime` parametr `true`. W związku z tym, kod powinien nigdy nie przyjęto założenie, że wartość <xref:System.TimeZoneInfo.DaylightName%2A> właściwość nie jest `null` lub jest pusty.  
  
 <xref:System.TimeZoneInfo.DaylightName%2A> Właściwość jest równoważna <xref:System.TimeZone.DaylightName%2A> właściwość <xref:System.TimeZone> klasy.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano metodę o nazwie `DisplayDateWithTimeZoneName` , który używa <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> metodę pozwala ustalić, czy ma być wyświetlana nazwa (czas standardowy) lub zmiany czasu strefy czasowej.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string" Usage="System.TimeZoneInfo.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę wyświetlaną ogólnego, który reprezentuje strefy czasowej.</summary>
        <value>Nazwa wyświetlana ogólne strefy czasowej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nazwa wyświetlana jest zlokalizowana w oparciu o kulturę zainstalowane z systemem operacyjnym Windows.  
  
 Nazwy wyświetlane strefy czasowej dla stref czasowych systemu Windows postępuj zgodnie z dość standardowego formatu. Pierwszą część nazwy wyświetlanej jest podstawowy przesunięcie strefy czasowej, od skoordynowanego czasu uniwersalnego, która jest wskazywany przez akronimem GMT (uniwersalny Greenwich), ujęte w nawiasy. Dla uniwersalnego czasu koordynowanego akronim GMT z przesunięcie nie jest ujęty w nawiasy.  Następuje to ciąg, który identyfikuje strefy czasowej lub co najmniej miast, regionów i krajów w strefie czasowej. Na przykład:  
  
```  
(GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
   
  
## Examples  
 Poniższy przykład pobiera <xref:System.TimeZoneInfo> obiekt, który reprezentuje lokalnej strefy czasowej i wyświetla jego nazwę wyświetlaną nazwę (czas standardowy) i nazwa czasu letniego. Dane wyjściowe są wyświetlane dla systemu w Stanach Zjednoczonych Pacyficznego standardowa strefy czasowej.  
  
 [!code-csharp[System.TimeZone2.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]
 [!code-vb[System.TimeZone2.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Określa, czy dwa <see cref="T:System.TimeZoneInfo" /> obiekty są sobie równe.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="timeZoneInfo.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Drugi obiekt do porównania z bieżącym obiektem.</param>
        <summary>Określa, czy bieżący <see cref="T:System.TimeZoneInfo" /> obiektu a innym obiektem, są takie same.</summary>
        <returns><see langword="true" /> Jeśli <paramref name="obj" /> jest <see cref="T:System.TimeZoneInfo" /> obiekt, który jest taki sam jak bieżące wystąpienie; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda konwertuje lub rzutuje `obj` do <xref:System.TimeZoneInfo> obiektu i porównuje go z bieżącym wystąpieniem. Testowanie równości jest oparty na porównanie wartości. Bieżący <xref:System.TimeZoneInfo> wystąpienia i `obj` są traktowane jako równe w następujących warunkach:  
  
-   Typ środowiska wykonawczego `obj` jest <xref:System.TimeZoneInfo>.  
  
-   Dwa obiekty mają taką samą <xref:System.TimeZoneInfo.Id%2A> wartości właściwości.  
  
-   Dwa obiekty mają te same reguły dopasowania.  
  
 Jeśli `obj` jest `null`, Metoda ta zwraca `false`.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.TimeZoneInfo.Equals%28System.Object%29> metody, aby określić, czy lokalnej strefy czasowej czasu pacyficznego, czy też czasu wschodniego.  
  
 [!code-csharp[System.TimeZoneInfo.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.equals/cs/equals1.cs#1)]
 [!code-vb[System.TimeZoneInfo.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (TimeZoneInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.TimeZoneInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.Equals(System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As TimeZoneInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(TimeZoneInfo ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : TimeZoneInfo -&gt; bool" Usage="timeZoneInfo.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="other">Drugi obiekt do porównania z bieżącym obiektem.</param>
        <summary>Określa, czy bieżący <see cref="T:System.TimeZoneInfo" /> obiektu, a drugi <see cref="T:System.TimeZoneInfo" /> obiekt są równe.</summary>
        <returns><see langword="true" /> Jeśli dwa <see cref="T:System.TimeZoneInfo" /> obiekty są równe; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Równość jest oparty na porównanie wartości. Dwa <xref:System.TimeZoneInfo> obiekty są traktowane jako równe w następujących warunkach:  
  
-   Wartość ich <xref:System.TimeZoneInfo.Id%2A> właściwości jest taka sama.  
  
-   Mają te same reguły dopasowania.  
  
 <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> Zwraca wartość logiczną, będącej wynikiem obliczenia na następujące wyrażenie:  
  
 ```csharp 
 other.Id == this.Id && HasSameRules(other);  
 ```
  
 ```vb
 other.Id = me.Id AndAlso HasSameRules(other)  
 ```

 Jeśli `other` parametr nie został zainicjowany <xref:System.TimeZoneInfo> obiektu, Metoda ta zwraca `false`.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29> metody, aby określić, czy lokalnej strefy czasowej czasu pacyficznego, czy też czasu wschodniego.  
  
 [!code-csharp[System.TimeZone2.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#7)]
 [!code-vb[System.TimeZone2.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindSystemTimeZoneById">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo FindSystemTimeZoneById (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo FindSystemTimeZoneById(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindSystemTimeZoneById (id As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ FindSystemTimeZoneById(System::String ^ id);" />
      <MemberSignature Language="F#" Value="static member FindSystemTimeZoneById : string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.FindSystemTimeZoneById id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">Identyfikator strefy czasowej, która odpowiada <see cref="P:System.TimeZoneInfo.Id" /> właściwości.</param>
        <summary>Tworzy nową <see cref="T:System.TimeZoneInfo" /> obiektu na podstawie jego identyfikatora.</summary>
        <returns>Obiekt, którego identyfikator jest wartością elementu <paramref name="id" /> parametru.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `id` Parametru musi dokładnie odpowiadać elementowi identyfikator strefy czasowej długości, ale nie w przypadku pomyślnego dopasowania nastąpi; oznacza to, że porównanie `id` ze strefą czasową identyfikatory jest rozróżniana wielkość liter. Jeśli chcesz pobrać obiektów stref czasowych w oparciu o udanych dopasowań, można napisać procedur niestandardowych, które działają z kolekcji tylko do odczytu <xref:System.TimeZoneInfo> obiektów zwróconych przez <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> metody.  
  
 W systemach Windows `FindSystemTimeZoneById` próbuje dopasować `id` nazwami podkluczy stref NT\CurrentVersion\Time HKEY_LOCAL_MACHINE\Software\Microsoft\Windows gałęzi rejestru. W systemie Linux i macOS, używa informacji o strefie czasowej dostępne w [biblioteki ICU](http://userguide.icu-project.org/datetime/timezone). Jeśli rejestru lub biblioteki nie ma informacji dla strefy czasowej, chcesz, możesz utworzyć strefę określonym czasie albo poprzez wywoływanie jednego z przeciążeń <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metody lub przez wywołanie <xref:System.TimeZoneInfo.FromSerializedString%2A> deserializować <xref:System.TimeZoneInfo> obiekt reprezentuje wymagane strefy czasowej. Jednak stref czasowych utworzone przez wywołania tych metod nie są czas zdefiniowany przez system i nie można pobrać przy użyciu <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> metody. Te niestandardowe stref czasowych jest możliwy tylko za pośrednictwem zwracane przez odwołanie do obiektu <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> lub <xref:System.TimeZoneInfo.FromSerializedString%2A> wywołania metody.  
  
Ta metoda zwraca nowy <xref:System.TimeZoneInfo> wystąpienie dla każdego wywołania metody; nie zwraca buforowanych obiektów. Może to mieć wpływ na wydajności w aplikacjach, które wywołują `FindSystemTimeZoneById` metody wielokrotnie za pomocą tego samego identyfikatora.   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> metodę, która pobierze strefy Tokio (czas standardowy). To <xref:System.TimeZoneInfo> obiekt jest następnie używany do konwersji czasu lokalnego na czas w Tokio i czy jest Tokio (czas standardowy) lub Tokio (czas letni).  
  
 [!code-csharp[System.TimeZone2.Conversions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]
 [!code-vb[System.TimeZone2.Conversions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">System nie ma wystarczającej ilości pamięci do przechowywania informacji o strefie czasowej.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="id" /> Parametr <see langword="null" />.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">Identyfikator strefy czasowej, określony przez <paramref name="id" /> nie został znaleziony. Oznacza to, że identyfikator strefy czasowej, którego nazwa odpowiada <paramref name="id" /> nie istnieje, lub identyfikator istnieje, ale nie zawiera żadnych danych strefy czasowej.</exception>
        <exception cref="T:System.Security.SecurityException">Ten proces nie ma wymaganych uprawnień do odczytu z klucza rejestru, który zawiera informacje o strefie czasowej.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Znaleziono identyfikator strefy czasowej, ale dane rejestru są uszkodzone.</exception>
        <altmember cref="P:System.TimeZoneInfo.Id" />
        <related type="Article" href="https://msdn.microsoft.com/library/8cb620e5-c6a6-4267-a52e-beeb73cd1a34">Instrukcje: Tworzenie wystąpień obiektów TimeZoneInfo</related>
      </Docs>
    </Member>
    <Member MemberName="FromSerializedString">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo FromSerializedString (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo FromSerializedString(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.FromSerializedString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromSerializedString (source As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ FromSerializedString(System::String ^ source);" />
      <MemberSignature Language="F#" Value="static member FromSerializedString : string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.FromSerializedString source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg reprezentujący Zserializowany <see cref="T:System.TimeZoneInfo" /> obiektu.</param>
        <summary>Deserializuje ciąg ponownie utworzyć oryginalną serializacji <see cref="T:System.TimeZoneInfo" /> obiektu.</summary>
        <returns>Oryginalny Zserializowany obiekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest alternatywą do zapewniania całego kodu, które są wymagane do utworzenia strefę czasową, która nie znajduje się w rejestrze systemu Windows lub w [biblioteki ICU](http://userguide.icu-project.org/datetime/timezone) w systemie Linux i macOS. Można zdefiniować niestandardowa strefa czasowa, a następnie użyć <xref:System.TimeZoneInfo.ToSerializedString%2A> metoda autonomiczny plik wykonywalny lub Użyj instalacji aplikacji program w celu zapisania strefę czasową jako ciąg. Aplikację można pobrać ciągu z lokalizacji magazynu i go za pomocą wystąpienia <xref:System.TimeZoneInfo.FromSerializedString%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład podejmie próbę pobrania Antarktyda/południowego strefy czasowej z systemu lokalnego. Jeśli nie powiedzie się, kod próbuje pobrać informacje o strefie czasowej z pliku tekstowego w katalogu aplikacji. Jeśli ta próba nie powiedzie się, kod tworzy strefy czasowej i zapisuje informacje o strefie czasowej do pliku tekstowego.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]
 [!code-vb[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="source" /> Parametr <see cref="F:System.String.Empty" />.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> Parametr jest pusty ciąg.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Nie można zdeserializować wartość parametru określającego źródło do <see cref="T:System.TimeZoneInfo" /> obiektu.</exception>
        <altmember cref="M:System.TimeZoneInfo.ToSerializedString" />
        <related type="Article" href="https://msdn.microsoft.com/library/6b7b4de9-da07-47e3-8f4c-823f81798ee7">Instrukcje: Przywracanie stref czasowych z zasobu osadzonego</related>
      </Docs>
    </Member>
    <Member MemberName="GetAdjustmentRules">
      <MemberSignature Language="C#" Value="public TimeZoneInfo.AdjustmentRule[] GetAdjustmentRules ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.TimeZoneInfo/AdjustmentRule[] GetAdjustmentRules() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAdjustmentRules" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAdjustmentRules () As TimeZoneInfo.AdjustmentRule()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ GetAdjustmentRules();" />
      <MemberSignature Language="F#" Value="member this.GetAdjustmentRules : unit -&gt; TimeZoneInfo.AdjustmentRule[]" Usage="timeZoneInfo.GetAdjustmentRules " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo+AdjustmentRule[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera tablicę <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> obiekty, które są stosowane do bieżącego <see cref="T:System.TimeZoneInfo" /> obiektu.</summary>
        <returns>Tablica obiektów dla tej strefy czasowej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> Metoda pobiera tablicę <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> obiektów. Każdy obiekt w tablicy definiuje datą rozpoczęcia i zakończenia dostosowanie to strefa czasowa, a także jej różnicowej (dokładnie kwota, za pomocą którego dostosowania powoduje, że czas na dokonanie zmiany). Ponadto Zwróć dwie właściwości <xref:System.TimeZoneInfo.TransitionTime?displayProperty=nameWithType> obiekty, które określają, kiedy występuje każdego roczne przejścia do i z (czas standardowy).  
  
 Jeśli strefa czasowa ma wiele reguł dopasowania, ich są zazwyczaj uporządkowane od najwcześniejsze (pod indeksem 0) do najnowszej (przy indeksie <xref:System.Array.Length%2A> - 1).  
  
 Jeśli strefa czasowa nie zawiera żadnych reguł dopasowania <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> metoda zwraca pustą tablicę (tablicę którego <xref:System.Array.Length%2A> wynosi zero).  
  
 Wszystkie zmiany do elementów w tablicy zwracanej przez <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> metody nie są odzwierciedlane w reguł korygowania, które należą do określonej strefy czasowej. Aby zmodyfikować reguł korygowania strefy czasowej (np. odzwierciedla jej historycznych przejścia do i z czasu letniego) należy utworzyć nowej strefy czasowej przy użyciu reguł korygowania odpowiednie, zamiast zmodyfikuj istniejącą grupę.  
  
   
  
## Examples  
 Poniższy przykład pobiera wszystkie strefy czasowe, które są zdefiniowane na lokalny system i wyświetla pełne informacje na temat ich reguł dopasowania do konsoli.  
  
 [!code-csharp[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#3)]
 [!code-vb[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">System nie ma wystarczającej ilości pamięci do utworzenia kopii reguł korygowania w pamięci.</exception>
        <altmember cref="T:System.TimeZoneInfo.AdjustmentRule" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAmbiguousTimeOffsets">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca informacje o możliwych dat i godzin, które niejednoznaczne daty i godziny mogą być mapowane na.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAmbiguousTimeOffsets">
      <MemberSignature Language="C#" Value="public TimeSpan[] GetAmbiguousTimeOffsets (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan[] GetAmbiguousTimeOffsets(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeSpan&gt; ^ GetAmbiguousTimeOffsets(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.GetAmbiguousTimeOffsets : DateTime -&gt; TimeSpan[]" Usage="timeZoneInfo.GetAmbiguousTimeOffsets dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Data i godzina.</param>
        <summary>Zwraca informacje o możliwych dat i godzin, które niejednoznaczne daty i godziny mogą być mapowane na.</summary>
        <returns>Tablica obiektów reprezentująca możliwe uniwersalnego czasu koordynowanego (UTC) powoduje przesunięcie, że do określonej daty i godziny mogą być mapowane na.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dokładne zachowanie tej metody jest zależna od relacji między <xref:System.DateTime.Kind%2A> właściwości i <xref:System.TimeZoneInfo> obiektu, jak pokazano w poniższej tabeli.  
  
|Typ obiektu TimeZoneInfo|Wartość właściwości Kind|Zachowanie|  
|------------------------------|-------------------------|--------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> lub <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Niejednoznaczny czas zwraca rekompensaty w przypadku `dateTime`.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Konwertuje `dateTime` do czasu lokalnego, a następnie zwraca niejednoznaczny czas rekompensaty w przypadku tego czasu.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|Dowolna wartość.|Zgłasza <xref:System.ArgumentException>.|  
|Inne strefy czasowej.|<xref:System.DateTimeKind.Local> lub <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Konwertuje `dateTime` określoną strefę czasową i określa, czy ten czas jest niejednoznaczna.|  
|Inne strefy czasowej.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Określa, czy `dateTime` jest niejednoznaczny w określonej strefy czasowej.|  
  
 Kolejność <xref:System.TimeSpan> obiektów w tablicy zwracanej przez tę metodę jest niezdefiniowana. Jednak możesz określić, które element reprezentuje przesunięcie od strefy czasowej (czas standardowy), porównując jego wartość ze strefą czasową <xref:System.TimeZoneInfo.BaseUtcOffset%2A> właściwości. Aby zamapować niejednoznaczny czas do strefy czasowej (czas standardowy), zobacz [jak: Rozwiązywanie niejednoznacznych wartości czasu](~/docs/standard/datetime/resolve-ambiguous-times.md).  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano metodę o nazwie `ShowPossibleUtcTimes` , który używa <xref:System.TimeZoneInfo.GetAmbiguousTimeOffsets%28System.DateTime%29> metodę mapowania niejednoznaczny czas jego możliwości razy odpowiedniego uniwersalnego czasu koordynowanego (UTC).  
  
 [!code-csharp[System.TimeZone2.GetAmbiguousTimeOffsets#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#1)]
 [!code-vb[System.TimeZone2.GetAmbiguousTimeOffsets#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#1)]  
  
 Następnie można wywołać metody przy użyciu kodu, takie jak następujące:  
  
 [!code-csharp[System.TimeZone2.GetAmbiguousTimeOffsets#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#2)]
 [!code-vb[System.TimeZone2.GetAmbiguousTimeOffsets#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" /> nie jest niejednoznaczny czas.</exception>
        <altmember cref="Overload:System.TimeZoneInfo.IsAmbiguousTime" />
        <related type="Article" href="https://msdn.microsoft.com/library/2cf5fb25-492c-4875-9245-98cac8348e97">Instrukcje: Rozwiązywanie niejednoznacznych wartości czasu</related>
        <related type="Article" href="https://msdn.microsoft.com/library/bca874ee-5b68-4654-8bbd-3711220ef332">Instrukcje: Umożliwianie użytkownikom rozwiązywanie niejednoznacznych wartości czasu</related>
      </Docs>
    </Member>
    <Member MemberName="GetAmbiguousTimeOffsets">
      <MemberSignature Language="C#" Value="public TimeSpan[] GetAmbiguousTimeOffsets (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan[] GetAmbiguousTimeOffsets(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeSpan&gt; ^ GetAmbiguousTimeOffsets(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.GetAmbiguousTimeOffsets : DateTimeOffset -&gt; TimeSpan[]" Usage="timeZoneInfo.GetAmbiguousTimeOffsets dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Data i godzina.</param>
        <summary>Zwraca informacje o możliwych dat i godzin, które niejednoznaczne daty i godziny mogą być mapowane na.</summary>
        <returns>Tablica obiektów reprezentująca możliwe uniwersalnego czasu koordynowanego (UTC) powoduje przesunięcie, że do określonej daty i godziny mogą być mapowane na.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dokładne zachowanie tej metody jest zależna od relacji między <xref:System.DateTimeOffset.Offset%2A> właściwość `dateTimeOffset` parametru i <xref:System.TimeZoneInfo> obiektu. Jeśli wartość <xref:System.DateTimeOffset.Offset%2A> właściwość odpowiada przesunięcia możliwe bieżącej strefy czasowej z uniwersalnego czasu koordynowanego (UTC) dla że data i godzina, metoda zwraca przesunięcia możliwe. W przeciwnym razie konwertuje `dateTimeOffset` do czasu w bieżącej strefie czasowej, a następnie zwraca możliwe przesunięcia, z których daty i godziny.  
  
 Kolejność <xref:System.TimeSpan> obiektów w tablicy zwracanej przez tę metodę jest niezdefiniowana. Jednak możesz określić, które element reprezentuje przesunięcie od strefy czasowej (czas standardowy), porównując jego wartość ze strefą czasową <xref:System.TimeZoneInfo.BaseUtcOffset%2A> właściwości. Aby zamapować niejednoznaczny czas do strefy czasowej (czas standardowy), zobacz [jak: Rozwiązywanie niejednoznacznych wartości czasu](~/docs/standard/datetime/resolve-ambiguous-times.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTimeOffset" /> nie jest niejednoznaczny czas.</exception>
        <altmember cref="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)" />
        <related type="Article" href="https://msdn.microsoft.com/library/2cf5fb25-492c-4875-9245-98cac8348e97">Instrukcje: Rozwiązywanie niejednoznacznych wartości czasu</related>
        <related type="Article" href="https://msdn.microsoft.com/library/bca874ee-5b68-4654-8bbd-3711220ef332">Instrukcje: Umożliwianie użytkownikom rozwiązywanie niejednoznacznych wartości czasu</related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="timeZoneInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pełni rolę funkcji skrótu do tworzenia skrótów algorytmów i struktur danych, takich jak tabele zbędnych danych.</summary>
        <returns>32-bitowa liczba całkowita ze znakiem służy jako wartość skrótu dla tego <see cref="T:System.TimeZoneInfo" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać dodatkowe szczegóły dotyczące <xref:System.TimeZoneInfo.GetHashCode%2A> metody, zobacz <xref:System.Object.GetHashCode%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSystemTimeZones">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;TimeZoneInfo&gt; GetSystemTimeZones ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.TimeZoneInfo&gt; GetSystemTimeZones() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetSystemTimeZones" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSystemTimeZones () As ReadOnlyCollection(Of TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;TimeZoneInfo ^&gt; ^ GetSystemTimeZones();" />
      <MemberSignature Language="F#" Value="static member GetSystemTimeZones : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;TimeZoneInfo&gt;" Usage="System.TimeZoneInfo.GetSystemTimeZones " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>System.Security.SecurityTreatAsSafe</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.TimeZoneInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca kolekcję posortowane od stref czasowych o tym, jakie informacje są dostępne w systemie lokalnym.</summary>
        <returns>Kolekcja tylko do odczytu <see cref="T:System.TimeZoneInfo" /> obiektów.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> Metoda pobiera wszystkie informacje dostępne strefy czasowej z podkluczy rejestru HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time Zones klucza w systemach Windows i z [biblioteki ICU](http://userguide.icu-project.org/datetime/timezone) w systemie Linux i macOS. Jeśli nie jest w stanie pomyślnie pobrać i przeanalizować wartości właściwości określonego ciągu indywidualnego <xref:System.TimeZoneInfo> obiektów, ta metoda ustawia ich wartość na ciąg pusty ("").  
  
> [!IMPORTANT]
>  <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> Metoda zwraca kolekcję <xref:System.TimeZoneInfo> obiektów tylko w przypadku stref czasowych zdefiniowanych w lub biblioteki ICU. Nie obejmuje stref czasowych utworzone za pomocą przeciążenia <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metody. Są one dostępne tylko poprzez odwołanie do obiektu zwracanego przez metodę tworzenia strefy czasowej.  
  
 Kolekcja zwracanego przez tę metodę jest sortowana przez przesunięcie czasu UTC, a dla stref czasowych, które mają tego samego przesunięcie czasu UTC, według nazwy wyświetlanej przy użyciu bieżącej kultury. Aby dowiedzieć się, nazwę wyświetlaną, zobacz <xref:System.TimeZoneInfo.DisplayName%2A>.  
  
 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> Obiekt zwracany przez tę metodę obsługuje <xref:System.Collections.Generic.IEnumerable%601> interfejsu, co oznacza, że można powtórzyć, za pomocą `foreach` (w języku C#) lub `For Each…Next` (w języku Visual Basic) instrukcji. Każdej iteracji pętli zawiera następnego <xref:System.TimeZoneInfo> obiektu w kolekcji.  
  
 Kolekcja <xref:System.TimeZoneInfo> obiektów reprezentuje stref czasowych zdefiniowanych na komputerze lokalnym; go nie dostarcza szczegółowe informacje dla wszystkich stref czasowych w okresach czasu. Jeśli aplikacja wymaga stref czasowych nie można odnaleźć na komputerze lokalnym, możesz utworzyć niestandardowe stref czasowych przy użyciu przeciążeń <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metody. Aby uzyskać więcej informacji, zobacz [jak: Tworzenie stref czasowych bez reguł korygowania](~/docs/standard/datetime/create-time-zones-without-adjustment-rules.md) i [jak: Tworzenie stref czasowych przy użyciu reguł korygowania](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md).  
  
 Możesz również określić, czy poszczególne strefy czasowej jest zdefiniowana na komputerze lokalnym, wywołując <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> metody i podając identyfikator strefy czasowej do pobrania jako parametr.  
  
   
  
## Examples  
 Poniższy przykład pobiera kolekcję obiektów stref czasowych, reprezentujących stref czasowych zdefiniowanych na komputerze i zapisuje informacje na temat ich do pliku tekstowego.  
  
 [!code-csharp[System.TimeZone2.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/getsystemtimezones1.cs#6)]
 [!code-vb[System.TimeZone2.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/getsystemtimezones1.vb#6)]
  [!code-powershell[System.TimeZone2.Class#6](~/samples/snippets/powershell/VS_Snippets_CLR_System/System.TimeZone2.Class/PS/Timezone2_Examples.ps1)]   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">Pamięć jest niewystarczająca do przechowywania wszystkich informacji o strefie czasowej.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma uprawnienia do odczytu z kluczy rejestru, które zawierają informacje o strefie czasowej.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUtcOffset">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Oblicza przesunięcie lub różnicę między czasem w tej strefie czasowej i uniwersalny czas koordynowany (UTC) dla określonej daty i godziny.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan GetUtcOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetUtcOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.GetUtcOffset : DateTime -&gt; TimeSpan" Usage="timeZoneInfo.GetUtcOffset dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Data i godzina, które można określić przesunięcie.</param>
        <summary>Oblicza przesunięcie lub różnicę między czasem w tej strefie czasowej i uniwersalny czas koordynowany (UTC) dla określonej daty i godziny.</summary>
        <returns>Obiekt, który wskazuje różnicę czasu między dwoma stref czasowych.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przedział czasu zwrócone obejmuje ewentualne różnice z powodu stosowania reguł dopasowania do bieżącej strefy czasowej. Różni się od <xref:System.TimeZoneInfo.BaseUtcOffset%2A> właściwość, która zwraca różnicę między uniwersalnego czasu koordynowanego (UTC) i strefy czasowej (czas standardowy) i w związku z tym, nie uwzględni reguł korygowania.  
  
 Jeśli `dateTime` parametru <xref:System.DateTime.Kind%2A> właściwości nie odpowiada obiektowi strefy czasowej, ta metoda wykonuje niezbędne konwersji przed zwróceniem wyników. Na przykład, to może wystąpić, jeśli <xref:System.DateTime.Kind%2A> właściwość jest <xref:System.DateTimeKind.Local?displayProperty=nameWithType> , ale obiekt strefy czasowej nie jest częścią lokalnej strefy czasowej. Jeśli `dateTime` jest niejednoznaczny, lub jeśli przekonwertowanego czasu jest niejednoznaczny, ta metoda interpretuje niejednoznaczny czas jako (czas standardowy). Jeśli `dateTime` jest nieprawidłowy, Metoda ta zwraca <xref:System.TimeSpan> obiekt, który zawiera różnicę między czasem UTC i strefy czasowej (czas standardowy).  
  
 <xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29?displayProperty=nameWithType> Metoda jest podobna operacja <xref:System.TimeZone.GetUtcOffset%2A> metody <xref:System.TimeZone> klasy.  
  
   
  
## Examples  
 Poniższy przykład ilustruje użycie <xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29> metody z różnych stref czasowych i wartości daty, które mają różne <xref:System.DateTime.Kind%2A> wartości właściwości.  
  
 [!code-csharp[System.TimeZone2.GetUtcOffset#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/cs/System.TimeZone2.GetUtcOffset.cs#1)]
 [!code-vb[System.TimeZone2.GetUtcOffset#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/vb/System.TimeZone2.GetUtcOffset.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeZoneInfo.BaseUtcOffset" />
      </Docs>
    </Member>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan GetUtcOffset (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetUtcOffset(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.GetUtcOffset : DateTimeOffset -&gt; TimeSpan" Usage="timeZoneInfo.GetUtcOffset dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Data i godzina, które można określić przesunięcie.</param>
        <summary>Oblicza przesunięcie lub różnicę między czasem w tej strefie czasowej i uniwersalny czas koordynowany (UTC) dla określonej daty i godziny.</summary>
        <returns>Obiekt, który wskazuje różnicę czasu między uniwersalnego czasu koordynowanego (UTC) i bieżącej strefy czasowej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przedział czasu zwrócone obejmuje ewentualne różnice z powodu stosowania reguł dopasowania do bieżącej strefy czasowej. Różni się od <xref:System.TimeZoneInfo.BaseUtcOffset%2A> właściwość, która zwraca różnicę między uniwersalnego czasu koordynowanego (UTC) i strefy czasowej (czas standardowy) i w związku z tym, nie uwzględni reguł korygowania.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasSameRules">
      <MemberSignature Language="C#" Value="public bool HasSameRules (TimeZoneInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasSameRules(class System.TimeZoneInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.HasSameRules(System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasSameRules (other As TimeZoneInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasSameRules(TimeZoneInfo ^ other);" />
      <MemberSignature Language="F#" Value="member this.HasSameRules : TimeZoneInfo -&gt; bool" Usage="timeZoneInfo.HasSameRules other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="other">Drugi obiekt do porównania z bieżącym <see cref="T:System.TimeZoneInfo" /> obiektu.</param>
        <summary>Wskazuje, czy bieżący obiekt, a drugi <see cref="T:System.TimeZoneInfo" /> obiekt ma te same reguły dopasowania.</summary>
        <returns><see langword="true" /> Jeśli dwie strefy czasowe mają identyczne dostosowania reguł i base w identyczny przesunięcie; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jak <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> metody <xref:System.TimeZoneInfo.HasSameRules%2A> metoda wskazuje, czy dwie strefy czasowe mieć tego samego przesunięcie podstawowej (zgodnie z definicją <xref:System.TimeZoneInfo.BaseUtcOffset%2A> właściwości) i te same reguły dopasowania. W odróżnieniu od <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> metody <xref:System.TimeZoneInfo.HasSameRules%2A> przy porównywaniu identyfikatorów strefy czasowej (zgodnie z definicją <xref:System.TimeZoneInfo.Id%2A> właściwości).  
  
   
  
## Examples  
 Zazwyczaj liczba stref czasowych zdefiniowanych w rejestrze na Windows i [biblioteki ICU](http://userguide.icu-project.org/datetime/timezone) w systemie Linux i macOS mają tego samego przesunięcie względem uniwersalnego czasu koordynowanego (UTC) i te same reguły dopasowania. Poniższy przykład wyświetla listę tych stref czasowych w konsoli.  
  
 [!code-csharp[System.TimeZone2.HasSameRules#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/cs/HasSameRules.cs#1)]
 [!code-vb[System.TimeZone2.HasSameRules#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/vb/HasSameRules.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="other" /> Parametr <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Id { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Id : string" Usage="System.TimeZoneInfo.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera identyfikator strefy czasowej.</summary>
        <value>Identyfikator strefy czasowej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikator strefy czasowej to ciąg klucza, który unikatowo identyfikuje daną strefę czasową. W systemach Windows, odpowiadający mu podkluczy strefy NT\CurrentVersion\Time HKEY_LOCAL_MACHINE\Software\Microsoft\Windows gałęzi rejestru w systemach Windows i z [biblioteki ICU](http://userguide.icu-project.org/datetime/timezone) w systemie Linux i macOS. Może być przekazywany jako parametr do <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> metodę, aby utworzyć wystąpienie <xref:System.TimeZoneInfo> obiekt, który reprezentuje daną strefę czasową.  
  
> [!IMPORTANT]
>  Mimo, że nazwa klucza w rejestrze systemu Windows może zawierać maksymalnie 255 znaków, zaleca się identyfikator, który można przypisać do niestandardowa strefa czasowa były 32 znaków. Im dłuższy identyfikator, tym większe prawdopodobieństwo, że będzie nieprawidłową nazwę klucza podane podczas pobierania.  
  
 Wartość <xref:System.TimeZoneInfo.Id%2A> właściwość jest zwykle, ale nie zawsze taka sama jak w przypadku <xref:System.TimeZoneInfo.StandardName%2A> właściwości. Identyfikator skoordynowanego Universal strefy czasowej jest czasem UTC.  
  
   
  
## Examples  
 Poniższy przykład wyświetla identyfikator każdej ze stref czasowych zdefiniowanych na komputerze lokalnym.  
  
 [!code-csharp[System.TimeZone2.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#5)]
 [!code-vb[System.TimeZone2.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsAmbiguousTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Określa, czy określoną datę i godzinę w określonej strefie czasowej jest niejednoznaczny i mogą być mapowane na dwa lub więcej razy uniwersalnego czasu koordynowanego (UTC).</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsAmbiguousTime">
      <MemberSignature Language="C#" Value="public bool IsAmbiguousTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAmbiguousTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbiguousTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsAmbiguousTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsAmbiguousTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Wartość daty i godziny.</param>
        <summary>Określa, czy określoną datę i godzinę w określonej strefie czasowej jest niejednoznaczny i mogą być mapowane na dwa lub więcej razy uniwersalnego czasu koordynowanego (UTC).</summary>
        <returns><see langword="true" /> Jeśli <paramref name="dateTime" /> parametr jest niejednoznaczny; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Niejednoznaczny czas znajduje się w zakresie czasu dla bieżącej strefy czasowej. Oznacza to, że może to być (czas standardowy) lub raz, będącą wynikiem zastosowania reguły dopasowania. Zazwyczaj niejednoznacznych wartości czasu powoduje po zegar jest ustawiony, aby powrócić do (czas standardowy) z czasu letniego. W sekcji przykład ilustrację.  
  
 Uniwersalny czas koordynowany (UTC) nie ma żadnych niejednoznacznych wartości czasu; żadna z nich nie czasu stref, które nie obsługują czasu letniego. Te strefy czasowe więc nie reguł korygowania i wywołania <xref:System.TimeZoneInfo.IsAmbiguousTime%2A> zawsze zwrotu metody `false`.  
  
 Dla stref czasowych honorujących czasu letniego, dokładne zachowanie tej metody zależy od relacji między <xref:System.DateTime.Kind%2A> właściwości i <xref:System.TimeZoneInfo> obiektu, jak pokazano w poniższej tabeli.  
  
|Typ obiektu TimeZoneInfo|Wartość właściwości Kind|Zachowanie|  
|------------------------------|-------------------------|--------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> lub <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Określa, czy `dateTime` parametru jest niejednoznaczna.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Konwertuje `dateTime` na czas lokalny i określa, czy ten czas jest niejednoznaczna.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType> lub <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Zwraca `false`.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Jeśli `dateTime` jest niejednoznaczny, zakłada ona jest (czas standardowy), konwertuje go na UTC i zwraca `false`.|  
|Inne strefy czasowej.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> lub <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Konwertuje `dateTime` na czas w określonej strefy czasowej i określa, czy ten czas jest niejednoznaczna.|  
|Inne strefy czasowej.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Określa, czy `dateTime` jest niejednoznaczna.|  
  
   
  
## Examples  
 W strefie czasu pacyficznego czasu letniego kończy się o 2:00 4 listopadzie 2007 r. Poniższy przykład przekazuje czasu w odstępach jednej minuty od 12:59 rano 4 listopada 2007 do 2:01:00 4 listopada 2007 do <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29> metody <xref:System.TimeZoneInfo> obiekt, który reprezentuje strefa czasowa czasu pacyficznego. Dane wyjściowe konsoli wskazuje oznacza cały czas od godziny 1:00 4 listopada 2007 do 1:59 rano 4 listopada 2007 są niejednoznaczne.  
  
 [!code-csharp[System.TimeZone2.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#8)]
 [!code-vb[System.TimeZone2.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see cref="P:System.DateTime.Kind" /> Właściwość <paramref name="dateTime" /> wartość <see cref="F:System.DateTimeKind.Local" /> i <paramref name="dateTime" /> jest nieprawidłowy.</exception>
        <altmember cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsAmbiguousTime">
      <MemberSignature Language="C#" Value="public bool IsAmbiguousTime (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAmbiguousTime(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbiguousTime(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.IsAmbiguousTime : DateTimeOffset -&gt; bool" Usage="timeZoneInfo.IsAmbiguousTime dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Data i godzina.</param>
        <summary>Określa, czy określoną datę i godzinę w określonej strefie czasowej jest niejednoznaczny i mogą być mapowane na dwa lub więcej razy uniwersalnego czasu koordynowanego (UTC).</summary>
        <returns><see langword="true" /> Jeśli <paramref name="dateTimeOffset" /> parametr jest niejednoznaczny w bieżącej strefie czasowej; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Niejednoznaczny czas znajduje się w zakresie czasu dla bieżącej strefy czasowej. Oznacza to, że może to być (czas standardowy) lub raz, będącą wynikiem zastosowania reguły dopasowania. Zazwyczaj niejednoznacznych wartości czasu powoduje po zegar jest ustawiony, aby powrócić do (czas standardowy) z czasu letniego. Uniwersalny czas koordynowany (UTC) nie ma żadnych niejednoznacznych wartości czasu; żadna z nich nie czasu stref, które nie obsługują czasu letniego.  
  
 Dokładne zachowanie metod jest zależna od relacji między <xref:System.DateTimeOffset.Offset%2A> właściwość `dateTimeOffset` parametr i bieżącej strefy czasowej. Jeśli wartość <xref:System.DateTimeOffset.Offset%2A> właściwość, jest możliwe, przesunięcie względem czasu UTC bieżącej strefy czasowej, Metoda określa, czy ta data i godzina jest niejednoznaczna. W przeciwnym razie konwertuje `dateTimeOffset` na czas w bieżącej strefie czasowej i określa, czy ta data i godzina jest niejednoznaczna.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsDaylightSavingTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wskazuje, czy do określonej daty i godziny mieści się w zakresie czasu letniego dla bieżącego <see cref="T:System.TimeZoneInfo" /> strefa czasowa obiektu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsDaylightSavingTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Wartość daty i godziny.</param>
        <summary>Wskazuje, czy do określonej daty i godziny mieści się w zakresie czasu letniego dla strefy czasowej bieżącego <see cref="T:System.TimeZoneInfo" /> obiektu.</summary>
        <returns><see langword="true" /> Jeśli <paramref name="dateTime" /> parametr jest Uwzględniaj czasu; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana przez <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> jest zależna od relacji między strefy czasowej, reprezentowane przez <xref:System.TimeZoneInfo> obiektu i <xref:System.DateTime.Kind%2A> właściwość `dateTime` parametru, jak pokazano w poniższej tabeli.  
  
|Wystąpień obiektów TimeZoneInfo|Właściwość DateTime.Kind|Wynik|  
|-------------------------|----------------------------|------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Local`|Określa, czy `dateTime` jest czasu letniego.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Utc`|Konwertuje `dateTime` z uniwersalnego czasu koordynowanego (UTC) na czas lokalny i określa, czy jest on czasu letniego.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Unspecified`|Zakłada się, że `dateTime` reprezentuje czas lokalny i określa, czy jest on czasu letniego.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|`DateTimeKind.Local`, `DateTimeKind.Unspecified`, lub `DateTimeKind.Utc`|Zwraca `false` (UTC nie obsługuje zmiany czasu).|  
|Inne <xref:System.TimeZoneInfo> obiektu.|`DateTimeKind.Local`|Konwertuje czas lokalny czas równoważny <xref:System.TimeZoneInfo> obiektu i określa, czy jest on czasu letniego.|  
|Inne <xref:System.TimeZoneInfo> obiektu.|`DateTimeKind.Utc`|Konwertuje UTC na czas równoważny <xref:System.TimeZoneInfo> obiektu i określa, czy jest on czasu letniego.|  
|Inne <xref:System.TimeZoneInfo> obiektu.|`DateTimeKind.Unspecified`|Określa, czy `dateTime` jest czasu letniego.|  
  
 Jeśli strefa czasowa jest reprezentowane przez <xref:System.TimeZoneInfo> obiekt nie obsługuje czasu letniego, metoda zawsze zwraca `false`. Liczba stref czasowych, łącznie z <xref:System.TimeZoneInfo.Utc%2A>, nie obowiązują czasu letniego.  Aby ustalić, czy strefa czasowa obsługuje czasu letniego, pobrać wartość jego <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> właściwości.  
  
 Jeśli `dateTime` parametr określa niejednoznaczny czas w strefie czasowej bieżący obiekt, <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> interpretuje metoda `dateTime` jako (czas standardowy) i zwraca `false` jeśli jego <xref:System.DateTime.Kind%2A> właściwość <xref:System.DateTimeKind.Local?displayProperty=nameWithType> lub <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Jeśli <xref:System.DateTime.Kind%2A> właściwość jest <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, ta metoda będzie wybierz poprawny niejednoznaczny czas i wskazanie, czy jest on czasu letniego.  
  
 Ponieważ <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29?displayProperty=nameWithType> metoda może zwracać `false` dla daty i godziny, który jest niejednoznaczny (oznacza to, że data i czas, który może reprezentować (czas standardowy) lub czasu letniego w określonej strefie czasowej), <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29?displayProperty=nameWithType> metody mogą być parowane przy użyciu <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> metodę pozwala ustalić, czy w danym momencie może być czasu letniego. Ponieważ niejednoznaczny czas to taki, który może być zarówno czasu letniego, jak i czas standardowy <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29> można wywołać metody najpierw do określenia, czy daty i godziny może być czasu letniego. Jeśli metoda zwraca `false`, <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> można wywołać metody, aby określić, czy <xref:System.DateTime> wartość czasu letniego. W poniższym przykładzie pokazano tej techniki.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#2)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#2)]  
  
 Jeśli `dateTime` parametr określa nieprawidłowy, wywołanie metody wyrzuca <xref:System.ArgumentException> Jeśli wartość `dateTime` parametru <xref:System.DateTime.Kind%2A> właściwość <xref:System.DateTimeKind.Local?displayProperty=nameWithType>; w przeciwnym razie metoda zwraca `false`.  
  
 Wywołaj <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> metodę, aby określić, czy ma być używany na strefę czasową <xref:System.TimeZoneInfo.StandardName%2A> wartość lub jej <xref:System.TimeZoneInfo.DaylightName%2A> wartość przy wyświetlaniu Nazwa strefy czasowej. W sekcji przykład ilustrację.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano metodę o nazwie `DisplayDateWithTimeZoneName` , który używa <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> metodę pozwala ustalić, czy ma być wyświetlana nazwa (czas standardowy) lub zmiany czasu strefy czasowej.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see cref="P:System.DateTime.Kind" /> Właściwość <paramref name="dateTime" /> wartość <see cref="F:System.DateTimeKind.Local" /> i <paramref name="dateTime" /> jest nieprawidłowy.</exception>
        <altmember cref="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : DateTimeOffset -&gt; bool" Usage="timeZoneInfo.IsDaylightSavingTime dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Wartość daty i godziny.</param>
        <summary>Wskazuje, czy do określonej daty i godziny mieści się w zakresie czasu letniego dla strefy czasowej bieżącego <see cref="T:System.TimeZoneInfo" /> obiektu.</summary>
        <returns><see langword="true" /> Jeśli <paramref name="dateTimeOffset" /> parametr jest Uwzględniaj czasu; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana przez <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> jest zależna od relacji między strefy czasowej, reprezentowane przez <xref:System.TimeZoneInfo> obiektu i <xref:System.DateTimeOffset.Offset%2A> właściwość `dateTimeOffset` parametru. Jeśli `dateTimeOffset` nie odpowiada żadnemu przesunięcie bieżącej strefy czasowej z uniwersalnego czasu koordynowanego (UTC), konwertuje metody, które czasu do czasu w bieżącej strefie czasowej. Następnie ustala, czy ta data i godzina jest letni, co umożliwia zaoszczędzenie czasu.  
  
 Jeśli strefa czasowa jest reprezentowane przez <xref:System.TimeZoneInfo> obiekt nie obsługuje czasu letniego, metoda zawsze zwraca `false`. Aby ustalić, czy strefa czasowa obsługuje czasu letniego, pobrać wartość jego <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      </Docs>
    </Member>
    <Member MemberName="IsInvalidTime">
      <MemberSignature Language="C#" Value="public bool IsInvalidTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsInvalidTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsInvalidTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsInvalidTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsInvalidTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Wartość daty i godziny.</param>
        <summary>Wskazuje, czy do określonej daty i godziny jest nieprawidłowy.</summary>
        <returns><see langword="true" /> Jeśli <paramref name="dateTime" /> jest nieprawidłowy; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nieprawidłowa godzina mieści się w zakresie czasu dla bieżącej strefy czasowej, który nie może być mapowana do uniwersalnego czasu koordynowanego (UTC) z powodu stosowania reguła korekty. Zazwyczaj razy nieprawidłowe wystąpić, gdy czas ruchów do przodu do czasu letniego. W sekcji przykład ilustrację.  
  
 Wartość <xref:System.DateTime.Kind%2A> właściwość `dateTime` wpływa na parametr czy `dateTime` reprezentuje nieprawidłowe godziny, jak pokazano w poniższej tabeli.  
  
|Właściwość DateTime.Kind|(Jeśli dotyczy) wystąpień obiektów TimeZoneInfo|Zachowanie|  
|----------------------------|-------------------------------------------|--------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|Określa, czy czas jest nieprawidłowy.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType> lub strefy czasowej niż lokalna.|Konwertuje `dateTime` czasu <xref:System.TimeZoneInfo> obiektu i zwraca `false`.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Nie dotyczy.|Przyjęto założenie, `dateTime` jest czasem <xref:System.TimeZoneInfo> obiektu i określa, czy jest on nieprawidłowy.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Nie dotyczy.|Zwraca `false`.|  
  
   
  
## Examples  
 W strefie czasu pacyficznego czasu letniego rozpoczyna się o 2:00 2 kwietnia 2006 roku. Poniższy kod powoduje przekazanie w odstępach jednej minuty od godziny 1:59 czasu 2 kwietnia 2006 roku do 3:01:00. 2 kwietnia 2006 do <xref:System.TimeZoneInfo.IsInvalidTime%2A> metody <xref:System.TimeZoneInfo> obiekt, który reprezentuje strefa czasowa czasu pacyficznego. Dane wyjściowe konsoli wskazuje oznacza cały czas od 2:00 2 kwietnia 2006 do 2:59:00 2 kwietnia 2006 są nieprawidłowe.  
  
 [!code-csharp[System.TimeZone2.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#9)]
 [!code-vb[System.TimeZone2.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.TimeZoneInfo.IsAmbiguousTime" />
      </Docs>
    </Member>
    <Member MemberName="Local">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo Local { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZoneInfo Local" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Local" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Local As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZoneInfo ^ Local { TimeZoneInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Local : TimeZoneInfo" Usage="System.TimeZoneInfo.Local" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.TimeZoneInfo" /> obiekt, który reprezentuje lokalnej strefy czasowej.</summary>
        <value>Obiekt, który reprezentuje lokalnej strefy czasowej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lokalnej strefy czasowej jest strefy czasowej na komputerze, na którym jest wykonywany kod.  
  
> [!IMPORTANT]
>  Należy zawsze dostęp do lokalnej strefy czasowej przy użyciu <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> właściwości, a nie czas lokalny przypisywanie strefy do <xref:System.TimeZoneInfo> zmiennej obiektu. Zapobiega to <xref:System.TimeZoneInfo> zmiennej obiektu z trwa unieważniony przez wywołanie <xref:System.TimeZoneInfo.ClearCachedData%2A> metody.  
  
 W systemach Windows <xref:System.TimeZoneInfo> obiektu zwróconego przez <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> właściwość odzwierciedla ustawienia **automatycznie Dostosuj zegara zmiany czasu** pole wyboru w Panelu sterowania **daty i godziny**  aplikacji. Jeśli zaznaczono pole wyboru pamięci podręcznej kopię lokalną strefę czasową nie zawiera czasu informacji. Oznacza to, że:  
  
-   Lokalnej strefy czasowej <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> metoda zwraca tablicę, którego długość ma wartość zero.  
  
-   Lokalnej strefy czasowej <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> właściwość zwraca `false`.  
  
-   Lokalnej strefy czasowej ma nie niejednoznaczne lub nieprawidłowy godzin (wszystkie wywołania do <xref:System.TimeZoneInfo.IsAmbiguousTime%2A> lub <xref:System.TimeZoneInfo.IsInvalidTime%2A> zwracają `false`).  
  
-   Wszystkie wywołania do <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A> przy użyciu czasu lokalnego poszczególnych zwróci wartość false.  
  
 Nie jest to prawdą, jednak jeśli odwołanie do lokalnej strefy czasowej są pobierane przy użyciu <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> metody.  
  
 <xref:System.TimeZoneInfo.Local%2A> Właściwość odpowiada <xref:System.TimeZone.CurrentTimeZone%2A> właściwość <xref:System.TimeZone> klasy.  
  
   
  
## Examples  
 Poniższy przykład pobiera <xref:System.TimeZoneInfo> obiekt, który reprezentuje lokalnej strefy czasowej i wyświetla jego nazwę wyświetlaną nazwę (czas standardowy) i nazwa czasu letniego.  
  
 [!code-csharp[System.TimeZone2.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]
 [!code-vb[System.TimeZone2.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/961fb70b-83f0-4dab-a042-cb5fcd817cf5">Instrukcje: Dostęp do wstępnie zdefiniowanego czasu UTC i obiektów lokalnej strefy czasowej</related>
      </Docs>
    </Member>
    <Member MemberName="StandardName">
      <MemberSignature Language="C#" Value="public string StandardName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StandardName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.StandardName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StandardName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StandardName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StandardName : string" Usage="System.TimeZoneInfo.StandardName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę wyświetlaną dla strefy czasowej (czas standardowy).</summary>
        <value>Nazwa wyświetlana strefy czasowej (czas standardowy).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nazwa wyświetlana jest zlokalizowana w oparciu o kulturę zainstalowane z systemem operacyjnym Windows.  
  
 <xref:System.TimeZoneInfo.StandardName%2A> Właściwości jest taka sama jak <xref:System.TimeZone.StandardName%2A> właściwość <xref:System.TimeZone> klasy.  
  
 Jeśli język systemu operacyjnego jest angielski, wartość <xref:System.TimeZoneInfo.StandardName%2A> właściwość jest zwykle, ale nie zawsze taka sama jak w przypadku <xref:System.TimeZoneInfo.Id%2A> właściwości.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano metodę o nazwie `DisplayDateWithTimeZoneName` , który używa <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> metodę pozwala ustalić, czy ma być wyświetlana nazwa (czas standardowy) lub zmiany czasu strefy czasowej.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool SupportsDaylightSavingTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsDaylightSavingTime" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SupportsDaylightSavingTime As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SupportsDaylightSavingTime { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportsDaylightSavingTime : bool" Usage="System.TimeZoneInfo.SupportsDaylightSavingTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy wszystkie reguły zmiany czasu strefy czasowej.</summary>
        <value><see langword="true" /> Jeśli strefa czasowa obsługuje czas letni; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> właściwości dla lokalnej strefy czasowej, zwracany przez <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> właściwość odzwierciedla ustawienia Panelu sterowania **daty i godziny** aplikacji zaznacz pole wyboru, który definiuje czy system automatycznie Dopasowuje dla czasu letniego. Jeśli jest nie zaznaczone, lub jeśli nie pole wyboru jest wyświetlane dla strefy czasowej, wartość tej właściwości jest `false`.  
  
   
  
## Examples  
 Poniższy przykład pobiera kolekcję wszystkie strefy czasowe, które są dostępne w systemie lokalnym i wyświetla nazwy te, które nie obsługują czasu letniego.  
  
 [!code-csharp[System.TimeZone2.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#4)]
 [!code-vb[System.TimeZone2.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#4)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">Obiekt, który zainicjował wywołanie zwrotne. Funkcje tego parametru nie są obecnie implementowane.</param>
        <summary>Uruchamia się po zakończeniu deserializacji obiektu.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Runtime.Serialization.SerializationException"><see cref="T:System.TimeZoneInfo" /> Obiekt zawiera nieprawidłowe lub uszkodzone dane.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo" /> Obiektu do wypełniania danymi.</param>
        <param name="context">Lokalizacja docelowa tej serializacji (zobacz <see cref="T:System.Runtime.Serialization.StreamingContext" />).</param>
        <summary>Wypełnia <see cref="T:System.Runtime.Serialization.SerializationInfo" /> obiektu z dane potrzebne do serializacji bieżącego <see cref="T:System.TimeZoneInfo" /> obiektu.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="info" /> Parametr <see langword="null" />.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego. Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</permission>
      </Docs>
    </Member>
    <Member MemberName="ToSerializedString">
      <MemberSignature Language="C#" Value="public string ToSerializedString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToSerializedString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ToSerializedString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToSerializedString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToSerializedString();" />
      <MemberSignature Language="F#" Value="member this.ToSerializedString : unit -&gt; string" Usage="timeZoneInfo.ToSerializedString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konwertuje aktualny <see cref="T:System.TimeZoneInfo" /> obiekt na ciąg serializacji.</summary>
        <returns>Ciąg reprezentujący bieżącą <see cref="T:System.TimeZoneInfo" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aplikacje oparte na strefach czasowych, które nie są zazwyczaj zdefiniowane w rejestrze systemu Windows lub [biblioteki ICU](http://userguide.icu-project.org/datetime/timezone) można używać w systemie Linux i macOScan <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metodę, aby utworzyć wystąpienie niezbędne stref czasowych jako <xref:System.TimeZoneInfo>obiektów. Aplikacja może następnie wywołać <xref:System.TimeZoneInfo.ToSerializedString%2A> metodę, aby przekonwertować obiekt strefy czasowej na ciąg.  
  
 <xref:System.TimeZoneInfo> Obiekt również ma być przechowywany w lokalizacji, gdzie aplikacja będzie mogła ją pobrać w razie. Możliwe lokalizacje obejmują:  
  
-   Rejestr w systemach Windows.  
  
-   Plik zasobów aplikacji.  
  
-   Plik zewnętrznych, takich jak plik tekstowy.  
  
   
  
## Examples  
 Poniższy przykład podejmie próbę pobrania Antarktyda/południowego strefy czasowej z systemu lokalnego. Jeśli nie powiedzie się, kod próbuje pobrać informacje o strefie czasowej z pliku tekstowego w katalogu aplikacji. Jeśli ta próba nie powiedzie się, kod tworzy strefy czasowej i zapisuje informacje na temat go do pliku tekstowego.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]
 [!code-vb[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.FromSerializedString(System.String)" />
        <related type="Article" href="https://msdn.microsoft.com/library/3c96d83a-a057-4496-abb0-8f4b12712558">Instrukcje: Zapisywanie stref czasowych w zasobie osadzonym</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="timeZoneInfo.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca bieżącą <see cref="T:System.TimeZoneInfo" /> nazwę wyświetlaną obiektu.</summary>
        <returns>Wartość <see cref="P:System.TimeZoneInfo.DisplayName" /> właściwości bieżącego <see cref="T:System.TimeZoneInfo" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas przypisywania kolekcję, która zawiera <xref:System.TimeZoneInfo> obiekty do formantu listy, takich jak <xref:System.Windows.Forms.ListBox> formantu, formant automatycznie wywołuje <xref:System.TimeZoneInfo.ToString%2A> metodę, aby wyodrębnić ciąg, który opisuje każdy obiekt może być reprezentowana na liście. W rezultacie nie trzeba przechowywać zrozumiały opis obiektu jako ciąg, a użytkownik nie musi użyć tych parametrów można wyodrębnić obiekt z kolekcji. Zobacz [jak: Wyliczanie stref czasowych obecny na komputerze](~/docs/standard/datetime/enumerate-time-zones.md) Aby uzyskać więcej szczegółów.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Utc">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo Utc { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZoneInfo Utc" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Utc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Utc As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZoneInfo ^ Utc { TimeZoneInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Utc : TimeZoneInfo" Usage="System.TimeZoneInfo.Utc" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.TimeZoneInfo" /> obiekt, który reprezentuje strefy uniwersalnego czasu koordynowanego (UTC).</summary>
        <value>Obiekt, który reprezentuje strefy uniwersalnego czasu koordynowanego (UTC).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest to wbudowanego obiektu; informacje na ten temat <xref:System.TimeZoneInfo> obiektu nie jest pobierana z rejestru w systemach Windows i z [biblioteki ICU](http://userguide.icu-project.org/datetime/timezone) w systemie Linux i macOS.  
  
> [!IMPORTANT]
>  Należy zawsze uzyskać dostęp do strefy uniwersalnego czasu koordynowanego (UTC), za pośrednictwem <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType> właściwość niż przypisywanie strefie czasowej UTC, aby <xref:System.TimeZoneInfo> zmiennej obiektu. Zapobiega to <xref:System.TimeZoneInfo> zmiennej obiektu z trwa unieważniony przez wywołanie <xref:System.TimeZoneInfo.ClearCachedData%2A> metody.  
  
 Uniwersalny czas koordynowany była wcześniej znana jako czas uniwersalny Greenwich (GMT).  
  
   
  
## Examples  
 Poniższy przykład pobiera <xref:System.TimeZoneInfo> obiekt, który reprezentuje uniwersalnego czasu koordynowanego (UTC) i wyświetla jego nazwę wyświetlaną nazwę (czas standardowy) i nazwa czasu letniego.  
  
 [!code-csharp[System.TimeZone2.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#3)]
 [!code-vb[System.TimeZone2.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/961fb70b-83f0-4dab-a042-cb5fcd817cf5">Instrukcje: Dostęp do wstępnie zdefiniowanego czasu UTC i obiektów lokalnej strefy czasowej</related>
      </Docs>
    </Member>
  </Members>
</Type>