<Type Name="TimeZoneInfo" FullName="System.TimeZoneInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d5282dad4ef64be5192fc89af08a9d5e8f20cb05" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69404927" /></Metadata><TypeSignature Language="C#" Value="public sealed class TimeZoneInfo : IEquatable&lt;TimeZoneInfo&gt;, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit TimeZoneInfo extends System.Object implements class System.IEquatable`1&lt;class System.TimeZoneInfo&gt;, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.TimeZoneInfo" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TimeZoneInfo&#xA;Implements IDeserializationCallback, IEquatable(Of TimeZoneInfo), ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TimeZoneInfo sealed : IEquatable&lt;TimeZoneInfo ^&gt;, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type TimeZoneInfo = class&#xA;    interface IEquatable&lt;TimeZoneInfo&gt;&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.TimeZoneInfo&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5;xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje strefę czasową na świecie.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Strefa czasowa jest regionem geograficznym, w którym jest używany ten sam czas.  
  
 Klasa oferuje znaczące ulepszenia <xref:System.TimeZone> dotyczące klasy, która zapewnia tylko ograniczoną funkcjonalność. <xref:System.TimeZoneInfo>  
  
 <xref:System.TimeZone> Klasa rozpoznaje tylko lokalną strefę czasową i może konwertować czasy między uniwersalnym czasem koordynowanym (UTC) i czasem lokalnym. Obiekt może reprezentować dowolną strefę czasową, a <xref:System.TimeZoneInfo> metody klasy mogą służyć do przekonwertowania czasu w jednej strefie czasowej na odpowiedni czas w dowolnej innej strefie czasowej. <xref:System.TimeZoneInfo> Członkowie <xref:System.TimeZoneInfo> klasy obsługują następujące operacje:  
  
-   Pobieranie strefy czasowej, która jest już zdefiniowana przez system operacyjny.  
  
-   Wyliczanie stref czasowych, które są dostępne w systemie.  
  
-   Konwertowanie czasu między różnymi strefami czasowymi.  
  
-   Tworzenie nowej strefy czasowej, która nie została jeszcze zdefiniowana przez system operacyjny.  
  
-   Serializacja strefy czasowej na potrzeby późniejszego pobierania.  
  
> [!NOTE]
>  Wystąpienie <xref:System.TimeZoneInfo> klasy jest niezmienne. Po utworzeniu wystąpienia obiektu nie można zmodyfikować jego wartości.  
  
 Nie można utworzyć wystąpienia <xref:System.TimeZoneInfo> obiektu `new` za pomocą słowa kluczowego. Zamiast tego należy wywołać jeden z statycznych elementów członkowskich <xref:System.TimeZoneInfo> klasy pokazanej w poniższej tabeli.  
  
|Nazwa statycznego elementu członkowskiego|Opis|  
|------------------------|-----------------|  
|<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>Method|Tworzy niestandardową strefę czasową na podstawie danych dostarczonych przez aplikację.|  
|<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>Method|Tworzy wystąpienie strefy czasowej na podstawie jej identyfikatora.|  
|<xref:System.TimeZoneInfo.FromSerializedString%2A>Method|Deserializacji wartość ciągu, aby ponownie utworzyć obiekt, który został wcześniej <xref:System.TimeZoneInfo> Zserializowany.|  
|<xref:System.TimeZoneInfo.GetSystemTimeZones%2A>Method|Zwraca <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> wyliczalne <xref:System.TimeZoneInfo> obiekty reprezentujące wszystkie strefy czasowe, które są dostępne w systemie lokalnym.|  
|<xref:System.TimeZoneInfo.Local%2A>wartość|Tworzy wystąpienie obiektu, który reprezentuje lokalną strefę czasową. <xref:System.TimeZoneInfo>|  
|<xref:System.TimeZoneInfo.Utc%2A>wartość|Tworzy wystąpienie obiektu, który reprezentuje strefę UTC. <xref:System.TimeZoneInfo>|  
  
 Można użyć <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metody, aby utworzyć strefę czasową, która nie jest zdefiniowana w rejestrze systemu lokalnego systemu Windows lub przez klasy strefy czasowej w [bibliotece ICU](http://userguide.icu-project.org/datetime/timezone) w systemie Linux lub macOS. Następnie można użyć <xref:System.TimeZoneInfo.ToSerializedString%2A> właściwości, aby zapisać informacje o obiekcie strefy czasowej jako ciąg, który może być przechowywany w postaci, w jakiej jest dostępny dla aplikacji. Możesz użyć metody, <xref:System.TimeZoneInfo.FromSerializedString%2A> Aby skonwertować serializowany ciąg z powrotem <xref:System.TimeZoneInfo> do obiektu.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BaseUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan BaseUtcOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan BaseUtcOffset" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.BaseUtcOffset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseUtcOffset As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan BaseUtcOffset { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseUtcOffset : TimeSpan" Usage="System.TimeZoneInfo.BaseUtcOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera różnicę czasu dla czasu standardowego bieżącej strefy czasowej i uniwersalnego czasu koordynowanego (UTC).</summary>
        <value>Obiekt, który wskazuje różnicę czasową od czasu standardowego bieżącej strefy czasowej i uniwersalnego czasu koordynowanego (UTC).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przedział czasu zwracany przez <xref:System.TimeZoneInfo.BaseUtcOffset%2A> właściwość może należeć do zakresu od 14 godzin (dla strefy czasowej, która jest 14 godzin przed uniwersalnym czasem koordynowanym (UTC)) do-14 godzin (dla strefy czasowej, która jest 14 godzin za UTC). Strefy czasowe, które są przed czasem UTC, mają dodatnie przesunięcie; strefy czasowe, które znajdują się za UTC, mają ujemne przesunięcie.  
  
 <xref:System.TimeZoneInfo.BaseUtcOffset%2A> Wartość jest reprezentowana w ciągu kilku minut. Nie może zawierać ułamkowej liczby minut.  
  
> [!NOTE]
>  Ponieważ <xref:System.TimeZoneInfo.BaseUtcOffset%2A> jest właściwością <xref:System.TimeZoneInfo> obiektu, a nie <xref:System.TimeZoneInfo.AdjustmentRule> obiektu, <xref:System.TimeZoneInfo> Klasa stosuje pojedyncze przesunięcie od czasu UTC do wszystkich zmian strefy czasowej. Aby odzwierciedlić strefę czasową, która zmodyfikowała przesunięcie od czasu UTC, należy utworzyć nową strefę czasową <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> przy użyciu metody.  
  
 Właściwość różni się <xref:System.TimeZoneInfo.GetUtcOffset%2A> od metody w następujący sposób: <xref:System.TimeZoneInfo.BaseUtcOffset%2A>  
  
-   Właściwość zwraca różnicę między czasem UTC i czasem standardowym strefy czasowej <xref:System.TimeZoneInfo.GetUtcOffset%2A> ; Metoda zwraca różnicę między czasem UTC a czasem strefy czasowej w określonym punkcie czasu. <xref:System.TimeZoneInfo.BaseUtcOffset%2A>  
  
-   Metoda odzwierciedla stosowanie dowolnych reguł korekty do strefy czasowej <xref:System.TimeZoneInfo.BaseUtcOffset%2A> ; właściwość nie jest. <xref:System.TimeZoneInfo.GetUtcOffset%2A>  
  
   
  
## Examples  
 Poniższy przykład używa <xref:System.TimeZoneInfo.BaseUtcOffset%2A> właściwości, aby wyświetlić różnicę między czasem lokalnym i uniwersalnym czasem koordynowanym (UTC).  
  
 [!code-csharp[System.TimeZone2.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#1)]
 [!code-vb[System.TimeZone2.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.TimeZoneInfo.GetUtcOffset" />
      </Docs>
    </Member>
    <Member MemberName="ClearCachedData">
      <MemberSignature Language="C#" Value="public static void ClearCachedData ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearCachedData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ClearCachedData" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearCachedData ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearCachedData();" />
      <MemberSignature Language="F#" Value="static member ClearCachedData : unit -&gt; unit" Usage="System.TimeZoneInfo.ClearCachedData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Czyści buforowane dane strefy czasowej.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Buforowane dane strefy czasowej zawierają dane w lokalnej strefie czasowej i uniwersalnego czasu koordynowanego (UTC).  
  
 Możesz wywołać metodę, `ClearCachedData` aby zmniejszyć ilość pamięci w pamięci podręcznej aplikacji informacji o strefie czasowej lub odzwierciedlić zmianę strefy czasowej systemu lokalnego.  
  
 Nie zaleca się przechowywania odwołań do lokalnych i stref czasowych czasu UTC. Po wywołaniu `ClearCachedData` metody te zmienne obiektów będą niezdefiniowane <xref:System.TimeZoneInfo> obiekty, które nie są już odwołania do <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> lub <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>. Na przykład, w poniższym kodzie, drugie <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> wywołanie metody <xref:System.ArgumentException> zgłasza metodę, ponieważ `local` zmienna nie jest już uważana za równą <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.TimeZone2.BestPractices#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/cs/System.TimeZone2.BestPractices.cs#1)]
 [!code-vb[System.TimeZone2.BestPractices#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/vb/System.TimeZone2.BestPractices.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje godzinę na godzinę w określonej strefie czasowej.</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Konwertowanie godzin między strefami czasowymi</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTime(valuetype System.DateTime dateTime, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTime (dateTime, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Data i godzina konwersji.</param>
        <param name="destinationTimeZone">Strefa czasowa do przekonwertowania <paramref name="dateTime" /> .</param>
        <summary>Konwertuje godzinę na godzinę w określonej strefie czasowej.</summary>
        <returns>Data i godzina w docelowej strefie czasowej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas konwersji <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29> Metoda stosuje wszelkie reguły korekty obowiązujące `destinationTimeZone` w strefie czasowej.  
  
 To Przeciążenie <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> metody Określa źródłową strefę czasową z wartości `dateTime` <xref:System.DateTime.Kind%2A> właściwości parametru, jak pokazano w poniższej tabeli.  
  
|Wartość właściwości Kind|Źródłowa strefa czasowa|Zachowanie metody|  
|-------------------------|----------------------|---------------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>|Konwertuje czas lokalny na czas w `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A>|Konwertuje uniwersalny czas koordynowany (UTC) na czas w `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Przyjęto założenie <xref:System.TimeZoneInfo.Local%2A>, że.|Konwertuje czas lokalny na czas w `destinationTimeZone`.|  
  
 Właściwość zwracanej <xref:System.DateTime> wartości jest ustawiana zgodnie z poniższą tabelą. <xref:System.DateTime.Kind%2A>  
  
|Warunek|Zwrócona wartość właściwości Kind|  
|---------------|----------------------------------|  
|`destinationTimeZone` Ma<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>wartość.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|`destinationTimeZone` Ma<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>wartość.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|Wszystkie inne wartości daty i godziny oraz docelowe strefy czasowe.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 Jeśli wartość `dateTime` parametru jest niejednoznacznym czasem lokalnym, jest interpretowana jako czas standardowy. Jeśli parametr jest nieprawidłowym czasem lokalnym, ta metoda <xref:System.ArgumentException>zgłasza. `dateTime`  
  
 Jeśli `dateTime` konwersja wyników w wartości daty i godziny, która jest wcześniejsza niż <xref:System.DateTime.MinValue?displayProperty=nameWithType> lub późniejsza niż <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, ta metoda zwróci <xref:System.DateTime.MinValue?displayProperty=nameWithType> lub <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, odpowiednio.  
  
 Możesz również konwertować na lub z czasu UTC, wywołując <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> metody i. <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A>  
  
   
  
## Examples  
 Poniższy przykład konwertuje tablicę wartości daty i godziny na godziny w środkowej strefie czasowej w Stanach Zjednoczonych i Kanadzie. Pokazuje, że źródłowa strefa czasowa zależy od <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> właściwości wartości źródłowej. <xref:System.DateTime> Pokazuje również, że <xref:System.TimeZoneInfo.ConvertTime%2A> Metoda pobiera korekty strefy czasowej, ponieważ Korekta strefy czasowej odbywa się zarówno dla źródłowej, jak i docelowej strefy czasowej o godzinie 2:00 7 listopada 2010.  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime1.cs#1)]
 [!code-vb[System.TimeZoneInfo.ConvertTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Wartość <paramref name="dateTime" /> parametru reprezentuje nieprawidłowy czas.</exception>
        <exception cref="T:System.ArgumentNullException">Wartość <paramref name="destinationTimeZone" /> parametru to <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Konwertowanie godzin między strefami czasowymi</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ConvertTime (DateTimeOffset dateTimeOffset, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ConvertTime(valuetype System.DateTimeOffset dateTimeOffset, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ConvertTime(DateTimeOffset dateTimeOffset, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTimeOffset * TimeZoneInfo -&gt; DateTimeOffset" Usage="System.TimeZoneInfo.ConvertTime (dateTimeOffset, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Data i godzina konwersji.</param>
        <param name="destinationTimeZone">Strefa czasowa do przekonwertowania <paramref name="dateTime" /> .</param>
        <summary>Konwertuje godzinę na godzinę w określonej strefie czasowej.</summary>
        <returns>Data i godzina w docelowej strefie czasowej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas konwersji <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29> Metoda stosuje wszelkie reguły korekty obowiązujące `destinationTimeZone` w strefie czasowej.  
  
 To przeciążenie różni się od innych przeciążeń <xref:System.TimeZoneInfo.ConvertTime%2A> metody przez <xref:System.DateTimeOffset> zaakceptowanie wartości jako pierwszego parametru. Identyfikuje datę i godzinę jako przesunięcie od uniwersalnego czasu koordynowanego (UTC), a nie datę i godzinę w określonej strefie czasowej. W związku z tym `dateTimeOffset` parametr nie może reprezentować niejednoznacznego czasu ani nieprawidłowego czasu.  
  
 W przypadku konwertowania `dateTimeOffset` wartości na godzinę w docelowej strefie czasowej, ta metoda uwzględnia wszystkie reguły korekty obowiązujące w docelowej strefie czasowej.  
  
 Jeśli `dateTimeOffset` konwersja wyników w wartości daty i godziny, która jest wcześniejsza niż <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> lub późniejsza niż <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, ta metoda zwróci <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> lub <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, odpowiednio.  
  
   
  
## Examples  
 Poniższy przykład konwertuje tablicę <xref:System.DateTimeOffset> wartości na godziny w środkowej strefie czasowej w Stanach Zjednoczonych i Kanadzie. Pokazuje, że <xref:System.TimeZoneInfo.ConvertTime%2A> Metoda pobiera korekty strefy czasowej, ponieważ Korekta strefy czasowej odbywa się zarówno dla źródłowej, jak i docelowej strefy czasowej o godz. 2:00 7 listopada 2010.  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime2.cs#2)]
 [!code-vb[System.TimeZoneInfo.ConvertTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Wartość <paramref name="destinationTimeZone" /> parametru to <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Konwertowanie godzin między strefami czasowymi</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo sourceTimeZone, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTime(valuetype System.DateTime dateTime, class System.TimeZoneInfo sourceTimeZone, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo ^ sourceTimeZone, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTime * TimeZoneInfo * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTime (dateTime, sourceTimeZone, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="sourceTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Data i godzina konwersji.</param>
        <param name="sourceTimeZone">Strefa czasowa <paramref name="dateTime" />.</param>
        <param name="destinationTimeZone">Strefa czasowa do przekonwertowania <paramref name="dateTime" /> .</param>
        <summary>Konwertuje godzinę z jednej strefy czasowej na inną.</summary>
        <returns>Data i godzina w docelowej strefie czasowej, która odpowiada <paramref name="dateTime" /> parametrowi w źródłowej strefie czasowej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas konwersji <xref:System.TimeZoneInfo.ConvertTime%2A> Metoda stosuje wszelkie reguły korekty obowiązujące `destinationTimeZone` w strefie czasowej.  
  
 Wartość <xref:System.DateTime.Kind%2A> właściwości `dateTime` parametrumusiodpowiadaćparametrowi,jakpokazano`sourceTimeZone` w poniższej tabeli.  
  
|DateTime. Kind — wartość|sourceTimeZone value|Zachowanie metody|  
|-------------------------|--------------------------|---------------------|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Równa <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>się.|Konwertuje `dateTime` na czas docelowej strefy czasowej.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Nie równa <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>się.|<xref:System.ArgumentException>Zgłasza.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Równa <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>się.|Konwertuje `dateTime` na czas docelowej strefy czasowej.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Nie równa <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>się.|<xref:System.ArgumentException>Zgłasza.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Ile.|Konwertuje `dateTime` na czas docelowej strefy czasowej.|  
  
 Możesz również skonwertować na lub od uniwersalnego czasu koordynowanego (UTC), wywołując <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> metody <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> i.  
  
 Właściwość zwracanej <xref:System.DateTime> wartości jest ustawiana zgodnie z poniższą tabelą. <xref:System.DateTime.Kind%2A>  
  
|Warunek|Zwrócona wartość właściwości Kind|  
|---------------|----------------------------------|  
|Argument ma wartość <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>. `destinationTimeZone`|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|Argument ma wartość <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>. `destinationTimeZone`|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|Wszystkie inne wartości daty i godziny, źródłowe strefy czasowe i docelowe strefy czasowe.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 Jeśli wartość `dateTime` parametru jest niejednoznaczny czas w źródłowej strefie czasowej, jest interpretowana jako czas standardowy. Jeśli parametr jest nieprawidłowym czasem w źródłowej strefie czasowej, ta metoda <xref:System.ArgumentException>zgłasza. `dateTime`  
  
 Jeśli `dateTime` konwersja wyników w wartości daty i godziny, która jest wcześniejsza niż <xref:System.DateTime.MinValue?displayProperty=nameWithType> lub późniejsza niż <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, ta metoda zwróci <xref:System.DateTime.MinValue?displayProperty=nameWithType> lub <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, odpowiednio.  
  
 <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29> Metoda `sourceTimeZone` <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>zgłasza wyjątek ,<xref:System.DateTime.Kind%2A?displayProperty=nameWithType> Jeśliwłaściwość<xref:System.DateTimeKind.Local?displayProperty=nameWithType> argumentu jest, ale argument nie jest. `dateTime` <xref:System.ArgumentException> Aby określić, czy źródłowa strefa czasowa jest lokalną strefą czasową, czy uniwersalną strefą czasową, Metoda sprawdza się pod kątem równości odwołań zamiast <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29> testowania równości wartości przy użyciu metody. Należy zauważyć <xref:System.TimeZoneInfo> , że obiekty reprezentujące lokalną strefę czasową i pobierane przez <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> wywołanie metody nie mają równości referencyjnej z <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>. Ponadto obiekty reprezentujące lokalną lub uniwersalną strefę czasową i pobierane przez iterację kolekcji zwróconej <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> przez metodę nie mają równości referencyjnej z <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> lub <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>. <xref:System.TimeZoneInfo> Alternatywnie można wywołać <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29> metodę.  
  
   
  
## Examples  
 Poniższy przykład ilustruje użycie <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29> metody do konwersji z typu hawajski czas standardowy na czas lokalny.  
  
 [!code-csharp[System.TimeZone2.Concepts#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#9)]
 [!code-vb[System.TimeZone2.Concepts#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see cref="P:System.DateTime.Kind" /> <see cref="F:System.DateTimeKind.Local" />Właściwość <paramref name="dateTime" /> parametruma<see cref="F:System.DateTimeKind.Local" />wartość, ale parametrniejestrówny.<paramref name="sourceTimeZone" />  
  
—lub— 
<see cref="P:System.DateTime.Kind" /> <see cref="P:System.TimeZoneInfo.Utc" />Właściwość <paramref name="dateTime" /> parametruma<see cref="F:System.DateTimeKind.Utc" />wartość, ale parametrniejestrówny.<paramref name="sourceTimeZone" />  
  
—lub— 
<paramref name="dateTime" /> Parametr jest nieprawidłowym czasem (oznacza to, że jest to godzina, która nie istnieje ze względu na reguły dostosowania strefy czasowej).</exception>
        <exception cref="T:System.ArgumentNullException">Parametr ma wartość <see langword="null" />. <paramref name="sourceTimeZone" />  
  
—lub— 
Parametr ma wartość <see langword="null" />. <paramref name="destinationTimeZone" /></exception>
        <altmember cref="Overload:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId" />
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Konwertowanie godzin między strefami czasowymi</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTimeBySystemTimeZoneId">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje godzinę na godzinę w innej strefie czasowej na podstawie identyfikatora strefy czasowej.</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Konwertowanie godzin między strefami czasowymi</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeBySystemTimeZoneId(valuetype System.DateTime dateTime, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeBySystemTimeZoneId(DateTime dateTime, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTime * string -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTime, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dateTime">Data i godzina konwersji.</param>
        <param name="destinationTimeZoneId">Identyfikator docelowej strefy czasowej.</param>
        <summary>Konwertuje godzinę na godzinę w innej strefie czasowej na podstawie identyfikatora strefy czasowej.</summary>
        <returns>Data i godzina w docelowej strefie czasowej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas konwersji <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> Metoda stosuje wszelkie reguły korekty obowiązujące `destinationTimeZoneId` w strefie czasowej.  
  
 To przeciążenie jest w dużym stopniu identyczne z <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> wywołaniem metody, z tą różnicą, że umożliwia określenie docelowej strefy czasowej według identyfikatora, a nie przez odwołanie do obiektu. Ta metoda jest najbardziej przydatna, gdy trzeba skonwertować czas bez pobierania obiektu strefy czasowej, który odnosi się do niego i nie trzeba wiedzieć, czy konwertowany czas to standardowy czy czas letni.  
  
 Metoda określa źródłową strefę czasową z wartości `dateTime` <xref:System.DateTime.Kind%2A> właściwości parametru, jak pokazano w poniższej tabeli. <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%29>  
  
|Wartość właściwości Kind|Źródłowa strefa czasowa|Zachowanie metody|  
|-------------------------|----------------------|---------------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>|Konwertuje czas lokalny na czas w `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A>|Konwertuje uniwersalny czas koordynowany (UTC) na czas w `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Przyjęto założenie <xref:System.TimeZoneInfo.Local%2A>, że.|Konwertuje czas lokalny na czas w `destinationTimeZone`.|  
  
 Właściwość zwracanej <xref:System.DateTime> wartości jest ustawiana zgodnie z poniższą tabelą. <xref:System.DateTime.Kind%2A>  
  
|Warunek|Zwrócona wartość właściwości Kind|  
|---------------|----------------------------------|  
|`destinationTimeZone` Ma`TimeZoneInfo.Utc.Id`wartość.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|Dowolna `destinationTimeZone` inna wartość.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 Jeśli wartość `dateTime` parametru jest niejednoznacznym czasem lokalnym, jest interpretowana jako czas standardowy. Jeśli parametr jest nieprawidłowym czasem lokalnym, ta metoda <xref:System.ArgumentException>zgłasza. `dateTime`  
  
 Jeśli `dateTime` konwersja wyników w wartości daty i godziny, która jest wcześniejsza niż <xref:System.DateTime.MinValue?displayProperty=nameWithType> lub późniejsza niż <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, ta metoda zwróci <xref:System.DateTime.MinValue?displayProperty=nameWithType> lub <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, odpowiednio.  
  
 Ta metoda pobiera informacje o strefie czasowej, których identyfikator jest określony przez `destinationTimeZoneId` parametr z rejestru w systemach Windows i z [biblioteki ICU](http://userguide.icu-project.org/datetime/timezone) w systemach Linux i macOS. Nie można pobrać obiektu strefy czasowej, który jest tworzony przy <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> użyciu metody. Parametr musi być dokładnie odpowiadający identyfikatorowi strefy czasowej, ale nie w przypadku, aby nastąpiło pomyślne dopasowanie, czyli `destinationTimeZoneId` porównanie z identyfikatorami strefy czasowej nie uwzględnia wielkości liter. `destinationTimeZoneId`  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZoneId" />jest <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Znaleziono Identyfikator strefy czasowej, ale dane rejestru są uszkodzone.</exception>
        <exception cref="T:System.Security.SecurityException">Proces nie ma uprawnień wymaganych do odczytu z klucza rejestru zawierającego informacje o strefie czasowej.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">Nie <paramref name="destinationTimeZoneId" /> znaleziono identyfikatora w systemie lokalnym.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Konwertowanie godzin między strefami czasowymi</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ConvertTimeBySystemTimeZoneId (DateTimeOffset dateTimeOffset, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ConvertTimeBySystemTimeZoneId(valuetype System.DateTimeOffset dateTimeOffset, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTimeOffset,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ConvertTimeBySystemTimeZoneId(DateTimeOffset dateTimeOffset, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTimeOffset * string -&gt; DateTimeOffset" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTimeOffset, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Data i godzina konwersji.</param>
        <param name="destinationTimeZoneId">Identyfikator docelowej strefy czasowej.</param>
        <summary>Konwertuje godzinę na godzinę w innej strefie czasowej na podstawie identyfikatora strefy czasowej.</summary>
        <returns>Data i godzina w docelowej strefie czasowej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas konwersji <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> Metoda stosuje wszelkie reguły korekty obowiązujące `destinationTimeZoneId` w strefie czasowej.  
  
 To przeciążenie jest identyczne z wywołaniem <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> metody, z tą różnicą, że umożliwia określenie docelowej strefy czasowej według identyfikatora, a nie przez odwołanie do obiektu. Ta metoda jest najbardziej przydatna, gdy trzeba skonwertować czas bez pobierania obiektu strefy czasowej, który odnosi się do niego i nie trzeba wiedzieć, czy konwertowany czas to standardowy czy czas letni.  
  
 `dateTimeOffset` Ponieważ parametr reprezentuje datę i godzinę razem z przesunięciem czasu uniwersalnego czasu koordynowanego (UTC), nie może reprezentować albo niejednoznacznego czasu, ani nieprawidłowego czasu.  
  
 Ta metoda pobiera strefę czasową, której identyfikator jest określony `destinationTimeZoneId` przez parametr z rejestru w systemach Windows i z [biblioteki ICU](http://userguide.icu-project.org/datetime/timezone) w systemach Linux i macOS. Nie można pobrać obiektu strefy czasowej, który jest tworzony przy <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> użyciu metody. Parametr musi być dokładnie odpowiadający identyfikatorowi strefy czasowej, ale nie w przypadku, aby nastąpiło pomyślne dopasowanie, czyli `destinationTimeZoneId` porównanie z identyfikatorami strefy czasowej nie uwzględnia wielkości liter. `destinationTimeZoneId`  
  
 W przypadku konwertowania `dateTimeOffset` wartości na godzinę w docelowej strefie czasowej Metoda uwzględnia wszelkie reguły korekty obowiązujące w docelowej strefie czasowej.  
  
 Jeśli `dateTimeOffset` konwersja wyników w wartości daty i godziny, która jest wcześniejsza niż <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> lub późniejsza niż <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, ta metoda zwróci <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> lub <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, odpowiednio.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZoneId" />jest <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Znaleziono Identyfikator strefy czasowej, ale dane rejestru są uszkodzone.</exception>
        <exception cref="T:System.Security.SecurityException">Proces nie ma uprawnień wymaganych do odczytu z klucza rejestru zawierającego informacje o strefie czasowej.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">Nie <paramref name="destinationTimeZoneId" /> znaleziono identyfikatora w systemie lokalnym.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Konwertowanie godzin między strefami czasowymi</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeBySystemTimeZoneId(valuetype System.DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeBySystemTimeZoneId(DateTime dateTime, System::String ^ sourceTimeZoneId, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTime * string * string -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTime, sourceTimeZoneId, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="sourceTimeZoneId" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dateTime">Data i godzina konwersji.</param>
        <param name="sourceTimeZoneId">Identyfikator źródłowej strefy czasowej.</param>
        <param name="destinationTimeZoneId">Identyfikator docelowej strefy czasowej.</param>
        <summary>Konwertuje godzinę z jednej strefy czasowej na inną w oparciu o identyfikatory stref czasowych.</summary>
        <returns>Data i godzina w docelowej strefie czasowej, która odpowiada <paramref name="dateTime" /> parametrowi w źródłowej strefie czasowej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas konwersji <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> Metoda stosuje wszelkie reguły korekty obowiązujące `destinationTimeZoneId` w strefie czasowej.  
  
 Chociaż jest podobna do <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> metody, można użyć <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> , aby określić źródłową i docelową strefę czasową przy użyciu <xref:System.TimeZoneInfo> ich identyfikatorów zamiast obiektów. Ta metoda jest najbardziej przydatna, gdy trzeba skonwertować czas bez pobierania obiektu strefy czasowej, który odnosi się do niego i nie trzeba wiedzieć, czy konwertowany czas to standardowy czy czas letni.  
  
 Ta metoda pobiera strefy czasowe, których identyfikatory są `sourceTimeZoneId` parametry `destinationTimeZoneId` i z rejestru w systemach Windows i z [biblioteki ICU](http://userguide.icu-project.org/datetime/timezone) w systemie Linux i macOS. Nie można pobrać obiektów strefy czasowej, które są tworzone <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> za pomocą metody.  
  
 Wartość <xref:System.DateTime.Kind%2A> właściwości `dateTime` parametrumusiodpowiadaćparametrowi,jakpokazano`sourceTimeZoneId` w poniższej tabeli.  
  
|DateTime. Kind — wartość|sourceTimeZone value|Zachowanie metody|  
|-------------------------|--------------------------|---------------------|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Równa `TimeZoneInfo.Utc.Id`się.|Konwertuje `dateTime` na czas docelowej strefy czasowej.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Nie równa `TimeZoneInfo.Utc.Id`się.|<xref:System.ArgumentException>Zgłasza.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Równa `TimeZoneInfo.Local.Id`się.|Konwertuje `dateTime` na czas docelowej strefy czasowej.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Nie równa `TimeZoneInfo.Local.Id`się.|<xref:System.ArgumentException>Zgłasza.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Ile.|Konwertuje `dateTime` na czas docelowej strefy czasowej.|  
  
 Ponieważ <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> polega na wywołaniach metody <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> , Metoda wykonuje wyszukiwanie bez uwzględniania wielkości liter, aby zlokalizować strefy `sourceTimeZoneId` czasowe, które odpowiadają i `destinationTimeZoneId`.  
  
 Jeśli wartość `dateTime` parametru jest niejednoznaczny czas w źródłowej strefie czasowej, jest interpretowana jako czas standardowy. Jeśli parametr jest nieprawidłowym czasem w źródłowej strefie czasowej, ta metoda <xref:System.ArgumentException>zgłasza. `dateTime`  
  
 Właściwość zwracanej <xref:System.DateTime> wartości jest ustawiona na <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> wartość, chyba że docelowa strefa czasowa jest uniwersalnym czasem koordynowanym (UTC), w którym to przypadku jest ustawiona na. <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> <xref:System.DateTime.Kind%2A>  
  
   
  
## Examples  
 Poniższy przykład używa <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> metody do wyświetlania czasu odpowiadającego czasowi systemu lokalnego w ośmiu miejscowościach świata.  
  
 [!code-csharp[System.TimeZone2.Conversions#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#3)]
 [!code-vb[System.TimeZone2.Conversions#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see cref="P:System.DateTime.Kind" /> Właściwość<paramref name="dateTime" /> parametru nie odpowiada źródłowej strefie czasowej.  
  
—lub— 
 <paramref name="dateTime" />jest nieprawidłowym czasem w źródłowej strefie czasowej.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceTimeZoneId" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="destinationTimeZoneId" />jest <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Znaleziono identyfikatory stref czasowych, ale dane rejestru są uszkodzone.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma uprawnień wymaganych do odczytu z kluczy rejestru, które przechowują dane strefy czasowej.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">Nie <paramref name="sourceTimeZoneId" /> znaleziono identyfikatora w systemie lokalnym.  
  
—lub— 
Nie <paramref name="destinationTimeZoneId" /> znaleziono identyfikatora w systemie lokalnym.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Konwertowanie godzin między strefami czasowymi</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeFromUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeFromUtc (DateTime dateTime, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeFromUtc(valuetype System.DateTime dateTime, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeFromUtc(DateTime dateTime, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeFromUtc : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeFromUtc (dateTime, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dateTime">Uniwersalny czas koordynowany (UTC).</param>
        <param name="destinationTimeZone">Strefa czasowa do przekonwertowania <paramref name="dateTime" /> .</param>
        <summary>Konwertuje uniwersalny czas koordynowany (UTC) na czas w określonej strefie czasowej.</summary>
        <returns>Data i godzina w docelowej strefie czasowej. Jego <see cref="P:System.DateTime.Kind" /> Właściwość to <see cref="F:System.DateTimeKind.Utc" /> <see cref="P:System.DateTime.Kind" /> <see cref="F:System.DateTimeKind.Unspecified" />if <paramref name="destinationTimeZone" /> ;wprzeciwnym<see cref="P:System.TimeZoneInfo.Utc" />razie jego właściwość jest.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas konwersji <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> Metoda stosuje wszelkie reguły korekty obowiązujące `destinationTimeZone` w strefie czasowej.  
  
 Dokładne zachowanie tej metody zależy od wartości <xref:System.DateTime.Kind%2A> właściwości `dateTime` parametru, jak pokazano w poniższej tabeli.  
  
|DateTime. Kind — właściwość|Konwersja|  
|----------------------------|----------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.ArgumentException>Zgłasza.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> lub <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Konwertuje od uniwersalnego czasu koordynowanego (UTC).|  
  
 Jeśli `dateTime` konwersja wyników w wartości daty i godziny, która jest wcześniejsza niż <xref:System.DateTime.MinValue?displayProperty=nameWithType> lub późniejsza niż <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, ta metoda zwróci <xref:System.DateTime.MinValue?displayProperty=nameWithType> lub <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, odpowiednio.  
  
   
  
## Examples  
 Poniższy przykład konwertuje uniwersalny czas koordynowany (UTC) na czas środkowy.  
  
 [!code-csharp[System.TimeZone2.Concepts#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#8)]
 [!code-vb[System.TimeZone2.Concepts#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Właściwość ma wartość<see cref="F:System.DateTimeKind.Local" />. <see cref="P:System.DateTime.Kind" /> <paramref name="dateTime" /></exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZone" />jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Konwertowanie godzin między strefami czasowymi</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTimeToUtc">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje datę i godzinę na uniwersalny czas koordynowany (UTC).</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Konwertowanie godzin między strefami czasowymi</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTimeToUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeToUtc (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeToUtc(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeToUtc(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeToUtc : DateTime -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeToUtc dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dateTime">Data i godzina konwersji.</param>
        <summary>Konwertuje określoną datę i godzinę na uniwersalny czas koordynowany (UTC).</summary>
        <returns>Uniwersalny czas koordynowany (UTC), który odpowiada <paramref name="dateTime" /> parametrowi. Właściwość Value jest zawsze ustawiana na <see cref="F:System.DateTimeKind.Utc" />. <see cref="T:System.DateTime" /> <see cref="P:System.DateTime.Kind" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dokładna konwersja jest zależna od wartości <xref:System.DateTime.Kind%2A> właściwości `dateTime` parametru, jak pokazano w poniższej tabeli.  
  
|DateTime. Kind — właściwość|Konwersja|  
|----------------------------|----------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Konwertuje czas lokalny na uniwersalny czas koordynowany (UTC).|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Przyjęto założenie, że `dateTime` czas lokalny jest konwertowany z czasu lokalnego na UTC.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Zwraca `dateTime` bez zmian.|  
  
 Jeśli `dateTime` odnosi się do niejednoznacznego czasu lokalnego, ta metoda zakłada, że jest to standardowy czas lokalny. Jeśli `dateTime` odnosi się do nieprawidłowego czasu lokalnego, Metoda <xref:System.ArgumentException>zgłasza.  
  
> [!NOTE]
>  Jeśli lokalna strefa czasowa komputera zawiera wiele reguł korekty, to Przeciążenie <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> metody może zwracać wyniki, które różnią się <xref:System.TimeZone.ToUniversalTime%2A?displayProperty=nameWithType> od metod i <xref:System.DateTime.ToUniversalTime%2A?displayProperty=nameWithType> . <xref:System.TimeZone.ToUniversalTime%2A?displayProperty=nameWithType>zawsze stosuje bieżącą regułę korekty do konwersji strefy czasowej, niezależnie od tego `dateTime` , czy znajduje się w zakresie dat. Podczas wykonywania w [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] <xref:System.DateTime.ToUniversalTime%2A?displayProperty=nameWithType> programie stosowana jest również bieżąca Reguła korekty do konwersji strefy czasowej, niezależnie od tego `dateTime` , czy należy ona do zakresu dat.  
  
 `dateTime` Jeśli odpowiednik czasu UTC jest wcześniejszy niż <xref:System.DateTime.MinValue?displayProperty=nameWithType> lub późniejszy <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, Metoda ta zwraca <xref:System.DateTime.MinValue> lub <xref:System.DateTime.MaxValue>, odpowiednio.  
  
   
  
## Examples  
 Poniższy <xref:System.DateTime.Kind%2A> przykład ilustruje konwersję wartości czasu, których właściwość jest <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, <xref:System.DateTimeKind.Local?displayProperty=nameWithType>i <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, odpowiednio. Ilustruje także konwersję niejednoznacznych i nieprawidłowych wartości.  
  
 [!code-csharp[System.TimeZone2.Conversions#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#1)]
 [!code-vb[System.TimeZone2.Conversions#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see langword="TimeZoneInfo.Local.IsInvalidDateTime(" />
          <paramref name="dateTime" />
          <see langword=")" />zwraca <see langword="true" />wartość.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Konwertowanie godzin między strefami czasowymi</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeToUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeToUtc (DateTime dateTime, TimeZoneInfo sourceTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeToUtc(valuetype System.DateTime dateTime, class System.TimeZoneInfo sourceTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeToUtc(DateTime dateTime, TimeZoneInfo ^ sourceTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeToUtc : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeToUtc (dateTime, sourceTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="sourceTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dateTime">Data i godzina konwersji.</param>
        <param name="sourceTimeZone">Strefa czasowa <paramref name="dateTime" />.</param>
        <summary>Konwertuje godzinę w określonej strefie czasowej na uniwersalny czas koordynowany (UTC).</summary>
        <returns>Uniwersalny czas koordynowany (UTC), który odpowiada <paramref name="dateTime" /> parametrowi. Właściwość obiektu zawsze jest ustawiona na <see cref="F:System.DateTimeKind.Utc" />. <see cref="T:System.DateTime" /> <see cref="P:System.DateTime.Kind" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> `sourceTimeZone` <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType> `dateTime` Jeśli właściwość parametru`dateTime` Equals jest równa i parametr Equals, ta metoda zwraca bez wykonania żadnej konwersji. <xref:System.DateTime.Kind%2A>  
  
 Jeśli `dateTime` odpowiada niejednoznacznemu czasowi, ta metoda zakłada, że jest to standardowy czas dla źródłowej strefy czasowej. Jeśli `dateTime` odpowiada na nieprawidłowy czas, ta metoda <xref:System.ArgumentException>zgłasza.  
  
 `dateTime` Jeśli odpowiednik uniwersalnego czasu koordynowanego (UTC) jest wcześniejszy <xref:System.DateTime.MinValue?displayProperty=nameWithType> niż lub późniejszy <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, Metoda ta zwraca <xref:System.DateTime.MinValue> lub <xref:System.DateTime.MaxValue>odpowiednio.  
  
   
  
## Examples  
 Poniższy przykład pobiera bieżącą datę z systemu lokalnego i konwertuje ją na uniwersalny czas koordynowany (UTC), a następnie konwertuje ją na format Tokio (czas standardowy), a na koniec konwertuje z powrotem z lokalizacji standardu Tokio na czas UTC. Należy zauważyć, że dwa czasy UTC są identyczne.  
  
 [!code-csharp[System.TimeZone2.Conversions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]
 [!code-vb[System.TimeZone2.Conversions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" />.<see langword="Kind" /> jest <see cref="F:System.DateTimeKind.Utc" /> i <paramref name="sourceTimeZone" /> nie równa <see cref="P:System.TimeZoneInfo.Utc" />się.  
  
—lub— 
 <paramref name="dateTime" />.<see langword="Kind" /> jest <see cref="F:System.DateTimeKind.Local" /> i <paramref name="sourceTimeZone" /> nie równa <see cref="P:System.TimeZoneInfo.Local" />się.  
  
—lub— 
 <paramref name="sourceTimeZone" /><see langword=".IsInvalidDateTime(" /><paramref name="dateTime" /><see langword=")" />zwraca <see langword="true" />wartość.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceTimeZone" />jest <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Konwertowanie godzin między strefami czasowymi</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateCustomTimeZone">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Definiuje strefę czasową, która nie została znaleziona na komputerze lokalnym.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="displayName" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="standardDisplayName" Type="System.String" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="id">Identyfikator strefy czasowej.</param>
        <param name="baseUtcOffset">Obiekt, który reprezentuje różnicę czasu między tą strefą czasową i uniwersalnym czasem koordynowanym (UTC).</param>
        <param name="displayName">Nazwa wyświetlana nowej strefy czasowej.</param>
        <param name="standardDisplayName">Nazwa nowego czasu standardowego strefy czasowej.</param>
        <summary>Tworzy niestandardową strefę czasową o określonym identyfikatorze, przesunięcie od uniwersalnego czasu koordynowanego (UTC), nazwę wyświetlaną i nazwę wyświetlaną czasu standardowego.</summary>
        <returns>Nowa strefa czasowa.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To Przeciążenie <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29> metody jest odpowiednie do tworzenia strefy czasowej, która nie ma korekt (czyli strefy czasowej, która nie obsługuje czasu letniego). Aby zdefiniować strefę czasową, która zawiera korekty czasu letniego, użyj <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> albo metody.  
  
 W poniższej tabeli przedstawiono relacje między parametrami, które są dostarczane do <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> metody i właściwości <xref:System.TimeZoneInfo> obiektu, które są zwracane przez wywołanie metody.  
  
|CreateCustomTimeZone — parametr|Właściwość TimeZoneInfo|  
|------------------------------------|---------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
  
 Zwykle nazwa standardowego czasu i jego identyfikator strefy czasowej są takie same. Jednakże Długość identyfikatora strefy czasowej nie powinna przekraczać 32 znaków. Ciąg przesłany do `displayName` parametru jest zgodny z formatem w formacie dość standardowym. Pierwsza część nazwy wyświetlanej jest bazowym przesunięciem strefy czasowej od skoordynowanego czasu uniwersalnego, który jest wskazywany przez akronim GMT (czas uniwersalny Greenwich), ujęty w nawiasy. Następuje to ciąg, który identyfikuje strefę czasową lub co najmniej jedno miasto, regiony lub kraje w strefie czasowej lub oba te elementy. Na przykład:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
   
  
## Examples  
 Poniższy przykład tworzy niestandardową strefę czasową dla regionu Mawson i Holme Bay Antarktyda. Następnie zostanie wyświetlony wynik przekonwertowania czasu lokalnego na godzinę w nowej strefie czasowej.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#1)]
 [!code-vb[System.TimeZone2.CreateTimeZone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Parametr ma wartość <see langword="null" />. <paramref name="id" /></exception>
        <exception cref="T:System.ArgumentException"><paramref name="id" /> Parametr jest pustym ciągiem ("").  
  
—lub— 
<paramref name="baseUtcOffset" /> Parametr nie reprezentuje całkowitej liczby minut.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="baseUtcOffset" /> Parametr jest dłuższy niż 14 godzin lub krótszy niż-14 godzin.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a6af8647-7893-4f29-95a9-d94c65a6e8dd">Instrukcje: Tworzenie stref czasowych bez reguł korygowania</related>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, class System.TimeZoneInfo/AdjustmentRule[] adjustmentRules) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String, daylightDisplayName As String, adjustmentRules As TimeZoneInfo.AdjustmentRule()) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName, System::String ^ daylightDisplayName, cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ adjustmentRules);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string * string * TimeZoneInfo.AdjustmentRule[] -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="displayName" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="standardDisplayName" Type="System.String" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="daylightDisplayName" Type="System.String" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="adjustmentRules" Type="System.TimeZoneInfo+AdjustmentRule[]" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="id">Identyfikator strefy czasowej.</param>
        <param name="baseUtcOffset">Obiekt, który reprezentuje różnicę czasu między tą strefą czasową i uniwersalnym czasem koordynowanym (UTC).</param>
        <param name="displayName">Nazwa wyświetlana nowej strefy czasowej.</param>
        <param name="standardDisplayName">Nowa nazwa standardowego czasu strefy czasowej.</param>
        <param name="daylightDisplayName">Nazwa czasu letniego nowej strefy czasowej.</param>
        <param name="adjustmentRules">Tablica, która rozszerza przesunięcie czasu UTC w danym okresie.</param>
        <summary>Tworzy niestandardową strefę czasową o określonym identyfikatorze, przesunięcie od uniwersalnego czasu koordynowanego (UTC), nazwę wyświetlaną, nazwę standardowego czasu, nazwę czasu letniego i reguły czasu letniego.</summary>
        <returns><see cref="T:System.TimeZoneInfo" /> Obiekt reprezentujący nową strefę czasową.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To Przeciążenie <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> metody jest odpowiednie do tworzenia strefy czasowej, która obsługuje czas letni. Aby zdefiniować strefę czasową, która nie obsługuje czasu letniego, użyj <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> albo metody.  
  
 W poniższej tabeli przedstawiono relacje między parametrami, które są dostarczane do <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> metody i elementy członkowskie <xref:System.TimeZoneInfo> obiektu, które są zwracane przez wywołanie metody.  
  
|CreateCustomTimeZone — parametr|TimeZoneInfo member|  
|------------------------------------|-------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
|`daylightDisplayName`|<xref:System.TimeZoneInfo.DaylightName%2A>|  
|`adjustmentRules`|Tablica <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> obiektów zwracanych <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> przez metodę.|  
  
 Zwykle nazwa standardowego czasu i jego identyfikator strefy czasowej są takie same. Jednakże Długość identyfikatora strefy czasowej nie powinna przekraczać 32 znaków. Ciąg przesłany do `displayName` parametru jest zgodny z formatem w formacie dość standardowym. Pierwsza część nazwy wyświetlanej jest bazowym przesunięciem strefy czasowej od skoordynowanego czasu uniwersalnego, który jest wskazywany przez akronim GMT (czas uniwersalny Greenwich), ujęty w nawiasy. Następuje to ciąg, który identyfikuje strefę czasową lub co najmniej jedno miasto, regiony lub kraje w strefie czasowej lub oba te elementy. Przykład:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
 `baseUtcOffset` Parametr definiuje niestandardową wartość przesunięcia strefy czasowej od skoordynowanego czasu uniwersalnego (UTC) dla wszystkich reguł korekty strefy czasowej. Innymi słowy, <xref:System.TimeZoneInfo> model obiektów zakłada, że przesunięcie strefy czasowej od czasu UTC jest stałe przez cały czas życia strefy czasowej i istnieje niezależna od konkretnych reguł korekty. Aby odzwierciedlić strefę czasową, która zmieniła przesunięcie od czasu UTC, należy utworzyć nowy obiekt strefy czasowej.  
  
 Reguły dostosowania strefy czasowej są definiowane przez wykonanie następujących czynności:  
  
1.  Wywołanie metody <xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A> lub, aby zdefiniować początkowy i końcowy czas przejścia dla każdej reguły korekty. <xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A>  
  
2.  Wywoływanie <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> metody dla każdej reguły korekty.  
  
3.  Przypisywanie reguł korekty do tablicy, która może być przenoszona jako `adjustmentRules` parametr.  
  
   
  
## Examples  
 Poniższy przykład tworzy niestandardową strefę czasową dla stacji Palmer i wyspy Anvers w Antarktyda. Następnie konwertuje czas lokalny na godzinę w nowej strefie czasowej i wyświetla wynik.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#2)]
 [!code-vb[System.TimeZone2.CreateTimeZone#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Parametr ma wartość <see langword="null" />. <paramref name="id" /></exception>
        <exception cref="T:System.ArgumentException"><paramref name="id" /> Parametr jest pustym ciągiem ("").  
  
—lub— 
<paramref name="baseUtcOffset" /> Parametr nie reprezentuje całkowitej liczby minut.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="baseUtcOffset" /> Parametr jest dłuższy niż 14 godzin lub krótszy niż-14 godzin.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Reguły dostosowania określone w <paramref name="adjustmentRules" /> parametrze nakładają się na siebie.  
  
—lub— 
Reguły dostosowania określone w <paramref name="adjustmentRules" /> parametrze nie są w kolejności chronologicznej.  
  
—lub— 
Co najmniej jeden element w <paramref name="adjustmentRules" /> programie <see langword="null" />jest.  
  
—lub— 
Do daty można zastosować wiele reguł korekty.  
  
—lub— 
Suma <paramref name="baseUtcOffset" /> parametru <paramref name="adjustmentRules" /> i wartość jednego lub większej liczby obiektów w tablicy jest większa niż 14 godzin lub mniejsza niż-14 godzin. <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/c52ef192-13a9-435f-8015-3b12eae8c47c">Instrukcje: Tworzenie stref czasowych przy użyciu reguł korygowania</related>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, class System.TimeZoneInfo/AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String, daylightDisplayName As String, adjustmentRules As TimeZoneInfo.AdjustmentRule(), disableDaylightSavingTime As Boolean) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName, System::String ^ daylightDisplayName, cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ adjustmentRules, bool disableDaylightSavingTime);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string * string * TimeZoneInfo.AdjustmentRule[] * bool -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules, disableDaylightSavingTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="displayName" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="standardDisplayName" Type="System.String" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="daylightDisplayName" Type="System.String" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="adjustmentRules" Type="System.TimeZoneInfo+AdjustmentRule[]" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="disableDaylightSavingTime" Type="System.Boolean" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="id">Identyfikator strefy czasowej.</param>
        <param name="baseUtcOffset"><see cref="T:System.TimeSpan" /> Obiekt, który reprezentuje różnicę czasu między tą strefą czasową i uniwersalnym czasem koordynowanym (UTC).</param>
        <param name="displayName">Nazwa wyświetlana nowej strefy czasowej.</param>
        <param name="standardDisplayName">Nazwa standardowego czasu nowej strefy czasowej.</param>
        <param name="daylightDisplayName">Nazwa czasu letniego nowej strefy czasowej.</param>
        <param name="adjustmentRules">Tablica <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> obiektów, które rozszerzają podstawowe przesunięcie czasu UTC w danym okresie.</param>
        <param name="disableDaylightSavingTime"><see langword="true" />Aby odrzucić wszelkie informacje dotyczące czasu letniego, które <paramref name="adjustmentRules" /> znajdują się w nowym obiekcie, <see langword="false" />w przeciwnym razie.</param>
        <summary>Tworzy niestandardową strefę czasową o określonym identyfikatorze, przesunięcie od uniwersalnego czasu koordynowanego (UTC), nazwę wyświetlaną, nazwę standardowego czasu, nazwę czasu letniego, reguły czasu letniego i wartość wskazującą, czy zwracany obiekt odzwierciedla Informacje o czasie letnim.</summary>
        <returns>Nowa strefa czasowa. Jeśli parametr ma <see langword="true" />wartość, zwracany obiekt nie ma danych czasu letniego. <paramref name="disableDaylightSavingTime" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć tego przeciążenia <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> metody, aby utworzyć niestandardową strefę czasową, której obsługa czasu letniego może być określona na podstawie warunków w czasie wykonywania.  
  
 W poniższej tabeli przedstawiono relacje między parametrami, które są dostarczane do <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> metody i elementy członkowskie <xref:System.TimeZoneInfo> obiektu, które są zwracane przez wywołanie metody.  
  
|CreateCustomTimeZone — parametr|Właściwość TimeZoneInfo|  
|------------------------------------|---------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
|`daylightDisplayName`|<xref:System.TimeZoneInfo.DaylightName%2A>Jeśli `disableDaylightSavingTime` jest `false`; <xref:System.String.Empty?displayProperty=nameWithType> Jeśli`disableDaylightSavingTime` jest .`true`|  
|`adjustmentRules`|<xref:System.TimeZoneInfo.AdjustmentRule> Tablica obiektów zwracanych `disableDaylightSavingTime` `true` `disableDaylightSavingTime` <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> `false`przez metodę, jeśli jest; pusta tablica zwracana przez metodę, jeśli is. <xref:System.TimeZoneInfo.GetAdjustmentRules%2A>|  
|`disableDaylightSavingTime`|Nie <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>.|  
  
 Zwykle nazwa standardowego czasu i jego identyfikator strefy czasowej są takie same. Jednakże Długość identyfikatora strefy czasowej nie powinna przekraczać 32 znaków. Ciąg przesłany do `displayName` parametru jest zgodny z formatem w formacie dość standardowym. Pierwsza część nazwy wyświetlanej jest bazowym przesunięciem strefy czasowej od skoordynowanego czasu uniwersalnego, który jest wskazywany przez akronim GMT (czas uniwersalny Greenwich), ujęty w nawiasy. Następuje to ciąg, który identyfikuje strefę czasową lub co najmniej jedno miasto, regiony lub kraje w strefie czasowej lub oba te elementy. Na przykład:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
 Reguły dostosowania strefy czasowej są definiowane przez wykonanie następujących czynności:  
  
1.  <xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A> Wywoływanie<xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A> albo metody w celu zdefiniowania początkowych i końcowych reguł przejścia dla każdej reguły korekty.  
  
2.  Wywoływanie <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> metody dla każdej reguły korekty.  
  
3.  Przypisywanie reguł korekty do tablicy, która może być przenoszona jako `adjustmentRules` parametr.  
  
 Jeśli `disableDaylightSavingTime` parametr jest `false`, operacja tej <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> metody jest identyczna z przeciążeniem. Jeśli `disableDaylightSavingTime` <xref:System.TimeZoneInfo.DaylightName%2A> jest `true`, zwracany obiekt nie zawiera żadnych reguł korekty i właściwość, której wartość jest ciągiem pustym.  
  
   
  
## Examples  
 Poniższy przykład tworzy niestandardową strefę czasową dla stacji Palmer i wyspy Anvers w Antarktyda. Ustawia `disableDaylightSavingTime` parametr w wywołaniu <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> metody na `true`. Następnie zostanie wyświetlona nowa nazwa czasu letniego strefy czasowej (jeśli istnieje) i liczba reguł korekty, aby potwierdzić, że nowa strefa czasowa nie ma informacji o czasie letnim.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#3)]
 [!code-vb[System.TimeZone2.CreateTimeZone#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Parametr ma wartość <see langword="null" />. <paramref name="id" /></exception>
        <exception cref="T:System.ArgumentException"><paramref name="id" /> Parametr jest pustym ciągiem ("").  
  
—lub— 
<paramref name="baseUtcOffset" /> Parametr nie reprezentuje całkowitej liczby minut.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="baseUtcOffset" /> Parametr jest dłuższy niż 14 godzin lub krótszy niż-14 godzin.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Reguły dostosowania określone w <paramref name="adjustmentRules" /> parametrze nakładają się na siebie.  
  
—lub— 
Reguły dostosowania określone w <paramref name="adjustmentRules" /> parametrze nie są w kolejności chronologicznej.  
  
—lub— 
Co najmniej jeden element w <paramref name="adjustmentRules" /> programie <see langword="null" />jest.  
  
—lub— 
Do daty można zastosować wiele reguł korekty.  
  
—lub— 
Suma <paramref name="baseUtcOffset" /> parametru <paramref name="adjustmentRules" /> i wartość jednego lub większej liczby obiektów w tablicy jest większa niż 14 godzin lub mniejsza niż-14 godzin. <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a6af8647-7893-4f29-95a9-d94c65a6e8dd">Instrukcje: Tworzenie stref czasowych bez reguł korygowania</related>
        <related type="Article" href="https://msdn.microsoft.com/library/c52ef192-13a9-435f-8015-3b12eae8c47c">Instrukcje: Tworzenie stref czasowych przy użyciu reguł korygowania</related>
      </Docs>
    </Member>
    <Member MemberName="DaylightName">
      <MemberSignature Language="C#" Value="public string DaylightName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DaylightName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.DaylightName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DaylightName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DaylightName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DaylightName : string" Usage="System.TimeZoneInfo.DaylightName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę wyświetlaną dla bieżącego czasu letniego strefy czasowej.</summary>
        <value>Nazwa wyświetlana czasu letniego strefy czasowej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nazwa wyświetlana jest zlokalizowana w oparciu o kulturę zainstalowaną z systemem operacyjnym Windows.  
  
 Właściwość, której wartość nie <xref:System.String.Empty?displayProperty=nameWithType> jest lub `null` niekoniecznie wskazuje, że strefa czasowa obsługuje czas letni. <xref:System.TimeZoneInfo.DaylightName%2A> Aby określić, czy strefa czasowa obsługuje czas letni, sprawdź wartość <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> właściwości.  
  
 W większości przypadków `DaylightName` Właściwość strefy czasowej zdefiniowanej przez system nie <xref:System.String.Empty?displayProperty=nameWithType> jest lub `null`. Jednak właściwość niestandardowych stref czasowych może być ustawiona na <xref:System.String.Empty?displayProperty=nameWithType>wartość. <xref:System.TimeZoneInfo.DaylightName%2A> Dzieje się tak, gdy niestandardowe strefy czasowe są <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> tworzone przez <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%2CSystem.String%2CSystem.TimeZoneInfo.AdjustmentRule%5B%5D%2CSystem.Boolean%29?displayProperty=nameWithType> lub przeciążenia, `disableDaylightSavingTime` a parametr `true`to. W związku z tym kod nie powinien zajmować się tym, <xref:System.TimeZoneInfo.DaylightName%2A> że wartość właściwości `null` nie jest ani pusta.  
  
 Właściwość jest równoważna <xref:System.TimeZone.DaylightName%2A> z właściwością <xref:System.TimeZone> klasy. <xref:System.TimeZoneInfo.DaylightName%2A>  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano metodę o `DisplayDateWithTimeZoneName` nazwie, która <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> używa metody, aby określić, czy ma być wyświetlana nazwa standardowego czasu lub czasu letniego strefy czasowej.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string" Usage="System.TimeZoneInfo.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera ogólną nazwę wyświetlaną, która reprezentuje strefę czasową.</summary>
        <value>Ogólna nazwa wyświetlana strefy czasowej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nazwa wyświetlana jest zlokalizowana w oparciu o kulturę zainstalowaną z systemem operacyjnym Windows.  
  
 Nazwy wyświetlane stref czasowych w strefach czasowych systemu Windows są zgodne ze standardowym formatem. Pierwsza część nazwy wyświetlanej jest bazowym przesunięciem strefy czasowej od skoordynowanego czasu uniwersalnego, który jest wskazywany przez akronim GMT (czas uniwersalny Greenwich), ujęty w nawiasy. W przypadku uniwersalnego czasu koordynowanego wartość GMT bez przesunięcia jest ujęta w nawiasy.  Następuje ciąg identyfikujący strefę czasową lub co najmniej jedno miasto, regiony lub kraje w strefie czasowej. Na przykład:  
  
```  
(GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
   
  
## Examples  
 Poniższy przykład pobiera <xref:System.TimeZoneInfo> obiekt, który reprezentuje lokalną strefę czasową i wyświetla jego nazwę wyświetlaną, nazwę standardowego czasu i nazwę czasu letniego. Dane wyjściowe są wyświetlane dla systemu w Stanach Zjednoczonych Standardowa strefa czasowa (pacyficzny).  
  
 [!code-csharp[System.TimeZone2.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]
 [!code-vb[System.TimeZone2.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Określa, czy <see cref="T:System.TimeZoneInfo" /> dwa obiekty są równe.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="timeZoneInfo.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="obj">Drugi obiekt do porównania z bieżącym obiektem.</param>
        <summary>Określa, czy bieżący <see cref="T:System.TimeZoneInfo" /> obiekt i inny obiekt są równe.</summary>
        <returns><see langword="true" />if <paramref name="obj" /> <see langword="false" />jest obiektem, który jest równy bieżącemu wystąpieniu; w przeciwnym razie. <see cref="T:System.TimeZoneInfo" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda konwertuje lub rzutuje `obj` <xref:System.TimeZoneInfo> na obiekt i porównuje go z bieżącym wystąpieniem. Test pod kątem równości jest oparty na porównaniu wartości. Bieżące <xref:System.TimeZoneInfo> wystąpienie i `obj` są uważane za równe w następujących warunkach:  
  
-   Typ `obj` czasu wykonywania to <xref:System.TimeZoneInfo>.  
  
-   Te dwa obiekty mają tę samą <xref:System.TimeZoneInfo.Id%2A> wartość właściwości.  
  
-   Te dwa obiekty mają te same reguły korekty.  
  
 Jeśli `obj` `false`jest `null`, ta metoda zwraca.  
  
   
  
## Examples  
 W poniższym przykładzie zastosowano <xref:System.TimeZoneInfo.Equals%28System.Object%29> metodę, aby określić, czy lokalna strefa czasowa jest czasu pacyficznego czy wschodnim.  
  
 [!code-csharp[System.TimeZoneInfo.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.equals/cs/equals1.cs#1)]
 [!code-vb[System.TimeZoneInfo.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (TimeZoneInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.TimeZoneInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.Equals(System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As TimeZoneInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(TimeZoneInfo ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : TimeZoneInfo -&gt; bool" Usage="timeZoneInfo.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="other">Drugi obiekt do porównania z bieżącym obiektem.</param>
        <summary>Określa, czy bieżący <see cref="T:System.TimeZoneInfo" /> obiekt i inny <see cref="T:System.TimeZoneInfo" /> obiekt są równe.</summary>
        <returns><see langword="true" />Jeśli dwa <see cref="T:System.TimeZoneInfo" /> obiekty są równe; <see langword="false" />w przeciwnym razie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Równość jest oparta na porównaniu wartości. Dwa <xref:System.TimeZoneInfo> obiekty są uważane za równe w następujących warunkach:  
  
-   Wartość ich <xref:System.TimeZoneInfo.Id%2A> właściwości jest taka sama.  
  
-   Mają one te same reguły korekty.  
  
 <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType>Zwraca wartość logiczną będącą wynikiem obliczenia następującego wyrażenia:  
  
 ```csharp 
 other.Id == this.Id && HasSameRules(other);  
 ```
  
 ```vb
 other.Id = me.Id AndAlso HasSameRules(other)  
 ```

 Jeśli parametr jest <xref:System.TimeZoneInfo> niezainicjowanym obiektem, Metoda ta zwraca wartość `false`. `other`  
  
   
  
## Examples  
 W poniższym przykładzie zastosowano <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29> metodę, aby określić, czy lokalna strefa czasowa jest czasu pacyficznego czy wschodnim.  
  
 [!code-csharp[System.TimeZone2.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#7)]
 [!code-vb[System.TimeZone2.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindSystemTimeZoneById">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo FindSystemTimeZoneById (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo FindSystemTimeZoneById(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindSystemTimeZoneById (id As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ FindSystemTimeZoneById(System::String ^ id);" />
      <MemberSignature Language="F#" Value="static member FindSystemTimeZoneById : string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.FindSystemTimeZoneById id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="id">Identyfikator strefy czasowej, który odpowiada <see cref="P:System.TimeZoneInfo.Id" /> właściwości.</param>
        <summary>Tworzy wystąpienie nowego <see cref="T:System.TimeZoneInfo" /> obiektu na podstawie jego identyfikatora.</summary>
        <returns>Obiekt, którego identyfikator jest wartością <paramref name="id" /> parametru.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parametr musi być dokładnie odpowiadający identyfikatorowi strefy czasowej, ale nie w przypadku, aby nastąpiło pomyślne dopasowanie, czyli `id` porównanie z identyfikatorami strefy czasowej nie uwzględnia wielkości liter. `id` Jeśli chcesz pobrać obiekty strefy czasowej w oparciu o częściowe dopasowania, możesz napisać niestandardowe procedury, które współpracują z kolekcją <xref:System.TimeZoneInfo> tylko do odczytu obiektów zwracanych <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> przez metodę.  
  
 W systemach Windows program `FindSystemTimeZoneById` próbuje dopasować `id` nazwy podklucza do gałęzi strefy HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time rejestru. W systemach Linux i macOS używa informacji o strefie czasowej dostępnych w [bibliotece ICU](http://userguide.icu-project.org/datetime/timezone). Jeśli rejestr lub biblioteka nie zawiera informacji dotyczących strefy czasowej, można utworzyć określoną strefę czasową przez wywołanie jednego z przeciążeń <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metody lub przez wywołanie <xref:System.TimeZoneInfo.FromSerializedString%2A> do deserializacji <xref:System.TimeZoneInfo> obiektu, który przedstawia wymaganą strefę czasową. Jednak strefy czasowe utworzone przez te wywołania metody nie są zdefiniowane przez system i nie można ich pobrać przy użyciu <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> metody. Do tych niestandardowych stref czasowych można uzyskać dostęp tylko za pomocą odwołania do obiektu <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> zwróconego przez wywołanie metody lub <xref:System.TimeZoneInfo.FromSerializedString%2A> .  
  
Ta metoda zwraca nowe <xref:System.TimeZoneInfo> wystąpienie dla każdego wywołania metody; nie zwraca obiektów w pamięci podręcznej. Może to mieć wpływ na wydajność aplikacji wywołujących `FindSystemTimeZoneById` metodę wielokrotnie z tym samym identyfikatorem.   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> metody do pobrania standardowej strefy czasowej Tokio. Ten <xref:System.TimeZoneInfo> obiekt jest następnie używany do przekonwertowania czasu lokalnego na godzinę w Tokio i do określenia, czy jest to godzina (czas standardowy).  
  
 [!code-csharp[System.TimeZone2.Conversions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]
 [!code-vb[System.TimeZone2.Conversions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">System nie ma wystarczającej ilości pamięci do przechowywania informacji o strefie czasowej.</exception>
        <exception cref="T:System.ArgumentNullException">Parametr ma wartość <see langword="null" />. <paramref name="id" /></exception>
        <exception cref="T:System.TimeZoneNotFoundException">Nie znaleziono identyfikatora strefy czasowej <paramref name="id" /> określonego przez. Oznacza to, że identyfikator strefy czasowej, której <paramref name="id" /> dopasowanie nazw nie istnieje, lub że identyfikator istnieje, ale nie zawiera żadnych danych strefy czasowej.</exception>
        <exception cref="T:System.Security.SecurityException">Proces nie ma uprawnień wymaganych do odczytu z klucza rejestru zawierającego informacje o strefie czasowej.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Znaleziono Identyfikator strefy czasowej, ale dane rejestru są uszkodzone.</exception>
        <altmember cref="P:System.TimeZoneInfo.Id" />
        <related type="Article" href="https://msdn.microsoft.com/library/8cb620e5-c6a6-4267-a52e-beeb73cd1a34">Instrukcje: Tworzenie wystąpienia obiektu TimeZoneInfo</related>
      </Docs>
    </Member>
    <Member MemberName="FromSerializedString">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo FromSerializedString (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo FromSerializedString(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.FromSerializedString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromSerializedString (source As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ FromSerializedString(System::String ^ source);" />
      <MemberSignature Language="F#" Value="static member FromSerializedString : string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.FromSerializedString source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg reprezentujący serializowany <see cref="T:System.TimeZoneInfo" /> obiekt.</param>
        <summary>Deserializacji ciągu, aby ponownie utworzyć oryginalny serializowany <see cref="T:System.TimeZoneInfo" /> obiekt.</summary>
        <returns>Oryginalny serializowany obiekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Istnieje alternatywa dla udostępniania wszystkich kodów wymaganych do utworzenia strefy czasowej, która nie została znaleziona w rejestrze w systemie Windows lub w [bibliotece ICU](http://userguide.icu-project.org/datetime/timezone) w systemach Linux i macOS. Można zdefiniować niestandardową strefę czasową, a <xref:System.TimeZoneInfo.ToSerializedString%2A> następnie użyć metody w autonomicznym pliku wykonywalnym lub użyć programu instalacyjnego aplikacji do zapisania strefy czasowej jako ciągu. Następnie aplikacja może pobrać ten ciąg z lokalizacji magazynu i utworzyć wystąpienie go przy użyciu <xref:System.TimeZoneInfo.FromSerializedString%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład próbuje pobrać strefę czasową Antarktyda/południe z systemu lokalnego. Jeśli to się nie powiedzie, kod próbuje pobrać informacje o strefie czasowej z pliku tekstowego w katalogu aplikacji. Jeśli ta próba nie powiedzie się, kod tworzy strefę czasową i zapisuje informacje o strefie czasowej w pliku tekstowym.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]
 [!code-vb[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Parametr ma wartość <see cref="F:System.String.Empty" />. <paramref name="source" /></exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> Parametr jest ciągiem o wartości null.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Nie można zdeserializować parametru source z powrotem do <see cref="T:System.TimeZoneInfo" /> obiektu.</exception>
        <altmember cref="M:System.TimeZoneInfo.ToSerializedString" />
        <related type="Article" href="https://msdn.microsoft.com/library/6b7b4de9-da07-47e3-8f4c-823f81798ee7">Instrukcje: Przywracanie stref czasowych z zasobu osadzonego</related>
      </Docs>
    </Member>
    <Member MemberName="GetAdjustmentRules">
      <MemberSignature Language="C#" Value="public TimeZoneInfo.AdjustmentRule[] GetAdjustmentRules ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.TimeZoneInfo/AdjustmentRule[] GetAdjustmentRules() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAdjustmentRules" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAdjustmentRules () As TimeZoneInfo.AdjustmentRule()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ GetAdjustmentRules();" />
      <MemberSignature Language="F#" Value="member this.GetAdjustmentRules : unit -&gt; TimeZoneInfo.AdjustmentRule[]" Usage="timeZoneInfo.GetAdjustmentRules " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo+AdjustmentRule[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera tablicę <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> obiektów, które mają zastosowanie do bieżącego <see cref="T:System.TimeZoneInfo" /> obiektu.</summary>
        <returns>Tablica obiektów dla tej strefy czasowej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda pobiera tablicę <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType>obiektów. <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> Każdy obiekt w tablicy definiuje obowiązującą datę początkową i końcową tego dostosowania strefy czasowej, a także jego Delta (dokładną ilość, przez którą korekta powoduje zmianę czasu). Dodatkowo dwie właściwości zwracają <xref:System.TimeZoneInfo.TransitionTime?displayProperty=nameWithType> obiekty, które definiują, kiedy odbywa się każde roczne przejście do i od czasu standardowego.  
  
 Jeśli strefa czasowa ma wiele reguł korekty, są one zwykle uporządkowane z najwcześniejszych (od indeksu 0) do najnowsze ( <xref:System.Array.Length%2A> przy indeksie-1).  
  
 Jeśli strefa czasowa nie ma reguł korygowania, <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> Metoda zwraca pustą tablicę (tablicę <xref:System.Array.Length%2A> , której wartość jest równa zero).  
  
 Wszelkie modyfikacje elementów tablicy zwracanej przez <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> metodę nie są uwzględniane w regułach dostosowania należących do określonej strefy czasowej. Aby zmodyfikować reguły korekty strefy czasowej (na przykład w celu odzwierciedlenia przejścia historycznego do i od czasu letniego), należy utworzyć nową strefę czasową z odpowiednimi regułami korekty zamiast modyfikować istniejące.  
  
   
  
## Examples  
 Poniższy przykład pobiera wszystkie strefy czasowe, które są zdefiniowane w systemie lokalnym i wyświetla pełne informacje o ich regułach dostosowania do konsoli programu.  
  
 [!code-csharp[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#3)]
 [!code-vb[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">System nie ma wystarczającej ilości pamięci, aby utworzyć kopię reguł korekty w pamięci.</exception>
        <altmember cref="T:System.TimeZoneInfo.AdjustmentRule" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAmbiguousTimeOffsets">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca informacje o możliwych datach i godzinach, do których można zamapować niejednoznaczną datę i godzinę.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAmbiguousTimeOffsets">
      <MemberSignature Language="C#" Value="public TimeSpan[] GetAmbiguousTimeOffsets (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan[] GetAmbiguousTimeOffsets(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeSpan&gt; ^ GetAmbiguousTimeOffsets(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.GetAmbiguousTimeOffsets : DateTime -&gt; TimeSpan[]" Usage="timeZoneInfo.GetAmbiguousTimeOffsets dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Data i godzina.</param>
        <summary>Zwraca informacje o możliwych datach i godzinach, do których można zamapować niejednoznaczną datę i godzinę.</summary>
        <returns>Tablica obiektów reprezentująca możliwe przesunięcia uniwersalnego czasu koordynowanego (UTC), do której można zamapować określoną datę i godzinę.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dokładne zachowanie tej metody zależy od relacji między <xref:System.DateTime.Kind%2A> właściwością <xref:System.TimeZoneInfo> a obiektem, jak pokazano w poniższej tabeli.  
  
|Typ obiektu TimeZoneInfo|Wartość właściwości Kind|Zachowanie|  
|------------------------------|-------------------------|--------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> lub <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Zwraca niejednoznaczne przesunięcia czasu `dateTime`dla.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Konwertuje `dateTime` na czas lokalny, a następnie zwraca niejednoznaczne przesunięcia czasu dla tego czasu.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|Dowolna wartość.|<xref:System.ArgumentException>Zgłasza.|  
|Wszystkie inne strefy czasowe.|<xref:System.DateTimeKind.Local> lub <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Konwertuje `dateTime` na określoną strefę czasową, a następnie określa, czy ten czas jest niejednoznaczny.|  
|Wszystkie inne strefy czasowe.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Określa, `dateTime` czy w określonej strefie czasowej jest niejednoznaczny.|  
  
 Kolejność <xref:System.TimeSpan> obiektów w tablicy zwracanej przez tę metodę jest niezdefiniowana. Można jednak określić, który element reprezentuje przesunięcie od czasu standardowego strefy czasowej, porównując jego wartość z <xref:System.TimeZoneInfo.BaseUtcOffset%2A> właściwością strefy czasowej. Aby zamapować niejednoznaczny czas na czas standardowy strefy czasowej, zobacz [How to: Rozwiązywanie niejednoznacznych czasów](~/docs/standard/datetime/resolve-ambiguous-times.md).  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano metodę o `ShowPossibleUtcTimes` nazwie, która <xref:System.TimeZoneInfo.GetAmbiguousTimeOffsets%28System.DateTime%29> używa metody, aby zamapować niejednoznaczny czas na jego możliwy czas koordynowany czas uniwersalny (UTC).  
  
 [!code-csharp[System.TimeZone2.GetAmbiguousTimeOffsets#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#1)]
 [!code-vb[System.TimeZone2.GetAmbiguousTimeOffsets#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#1)]  
  
 Metodę można następnie wywołać przy użyciu kodu, takiego jak:  
  
 [!code-csharp[System.TimeZone2.GetAmbiguousTimeOffsets#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#2)]
 [!code-vb[System.TimeZone2.GetAmbiguousTimeOffsets#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" />nie jest niejednoznaczny czas.</exception>
        <altmember cref="Overload:System.TimeZoneInfo.IsAmbiguousTime" />
        <related type="Article" href="https://msdn.microsoft.com/library/2cf5fb25-492c-4875-9245-98cac8348e97">Instrukcje: Rozwiązywanie niejednoznacznych czasów</related>
        <related type="Article" href="https://msdn.microsoft.com/library/bca874ee-5b68-4654-8bbd-3711220ef332">Instrukcje: Pozwalanie użytkownikom na rozwiązywanie niejednoznacznych czasów</related>
      </Docs>
    </Member>
    <Member MemberName="GetAmbiguousTimeOffsets">
      <MemberSignature Language="C#" Value="public TimeSpan[] GetAmbiguousTimeOffsets (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan[] GetAmbiguousTimeOffsets(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeSpan&gt; ^ GetAmbiguousTimeOffsets(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.GetAmbiguousTimeOffsets : DateTimeOffset -&gt; TimeSpan[]" Usage="timeZoneInfo.GetAmbiguousTimeOffsets dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Data i godzina.</param>
        <summary>Zwraca informacje o możliwych datach i godzinach, do których można zamapować niejednoznaczną datę i godzinę.</summary>
        <returns>Tablica obiektów reprezentująca możliwe przesunięcia uniwersalnego czasu koordynowanego (UTC), do której można zamapować określoną datę i godzinę.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dokładne zachowanie tej metody zależy od relacji między <xref:System.DateTimeOffset.Offset%2A> właściwością `dateTimeOffset` parametru a <xref:System.TimeZoneInfo> obiektem. Jeśli wartość <xref:System.DateTimeOffset.Offset%2A> właściwości odnosi się do możliwego przesunięcia czasu koordynowanego (UTC) dla tej daty i godziny, metoda zwraca możliwe przesunięcia. W przeciwnym razie jest `dateTimeOffset` konwertowana na czas w bieżącej strefie czasowej, a następnie zwraca możliwe przesunięcia tej daty i godziny.  
  
 Kolejność <xref:System.TimeSpan> obiektów w tablicy zwracanej przez tę metodę jest niezdefiniowana. Można jednak określić, który element reprezentuje przesunięcie od czasu standardowego strefy czasowej, porównując jego wartość z <xref:System.TimeZoneInfo.BaseUtcOffset%2A> właściwością strefy czasowej. Aby zamapować niejednoznaczny czas na czas standardowy strefy czasowej, zobacz [How to: Rozwiązywanie niejednoznacznych czasów](~/docs/standard/datetime/resolve-ambiguous-times.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTimeOffset" />nie jest niejednoznaczny czas.</exception>
        <altmember cref="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)" />
        <related type="Article" href="https://msdn.microsoft.com/library/2cf5fb25-492c-4875-9245-98cac8348e97">Instrukcje: Rozwiązywanie niejednoznacznych czasów</related>
        <related type="Article" href="https://msdn.microsoft.com/library/bca874ee-5b68-4654-8bbd-3711220ef332">Instrukcje: Pozwalanie użytkownikom na rozwiązywanie niejednoznacznych czasów</related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="timeZoneInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Służy jako funkcja skrótu dla algorytmów wyznaczania wartości skrótu i struktur danych, takich jak tabele skrótów.</summary>
        <returns>32-bitowa liczba całkowita ze znakiem, która służy jako kod skrótu <see cref="T:System.TimeZoneInfo" /> dla tego obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na <xref:System.TimeZoneInfo.GetHashCode%2A> temat metody, <xref:System.Object.GetHashCode%2A>Zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSystemTimeZones">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;TimeZoneInfo&gt; GetSystemTimeZones ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.TimeZoneInfo&gt; GetSystemTimeZones() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetSystemTimeZones" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSystemTimeZones () As ReadOnlyCollection(Of TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;TimeZoneInfo ^&gt; ^ GetSystemTimeZones();" />
      <MemberSignature Language="F#" Value="static member GetSystemTimeZones : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;TimeZoneInfo&gt;" Usage="System.TimeZoneInfo.GetSystemTimeZones " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>System.Security.SecurityTreatAsSafe</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.TimeZoneInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca posortowaną kolekcję wszystkich stref czasowych, o których informacje są dostępne w systemie lokalnym.</summary>
        <returns>Kolekcja <see cref="T:System.TimeZoneInfo" /> obiektów tylko do odczytu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda pobiera wszystkie dostępne informacje o strefie czasowej z podkluczy NT\CurrentVersion\Time strefy rejestru HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows w systemach Windows i z [biblioteki ICU](http://userguide.icu-project.org/datetime/timezone) w systemie Linux i <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> macOS. Jeśli nie można pomyślnie pobrać i przeanalizować wartości dla określonych właściwości ciągu pojedynczych <xref:System.TimeZoneInfo> obiektów, ta metoda ustawia ich wartość na pusty ciąg ("").  
  
> [!IMPORTANT]
>  <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> Metoda zwraca<xref:System.TimeZoneInfo> kolekcję obiektów tylko dla stref czasowych zdefiniowanych w bibliotece lub ICU. Nie obejmuje stref czasowych utworzonych przy użyciu przeciążenia <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metody. Są one dostępne tylko za pomocą odwołania do obiektu zwróconego przez metodę tworzenia strefy czasowej.  
  
 Kolekcja zwracana przez tę metodę jest posortowana według przesunięcia czasu UTC i dla stref czasowych, które mają takie samo przesunięcie czasu UTC, przy użyciu nazwy wyświetlanej z bieżącą kulturą. Informacje o wyświetlanej nazwie można znaleźć w <xref:System.TimeZoneInfo.DisplayName%2A>temacie.  
  
 C# `For Each…Next` `foreach` Obiekt zwrócony przez tę metodę <xref:System.Collections.Generic.IEnumerable%601> obsługuje interfejs, co oznacza, że można go powtórzyć przy użyciu instrukcji (in) lub (w Visual Basic). <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> Każda iteracja pętli zapewnia następny <xref:System.TimeZoneInfo> obiekt w kolekcji.  
  
 Kolekcja <xref:System.TimeZoneInfo> obiektów reprezentuje strefy czasowe zdefiniowane na komputerze lokalnym. nie jest to konieczne, aby uzyskać pełne informacje dla wszystkich stref czasowych we wszystkich okresach. Jeśli na komputerze lokalnym nie znaleziono stref czasowych, można utworzyć niestandardowe strefy czasowe przy użyciu przeciążenia <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metody. Aby uzyskać więcej informacji, zobacz [jak: Utwórz strefy czasowe bez reguł](~/docs/standard/datetime/create-time-zones-without-adjustment-rules.md) dostosowywania [i instrukcje: Utwórz strefy czasowe z regułami](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md)korekty.  
  
 Można również określić, czy poszczególne strefy czasowe są zdefiniowane na komputerze lokalnym, wywołując <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> metodę i dostarczając Identyfikator strefy czasowej, która ma być pobierana jako parametr.  
  
   
  
## Examples  
 Poniższy przykład pobiera kolekcję obiektów strefy czasowej, które reprezentują strefy czasowe zdefiniowane na komputerze i zapisuje informacje o nich w pliku tekstowym.  
  
 [!code-csharp[System.TimeZone2.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/getsystemtimezones1.cs#6)]
 [!code-vb[System.TimeZone2.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/getsystemtimezones1.vb#6)]
  [!code-powershell[System.TimeZone2.Class#6](~/samples/snippets/powershell/VS_Snippets_CLR_System/System.TimeZone2.Class/PS/Timezone2_Examples.ps1)]   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">Za mało pamięci, aby przechowywać wszystkie informacje o strefie czasowej.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma uprawnienia do odczytu z kluczy rejestru zawierających informacje o strefie czasowej.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUtcOffset">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Oblicza przesunięcie lub różnicę między czasem w tej strefie czasowej i uniwersalnym czasem koordynowanym (UTC) dla określonej daty i godziny.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan GetUtcOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetUtcOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.GetUtcOffset : DateTime -&gt; TimeSpan" Usage="timeZoneInfo.GetUtcOffset dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Data i godzina ustalenia przesunięcia.</param>
        <summary>Oblicza przesunięcie lub różnicę między czasem w tej strefie czasowej i uniwersalnym czasem koordynowanym (UTC) dla określonej daty i godziny.</summary>
        <returns>Obiekt, który wskazuje różnicę czasu między dwiema strefami czasowymi.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwrócony zakres czasu obejmuje wszelkie różnice wynikające z zastosowania reguł korekty do bieżącej strefy czasowej. Różni się od <xref:System.TimeZoneInfo.BaseUtcOffset%2A> właściwości, która zwraca różnicę między uniwersalnym czasem koordynowanym (UTC) i czasem standardowym czasu, w związku z czym nie przyjmuje reguł korekty do konta.  
  
 `dateTime` Jeśli Właściwość<xref:System.DateTime.Kind%2A> parametru nie odpowiada obiektowi strefy czasowej, ta metoda wykonuje wymaganą konwersję przed zwróceniem wyniku. Na przykład może się tak zdarzyć, jeśli <xref:System.DateTime.Kind%2A> właściwość jest <xref:System.DateTimeKind.Local?displayProperty=nameWithType> , ale obiekt strefy czasowej nie jest lokalną strefą czasową. Jeśli `dateTime` jest niejednoznaczna lub jeśli konwertowany czas jest niejednoznaczny, ta metoda interpretuje niejednoznaczny czas jako czas standardowy. Jeśli `dateTime` jest nieprawidłowa, ta metoda <xref:System.TimeSpan> zwraca obiekt, który odzwierciedla różnicę między czasem UTC a czasem standardowym strefy czasowej.  
  
 Metoda jest podobna <xref:System.TimeZone.GetUtcOffset%2A> do metody <xref:System.TimeZone> klasy. <xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29?displayProperty=nameWithType>  
  
   
  
## Examples  
 Poniższy przykład ilustruje użycie <xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29> metody z różnymi strefami czasowymi i z wartościami dat, które mają różne <xref:System.DateTime.Kind%2A> wartości właściwości.  
  
 [!code-csharp[System.TimeZone2.GetUtcOffset#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/cs/System.TimeZone2.GetUtcOffset.cs#1)]
 [!code-vb[System.TimeZone2.GetUtcOffset#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/vb/System.TimeZone2.GetUtcOffset.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeZoneInfo.BaseUtcOffset" />
      </Docs>
    </Member>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan GetUtcOffset (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetUtcOffset(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.GetUtcOffset : DateTimeOffset -&gt; TimeSpan" Usage="timeZoneInfo.GetUtcOffset dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Data i godzina ustalenia przesunięcia.</param>
        <summary>Oblicza przesunięcie lub różnicę między czasem w tej strefie czasowej i uniwersalnym czasem koordynowanym (UTC) dla określonej daty i godziny.</summary>
        <returns>Obiekt, który wskazuje różnicę czasu między uniwersalnym czasem koordynowanym (UTC) i bieżącą strefą czasową.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwrócony zakres czasu obejmuje wszelkie różnice wynikające z zastosowania reguł korekty do bieżącej strefy czasowej. Różni się od <xref:System.TimeZoneInfo.BaseUtcOffset%2A> właściwości, która zwraca różnicę między uniwersalnym czasem koordynowanym (UTC) i czasem standardowym czasu, w związku z czym nie przyjmuje reguł korekty do konta.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasSameRules">
      <MemberSignature Language="C#" Value="public bool HasSameRules (TimeZoneInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasSameRules(class System.TimeZoneInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.HasSameRules(System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasSameRules (other As TimeZoneInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasSameRules(TimeZoneInfo ^ other);" />
      <MemberSignature Language="F#" Value="member this.HasSameRules : TimeZoneInfo -&gt; bool" Usage="timeZoneInfo.HasSameRules other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="other">Drugi obiekt do porównania z bieżącym <see cref="T:System.TimeZoneInfo" /> obiektem.</param>
        <summary>Wskazuje, czy bieżący obiekt i inny <see cref="T:System.TimeZoneInfo" /> obiekt mają te same reguły korekty.</summary>
        <returns><see langword="true" />Jeśli dwie strefy czasowe mają identyczne reguły korekty i identyczne przesunięcie podstawowe; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podobnie jak <xref:System.TimeZoneInfo.HasSameRules%2A> <xref:System.TimeZoneInfo.BaseUtcOffset%2A> Metoda, Metoda wskazuje, czy dwie strefy czasowe mają takie samo przesunięcie podstawowe (zgodnie z definicją właściwości) i te same reguły korekty. <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> W przeciwieństwie <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> do metody <xref:System.TimeZoneInfo.HasSameRules%2A> , program nie porównuje identyfikatorów strefy czasowej (zgodnie <xref:System.TimeZoneInfo.Id%2A> z definicją właściwości).  
  
   
  
## Examples  
 Zazwyczaj wiele stref czasowych zdefiniowanych w rejestrze systemu Windows i [biblioteki ICU](http://userguide.icu-project.org/datetime/timezone) w systemie Linux i macOS mają takie samo przesunięcie od skoordynowanego czasu uniwersalnego (UTC) i te same reguły korekty. Poniższy przykład wyświetla listę tych stref czasowych w konsoli programu.  
  
 [!code-csharp[System.TimeZone2.HasSameRules#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/cs/HasSameRules.cs#1)]
 [!code-vb[System.TimeZone2.HasSameRules#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/vb/HasSameRules.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Parametr ma wartość <see langword="null" />. <paramref name="other" /></exception>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Id { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Id : string" Usage="System.TimeZoneInfo.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera identyfikator strefy czasowej.</summary>
        <value>Identyfikator strefy czasowej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikator strefy czasowej jest ciągiem klucza, który jednoznacznie identyfikuje konkretną strefę czasową. W systemach Windows odnosi się do podkluczy gałęzi strefy HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time rejestru w systemach Windows i z [biblioteki ICU](http://userguide.icu-project.org/datetime/timezone) w systemach Linux i macOS. Można go przesłać jako parametr do <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> metody w celu <xref:System.TimeZoneInfo> utworzenia wystąpienia obiektu, który reprezentuje określoną strefę czasową.  
  
> [!IMPORTANT]
>  Mimo że nazwa klucza w rejestrze systemu Windows może składać się z maksymalnie 255 znaków, zalecamy, aby identyfikator przypisany do niestandardowej strefy czasowej miał 32 znaków lub mniej. Im dłuższy identyfikator, tym większe prawdopodobieństwo, że podano nieprawidłową nazwę klucza podczas jego pobierania.  
  
 Wartość <xref:System.TimeZoneInfo.Id%2A> właściwości jest zwykle, ale nie zawsze, identyczna <xref:System.TimeZoneInfo.StandardName%2A> z właściwością. Identyfikator skoordynowanej uniwersalnej strefy czasowej to UTC.  
  
   
  
## Examples  
 Poniższy przykład zawiera listę identyfikatorów poszczególnych stref czasowych zdefiniowanych na komputerze lokalnym.  
  
 [!code-csharp[System.TimeZone2.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#5)]
 [!code-vb[System.TimeZone2.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsAmbiguousTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Określa, czy konkretna data i godzina w określonej strefie czasowej jest niejednoznaczna i może być mapowana na dwa lub więcej czasów skoordynowanego czasu uniwersalnego (UTC).</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsAmbiguousTime">
      <MemberSignature Language="C#" Value="public bool IsAmbiguousTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAmbiguousTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbiguousTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsAmbiguousTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsAmbiguousTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Wartość daty i godziny.</param>
        <summary>Określa, czy konkretna data i godzina w określonej strefie czasowej jest niejednoznaczna i może być mapowana na dwa lub więcej czasów skoordynowanego czasu uniwersalnego (UTC).</summary>
        <returns><see langword="true" />Jeśli parametr jest niejednoznaczny; w przeciwnym <see langword="false" />razie,. <paramref name="dateTime" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Niejednoznaczny czas w przedziale czasu dla bieżącej strefy czasowej. Oznacza to, że może to być czas standardowy lub czas, który jest wynikiem zastosowania reguły korekty. Zazwyczaj niejednoznaczny czas, gdy zegar jest ustawiony na powrót do czasu standardowego z czasu letniego. Zapoznaj się z sekcją przykładową.  
  
 Uniwersalny czas koordynowany (UTC) nie ma niejednoznacznych czasów; nie należy określać stref czasowych, które nie obsługują czasu letniego. W związku z tym te strefy czasowe nie mają reguł korygowania <xref:System.TimeZoneInfo.IsAmbiguousTime%2A> i wywołania metody `false`zawsze zwracają.  
  
 W przypadku stref czasowych, które obserwują czas letni, dokładne zachowanie tej metody zależy od relacji między <xref:System.DateTime.Kind%2A> właściwością <xref:System.TimeZoneInfo> a obiektem, jak pokazano w poniższej tabeli.  
  
|Typ obiektu TimeZoneInfo|Wartość właściwości Kind|Zachowanie|  
|------------------------------|-------------------------|--------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> lub <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Określa, `dateTime` czy parametr jest niejednoznaczny.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Konwertuje `dateTime` na czas lokalny, a następnie określa, czy ten czas jest niejednoznaczny.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType> lub <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Zwraca `false`wartość.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Jeśli `dateTime` jest niejednoznaczny, przyjmuje się, że jest to czas standardowy, konwertuje go na czas `false`UTC i zwraca.|  
|Wszystkie inne strefy czasowe.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> lub <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Konwertuje `dateTime` na godzinę w określonej strefie czasowej, a następnie określa, czy ten czas jest niejednoznaczny.|  
|Wszystkie inne strefy czasowe.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Określa, `dateTime` czy jest niejednoznaczny.|  
  
   
  
## Examples  
 W strefie czasowej pacyficznego czas letni upływa o godz. 2:00 rano 4 listopada 2007. Poniższy przykład przekazuje godzinę w interwałach jednej minuty od 12:59 rano od 4 listopada 2007 do 2:01 rano 4 listopada 2007 do <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29> metody <xref:System.TimeZoneInfo> obiektu, który reprezentuje strefę czasową pacyficznego. Dane wyjściowe konsoli wskazują, że wszystkie czasy z 1:00 rano od 4 listopada 2007 do 1:59 rano 4 listopada 2007 są niejednoznaczne.  
  
 [!code-csharp[System.TimeZone2.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#8)]
 [!code-vb[System.TimeZone2.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see cref="P:System.DateTime.Kind" /> Właściwość wartości<paramref name="dateTime" /> ma wartośći<paramref name="dateTime" /> jest nieprawidłowym czasem. <see cref="F:System.DateTimeKind.Local" /></exception>
        <altmember cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsAmbiguousTime">
      <MemberSignature Language="C#" Value="public bool IsAmbiguousTime (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAmbiguousTime(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbiguousTime(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.IsAmbiguousTime : DateTimeOffset -&gt; bool" Usage="timeZoneInfo.IsAmbiguousTime dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Data i godzina.</param>
        <summary>Określa, czy konkretna data i godzina w określonej strefie czasowej jest niejednoznaczna i może być mapowana na dwa lub więcej czasów skoordynowanego czasu uniwersalnego (UTC).</summary>
        <returns><see langword="true" />Jeśli parametr jest niejednoznaczny w bieżącej strefie czasowej; w przeciwnym <see langword="false" />razie,. <paramref name="dateTimeOffset" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Niejednoznaczny czas w przedziale czasu dla bieżącej strefy czasowej. Oznacza to, że może to być czas standardowy lub czas, który jest wynikiem zastosowania reguły korekty. Zazwyczaj niejednoznaczny czas, gdy zegar jest ustawiony na powrót do czasu standardowego z czasu letniego. Uniwersalny czas koordynowany (UTC) nie ma niejednoznacznych czasów; nie należy określać stref czasowych, które nie obsługują czasu letniego.  
  
 Precyzyjne zachowanie metody zależy od relacji między <xref:System.DateTimeOffset.Offset%2A> właściwością `dateTimeOffset` parametru a bieżącą strefą czasową. Jeśli wartość <xref:System.DateTimeOffset.Offset%2A> właściwości jest możliwym przesunięciem od UTC bieżącej strefy czasowej, Metoda określa, czy ta data i godzina są niejednoznaczne. W przeciwnym razie jest `dateTimeOffset` konwertowana na czas w bieżącej strefie czasowej, a następnie określa, czy ta data i godzina są niejednoznaczne.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsDaylightSavingTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wskazuje, czy określona data i godzina przypada w zakresie czasu letniego dla strefy czasowej bieżącego <see cref="T:System.TimeZoneInfo" /> obiektu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsDaylightSavingTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Wartość daty i godziny.</param>
        <summary>Wskazuje, czy określona data i godzina przypada w zakresie czasu letniego dla strefy czasowej bieżącego <see cref="T:System.TimeZoneInfo" /> obiektu.</summary>
        <returns><see langword="true" />Jeśli parametr jest czasem letnim; w przeciwnym razie, <see langword="false" />. <paramref name="dateTime" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W poniższej tabeli przedstawiono <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> relację między strefą czasową reprezentowaną <xref:System.TimeZoneInfo> przez obiekt `dateTime` i <xref:System.DateTime.Kind%2A> Właściwość parametru, która ma wpływ na wartość zwracaną.  
  
|Obiekt TimeZoneInfo|DateTime. Kind — właściwość|Wynik|  
|-------------------------|----------------------------|------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Local`|Określa, `dateTime` czy jest to czas letni.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Utc`|Konwertuje `dateTime` od uniwersalnego czasu koordynowanego (UTC) na czas lokalny i określa, czy jest to czas letni.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Unspecified`|Zakłada, `dateTime` że reprezentuje czas lokalny i określa, czy jest to czas letni.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|`DateTimeKind.Local`, `DateTimeKind.Unspecified`lub`DateTimeKind.Utc`|Returns `false` (UTC nie obsługuje czasu letniego).|  
|Każdy inny <xref:System.TimeZoneInfo> obiekt.|`DateTimeKind.Local`|Konwertuje czas lokalny do równoważnego czasu <xref:System.TimeZoneInfo> obiektu, a następnie określa, czy ten ostatni jest czas letni.|  
|Każdy inny <xref:System.TimeZoneInfo> obiekt.|`DateTimeKind.Utc`|Konwertuje czas UTC do czasu <xref:System.TimeZoneInfo> równoważnego obiektu, a następnie określa, czy okres ten jest czas letni.|  
|Każdy inny <xref:System.TimeZoneInfo> obiekt.|`DateTimeKind.Unspecified`|Określa, `dateTime` czy jest to czas letni.|  
  
 Jeśli strefa czasowa reprezentowana przez <xref:System.TimeZoneInfo> obiekt nie obsługuje czasu letniego, Metoda zawsze zwraca wartość. `false` Niektóre strefy czasowe, w tym <xref:System.TimeZoneInfo.Utc%2A>, nie obserwują czasu letniego.  Aby określić, czy strefa czasowa obsługuje czas letni, należy pobrać wartość jej <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> właściwości.  
  
 <xref:System.DateTime.Kind%2A> `dateTime` <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> <xref:System.DateTimeKind.Local?displayProperty=nameWithType> `false` Jeśli parametr określa niejednoznaczny czas w strefie czasowej bieżącego obiektu, Metoda interpretuje jako czas standardowy i zwraca, jeśli jego właściwość jest lub `dateTime` <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Jeśli właściwość jest <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, ta metoda wybierze poprawną niejednoznaczny czas i wskazuje, czy jest to czas letni. <xref:System.DateTime.Kind%2A>  
  
 Ponieważ metoda może zwracać `false` dane dla daty i godziny niejednoznaczne (czyli daty i godziny, które mogą reprezentować czas standardowy lub czas letni w określonej strefie <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29?displayProperty=nameWithType> czasowej), Metoda może być sparowana z <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29?displayProperty=nameWithType> <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> Metoda określająca, czy czas może być czasem letnim. Ponieważ niejednoznaczny czas to taki, który może być zarówno czasem letnim, jak i czasem standardowym <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29> , Metoda może być wywoływana w pierwszej kolejności, aby określić, czy data i godzina mogą należeć do czasu letniego. Jeśli metoda zwraca `false`metodę <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> , można <xref:System.DateTime> wywołać metodę, aby określić, czy wartość jest godziną czasu letniego. Poniższy przykład ilustruje tę technikę.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#2)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#2)]  
  
 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> <xref:System.ArgumentException> `false` <xref:System.DateTime.Kind%2A> `dateTime` Jeśli parametr określa nieprawidłowy czas, wywołanie metody zgłasza, czy wartość właściwości parametru jest; w przeciwnym razie metoda zwraca. `dateTime`  
  
 Wywołaj <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> metodę, aby określić, czy użyć <xref:System.TimeZoneInfo.StandardName%2A> wartości strefy czasowej, czy <xref:System.TimeZoneInfo.DaylightName%2A> jej wartości podczas wyświetlania nazwy strefy czasowej. Zapoznaj się z sekcją przykładową.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano metodę o `DisplayDateWithTimeZoneName` nazwie, która <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> używa metody, aby określić, czy ma być wyświetlana nazwa standardowego czasu lub czasu letniego strefy czasowej.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see cref="P:System.DateTime.Kind" /> Właściwość wartości<paramref name="dateTime" /> ma wartośći<paramref name="dateTime" /> jest nieprawidłowym czasem. <see cref="F:System.DateTimeKind.Local" /></exception>
        <altmember cref="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : DateTimeOffset -&gt; bool" Usage="timeZoneInfo.IsDaylightSavingTime dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Wartość daty i godziny.</param>
        <summary>Wskazuje, czy określona data i godzina przypada w zakresie czasu letniego dla strefy czasowej bieżącego <see cref="T:System.TimeZoneInfo" /> obiektu.</summary>
        <returns><see langword="true" />Jeśli parametr jest czasem letnim; w przeciwnym razie, <see langword="false" />. <paramref name="dateTimeOffset" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> Relacja między strefą czasową reprezentowane <xref:System.TimeZoneInfo> przez obiekt `dateTimeOffset` i <xref:System.DateTimeOffset.Offset%2A> Właściwość parametru ma wpływ na wartość zwracaną. Jeśli `dateTimeOffset` nie odpowiada bieżącemu przesunięciu strefy czasowej od uniwersalnego czasu koordynowanego (UTC), Metoda konwertuje ten czas na czas w bieżącej strefie czasowej. Następnie decyduje o tym, czy ta data i godzina są czasu letniego.  
  
 Jeśli strefa czasowa reprezentowana przez <xref:System.TimeZoneInfo> obiekt nie obsługuje czasu letniego, Metoda zawsze zwraca wartość. `false` Aby określić, czy strefa czasowa obsługuje czas letni, należy pobrać wartość jej <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      </Docs>
    </Member>
    <Member MemberName="IsInvalidTime">
      <MemberSignature Language="C#" Value="public bool IsInvalidTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsInvalidTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsInvalidTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsInvalidTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsInvalidTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Wartość daty i godziny.</param>
        <summary>Wskazuje, czy określona data i godzina są nieprawidłowe.</summary>
        <returns><see langword="true" />Jeśli <paramref name="dateTime" /> jest nieprawidłowa; <see langword="false" />w przeciwnym razie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nieprawidłowy czas przypada w przedziale czasu dla bieżącej strefy czasowej, której nie można zamapować na uniwersalny czas koordynowany (UTC) z powodu zastosowania reguły korekty. Zwykle, gdy czas zostanie przesunięty w przód do czasu letniego, wystąpią nieprawidłowe czasy. Zapoznaj się z sekcją przykładową.  
  
 Wartość <xref:System.DateTime.Kind%2A> `dateTime` właściwości `dateTime` parametru ma wpływ na to, czy reprezentuje nieprawidłowy czas, jak pokazano w poniższej tabeli.  
  
|DateTime. Kind — właściwość|Obiekt TimeZoneInfo (jeśli dotyczy)|Zachowanie|  
|----------------------------|-------------------------------------------|--------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|Określa, czy czas jest nieprawidłowy.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>lub nielokalna strefa czasowa.|Konwertuje `dateTime` na godzinę <xref:System.TimeZoneInfo> obiektu i zwraca `false`.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Nie dotyczy.|Przyjęto `dateTime` , że jest to <xref:System.TimeZoneInfo> godzina obiektu i określa, czy jest on nieprawidłowy.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Nie dotyczy.|Zwraca `false`wartość.|  
  
   
  
## Examples  
 W strefie czasowej pacyficznego czas letni rozpoczyna się o godz. 2:00 rano 2 kwietnia 2006. Następujący kod przekazuje godzinę w interwałach jednej minuty od 1:59 rano od 2 kwietnia 2006 do 3:01 rano 2 kwietnia 2006 do <xref:System.TimeZoneInfo.IsInvalidTime%2A> metody <xref:System.TimeZoneInfo> obiektu, który reprezentuje strefę czasową pacyficznego. Dane wyjściowe konsoli wskazują, że wszystkie czasy z 2:00 rano od 2 kwietnia 2006 do 2:59 rano 2 kwietnia 2006 są nieprawidłowe.  
  
 [!code-csharp[System.TimeZone2.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#9)]
 [!code-vb[System.TimeZone2.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.TimeZoneInfo.IsAmbiguousTime" />
      </Docs>
    </Member>
    <Member MemberName="Local">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo Local { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZoneInfo Local" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Local" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Local As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZoneInfo ^ Local { TimeZoneInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Local : TimeZoneInfo" Usage="System.TimeZoneInfo.Local" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.TimeZoneInfo" /> Pobiera obiekt, który reprezentuje lokalną strefę czasową.</summary>
        <value>Obiekt, który reprezentuje lokalną strefę czasową.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lokalna strefa czasowa jest strefą czasową na komputerze, na którym wykonywany jest kod.  
  
> [!IMPORTANT]
>  Należy zawsze uzyskać dostęp do lokalnej strefy czasowej przy <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> użyciu właściwości zamiast przypisywać lokalną strefę czasową <xref:System.TimeZoneInfo> do zmiennej obiektu. Zapobiega <xref:System.TimeZoneInfo> to unieważnieniu zmiennej obiektu przez wywołanie <xref:System.TimeZoneInfo.ClearCachedData%2A> metody.  
  
 W <xref:System.TimeZoneInfo> systemach Windows, obiekt zwrócony <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> przez właściwość odzwierciedla ustawienie pola wyboru **automatycznie Dopasuj zegar dla czasu letniego** w aplikacji **Data i godzina** w panelu sterowania. Jeśli pole wyboru nie jest zaznaczone, buforowana kopia lokalnej strefy czasowej nie zawiera informacji o czasie letnim. Oznacza to, że:  
  
-   <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> Metoda lokalnej strefy czasowej zwraca tablicę, której długość wynosi zero.  
  
-   <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> Właściwość lokalnej strefy czasowej zwraca wartość `false`.  
  
-   Lokalna strefa czasowa nie ma niejednoznacznych lub nieprawidłowych godzin ( <xref:System.TimeZoneInfo.IsAmbiguousTime%2A> wszystkie <xref:System.TimeZoneInfo.IsInvalidTime%2A> wywołania `false`lub Return).  
  
-   Wszystkie wywołania <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A> z pojedynczym czasem lokalnym zwracają wartość false.  
  
 Nie jest to jednak prawdziwe, jeśli odwołanie do lokalnej strefy czasowej jest pobierane za pomocą <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> metody.  
  
 Właściwość odpowiada <xref:System.TimeZone.CurrentTimeZone%2A> właściwości<xref:System.TimeZone> klasy. <xref:System.TimeZoneInfo.Local%2A>  
  
   
  
## Examples  
 Poniższy przykład pobiera <xref:System.TimeZoneInfo> obiekt, który reprezentuje lokalną strefę czasową i wyświetla jego nazwę wyświetlaną, nazwę standardowego czasu i nazwę czasu letniego.  
  
 [!code-csharp[System.TimeZone2.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]
 [!code-vb[System.TimeZone2.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/961fb70b-83f0-4dab-a042-cb5fcd817cf5">Instrukcje: Dostęp do wstępnie zdefiniowanych obiektów czasu UTC i lokalnej strefy czasowej</related>
      </Docs>
    </Member>
    <Member MemberName="StandardName">
      <MemberSignature Language="C#" Value="public string StandardName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StandardName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.StandardName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StandardName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StandardName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StandardName : string" Usage="System.TimeZoneInfo.StandardName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę wyświetlaną czasu standardowego dla strefy czasowej.</summary>
        <value>Nazwa wyświetlana czasu standardowego dla strefy czasowej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nazwa wyświetlana jest zlokalizowana w oparciu o kulturę zainstalowaną z systemem operacyjnym Windows.  
  
 Właściwość jest taka sama jak <xref:System.TimeZone.StandardName%2A> Właściwość <xref:System.TimeZone> klasy. <xref:System.TimeZoneInfo.StandardName%2A>  
  
 Jeśli język systemu operacyjnego jest w języku angielskim, wartość <xref:System.TimeZoneInfo.StandardName%2A> właściwości jest zwykle, ale nie zawsze, identyczna <xref:System.TimeZoneInfo.Id%2A> z właściwością.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano metodę o `DisplayDateWithTimeZoneName` nazwie, która <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> używa metody, aby określić, czy ma być wyświetlana nazwa standardowego czasu lub czasu letniego strefy czasowej.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool SupportsDaylightSavingTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsDaylightSavingTime" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SupportsDaylightSavingTime As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SupportsDaylightSavingTime { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportsDaylightSavingTime : bool" Usage="System.TimeZoneInfo.SupportsDaylightSavingTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy strefa czasowa ma jakiekolwiek reguły czasu letniego.</summary>
        <value><see langword="true" />Jeśli strefa czasowa obsługuje czas letni; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> właściwości lokalnej strefy czasowej zwracanej <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> przez właściwość odzwierciedla ustawienie pola wyboru **daty i godziny** w panelu sterowania, które określa, czy system automatycznie dostosowuje się do czasu letniego Oszczędność czasu. Jeśli nie jest zaznaczone, lub jeśli nie jest wyświetlane pole wyboru dla strefy czasowej, wartość tej właściwości to `false`.  
  
   
  
## Examples  
 Poniższy przykład pobiera kolekcję wszystkich stref czasowych, które są dostępne w systemie lokalnym i wyświetla nazwy tych, które nie obsługują czasu letniego.  
  
 [!code-csharp[System.TimeZone2.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#4)]
 [!code-vb[System.TimeZone2.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#4)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="sender">Obiekt, który zainicjował wywołanie zwrotne. Funkcje tego parametru nie są obecnie implementowane.</param>
        <summary>Uruchamia się po zakończeniu deserializacji obiektu.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Runtime.Serialization.SerializationException"><see cref="T:System.TimeZoneInfo" /> Obiekt zawiera nieprawidłowe lub uszkodzone dane.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo" /> Obiekt do wypełnienia danymi.</param>
        <param name="context">Miejsce docelowe dla tej serializacji (zobacz <see cref="T:System.Runtime.Serialization.StreamingContext" />).</param>
        <summary>Wypełnia obiekt danymi wymaganymi do serializacji bieżącego <see cref="T:System.TimeZoneInfo" /> obiektu. <see cref="T:System.Runtime.Serialization.SerializationInfo" /></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Parametr ma wartość <see langword="null" />. <paramref name="info" /></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego. Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</permission>
      </Docs>
    </Member>
    <Member MemberName="ToSerializedString">
      <MemberSignature Language="C#" Value="public string ToSerializedString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToSerializedString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ToSerializedString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToSerializedString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToSerializedString();" />
      <MemberSignature Language="F#" Value="member this.ToSerializedString : unit -&gt; string" Usage="timeZoneInfo.ToSerializedString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konwertuje bieżący <see cref="T:System.TimeZoneInfo" /> obiekt na serializowany ciąg.</summary>
        <returns>Ciąg, który reprezentuje bieżący <see cref="T:System.TimeZoneInfo" /> obiekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aplikacje, które opierają się na strefach czasowych, które nie są zwykle zdefiniowane w rejestrze systemów Windows lub [biblioteki ICU](http://userguide.icu-project.org/datetime/timezone) w systemie Linux i <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> macOScan mogą używać metody do tworzenia wystąpienia niezbędnych <xref:System.TimeZoneInfo> stref czasowych jako obiektów. Następnie aplikacja może wywołać metodę, <xref:System.TimeZoneInfo.ToSerializedString%2A> aby przekonwertować obiekt strefy czasowej na ciąg.  
  
 <xref:System.TimeZoneInfo> Obiekt powinien być również przechowywany w lokalizacji, w której aplikacja może ją pobrać, gdy jest to konieczne. Możliwe są następujące lokalizacje:  
  
-   Rejestr w systemach Windows.  
  
-   Plik zasobów aplikacji.  
  
-   Plik zewnętrzny, taki jak plik tekstowy.  
  
   
  
## Examples  
 Poniższy przykład próbuje pobrać strefę czasową Antarktyda/południe z systemu lokalnego. Jeśli to się nie powiedzie, kod próbuje pobrać informacje o strefie czasowej z pliku tekstowego w katalogu aplikacji. Jeśli ta próba nie powiedzie się, kod tworzy strefę czasową i zapisuje informacje o niej do pliku tekstowego.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]
 [!code-vb[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.FromSerializedString(System.String)" />
        <related type="Article" href="https://msdn.microsoft.com/library/3c96d83a-a057-4496-abb0-8f4b12712558">Instrukcje: Zapisywanie stref czasowych w zasobie osadzonym</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="timeZoneInfo.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca nazwę wyświetlaną bieżącego <see cref="T:System.TimeZoneInfo" /> obiektu.</summary>
        <returns>Wartość <see cref="P:System.TimeZoneInfo.DisplayName" /> właściwości bieżącego <see cref="T:System.TimeZoneInfo" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas przypisywania kolekcji <xref:System.TimeZoneInfo> zawierającej obiekty do kontrolki listy, takiej <xref:System.Windows.Forms.ListBox> jak kontrolka, formant automatycznie wywołuje <xref:System.TimeZoneInfo.ToString%2A> metodę, aby wyodrębnić ciąg opisujący każdy obiekt, który ma być reprezentowany na liście. W związku z tym nie trzeba przechowywać zrozumiałego opisu obiektu jako ciągu, a użytkownik nie musi używać tego ciągu, aby wyodrębnić obiekt z kolekcji. Zobacz [How to: Aby uzyskać więcej informacji, należy wyliczyć strefy czasowe znajdujące się na komputerze](~/docs/standard/datetime/enumerate-time-zones.md) .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Utc">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo Utc { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZoneInfo Utc" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Utc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Utc As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZoneInfo ^ Utc { TimeZoneInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Utc : TimeZoneInfo" Usage="System.TimeZoneInfo.Utc" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.TimeZoneInfo" /> Pobiera obiekt, który reprezentuje strefę uniwersalnego czasu koordynowanego (UTC).</summary>
        <value>Obiekt, który reprezentuje strefę uniwersalnego czasu koordynowanego (UTC).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest to wbudowany obiekt; Informacje o tym <xref:System.TimeZoneInfo> obiekcie nie są pobierane z rejestru w systemach Windows i z [biblioteki ICU](http://userguide.icu-project.org/datetime/timezone) w systemach Linux i macOS.  
  
> [!IMPORTANT]
>  Należy zawsze uzyskać dostęp do strefy uniwersalnego czasu koordynowanego (UTC) <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType> za pomocą właściwości zamiast przypisywać strefy czasowej UTC <xref:System.TimeZoneInfo> do zmiennej obiektu. Zapobiega <xref:System.TimeZoneInfo> to unieważnieniu zmiennej obiektu przez wywołanie <xref:System.TimeZoneInfo.ClearCachedData%2A> metody.  
  
 Uniwersalny czas koordynowany był wcześniej znany jako czas uniwersalny Greenwich (GMT).  
  
   
  
## Examples  
 Poniższy przykład pobiera <xref:System.TimeZoneInfo> obiekt, który reprezentuje uniwersalny czas koordynowany (UTC) i wyświetla jego nazwę wyświetlaną, nazwę standardowego czasu i nazwę czasu letniego.  
  
 [!code-csharp[System.TimeZone2.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#3)]
 [!code-vb[System.TimeZone2.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/961fb70b-83f0-4dab-a042-cb5fcd817cf5">Instrukcje: Dostęp do wstępnie zdefiniowanych obiektów czasu UTC i lokalnej strefy czasowej</related>
      </Docs>
    </Member>
  </Members>
</Type>
