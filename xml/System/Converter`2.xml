<Type Name="Converter&lt;TInput,TOutput&gt;" FullName="System.Converter&lt;TInput,TOutput&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6c486d9a1d2afe59066e7eda99f6d4d931267f7b" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69406699" /></Metadata><TypeSignature Language="C#" Value="public delegate TOutput Converter&lt;in TInput,out TOutput&gt;(TInput input);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Converter`2&lt;- TInput, + TOutput&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Converter`2" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Converter(Of In TInput, Out TOutput)(input As TInput) As TOutput " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TInput, typename TOutput&gt;&#xA;public delegate TOutput Converter(TInput input);" />
  <TypeSignature Language="F#" Value="type Converter&lt;'Input, 'Output&gt; = delegate of 'Input -&gt; 'Output" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TInput">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TOutput">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="input" Type="TInput" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TOutput</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="TInput">Typ obiektu, który ma zostać przekonwertowany.</typeparam>
    <typeparam name="TOutput">Typ, do którego ma zostać przekonwertowany obiekt wejściowy.</typeparam>
    <param name="input">Obiekt do przekonwertowania.</param>
    <summary>Reprezentuje metodę, która konwertuje obiekt z jednego typu na inny typ.</summary>
    <returns><typeparamref name="TOutput" /> Reprezentuje przekonwertowane. <typeparamref name="TInput" /></returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten delegat jest używany <xref:System.Array.ConvertAll%2A> przez metodę <xref:System.Array> klasy <xref:System.Collections.Generic.List%601> i <xref:System.Collections.Generic.List`1.ConvertAll*> metodę klasy do konwersji każdego elementu kolekcji z jednego typu na drugi.  
  
   
  
## Examples  
 Ten rozdział zawiera dwa przykłady kodu. Pierwszy <xref:System.Converter%602> demonstruje delegata <xref:System.Array> <xref:System.Array.ConvertAll%2A> przy użyciu metody klasy, <xref:System.Collections.Generic.List`1.ConvertAll*> a drugi <xref:System.Collections.Generic.List%601> ilustruje delegata metody klasy generycznej.  
  
 Przykład 1  
  
 Poniższy przykład kodu definiuje metodę o nazwie `PointFToPoint` , która <xref:System.Drawing.PointF> konwertuje strukturę na <xref:System.Drawing.Point> strukturę. <xref:System.Drawing.PointF> Przykład tworzy tablicę struktur,`Converter(Of PointF, Point)` `Converter<PointF, Point>` tworzy delegata (w Visual Basic) do reprezentowania `PointFToPoint` metody i przekazuje delegata do <xref:System.Array.ConvertAll%2A> metody. Metoda przekazuje każdy element listy wejściowej `PointFToPoint` do metody i umieszcza przekonwertowane elementy <xref:System.Drawing.Point> do nowej listy struktur. <xref:System.Array.ConvertAll%2A> Wyświetlane są obie listy.  
  
 [!code-cpp[Array_ConvertAll#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_ConvertAll/cpp/source.cpp#1)]
 [!code-csharp[Array_ConvertAll#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_ConvertAll/cs/source.cs#1)]
 [!code-vb[Array_ConvertAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_ConvertAll/vb/source.vb#1)]  
  
 Przykład 2  
  
 Poniższy przykład kodu definiuje metodę o nazwie `PointFToPoint` , która <xref:System.Drawing.PointF> konwertuje strukturę na <xref:System.Drawing.Point> strukturę. <xref:System.Collections.Generic.List%601> Następnie przykład tworzy <xref:System.Drawing.PointF> struktury, tworzy `Converter\<PointF, Point>` delegata`Converter(Of PointF, Point)` (w Visual Basic) <xref:System.Collections.Generic.List`1.ConvertAll*> do reprezentowania metodyiprzekazujedelegatadometody.`PointFToPoint` Metoda przekazuje każdy element listy wejściowej `PointFToPoint` do metody i umieszcza przekonwertowane elementy <xref:System.Drawing.Point> do nowej listy struktur. <xref:System.Collections.Generic.List`1.ConvertAll*> Wyświetlane są obie listy.  
  
 [!code-cpp[List\`1_ConvertAll#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_ConvertAll/cpp/source.cpp#1)]
 [!code-csharp[List\`1_ConvertAll#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_ConvertAll/cs/source.cs#1)]
 [!code-vb[List\`1_ConvertAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_ConvertAll/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>
