<Type Name="Span&lt;T&gt;+Enumerator" FullName="System.Span&lt;T&gt;+Enumerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="37231be40b4f33690f93e784db62f3e6103caa70" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36428449" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct Span&lt;T&gt;.Enumerator" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi sealed beforefieldinit Span`1/Enumerator&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Span`1.Enumerator" />
  <TypeSignature Language="VB.NET" Value="Public Structure Span(Of T).Enumerator" />
  <TypeSignature Language="C++ CLI" Value="public: value class Span&lt;T&gt;::Enumerator" />
  <TypeSignature Language="F#" Value="type Span&lt;'T&gt;.Enumerator = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Udostępnia moduł wyliczający dla elementów <see cref="T:System.Span`1" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

C# [foreach](~/docs/csharp/language-reference/keywords/foreach-in.md) języka C# i [For Each... Następny](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) konstrukcja w języku Visual Basic ukrywa złożoność wyliczenia. Zamiast bezpośrednie manipulowanie modułu wyliczającego, za pomocą `foreach` lub `For Each...Next` jest zalecane. 

Początkowo moduł wyliczający jest umieszczony przed pierwszym elementem w <xref:System.Span%601>. W tym miejscu <xref:System.Span%601.Enumerator.Current> jest niezdefiniowana. Należy wywołać <xref:System.Span%601.Enumerator.MoveNext%2A> przesuwających modułu wyliczającego do pierwszego elementu w <xref:System.Span%601> przed odczytywania wartości <xref:System.Span%601.Enumerator.Current>.

<xref:System.Span%601.Enumerator.Current> zwraca tę samą wartość, dopóki <xref:System.Span%601.Enumerator.MoveNext%2A> jest wywoływana. <xref:System.Span%601.Enumerator.MoveNext%2A> Ustawia <xref:System.Span%601.Enumerator.Current> do następnego elementu <xref:System.Span%601>.

Jeśli <xref:System.Span%601.Enumerator.MoveNext%2A> przekazuje koniec <xref:System.Span%601>, <xref:System.Span%601.Enumerator.MoveNext%2A> zwraca `false`. Gdy moduł wyliczający jest w tym stanu, kolejne wywołania <xref:System.Span%601.Enumerator.MoveNext%2A> zwracają również `false` i <xref:System.Span%601.Enumerator.Current> jest niezdefiniowana. Nie można ustawić <xref:System.Span%601.Enumerator.Current> do pierwszego elementu w <xref:System.Span%601> ponownie; zamiast tego należy utworzyć nowe wystąpienie modułu wyliczającego. 

Moduł wyliczający nie ma wyłączny dostęp do <xref:System.Span%601>. Ponadto można także modyfikować danych, na której oparto zakresu. W związku z tym wyliczania zakres leżą nie jest bezpieczne wątkowo procedurą. W celu zagwarantowania bezpieczeństwa wątków podczas wyliczania, musi implementować własne synchronizacji. Na przykład następujący kod ma wyścigu. Nie zapewnia, że zakres zostaną wyliczone przed `ClearContents` metoda jest wykonywana. W związku z tym tablica bazowa zostanie wyczyszczona podczas wyliczania zakresu:

[!code-csharp[System.Span<T>.Enumerator-no-synchronization](~/samples/snippets/csharp/api/system/span.enumerator/nosync/program.cs)]

Po zsynchronizowaniu dostęp do tablicy przed wyliczania zakresu, jako wersja poprawione `EnumerateSpan` metody, jak w poniższym przykładzie `ClearContents` — metoda nie modyfikuje bazowy zakresu danych podczas wyliczania. Należy pamiętać, że przykładzie blokuje tablica bazowa, na której oparto zakresu.  

[!code-csharp[System.Span<T>.Enumerator-no-synchronization](~/samples/snippets/csharp/api/system/span.enumerator/sync/program.cs#1)]

W przeciwieństwie do niektórych struktur modułu wyliczającego w .NET <xref:System.Span%601.Enumerator>:

- Nie implementuje <xref:System.Collections.IEnumerator> lub <xref:System.Collections.Generic.IEnumerator%601> interfejsu. Jest to spowodowane <xref:System.Span%601.Enumerator> jest [ref struct](~/docs/csharp/reference-semantics-with-value-types.md#ref-struct-type).

- Nie ma `Reset` metodę, którą można ustawić modułu wyliczającego do pozycji początkowej przed pierwszym elementem w zakresie. ( <xref:System.Collections.IEnumerator.Reset?displayProperty=nameWithType> Metoda musi zostać wdrożona jako część interfejsu, ale większość implementors zgłoszą wyjątek lub nie implementacji.) 
 
      ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public T Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Current" />
      <MemberSignature Language="DocId" Value="P:System.Span`1.Enumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T % Current { T % get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : " Usage="System.Span&lt;'T&gt;.Enumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera odwołanie do elementu w bieżącym położeniu modułu wyliczającego.</summary>
        <value>Element w <see cref="T:System.Span`1" /> w bieżącym położeniu modułu wyliczającego.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

`Current` jest niezdefiniowana w jeden z następujących warunków: 

- Natychmiast po utworzeniu modułu wyliczającego moduł wyliczający jest umieszczony przed pierwszym elementem w zakresie. <xref:System.Span%601.Enumerator.MoveNext%2A> musi zostać wywołana można poprawić modułu wyliczającego pierwszy element zakresu przed odczytywania wartości `Current`.

- Ostatnie wywołanie <xref:System.Span%601.Enumerator.MoveNext%2A> zwrócił `false`, co oznacza koniec zakresu. 

`Current` zwraca tę samą wartość, dopóki <xref:System.Span%601.Enumerator.MoveNext%2A> jest wywoływana. <xref:System.Span%601.Enumerator.MoveNext%2A> Ustawia `Current` do następnego elementu w zakresie. 

      ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.Enumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext();" />
      <MemberSignature Language="F#" Value="member this.MoveNext : unit -&gt; bool" Usage="enumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Przechodzi do następnego elementu modułu wyliczającego <see cref="System.Span`1" />.</summary>
        <returns>"true", jeśli moduł wyliczający pomyślnie poprawionym do następnego elementu; 'false', jeśli został przekazany koniec zakresu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

Po utworzeniu moduł wyliczający jest umieszczony przed pierwszym elementem w zakresu i w pierwszym wywołaniu `MoveNext` przechodzi do pierwszego elementu w zakresie modułu wyliczającego. 

Jeśli `MoveNext` przekazuje na końcu zakresu, `MoveNext` zwraca `false`. Gdy moduł wyliczający jest w tym stanu, kolejne wywołania `MoveNext` zwracają również `false`.

         ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>