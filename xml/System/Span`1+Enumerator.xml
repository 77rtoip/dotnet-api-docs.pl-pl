<Type Name="Span&lt;T&gt;+Enumerator" FullName="System.Span&lt;T&gt;+Enumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="64019a0bc2c6d6b1be50b25ae1e23d0c77f56002" /><Meta Name="ms.sourcegitcommit" Value="cb4d218ffd5a459a5f921fe1d945c682d1e09aca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/16/2019" /><Meta Name="ms.locfileid" Value="69541099" /></Metadata><TypeSignature Language="C#" Value="public struct Span&lt;T&gt;.Enumerator" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi sealed beforefieldinit Span`1/Enumerator&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Span`1.Enumerator" />
  <TypeSignature Language="VB.NET" Value="Public Structure Span(Of T).Enumerator" />
  <TypeSignature Language="C++ CLI" Value="public: value class Span&lt;T&gt;::Enumerator" />
  <TypeSignature Language="F#" Value="type Span&lt;'T&gt;.Enumerator = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1">
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Dostarcza moduł wyliczający dla elementów <see cref="T:System.Span`1" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

C# Instrukcja [foreach](~/docs/csharp/language-reference/keywords/foreach-in.md) C# języka i [dla każdego... Następna](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) konstrukcja w Visual Basic ukrywa złożoność modułów wyliczających. Zamiast bezpośrednio manipulowania modułem wyliczania, `foreach` należy `For Each...Next` użyć lub jest zalecane. 

Początkowo moduł wyliczający jest umieszczony przed pierwszym elementem w <xref:System.Span%601>. W tym miejscu <xref:System.Span%601.Enumerator.Current> nie jest zdefiniowane. Przed odczytaniem wartości parametru należy wywołać metodę <xref:System.Span%601.Enumerator.MoveNext%2A> przechodzenia do poziomu modułu wyliczającego do pierwszego elementu welemencie.<xref:System.Span%601.Enumerator.Current> <xref:System.Span%601>

<xref:System.Span%601.Enumerator.Current>zwraca tę samą wartość, <xref:System.Span%601.Enumerator.MoveNext%2A> dopóki nie zostanie wywołana. <xref:System.Span%601.Enumerator.MoveNext%2A>ustawia <xref:System.Span%601.Enumerator.Current> następną pozycję <xref:System.Span%601>w.

Jeśli <xref:System.Span%601.Enumerator.MoveNext%2A> kończy koniec <xref:System.Span%601>, <xref:System.Span%601.Enumerator.MoveNext%2A> zwraca. `false` Gdy moduł wyliczający jest w tym stanie, kolejne wywołania <xref:System.Span%601.Enumerator.MoveNext%2A> również zwracają `false` i <xref:System.Span%601.Enumerator.Current> są niezdefiniowane. Nie można ustawić <xref:System.Span%601.Enumerator.Current> jako pierwszego elementu w tym <xref:System.Span%601> przypadku, należy zamiast tego utworzyć nowe wystąpienie modułu wyliczającego. 

Moduł wyliczający nie ma wyłącznego dostępu do <xref:System.Span%601>. Dodatkowo można również modyfikować dane bazowe, na których oparto zakres. W związku z tym wyliczanie przez zakres nie jest w sposób wewnętrzny bezpieczny dla wątków. Aby zagwarantować bezpieczeństwo wątków podczas wyliczania, należy zaimplementować własną synchronizację. Na przykład poniższy kod ma sytuację wyścigu. Nie gwarantuje to, że zakres zostanie wyliczony przed wykonaniem `ClearContents` metody. W efekcie tablica bazowa jest czyszczona podczas wyliczania zakresu:

[!code-csharp[System.Span<T>.Enumerator-no-synchronization](~/samples/snippets/csharp/api/system/span.enumerator/nosync/program.cs)]

Jeśli synchronizujesz dostęp do tablicy przed wyliczeniem zakresu, ponieważ poprawiona wersja `EnumerateSpan` metody w poniższym przykładzie `ClearContents` Metoda nie modyfikuje danych bazowego zakresu podczas wyliczania. Należy zauważyć, że przykład blokuje tablicę bazową, na której bazuje zakres.  

[!code-csharp[System.Span<T>.Enumerator-no-synchronization](~/samples/snippets/csharp/api/system/span.enumerator/sync/program.cs#1)]

W przeciwieństwie do innych struktur modułu wyliczającego <xref:System.Span%601.Enumerator>w programie .NET:

- Nie implementuje <xref:System.Collections.IEnumerator> interfejsu lub <xref:System.Collections.Generic.IEnumerator%601> . Jest to spowodowane <xref:System.Span%601.Enumerator> tym, że jest [strukturą ref](~/docs/csharp/reference-semantics-with-value-types.md#ref-struct-type).

- Nie zawiera `Reset` metody, która może ustawić moduł wyliczający na jego początkową pozycję przed pierwszym elementem w zakresie. <xref:System.Collections.IEnumerator.Reset?displayProperty=nameWithType> (Metoda musi być zaimplementowana jako część interfejsu, ale większość realizatorów zgłasza wyjątek lub nie zapewnia implementacji). 
 
]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public T Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Current" />
      <MemberSignature Language="DocId" Value="P:System.Span`1.Enumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T % Current { T % get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : " Usage="System.Span&lt;'T&gt;.Enumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera odwołanie do elementu w bieżącej pozycji modułu wyliczającego.</summary>
        <value>Element w <see cref="T:System.Span`1" /> bieżącej pozycji modułu wyliczającego.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

`Current`nie jest zdefiniowany w żadnym z następujących warunków: 

- Natychmiast po utworzeniu modułu wyliczającego moduł wyliczający jest umieszczony przed pierwszym elementem w zakresie. <xref:System.Span%601.Enumerator.MoveNext%2A>musi zostać wywołana, aby przemieścić moduł wyliczający do pierwszego elementu zakresu przed odczytem wartości `Current`.

- Ostatnie wywołanie <xref:System.Span%601.Enumerator.MoveNext%2A> zwrócone `false`, które wskazuje koniec zakresu. 

`Current`zwraca tę samą wartość, <xref:System.Span%601.Enumerator.MoveNext%2A> dopóki nie zostanie wywołana. <xref:System.Span%601.Enumerator.MoveNext%2A>ustawia `Current` następną pozycję w zakresie. 

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.Enumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext();" />
      <MemberSignature Language="F#" Value="member this.MoveNext : unit -&gt; bool" Usage="enumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Przesuwa moduł wyliczający do następnego elementu <see cref="T:System.Span`1" />.</summary>
        <returns><see langword="true" />Jeśli moduł wyliczający został pomyślnie zaawansowani do następnego elementu; <see langword="false" /> Jeśli koniec zakresu został zakończony.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

Po utworzeniu modułu wyliczającego jest on umieszczany przed pierwszym elementem w zakresie, a pierwsze wywołanie `MoveNext` postępuje do pierwszego elementu w zakresie. 

Jeśli `MoveNext` kończy koniec zakresu, `MoveNext` zwraca `false`. Gdy moduł wyliczający jest w tym stanie, kolejne wywołania `MoveNext` również zwracają `false`.

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
