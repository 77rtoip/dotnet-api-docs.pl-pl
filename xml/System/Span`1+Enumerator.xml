<Type Name="Span&lt;T&gt;+Enumerator" FullName="System.Span&lt;T&gt;+Enumerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e90483d241225b985aed34e0fb22f99e9d98fb97" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52230022" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct Span&lt;T&gt;.Enumerator" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi sealed beforefieldinit Span`1/Enumerator&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Span`1.Enumerator" />
  <TypeSignature Language="VB.NET" Value="Public Structure Span(Of T).Enumerator" />
  <TypeSignature Language="C++ CLI" Value="public: value class Span&lt;T&gt;::Enumerator" />
  <TypeSignature Language="F#" Value="type Span&lt;'T&gt;.Enumerator = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2">
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Dostarcza moduł wyliczający dla elementów <see cref="T:System.Span`1" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

C# [foreach](~/docs/csharp/language-reference/keywords/foreach-in.md) języka C# i [For Each... Następny](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) konstrukcja w języku Visual Basic powoduje ukrycie złożoności modułów wyliczających. Zamiast bezpośredniego wykonywania operacji modułu wyliczającego, za pomocą `foreach` lub `For Each...Next` jest zalecane. 

Początkowo moduł wyliczający jest umieszczony przed pierwszym elementem w <xref:System.Span%601>. W tym miejscu <xref:System.Span%601.Enumerator.Current> jest niezdefiniowana. Należy wywołać <xref:System.Span%601.Enumerator.MoveNext%2A> do wyprzedzeniem modułu wyliczającego do pierwszego elementu w <xref:System.Span%601> przed odczytaniem wartości właściwości <xref:System.Span%601.Enumerator.Current>.

<xref:System.Span%601.Enumerator.Current> zwraca taką samą wartość, dopóki <xref:System.Span%601.Enumerator.MoveNext%2A> jest wywoływana. <xref:System.Span%601.Enumerator.MoveNext%2A> Ustawia <xref:System.Span%601.Enumerator.Current> do następnego elementu w <xref:System.Span%601>.

Jeśli <xref:System.Span%601.Enumerator.MoveNext%2A> przekazuje koniec <xref:System.Span%601>, <xref:System.Span%601.Enumerator.MoveNext%2A> zwraca `false`. Gdy moduł wyliczający jest w tym stanie, kolejne wywołania <xref:System.Span%601.Enumerator.MoveNext%2A> również zwracać `false` i <xref:System.Span%601.Enumerator.Current> jest niezdefiniowana. Nie można ustawić <xref:System.Span%601.Enumerator.Current> do pierwszego elementu w <xref:System.Span%601> ponownie; zamiast tego należy utworzyć nowe wystąpienie modułu wyliczającego. 

Moduł wyliczający nie ma wyłącznego dostępu do <xref:System.Span%601>. Ponadto można także modyfikować danych bazowych, na którym opiera się zakres. W związku z tym wyliczanie zakres nie jest wewnętrznie procedurą odporną. Aby zagwarantować bezpieczeństwo wątków podczas wyliczania, należy zaimplementować własny mechanizm synchronizacji. Na przykład poniższy kod zawiera sytuacji wyścigu. Nie zapewnia, że zakres zostaną wyliczone przed `ClearContents` metoda jest wykonywana. W rezultacie tablica bazowa zostanie wyczyszczona podczas wyliczania zakresu:

[!code-csharp[System.Span<T>.Enumerator-no-synchronization](~/samples/snippets/csharp/api/system/span.enumerator/nosync/program.cs)]

Jeśli dostęp do tablicy przed wyliczanie zasięg, jako poprawioną wersję `EnumerateSpan` metody, jak w poniższym przykładzie `ClearContents` metody nie modyfikuje zakresu danych bazowych podczas wyliczania. Należy zauważyć, że przykład blokuje tablica bazowa, na którym opiera się zakres.  

[!code-csharp[System.Span<T>.Enumerator-no-synchronization](~/samples/snippets/csharp/api/system/span.enumerator/sync/program.cs#1)]

W odróżnieniu od niektórych innych struktur moduł wyliczający na platformie .NET <xref:System.Span%601.Enumerator>:

- Nie implementuje <xref:System.Collections.IEnumerator> lub <xref:System.Collections.Generic.IEnumerator%601> interfejsu. Jest to spowodowane <xref:System.Span%601.Enumerator> jest [ref struct](~/docs/csharp/reference-semantics-with-value-types.md#ref-struct-type).

- Nie obejmuje `Reset` metody, które można ustawić modułu wyliczającego początkową przed pierwszym elementem w zakresie. ( <xref:System.Collections.IEnumerator.Reset?displayProperty=nameWithType> Metoda musi zostać wdrożony jako część interfejsu, ale większość implementors zgłoszą wyjątek lub nie implementacji.) 
 
      ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public T Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Current" />
      <MemberSignature Language="DocId" Value="P:System.Span`1.Enumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T % Current { T % get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : " Usage="System.Span&lt;'T&gt;.Enumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera odwołanie do elementu w bieżącym położeniu modułu wyliczającego.</summary>
        <value>Element w <see cref="T:System.Span`1" /> w bieżącym położeniu modułu wyliczającego.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

`Current` jest niezdefiniowana w ramach jednej z następujących warunków: 

- Natychmiast, po utworzeniu modułu wyliczającego moduł wyliczający jest umieszczony przed pierwszym elementem w zakresie. <xref:System.Span%601.Enumerator.MoveNext%2A> musi zostać wywołana w celu wyprzedzeniem modułu wyliczającego do pierwszego elementu zakresu przed odczytaniem wartości właściwości `Current`.

- Ostatnie wywołanie elementu <xref:System.Span%601.Enumerator.MoveNext%2A> zwrócił `false`, która wskazuje koniec zakresu. 

`Current` zwraca taką samą wartość, dopóki <xref:System.Span%601.Enumerator.MoveNext%2A> jest wywoływana. <xref:System.Span%601.Enumerator.MoveNext%2A> Ustawia `Current` do następnego elementu w zakresie. 

      ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.Enumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext();" />
      <MemberSignature Language="F#" Value="member this.MoveNext : unit -&gt; bool" Usage="enumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Przesuwa modułu wyliczającego do następnego elementu <see cref="System.Span`1" />.</summary>
        <returns>`true` Jeśli moduł wyliczający pomyślnie zaawansowane do następnego elementu; `false` koniec zakresu została przekazana.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

Po utworzeniu moduł wyliczający jest umieszczony przed pierwszym elementem w zakresu, a pierwsze wywołanie `MoveNext` prowadzi modułu wyliczającego do pierwszego elementu w zakresie. 

Jeśli `MoveNext` przekazuje na końcu zakresu, `MoveNext` zwraca `false`. Gdy moduł wyliczający jest w tym stanie, kolejne wywołania `MoveNext` również zwracać `false`.

         ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>