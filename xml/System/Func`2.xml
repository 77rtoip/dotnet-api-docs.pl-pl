<Type Name="Func&lt;T,TResult&gt;" FullName="System.Func&lt;T,TResult&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d7ffd56955984ed1270bcd08bf9f82a4d98c7551" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69420735" /></Metadata><TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T,out TResult&gt;(T arg);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`2&lt;- T, + TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`2" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of In T, Out TResult)(arg As T) As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T, typename TResult&gt;&#xA;public delegate TResult Func(T arg);" />
  <TypeSignature Language="F#" Value="type Func&lt;'T, 'Result&gt; = delegate of 'T -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg" Type="T" Index="0" FrameworkAlternate="xamarinmac-3.0" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">Typ parametru metody, który jest hermetyzowany przez ten delegat.</typeparam>
    <typeparam name="TResult">Typ wartości zwracanej przez ten delegata.</typeparam>
    <param name="arg">Parametr metody, która jest hermetyzowana przez ten delegat.</param>
    <summary>Hermetyzuje metodę, która ma jeden parametr i zwraca wartość typu określonego przez <typeparamref name="TResult" /> parametr.</summary>
    <returns>Wartość zwracana metody, która jest hermetyzowana przez ten delegat.</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tego delegata można użyć do reprezentowania metody, którą można przekazać jako parametru bez jawnego deklarowania niestandardowego delegata. Metoda hermetyzowana musi odpowiadać sygnaturze metody zdefiniowanej przez tego delegata. Oznacza to, że metoda hermetyzowana musi mieć jeden parametr, który jest przekazanie do niego przez wartość, i musi zwrócić wartość.  
  
> [!NOTE]
>  Aby odwołać się do metody, która ma jeden `void` parametr i zwraca (lub w Visual Basic, która jest `Sub` zadeklarowana jako, `Function`a nie jako), <xref:System.Action%601> należy zamiast tego użyć delegata generycznego.  
  
 Gdy używasz <xref:System.Func%602> delegata, nie musisz jawnie definiować delegata, który hermetyzuje metodę z pojedynczym parametrem. Na przykład poniższy kod jawnie deklaruje delegata o nazwie `ConvertMethod` i przypisuje odwołanie `UppercaseString` do metody do jego wystąpienia delegata.  
  
 [!code-csharp[System.Func~2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Delegate.cs#1)]
 [!code-vb[System.Func~2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Delegate.vb#1)]  
  
 Poniższy przykład upraszcza ten kod przez utworzenie wystąpienia <xref:System.Func%602> delegata zamiast jawnego definiowania nowego delegata i przypisanie do niego nazwanej metody.  
  
 [!code-csharp[System.Func~2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Func2_1.cs#2)]
 [!code-vb[System.Func~2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Func2_1.vb#2)]  
  
 Można również użyć <xref:System.Func%602> delegata z metodami anonimowymi C#w, jak pokazano w poniższym przykładzie. (Aby uzyskać wprowadzenie do metod anonimowych, zobacz [metody anonimowe](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)).  
  
 [!code-csharp[System.Func~2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Anon.cs#3)]  
  
 Można również przypisać wyrażenie lambda do <xref:System.Func%602> delegata, jak pokazano w poniższym przykładzie. (Aby uzyskać wprowadzenie do wyrażeń lambda, zobacz [wyrażenia lambda](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) i [wyrażenia lambda](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)  
  
 [!code-csharp[System.Func~2#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Lambda.cs#4)]
 [!code-vb[System.Func~2#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Lambda.vb#4)]  
  
 Typ podstawowy wyrażenia lambda jest jednym z delegatów ogólnych `Func` . Dzięki temu można przekazać wyrażenie lambda jako parametr bez jawnego przypisywania go do delegata. W szczególności, ponieważ wiele metod typów w <xref:System.Linq> przestrzeni nazw ma <xref:System.Func%602> parametry, można przekazać te metody wyrażenie lambda <xref:System.Func%602> bez bezpośredniego tworzenia wystąpienia delegata.  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób deklarowania i używania <xref:System.Func%602> delegata. Ten przykład deklaruje <xref:System.Func%602> zmienną i przypisuje jej wyrażenie lambda, które konwertuje znaki w ciągu na wielkie litery. Delegat, który hermetyzuje tę metodę, jest następnie przenoszona <xref:System.Linq.Enumerable.Select%2A?displayProperty=nameWithType> do metody, aby zmienić ciągi w tablicy ciągów na wielkie litery.  
  
 [!code-csharp[System.Func~2#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Example.cs#5)]
 [!code-vb[System.Func~2#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md">Wyrażenia lambda (Przewodnik programowania w języku C#)</related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md">Lambda — Wyrażenia (Visual Basic)</related>
    <related type="Article" href="~/docs/csharp/programming-guide/delegates/index.md">Delegaty (Przewodnik programowania w języku C#)</related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/delegates/index.md">Delegaty (Visual Basic)</related>
  </Docs>
</Type>
