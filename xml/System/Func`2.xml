<Type Name="Func&lt;T,TResult&gt;" FullName="System.Func&lt;T,TResult&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0fed96ede578e9915a152a7a8432537b181ebeff" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46630479" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T,out TResult&gt;(T arg);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`2&lt;- T, + TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`2" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of In T, Out TResult)(arg As T) As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T, typename TResult&gt;&#xA;public delegate TResult Func(T arg);" />
  <TypeSignature Language="F#" Value="type Func&lt;'T, 'Result&gt; = delegate of 'T -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">Typ parametru metody, która hermetyzuje tego delegata.</typeparam>
    <typeparam name="TResult">Typ wartości zwracanej metody, która hermetyzuje tego delegata.</typeparam>
    <param name="arg">Parametr metody, która hermetyzuje tego delegata.</param>
    <summary>Hermetyzuje metody, która ma jeden parametr i zwraca wartość typu określonego przez <typeparamref name="TResult" /> parametru.</summary>
    <returns>Wartość zwracaną przez metodę, która hermetyzuje tego delegata.</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten delegat służy do reprezentowania metody, która może być przekazywany jako parametr bez jawnego deklarowania niestandardową klasę delegatów. Metoda zhermetyzowany musi odpowiadać podpis metody, który jest definiowany przez ten delegat. Oznacza to, czy zhermetyzowany metoda musi mieć jeden parametr, który jest przekazywany do niego przez wartość, a aplikacja musi zwracać wartość.  
  
> [!NOTE]
>  Metoda, która ma jeden parametr i zwraca odwołanie do `void` (lub w języku Visual Basic, który jest zadeklarowany jako `Sub` , a nie jako `Function`), używają ogólnej <xref:System.Action%601> delegowania, zamiast tego.  
  
 Kiedy używasz <xref:System.Func%602> delegata, nie trzeba jawnie zdefiniować delegata, która hermetyzuje metody z pojedynczym parametrem. Na przykład, poniższy kod deklaruje jawnie delegat o nazwie `ConvertMethod` i odwołanie do `UppercaseString` metodę, aby jego wystąpienie delegata.  
  
 [!code-csharp[System.Func~2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Delegate.cs#1)]
 [!code-vb[System.Func~2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Delegate.vb#1)]  
  
 Poniższy przykład upraszcza ten kod przez utworzenie wystąpienia <xref:System.Func%602> delegata zamiast jawnie nowe delegowanie definiowanie i przypisywanie metodę o nazwie.  
  
 [!code-csharp[System.Func~2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Func2_1.cs#2)]
 [!code-vb[System.Func~2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Func2_1.vb#2)]  
  
 Można również użyć <xref:System.Func%602> delegowanie przy użyciu metod anonimowych w języku C#, tak jak pokazano w poniższym przykładzie. (Wprowadzenie do metod anonimowych, zobacz [anonimowymi](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)  
  
 [!code-csharp[System.Func~2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Anon.cs#3)]  
  
 Można również przypisywać w wyrażeniu lambda <xref:System.Func%602> delegować, tak jak pokazano w poniższym przykładzie. (Wprowadzenie do wyrażenia lambda, zobacz [wyrażeń Lambda](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) i [wyrażeń Lambda](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)  
  
 [!code-csharp[System.Func~2#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Lambda.cs#4)]
 [!code-vb[System.Func~2#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Lambda.vb#4)]  
  
 Podstawowy typ wyrażenia lambda jest jednym z ogólnego `Func` delegatów. Dzięki temu można przekazać wyrażenia lambda jako parametr bez jawnie przypisywania do delegata. W szczególności ponieważ wiele metod typów w <xref:System.Linq> przestrzeń nazw ma <xref:System.Func%602> parametrów można przekazywać te metody wyrażenia lambda bez jawnego wystąpienia <xref:System.Func%602> delegować.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak zadeklarować i użyj <xref:System.Func%602> delegować. W tym przykładzie deklaruje <xref:System.Func%602> zmiennej i przypisuje mu Wyrażenie lambda, która konwertuje znaki w ciągu na wielkie litery. Delegat, który hermetyzuje ta metoda jest następnie przekazywany do <xref:System.Linq.Enumerable.Select%2A?displayProperty=nameWithType> metodę, aby zmienić ciągi w tablicy ciągów znaków na wielkie litery.  
  
 [!code-csharp[System.Func~2#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Example.cs#5)]
 [!code-vb[System.Func~2#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md">Wyrażenia lambda (Przewodnik programowania w języku C#)</related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md">Lambda — Wyrażenia (Visual Basic)</related>
    <related type="Article" href="~/docs/csharp/programming-guide/delegates/index.md">Delegaty (Przewodnik programowania w języku C#)</related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/delegates/index.md">Delegaty (Visual Basic)</related>
  </Docs>
</Type>