<Type Name="Func&lt;T,TResult&gt;" FullName="System.Func&lt;T,TResult&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="376675baf8e14d5ae81bf0b102d6017fb220e31b" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36431602" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T,out TResult&gt;(T arg);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`2&lt;- T, + TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`2" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of In T, Out TResult)(arg As T) As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T, typename TResult&gt;&#xA;public delegate TResult Func(T arg);" />
  <TypeSignature Language="F#" Value="type Func&lt;'T, 'Result&gt; = delegate of 'T -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="5fa16-101">Typ parametru metody, która hermetyzuje tego delegata.</span>
      <span class="sxs-lookup">
        <span data-stu-id="5fa16-101">The type of the parameter of the method that this delegate encapsulates.</span>
      </span>
    </typeparam>
    <typeparam name="TResult">
      <span data-ttu-id="5fa16-102">Typ zwracanej wartości metody, która hermetyzuje tego delegata.</span>
      <span class="sxs-lookup">
        <span data-stu-id="5fa16-102">The type of the return value of the method that this delegate encapsulates.</span>
      </span>
    </typeparam>
    <param name="arg">
      <span data-ttu-id="5fa16-103">Parametr metody, która hermetyzuje tego delegata.</span>
      <span class="sxs-lookup">
        <span data-stu-id="5fa16-103">The parameter of the method that this delegate encapsulates.</span>
      </span>
    </param>
    <summary>
      <span data-ttu-id="5fa16-104">Hermetyzuje metodę, która ma jeden parametr i zwraca wartość typu określonego przez <typeparamref name="TResult" /> parametru.</span>
      <span class="sxs-lookup">
        <span data-stu-id="5fa16-104">Encapsulates a method that has one parameter and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</span>
      </span>
    </summary>
    <returns>
      <span data-ttu-id="5fa16-105">Wartość zwracaną metody, która hermetyzuje tego delegata.</span>
      <span class="sxs-lookup">
        <span data-stu-id="5fa16-105">The return value of the method that this delegate encapsulates.</span>
      </span>
    </returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa16-106">Ten delegat umożliwia reprezentuje metodę, która można przekazać jako parametru bez jawnie deklarowanie niestandardowego obiektu delegowanego.</span><span class="sxs-lookup"><span data-stu-id="5fa16-106">You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="5fa16-107">Metoda hermetyzowany musi odpowiadać podpis metody jest definiowana za pomocą tego delegata.</span><span class="sxs-lookup"><span data-stu-id="5fa16-107">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="5fa16-108">Oznacza to, że metoda hermetyzowany musi mieć jeden parametr, który jest przekazywany do niej przez wartość, a aplikacja musi zwracać wartość.</span><span class="sxs-lookup"><span data-stu-id="5fa16-108">This means that the encapsulated method must have one parameter that is passed to it by value, and that it must return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5fa16-109">Metody, która ma jeden parametr i zwraca odwołanie do `void` (lub w języku Visual Basic, który jest zadeklarowany jako `Sub` , a nie jako `Function`), używać ogólnych <xref:System.Action%601> zamiast tego delegata.</span><span class="sxs-lookup"><span data-stu-id="5fa16-109">To reference a method that has one parameter and returns `void` (or in Visual Basic, that is declared as a `Sub` rather than as a `Function`), use the generic <xref:System.Action%601> delegate instead.</span></span>  
  
 <span data-ttu-id="5fa16-110">Jeśli używasz <xref:System.Func%602> delegata, nie trzeba jawnie definiować delegata, który hermetyzuje metody z pojedynczym parametrem.</span><span class="sxs-lookup"><span data-stu-id="5fa16-110">When you use the <xref:System.Func%602> delegate, you do not have to explicitly define a delegate that encapsulates a method with a single parameter.</span></span> <span data-ttu-id="5fa16-111">Na przykład następujący kod jawnie deklaruje delegata o nazwie `ConvertMethod` i odwołanie do `UppercaseString` metodę, aby jego wystąpienie obiektu delegowanego.</span><span class="sxs-lookup"><span data-stu-id="5fa16-111">For example, the following code explicitly declares a delegate named `ConvertMethod` and assigns a reference to the `UppercaseString` method to its delegate instance.</span></span>  
  
 [!code-csharp[System.Func~2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Delegate.cs#1)]
 [!code-vb[System.Func~2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Delegate.vb#1)]  
  
 <span data-ttu-id="5fa16-112">Poniższy przykład ułatwiają ten kod przy uruchamianiu <xref:System.Func%602> delegata zamiast jawnie nowe delegowanie definiowanie i przypisywanie metodę o nazwie.</span><span class="sxs-lookup"><span data-stu-id="5fa16-112">The following example simplifies this code by instantiating the <xref:System.Func%602> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-csharp[System.Func~2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Func2_1.cs#2)]
 [!code-vb[System.Func~2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Func2_1.vb#2)]  
  
 <span data-ttu-id="5fa16-113">Można również użyć <xref:System.Func%602> delegata z metody anonimowe w języku C#, jak pokazano w poniższym przykładzie.</span><span class="sxs-lookup"><span data-stu-id="5fa16-113">You can also use the <xref:System.Func%602> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="5fa16-114">(Wprowadzenie do metod anonimowych, zobacz [metod anonimowych](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span><span class="sxs-lookup"><span data-stu-id="5fa16-114">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
  
 [!code-csharp[System.Func~2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Anon.cs#3)]  
  
 <span data-ttu-id="5fa16-115">Można także przypisać wyrażenia lambda do <xref:System.Func%602> delegować, jak pokazano w poniższym przykładzie.</span><span class="sxs-lookup"><span data-stu-id="5fa16-115">You can also assign a lambda expression to a <xref:System.Func%602> delegate, as the following example illustrates.</span></span> <span data-ttu-id="5fa16-116">(Wprowadzenie do wyrażenia lambda, zobacz [wyrażenia Lambda](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) i [wyrażenia Lambda](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span><span class="sxs-lookup"><span data-stu-id="5fa16-116">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) and [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 [!code-csharp[System.Func~2#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Lambda.cs#4)]
 [!code-vb[System.Func~2#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Lambda.vb#4)]  
  
 <span data-ttu-id="5fa16-117">Podstawowy typ wyrażenia lambda jest jednym z ogólnego `Func` delegatów.</span><span class="sxs-lookup"><span data-stu-id="5fa16-117">The underlying type of a lambda expression is one of the generic `Func` delegates.</span></span> <span data-ttu-id="5fa16-118">Dzięki temu można przekazać wyrażenia lambda jako parametr bez jawnie przypisywania go do delegata.</span><span class="sxs-lookup"><span data-stu-id="5fa16-118">This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.</span></span> <span data-ttu-id="5fa16-119">W szczególności ponieważ wiele metod typów w <xref:System.Linq> ma przestrzeń nazw <xref:System.Func%602> parametry, można przekazać te metody wyrażenia lambda bez jawnego tworzenia wystąpienia <xref:System.Func%602> delegowanie.</span><span class="sxs-lookup"><span data-stu-id="5fa16-119">In particular, because many methods of types in the <xref:System.Linq> namespace have <xref:System.Func%602> parameters, you can pass these methods a lambda expression without explicitly instantiating a <xref:System.Func%602> delegate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5fa16-120">W poniższym przykładzie pokazano sposób deklarowanie i użycie <xref:System.Func%602> delegowanie.</span><span class="sxs-lookup"><span data-stu-id="5fa16-120">The following example demonstrates how to declare and use a <xref:System.Func%602> delegate.</span></span> <span data-ttu-id="5fa16-121">W tym przykładzie deklaruje <xref:System.Func%602> zmiennej i przypisuje go wyrażenia lambda, który konwertuje znaki w ciągu na wielkie litery.</span><span class="sxs-lookup"><span data-stu-id="5fa16-121">This example declares a <xref:System.Func%602> variable and assigns it a lambda expression that converts the characters in a string to uppercase.</span></span> <span data-ttu-id="5fa16-122">Delegata, który hermetyzuje tej metody są następnie przekazywane do <xref:System.Linq.Enumerable.Select%2A?displayProperty=nameWithType> metodę, aby zmienić ciągi w tablicy ciągów na wielkie litery.</span><span class="sxs-lookup"><span data-stu-id="5fa16-122">The delegate that encapsulates this method is subsequently passed to the <xref:System.Linq.Enumerable.Select%2A?displayProperty=nameWithType> method to change the strings in an array of strings to uppercase.</span></span>  
  
 [!code-csharp[System.Func~2#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Example.cs#5)]
 [!code-vb[System.Func~2#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>