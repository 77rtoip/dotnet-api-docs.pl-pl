<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="WeakReference.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5c0d4836429712734d47bb9c53ee59e9a0dd4d9f0.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c0d4836429712734d47bb9c53ee59e9a0dd4d9f0</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.WeakReference">
          <source>Represents a weak reference, which references an object while still allowing that object to be reclaimed by garbage collection.</source>
          <target state="translated">Reprezentuje słabego odwołania, który odwołuje się do obiektu, umożliwiając obiektowi można odzyskać przez wyrzucanie elementów bezużytecznych.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.WeakReference">
          <source>A weak reference allows the garbage collector to collect an object while still allowing an application to access the object.</source>
          <target state="translated">Słabe odwołanie umożliwia modułu zbierającego elementy bezużyteczne zbierać obiektu, umożliwiając aplikacji dostępu do tego obiektu.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.WeakReference">
          <source>If you need the object, you can still obtain a strong reference to it and prevent it from being collected.</source>
          <target state="translated">Obiekt, należy nadal można uzyskać silne odwołanie do niej i uniemożliwić zbieranych.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.WeakReference">
          <source>For more information about how to use short and long weak references, see <bpt id="p1">[</bpt>Weak References<ept id="p1">](~/docs/standard/garbage-collection/weak-references.md)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji o sposobie użycia krótki i długi słabe odwołania, zobacz <bpt id="p1">[</bpt>słabe odwołania<ept id="p1">](~/docs/standard/garbage-collection/weak-references.md)</ept>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.WeakReference">
          <source>The following example demonstrates how you can use weak references to maintain a cache of objects as a resource for an application.</source>
          <target state="translated">W poniższym przykładzie pokazano, jak można użyć słabe odwołania do obsługi pamięci podręcznej obiektów jako zasób dla aplikacji.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.WeakReference">
          <source>The cache is constructed using an <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> of <ph id="ph2">&lt;xref:System.WeakReference&gt;</ph> objects keyed by an index value.</source>
          <target state="translated">Pamięć podręczna jest tworzony przy użyciu <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> z <ph id="ph2">&lt;xref:System.WeakReference&gt;</ph> obiektów, wyznaczaną przez wartość indeksu.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.WeakReference">
          <source>The <ph id="ph1">&lt;xref:System.WeakReference.Target%2A&gt;</ph> property for the <ph id="ph2">&lt;xref:System.WeakReference&gt;</ph> objects is an object in a byte array that represents data.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.WeakReference.Target%2A&gt;</ph> Właściwość <ph id="ph2">&lt;xref:System.WeakReference&gt;</ph> obiektów jest obiektem w tablicy bajtów, który reprezentuje dane.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.WeakReference">
          <source>The example randomly accesses objects in the cache.</source>
          <target state="translated">Przykład losowo uzyskuje dostęp do obiektów w pamięci podręcznej.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.WeakReference">
          <source>If an object is reclaimed for garbage collection, a new data object is regenerated; otherwise, the object is available to access because of the weak reference.</source>
          <target state="translated">Jeśli obiekt jest odzyskać do wyrzucanie elementów bezużytecznych, generowane jest nowy obiekt danych; w przeciwnym razie obiekt jest dostępne dla dostępu z powodu słabe odwołanie.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.WeakReference">
          <source>for the ability to call unmanaged code.</source>
          <target state="translated">Aby uzyskać możliwość wywoływania niezarządzanego kodu.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.WeakReference">
          <source>Demand value: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" /&gt;</ph>; Permission value: <ph id="ph2">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">Żądanie wartość: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" /&gt;</ph>; Wartość uprawnienia: <ph id="ph2">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="T:System.WeakReference">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> class.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.WeakReference.#ctor(System.Object)">
          <source>The object to track or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Obiekt do śledzenia lub <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.WeakReference.#ctor(System.Object)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> class, referencing the specified object.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> klasy odwołujące się do określonego obiektu.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.WeakReference.#ctor(System.Object)">
          <source>This constructor creates a short weak reference to <ph id="ph1">`target`</ph>.</source>
          <target state="translated">Ten konstruktor tworzy krótkich słabe odwołanie do <ph id="ph1">`target`</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
          <source>An object to track.</source>
          <target state="translated">Obiekt do śledzenia.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
          <source>Indicates when to stop tracking the object.</source>
          <target state="translated">Wskazuje, kiedy należy zatrzymać śledzenie obiektu.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, the object is tracked after finalization; if <ph id="ph2">&lt;see langword="false" /&gt;</ph>, the object is only tracked until finalization.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;see langword="true" /&gt;</ph>, obiekt jest śledzony po zakończeniu; Jeśli <ph id="ph2">&lt;see langword="false" /&gt;</ph>, obiekt jest tylko śledzone do czasu finalizacji.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> class, referencing the specified object and using the specified resurrection tracking.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> klasy, odwołujący się do określonego obiektu i przy użyciu określonego resurrection śledzenia.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
          <source>If <ph id="ph1">`trackResurrection`</ph> is <ph id="ph2">`false`</ph>, a short weak reference is created.</source>
          <target state="translated">Jeśli <ph id="ph1">`trackResurrection`</ph> jest <ph id="ph2">`false`</ph>, utworzeniu krótkich słabe odwołanie.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
          <source>If <ph id="ph1">`trackResurrection`</ph> is <ph id="ph2">`true`</ph>, a long weak reference is created.</source>
          <target state="translated">Jeśli <ph id="ph1">`trackResurrection`</ph> jest <ph id="ph2">`true`</ph>, utworzeniu długo słabe odwołanie.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
          <source>The following example creates a cache of data objects with short weak references.</source>
          <target state="translated">Poniższy przykład tworzy pamięć podręczną danych obiektów z krótkim słabe odwołania.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
          <source>This example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.WeakReference&gt;</ph> class.</source>
          <target state="translated">Ten przykład jest częścią większego przykładu udostępnionego dla <ph id="ph1">&lt;xref:System.WeakReference&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.WeakReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>An object that holds all the data needed to serialize or deserialize the current <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> object.</source>
          <target state="translated">Obiekt, który przechowuje wszystkie dane potrzebne do serializacji lub deserializacji bieżącego <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.WeakReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>(Reserved) Describes the source and destination of the serialized stream specified by <bpt id="p1">&lt;c&gt;</bpt>info<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">(Zastrzeżone) Opisuje źródłowego i docelowego serializowanym strumieniu określony przez <bpt id="p1">&lt;c&gt;</bpt>informacji<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.WeakReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> class, using deserialized data from the specified serialization and stream objects.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> przy użyciu zdeserializowany danych z określonych obiektów serializacji i strumienia.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.WeakReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">`context`</ph> parameter is reserved, and does not currently participate in this operation.</source>
          <target state="translated"><ph id="ph1">`context`</ph> Parametr jest zarezerwowany i aktualnie nie uczestniczy w tej operacji.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.WeakReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source><ph id="ph1">&lt;paramref name="info" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="info" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.WeakReference.Finalize">
          <source>Discards the reference to the target represented by the current <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> object.</source>
          <target state="translated">Odrzuca wszystkie odwołania do obiektu docelowego reprezentowany przez bieżący <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.WeakReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>An object that holds all the data needed to serialize or deserialize the current <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> object.</source>
          <target state="translated">Obiekt, który przechowuje wszystkie dane potrzebne do serializacji lub deserializacji bieżącego <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.WeakReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>(Reserved) The location where serialized data is stored and retrieved.</source>
          <target state="translated">(Zastrzeżone) Lokalizacja, w którym dane serializowane są przechowywane i pobierane.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.WeakReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Populates a <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> object with all the data needed to serialize the current <ph id="ph2">&lt;see cref="T:System.WeakReference" /&gt;</ph> object.</source>
          <target state="translated">Wypełnia <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> obiektu z wszystkie dane potrzebne do serializacji bieżącego <ph id="ph2">&lt;see cref="T:System.WeakReference" /&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.WeakReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This method stores all the information in <ph id="ph1">`info`</ph> necessary to serialize the current <ph id="ph2">&lt;xref:System.WeakReference&gt;</ph> object.</source>
          <target state="translated">Ta metoda przechowuje wszystkie informacje w <ph id="ph1">`info`</ph> niezbędne do serializacji bieżącego <ph id="ph2">&lt;xref:System.WeakReference&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.WeakReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">`context`</ph> parameter is reserved and is not currently used in the execution of this method.</source>
          <target state="translated"><ph id="ph1">`context`</ph> Parametr jest zarezerwowany i nie jest obecnie używany podczas wykonywania tej metody.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.WeakReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source><ph id="ph1">&lt;paramref name="info" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="info" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.WeakReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.WeakReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="P:System.WeakReference.IsAlive">
          <source>Gets an indication whether the object referenced by the current <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> object has been garbage collected.</source>
          <target state="translated">Pobiera wskazuje, czy obiekt odwołuje się bieżący <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> obiektu została wyrzucona jako element bezużyteczny.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.WeakReference.IsAlive">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the object referenced by the current <ph id="ph2">&lt;see cref="T:System.WeakReference" /&gt;</ph> object has not been garbage collected and is still accessible; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli obiekt odwołuje się bieżący <ph id="ph2">&lt;see cref="T:System.WeakReference" /&gt;</ph> obiekt nie został bezużytecznych i jest nadal dostępny w przeciwnym razie <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.WeakReference.IsAlive">
          <source>Because an object could potentially be reclaimed for garbage collection immediately after the <ph id="ph1">&lt;xref:System.WeakReference.IsAlive%2A&gt;</ph> property returns <ph id="ph2">`true`</ph>, using this property is not recommended unless you are testing only for a <ph id="ph3">`false`</ph> return value.</source>
          <target state="translated">Ponieważ obiekt może potencjalnie można odzyskać do wyrzucanie elementów bezużytecznych natychmiast po <ph id="ph1">&lt;xref:System.WeakReference.IsAlive%2A&gt;</ph> zwraca <ph id="ph2">`true`</ph>, za pomocą tej właściwości nie jest zalecane, chyba że podczas testowania tylko w przypadku <ph id="ph3">`false`</ph> zwracają wartość.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="P:System.WeakReference.Target">
          <source>Gets or sets the object (the target) referenced by the current <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> object.</source>
          <target state="translated">Pobiera lub ustawia obiekt (docelowy) odwołuje się bieżący <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.WeakReference.Target">
          <source><ph id="ph1">&lt;see langword="null" /&gt;</ph> if the object referenced by the current <ph id="ph2">&lt;see cref="T:System.WeakReference" /&gt;</ph> object has been garbage collected; otherwise, a reference to the object referenced by the current <ph id="ph3">&lt;see cref="T:System.WeakReference" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="null" /&gt;</ph> Jeśli obiekt odwołuje się bieżący <ph id="ph2">&lt;see cref="T:System.WeakReference" /&gt;</ph> obiekt został odzyskiwanie zebranych; w przeciwnym razie wartość odwołania do obiektu, do których odwołuje się przez bieżące <ph id="ph3">&lt;see cref="T:System.WeakReference" /&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.WeakReference.Target">
          <source>After setting this property to the target object, make sure that there are no other strong references to the object; otherwise, it will not be collected.</source>
          <target state="translated">Po ustawieniu tej właściwości do obiektu docelowego, upewnij się czy nie istnieją żadne silne odwołania do obiektu. w przeciwnym razie go nie będą zbierane.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.WeakReference.Target">
          <source>The following example tries to obtain an object from a cache of objects with weak references.</source>
          <target state="translated">Poniższy przykład próbuje uzyskać z pamięci podręcznej obiektów słabego odwołania do obiektu.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.WeakReference.Target">
          <source>If the object was reclaimed for garbage collection, a new object is generated.</source>
          <target state="translated">Jeśli obiekt została odzyskana na wyrzucanie elementów bezużytecznych, zostanie wygenerowany nowy obiekt.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.WeakReference.Target">
          <source>This example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.WeakReference&gt;</ph> class.</source>
          <target state="translated">Ten przykład jest częścią większego przykładu udostępnionego dla <ph id="ph1">&lt;xref:System.WeakReference&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="P:System.WeakReference.Target">
          <source>The reference to the target object is invalid.</source>
          <target state="translated">Odwołanie do obiektu docelowego jest nieprawidłowy.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="P:System.WeakReference.Target">
          <source>This exception can be thrown while setting this property if the value is a null reference or if the object has been finalized during the set operation.</source>
          <target state="translated">Ten wyjątek może zostać wygenerowany podczas ustawiania tej właściwości, jeśli wartość jest odwołanie o wartości null lub obiekt został sfinalizowany. podczas operacji set.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="P:System.WeakReference.TrackResurrection">
          <source>Gets an indication whether the object referenced by the current <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> object is tracked after it is finalized.</source>
          <target state="translated">Pobiera wskazuje, czy obiekt odwołuje się bieżący <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> śledzenia obiektu po jego jest zakończona.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.WeakReference.TrackResurrection">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the object the current <ph id="ph2">&lt;see cref="T:System.WeakReference" /&gt;</ph> object refers to is tracked after finalization; or <ph id="ph3">&lt;see langword="false" /&gt;</ph> if the object is only tracked until finalization.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli bieżący obiekt <ph id="ph2">&lt;see cref="T:System.WeakReference" /&gt;</ph> obiekt odwołuje się do śledzenia po zakończeniu; lub <ph id="ph3">&lt;see langword="false" /&gt;</ph> Jeśli obiekt jest tylko śledzone do czasu finalizacji.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.WeakReference.TrackResurrection">
          <source>If <ph id="ph1">`true`</ph>, the weak reference is a long weak reference and <ph id="ph2">`true`</ph> was specified for the <ph id="ph3">`trackResurrection`</ph> parameter in the <ph id="ph4">&lt;xref:System.WeakReference&gt;</ph> constructor.</source>
          <target state="translated">Jeśli <ph id="ph1">`true`</ph>, słabe odwołanie jest długo słabe odwołanie i <ph id="ph2">`true`</ph> określono <ph id="ph3">`trackResurrection`</ph> parametru w <ph id="ph4">&lt;xref:System.WeakReference&gt;</ph> konstruktora.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>