<Type Name="IDisposable" FullName="System.IDisposable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a86a39d23ff33ea43e699c68a046a3058b4a37d9" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69405983" /></Metadata><TypeSignature Language="C#" Value="public interface IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDisposable" />
  <TypeSignature Language="F#" Value="type IDisposable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="e2e2d-101">Zapewnia mechanizm zwalniania niezarządzanych zasobów.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-101">Provides a mechanism for releasing unmanaged resources.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2e2d-102">Podstawowym zastosowaniem tego interfejsu jest zwolnienie niezarządzanych zasobów.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-102">The primary use of this interface is to release unmanaged resources.</span></span> <span data-ttu-id="e2e2d-103">Moduł wyrzucania elementów bezużytecznych automatycznie zwalnia pamięć przydzieloną do obiektu zarządzanego, gdy ten obiekt nie jest już używany.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-103">The garbage collector automatically releases the memory allocated to a managed object when that object is no longer used.</span></span> <span data-ttu-id="e2e2d-104">Nie jest jednak możliwe przewidywalność podczas odzyskiwania pamięci.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-104">However, it is not possible to predict when garbage collection will occur.</span></span> <span data-ttu-id="e2e2d-105">Ponadto Moduł wyrzucania elementów bezużytecznych nie ma znajomości niezarządzanych zasobów, takich jak uchwyty okna, lub otwartych plików i strumieni.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-105">Furthermore, the garbage collector has no knowledge of unmanaged resources such as window handles, or open files and streams.</span></span>  
  
 <span data-ttu-id="e2e2d-106"><xref:System.IDisposable.Dispose%2A> Użyj metody tego interfejsu, aby jawnie zwolnić niezarządzane zasoby w połączeniu z modułem wyrzucania elementów bezużytecznych.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-106">Use the <xref:System.IDisposable.Dispose%2A> method of this interface to explicitly release unmanaged resources in conjunction with the garbage collector.</span></span> <span data-ttu-id="e2e2d-107">Odbiorca obiektu może wywołać tę metodę, gdy obiekt nie jest już wymagany.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-107">The consumer of an object can call this method when the object is no longer needed.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="e2e2d-108">Jest to istotna zmiana, aby dodać <xref:System.IDisposable> interfejs do istniejącej klasy.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-108">It is a breaking change to add the <xref:System.IDisposable> interface to an existing class.</span></span> <span data-ttu-id="e2e2d-109">Ponieważ wcześniej istniejący odbiorcy typu nie mogą wywoływać <xref:System.IDisposable.Dispose%2A>, nie można mieć pewności, że niezarządzane zasoby przechowywane przez dany typ zostaną wydane.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-109">Because pre-existing consumers of your type cannot call <xref:System.IDisposable.Dispose%2A>, you cannot be certain that unmanaged resources held by your type will be released.</span></span>  
  
 <span data-ttu-id="e2e2d-110">Ponieważ implementacja jest wywoływana przez odbiorcę typu, gdy zasoby należące do wystąpienia nie są już potrzebne, należy otoczyć obiekt zarządzany <xref:System.Runtime.InteropServices.SafeHandle> w (Zalecaną alternatywą) lub zastąpić <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> <xref:System.Object.Finalize%2A?displayProperty=nameWithType>zwalnianie niezarządzanych zasobów w przypadku, gdy konsument zapomni o wywołaniu <xref:System.IDisposable.Dispose%2A>.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-110">Because the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation is called by the consumer of a type when the resources owned by an instance are no longer needed, you should either wrap the managed object in a <xref:System.Runtime.InteropServices.SafeHandle> (the recommended alternative), or you should override <xref:System.Object.Finalize%2A?displayProperty=nameWithType> to free unmanaged resources in the event that the consumer forgets to call <xref:System.IDisposable.Dispose%2A>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e2e2d-111">W .NET Framework C++ kompilator obsługuje deterministyczne usuwanie zasobów i nie zezwala na bezpośrednią implementację <xref:System.IDisposable.Dispose%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-111">In the .NET Framework, the C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="e2e2d-112">Szczegółowe omówienie sposobu używania tego interfejsu i <xref:System.Object.Finalize%2A?displayProperty=nameWithType> metody można znaleźć w temacie [odzyskiwanie pamięci](~/docs/standard/garbage-collection/index.md) i implementowanie [metody Dispose](~/docs/standard/garbage-collection/implementing-dispose.md) .</span><span class="sxs-lookup"><span data-stu-id="e2e2d-112">For a detailed discussion about how this interface and the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method are used, see the [Garbage Collection](~/docs/standard/garbage-collection/index.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md) topics.</span></span>  
  
## <a name="using-an-object-that-implements-idisposable"></a><span data-ttu-id="e2e2d-113">Korzystanie z obiektu, który implementuje interfejs IDisposable</span><span class="sxs-lookup"><span data-stu-id="e2e2d-113">Using an object that implements IDisposable</span></span>  
 <span data-ttu-id="e2e2d-114">Jeśli aplikacja korzysta po prostu z obiektu, który implementuje <xref:System.IDisposable> interfejs, należy wywołać <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementację obiektu po zakończeniu korzystania z niego.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-114">If your app simply uses an object that implements the <xref:System.IDisposable> interface, you should call the object's <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation when you are finished using it.</span></span> <span data-ttu-id="e2e2d-115">W zależności od języka programowania można to zrobić na jeden z dwóch sposobów:</span><span class="sxs-lookup"><span data-stu-id="e2e2d-115">Depending on your programming language, you can do this in one of two ways:</span></span>  
  
-   <span data-ttu-id="e2e2d-116">Za pomocą konstrukcji języka, takiej jak `using` instrukcja w C# i Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-116">By using a language construct such as the `using` statement in C# and Visual Basic.</span></span>  
  
-   <span data-ttu-id="e2e2d-117">Przez <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> zapakowanie wywołania do implementacji `try` / `finally` w bloku.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-117">By wrapping the call to the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation in a `try`/`finally` block.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e2e2d-118">Dokumentacja typów, które implementują <xref:System.IDisposable> ten fakt i zawiera przypomnienie do wywołania jej <xref:System.IDisposable.Dispose%2A> implementacji.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-118">Documentation for types that implement <xref:System.IDisposable> note that fact and include a reminder to call its <xref:System.IDisposable.Dispose%2A> implementation.</span></span>  
  
<a name="Using"></a>   
### <a name="the-c-and-visual-basic-using-statement"></a><span data-ttu-id="e2e2d-119">Instrukcja C# i Visual Basic Using</span><span class="sxs-lookup"><span data-stu-id="e2e2d-119">The C# and Visual Basic Using statement</span></span>  
 <span data-ttu-id="e2e2d-120">Jeśli język obsługuje konstrukcję taką jak instrukcja [using](~/docs/csharp/language-reference/keywords/using.md) w C# i instrukcji [using](~/docs/visual-basic/language-reference/statements/using-statement.md) w Visual Basic, można jej użyć zamiast jawnie wywołać <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> siebie.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-120">If your language supports a construct such as the [using](~/docs/csharp/language-reference/keywords/using.md) statement in C# and the [Using](~/docs/visual-basic/language-reference/statements/using-statement.md) statement in Visual Basic, you can use it instead of explicitly calling <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> yourself.</span></span> <span data-ttu-id="e2e2d-121">Poniższy przykład używa tego podejścia w definiowaniu `WordCount` klasy, która zachowuje informacje o pliku i liczbie wyrazów w nim.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-121">The following example uses this approach in defining a `WordCount` class that preserves information about a file and the number of words in it.</span></span>  
  
 [!code-csharp[System.IDisposable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling1.cs#1)]
 [!code-vb[System.IDisposable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling1.vb#1)]  
  
 <span data-ttu-id="e2e2d-122">`using` Instrukcja jest w rzeczywistości wygodną składnią.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-122">The `using` statement is actually a syntactic convenience.</span></span> <span data-ttu-id="e2e2d-123">W czasie kompilacji kompilator języka implementuje język pośredni (IL) dla `try` / `finally` bloku.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-123">At compile time, the language compiler implements the intermediate language (IL) for a `try`/`finally` block.</span></span>  
  
 <span data-ttu-id="e2e2d-124">Aby uzyskać więcej informacji na `using` temat instrukcji, zobacz [instrukcje using](~/docs/visual-basic/language-reference/statements/using-statement.md) lub [instrukcji using](~/docs/csharp/language-reference/keywords/using-statement.md) .</span><span class="sxs-lookup"><span data-stu-id="e2e2d-124">For more information about the `using` statement, see the [Using Statement](~/docs/visual-basic/language-reference/statements/using-statement.md) or [using Statement](~/docs/csharp/language-reference/keywords/using-statement.md) topics.</span></span>  
  
### <a name="the-tryfinally-block"></a><span data-ttu-id="e2e2d-125">Blok try/finally</span><span class="sxs-lookup"><span data-stu-id="e2e2d-125">The Try/Finally block</span></span>  
 <span data-ttu-id="e2e2d-126">Jeśli język programowania nie obsługuje `using` konstrukcji, takiej jak instrukcja w C# lub Visual Basic, lub jeśli wolisz nie używać, możesz wywołać <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementację z bloku `try` `finally` /Instrukcja. `finally`</span><span class="sxs-lookup"><span data-stu-id="e2e2d-126">If your programming language does not support a construct like the `using` statement in C# or Visual Basic, or if you prefer not to use it, you can call the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation from the `finally` block of a `try`/`finally` statement.</span></span> <span data-ttu-id="e2e2d-127">Poniższy przykład zamienia `using` blok w poprzednim / przykładzie `try` `finally` z blokiem.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-127">The following example replaces the `using` block in the previous example with a `try`/`finally` block.</span></span>  
  
 [!code-csharp[System.IDisposable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling2.cs#2)]
 [!code-vb[System.IDisposable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling2.vb#2)]  
  
 <span data-ttu-id="e2e2d-128">Aby uzyskać więcej informacji na `try` temat / `finally` wzorca, zobacz [try... Catch... Finally instrukcji](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md), [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md)lub [try-finally](https://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82).</span><span class="sxs-lookup"><span data-stu-id="e2e2d-128">For more information about the `try`/`finally` pattern, see [Try...Catch...Finally Statement](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md), [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md), or [try-finally Statement](https://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82).</span></span>  
  
## <a name="implementing-idisposable"></a><span data-ttu-id="e2e2d-129">Implementowanie interfejsu IDisposable</span><span class="sxs-lookup"><span data-stu-id="e2e2d-129">Implementing IDisposable</span></span>  
 <span data-ttu-id="e2e2d-130">Należy zaimplementować <xref:System.IDisposable> tylko wtedy, gdy typ korzysta z zasobów niezarządzanych bezpośrednio.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-130">You should implement <xref:System.IDisposable> only if your type uses unmanaged resources directly.</span></span> <span data-ttu-id="e2e2d-131">Odbiorcy Twojego typu mogą wywoływać <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementację, aby zwolnić zasoby, gdy wystąpienie nie jest już potrzebne.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-131">The consumers of your type can call your <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation to free resources when the instance is no longer needed.</span></span> <span data-ttu-id="e2e2d-132">Aby obsłużyć przypadki, w których ich <xref:System.IDisposable.Dispose%2A>wywołanie nie powiodło się, należy użyć klasy <xref:System.Runtime.InteropServices.SafeHandle> pochodnej z do zawijania niezarządzanych zasobów <xref:System.Object.Finalize%2A?displayProperty=nameWithType> lub należy zastąpić metodę dla typu referencyjnego.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-132">To handle cases in which they fail to call <xref:System.IDisposable.Dispose%2A>, you should either use a class derived from <xref:System.Runtime.InteropServices.SafeHandle> to wrap the unmanaged resources, or you should override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method for a reference type.</span></span> <span data-ttu-id="e2e2d-133">W każdym z tych przypadków należy użyć <xref:System.IDisposable.Dispose%2A> metody do wykonania dowolnego oczyszczania po użyciu zasobów niezarządzanych, takich jak zwalnianie, zwalnianie lub resetowanie niezarządzanych zasobów.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-133">In either case, you use the <xref:System.IDisposable.Dispose%2A> method to perform whatever cleanup is necessary after using the unmanaged resources, such as freeing, releasing, or resetting the unmanaged resources.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e2e2d-134">W przypadku definiowania klasy bazowej korzystającej z zasobów niezarządzanych, która ma, lub może mieć, podklasy, które powinny zostać usunięte, należy zaimplementować <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> metodę i zapewnić drugie `Dispose`Przeciążenie, jak opisano w następnym Paragraf.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-134">If you are defining a base class that uses unmanaged resources and that either has, or is likely to have, subclasses that should be disposed, you should implement the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> method and provide a second overload of `Dispose`, as discussed in the next section.</span></span>  
  
<a name="BaseClasses"></a>   
## <a name="idisposable-and-the-inheritance-hierarchy"></a><span data-ttu-id="e2e2d-135">IDisposable i Hierarchia dziedziczenia</span><span class="sxs-lookup"><span data-stu-id="e2e2d-135">IDisposable and the inheritance hierarchy</span></span>  
 <span data-ttu-id="e2e2d-136">Klasa bazowa z podklasami, które powinny być jednorazowe, <xref:System.IDisposable> musi być implementowana w następujący sposób.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-136">A base class with subclasses that should be disposable must implement <xref:System.IDisposable> as follows.</span></span> <span data-ttu-id="e2e2d-137">Tego wzorca należy używać przy każdej implementacji <xref:System.IDisposable> dla dowolnego typu, który nie jest`NotInheritable` `sealed` (w Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="e2e2d-137">You should use this pattern whenever you implement <xref:System.IDisposable> on any type that isn't `sealed` (`NotInheritable` in Visual Basic).</span></span>  
  
-   <span data-ttu-id="e2e2d-138">Należy podać jedną publiczną, niewirtualną <xref:System.IDisposable.Dispose> metodę i chronioną metodę wirtualną. `Dispose(Boolean disposing)`</span><span class="sxs-lookup"><span data-stu-id="e2e2d-138">It should provide one public, non-virtual <xref:System.IDisposable.Dispose> method and a protected virtual `Dispose(Boolean disposing)` method.</span></span>  
  
-   <span data-ttu-id="e2e2d-139">Metoda musi być wywoływana `Dispose(true)` i powinna pomijać finalizowanie wydajności. <xref:System.IDisposable.Dispose></span><span class="sxs-lookup"><span data-stu-id="e2e2d-139">The <xref:System.IDisposable.Dispose> method must call `Dispose(true)` and should suppress finalization for performance.</span></span>  
  
-   <span data-ttu-id="e2e2d-140">Typ podstawowy nie powinien zawierać żadnych finalizatorów.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-140">The base type should not include any finalizers.</span></span>  
  
 <span data-ttu-id="e2e2d-141">Poniższy fragment kodu odzwierciedla wzorzec Dispose dla klas bazowych.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-141">The following code fragment reflects the dispose pattern for base classes.</span></span> <span data-ttu-id="e2e2d-142">Przyjęto założenie, że typ nie przesłania <xref:System.Object.Finalize%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-142">It assumes that your type does not override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.IDisposable#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base1.cs#3)]
 [!code-vb[System.IDisposable#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base1.vb#3)]  
  
 <span data-ttu-id="e2e2d-143">Jeśli zastąpisz <xref:System.Object.Finalize%2A?displayProperty=nameWithType> metodę, Klasa powinna zaimplementować następujący wzorzec.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-143">If you do override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method, your class should implement the following pattern.</span></span>  
  
 [!code-csharp[System.IDisposable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base2.cs#5)]
 [!code-vb[System.IDisposable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base2.vb#5)]  
  
 <span data-ttu-id="e2e2d-144">Podklasy powinny implementować wzorzec jednorazowy w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="e2e2d-144">Subclasses should implement the disposable pattern as follows:</span></span>  
  
-   <span data-ttu-id="e2e2d-145">Muszą przesłonić `Dispose(Boolean)` i wywołać implementację `Dispose(Boolean)` klasy bazowej.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-145">They must override `Dispose(Boolean)` and call the base class `Dispose(Boolean)` implementation.</span></span>  
  
-   <span data-ttu-id="e2e2d-146">W razie konieczności mogą one zapewnić finalizator.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-146">They can provide a finalizer if needed.</span></span> <span data-ttu-id="e2e2d-147">Finalizator musi wywołać metodę `Dispose(false)`.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-147">The finalizer must call `Dispose(false)`.</span></span>  
  
 <span data-ttu-id="e2e2d-148">Należy zauważyć, że klasy pochodne nie implementują <xref:System.IDisposable> interfejsu i nie zawierają <xref:System.IDisposable.Dispose%2A> metody bez parametrów.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-148">Note that derived classes do not themselves implement the <xref:System.IDisposable> interface and do not include a parameterless <xref:System.IDisposable.Dispose%2A> method.</span></span> <span data-ttu-id="e2e2d-149">Przesłaniają one tylko metodę klasy `Dispose(Boolean)` bazowej.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-149">They only override the base class `Dispose(Boolean)` method.</span></span>  
  
 <span data-ttu-id="e2e2d-150">Poniższy fragment kodu odzwierciedla wzorzec Dispose dla klas pochodnych.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-150">The following code fragment reflects the dispose pattern for derived classes.</span></span> <span data-ttu-id="e2e2d-151">Przyjęto założenie, że typ nie przesłania <xref:System.Object.Finalize%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-151">It assumes that your type does not override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.IDisposable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/derived1.cs#4)]
 [!code-vb[System.IDisposable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/derived1.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="e2e2d-152">Poniższy przykład ilustruje sposób tworzenia klasy zasobów, która implementuje <xref:System.IDisposable> interfejs.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-152">The following example demonstrates how to create a resource class that implements the <xref:System.IDisposable> interface.</span></span>  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" />
    <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md"><span data-ttu-id="e2e2d-153">Implementacja metody Dispose</span><span class="sxs-lookup"><span data-stu-id="e2e2d-153">Implementing a Dispose Method</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IDisposable.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit" Usage="iDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e2e2d-154">Wykonuje zadania zdefiniowane przez aplikację skojarzone z uwalnianiem, zwalnianiem lub resetowaniem niezarządzanych zasobów.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-154">Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2e2d-155">Ta metoda służy do zamykania lub zwalniania niezarządzanych zasobów, takich jak pliki, strumienie i uchwyty przechowywane przez wystąpienie klasy implementującej ten interfejs.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-155">Use this method to close or release unmanaged resources such as files, streams, and handles held by an instance of the class that implements this interface.</span></span> <span data-ttu-id="e2e2d-156">Zgodnie z Konwencją ta metoda jest używana dla wszystkich zadań związanych z zwalnianiem zasobów przechowywanych przez obiekt lub przygotowywanie obiektu do ponownego użycia.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-156">By convention, this method is used for all tasks associated with freeing resources held by an object, or preparing an object for reuse.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="e2e2d-157">Jeśli używasz klasy implementującej <xref:System.IDisposable> interfejs, należy wywołać jej <xref:System.IDisposable.Dispose%2A> implementację po zakończeniu korzystania z klasy.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-157">If you are using a class that implements the <xref:System.IDisposable> interface, you should call its <xref:System.IDisposable.Dispose%2A> implementation when you are finished using the class.</span></span> <span data-ttu-id="e2e2d-158">Aby uzyskać więcej informacji, zobacz sekcję "Używanie obiektu implementującego interfejs IDisposable" w <xref:System.IDisposable> temacie.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-158">For more information, see the "Using an object that implements IDisposable" section in the <xref:System.IDisposable> topic.</span></span>  
  
 <span data-ttu-id="e2e2d-159">Podczas implementowania tej metody upewnij się, że wszystkie przechowywane zasoby są zwolnione przez propagowanie wywołania przez hierarchię zawierania.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-159">When implementing this method, ensure that all held resources are freed by propagating the call through the containment hierarchy.</span></span> <span data-ttu-id="e2e2d-160">Na przykład jeśli obiekt a przydzieli obiekt b, a obiekt b przydzieli obiekt c, <xref:System.IDisposable.Dispose%2A> implementacja musi wywoływać <xref:System.IDisposable.Dispose%2A> na B, <xref:System.IDisposable.Dispose%2A> która musi nawiązać wywołanie w C.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-160">For example, if an object A allocates an object B, and object B allocates an object C, then A's <xref:System.IDisposable.Dispose%2A> implementation must call <xref:System.IDisposable.Dispose%2A> on B, which must in turn call <xref:System.IDisposable.Dispose%2A> on C.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e2e2d-161">C++ Kompilator obsługuje deterministyczne usuwanie zasobów i nie zezwala na bezpośrednią implementację <xref:System.IDisposable.Dispose%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-161">The C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="e2e2d-162">Obiekt musi również wywołać <xref:System.IDisposable.Dispose%2A> metodę klasy bazowej, jeśli implementuje <xref:System.IDisposable>klasy bazowej.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-162">An object must also call the <xref:System.IDisposable.Dispose%2A> method of its base class if the base class implements <xref:System.IDisposable>.</span></span> <span data-ttu-id="e2e2d-163">Aby uzyskać więcej informacji na <xref:System.IDisposable> temat implementowania klasy bazowej i jej podklas, zobacz sekcję "IDisposable i Hierarchia dziedziczenia" <xref:System.IDisposable> w temacie.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-163">For more information about implementing <xref:System.IDisposable> on a base class and its subclasses, see the "IDisposable and the inheritance hierarchy" section in the <xref:System.IDisposable> topic.</span></span>  
  
 <span data-ttu-id="e2e2d-164">Jeśli <xref:System.IDisposable.Dispose%2A> metoda obiektu jest wywoływana więcej niż raz, obiekt musi zignorować wszystkie wywołania po pierwszej.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-164">If an object's <xref:System.IDisposable.Dispose%2A> method is called more than once, the object must ignore all calls after the first one.</span></span> <span data-ttu-id="e2e2d-165">Obiekt nie może zgłosić wyjątku, jeśli jego <xref:System.IDisposable.Dispose%2A> Metoda jest wywoływana wiele razy.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-165">The object must not throw an exception if its <xref:System.IDisposable.Dispose%2A> method is called multiple times.</span></span> <span data-ttu-id="e2e2d-166">Metody wystąpienia inne niż <xref:System.IDisposable.Dispose%2A> mogą zgłosić, <xref:System.ObjectDisposedException> gdy zasoby zostały już usunięte.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-166">Instance methods other than <xref:System.IDisposable.Dispose%2A> can throw an <xref:System.ObjectDisposedException> when resources are already disposed.</span></span>  
  
 <span data-ttu-id="e2e2d-167">Użytkownicy mogą oczekiwać, że typ zasobu używa określonej konwencji do określenia przydzielonych Stanów, a stan zwolniony.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-167">Users might expect a resource type to use a particular convention to denote an allocated state versus a freed state.</span></span> <span data-ttu-id="e2e2d-168">Przykładem tego są klasy strumienia, które tradycyjnie uważa się za otwarte lub zamknięte.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-168">An example of this is stream classes, which are traditionally thought of as open or closed.</span></span> <span data-ttu-id="e2e2d-169">Realizator klasy, która ma taką Konwencję, może zdecydować się na zaimplementowanie metody publicznej o dostosowanej nazwie, takiej `Close`jak, która <xref:System.IDisposable.Dispose%2A> wywołuje metodę.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-169">The implementer of a class that has such a convention might choose to implement a public method with a customized name, such as `Close`, that calls the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="e2e2d-170">Ponieważ metoda musi zostać wywołana jawnie, zawsze występuje niebezpieczeństwo niezarządzanych zasobów, ponieważ nie można <xref:System.IDisposable.Dispose%2A> wywołać metody przez odbiorcę obiektu. <xref:System.IDisposable.Dispose%2A></span><span class="sxs-lookup"><span data-stu-id="e2e2d-170">Because the <xref:System.IDisposable.Dispose%2A> method must be called explicitly, there is always a danger that the unmanaged resources will not be released, because the consumer of an object fails to call its <xref:System.IDisposable.Dispose%2A> method.</span></span> <span data-ttu-id="e2e2d-171">Istnieją dwa sposoby na uniknięcie tego:</span><span class="sxs-lookup"><span data-stu-id="e2e2d-171">There are two ways to avoid this:</span></span>  
  
-   <span data-ttu-id="e2e2d-172">Zawiń zasób zarządzany w obiekcie pochodnym <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-172">Wrap the managed resource in an object derived from <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e2e2d-173">Twoja <xref:System.IDisposable.Dispose%2A> implementacja <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> wywoła następnie metodę wystąpień. <xref:System.IDisposable.Dispose%2A></span><span class="sxs-lookup"><span data-stu-id="e2e2d-173">Your <xref:System.IDisposable.Dispose%2A> implementation then calls the <xref:System.IDisposable.Dispose%2A> method of the <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> instances.</span></span> <span data-ttu-id="e2e2d-174">Aby uzyskać więcej informacji, zobacz sekcję "alternatywa SafeHandle" w <xref:System.Object.Finalize%2A?displayProperty=nameWithType> temacie.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-174">For more information, see "The SafeHandle alternative" section in the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> topic.</span></span>  
  
-   <span data-ttu-id="e2e2d-175">Zaimplementuj finalizator, aby zwolnić zasoby, <xref:System.IDisposable.Dispose%2A> gdy nie jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-175">Implement a finalizer to free resources when <xref:System.IDisposable.Dispose%2A> is not called.</span></span> <span data-ttu-id="e2e2d-176">Domyślnie moduł zbierający elementy bezużyteczne automatycznie wywołuje finalizator obiektu przed odzyskiwaniem jego pamięci.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-176">By default, the garbage collector automatically calls an object's finalizer before reclaiming its memory.</span></span> <span data-ttu-id="e2e2d-177">Jednakże, jeśli <xref:System.IDisposable.Dispose%2A> Metoda została wywołana, zazwyczaj nie jest konieczne, aby moduł zbierający elementy bezużyteczne wywołał finalizator nieusuniętego obiektu.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-177">However, if the <xref:System.IDisposable.Dispose%2A> method has been called, it is typically unnecessary for the garbage collector to call the disposed object's finalizer.</span></span> <span data-ttu-id="e2e2d-178">Aby zapobiec automatycznemu finalizowaniu <xref:System.IDisposable.Dispose%2A> , implementacje mogą <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> wywołać metodę.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-178">To prevent automatic finalization, <xref:System.IDisposable.Dispose%2A> implementations can call the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="e2e2d-179">W przypadku korzystania z obiektu, który uzyskuje dostęp do niezarządzanych zasobów <xref:System.IO.StreamWriter>, takich jak, dobrym sposobem jest utworzenie wystąpienia `using` za pomocą instrukcji.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-179">When you use an object that accesses unmanaged resources, such as a <xref:System.IO.StreamWriter>, a good practice is to create the instance with a `using` statement.</span></span> <span data-ttu-id="e2e2d-180">Instrukcja automatycznie zamyka strumień i wywołuje <xref:System.IDisposable.Dispose%2A> na obiekcie, gdy kod, który go używa, został ukończony. `using`</span><span class="sxs-lookup"><span data-stu-id="e2e2d-180">The `using` statement automatically closes the stream and calls <xref:System.IDisposable.Dispose%2A> on the object when the code that is using it has completed.</span></span> <span data-ttu-id="e2e2d-181">Aby zapoznać się z przykładem <xref:System.IO.StreamWriter> , zobacz Klasa.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-181">For an example, see the <xref:System.IO.StreamWriter> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2e2d-182">Poniższy przykład pokazuje, jak można zaimplementować <xref:System.IDisposable.Dispose%2A> metodę.</span><span class="sxs-lookup"><span data-stu-id="e2e2d-182">The following example shows how you can implement the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md"><span data-ttu-id="e2e2d-183">Implementacja metody Dispose</span><span class="sxs-lookup"><span data-stu-id="e2e2d-183">Implementing a Dispose Method</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
