<Type Name="IDisposable" FullName="System.IDisposable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a86a39d23ff33ea43e699c68a046a3058b4a37d9" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69405983" /></Metadata><TypeSignature Language="C#" Value="public interface IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDisposable" />
  <TypeSignature Language="F#" Value="type IDisposable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Zapewnia mechanizm zwalniania niezarządzanych zasobów.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podstawowym zastosowaniem tego interfejsu jest zwolnienie niezarządzanych zasobów. Moduł wyrzucania elementów bezużytecznych automatycznie zwalnia pamięć przydzieloną do obiektu zarządzanego, gdy ten obiekt nie jest już używany. Nie jest jednak możliwe przewidywalność podczas odzyskiwania pamięci. Ponadto Moduł wyrzucania elementów bezużytecznych nie ma znajomości niezarządzanych zasobów, takich jak uchwyty okna, lub otwartych plików i strumieni.  
  
 <xref:System.IDisposable.Dispose%2A> Użyj metody tego interfejsu, aby jawnie zwolnić niezarządzane zasoby w połączeniu z modułem wyrzucania elementów bezużytecznych. Odbiorca obiektu może wywołać tę metodę, gdy obiekt nie jest już wymagany.  
  
> [!WARNING]
>  Jest to istotna zmiana, aby dodać <xref:System.IDisposable> interfejs do istniejącej klasy. Ponieważ wcześniej istniejący odbiorcy typu nie mogą wywoływać <xref:System.IDisposable.Dispose%2A>, nie można mieć pewności, że niezarządzane zasoby przechowywane przez dany typ zostaną wydane.  
  
 Ponieważ implementacja jest wywoływana przez odbiorcę typu, gdy zasoby należące do wystąpienia nie są już potrzebne, należy otoczyć obiekt zarządzany <xref:System.Runtime.InteropServices.SafeHandle> w (Zalecaną alternatywą) lub zastąpić <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> <xref:System.Object.Finalize%2A?displayProperty=nameWithType>zwalnianie niezarządzanych zasobów w przypadku, gdy konsument zapomni o wywołaniu <xref:System.IDisposable.Dispose%2A>.  
  
> [!IMPORTANT]
>  W .NET Framework C++ kompilator obsługuje deterministyczne usuwanie zasobów i nie zezwala na bezpośrednią implementację <xref:System.IDisposable.Dispose%2A> metody.  
  
 Szczegółowe omówienie sposobu używania tego interfejsu i <xref:System.Object.Finalize%2A?displayProperty=nameWithType> metody można znaleźć w temacie [odzyskiwanie pamięci](~/docs/standard/garbage-collection/index.md) i implementowanie [metody Dispose](~/docs/standard/garbage-collection/implementing-dispose.md) .  
  
## <a name="using-an-object-that-implements-idisposable"></a>Korzystanie z obiektu, który implementuje interfejs IDisposable  
 Jeśli aplikacja korzysta po prostu z obiektu, który implementuje <xref:System.IDisposable> interfejs, należy wywołać <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementację obiektu po zakończeniu korzystania z niego. W zależności od języka programowania można to zrobić na jeden z dwóch sposobów:  
  
-   Za pomocą konstrukcji języka, takiej jak `using` instrukcja w C# i Visual Basic.  
  
-   Przez <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> zapakowanie wywołania do implementacji `try` / `finally` w bloku.  
  
> [!NOTE]
>  Dokumentacja typów, które implementują <xref:System.IDisposable> ten fakt i zawiera przypomnienie do wywołania jej <xref:System.IDisposable.Dispose%2A> implementacji.  
  
<a name="Using"></a>   
### <a name="the-c-and-visual-basic-using-statement"></a>Instrukcja C# i Visual Basic Using  
 Jeśli język obsługuje konstrukcję taką jak instrukcja [using](~/docs/csharp/language-reference/keywords/using.md) w C# i instrukcji [using](~/docs/visual-basic/language-reference/statements/using-statement.md) w Visual Basic, można jej użyć zamiast jawnie wywołać <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> siebie. Poniższy przykład używa tego podejścia w definiowaniu `WordCount` klasy, która zachowuje informacje o pliku i liczbie wyrazów w nim.  
  
 [!code-csharp[System.IDisposable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling1.cs#1)]
 [!code-vb[System.IDisposable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling1.vb#1)]  
  
 `using` Instrukcja jest w rzeczywistości wygodną składnią. W czasie kompilacji kompilator języka implementuje język pośredni (IL) dla `try` / `finally` bloku.  
  
 Aby uzyskać więcej informacji na `using` temat instrukcji, zobacz [instrukcje using](~/docs/visual-basic/language-reference/statements/using-statement.md) lub [instrukcji using](~/docs/csharp/language-reference/keywords/using-statement.md) .  
  
### <a name="the-tryfinally-block"></a>Blok try/finally  
 Jeśli język programowania nie obsługuje `using` konstrukcji, takiej jak instrukcja w C# lub Visual Basic, lub jeśli wolisz nie używać, możesz wywołać <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementację z bloku `try` `finally` /Instrukcja. `finally` Poniższy przykład zamienia `using` blok w poprzednim / przykładzie `try` `finally` z blokiem.  
  
 [!code-csharp[System.IDisposable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling2.cs#2)]
 [!code-vb[System.IDisposable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling2.vb#2)]  
  
 Aby uzyskać więcej informacji na `try` temat / `finally` wzorca, zobacz [try... Catch... Finally instrukcji](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md), [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md)lub [try-finally](https://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82).  
  
## <a name="implementing-idisposable"></a>Implementowanie interfejsu IDisposable  
 Należy zaimplementować <xref:System.IDisposable> tylko wtedy, gdy typ korzysta z zasobów niezarządzanych bezpośrednio. Odbiorcy Twojego typu mogą wywoływać <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementację, aby zwolnić zasoby, gdy wystąpienie nie jest już potrzebne. Aby obsłużyć przypadki, w których ich <xref:System.IDisposable.Dispose%2A>wywołanie nie powiodło się, należy użyć klasy <xref:System.Runtime.InteropServices.SafeHandle> pochodnej z do zawijania niezarządzanych zasobów <xref:System.Object.Finalize%2A?displayProperty=nameWithType> lub należy zastąpić metodę dla typu referencyjnego. W każdym z tych przypadków należy użyć <xref:System.IDisposable.Dispose%2A> metody do wykonania dowolnego oczyszczania po użyciu zasobów niezarządzanych, takich jak zwalnianie, zwalnianie lub resetowanie niezarządzanych zasobów.  
  
> [!IMPORTANT]
>  W przypadku definiowania klasy bazowej korzystającej z zasobów niezarządzanych, która ma, lub może mieć, podklasy, które powinny zostać usunięte, należy zaimplementować <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> metodę i zapewnić drugie `Dispose`Przeciążenie, jak opisano w następnym Paragraf.  
  
<a name="BaseClasses"></a>   
## <a name="idisposable-and-the-inheritance-hierarchy"></a>IDisposable i Hierarchia dziedziczenia  
 Klasa bazowa z podklasami, które powinny być jednorazowe, <xref:System.IDisposable> musi być implementowana w następujący sposób. Tego wzorca należy używać przy każdej implementacji <xref:System.IDisposable> dla dowolnego typu, który nie jest`NotInheritable` `sealed` (w Visual Basic).  
  
-   Należy podać jedną publiczną, niewirtualną <xref:System.IDisposable.Dispose> metodę i chronioną metodę wirtualną. `Dispose(Boolean disposing)`  
  
-   Metoda musi być wywoływana `Dispose(true)` i powinna pomijać finalizowanie wydajności. <xref:System.IDisposable.Dispose>  
  
-   Typ podstawowy nie powinien zawierać żadnych finalizatorów.  
  
 Poniższy fragment kodu odzwierciedla wzorzec Dispose dla klas bazowych. Przyjęto założenie, że typ nie przesłania <xref:System.Object.Finalize%2A?displayProperty=nameWithType> metody.  
  
 [!code-csharp[System.IDisposable#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base1.cs#3)]
 [!code-vb[System.IDisposable#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base1.vb#3)]  
  
 Jeśli zastąpisz <xref:System.Object.Finalize%2A?displayProperty=nameWithType> metodę, Klasa powinna zaimplementować następujący wzorzec.  
  
 [!code-csharp[System.IDisposable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base2.cs#5)]
 [!code-vb[System.IDisposable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base2.vb#5)]  
  
 Podklasy powinny implementować wzorzec jednorazowy w następujący sposób:  
  
-   Muszą przesłonić `Dispose(Boolean)` i wywołać implementację `Dispose(Boolean)` klasy bazowej.  
  
-   W razie konieczności mogą one zapewnić finalizator. Finalizator musi wywołać metodę `Dispose(false)`.  
  
 Należy zauważyć, że klasy pochodne nie implementują <xref:System.IDisposable> interfejsu i nie zawierają <xref:System.IDisposable.Dispose%2A> metody bez parametrów. Przesłaniają one tylko metodę klasy `Dispose(Boolean)` bazowej.  
  
 Poniższy fragment kodu odzwierciedla wzorzec Dispose dla klas pochodnych. Przyjęto założenie, że typ nie przesłania <xref:System.Object.Finalize%2A?displayProperty=nameWithType> metody.  
  
 [!code-csharp[System.IDisposable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/derived1.cs#4)]
 [!code-vb[System.IDisposable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/derived1.vb#4)]  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób tworzenia klasy zasobów, która implementuje <xref:System.IDisposable> interfejs.  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" />
    <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md">Implementacja metody Dispose</related>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IDisposable.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit" Usage="iDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wykonuje zadania zdefiniowane przez aplikację skojarzone z uwalnianiem, zwalnianiem lub resetowaniem niezarządzanych zasobów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda służy do zamykania lub zwalniania niezarządzanych zasobów, takich jak pliki, strumienie i uchwyty przechowywane przez wystąpienie klasy implementującej ten interfejs. Zgodnie z Konwencją ta metoda jest używana dla wszystkich zadań związanych z zwalnianiem zasobów przechowywanych przez obiekt lub przygotowywanie obiektu do ponownego użycia.  
  
> [!WARNING]
>  Jeśli używasz klasy implementującej <xref:System.IDisposable> interfejs, należy wywołać jej <xref:System.IDisposable.Dispose%2A> implementację po zakończeniu korzystania z klasy. Aby uzyskać więcej informacji, zobacz sekcję "Używanie obiektu implementującego interfejs IDisposable" w <xref:System.IDisposable> temacie.  
  
 Podczas implementowania tej metody upewnij się, że wszystkie przechowywane zasoby są zwolnione przez propagowanie wywołania przez hierarchię zawierania. Na przykład jeśli obiekt a przydzieli obiekt b, a obiekt b przydzieli obiekt c, <xref:System.IDisposable.Dispose%2A> implementacja musi wywoływać <xref:System.IDisposable.Dispose%2A> na B, <xref:System.IDisposable.Dispose%2A> która musi nawiązać wywołanie w C.  
  
> [!IMPORTANT]
>  C++ Kompilator obsługuje deterministyczne usuwanie zasobów i nie zezwala na bezpośrednią implementację <xref:System.IDisposable.Dispose%2A> metody.  
  
 Obiekt musi również wywołać <xref:System.IDisposable.Dispose%2A> metodę klasy bazowej, jeśli implementuje <xref:System.IDisposable>klasy bazowej. Aby uzyskać więcej informacji na <xref:System.IDisposable> temat implementowania klasy bazowej i jej podklas, zobacz sekcję "IDisposable i Hierarchia dziedziczenia" <xref:System.IDisposable> w temacie.  
  
 Jeśli <xref:System.IDisposable.Dispose%2A> metoda obiektu jest wywoływana więcej niż raz, obiekt musi zignorować wszystkie wywołania po pierwszej. Obiekt nie może zgłosić wyjątku, jeśli jego <xref:System.IDisposable.Dispose%2A> Metoda jest wywoływana wiele razy. Metody wystąpienia inne niż <xref:System.IDisposable.Dispose%2A> mogą zgłosić, <xref:System.ObjectDisposedException> gdy zasoby zostały już usunięte.  
  
 Użytkownicy mogą oczekiwać, że typ zasobu używa określonej konwencji do określenia przydzielonych Stanów, a stan zwolniony. Przykładem tego są klasy strumienia, które tradycyjnie uważa się za otwarte lub zamknięte. Realizator klasy, która ma taką Konwencję, może zdecydować się na zaimplementowanie metody publicznej o dostosowanej nazwie, takiej `Close`jak, która <xref:System.IDisposable.Dispose%2A> wywołuje metodę.  
  
 Ponieważ metoda musi zostać wywołana jawnie, zawsze występuje niebezpieczeństwo niezarządzanych zasobów, ponieważ nie można <xref:System.IDisposable.Dispose%2A> wywołać metody przez odbiorcę obiektu. <xref:System.IDisposable.Dispose%2A> Istnieją dwa sposoby na uniknięcie tego:  
  
-   Zawiń zasób zarządzany w obiekcie pochodnym <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>. Twoja <xref:System.IDisposable.Dispose%2A> implementacja <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> wywoła następnie metodę wystąpień. <xref:System.IDisposable.Dispose%2A> Aby uzyskać więcej informacji, zobacz sekcję "alternatywa SafeHandle" w <xref:System.Object.Finalize%2A?displayProperty=nameWithType> temacie.  
  
-   Zaimplementuj finalizator, aby zwolnić zasoby, <xref:System.IDisposable.Dispose%2A> gdy nie jest wywoływana. Domyślnie moduł zbierający elementy bezużyteczne automatycznie wywołuje finalizator obiektu przed odzyskiwaniem jego pamięci. Jednakże, jeśli <xref:System.IDisposable.Dispose%2A> Metoda została wywołana, zazwyczaj nie jest konieczne, aby moduł zbierający elementy bezużyteczne wywołał finalizator nieusuniętego obiektu. Aby zapobiec automatycznemu finalizowaniu <xref:System.IDisposable.Dispose%2A> , implementacje mogą <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> wywołać metodę.  
  
 W przypadku korzystania z obiektu, który uzyskuje dostęp do niezarządzanych zasobów <xref:System.IO.StreamWriter>, takich jak, dobrym sposobem jest utworzenie wystąpienia `using` za pomocą instrukcji. Instrukcja automatycznie zamyka strumień i wywołuje <xref:System.IDisposable.Dispose%2A> na obiekcie, gdy kod, który go używa, został ukończony. `using` Aby zapoznać się z przykładem <xref:System.IO.StreamWriter> , zobacz Klasa.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak można zaimplementować <xref:System.IDisposable.Dispose%2A> metodę.  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md">Implementacja metody Dispose</related>
      </Docs>
    </Member>
  </Members>
</Type>
