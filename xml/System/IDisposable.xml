<Type Name="IDisposable" FullName="System.IDisposable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0173afb2044bf3eff6d9c5187d74f826f4c4fa77" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58733150" /></Metadata><TypeSignature Language="C#" Value="public interface IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDisposable" />
  <TypeSignature Language="F#" Value="type IDisposable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="5db55-101">Udostępnia mechanizm do zwalniania niezarządzanych zasobów.</span><span class="sxs-lookup"><span data-stu-id="5db55-101">Provides a mechanism for releasing unmanaged resources.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5db55-102">Podstawowym zastosowaniem tego interfejsu jest zwolnienie niezarządzanych zasobów.</span><span class="sxs-lookup"><span data-stu-id="5db55-102">The primary use of this interface is to release unmanaged resources.</span></span> <span data-ttu-id="5db55-103">Moduł odśmiecania pamięci automatycznie zwalnia pamięć przydzielona do obiektu zarządzanego, gdy ten obiekt nie jest już używana.</span><span class="sxs-lookup"><span data-stu-id="5db55-103">The garbage collector automatically releases the memory allocated to a managed object when that object is no longer used.</span></span> <span data-ttu-id="5db55-104">Jednak nie jest możliwe do przewidzenia, gdy nastąpi wyrzucania elementów bezużytecznych.</span><span class="sxs-lookup"><span data-stu-id="5db55-104">However, it is not possible to predict when garbage collection will occur.</span></span> <span data-ttu-id="5db55-105">Ponadto moduł odśmiecania pamięci nie zna niezarządzane zasoby, takie jak okna obsługi lub Otwórz plików i strumieni.</span><span class="sxs-lookup"><span data-stu-id="5db55-105">Furthermore, the garbage collector has no knowledge of unmanaged resources such as window handles, or open files and streams.</span></span>  
  
 <span data-ttu-id="5db55-106">Użyj <xref:System.IDisposable.Dispose%2A> metody tego interfejsu jawnie zwolnić niezarządzane zasoby w połączeniu z modułu odśmiecania pamięci.</span><span class="sxs-lookup"><span data-stu-id="5db55-106">Use the <xref:System.IDisposable.Dispose%2A> method of this interface to explicitly release unmanaged resources in conjunction with the garbage collector.</span></span> <span data-ttu-id="5db55-107">Tę metodę można wywołać konsumenta obiektu, gdy obiekt nie jest już potrzebny.</span><span class="sxs-lookup"><span data-stu-id="5db55-107">The consumer of an object can call this method when the object is no longer needed.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="5db55-108">Jest istotnej zmiany, aby dodać <xref:System.IDisposable> interfejsu do istniejącej klasy.</span><span class="sxs-lookup"><span data-stu-id="5db55-108">It is a breaking change to add the <xref:System.IDisposable> interface to an existing class.</span></span> <span data-ttu-id="5db55-109">Ponieważ nie można wywołać istniejące konsumenci typu będą <xref:System.IDisposable.Dispose%2A>, nie może mieć pewności, zwolnienie niezarządzanych zasobów w posiadaniu danego typu.</span><span class="sxs-lookup"><span data-stu-id="5db55-109">Because pre-existing consumers of your type cannot call <xref:System.IDisposable.Dispose%2A>, you cannot be certain that unmanaged resources held by your type will be released.</span></span>  
  
 <span data-ttu-id="5db55-110">Ponieważ <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementacja jest wywoływana przez konsumenta typu, gdy zasoby należące do wystąpienia nie są już potrzebne, albo zawijania obiekt zarządzany w <xref:System.Runtime.InteropServices.SafeHandle> (zalecaną alternatywą) lub należy zastąpić <xref:System.Object.Finalize%2A?displayProperty=nameWithType>do zwalniania niezarządzanych zasobów, w przypadku, gdy użytkownik zapomni wywołać <xref:System.IDisposable.Dispose%2A>.</span><span class="sxs-lookup"><span data-stu-id="5db55-110">Because the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation is called by the consumer of a type when the resources owned by an instance are no longer needed, you should either wrap the managed object in a <xref:System.Runtime.InteropServices.SafeHandle> (the recommended alternative), or you should override <xref:System.Object.Finalize%2A?displayProperty=nameWithType> to free unmanaged resources in the event that the consumer forgets to call <xref:System.IDisposable.Dispose%2A>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="5db55-111">W .NET Framework, kompilator języka C++ obsługuje deterministycznej likwidacji zasobów i nie zezwala na bezpośrednią implementację <xref:System.IDisposable.Dispose%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="5db55-111">In the .NET Framework, the C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="5db55-112">Szczegółowe omówienie o tym, jak ten interfejs i <xref:System.Object.Finalize%2A?displayProperty=nameWithType> metody są używane, zobacz [wyrzucania elementów bezużytecznych](~/docs/standard/garbage-collection/index.md) i [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md) tematów.</span><span class="sxs-lookup"><span data-stu-id="5db55-112">For a detailed discussion about how this interface and the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method are used, see the [Garbage Collection](~/docs/standard/garbage-collection/index.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md) topics.</span></span>  
  
## <a name="using-an-object-that-implements-idisposable"></a><span data-ttu-id="5db55-113">Za pomocą obiektu, który implementuje interfejs IDisposable</span><span class="sxs-lookup"><span data-stu-id="5db55-113">Using an object that implements IDisposable</span></span>  
 <span data-ttu-id="5db55-114">Jeśli aplikacja używa tylko obiekt, który implementuje <xref:System.IDisposable> interfejsu, należy wywołać obiektu <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> wykonania po zakończeniu korzystania z niego.</span><span class="sxs-lookup"><span data-stu-id="5db55-114">If your app simply uses an object that implements the <xref:System.IDisposable> interface, you should call the object's <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation when you are finished using it.</span></span> <span data-ttu-id="5db55-115">W zależności od języka programowania to zrobić na dwa sposoby:</span><span class="sxs-lookup"><span data-stu-id="5db55-115">Depending on your programming language, you can do this in one of two ways:</span></span>  
  
-   <span data-ttu-id="5db55-116">Przy użyciu języka takich jak skonstruować `using` instrukcji w języku C# i Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5db55-116">By using a language construct such as the `using` statement in C# and Visual Basic.</span></span>  
  
-   <span data-ttu-id="5db55-117">Dzięki zawijaniu wywołanie <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementacji `try` / `finally` bloku.</span><span class="sxs-lookup"><span data-stu-id="5db55-117">By wrapping the call to the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation in a `try`/`finally` block.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5db55-118">Dokumentacja typami, które implementują <xref:System.IDisposable> należy pamiętać, że fakt i dołączyć przypomnienie do wywoływania jego <xref:System.IDisposable.Dispose%2A> implementacji.</span><span class="sxs-lookup"><span data-stu-id="5db55-118">Documentation for types that implement <xref:System.IDisposable> note that fact and include a reminder to call its <xref:System.IDisposable.Dispose%2A> implementation.</span></span>  
  
<a name="Using"></a>   
### <a name="the-c-and-visual-basic-using-statement"></a><span data-ttu-id="5db55-119">Instrukcja języka C# i Visual Basic przy użyciu</span><span class="sxs-lookup"><span data-stu-id="5db55-119">The C# and Visual Basic Using statement</span></span>  
 <span data-ttu-id="5db55-120">Jeśli język obsługuje konstrukcję, takie jak [przy użyciu](~/docs/csharp/language-reference/keywords/using.md) instrukcji w języku C# i [Using](~/docs/visual-basic/language-reference/statements/using-statement.md) instrukcji w języku Visual Basic, służy zamiast jawnego wywołania <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> samodzielnie.</span><span class="sxs-lookup"><span data-stu-id="5db55-120">If your language supports a construct such as the [using](~/docs/csharp/language-reference/keywords/using.md) statement in C# and the [Using](~/docs/visual-basic/language-reference/statements/using-statement.md) statement in Visual Basic, you can use it instead of explicitly calling <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> yourself.</span></span> <span data-ttu-id="5db55-121">W poniższym przykładzie użyto tego podejścia, definiując `WordCount` klasę, która zachowuje informacje o pliku i liczbę słów w nim.</span><span class="sxs-lookup"><span data-stu-id="5db55-121">The following example uses this approach in defining a `WordCount` class that preserves information about a file and the number of words in it.</span></span>  
  
 [!code-csharp[System.IDisposable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling1.cs#1)]
 [!code-vb[System.IDisposable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling1.vb#1)]  
  
 <span data-ttu-id="5db55-122">`using` Instrukcja jest faktycznie udogodnienie składni.</span><span class="sxs-lookup"><span data-stu-id="5db55-122">The `using` statement is actually a syntactic convenience.</span></span> <span data-ttu-id="5db55-123">W czasie kompilacji kompilator języka implementuje języka pośredniego (IL) dla `try` / `finally` bloku.</span><span class="sxs-lookup"><span data-stu-id="5db55-123">At compile time, the language compiler implements the intermediate language (IL) for a `try`/`finally` block.</span></span>  
  
 <span data-ttu-id="5db55-124">Aby uzyskać więcej informacji na temat `using` poufności informacji, zobacz [instrukcji Using](~/docs/visual-basic/language-reference/statements/using-statement.md) lub [za pomocą instrukcji](~/docs/csharp/language-reference/keywords/using-statement.md) tematów.</span><span class="sxs-lookup"><span data-stu-id="5db55-124">For more information about the `using` statement, see the [Using Statement](~/docs/visual-basic/language-reference/statements/using-statement.md) or [using Statement](~/docs/csharp/language-reference/keywords/using-statement.md) topics.</span></span>  
  
### <a name="the-tryfinally-block"></a><span data-ttu-id="5db55-125">Blok Try/Finally</span><span class="sxs-lookup"><span data-stu-id="5db55-125">The Try/Finally block</span></span>  
 <span data-ttu-id="5db55-126">Jeśli język programowania nie obsługuje konstrukcji, takich jak `using` instrukcji w języku C# lub Visual Basic, jeśli nie chcesz używać go, można też wywołać <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementację z `finally` bloku `try` / `finally` instrukcji.</span><span class="sxs-lookup"><span data-stu-id="5db55-126">If your programming language does not support a construct like the `using` statement in C# or Visual Basic, or if you prefer not to use it, you can call the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation from the `finally` block of a `try`/`finally` statement.</span></span> <span data-ttu-id="5db55-127">Poniższy przykład zastępuje `using` blok w poprzednim przykładzie, za pomocą `try` / `finally` bloku.</span><span class="sxs-lookup"><span data-stu-id="5db55-127">The following example replaces the `using` block in the previous example with a `try`/`finally` block.</span></span>  
  
 [!code-csharp[System.IDisposable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling2.cs#2)]
 [!code-vb[System.IDisposable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling2.vb#2)]  
  
 <span data-ttu-id="5db55-128">Aby uzyskać więcej informacji na temat `try` / `finally` wzorca, zobacz [spróbuj... CATCH... Na koniec instrukcji](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md), [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md), lub [try-finally — instrukcja](https://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82).</span><span class="sxs-lookup"><span data-stu-id="5db55-128">For more information about the `try`/`finally` pattern, see [Try...Catch...Finally Statement](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md), [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md), or [try-finally Statement](https://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82).</span></span>  
  
## <a name="implementing-idisposable"></a><span data-ttu-id="5db55-129">Implementowanie interfejsu IDisposable</span><span class="sxs-lookup"><span data-stu-id="5db55-129">Implementing IDisposable</span></span>  
 <span data-ttu-id="5db55-130">Należy zaimplementować <xref:System.IDisposable> tylko wtedy, gdy typu używa bezpośrednio niezarządzane zasoby.</span><span class="sxs-lookup"><span data-stu-id="5db55-130">You should implement <xref:System.IDisposable> only if your type uses unmanaged resources directly.</span></span> <span data-ttu-id="5db55-131">Konsumenci typu będą wywoływać usługi <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementacji, aby zwolnić zasoby, jeśli wystąpienie nie jest już potrzebny.</span><span class="sxs-lookup"><span data-stu-id="5db55-131">The consumers of your type can call your <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation to free resources when the instance is no longer needed.</span></span> <span data-ttu-id="5db55-132">Sposób obsługiwać przypadki, w których mógł wywołać <xref:System.IDisposable.Dispose%2A>, należy użyć klasą pochodną <xref:System.Runtime.InteropServices.SafeHandle> opakowywać niezarządzane zasoby, lub należy zastąpić <xref:System.Object.Finalize%2A?displayProperty=nameWithType> metody dla typu odwołania.</span><span class="sxs-lookup"><span data-stu-id="5db55-132">To handle cases in which they fail to call <xref:System.IDisposable.Dispose%2A>, you should either use a class derived from <xref:System.Runtime.InteropServices.SafeHandle> to wrap the unmanaged resources, or you should override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method for a reference type.</span></span> <span data-ttu-id="5db55-133">W obu przypadkach użyj <xref:System.IDisposable.Dispose%2A> metodę, aby wykonać dowolne oczyszczania jest konieczne po nim za pomocą niezarządzanych zasobów, takich jak zwalnianie lub resetowaniem zasobów niezarządzanych.</span><span class="sxs-lookup"><span data-stu-id="5db55-133">In either case, you use the <xref:System.IDisposable.Dispose%2A> method to perform whatever cleanup is necessary after using the unmanaged resources, such as freeing, releasing, or resetting the unmanaged resources.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="5db55-134">Jeśli jest definiowana klasa bazowa używające niezarządzanych zasobów i który ma, albo może mieć podklas, które powinny zostać usunięte, należy zaimplementować <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> metody i Podaj drugie przeciążenie `Dispose`, zgodnie z opisem w ciągu następnych sekcja.</span><span class="sxs-lookup"><span data-stu-id="5db55-134">If you are defining a base class that uses unmanaged resources and that either has, or is likely to have, subclasses that should be disposed, you should implement the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> method and provide a second overload of `Dispose`, as discussed in the next section.</span></span>  
  
<a name="BaseClasses"></a>   
## <a name="idisposable-and-the-inheritance-hierarchy"></a><span data-ttu-id="5db55-135">Interfejs IDisposable i hierarchii dziedziczenia</span><span class="sxs-lookup"><span data-stu-id="5db55-135">IDisposable and the inheritance hierarchy</span></span>  
 <span data-ttu-id="5db55-136">Klasa podstawowa z podklasami, które powinny być usuwalne, musi implementować <xref:System.IDisposable> w następujący sposób.</span><span class="sxs-lookup"><span data-stu-id="5db55-136">A base class with subclasses that should be disposable must implement <xref:System.IDisposable> as follows.</span></span> <span data-ttu-id="5db55-137">Tego wzorca należy używać zawsze wtedy, gdy należy zaimplementować <xref:System.IDisposable> z każdym typem, który nie jest `sealed` (`NotInheritable` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="5db55-137">You should use this pattern whenever you implement <xref:System.IDisposable> on any type that isn't `sealed` (`NotInheritable` in Visual Basic).</span></span>  
  
-   <span data-ttu-id="5db55-138">Powinna zapewnić jedną publiczną, niewirtualną <xref:System.IDisposable.Dispose> metody i chronioną wirtualnego `Dispose(Boolean disposing)` metody.</span><span class="sxs-lookup"><span data-stu-id="5db55-138">It should provide one public, non-virtual <xref:System.IDisposable.Dispose> method and a protected virtual `Dispose(Boolean disposing)` method.</span></span>  
  
-   <span data-ttu-id="5db55-139"><xref:System.IDisposable.Dispose> Należy wywołać metodę `Dispose(true)` i należy wstrzymać finalizację wydajności.</span><span class="sxs-lookup"><span data-stu-id="5db55-139">The <xref:System.IDisposable.Dispose> method must call `Dispose(true)` and should suppress finalization for performance.</span></span>  
  
-   <span data-ttu-id="5db55-140">Typ podstawowy nie może zawierać żadnych finalizatorów.</span><span class="sxs-lookup"><span data-stu-id="5db55-140">The base type should not include any finalizers.</span></span>  
  
 <span data-ttu-id="5db55-141">Poniższy fragment kodu odzwierciedla wzorca usuwania dla klas podstawowych.</span><span class="sxs-lookup"><span data-stu-id="5db55-141">The following code fragment reflects the dispose pattern for base classes.</span></span> <span data-ttu-id="5db55-142">Przyjęto założenie, że danego typu nie zastępuje <xref:System.Object.Finalize%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="5db55-142">It assumes that your type does not override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.IDisposable#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base1.cs#3)]
 [!code-vb[System.IDisposable#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base1.vb#3)]  
  
 <span data-ttu-id="5db55-143">Jeśli zastąpisz <xref:System.Object.Finalize%2A?displayProperty=nameWithType> metody, klasy należy zaimplementować następującego wzorca.</span><span class="sxs-lookup"><span data-stu-id="5db55-143">If you do override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method, your class should implement the following pattern.</span></span>  
  
 [!code-csharp[System.IDisposable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base2.cs#5)]
 [!code-vb[System.IDisposable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base2.vb#5)]  
  
 <span data-ttu-id="5db55-144">Podklasy powinny implementować wzory jednorazowe w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="5db55-144">Subclasses should implement the disposable pattern as follows:</span></span>  
  
-   <span data-ttu-id="5db55-145">Muszą one zastąpić `Dispose(Boolean)` i wywołać podstawowej klasy `Dispose(Boolean)` implementacji.</span><span class="sxs-lookup"><span data-stu-id="5db55-145">They must override `Dispose(Boolean)` and call the base class `Dispose(Boolean)` implementation.</span></span>  
  
-   <span data-ttu-id="5db55-146">Mogą dostarczyć finalizator, jeśli to konieczne.</span><span class="sxs-lookup"><span data-stu-id="5db55-146">They can provide a finalizer if needed.</span></span> <span data-ttu-id="5db55-147">Finalizator musi wywoływać `Dispose(false)`.</span><span class="sxs-lookup"><span data-stu-id="5db55-147">The finalizer must call `Dispose(false)`.</span></span>  
  
 <span data-ttu-id="5db55-148">Należy pamiętać, że klasy pochodne nie należy samodzielnie implementować <xref:System.IDisposable> interfejsu i nie obejmują bez parametrów <xref:System.IDisposable.Dispose%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="5db55-148">Note that derived classes do not themselves implement the <xref:System.IDisposable> interface and do not include a parameterless <xref:System.IDisposable.Dispose%2A> method.</span></span> <span data-ttu-id="5db55-149">Zastępują one tylko klasy bazowej `Dispose(Boolean)` metody.</span><span class="sxs-lookup"><span data-stu-id="5db55-149">They only override the base class `Dispose(Boolean)` method.</span></span>  
  
 <span data-ttu-id="5db55-150">Poniższy fragment kodu odzwierciedla wzorca usuwania dla klas pochodnych.</span><span class="sxs-lookup"><span data-stu-id="5db55-150">The following code fragment reflects the dispose pattern for derived classes.</span></span> <span data-ttu-id="5db55-151">Przyjęto założenie, że danego typu nie zastępuje <xref:System.Object.Finalize%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="5db55-151">It assumes that your type does not override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.IDisposable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/derived1.cs#4)]
 [!code-vb[System.IDisposable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/derived1.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="5db55-152">Poniższy przykład przedstawia sposób tworzenia klasy zasobów, która implementuje <xref:System.IDisposable> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="5db55-152">The following example demonstrates how to create a resource class that implements the <xref:System.IDisposable> interface.</span></span>  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" />
    <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md"><span data-ttu-id="5db55-153">Implementacja metody Dispose</span><span class="sxs-lookup"><span data-stu-id="5db55-153">Implementing a Dispose Method</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IDisposable.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit" Usage="iDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5db55-154">Wykonuje zadania zdefiniowane przez aplikację skojarzone z uwalnianiem, zwalnianiem lub resetowaniem niezarządzanych zasobów.</span><span class="sxs-lookup"><span data-stu-id="5db55-154">Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5db55-155">Ta metoda umożliwia zamknięcie lub zwolnić niezarządzane zasoby, takie jak pliki, strumieni i utrzymywane przez wystąpienie klasy, który implementuje ten interfejs obsługuje.</span><span class="sxs-lookup"><span data-stu-id="5db55-155">Use this method to close or release unmanaged resources such as files, streams, and handles held by an instance of the class that implements this interface.</span></span> <span data-ttu-id="5db55-156">Zgodnie z Konwencją, ta metoda jest używana dla wszystkich zadań skojarzonych z zwalnianiu zasobów w posiadaniu obiektu, albo przygotowaniem obiektu do ponownego wykorzystania.</span><span class="sxs-lookup"><span data-stu-id="5db55-156">By convention, this method is used for all tasks associated with freeing resources held by an object, or preparing an object for reuse.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="5db55-157">Jeśli używasz klasy, która implementuje <xref:System.IDisposable> interfejsu, należy wywołać jej <xref:System.IDisposable.Dispose%2A> wykonania po zakończeniu, za pomocą klasy.</span><span class="sxs-lookup"><span data-stu-id="5db55-157">If you are using a class that implements the <xref:System.IDisposable> interface, you should call its <xref:System.IDisposable.Dispose%2A> implementation when you are finished using the class.</span></span> <span data-ttu-id="5db55-158">Aby uzyskać więcej informacji, zobacz sekcję "Za pomocą obiektu implementującego interfejs IDisposable" w <xref:System.IDisposable> tematu.</span><span class="sxs-lookup"><span data-stu-id="5db55-158">For more information, see the "Using an object that implements IDisposable" section in the <xref:System.IDisposable> topic.</span></span>  
  
 <span data-ttu-id="5db55-159">Po wdrożeniu tej metody, upewnij się, wszystkie przechowywane, że zasoby są zwalniane poprzez propagowanie wywołanie przez hierarchię zawierania.</span><span class="sxs-lookup"><span data-stu-id="5db55-159">When implementing this method, ensure that all held resources are freed by propagating the call through the containment hierarchy.</span></span> <span data-ttu-id="5db55-160">Na przykład, jeśli obiekt A przydziela obiekt B, a obiekt B przydziela obiektu C, A następnie <xref:System.IDisposable.Dispose%2A> należy wywołać implementację <xref:System.IDisposable.Dispose%2A> na B, który z kolei wywołać <xref:System.IDisposable.Dispose%2A> w C.</span><span class="sxs-lookup"><span data-stu-id="5db55-160">For example, if an object A allocates an object B, and object B allocates an object C, then A's <xref:System.IDisposable.Dispose%2A> implementation must call <xref:System.IDisposable.Dispose%2A> on B, which must in turn call <xref:System.IDisposable.Dispose%2A> on C.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="5db55-161">Kompilator języka C++ obsługuje deterministycznej likwidacji zasobów i nie zezwala na bezpośrednią implementację <xref:System.IDisposable.Dispose%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="5db55-161">The C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="5db55-162">Obiekt musi także wywołać metodę <xref:System.IDisposable.Dispose%2A> metoda swojej klasy bazowej, jeśli klasa bazowa implementuje <xref:System.IDisposable>.</span><span class="sxs-lookup"><span data-stu-id="5db55-162">An object must also call the <xref:System.IDisposable.Dispose%2A> method of its base class if the base class implements <xref:System.IDisposable>.</span></span> <span data-ttu-id="5db55-163">Aby uzyskać więcej informacji o implementowaniu <xref:System.IDisposable> klasę podstawową oraz jej podklasach, zobacz sekcję "Interfejs IDisposable i hierarchii dziedziczenia" w <xref:System.IDisposable> tematu.</span><span class="sxs-lookup"><span data-stu-id="5db55-163">For more information about implementing <xref:System.IDisposable> on a base class and its subclasses, see the "IDisposable and the inheritance hierarchy" section in the <xref:System.IDisposable> topic.</span></span>  
  
 <span data-ttu-id="5db55-164">Jeśli obiekt <xref:System.IDisposable.Dispose%2A> metoda jest wywoływana więcej niż jeden raz, obiekt musi Ignoruj wszystkich wywołań po pierwszej.</span><span class="sxs-lookup"><span data-stu-id="5db55-164">If an object's <xref:System.IDisposable.Dispose%2A> method is called more than once, the object must ignore all calls after the first one.</span></span> <span data-ttu-id="5db55-165">Obiekt nie może zgłaszać wyjątek, jeśli jego <xref:System.IDisposable.Dispose%2A> metoda jest wywoływana wiele razy.</span><span class="sxs-lookup"><span data-stu-id="5db55-165">The object must not throw an exception if its <xref:System.IDisposable.Dispose%2A> method is called multiple times.</span></span> <span data-ttu-id="5db55-166">Wystąpienie metody innej niż <xref:System.IDisposable.Dispose%2A> może zgłosić <xref:System.ObjectDisposedException> gdy zasoby są już usunięte.</span><span class="sxs-lookup"><span data-stu-id="5db55-166">Instance methods other than <xref:System.IDisposable.Dispose%2A> can throw an <xref:System.ObjectDisposedException> when resources are already disposed.</span></span>  
  
 <span data-ttu-id="5db55-167">Użytkownicy mogą oczekiwać typu zasobu na potrzeby oznaczania przydzielonego stanu, a zwolnione stan określonej Konwencji.</span><span class="sxs-lookup"><span data-stu-id="5db55-167">Users might expect a resource type to use a particular convention to denote an allocated state versus a freed state.</span></span> <span data-ttu-id="5db55-168">Na przykład jest klasy strumieni, które są tradycyjnie uważane za otwarte lub zamknięte.</span><span class="sxs-lookup"><span data-stu-id="5db55-168">An example of this is stream classes, which are traditionally thought of as open or closed.</span></span> <span data-ttu-id="5db55-169">Implementujący klasy, która ma takie Konwencję może zadecydować o stosowaniu publiczną metodę o nazwie niestandardowe, takie jak `Close`, które wywołuje <xref:System.IDisposable.Dispose%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="5db55-169">The implementer of a class that has such a convention might choose to implement a public method with a customized name, such as `Close`, that calls the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="5db55-170">Ponieważ <xref:System.IDisposable.Dispose%2A> metoda musi zostać wywołana w sposób jawny, jest zawsze niebezpieczne niezarządzane zasoby nie będą zwolnione, ponieważ konsumenta obiektu nie wywoła jego <xref:System.IDisposable.Dispose%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="5db55-170">Because the <xref:System.IDisposable.Dispose%2A> method must be called explicitly, there is always a danger that the unmanaged resources will not be released, because the consumer of an object fails to call its <xref:System.IDisposable.Dispose%2A> method.</span></span> <span data-ttu-id="5db55-171">Istnieją dwa sposoby, aby tego uniknąć:</span><span class="sxs-lookup"><span data-stu-id="5db55-171">There are two ways to avoid this:</span></span>  
  
-   <span data-ttu-id="5db55-172">OPAKOWYWANIE zasobów zarządzanych w obiekcie pochodną <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="5db55-172">Wrap the managed resource in an object derived from <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>.</span></span> <span data-ttu-id="5db55-173">Twoje <xref:System.IDisposable.Dispose%2A> następnie implementacja wywołuje <xref:System.IDisposable.Dispose%2A> metody <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> wystąpień.</span><span class="sxs-lookup"><span data-stu-id="5db55-173">Your <xref:System.IDisposable.Dispose%2A> implementation then calls the <xref:System.IDisposable.Dispose%2A> method of the <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> instances.</span></span> <span data-ttu-id="5db55-174">Aby uzyskać więcej informacji, zobacz sekcję "Alternatywa SafeHandle" w <xref:System.Object.Finalize%2A?displayProperty=nameWithType> tematu.</span><span class="sxs-lookup"><span data-stu-id="5db55-174">For more information, see "The SafeHandle alternative" section in the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> topic.</span></span>  
  
-   <span data-ttu-id="5db55-175">Implementuje finalizatora, aby zwolnić zasoby podczas <xref:System.IDisposable.Dispose%2A> nie zostanie wywołana.</span><span class="sxs-lookup"><span data-stu-id="5db55-175">Implement a finalizer to free resources when <xref:System.IDisposable.Dispose%2A> is not called.</span></span> <span data-ttu-id="5db55-176">Domyślnie moduł odśmiecania pamięci automatycznie wywołuje finalizatora obiektu przed odzyskiwanie pamięci.</span><span class="sxs-lookup"><span data-stu-id="5db55-176">By default, the garbage collector automatically calls an object's finalizer before reclaiming its memory.</span></span> <span data-ttu-id="5db55-177">Jednak jeśli <xref:System.IDisposable.Dispose%2A> metoda została wywołana, jest zazwyczaj konieczne w przypadku moduł garbage collector wywoływać finalizatory zlikwidowanego obiektu.</span><span class="sxs-lookup"><span data-stu-id="5db55-177">However, if the <xref:System.IDisposable.Dispose%2A> method has been called, it is typically unnecessary for the garbage collector to call the disposed object's finalizer.</span></span> <span data-ttu-id="5db55-178">Aby uniknąć automatycznego finalizacji <xref:System.IDisposable.Dispose%2A> implementacji może wywołać <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="5db55-178">To prevent automatic finalization, <xref:System.IDisposable.Dispose%2A> implementations can call the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="5db55-179">Kiedy używać obiekt, który uzyskuje dostęp do niezarządzanych zasobów, takich jak <xref:System.IO.StreamWriter>, dobrą praktyką jest, aby utworzyć wystąpienie z `using` instrukcji.</span><span class="sxs-lookup"><span data-stu-id="5db55-179">When you use an object that accesses unmanaged resources, such as a <xref:System.IO.StreamWriter>, a good practice is to create the instance with a `using` statement.</span></span> <span data-ttu-id="5db55-180">`using` Instrukcji automatycznie zamyka strumienia i wywołania <xref:System.IDisposable.Dispose%2A> obiektu po ukończeniu kod, który jest używany.</span><span class="sxs-lookup"><span data-stu-id="5db55-180">The `using` statement automatically closes the stream and calls <xref:System.IDisposable.Dispose%2A> on the object when the code that is using it has completed.</span></span> <span data-ttu-id="5db55-181">Aby uzyskać przykład, zobacz <xref:System.IO.StreamWriter> klasy.</span><span class="sxs-lookup"><span data-stu-id="5db55-181">For an example, see the <xref:System.IO.StreamWriter> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5db55-182">W poniższym przykładzie pokazano, jak można implementować <xref:System.IDisposable.Dispose%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="5db55-182">The following example shows how you can implement the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md"><span data-ttu-id="5db55-183">Implementacja metody Dispose</span><span class="sxs-lookup"><span data-stu-id="5db55-183">Implementing a Dispose Method</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>