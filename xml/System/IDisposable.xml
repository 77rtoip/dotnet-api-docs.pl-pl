<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IDisposable.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac50f129b9e6cc6b4ce4a818f23df9a72208cdccc21.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0f129b9e6cc6b4ce4a818f23df9a72208cdccc21</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IDisposable">
          <source>Provides a mechanism for releasing unmanaged resources.</source>
          <target state="translated">Udostępnia mechanizm służący do zwalniania niezarządzanych zasobów.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The primary use of this interface is to release unmanaged resources.</source>
          <target state="translated">Podstawowym zastosowaniem tego interfejsu jest, aby zwolnić zasoby niezarządzane.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The garbage collector automatically releases the memory allocated to a managed object when that object is no longer used.</source>
          <target state="translated">Moduł zbierający elementy bezużyteczne automatycznie zwalnia pamięć przydzielona do zarządzanego obiektu, gdy obiekt jest już używany.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>However, it is not possible to predict when garbage collection will occur.</source>
          <target state="translated">Jednak nie jest możliwe do przewidzenia, gdy nastąpi wyrzucanie elementów bezużytecznych.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>Furthermore, the garbage collector has no knowledge of unmanaged resources such as window handles, or open files and streams.</source>
          <target state="translated">Ponadto moduł garbage collector nie zna niezarządzane zasoby, takie jak dojścia do okna lub Otwórz pliki i strumienie.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>Use the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method of this interface to explicitly release unmanaged resources in conjunction with the garbage collector.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> metoda jawnie zwolnić niezarządzane zasoby w połączeniu z modułu zbierającego elementy bezużyteczne w tym interfejsie.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The consumer of an object can call this method when the object is no longer needed.</source>
          <target state="translated">Tę metodę można wywołać obiektu konsumenta, gdy obiekt jest już potrzebne.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>It is a breaking change to add the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface to an existing class.</source>
          <target state="translated">Jest to istotne zmiany, aby dodać <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interfejs do istniejącej klasy.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>Because pre-existing consumers of your type cannot call <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>, you cannot be certain that unmanaged resources held by your type will be released.</source>
          <target state="translated">Ponieważ już istniejących konsumentów tego typu nie można wywołać <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>, nie można mieć pewności, zostaną zwolnione niezarządzane zasoby zajmowane przez danego typu.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>Because the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> implementation is called by the consumer of a type when the resources owned by an instance are no longer needed, you should either wrap the managed object in a <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> (the recommended alternative), or you should override <ph id="ph3">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> to free unmanaged resources in the event that the consumer forgets to call <ph id="ph4">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>.</source>
          <target state="translated">Ponieważ <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> implementacji jest wywoływana przez użytkownika typu zasobów należących do wystąpienia są już potrzebne, albo zawijania obiektu zarządzanego w <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> (zalecaną alternatywą) lub powinny zastępować <ph id="ph3">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph>do zwalniania niezarządzanych zasobów, w przypadku, gdy użytkownik zapomni do wywołania <ph id="ph4">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>In the .NET Framework, the C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method.</source>
          <target state="translated">W programie .NET Framework kompilatora C++ obsługuje deterministyczne usuwania zasobów i nie zezwala na bezpośrednie implementacja <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>For a detailed discussion about how this interface and the <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> method are used, see the <bpt id="p1">[</bpt>Garbage Collection<ept id="p1">](http://msdn.microsoft.com/library/22b6cb97-0c80-4eeb-a2cf-5ed7655e37f9)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept> topics.</source>
          <target state="translated">Szczegółowe omówienie o tym, jak ten interfejs i <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> są używane metody, zobacz <bpt id="p1">[</bpt>wyrzucanie elementów bezużytecznych<ept id="p1">](http://msdn.microsoft.com/library/22b6cb97-0c80-4eeb-a2cf-5ed7655e37f9)</ept> i <bpt id="p2">[</bpt>implementacja metody Dispose<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept> tematów.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>Using an object that implements IDisposable</source>
          <target state="translated">Przy użyciu obiektu implementującego interfejs IDisposable</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>If your app simply uses an object that implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface, you should call the object's <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> implementation when you are finished using it.</source>
          <target state="translated">Jeśli aplikacja korzysta z po prostu obiekt, który implementuje <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interfejsu, należy wywołać obiektu <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> implementacji po zakończeniu korzystania z niego.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>Depending on your programming language, you can do this in one of two ways:</source>
          <target state="translated">W zależności od języka programowania można to zrobić na dwa sposoby:</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>By using a language construct such as the <ph id="ph1">`using`</ph> statement in C# and Visual Basic.</source>
          <target state="translated">Przy użyciu języka takich jak utworzyć <ph id="ph1">`using`</ph> instrukcji w języku C# i Visual Basic.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>By wrapping the call to the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> implementation in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`finally`</ph> block.</source>
          <target state="translated">Zawijania wywołanie <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> implementacja <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`finally`</ph> bloku.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>Documentation for types that implement <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> note that fact and include a reminder to call its <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> implementation.</source>
          <target state="translated">Dokumentację dla typów, które implementują <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> należy pamiętać, że faktów i dołączyć przypomnienie wywołać jej <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> implementacji.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The C# and Visual Basic Using statement</source>
          <target state="translated">C# i Visual Basic za pomocą instrukcji</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>If your language supports a construct such as the <bpt id="p1">[</bpt>using<ept id="p1">](~/docs/csharp/language-reference/keywords/using.md)</ept> statement in C# and the <bpt id="p2">[</bpt>Using<ept id="p2">](~/docs/visual-basic/language-reference/statements/using-statement.md)</ept> statement in Visual Basic, you can use it instead of explicitly calling <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> yourself.</source>
          <target state="translated">Jeśli język obsługuje konstrukcję, takich jak <bpt id="p1">[</bpt>przy użyciu<ept id="p1">](~/docs/csharp/language-reference/keywords/using.md)</ept> instrukcji w języku C# i <bpt id="p2">[</bpt>Using<ept id="p2">](~/docs/visual-basic/language-reference/statements/using-statement.md)</ept> instrukcji w języku Visual Basic, służy zamiast jawnie podczas wywoływania <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> samodzielnie.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The following example uses this approach in defining a <ph id="ph1">`WordCount`</ph> class that preserves information about a file and the number of words in it.</source>
          <target state="translated">Poniższy przykład korzysta z tej metody, definiując <ph id="ph1">`WordCount`</ph> klasy, która zachowuje informacje o pliku i liczbę słów w nim.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The <ph id="ph1">`using`</ph> statement is actually a syntactic convenience.</source>
          <target state="translated"><ph id="ph1">`using`</ph> Instrukcja jest rzeczywiście udogodnienie składni.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>At compile time, the language compiler implements the intermediate language (IL) for a <ph id="ph1">`try`</ph><ph id="ph2">/</ph><ph id="ph3">`finally`</ph> block.</source>
          <target state="translated">W czasie kompilacji, kompilator języka implementuje języku pośrednim (IL) dla <ph id="ph1">`try`</ph> <ph id="ph2">/</ph> <ph id="ph3">`finally`</ph> bloku.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>For more information about the <ph id="ph1">`using`</ph> statement, see the <bpt id="p1">[</bpt>Using Statement<ept id="p1">](~/docs/visual-basic/language-reference/statements/using-statement.md)</ept> or <bpt id="p2">[</bpt>using Statement<ept id="p2">](~/docs/csharp/language-reference/keywords/using-statement.md)</ept> topics.</source>
          <target state="translated">Aby uzyskać więcej informacji na temat <ph id="ph1">`using`</ph> instrukcji, zobacz <bpt id="p1">[</bpt>instrukcji Using<ept id="p1">](~/docs/visual-basic/language-reference/statements/using-statement.md)</ept> lub <bpt id="p2">[</bpt>za pomocą instrukcji<ept id="p2">](~/docs/csharp/language-reference/keywords/using-statement.md)</ept> tematów.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The Try/Finally block</source>
          <target state="translated">Blok Try/Finally</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>If your programming language does not support a construct like the <ph id="ph1">`using`</ph> statement in C# or Visual Basic, or if you prefer not to use it, you can call the <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> implementation from the <ph id="ph3">`finally`</ph> block of a <ph id="ph4">`try`</ph><ph id="ph5">/</ph><ph id="ph6">`finally`</ph> statement.</source>
          <target state="translated">Jeśli język programowania nie obsługuje konstrukcji, takich jak <ph id="ph1">`using`</ph> instrukcji w języku C# lub Visual Basic, lub jeśli nie chcesz jej użyć, należy wywołać <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> implementację z <ph id="ph3">`finally`</ph> zablokować z <ph id="ph4">`try`</ph> <ph id="ph5">/</ph> <ph id="ph6">`finally`</ph> instrukcji.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The following example replaces the <ph id="ph1">`using`</ph> block in the previous example with a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`finally`</ph> block.</source>
          <target state="translated">W poniższym przykładzie <ph id="ph1">`using`</ph> blok w poprzednim przykładzie z <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`finally`</ph> bloku.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>For more information about the <ph id="ph1">`try`</ph><ph id="ph2">/</ph><ph id="ph3">`finally`</ph> pattern, see <bpt id="p1">[</bpt>Try...Catch...Finally Statement<ept id="p1">](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept>, <bpt id="p2">[</bpt>try-finally<ept id="p2">](~/docs/csharp/language-reference/keywords/try-finally.md)</ept>, or <bpt id="p3">[</bpt>try-finally Statement<ept id="p3">](http://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji na temat <ph id="ph1">`try`</ph> <ph id="ph2">/</ph> <ph id="ph3">`finally`</ph> wzorca, zobacz <bpt id="p1">[</bpt>spróbuj... CATCH... Instrukcji finally<ept id="p1">](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept>, <bpt id="p2">[</bpt>try-finally<ept id="p2">](~/docs/csharp/language-reference/keywords/try-finally.md)</ept>, lub <bpt id="p3">[</bpt>try-finally — instrukcja<ept id="p3">](http://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82)</ept>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>Implementing IDisposable</source>
          <target state="translated">Implementacja interfejsu IDisposable</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>You should implement <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> only if your type uses unmanaged resources directly.</source>
          <target state="translated">Należy zaimplementować <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> tylko wtedy, gdy bezpośrednio z danym typem używa zasoby niezarządzane.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The consumers of your type can call your <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> implementation to free resources when the instance is no longer needed.</source>
          <target state="translated">Konsumenci tego typu można wywołać z <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> implementacji, aby zwolnić zasoby, gdy wystąpienie jest już potrzebne.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>To handle cases in which they fail to call <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>, you should either use a class derived from <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> to wrap the unmanaged resources, or you should override the <ph id="ph3">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> method for a reference type.</source>
          <target state="translated">Do obsługi przypadków, w których się one zakończyć niepowodzeniem do wywołania <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>, należy albo użyj klasą pochodną <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> opakowywać niezarządzane zasoby, lub powinny zastępować <ph id="ph3">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> metody dla typu odwołania.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>In either case, you use the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method to perform whatever cleanup is necessary after using the unmanaged resources, such as freeing, releasing, or resetting the unmanaged resources.</source>
          <target state="translated">W obu przypadkach można użyć <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> metodę w celu niezależnie od oczyszczania jest konieczne po użyciu niezarządzane zasoby, takie jak zwalnianie zwalnianiem lub resetowaniem zasobów niezarządzanych.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>If you are defining a base class that uses unmanaged resources and that either has, or is likely to have, subclasses that should be disposed, you should implement the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> method and provide a second overload of <ph id="ph2">`Dispose`</ph>, as discussed in the next section.</source>
          <target state="translated">Jeśli definiujesz klasę podstawową używającą zasoby niezarządzane i który ma, albo może mieć podklas, które powinny zostać usunięte, należy zaimplementować <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> — metoda i podaj drugi przeciążenia <ph id="ph2">`Dispose`</ph>, zgodnie z opisem w następnej sekcja.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>IDisposable and the inheritance hierarchy</source>
          <target state="translated">Interfejs IDisposable i Hierarchia dziedziczenia</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>A base class with subclasses that should be disposable must implement <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> as follows.</source>
          <target state="translated">Klasa podstawowa z podklas, które powinny być usuwalne musi implementować <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> w następujący sposób.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>You should use this pattern whenever you implement <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> on any type that isn't <ph id="ph2">`sealed`</ph> (<ph id="ph3">`NotInheritable`</ph> in Visual Basic).</source>
          <target state="translated">Należy użyć tego wzorca przy każdym zaimplementowaniem <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> na dowolnego typu, który nie jest <ph id="ph2">`sealed`</ph> (<ph id="ph3">`NotInheritable`</ph> w języku Visual Basic).</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>It should provide one public, non-virtual <ph id="ph1">&lt;xref:System.IDisposable.Dispose&gt;</ph> method and a protected virtual <ph id="ph2">`Dispose(Boolean disposing)`</ph> method.</source>
          <target state="translated">Powinien zawierać jedno publiczne-virtual <ph id="ph1">&lt;xref:System.IDisposable.Dispose&gt;</ph> — metoda i chronione wirtualnego <ph id="ph2">`Dispose(Boolean disposing)`</ph> metody.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The <ph id="ph1">&lt;xref:System.IDisposable.Dispose&gt;</ph> method must call <ph id="ph2">`Dispose(true)`</ph> and should suppress finalization for performance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IDisposable.Dispose&gt;</ph> Należy wywołać metodę <ph id="ph2">`Dispose(true)`</ph> i ma pomijać finalizacji wydajności.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The base type should not include any finalizers.</source>
          <target state="translated">Typ podstawowy nie może zawierać żadnych finalizatory.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The following code fragment reflects the dispose pattern for base classes.</source>
          <target state="translated">Poniższy fragment kodu odzwierciedla wzorzec dispose dla klas podstawowych.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>It assumes that your type does not override the <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Przyjęto założenie, że typu nie przesłania <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>If you do override the <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> method, your class should implement the following pattern.</source>
          <target state="translated">Jeśli zastąpienie <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> metody, klasy należy zaimplementować następującego wzorca.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>Subclasses should implement the disposable pattern as follows:</source>
          <target state="translated">Podklasy powinny implementować wzorzec rozporządzający w następujący sposób:</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>They must override <ph id="ph1">`Dispose(Boolean)`</ph> and call the base class <ph id="ph2">`Dispose(Boolean)`</ph> implementation.</source>
          <target state="translated">Zastępują one musi <ph id="ph1">`Dispose(Boolean)`</ph> i Wywołaj klasę bazową <ph id="ph2">`Dispose(Boolean)`</ph> implementacji.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>They can provide a finalizer if needed.</source>
          <target state="translated">W razie potrzeby, ich Podaj finalizator.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The finalizer must call <ph id="ph1">`Dispose(false)`</ph>.</source>
          <target state="translated">Należy wywołać finalizatora <ph id="ph1">`Dispose(false)`</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>Note that derived classes do not themselves implement the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface and do not include a parameterless <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method.</source>
          <target state="translated">Należy pamiętać, że klas pochodnych się implementuje <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interfejsu i nie ma bezparametrowego <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>They only override the base class <ph id="ph1">`Dispose(Boolean)`</ph> method.</source>
          <target state="translated">Zastępują one tylko klasę podstawową <ph id="ph1">`Dispose(Boolean)`</ph> metody.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The following code fragment reflects the dispose pattern for derived classes.</source>
          <target state="translated">Poniższy fragment kodu odzwierciedla wzorzec dispose dla klas pochodnych.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>It assumes that your type does not override the <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Przyjęto założenie, że typu nie przesłania <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The following example demonstrates how to create a resource class that implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">W poniższym przykładzie pokazano, jak utworzyć klasę zasobu, który implementuje <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interfejsu.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.IDisposable.Dispose">
          <source>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</source>
          <target state="translated">Wykonuje zadania zdefiniowane przez aplikację skojarzone z uwalnianiem, zwalnianiem lub resetowaniem niezarządzanych zasobów.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>Use this method to close or release unmanaged resources such as files, streams, and handles held by an instance of the class that implements this interface.</source>
          <target state="translated">Użyj tej metody, aby zamknąć lub zwolnij niezarządzane zasoby, takie jak pliki, strumieni i uchwytów posiadanych przez wystąpienie klasy, który implementuje ten interfejs.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>By convention, this method is used for all tasks associated with freeing resources held by an object, or preparing an object for reuse.</source>
          <target state="translated">Konwencja, ta metoda jest używana dla wszystkich zadań skojarzonych z zwalnianie zasoby zajmowane przez obiekt lub obiekt do ponownego użycia.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>If you are using a class that implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface, you should call its <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> implementation when you are finished using the class.</source>
          <target state="translated">Jeśli używasz klasy, która implementuje <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interfejsu, należy wywołać jej <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> implementacji po zakończeniu przy użyciu klasy.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>For more information, see the "Using an object that implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> topic.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz sekcję "Przy użyciu obiektu implementującego interfejs IDisposable" w <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> tematu.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>When implementing this method, ensure that all held resources are freed by propagating the call through the containment hierarchy.</source>
          <target state="translated">Po wdrożeniu tej metody, upewnij się, wszystkie przechowywane się, że zasoby są zwalniane przez propagowanie wywołania przez hierarchię zawierania.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>For example, if an object A allocates an object B, and object B allocates an object C, then A's <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> implementation must call <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> on B, which must in turn call <ph id="ph3">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> on C.</source>
          <target state="translated">Na przykład, jeśli obiekt A przydziela obiektu B, a obiekt B przydziela obiektu C, A następnie <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> implementacji należy wywołać <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> na B, który z kolei wywołać <ph id="ph3">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> na C.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>The C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method.</source>
          <target state="translated">Kompilator języka C++ obsługuje deterministyczne usuwania zasobów i nie zezwala na bezpośrednie implementacja <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>An object must also call the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method of its base class if the base class implements <ph id="ph2">&lt;xref:System.IDisposable&gt;</ph>.</source>
          <target state="translated">Obiekt musi także wywołać metodę <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> metody swojej klasy podstawowej, jeśli implementuje klasy podstawowej <ph id="ph2">&lt;xref:System.IDisposable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>For more information about implementing <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> on a base class and its subclasses, see the "IDisposable and the inheritance hierarchy" section in the <ph id="ph2">&lt;xref:System.IDisposable&gt;</ph> topic.</source>
          <target state="translated">Aby uzyskać więcej informacji o implementacji <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> klasy podstawowej oraz jego podklas, zobacz sekcję "IDisposable i hierarchii dziedziczenia" w <ph id="ph2">&lt;xref:System.IDisposable&gt;</ph> tematu.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>If an object's <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method is called more than once, the object must ignore all calls after the first one.</source>
          <target state="translated">Jeśli obiekt <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> metoda jest wywoływana więcej niż raz, obiekt należy zignorować wszystkie wywołania po pierwszym polem.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>The object must not throw an exception if its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method is called multiple times.</source>
          <target state="translated">Obiekt nie należy zgłosić wyjątek, jeśli jego <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> metoda jest wywoływana wiele razy.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>Instance methods other than <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> can throw an <ph id="ph2">&lt;xref:System.ObjectDisposedException&gt;</ph> when resources are already disposed.</source>
          <target state="translated">Wystąpienie metody inne niż <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> może zgłosić <ph id="ph2">&lt;xref:System.ObjectDisposedException&gt;</ph> gdy zasoby są już usunięty.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>Users might expect a resource type to use a particular convention to denote an allocated state versus a freed state.</source>
          <target state="translated">Użytkownicy mogą wymagać typu zasobu na potrzeby określenia przydzielone stan i stan zwolnionych określonej Konwencji.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>An example of this is stream classes, which are traditionally thought of as open or closed.</source>
          <target state="translated">Na przykład jest strumienia klasy, które są tradycyjnie traktować jako otwarty lub zamknięty.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>The implementer of a class that has such a convention might choose to implement a public method with a customized name, such as <ph id="ph1">`Close`</ph>, that calls the <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method.</source>
          <target state="translated">Realizator klasy, która ma takie Konwencję można zaimplementować publiczną metodę o nazwie niestandardowych, takich jak <ph id="ph1">`Close`</ph>, że wywołania <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>Because the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method must be called explicitly, there is always a danger that the unmanaged resources will not be released, because the consumer of an object fails to call its <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method.</source>
          <target state="translated">Ponieważ <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> metoda musi zostać jawnie wywołana, jest zawsze zagrożenia, które nie będą niezarządzane zasoby zwolnione, ponieważ konsumenta obiektu nie powiodło się wywołanie jego <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>There are two ways to avoid this:</source>
          <target state="translated">Istnieją dwa sposoby, aby zapobiec tej sytuacji:</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>Wrap the managed resource in an object derived from <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Zawijanie zarządzanego zasobu w obiekt pochodzący od <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>Your <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> implementation then calls the <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType&gt;</ph> instances.</source>
          <target state="translated">Twoje <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> następnie wykonanie wymaga <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> metody <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType&gt;</ph> wystąpień.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>For more information, see "The SafeHandle alternative" section in the <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> topic.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz sekcję "Alternatywnej SafeHandle" w <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> tematu.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>Implement a finalizer to free resources when <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> is not called.</source>
          <target state="translated">Implementuje finalizator w celu zwolnienia zasobów podczas <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> nie jest wywoływany.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>By default, the garbage collector automatically calls an object's finalizer before reclaiming its memory.</source>
          <target state="translated">Domyślnie moduł zbierający elementy bezużyteczne automatycznie wywołuje finalizatora obiektu przed odzyskiwanie pamięci.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>However, if the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method has been called, it is typically unnecessary for the garbage collector to call the disposed object's finalizer.</source>
          <target state="translated">Jednak jeśli <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> metoda została wywołana, nie jest zazwyczaj konieczne dla modułu zbierającego elementy bezużyteczne wywołać finalizatora usuniętego obiektu.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>To prevent automatic finalization, <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> implementations can call the <ph id="ph2">&lt;xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Aby uniknąć automatycznego finalizacji <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> implementacje można wywołać <ph id="ph2">&lt;xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>When you use an object that accesses unmanaged resources, such as a <ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph>, a good practice is to create the instance with a <ph id="ph2">`using`</ph> statement.</source>
          <target state="translated">Jeśli używasz obiektu, który uzyskuje dostęp do zasobów niezarządzanych, takich jak <ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph>, dobrym rozwiązaniem jest utworzenie wystąpienia o <ph id="ph2">`using`</ph> instrukcji.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>The <ph id="ph1">`using`</ph> statement automatically closes the stream and calls <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> on the object when the code that is using it has completed.</source>
          <target state="translated"><ph id="ph1">`using`</ph> Instrukcji jest automatycznie zamykany strumienia i wywołania <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> obiektu po ukończeniu kod, który jest używany.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>For an example, see the <ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph> class.</source>
          <target state="translated">Na przykład zobacz <ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>The following example shows how you can implement the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method.</source>
          <target state="translated">W poniższym przykładzie pokazano, jak można zaimplementować <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> metody.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>