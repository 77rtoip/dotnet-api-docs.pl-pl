<Type Name="IDisposable" FullName="System.IDisposable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0f129b9e6cc6b4ce4a818f23df9a72208cdccc21" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="c6655-101">Udostępnia mechanizm służący do zwalniania niezarządzanych zasobów.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c6655-101">Provides a mechanism for releasing unmanaged resources.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c6655-102">Podstawowym zastosowaniem tego interfejsu jest, aby zwolnić zasoby niezarządzane.</span><span class="sxs-lookup"><span data-stu-id="c6655-102">The primary use of this interface is to release unmanaged resources.</span></span> <span data-ttu-id="c6655-103">Moduł zbierający elementy bezużyteczne automatycznie zwalnia pamięć przydzielona do zarządzanego obiektu, gdy obiekt jest już używany.</span><span class="sxs-lookup"><span data-stu-id="c6655-103">The garbage collector automatically releases the memory allocated to a managed object when that object is no longer used.</span></span> <span data-ttu-id="c6655-104">Jednak nie jest możliwe do przewidzenia, gdy nastąpi wyrzucanie elementów bezużytecznych.</span><span class="sxs-lookup"><span data-stu-id="c6655-104">However, it is not possible to predict when garbage collection will occur.</span></span> <span data-ttu-id="c6655-105">Ponadto moduł garbage collector nie zna niezarządzane zasoby, takie jak dojścia do okna lub Otwórz pliki i strumienie.</span><span class="sxs-lookup"><span data-stu-id="c6655-105">Furthermore, the garbage collector has no knowledge of unmanaged resources such as window handles, or open files and streams.</span></span>  
  
 <span data-ttu-id="c6655-106">Użyj <xref:System.IDisposable.Dispose%2A> metoda jawnie zwolnić niezarządzane zasoby w połączeniu z modułu zbierającego elementy bezużyteczne w tym interfejsie.</span><span class="sxs-lookup"><span data-stu-id="c6655-106">Use the <xref:System.IDisposable.Dispose%2A> method of this interface to explicitly release unmanaged resources in conjunction with the garbage collector.</span></span> <span data-ttu-id="c6655-107">Tę metodę można wywołać obiektu konsumenta, gdy obiekt jest już potrzebne.</span><span class="sxs-lookup"><span data-stu-id="c6655-107">The consumer of an object can call this method when the object is no longer needed.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="c6655-108">Jest to istotne zmiany, aby dodać <xref:System.IDisposable> interfejs do istniejącej klasy.</span><span class="sxs-lookup"><span data-stu-id="c6655-108">It is a breaking change to add the <xref:System.IDisposable> interface to an existing class.</span></span> <span data-ttu-id="c6655-109">Ponieważ już istniejących konsumentów tego typu nie można wywołać <xref:System.IDisposable.Dispose%2A>, nie można mieć pewności, zostaną zwolnione niezarządzane zasoby zajmowane przez danego typu.</span><span class="sxs-lookup"><span data-stu-id="c6655-109">Because pre-existing consumers of your type cannot call <xref:System.IDisposable.Dispose%2A>, you cannot be certain that unmanaged resources held by your type will be released.</span></span>  
  
 <span data-ttu-id="c6655-110">Ponieważ <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementacji jest wywoływana przez użytkownika typu zasobów należących do wystąpienia są już potrzebne, albo zawijania obiektu zarządzanego w <xref:System.Runtime.InteropServices.SafeHandle> (zalecaną alternatywą) lub powinny zastępować <xref:System.Object.Finalize%2A?displayProperty=nameWithType>do zwalniania niezarządzanych zasobów, w przypadku, gdy użytkownik zapomni do wywołania <xref:System.IDisposable.Dispose%2A>.</span><span class="sxs-lookup"><span data-stu-id="c6655-110">Because the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation is called by the consumer of a type when the resources owned by an instance are no longer needed, you should either wrap the managed object in a <xref:System.Runtime.InteropServices.SafeHandle> (the recommended alternative), or you should override <xref:System.Object.Finalize%2A?displayProperty=nameWithType> to free unmanaged resources in the event that the consumer forgets to call <xref:System.IDisposable.Dispose%2A>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c6655-111">W programie .NET Framework kompilatora C++ obsługuje deterministyczne usuwania zasobów i nie zezwala na bezpośrednie implementacja <xref:System.IDisposable.Dispose%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="c6655-111">In the .NET Framework, the C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="c6655-112">Szczegółowe omówienie o tym, jak ten interfejs i <xref:System.Object.Finalize%2A?displayProperty=nameWithType> są używane metody, zobacz [wyrzucanie elementów bezużytecznych](http://msdn.microsoft.com/library/22b6cb97-0c80-4eeb-a2cf-5ed7655e37f9) i [implementacja metody Dispose](~/docs/standard/garbage-collection/implementing-dispose.md) tematów.</span><span class="sxs-lookup"><span data-stu-id="c6655-112">For a detailed discussion about how this interface and the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method are used, see the [Garbage Collection](http://msdn.microsoft.com/library/22b6cb97-0c80-4eeb-a2cf-5ed7655e37f9) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md) topics.</span></span>  
  
## <a name="using-an-object-that-implements-idisposable"></a><span data-ttu-id="c6655-113">Przy użyciu obiektu implementującego interfejs IDisposable</span><span class="sxs-lookup"><span data-stu-id="c6655-113">Using an object that implements IDisposable</span></span>  
 <span data-ttu-id="c6655-114">Jeśli aplikacja korzysta z po prostu obiekt, który implementuje <xref:System.IDisposable> interfejsu, należy wywołać obiektu <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementacji po zakończeniu korzystania z niego.</span><span class="sxs-lookup"><span data-stu-id="c6655-114">If your app simply uses an object that implements the <xref:System.IDisposable> interface, you should call the object's <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation when you are finished using it.</span></span> <span data-ttu-id="c6655-115">W zależności od języka programowania można to zrobić na dwa sposoby:</span><span class="sxs-lookup"><span data-stu-id="c6655-115">Depending on your programming language, you can do this in one of two ways:</span></span>  
  
-   <span data-ttu-id="c6655-116">Przy użyciu języka takich jak utworzyć `using` instrukcji w języku C# i Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c6655-116">By using a language construct such as the `using` statement in C# and Visual Basic.</span></span>  
  
-   <span data-ttu-id="c6655-117">Zawijania wywołanie <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementacja `try` / `finally` bloku.</span><span class="sxs-lookup"><span data-stu-id="c6655-117">By wrapping the call to the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation in a `try`/`finally` block.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c6655-118">Dokumentację dla typów, które implementują <xref:System.IDisposable> należy pamiętać, że faktów i dołączyć przypomnienie wywołać jej <xref:System.IDisposable.Dispose%2A> implementacji.</span><span class="sxs-lookup"><span data-stu-id="c6655-118">Documentation for types that implement <xref:System.IDisposable> note that fact and include a reminder to call its <xref:System.IDisposable.Dispose%2A> implementation.</span></span>  
  
<a name="Using"></a>   
### <a name="the-c-and-visual-basic-using-statement"></a><span data-ttu-id="c6655-119">C# i Visual Basic za pomocą instrukcji</span><span class="sxs-lookup"><span data-stu-id="c6655-119">The C# and Visual Basic Using statement</span></span>  
 <span data-ttu-id="c6655-120">Jeśli język obsługuje konstrukcję, takich jak [przy użyciu](~/docs/csharp/language-reference/keywords/using.md) instrukcji w języku C# i [Using](~/docs/visual-basic/language-reference/statements/using-statement.md) instrukcji w języku Visual Basic, służy zamiast jawnie podczas wywoływania <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> samodzielnie.</span><span class="sxs-lookup"><span data-stu-id="c6655-120">If your language supports a construct such as the [using](~/docs/csharp/language-reference/keywords/using.md) statement in C# and the [Using](~/docs/visual-basic/language-reference/statements/using-statement.md) statement in Visual Basic, you can use it instead of explicitly calling <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> yourself.</span></span> <span data-ttu-id="c6655-121">Poniższy przykład korzysta z tej metody, definiując `WordCount` klasy, która zachowuje informacje o pliku i liczbę słów w nim.</span><span class="sxs-lookup"><span data-stu-id="c6655-121">The following example uses this approach in defining a `WordCount` class that preserves information about a file and the number of words in it.</span></span>  
  
 [!code-csharp[System.IDisposable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling1.cs#1)]
 [!code-vb[System.IDisposable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling1.vb#1)]  
  
 <span data-ttu-id="c6655-122">`using` Instrukcja jest rzeczywiście udogodnienie składni.</span><span class="sxs-lookup"><span data-stu-id="c6655-122">The `using` statement is actually a syntactic convenience.</span></span> <span data-ttu-id="c6655-123">W czasie kompilacji, kompilator języka implementuje języku pośrednim (IL) dla `try` / `finally` bloku.</span><span class="sxs-lookup"><span data-stu-id="c6655-123">At compile time, the language compiler implements the intermediate language (IL) for a `try`/`finally` block.</span></span>  
  
 <span data-ttu-id="c6655-124">Aby uzyskać więcej informacji na temat `using` instrukcji, zobacz [instrukcji Using](~/docs/visual-basic/language-reference/statements/using-statement.md) lub [za pomocą instrukcji](~/docs/csharp/language-reference/keywords/using-statement.md) tematów.</span><span class="sxs-lookup"><span data-stu-id="c6655-124">For more information about the `using` statement, see the [Using Statement](~/docs/visual-basic/language-reference/statements/using-statement.md) or [using Statement](~/docs/csharp/language-reference/keywords/using-statement.md) topics.</span></span>  
  
### <a name="the-tryfinally-block"></a><span data-ttu-id="c6655-125">Blok Try/Finally</span><span class="sxs-lookup"><span data-stu-id="c6655-125">The Try/Finally block</span></span>  
 <span data-ttu-id="c6655-126">Jeśli język programowania nie obsługuje konstrukcji, takich jak `using` instrukcji w języku C# lub Visual Basic, lub jeśli nie chcesz jej użyć, należy wywołać <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementację z `finally` zablokować z `try` / `finally` instrukcji.</span><span class="sxs-lookup"><span data-stu-id="c6655-126">If your programming language does not support a construct like the `using` statement in C# or Visual Basic, or if you prefer not to use it, you can call the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation from the `finally` block of a `try`/`finally` statement.</span></span> <span data-ttu-id="c6655-127">W poniższym przykładzie `using` blok w poprzednim przykładzie z `try` / `finally` bloku.</span><span class="sxs-lookup"><span data-stu-id="c6655-127">The following example replaces the `using` block in the previous example with a `try`/`finally` block.</span></span>  
  
 [!code-csharp[System.IDisposable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling2.cs#2)]
 [!code-vb[System.IDisposable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling2.vb#2)]  
  
 <span data-ttu-id="c6655-128">Aby uzyskać więcej informacji na temat `try` / `finally` wzorca, zobacz [spróbuj... CATCH... Instrukcji finally](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md), [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md), lub [try-finally — instrukcja](http://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82).</span><span class="sxs-lookup"><span data-stu-id="c6655-128">For more information about the `try`/`finally` pattern, see [Try...Catch...Finally Statement](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md), [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md), or [try-finally Statement](http://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82).</span></span>  
  
## <a name="implementing-idisposable"></a><span data-ttu-id="c6655-129">Implementacja interfejsu IDisposable</span><span class="sxs-lookup"><span data-stu-id="c6655-129">Implementing IDisposable</span></span>  
 <span data-ttu-id="c6655-130">Należy zaimplementować <xref:System.IDisposable> tylko wtedy, gdy bezpośrednio z danym typem używa zasoby niezarządzane.</span><span class="sxs-lookup"><span data-stu-id="c6655-130">You should implement <xref:System.IDisposable> only if your type uses unmanaged resources directly.</span></span> <span data-ttu-id="c6655-131">Konsumenci tego typu można wywołać z <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementacji, aby zwolnić zasoby, gdy wystąpienie jest już potrzebne.</span><span class="sxs-lookup"><span data-stu-id="c6655-131">The consumers of your type can call your <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation to free resources when the instance is no longer needed.</span></span> <span data-ttu-id="c6655-132">Do obsługi przypadków, w których się one zakończyć niepowodzeniem do wywołania <xref:System.IDisposable.Dispose%2A>, należy albo użyj klasą pochodną <xref:System.Runtime.InteropServices.SafeHandle> opakowywać niezarządzane zasoby, lub powinny zastępować <xref:System.Object.Finalize%2A?displayProperty=nameWithType> metody dla typu odwołania.</span><span class="sxs-lookup"><span data-stu-id="c6655-132">To handle cases in which they fail to call <xref:System.IDisposable.Dispose%2A>, you should either use a class derived from <xref:System.Runtime.InteropServices.SafeHandle> to wrap the unmanaged resources, or you should override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method for a reference type.</span></span> <span data-ttu-id="c6655-133">W obu przypadkach można użyć <xref:System.IDisposable.Dispose%2A> metodę w celu niezależnie od oczyszczania jest konieczne po użyciu niezarządzane zasoby, takie jak zwalnianie zwalnianiem lub resetowaniem zasobów niezarządzanych.</span><span class="sxs-lookup"><span data-stu-id="c6655-133">In either case, you use the <xref:System.IDisposable.Dispose%2A> method to perform whatever cleanup is necessary after using the unmanaged resources, such as freeing, releasing, or resetting the unmanaged resources.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c6655-134">Jeśli definiujesz klasę podstawową używającą zasoby niezarządzane i który ma, albo może mieć podklas, które powinny zostać usunięte, należy zaimplementować <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> — metoda i podaj drugi przeciążenia `Dispose`, zgodnie z opisem w następnej sekcja.</span><span class="sxs-lookup"><span data-stu-id="c6655-134">If you are defining a base class that uses unmanaged resources and that either has, or is likely to have, subclasses that should be disposed, you should implement the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> method and provide a second overload of `Dispose`, as discussed in the next section.</span></span>  
  
<a name="BaseClasses"></a>   
## <a name="idisposable-and-the-inheritance-hierarchy"></a><span data-ttu-id="c6655-135">Interfejs IDisposable i Hierarchia dziedziczenia</span><span class="sxs-lookup"><span data-stu-id="c6655-135">IDisposable and the inheritance hierarchy</span></span>  
 <span data-ttu-id="c6655-136">Klasa podstawowa z podklas, które powinny być usuwalne musi implementować <xref:System.IDisposable> w następujący sposób.</span><span class="sxs-lookup"><span data-stu-id="c6655-136">A base class with subclasses that should be disposable must implement <xref:System.IDisposable> as follows.</span></span> <span data-ttu-id="c6655-137">Należy użyć tego wzorca przy każdym zaimplementowaniem <xref:System.IDisposable> na dowolnego typu, który nie jest `sealed` (`NotInheritable` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="c6655-137">You should use this pattern whenever you implement <xref:System.IDisposable> on any type that isn't `sealed` (`NotInheritable` in Visual Basic).</span></span>  
  
-   <span data-ttu-id="c6655-138">Powinien zawierać jedno publiczne-virtual <xref:System.IDisposable.Dispose> — metoda i chronione wirtualnego `Dispose(Boolean disposing)` metody.</span><span class="sxs-lookup"><span data-stu-id="c6655-138">It should provide one public, non-virtual <xref:System.IDisposable.Dispose> method and a protected virtual `Dispose(Boolean disposing)` method.</span></span>  
  
-   <span data-ttu-id="c6655-139"><xref:System.IDisposable.Dispose> Należy wywołać metodę `Dispose(true)` i ma pomijać finalizacji wydajności.</span><span class="sxs-lookup"><span data-stu-id="c6655-139">The <xref:System.IDisposable.Dispose> method must call `Dispose(true)` and should suppress finalization for performance.</span></span>  
  
-   <span data-ttu-id="c6655-140">Typ podstawowy nie może zawierać żadnych finalizatory.</span><span class="sxs-lookup"><span data-stu-id="c6655-140">The base type should not include any finalizers.</span></span>  
  
 <span data-ttu-id="c6655-141">Poniższy fragment kodu odzwierciedla wzorzec dispose dla klas podstawowych.</span><span class="sxs-lookup"><span data-stu-id="c6655-141">The following code fragment reflects the dispose pattern for base classes.</span></span> <span data-ttu-id="c6655-142">Przyjęto założenie, że typu nie przesłania <xref:System.Object.Finalize%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="c6655-142">It assumes that your type does not override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.IDisposable#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base1.cs#3)]
 [!code-vb[System.IDisposable#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base1.vb#3)]  
  
 <span data-ttu-id="c6655-143">Jeśli zastąpienie <xref:System.Object.Finalize%2A?displayProperty=nameWithType> metody, klasy należy zaimplementować następującego wzorca.</span><span class="sxs-lookup"><span data-stu-id="c6655-143">If you do override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method, your class should implement the following pattern.</span></span>  
  
 [!code-csharp[System.IDisposable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base2.cs#5)]
 [!code-vb[System.IDisposable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base2.vb#5)]  
  
 <span data-ttu-id="c6655-144">Podklasy powinny implementować wzorzec rozporządzający w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="c6655-144">Subclasses should implement the disposable pattern as follows:</span></span>  
  
-   <span data-ttu-id="c6655-145">Zastępują one musi `Dispose(Boolean)` i Wywołaj klasę bazową `Dispose(Boolean)` implementacji.</span><span class="sxs-lookup"><span data-stu-id="c6655-145">They must override `Dispose(Boolean)` and call the base class `Dispose(Boolean)` implementation.</span></span>  
  
-   <span data-ttu-id="c6655-146">W razie potrzeby, ich Podaj finalizator.</span><span class="sxs-lookup"><span data-stu-id="c6655-146">They can provide a finalizer if needed.</span></span> <span data-ttu-id="c6655-147">Należy wywołać finalizatora `Dispose(false)`.</span><span class="sxs-lookup"><span data-stu-id="c6655-147">The finalizer must call `Dispose(false)`.</span></span>  
  
 <span data-ttu-id="c6655-148">Należy pamiętać, że klas pochodnych się implementuje <xref:System.IDisposable> interfejsu i nie ma bezparametrowego <xref:System.IDisposable.Dispose%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="c6655-148">Note that derived classes do not themselves implement the <xref:System.IDisposable> interface and do not include a parameterless <xref:System.IDisposable.Dispose%2A> method.</span></span> <span data-ttu-id="c6655-149">Zastępują one tylko klasę podstawową `Dispose(Boolean)` metody.</span><span class="sxs-lookup"><span data-stu-id="c6655-149">They only override the base class `Dispose(Boolean)` method.</span></span>  
  
 <span data-ttu-id="c6655-150">Poniższy fragment kodu odzwierciedla wzorzec dispose dla klas pochodnych.</span><span class="sxs-lookup"><span data-stu-id="c6655-150">The following code fragment reflects the dispose pattern for derived classes.</span></span> <span data-ttu-id="c6655-151">Przyjęto założenie, że typu nie przesłania <xref:System.Object.Finalize%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="c6655-151">It assumes that your type does not override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.IDisposable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/derived1.cs#4)]
 [!code-vb[System.IDisposable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/derived1.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="c6655-152">W poniższym przykładzie pokazano, jak utworzyć klasę zasobu, który implementuje <xref:System.IDisposable> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="c6655-152">The following example demonstrates how to create a resource class that implements the <xref:System.IDisposable> interface.</span></span>  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" />
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IDisposable.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Dispose();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c6655-153">Wykonuje zadania zdefiniowane przez aplikację skojarzone z uwalnianiem, zwalnianiem lub resetowaniem niezarządzanych zasobów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c6655-153">Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c6655-154">Użyj tej metody, aby zamknąć lub zwolnij niezarządzane zasoby, takie jak pliki, strumieni i uchwytów posiadanych przez wystąpienie klasy, który implementuje ten interfejs.</span><span class="sxs-lookup"><span data-stu-id="c6655-154">Use this method to close or release unmanaged resources such as files, streams, and handles held by an instance of the class that implements this interface.</span></span> <span data-ttu-id="c6655-155">Konwencja, ta metoda jest używana dla wszystkich zadań skojarzonych z zwalnianie zasoby zajmowane przez obiekt lub obiekt do ponownego użycia.</span><span class="sxs-lookup"><span data-stu-id="c6655-155">By convention, this method is used for all tasks associated with freeing resources held by an object, or preparing an object for reuse.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="c6655-156">Jeśli używasz klasy, która implementuje <xref:System.IDisposable> interfejsu, należy wywołać jej <xref:System.IDisposable.Dispose%2A> implementacji po zakończeniu przy użyciu klasy.</span><span class="sxs-lookup"><span data-stu-id="c6655-156">If you are using a class that implements the <xref:System.IDisposable> interface, you should call its <xref:System.IDisposable.Dispose%2A> implementation when you are finished using the class.</span></span> <span data-ttu-id="c6655-157">Aby uzyskać więcej informacji, zobacz sekcję "Przy użyciu obiektu implementującego interfejs IDisposable" w <xref:System.IDisposable> tematu.</span><span class="sxs-lookup"><span data-stu-id="c6655-157">For more information, see the "Using an object that implements IDisposable" section in the <xref:System.IDisposable> topic.</span></span>  
  
 <span data-ttu-id="c6655-158">Po wdrożeniu tej metody, upewnij się, wszystkie przechowywane się, że zasoby są zwalniane przez propagowanie wywołania przez hierarchię zawierania.</span><span class="sxs-lookup"><span data-stu-id="c6655-158">When implementing this method, ensure that all held resources are freed by propagating the call through the containment hierarchy.</span></span> <span data-ttu-id="c6655-159">Na przykład, jeśli obiekt A przydziela obiektu B, a obiekt B przydziela obiektu C, A następnie <xref:System.IDisposable.Dispose%2A> implementacji należy wywołać <xref:System.IDisposable.Dispose%2A> na B, który z kolei wywołać <xref:System.IDisposable.Dispose%2A> na C.</span><span class="sxs-lookup"><span data-stu-id="c6655-159">For example, if an object A allocates an object B, and object B allocates an object C, then A's <xref:System.IDisposable.Dispose%2A> implementation must call <xref:System.IDisposable.Dispose%2A> on B, which must in turn call <xref:System.IDisposable.Dispose%2A> on C.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c6655-160">Kompilator języka C++ obsługuje deterministyczne usuwania zasobów i nie zezwala na bezpośrednie implementacja <xref:System.IDisposable.Dispose%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="c6655-160">The C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="c6655-161">Obiekt musi także wywołać metodę <xref:System.IDisposable.Dispose%2A> metody swojej klasy podstawowej, jeśli implementuje klasy podstawowej <xref:System.IDisposable>.</span><span class="sxs-lookup"><span data-stu-id="c6655-161">An object must also call the <xref:System.IDisposable.Dispose%2A> method of its base class if the base class implements <xref:System.IDisposable>.</span></span> <span data-ttu-id="c6655-162">Aby uzyskać więcej informacji o implementacji <xref:System.IDisposable> klasy podstawowej oraz jego podklas, zobacz sekcję "IDisposable i hierarchii dziedziczenia" w <xref:System.IDisposable> tematu.</span><span class="sxs-lookup"><span data-stu-id="c6655-162">For more information about implementing <xref:System.IDisposable> on a base class and its subclasses, see the "IDisposable and the inheritance hierarchy" section in the <xref:System.IDisposable> topic.</span></span>  
  
 <span data-ttu-id="c6655-163">Jeśli obiekt <xref:System.IDisposable.Dispose%2A> metoda jest wywoływana więcej niż raz, obiekt należy zignorować wszystkie wywołania po pierwszym polem.</span><span class="sxs-lookup"><span data-stu-id="c6655-163">If an object's <xref:System.IDisposable.Dispose%2A> method is called more than once, the object must ignore all calls after the first one.</span></span> <span data-ttu-id="c6655-164">Obiekt nie należy zgłosić wyjątek, jeśli jego <xref:System.IDisposable.Dispose%2A> metoda jest wywoływana wiele razy.</span><span class="sxs-lookup"><span data-stu-id="c6655-164">The object must not throw an exception if its <xref:System.IDisposable.Dispose%2A> method is called multiple times.</span></span> <span data-ttu-id="c6655-165">Wystąpienie metody inne niż <xref:System.IDisposable.Dispose%2A> może zgłosić <xref:System.ObjectDisposedException> gdy zasoby są już usunięty.</span><span class="sxs-lookup"><span data-stu-id="c6655-165">Instance methods other than <xref:System.IDisposable.Dispose%2A> can throw an <xref:System.ObjectDisposedException> when resources are already disposed.</span></span>  
  
 <span data-ttu-id="c6655-166">Użytkownicy mogą wymagać typu zasobu na potrzeby określenia przydzielone stan i stan zwolnionych określonej Konwencji.</span><span class="sxs-lookup"><span data-stu-id="c6655-166">Users might expect a resource type to use a particular convention to denote an allocated state versus a freed state.</span></span> <span data-ttu-id="c6655-167">Na przykład jest strumienia klasy, które są tradycyjnie traktować jako otwarty lub zamknięty.</span><span class="sxs-lookup"><span data-stu-id="c6655-167">An example of this is stream classes, which are traditionally thought of as open or closed.</span></span> <span data-ttu-id="c6655-168">Realizator klasy, która ma takie Konwencję można zaimplementować publiczną metodę o nazwie niestandardowych, takich jak `Close`, że wywołania <xref:System.IDisposable.Dispose%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="c6655-168">The implementer of a class that has such a convention might choose to implement a public method with a customized name, such as `Close`, that calls the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="c6655-169">Ponieważ <xref:System.IDisposable.Dispose%2A> metoda musi zostać jawnie wywołana, jest zawsze zagrożenia, które nie będą niezarządzane zasoby zwolnione, ponieważ konsumenta obiektu nie powiodło się wywołanie jego <xref:System.IDisposable.Dispose%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="c6655-169">Because the <xref:System.IDisposable.Dispose%2A> method must be called explicitly, there is always a danger that the unmanaged resources will not be released, because the consumer of an object fails to call its <xref:System.IDisposable.Dispose%2A> method.</span></span> <span data-ttu-id="c6655-170">Istnieją dwa sposoby, aby zapobiec tej sytuacji:</span><span class="sxs-lookup"><span data-stu-id="c6655-170">There are two ways to avoid this:</span></span>  
  
-   <span data-ttu-id="c6655-171">Zawijanie zarządzanego zasobu w obiekt pochodzący od <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c6655-171">Wrap the managed resource in an object derived from <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>.</span></span> <span data-ttu-id="c6655-172">Twoje <xref:System.IDisposable.Dispose%2A> następnie wykonanie wymaga <xref:System.IDisposable.Dispose%2A> metody <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> wystąpień.</span><span class="sxs-lookup"><span data-stu-id="c6655-172">Your <xref:System.IDisposable.Dispose%2A> implementation then calls the <xref:System.IDisposable.Dispose%2A> method of the <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> instances.</span></span> <span data-ttu-id="c6655-173">Aby uzyskać więcej informacji, zobacz sekcję "Alternatywnej SafeHandle" w <xref:System.Object.Finalize%2A?displayProperty=nameWithType> tematu.</span><span class="sxs-lookup"><span data-stu-id="c6655-173">For more information, see "The SafeHandle alternative" section in the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> topic.</span></span>  
  
-   <span data-ttu-id="c6655-174">Implementuje finalizator w celu zwolnienia zasobów podczas <xref:System.IDisposable.Dispose%2A> nie jest wywoływany.</span><span class="sxs-lookup"><span data-stu-id="c6655-174">Implement a finalizer to free resources when <xref:System.IDisposable.Dispose%2A> is not called.</span></span> <span data-ttu-id="c6655-175">Domyślnie moduł zbierający elementy bezużyteczne automatycznie wywołuje finalizatora obiektu przed odzyskiwanie pamięci.</span><span class="sxs-lookup"><span data-stu-id="c6655-175">By default, the garbage collector automatically calls an object's finalizer before reclaiming its memory.</span></span> <span data-ttu-id="c6655-176">Jednak jeśli <xref:System.IDisposable.Dispose%2A> metoda została wywołana, nie jest zazwyczaj konieczne dla modułu zbierającego elementy bezużyteczne wywołać finalizatora usuniętego obiektu.</span><span class="sxs-lookup"><span data-stu-id="c6655-176">However, if the <xref:System.IDisposable.Dispose%2A> method has been called, it is typically unnecessary for the garbage collector to call the disposed object's finalizer.</span></span> <span data-ttu-id="c6655-177">Aby uniknąć automatycznego finalizacji <xref:System.IDisposable.Dispose%2A> implementacje można wywołać <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="c6655-177">To prevent automatic finalization, <xref:System.IDisposable.Dispose%2A> implementations can call the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="c6655-178">Jeśli używasz obiektu, który uzyskuje dostęp do zasobów niezarządzanych, takich jak <xref:System.IO.StreamWriter>, dobrym rozwiązaniem jest utworzenie wystąpienia o `using` instrukcji.</span><span class="sxs-lookup"><span data-stu-id="c6655-178">When you use an object that accesses unmanaged resources, such as a <xref:System.IO.StreamWriter>, a good practice is to create the instance with a `using` statement.</span></span> <span data-ttu-id="c6655-179">`using` Instrukcji jest automatycznie zamykany strumienia i wywołania <xref:System.IDisposable.Dispose%2A> obiektu po ukończeniu kod, który jest używany.</span><span class="sxs-lookup"><span data-stu-id="c6655-179">The `using` statement automatically closes the stream and calls <xref:System.IDisposable.Dispose%2A> on the object when the code that is using it has completed.</span></span> <span data-ttu-id="c6655-180">Na przykład zobacz <xref:System.IO.StreamWriter> klasy.</span><span class="sxs-lookup"><span data-stu-id="c6655-180">For an example, see the <xref:System.IO.StreamWriter> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c6655-181">W poniższym przykładzie pokazano, jak można zaimplementować <xref:System.IDisposable.Dispose%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="c6655-181">The following example shows how you can implement the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>