<Type Name="IDisposable" FullName="System.IDisposable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7c6b175378e418ab8a3b3684b09b4e8b63efa17c" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39827801" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDisposable" />
  <TypeSignature Language="F#" Value="type IDisposable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Udostępnia mechanizm do zwalniania niezarządzanych zasobów.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podstawowym zastosowaniem tego interfejsu jest zwolnienie niezarządzanych zasobów. Moduł odśmiecania pamięci automatycznie zwalnia pamięć przydzielona do obiektu zarządzanego, gdy ten obiekt nie jest już używana. Jednak nie jest możliwe do przewidzenia, gdy nastąpi wyrzucania elementów bezużytecznych. Ponadto moduł odśmiecania pamięci nie zna niezarządzane zasoby, takie jak okna obsługi lub Otwórz plików i strumieni.  
  
 Użyj <xref:System.IDisposable.Dispose%2A> metody tego interfejsu jawnie zwolnić niezarządzane zasoby w połączeniu z modułu odśmiecania pamięci. Tę metodę można wywołać konsumenta obiektu, gdy obiekt nie jest już potrzebny.  
  
> [!WARNING]
>  Jest istotnej zmiany, aby dodać <xref:System.IDisposable> interfejsu do istniejącej klasy. Ponieważ nie można wywołać istniejące konsumenci typu będą <xref:System.IDisposable.Dispose%2A>, nie może mieć pewności, zwolnienie niezarządzanych zasobów w posiadaniu danego typu.  
  
 Ponieważ <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementacja jest wywoływana przez konsumenta typu, gdy zasoby należące do wystąpienia nie są już potrzebne, albo zawijania obiekt zarządzany w <xref:System.Runtime.InteropServices.SafeHandle> (zalecaną alternatywą) lub należy zastąpić <xref:System.Object.Finalize%2A?displayProperty=nameWithType>do zwalniania niezarządzanych zasobów, w przypadku, gdy użytkownik zapomni wywołać <xref:System.IDisposable.Dispose%2A>.  
  
> [!IMPORTANT]
>  W .NET Framework, kompilator języka C++ obsługuje deterministycznej likwidacji zasobów i nie zezwala na bezpośrednią implementację <xref:System.IDisposable.Dispose%2A> metody.  
  
 Szczegółowe omówienie o tym, jak ten interfejs i <xref:System.Object.Finalize%2A?displayProperty=nameWithType> metody są używane, zobacz [wyrzucania elementów bezużytecznych](~/docs/standard/garbage-collection/index.md) i [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md) tematów.  
  
## <a name="using-an-object-that-implements-idisposable"></a>Za pomocą obiektu, który implementuje interfejs IDisposable  
 Jeśli aplikacja używa tylko obiekt, który implementuje <xref:System.IDisposable> interfejsu, należy wywołać obiektu <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> wykonania po zakończeniu korzystania z niego. W zależności od języka programowania to zrobić na dwa sposoby:  
  
-   Przy użyciu języka takich jak skonstruować `using` instrukcji w języku C# i Visual Basic.  
  
-   Dzięki zawijaniu wywołanie <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementacji `try` / `finally` bloku.  
  
> [!NOTE]
>  Dokumentacja typami, które implementują <xref:System.IDisposable> należy pamiętać, że fakt i dołączyć przypomnienie do wywoływania jego <xref:System.IDisposable.Dispose%2A> implementacji.  
  
<a name="Using"></a>   
### <a name="the-c-and-visual-basic-using-statement"></a>Instrukcja języka C# i Visual Basic przy użyciu  
 Jeśli język obsługuje konstrukcję, takie jak [przy użyciu](~/docs/csharp/language-reference/keywords/using.md) instrukcji w języku C# i [Using](~/docs/visual-basic/language-reference/statements/using-statement.md) instrukcji w języku Visual Basic, służy zamiast jawnego wywołania <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> samodzielnie. W poniższym przykładzie użyto tego podejścia, definiując `WordCount` klasę, która zachowuje informacje o pliku i liczbę słów w nim.  
  
 [!code-csharp[System.IDisposable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling1.cs#1)]
 [!code-vb[System.IDisposable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling1.vb#1)]  
  
 `using` Instrukcja jest faktycznie udogodnienie składni. W czasie kompilacji kompilator języka implementuje języka pośredniego (IL) dla `try` / `finally` bloku.  
  
 Aby uzyskać więcej informacji na temat `using` poufności informacji, zobacz [instrukcji Using](~/docs/visual-basic/language-reference/statements/using-statement.md) lub [za pomocą instrukcji](~/docs/csharp/language-reference/keywords/using-statement.md) tematów.  
  
### <a name="the-tryfinally-block"></a>Blok Try/Finally  
 Jeśli język programowania nie obsługuje konstrukcji, takich jak `using` instrukcji w języku C# lub Visual Basic, jeśli nie chcesz używać go, można też wywołać <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementację z `finally` bloku `try` / `finally` instrukcji. Poniższy przykład zastępuje `using` blok w poprzednim przykładzie, za pomocą `try` / `finally` bloku.  
  
 [!code-csharp[System.IDisposable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling2.cs#2)]
 [!code-vb[System.IDisposable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling2.vb#2)]  
  
 Aby uzyskać więcej informacji na temat `try` / `finally` wzorca, zobacz [spróbuj... CATCH... Na koniec instrukcji](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md), [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md), lub [try-finally — instrukcja](http://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82).  
  
## <a name="implementing-idisposable"></a>Implementowanie interfejsu IDisposable  
 Należy zaimplementować <xref:System.IDisposable> tylko wtedy, gdy typu używa bezpośrednio niezarządzane zasoby. Konsumenci typu będą wywoływać usługi <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementacji, aby zwolnić zasoby, jeśli wystąpienie nie jest już potrzebny. Sposób obsługiwać przypadki, w których mógł wywołać <xref:System.IDisposable.Dispose%2A>, należy użyć klasą pochodną <xref:System.Runtime.InteropServices.SafeHandle> opakowywać niezarządzane zasoby, lub należy zastąpić <xref:System.Object.Finalize%2A?displayProperty=nameWithType> metody dla typu odwołania. W obu przypadkach użyj <xref:System.IDisposable.Dispose%2A> metodę, aby wykonać dowolne oczyszczania jest konieczne po nim za pomocą niezarządzanych zasobów, takich jak zwalnianie lub resetowaniem zasobów niezarządzanych.  
  
> [!IMPORTANT]
>  Jeśli jest definiowana klasa bazowa używające niezarządzanych zasobów i który ma, albo może mieć podklas, które powinny zostać usunięte, należy zaimplementować <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> metody i Podaj drugie przeciążenie `Dispose`, zgodnie z opisem w ciągu następnych sekcja.  
  
<a name="BaseClasses"></a>   
## <a name="idisposable-and-the-inheritance-hierarchy"></a>Interfejs IDisposable i hierarchii dziedziczenia  
 Klasa podstawowa z podklasami, które powinny być usuwalne, musi implementować <xref:System.IDisposable> w następujący sposób. Tego wzorca należy używać zawsze wtedy, gdy należy zaimplementować <xref:System.IDisposable> z każdym typem, który nie jest `sealed` (`NotInheritable` w języku Visual Basic).  
  
-   Powinna zapewnić jedną publiczną, niewirtualną <xref:System.IDisposable.Dispose> metody i chronioną wirtualnego `Dispose(Boolean disposing)` metody.  
  
-   <xref:System.IDisposable.Dispose> Należy wywołać metodę `Dispose(true)` i należy wstrzymać finalizację wydajności.  
  
-   Typ podstawowy nie może zawierać żadnych finalizatorów.  
  
 Poniższy fragment kodu odzwierciedla wzorca usuwania dla klas podstawowych. Przyjęto założenie, że danego typu nie zastępuje <xref:System.Object.Finalize%2A?displayProperty=nameWithType> metody.  
  
 [!code-csharp[System.IDisposable#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base1.cs#3)]
 [!code-vb[System.IDisposable#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base1.vb#3)]  
  
 Jeśli zastąpisz <xref:System.Object.Finalize%2A?displayProperty=nameWithType> metody, klasy należy zaimplementować następującego wzorca.  
  
 [!code-csharp[System.IDisposable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base2.cs#5)]
 [!code-vb[System.IDisposable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base2.vb#5)]  
  
 Podklasy powinny implementować wzory jednorazowe w następujący sposób:  
  
-   Muszą one zastąpić `Dispose(Boolean)` i wywołać podstawowej klasy `Dispose(Boolean)` implementacji.  
  
-   Mogą dostarczyć finalizator, jeśli to konieczne. Finalizator musi wywoływać `Dispose(false)`.  
  
 Należy pamiętać, że klasy pochodne nie należy samodzielnie implementować <xref:System.IDisposable> interfejsu i nie obejmują bez parametrów <xref:System.IDisposable.Dispose%2A> metody. Zastępują one tylko klasy bazowej `Dispose(Boolean)` metody.  
  
 Poniższy fragment kodu odzwierciedla wzorca usuwania dla klas pochodnych. Przyjęto założenie, że danego typu nie zastępuje <xref:System.Object.Finalize%2A?displayProperty=nameWithType> metody.  
  
 [!code-csharp[System.IDisposable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/derived1.cs#4)]
 [!code-vb[System.IDisposable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/derived1.vb#4)]  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób tworzenia klasy zasobów, która implementuje <xref:System.IDisposable> interfejsu.  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" />
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IDisposable.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit" Usage="iDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wykonuje zadania zdefiniowane przez aplikację skojarzone z uwalnianiem, zwalnianiem lub resetowaniem niezarządzanych zasobów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda umożliwia zamknięcie lub zwolnić niezarządzane zasoby, takie jak pliki, strumieni i utrzymywane przez wystąpienie klasy, który implementuje ten interfejs obsługuje. Zgodnie z Konwencją, ta metoda jest używana dla wszystkich zadań skojarzonych z zwalnianiu zasobów w posiadaniu obiektu, albo przygotowaniem obiektu do ponownego wykorzystania.  
  
> [!WARNING]
>  Jeśli używasz klasy, która implementuje <xref:System.IDisposable> interfejsu, należy wywołać jej <xref:System.IDisposable.Dispose%2A> wykonania po zakończeniu, za pomocą klasy. Aby uzyskać więcej informacji, zobacz sekcję "Za pomocą obiektu implementującego interfejs IDisposable" w <xref:System.IDisposable> tematu.  
  
 Po wdrożeniu tej metody, upewnij się, wszystkie przechowywane, że zasoby są zwalniane poprzez propagowanie wywołanie przez hierarchię zawierania. Na przykład, jeśli obiekt A przydziela obiekt B, a obiekt B przydziela obiektu C, A następnie <xref:System.IDisposable.Dispose%2A> należy wywołać implementację <xref:System.IDisposable.Dispose%2A> na B, który z kolei wywołać <xref:System.IDisposable.Dispose%2A> w C.  
  
> [!IMPORTANT]
>  Kompilator języka C++ obsługuje deterministycznej likwidacji zasobów i nie zezwala na bezpośrednią implementację <xref:System.IDisposable.Dispose%2A> metody.  
  
 Obiekt musi także wywołać metodę <xref:System.IDisposable.Dispose%2A> metoda swojej klasy bazowej, jeśli klasa bazowa implementuje <xref:System.IDisposable>. Aby uzyskać więcej informacji o implementowaniu <xref:System.IDisposable> klasę podstawową oraz jej podklasach, zobacz sekcję "Interfejs IDisposable i hierarchii dziedziczenia" w <xref:System.IDisposable> tematu.  
  
 Jeśli obiekt <xref:System.IDisposable.Dispose%2A> metoda jest wywoływana więcej niż jeden raz, obiekt musi Ignoruj wszystkich wywołań po pierwszej. Obiekt nie może zgłaszać wyjątek, jeśli jego <xref:System.IDisposable.Dispose%2A> metoda jest wywoływana wiele razy. Wystąpienie metody innej niż <xref:System.IDisposable.Dispose%2A> może zgłosić <xref:System.ObjectDisposedException> gdy zasoby są już usunięte.  
  
 Użytkownicy mogą oczekiwać typu zasobu na potrzeby oznaczania przydzielonego stanu, a zwolnione stan określonej Konwencji. Na przykład jest klasy strumieni, które są tradycyjnie uważane za otwarte lub zamknięte. Implementujący klasy, która ma takie Konwencję może zadecydować o stosowaniu publiczną metodę o nazwie niestandardowe, takie jak `Close`, które wywołuje <xref:System.IDisposable.Dispose%2A> metody.  
  
 Ponieważ <xref:System.IDisposable.Dispose%2A> metoda musi zostać wywołana w sposób jawny, jest zawsze niebezpieczne niezarządzane zasoby nie będą zwolnione, ponieważ konsumenta obiektu nie wywoła jego <xref:System.IDisposable.Dispose%2A> metody. Istnieją dwa sposoby, aby tego uniknąć:  
  
-   OPAKOWYWANIE zasobów zarządzanych w obiekcie pochodną <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>. Twoje <xref:System.IDisposable.Dispose%2A> następnie implementacja wywołuje <xref:System.IDisposable.Dispose%2A> metody <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> wystąpień. Aby uzyskać więcej informacji, zobacz sekcję "Alternatywa SafeHandle" w <xref:System.Object.Finalize%2A?displayProperty=nameWithType> tematu.  
  
-   Implementuje finalizatora, aby zwolnić zasoby podczas <xref:System.IDisposable.Dispose%2A> nie zostanie wywołana. Domyślnie moduł odśmiecania pamięci automatycznie wywołuje finalizatora obiektu przed odzyskiwanie pamięci. Jednak jeśli <xref:System.IDisposable.Dispose%2A> metoda została wywołana, jest zazwyczaj konieczne w przypadku moduł garbage collector wywoływać finalizatory zlikwidowanego obiektu. Aby uniknąć automatycznego finalizacji <xref:System.IDisposable.Dispose%2A> implementacji może wywołać <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> metody.  
  
 Kiedy używać obiekt, który uzyskuje dostęp do niezarządzanych zasobów, takich jak <xref:System.IO.StreamWriter>, dobrą praktyką jest, aby utworzyć wystąpienie z `using` instrukcji. `using` Instrukcji automatycznie zamyka strumienia i wywołania <xref:System.IDisposable.Dispose%2A> obiektu po ukończeniu kod, który jest używany. Aby uzyskać przykład, zobacz <xref:System.IO.StreamWriter> klasy.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, jak można implementować <xref:System.IDisposable.Dispose%2A> metody.  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>