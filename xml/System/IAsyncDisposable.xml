<Type Name="IAsyncDisposable" FullName="System.IAsyncDisposable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b281543e944f0f143783d5ca393fbbc6218dc985" /><Meta Name="ms.sourcegitcommit" Value="74239f3977d28923e5020663db2c4e91601bea79" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="07/24/2019" /><Meta Name="ms.locfileid" Value="68434566" /></Metadata><TypeSignature Language="C#" Value="public interface IAsyncDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAsyncDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IAsyncDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAsyncDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAsyncDisposable" />
  <TypeSignature Language="F#" Value="type IAsyncDisposable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Bcl.AsyncInterfaces</AssemblyName>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Zapewnia mechanizm zwalniania niezarządzanych zasobów asynchronicznie.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

W programie .NET klasy, które są niezarządzanych zasobów zwykle <xref:System.IDisposable> implementują interfejs, aby zapewnić mechanizm do synchronicznego zwalniania niezarządzanych zasobów. Jednak w niektórych przypadkach należy zapewnić asynchroniczny mechanizm zwalniania niezarządzanych zasobów oprócz (lub zamiast) synchronicznie. Dzięki temu mechanizm umożliwia konsumentom wykonywanie operacji usuwania intensywnie korzystających z zasobów bez blokowania głównego wątku aplikacji graficznego interfejsu użytkownika przez długi czas.

Metoda tego interfejsu <xref:System.Threading.Tasks.ValueTask> zwraca wartość reprezentującą asynchroniczną operację Dispose. <xref:System.IAsyncDisposable.DisposeAsync%2A?displayProperty=nameWithType> Klasy, w których są używane zasoby niezarządzane, implementują tę metodę, a odbiorca tych klas wywołuje tę metodę na obiekcie, gdy nie jest już potrzebne.

Metody asynchroniczne są używane w połączeniu ze `async` słowami kluczowymi i C# `await` w i Visual Basic. Aby uzyskać więcej insformation, zobacz [model programowania asynchronicznego zadań w C# programie](/dotnet/csharp/programming-guide/concepts/async/index) lub [asynchroniczne programowanie z użyciem Async i Await (Visual Basic)](/dotnet/visual-basic/programming-guide/concepts/async/).

### <a name="using-an-object-that-implements-iasyncdisposable"></a>Korzystanie z obiektu, który implementuje IAsyncDisposable

Jeśli aplikacja używa obiektu, który implementuje `IAsyncDisposable`, należy wywołać <xref:System.IAsyncDisposable.DisposeAsync%2A> implementację obiektu po zakończeniu korzystania z niego. Aby upewnić się, że zasoby są wydane nawet w przypadku wyjątku, <xref:System.IAsyncDisposable.DisposeAsync%2A> Wywołaj metodę `finally` wewnątrz klauzuli `try` / `finally` instrukcji. Aby uzyskać więcej informacji na `try` temat / `finally` wzorca, zobacz [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md) (C#) lub [try... Catch... Finally — instrukcja](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md) (Visual Basic).

### <a name="implementing-iasyncdisposable"></a>Implementowanie IAsyncDisposable   
    
Można zaimplementować `IAsyncDisposable` w następujących sytuacjach:

- Podczas tworzenia asynchronicznego modułu wyliczającego należącego do niezarządzanych zasobów. Asynchroniczne moduły wyliczające są używane z C# funkcją strumieni asynchronicznych 8,0. Aby uzyskać więcej informacji na temat strumieni asynchronicznych, zobacz [samouczek: Generuj strumienie asynchroniczne i korzystaj C# z nich przy użyciu 8,0](/dotnet/csharp/tutorials/generate-consume-asynchronous-stream)i .NET Core 3,0.

- Gdy klasa posiada niezarządzane zasoby i zwalnia je, wymaga operacji We/Wy intensywnie obciążających zasoby, takich jak opróżnianie zawartości buforu pośredniego do pliku lub wysyłanie pakietu przez sieć w celu zamknięcia połączenia.

<xref:System.IAsyncDisposable.DisposeAsync%2A> Użyj metody, aby wykonać dowolne oczyszczanie po użyciu zasobów niezarządzanych, takich jak zwalnianie, zwalnianie lub resetowanie niezarządzanych zasobów. Aby uzyskać więcej informacji na temat zasobów niezarządzanych w programie .NET, zobacz [Oczyszczanie zasobów niezarządzanych](/dotnet/standard/garbage-collection/unmanaged).
 
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IAsyncDisposable.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="iAsyncDisposable.DisposeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.AsyncInterfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wykonuje zadania zdefiniowane przez aplikację skojarzone z zwalnianiem, zwalnianiem lub resetowaniem niezarządzanych zasobów asynchronicznie.</summary>
        <returns>Zadanie, które reprezentuje asynchroniczną operację Dispose.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

Ta metoda służy do asynchronicznego zamykania lub zwalniania niezarządzanych zasobów, takich jak pliki, strumienie i uchwyty przechowywane przez wystąpienie klasy implementującej ten interfejs. Użycie tej metody zamiast <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> umożliwia wykonywanie operacji Dispose intensywnie korzystających z zasobów bez blokowania głównego wątku aplikacji graficznego interfejsu użytkownika przez długi czas.

> [!WARNING]
>  Jeśli używasz klasy implementującej <xref:System.IAsyncDisposable> interfejs, należy wywołać jej `DisposeAsync` implementację po zakończeniu korzystania z klasy. Aby uzyskać więcej informacji, zobacz sekcję "Używanie obiektu implementującego IAsyncDisposable" w <xref:System.IAsyncDisposable> temacie.

Podczas implementowania tej metody upewnij się, że wszystkie przechowywane zasoby są zwolnione przez propagowanie wywołania przez hierarchię zawierania. Na przykład jeśli obiekt a przydzieli obiekt b, a obiekt b przydzieli obiekt c, `DisposeAsync` implementacja musi wywoływać `DisposeAsync` na B, `DisposeAsync` która musi nawiązać wywołanie w C. Obiekt musi również wywołać `DisposeAsync` metodę klasy bazowej, jeśli implementuje <xref:System.IAsyncDisposable>klasy bazowej.

Jeśli `DisposeAsync` metoda obiektu jest wywoływana więcej niż jeden raz, obiekt musi zignorować wszystkie wywołania po pierwszej i synchronicznie zakończony <xref:System.Threading.Tasks.ValueTask>pomyślnie. Obiekt nie może zgłosić wyjątku, jeśli jego `DisposeAsync` Metoda jest wywoływana wiele razy. Metody wystąpienia inne niż `DisposeAsync` mogą zgłosić, <xref:System.ObjectDisposedException> gdy zasoby zostały już usunięte.
 
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>