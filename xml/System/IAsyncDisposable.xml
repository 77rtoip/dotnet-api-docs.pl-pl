<Type Name="IAsyncDisposable" FullName="System.IAsyncDisposable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bbd87cb9c175eb0c4d5aa893ad32101018b03b5b" /><Meta Name="ms.sourcegitcommit" Value="bc24a3ba616ee1df8b858f9400cae4f058ea3a7e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="06/19/2019" /><Meta Name="ms.locfileid" Value="67245138" /></Metadata><TypeSignature Language="C#" Value="public interface IAsyncDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAsyncDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IAsyncDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAsyncDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAsyncDisposable" />
  <TypeSignature Language="F#" Value="type IAsyncDisposable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Udostępnia mechanizm do zwalniania niezarządzanych zasobów asynchronicznie.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

Na platformie .NET, Implementowanie klas, które posiadają zasoby niezarządzane, zwykle <xref:System.IDisposable> interfejsu mechanizm służącą do zwalniania niezarządzanych zasobów, synchronicznie. Jednak w niektórych przypadkach potrzebne do zapewnienia z asynchronicznego mechanizmu do zwalniania niezarządzanych zasobów, oprócz (lub zamiast) jeden synchroniczne. Zapewnianie taki mechanizm umożliwia, aby wykonywać operacje usuwania obciążający zasoby bez blokowania wątku głównego aplikacji GUI przez długi czas.

<xref:System.IAsyncDisposable.DisposeAsync%2A?displayProperty=nameWithType> Powrocie z metody tego interfejsu <xref:System.Threading.Tasks.ValueTask> reprezentujący operację asynchroniczną metodę dispose. Klasy, które posiadają zasoby niezarządzane zaimplementować tę metodę i konsumenta w ramach tych zajęć wywołuje tę metodę do obiektu, gdy nie jest już potrzebny.

Metody asynchroniczne są używane w połączeniu z `async` i `await` słów kluczowych w C# i Visual Basic. Aby uzyskać więcej insformation, zobacz [zadania asynchronicznego modelu programowania w C# ](/dotnet/csharp/programming-guide/concepts/async/index) lub [Asynchronous Programming with Async and Await (Visual Basic)](/dotnet/visual-basic/programming-guide/concepts/async/).

### <a name="using-an-object-that-implements-iasyncdisposable"></a>Za pomocą obiektu, który implementuje IAsyncDisposable

Jeśli aplikacja używa obiektu, który implementuje `IAsyncDisposable`, należy wywołać obiektu <xref:System.IAsyncDisposable.DisposeAsync%2A> wykonania po zakończeniu korzystania z niego. Aby upewnić się, że zasoby są zwalniane, nawet w przypadku wyjątku, należy wywołać <xref:System.IAsyncDisposable.DisposeAsync%2A> metody w ramach `finally` klauzuli `try` / `finally` instrukcji. Aby uzyskać więcej informacji na temat `try` / `finally` wzorca, zobacz [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md) (C#) lub [spróbuj... CATCH... Na koniec instrukcji](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md) (Visual Basic).

### <a name="implementing-iasyncdisposable"></a>Implementowanie IAsyncDisposable   
    
Można wdrożyć `IAsyncDisposable` w następujących sytuacjach:

- Podczas tworzenia asynchronicznego moduł wyliczający, który jest właścicielem niezarządzane zasoby. Asynchroniczne moduły wyliczające są używane wraz z C# 8.0 funkcji strumieni asynchronicznych. Aby uzyskać więcej informacji na temat strumieni asynchronicznych, zobacz [samouczka: Generowanie i używanie strumieni asynchronicznych za pomocą C# 8.0 i .NET Core 3.0](/dotnet/csharp/tutorials/generate-consume-asynchronous-stream).

- W przypadku klasy jest właścicielem niezarządzanych zasobów i zwalniania ich wymaga zasobochłonnej operacji We/Wy, takich jak opróżnianie zawartość pośrednich bufor do pliku lub wysłania pakietu przez sieć w celu zamknięcia połączenia.

Użyj <xref:System.IAsyncDisposable.DisposeAsync%2A> metodę, aby wykonać dowolne oczyszczania jest konieczne po nim za pomocą niezarządzanych zasobów, takich jak zwalnianie lub resetowaniem zasobów niezarządzanych. Aby uzyskać więcej informacji na temat niezarządzanych zasobów na platformie .NET, zobacz [Cleaning Up Unmanaged Resources](/dotnet/standard/garbage-collection/unmanaged).
 
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IAsyncDisposable.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="iAsyncDisposable.DisposeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wykonuje zdefiniowane przez aplikację zadania skojarzone z zwalnianie lub resetowaniem zasobów niezarządzanych asynchronicznie.</summary>
        <returns>Zadanie reprezentujące operację asynchroniczną metodę dispose.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

Ta metoda asynchronicznie Zamknij i zwalniania niezarządzanych zasobów, takich jak pliki strumieni i utrzymywane przez wystąpienie klasy, który implementuje ten interfejs obsługuje. Za pomocą tej metody, zamiast <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> umożliwia wykonywanie operacji usuwania obciążający zasoby bez blokowania wątku głównego aplikacji GUI przez długi czas.

> [!WARNING]
>  Jeśli używasz klasy, która implementuje <xref:System.IAsyncDisposable> interfejsu, należy wywołać jej `DisposeAsync` wykonania po zakończeniu, za pomocą klasy. Aby uzyskać więcej informacji, zobacz sekcję "Za pomocą obiektu, który implementuje IAsyncDisposable" w <xref:System.IAsyncDisposable> tematu.

Po wdrożeniu tej metody, upewnij się, wszystkie przechowywane, że zasoby są zwalniane poprzez propagowanie wywołanie przez hierarchię zawierania. Na przykład, jeśli obiekt A przydziela obiekt B, a obiekt B przydziela obiektu C, A następnie `DisposeAsync` należy wywołać implementację `DisposeAsync` na B, który z kolei wywołać `DisposeAsync` w C. Obiekt musi także wywołać metodę `DisposeAsync` metoda swojej klasy bazowej, jeśli klasa bazowa implementuje <xref:System.IAsyncDisposable>.

Jeśli obiekt `DisposeAsync` metoda jest wywoływana więcej niż jeden raz, obiekt musi Ignoruj wszystkich wywołań po pierwszej i synchroniczne zwracają pomyślnie ukończono <xref:System.Threading.Tasks.ValueTask>. Obiekt nie może zgłaszać wyjątek, jeśli jego `DisposeAsync` metoda jest wywoływana wiele razy. Wystąpienie metody innej niż `DisposeAsync` może zgłosić <xref:System.ObjectDisposedException> gdy zasoby są już usunięte.
 
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>