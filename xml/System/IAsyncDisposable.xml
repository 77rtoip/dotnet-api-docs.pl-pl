<Type Name="IAsyncDisposable" FullName="System.IAsyncDisposable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5091a2d0242c3592559a7ebd15927112cee76d5a" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69406009" /></Metadata><TypeSignature Language="C#" Value="public interface IAsyncDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAsyncDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IAsyncDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAsyncDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAsyncDisposable" />
  <TypeSignature Language="F#" Value="type IAsyncDisposable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Bcl.AsyncInterfaces</AssemblyName>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="23246-101">Zapewnia mechanizm zwalniania niezarządzanych zasobów asynchronicznie.</span><span class="sxs-lookup"><span data-stu-id="23246-101">Provides a mechanism for releasing unmanaged resources asynchronously.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="23246-102">W programie .NET klasy, które są niezarządzanych zasobów zwykle <xref:System.IDisposable> implementują interfejs, aby zapewnić mechanizm do synchronicznego zwalniania niezarządzanych zasobów.</span><span class="sxs-lookup"><span data-stu-id="23246-102">In .NET, classes that own unmanaged resources usually implement the <xref:System.IDisposable> interface to provide a mechanism for releasing unmanaged resources synchronously.</span></span> <span data-ttu-id="23246-103">Jednak w niektórych przypadkach należy zapewnić asynchroniczny mechanizm zwalniania niezarządzanych zasobów oprócz (lub zamiast) synchronicznie.</span><span class="sxs-lookup"><span data-stu-id="23246-103">However, in some cases they need to provide an asynchronous mechanism for releasing unmanaged resources in addition to (or instead of) the synchronous one.</span></span> <span data-ttu-id="23246-104">Dzięki temu mechanizm umożliwia konsumentom wykonywanie operacji usuwania intensywnie korzystających z zasobów bez blokowania głównego wątku aplikacji graficznego interfejsu użytkownika przez długi czas.</span><span class="sxs-lookup"><span data-stu-id="23246-104">Providing such a mechanism enables the consumer to perform resource-intensive dispose operations without blocking the main thread of a GUI application for a long time.</span></span>

<span data-ttu-id="23246-105">Metoda tego interfejsu <xref:System.Threading.Tasks.ValueTask> zwraca wartość reprezentującą asynchroniczną operację Dispose. <xref:System.IAsyncDisposable.DisposeAsync%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="23246-105">The <xref:System.IAsyncDisposable.DisposeAsync%2A?displayProperty=nameWithType> method of this interface returns a <xref:System.Threading.Tasks.ValueTask> that represents the asynchronous dispose operation.</span></span> <span data-ttu-id="23246-106">Klasy, w których są używane zasoby niezarządzane, implementują tę metodę, a odbiorca tych klas wywołuje tę metodę na obiekcie, gdy nie jest już potrzebne.</span><span class="sxs-lookup"><span data-stu-id="23246-106">Classes that own unmanaged resources implement this method, and the consumer of these classes calls this method on an object when it is no longer needed.</span></span>

<span data-ttu-id="23246-107">Metody asynchroniczne są używane w połączeniu ze `async` słowami kluczowymi i C# `await` w i Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="23246-107">The async methods are used in conjunction with the `async` and `await` keywords in C# and Visual Basic.</span></span> <span data-ttu-id="23246-108">Aby uzyskać więcej insformation, zobacz [model programowania asynchronicznego zadań w C# programie](/dotnet/csharp/programming-guide/concepts/async/index) lub [asynchroniczne programowanie z użyciem Async i Await (Visual Basic)](/dotnet/visual-basic/programming-guide/concepts/async/).</span><span class="sxs-lookup"><span data-stu-id="23246-108">For more insformation, see [The Task asynchronous programming model in C#](/dotnet/csharp/programming-guide/concepts/async/index) or [Asynchronous Programming with Async and Await (Visual Basic)](/dotnet/visual-basic/programming-guide/concepts/async/).</span></span>

### <a name="using-an-object-that-implements-iasyncdisposable"></a><span data-ttu-id="23246-109">Korzystanie z obiektu, który implementuje IAsyncDisposable</span><span class="sxs-lookup"><span data-stu-id="23246-109">Using an object that implements IAsyncDisposable</span></span>

<span data-ttu-id="23246-110">Jeśli aplikacja używa obiektu, który implementuje `IAsyncDisposable`, należy wywołać <xref:System.IAsyncDisposable.DisposeAsync%2A> implementację obiektu po zakończeniu korzystania z niego.</span><span class="sxs-lookup"><span data-stu-id="23246-110">If your application uses an object that implements `IAsyncDisposable`, you should call the object's <xref:System.IAsyncDisposable.DisposeAsync%2A> implementation when you are finished using it.</span></span> <span data-ttu-id="23246-111">Aby upewnić się, że zasoby są wydane nawet w przypadku wyjątku, <xref:System.IAsyncDisposable.DisposeAsync%2A> Wywołaj metodę `finally` wewnątrz klauzuli `try` / `finally` instrukcji.</span><span class="sxs-lookup"><span data-stu-id="23246-111">To make sure resources are released even in case of an exception, call the <xref:System.IAsyncDisposable.DisposeAsync%2A> method inside a `finally` clause of the `try`/`finally` statement.</span></span> <span data-ttu-id="23246-112">Aby uzyskać więcej informacji na `try` temat / `finally` wzorca, zobacz [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md) (C#) lub [try... Catch... Finally — instrukcja](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md) (Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="23246-112">For more information about the `try`/`finally` pattern, see [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md) (C#) or [Try...Catch...Finally Statement](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md) (Visual Basic).</span></span>

### <a name="implementing-iasyncdisposable"></a><span data-ttu-id="23246-113">Implementowanie IAsyncDisposable</span><span class="sxs-lookup"><span data-stu-id="23246-113">Implementing IAsyncDisposable</span></span>   
    
<span data-ttu-id="23246-114">Można zaimplementować `IAsyncDisposable` w następujących sytuacjach:</span><span class="sxs-lookup"><span data-stu-id="23246-114">You might implement `IAsyncDisposable` in the following situations:</span></span>

- <span data-ttu-id="23246-115">Podczas tworzenia asynchronicznego modułu wyliczającego należącego do niezarządzanych zasobów.</span><span class="sxs-lookup"><span data-stu-id="23246-115">When developing an asynchronous enumerator that owns unmanaged resources.</span></span> <span data-ttu-id="23246-116">Asynchroniczne moduły wyliczające są używane z C# funkcją strumieni asynchronicznych 8,0.</span><span class="sxs-lookup"><span data-stu-id="23246-116">Asynchronous enumerators are used with the C# 8.0 async streams feature.</span></span> <span data-ttu-id="23246-117">Aby uzyskać więcej informacji na temat strumieni asynchronicznych, zobacz [samouczek: Generuj strumienie asynchroniczne i korzystaj C# z nich przy użyciu 8,0](/dotnet/csharp/tutorials/generate-consume-asynchronous-stream)i .NET Core 3,0.</span><span class="sxs-lookup"><span data-stu-id="23246-117">For more information about async streams, see [Tutorial: Generate and consume async streams using C# 8.0 and .NET Core 3.0](/dotnet/csharp/tutorials/generate-consume-asynchronous-stream).</span></span>

- <span data-ttu-id="23246-118">Gdy klasa posiada niezarządzane zasoby i zwalnia je, wymaga operacji We/Wy intensywnie obciążających zasoby, takich jak opróżnianie zawartości buforu pośredniego do pliku lub wysyłanie pakietu przez sieć w celu zamknięcia połączenia.</span><span class="sxs-lookup"><span data-stu-id="23246-118">When your class owns unmanaged resources and releasing them requires a resource-intensive I/O operation, such as flushing the contents of an intermediate buffer into a file or sending a packet over a network to close a connection.</span></span>

<span data-ttu-id="23246-119"><xref:System.IAsyncDisposable.DisposeAsync%2A> Użyj metody, aby wykonać dowolne oczyszczanie po użyciu zasobów niezarządzanych, takich jak zwalnianie, zwalnianie lub resetowanie niezarządzanych zasobów.</span><span class="sxs-lookup"><span data-stu-id="23246-119">Use the <xref:System.IAsyncDisposable.DisposeAsync%2A> method to perform whatever cleanup is necessary after using the unmanaged resources, such as freeing, releasing, or resetting the unmanaged resources.</span></span> <span data-ttu-id="23246-120">Aby uzyskać więcej informacji na temat zasobów niezarządzanych w programie .NET, zobacz [Oczyszczanie zasobów niezarządzanych](/dotnet/standard/garbage-collection/unmanaged).</span><span class="sxs-lookup"><span data-stu-id="23246-120">For more information about unmanaged resources in .NET, see [Cleaning Up Unmanaged Resources](/dotnet/standard/garbage-collection/unmanaged).</span></span>
 
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IAsyncDisposable.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="iAsyncDisposable.DisposeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.AsyncInterfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="23246-121">Wykonuje zadania zdefiniowane przez aplikację skojarzone z zwalnianiem, zwalnianiem lub resetowaniem niezarządzanych zasobów asynchronicznie.</span><span class="sxs-lookup"><span data-stu-id="23246-121">Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously.</span></span></summary>
        <returns><span data-ttu-id="23246-122">Zadanie, które reprezentuje asynchroniczną operację Dispose.</span><span class="sxs-lookup"><span data-stu-id="23246-122">A task that represents the asynchronous dispose operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="23246-123">Ta metoda służy do asynchronicznego zamykania lub zwalniania niezarządzanych zasobów, takich jak pliki, strumienie i uchwyty przechowywane przez wystąpienie klasy implementującej ten interfejs.</span><span class="sxs-lookup"><span data-stu-id="23246-123">Use this method to asynchronously close or release unmanaged resources such as files, streams, and handles held by an instance of the class that implements this interface.</span></span> <span data-ttu-id="23246-124">Użycie tej metody zamiast <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> umożliwia wykonywanie operacji Dispose intensywnie korzystających z zasobów bez blokowania głównego wątku aplikacji graficznego interfejsu użytkownika przez długi czas.</span><span class="sxs-lookup"><span data-stu-id="23246-124">Using this method instead of <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> enables you to perform a resource-intensive dispose operation without blocking the main thread of a GUI application for a long time.</span></span>

> [!WARNING]
>  <span data-ttu-id="23246-125">Jeśli używasz klasy implementującej <xref:System.IAsyncDisposable> interfejs, należy wywołać jej `DisposeAsync` implementację po zakończeniu korzystania z klasy.</span><span class="sxs-lookup"><span data-stu-id="23246-125">If you are using a class that implements the <xref:System.IAsyncDisposable> interface, you should call its `DisposeAsync` implementation when you are finished using the class.</span></span> <span data-ttu-id="23246-126">Aby uzyskać więcej informacji, zobacz sekcję "Używanie obiektu implementującego IAsyncDisposable" w <xref:System.IAsyncDisposable> temacie.</span><span class="sxs-lookup"><span data-stu-id="23246-126">For more information, see the "Using an object that implements IAsyncDisposable" section in the <xref:System.IAsyncDisposable> topic.</span></span>

<span data-ttu-id="23246-127">Podczas implementowania tej metody upewnij się, że wszystkie przechowywane zasoby są zwolnione przez propagowanie wywołania przez hierarchię zawierania.</span><span class="sxs-lookup"><span data-stu-id="23246-127">When implementing this method, ensure that all held resources are freed by propagating the call through the containment hierarchy.</span></span> <span data-ttu-id="23246-128">Na przykład jeśli obiekt a przydzieli obiekt b, a obiekt b przydzieli obiekt c, `DisposeAsync` implementacja musi wywoływać `DisposeAsync` na B, `DisposeAsync` która musi nawiązać wywołanie w C. Obiekt musi również wywołać `DisposeAsync` metodę klasy bazowej, jeśli implementuje <xref:System.IAsyncDisposable>klasy bazowej.</span><span class="sxs-lookup"><span data-stu-id="23246-128">For example, if an object A allocates an object B, and object B allocates an object C, then A's `DisposeAsync` implementation must call `DisposeAsync` on B, which must in turn call `DisposeAsync` on C. An object must also call the `DisposeAsync` method of its base class if the base class implements <xref:System.IAsyncDisposable>.</span></span>

<span data-ttu-id="23246-129">Jeśli `DisposeAsync` metoda obiektu jest wywoływana więcej niż jeden raz, obiekt musi zignorować wszystkie wywołania po pierwszej i synchronicznie zakończony <xref:System.Threading.Tasks.ValueTask>pomyślnie.</span><span class="sxs-lookup"><span data-stu-id="23246-129">If an object's `DisposeAsync` method is called more than once, the object must ignore all calls after the first one and synchronously return a successfully completed <xref:System.Threading.Tasks.ValueTask>.</span></span> <span data-ttu-id="23246-130">Obiekt nie może zgłosić wyjątku, jeśli jego `DisposeAsync` Metoda jest wywoływana wiele razy.</span><span class="sxs-lookup"><span data-stu-id="23246-130">The object must not throw an exception if its `DisposeAsync` method is called multiple times.</span></span> <span data-ttu-id="23246-131">Metody wystąpienia inne niż `DisposeAsync` mogą zgłosić, <xref:System.ObjectDisposedException> gdy zasoby zostały już usunięte.</span><span class="sxs-lookup"><span data-stu-id="23246-131">Instance methods other than `DisposeAsync` can throw an <xref:System.ObjectDisposedException> when resources are already disposed.</span></span>
 
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
