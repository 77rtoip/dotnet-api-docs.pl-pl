<Type Name="Math" FullName="System.Math">
  <TypeSignature Language="C#" Value="public static class Math" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Math extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Math" />
  <TypeSignature Language="VB.NET" Value="Public Class Math" />
  <TypeSignature Language="C++ CLI" Value="public ref class Math abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="cd119-101">Udostępnia stałe i metod statycznych dla trygonometryczne logarytmicznej i inne typowe funkcje matematyczne.</span><span class="sxs-lookup"><span data-stu-id="cd119-101">Provides constants and static methods for trigonometric, logarithmic, and other common mathematical functions.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd119-102">W poniższym przykładzie użyto kilka funkcje matematyczne i trygonometryczne z <xref:System.Math> klasy do obliczenia wewnętrzny kąty trapezu.</span><span class="sxs-lookup"><span data-stu-id="cd119-102">The following example uses several mathematical and trigonometric functions from the <xref:System.Math> class to calculate the inner angles of a trapezoid.</span></span>  
  
 [!code-cpp[MathSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/MathSample/CPP/mathsample.cpp#1)]
 [!code-csharp[MathSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/MathSample/CS/mathsample.cs#1)]
 [!code-vb[MathSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MathSample/VB/mathsample.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Abs">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cd119-103">Zwraca wartość bezwzględną podanej liczby.</span><span class="sxs-lookup"><span data-stu-id="cd119-103">Returns the absolute value of a specified number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static decimal Abs (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Abs(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Abs(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Abs(System::Decimal value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="cd119-104">Liczby, która jest większa niż lub równa <see cref="F:System.Decimal.MinValue" />, ale mniejsze niż lub równe <see cref="F:System.Decimal.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-104">A number that is greater than or equal to <see cref="F:System.Decimal.MinValue" />, but less than or equal to <see cref="F:System.Decimal.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="cd119-105">Zwraca wartość bezwzględną liczby <see cref="T:System.Decimal" /> numer.</span><span class="sxs-lookup"><span data-stu-id="cd119-105">Returns the absolute value of a <see cref="T:System.Decimal" /> number.</span></span></summary>
        <returns><span data-ttu-id="cd119-106">Liczby dziesiętnej, x, że x ≤ 0 ≤<see cref="F:System.Decimal.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-106">A decimal number, x, such that 0 ≤ x ≤<see cref="F:System.Decimal.MaxValue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd119-107">Wartość bezwzględna <xref:System.Decimal> jest jego wartość liczbową bez znaku.</span><span class="sxs-lookup"><span data-stu-id="cd119-107">The absolute value of a <xref:System.Decimal> is its numeric value without its sign.</span></span> <span data-ttu-id="cd119-108">Na przykład wartość bezwzględna 1.2 i -1,2 jest 1.2.</span><span class="sxs-lookup"><span data-stu-id="cd119-108">For example, the absolute value of both 1.2 and -1.2 is 1.2.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd119-109">W poniższym przykładzie użyto <xref:System.Math.Abs%28System.Decimal%29> metodę, aby uzyskać wartość bezwzględną liczby <xref:System.Decimal> wartości.</span><span class="sxs-lookup"><span data-stu-id="cd119-109">The following example uses the <xref:System.Math.Abs%28System.Decimal%29> method to get the absolute value of a number of <xref:System.Decimal> values.</span></span>  
  
 [!code-csharp[System.Math.Abs#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/Abs1.cs#1)]
 [!code-vb[System.Math.Abs#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/Abs1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static double Abs (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Abs(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Abs(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Abs(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="cd119-110">Liczby, która jest większa niż lub równa <see cref="F:System.Double.MinValue" />, ale mniejsze niż lub równe <see cref="F:System.Double.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-110">A number that is greater than or equal to <see cref="F:System.Double.MinValue" />, but less than or equal to <see cref="F:System.Double.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="cd119-111">Zwraca wartość bezwzględną liczby zmiennoprzecinkowej podwójnej precyzji.</span><span class="sxs-lookup"><span data-stu-id="cd119-111">Returns the absolute value of a double-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="cd119-112">Liczby zmiennoprzecinkowe podwójnej precyzji x, że x ≤ 0 ≤<see cref="F:System.Double.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-112">A double-precision floating-point number, x, such that 0 ≤ x ≤<see cref="F:System.Double.MaxValue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd119-113">Wartość bezwzględna <xref:System.Double> jest jego wartość liczbową bez znaku.</span><span class="sxs-lookup"><span data-stu-id="cd119-113">The absolute value of a <xref:System.Double> is its numeric value without its sign.</span></span> <span data-ttu-id="cd119-114">Na przykład 1.2e03 ma wartość bezwzględna 1.2e03 i - 1.2e03.</span><span class="sxs-lookup"><span data-stu-id="cd119-114">For example, the absolute value of both 1.2e03 and -1.2e03 is 1.2e03.</span></span>  
  
 <span data-ttu-id="cd119-115">Jeśli `value` jest równa <xref:System.Double.NegativeInfinity> lub <xref:System.Double.PositiveInfinity>, jest zwracana wartość <xref:System.Double.PositiveInfinity>.</span><span class="sxs-lookup"><span data-stu-id="cd119-115">If `value` is equal to <xref:System.Double.NegativeInfinity> or <xref:System.Double.PositiveInfinity>, the return value is <xref:System.Double.PositiveInfinity>.</span></span> <span data-ttu-id="cd119-116">Jeśli `value` jest równa <xref:System.Double.NaN>, jest zwracana wartość <xref:System.Double.NaN>.</span><span class="sxs-lookup"><span data-stu-id="cd119-116">If `value` is equal to <xref:System.Double.NaN>, the return value is <xref:System.Double.NaN>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd119-117">W poniższym przykładzie użyto <xref:System.Math.Abs%28System.Double%29> metodę, aby uzyskać wartość bezwzględną liczby <xref:System.Double> wartości.</span><span class="sxs-lookup"><span data-stu-id="cd119-117">The following example uses the <xref:System.Math.Abs%28System.Double%29> method to get the absolute value of a number of <xref:System.Double> values.</span></span>  
  
 [!code-csharp[System.Math.Abs#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/abs2.cs#2)]
 [!code-vb[System.Math.Abs#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/abs2.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static short Abs (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 Abs(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Abs(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Abs(short value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="cd119-118">Liczba, która jest większa niż <see cref="F:System.Int16.MinValue" />, ale mniejsze niż lub równe <see cref="F:System.Int16.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-118">A number that is greater than <see cref="F:System.Int16.MinValue" />, but less than or equal to <see cref="F:System.Int16.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="cd119-119">Zwraca wartość bezwzględną liczby 16-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="cd119-119">Returns the absolute value of a 16-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="cd119-120">16-bitową liczbę całkowitą ze znakiem, x, że x ≤ 0 ≤<see cref="F:System.Int16.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-120">A 16-bit signed integer, x, such that 0 ≤ x ≤<see cref="F:System.Int16.MaxValue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd119-121">Wartość bezwzględna <xref:System.Int16> jest jego wartość liczbową bez znaku.</span><span class="sxs-lookup"><span data-stu-id="cd119-121">The absolute value of an <xref:System.Int16> is its numeric value without its sign.</span></span> <span data-ttu-id="cd119-122">Na przykład 123 ma wartość bezwzględna 123 i-123.</span><span class="sxs-lookup"><span data-stu-id="cd119-122">For example, the absolute value of both 123 and -123 is 123.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd119-123">W poniższym przykładzie użyto <xref:System.Math.Abs%28System.Int16%29> metodę, aby uzyskać wartość bezwzględną liczby <xref:System.Int16> wartości.</span><span class="sxs-lookup"><span data-stu-id="cd119-123">The following example uses the <xref:System.Math.Abs%28System.Int16%29> method to get the absolute value of a number of <xref:System.Int16> values.</span></span>  
  
 [!code-csharp[System.Math.Abs#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/abs3.cs#3)]
 [!code-vb[System.Math.Abs#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/abs3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="cd119-124"><paramref name="value" /> Equals <see cref="F:System.Int16.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-124"><paramref name="value" /> equals <see cref="F:System.Int16.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static int Abs (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Abs(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Abs(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Abs(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="cd119-125">Liczba, która jest większa niż <see cref="F:System.Int32.MinValue" />, ale mniejsze niż lub równe <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-125">A number that is greater than <see cref="F:System.Int32.MinValue" />, but less than or equal to <see cref="F:System.Int32.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="cd119-126">Zwraca wartość bezwzględną liczby całkowita 32-bitowych.</span><span class="sxs-lookup"><span data-stu-id="cd119-126">Returns the absolute value of a 32-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="cd119-127">32-bitowe podpisane liczby całkowite, x, że x ≤ 0 ≤<see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-127">A 32-bit signed integer, x, such that 0 ≤ x ≤<see cref="F:System.Int32.MaxValue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd119-128">Wartość bezwzględna <xref:System.Int32> jest jego wartość liczbową bez znaku.</span><span class="sxs-lookup"><span data-stu-id="cd119-128">The absolute value of an <xref:System.Int32> is its numeric value without its sign.</span></span> <span data-ttu-id="cd119-129">Na przykład 123 ma wartość bezwzględna 123 i-123.</span><span class="sxs-lookup"><span data-stu-id="cd119-129">For example, the absolute value of both 123 and -123 is 123.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd119-130">W poniższym przykładzie użyto <xref:System.Math.Abs%28System.Int32%29> metodę, aby uzyskać wartość bezwzględną liczby <xref:System.Int32> wartości.</span><span class="sxs-lookup"><span data-stu-id="cd119-130">The following example uses the <xref:System.Math.Abs%28System.Int32%29> method to get the absolute value of a number of <xref:System.Int32> values.</span></span>  
  
 [!code-csharp[System.Math.Abs#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/abs4.cs#4)]
 [!code-vb[System.Math.Abs#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/abs4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="cd119-131"><paramref name="value" /> Equals <see cref="F:System.Int32.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-131"><paramref name="value" /> equals <see cref="F:System.Int32.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static long Abs (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Abs(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Abs(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Abs(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="cd119-132">Liczba, która jest większa niż <see cref="F:System.Int64.MinValue" />, ale mniejsze niż lub równe <see cref="F:System.Int64.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-132">A number that is greater than <see cref="F:System.Int64.MinValue" />, but less than or equal to <see cref="F:System.Int64.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="cd119-133">Zwraca wartość bezwzględną liczby 64-bitowej podpisanej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="cd119-133">Returns the absolute value of a 64-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="cd119-134">64-bitowych podpisane liczby całkowite, x, że x ≤ 0 ≤<see cref="F:System.Int64.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-134">A 64-bit signed integer, x, such that 0 ≤ x ≤<see cref="F:System.Int64.MaxValue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd119-135">Wartość bezwzględna <xref:System.Int64> jest jego wartość liczbową bez znaku.</span><span class="sxs-lookup"><span data-stu-id="cd119-135">The absolute value of an <xref:System.Int64> is its numeric value without its sign.</span></span> <span data-ttu-id="cd119-136">Na przykład 123 ma wartość bezwzględna 123 i-123.</span><span class="sxs-lookup"><span data-stu-id="cd119-136">For example, the absolute value of both 123 and -123 is 123.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd119-137">W poniższym przykładzie użyto <xref:System.Math.Abs%28System.Int64%29> metodę, aby uzyskać wartość bezwzględną liczby <xref:System.Int64> wartości.</span><span class="sxs-lookup"><span data-stu-id="cd119-137">The following example uses the <xref:System.Math.Abs%28System.Int64%29> method to get the absolute value of a number of <xref:System.Int64> values.</span></span>  
  
 [!code-csharp[System.Math.Abs#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/abs5.cs#5)]
 [!code-vb[System.Math.Abs#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/abs5.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="cd119-138"><paramref name="value" /> Equals <see cref="F:System.Int64.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-138"><paramref name="value" /> equals <see cref="F:System.Int64.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static sbyte Abs (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 Abs(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Abs(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As SByte) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte Abs(System::SByte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="cd119-139">Liczba, która jest większa niż <see cref="F:System.SByte.MinValue" />, ale mniejsze niż lub równe <see cref="F:System.SByte.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-139">A number that is greater than <see cref="F:System.SByte.MinValue" />, but less than or equal to <see cref="F:System.SByte.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="cd119-140">Zwraca wartość bezwzględną liczby 8-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="cd119-140">Returns the absolute value of an 8-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="cd119-141">8-bitową liczbę całkowitą ze znakiem, x, że x ≤ 0 ≤<see cref="F:System.SByte.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-141">An 8-bit signed integer, x, such that 0 ≤ x ≤<see cref="F:System.SByte.MaxValue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd119-142">Wartość bezwzględna bajtu ze znakiem jest jego wartość liczbową bez znaku.</span><span class="sxs-lookup"><span data-stu-id="cd119-142">The absolute value of a signed byte is its numeric value without its sign.</span></span> <span data-ttu-id="cd119-143">Na przykład 12 ma wartość bezwzględna 12 i -12.</span><span class="sxs-lookup"><span data-stu-id="cd119-143">For example, the absolute value of both 12 and -12 is 12.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd119-144">W poniższym przykładzie użyto <xref:System.Math.Abs%28System.SByte%29> metodę, aby uzyskać wartość bezwzględną liczby <xref:System.SByte> wartości.</span><span class="sxs-lookup"><span data-stu-id="cd119-144">The following example uses the <xref:System.Math.Abs%28System.SByte%29> method to get the absolute value of a number of <xref:System.SByte> values.</span></span>  
  
 [!code-csharp[System.Math.Abs#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/abs6.cs#6)]
 [!code-vb[System.Math.Abs#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/abs6.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="cd119-145"><paramref name="value" /> Equals <see cref="F:System.SByte.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-145"><paramref name="value" /> equals <see cref="F:System.SByte.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static float Abs (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Abs(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Abs(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Abs(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="cd119-146">Liczby, która jest większa niż lub równa <see cref="F:System.Single.MinValue" />, ale mniejsze niż lub równe <see cref="F:System.Single.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-146">A number that is greater than or equal to <see cref="F:System.Single.MinValue" />, but less than or equal to <see cref="F:System.Single.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="cd119-147">Zwraca wartość bezwzględną liczby zmiennoprzecinkowej pojedynczej precyzji.</span><span class="sxs-lookup"><span data-stu-id="cd119-147">Returns the absolute value of a single-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="cd119-148">Liczba zmiennoprzecinkowa pojedynczej precyzji, x, że x ≤ 0 ≤<see cref="F:System.Single.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-148">A single-precision floating-point number, x, such that 0 ≤ x ≤<see cref="F:System.Single.MaxValue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd119-149">Wartość bezwzględna <xref:System.Single> jest jego wartość liczbową bez znaku.</span><span class="sxs-lookup"><span data-stu-id="cd119-149">The absolute value of a <xref:System.Single> is its numeric value without its sign.</span></span> <span data-ttu-id="cd119-150">Na przykład wartość bezwzględna zarówno 1.2e-03 i - 1.2e03 jest 1.2e03.</span><span class="sxs-lookup"><span data-stu-id="cd119-150">For example, the absolute value of both 1.2e-03 and -1.2e03 is 1.2e03.</span></span>  
  
 <span data-ttu-id="cd119-151">Jeśli `value` jest równa <xref:System.Single.NegativeInfinity> lub <xref:System.Single.PositiveInfinity>, jest zwracana wartość <xref:System.Single.PositiveInfinity>.</span><span class="sxs-lookup"><span data-stu-id="cd119-151">If `value` is equal to <xref:System.Single.NegativeInfinity> or <xref:System.Single.PositiveInfinity>, the return value is <xref:System.Single.PositiveInfinity>.</span></span> <span data-ttu-id="cd119-152">Jeśli `value` jest równa <xref:System.Single.NaN>, jest zwracana wartość <xref:System.Single.NaN>.</span><span class="sxs-lookup"><span data-stu-id="cd119-152">If `value` is equal to <xref:System.Single.NaN>, the return value is <xref:System.Single.NaN>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd119-153">W poniższym przykładzie użyto <xref:System.Math.Abs%28System.Single%29> metodę, aby uzyskać wartość bezwzględną liczby <xref:System.Single> wartości.</span><span class="sxs-lookup"><span data-stu-id="cd119-153">The following example uses the <xref:System.Math.Abs%28System.Single%29> method to get the absolute value of a number of <xref:System.Single> values.</span></span>  
  
 [!code-csharp[System.Math.Abs#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/abs7.cs#7)]
 [!code-vb[System.Math.Abs#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/abs7.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Acos">
      <MemberSignature Language="C#" Value="public static double Acos (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Acos(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Acos(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Acos (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Acos(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="cd119-154">Liczba reprezentująca cosinus, gdzie <c>d</c> musi być większa niż lub równy -1, ale mniejsze niż lub równa 1.</span><span class="sxs-lookup"><span data-stu-id="cd119-154">A number representing a cosine, where <c>d</c> must be greater than or equal to -1, but less than or equal to 1.</span></span></param>
        <summary><span data-ttu-id="cd119-155">Zwraca kąt, którego cosinus jest równy podanej liczbie.</span><span class="sxs-lookup"><span data-stu-id="cd119-155">Returns the angle whose cosine is the specified number.</span></span></summary>
        <returns><span data-ttu-id="cd119-156">Kąt, θ mierzony w radianach, tak, aby 0 ≤θ≤π</span><span class="sxs-lookup"><span data-stu-id="cd119-156">An angle, θ, measured in radians, such that 0 ≤θ≤π</span></span>  
  
 <span data-ttu-id="cd119-157">—lub—</span><span class="sxs-lookup"><span data-stu-id="cd119-157">-or-</span></span>  
  
 <span data-ttu-id="cd119-158"><see cref="F:System.Double.NaN" /> Jeśli <paramref name="d" /> &lt; -1 lub <paramref name="d" /> &gt; 1 lub <paramref name="d" /> jest równe <see cref="F:System.Double.NaN" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-158"><see cref="F:System.Double.NaN" /> if <paramref name="d" /> &lt; -1 or <paramref name="d" /> &gt; 1 or <paramref name="d" /> equals <see cref="F:System.Double.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd119-159">Należy pomnożyć wartość zwracaną przez 180 /<xref:System.Math.PI?displayProperty=nameWithType> aby z radianów w stopniach.</span><span class="sxs-lookup"><span data-stu-id="cd119-159">Multiply the return value by 180/<xref:System.Math.PI?displayProperty=nameWithType> to convert from radians to degrees.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd119-160">W poniższym przykładzie użyto <xref:System.Math.Acos%2A> metodę, aby ułatwić obliczenia wewnętrzny kąty danego Trapez.</span><span class="sxs-lookup"><span data-stu-id="cd119-160">The following example uses the <xref:System.Math.Acos%2A> method to assist in the computation of the inner angles of a given trapezoid.</span></span>  
  
 [!code-cpp[MathSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/MathSample/CPP/mathsample.cpp#1)]
 [!code-csharp[MathSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/MathSample/CS/mathsample.cs#1)]
 [!code-vb[MathSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MathSample/VB/mathsample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Acosh">
      <MemberSignature Language="C#" Value="public static double Acosh (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Acosh(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Acosh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Acosh (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Acosh(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Asin">
      <MemberSignature Language="C#" Value="public static double Asin (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Asin(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Asin(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Asin (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Asin(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="cd119-161">Liczba reprezentująca sinusa, gdzie <c>d</c> musi być większa niż lub równy -1, ale mniejsze niż lub równa 1.</span><span class="sxs-lookup"><span data-stu-id="cd119-161">A number representing a sine, where <c>d</c> must be greater than or equal to -1, but less than or equal to 1.</span></span></param>
        <summary><span data-ttu-id="cd119-162">Zwraca kąt, którego sinus jest równy podanej liczbie.</span><span class="sxs-lookup"><span data-stu-id="cd119-162">Returns the angle whose sine is the specified number.</span></span></summary>
        <returns><span data-ttu-id="cd119-163">Kąt, θ mierzony w radianach, tak, aby ≤θ≤π - π/2/2</span><span class="sxs-lookup"><span data-stu-id="cd119-163">An angle, θ, measured in radians, such that -π/2 ≤θ≤π/2</span></span>  
  
 <span data-ttu-id="cd119-164">—lub—</span><span class="sxs-lookup"><span data-stu-id="cd119-164">-or-</span></span>  
  
 <span data-ttu-id="cd119-165"><see cref="F:System.Double.NaN" /> Jeśli <paramref name="d" /> &lt; -1 lub <paramref name="d" /> &gt; 1 lub <paramref name="d" /> jest równe <see cref="F:System.Double.NaN" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-165"><see cref="F:System.Double.NaN" /> if <paramref name="d" /> &lt; -1 or <paramref name="d" /> &gt; 1 or <paramref name="d" /> equals <see cref="F:System.Double.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd119-166">Dodatnia wartość zwracany reprezentuje kątowi od osi x; zwracane wartości ujemnej reprezentuje kąt do ruchu wskazówek zegara.</span><span class="sxs-lookup"><span data-stu-id="cd119-166">A positive return value represents a counterclockwise angle from the x-axis; a negative return value represents a clockwise angle.</span></span>  
  
 <span data-ttu-id="cd119-167">Należy pomnożyć wartość zwracaną przez 180 /<xref:System.Math.PI?displayProperty=nameWithType> aby z radianów w stopniach.</span><span class="sxs-lookup"><span data-stu-id="cd119-167">Multiply the return value by 180/<xref:System.Math.PI?displayProperty=nameWithType> to convert from radians to degrees.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd119-168">W poniższym przykładzie użyto <xref:System.Math.Asin%2A> ułatwiających obliczenia wewnętrzny kąty danego Trapez.</span><span class="sxs-lookup"><span data-stu-id="cd119-168">The following example uses <xref:System.Math.Asin%2A> to assist in the computation of the inner angles of a given trapezoid.</span></span>  
  
 [!code-cpp[MathSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/MathSample/CPP/mathsample.cpp#1)]
 [!code-csharp[MathSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/MathSample/CS/mathsample.cs#1)]
 [!code-vb[MathSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MathSample/VB/mathsample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Asinh">
      <MemberSignature Language="C#" Value="public static double Asinh (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Asinh(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Asinh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Asinh (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Asinh(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan">
      <MemberSignature Language="C#" Value="public static double Atan (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Atan(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Atan(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Atan (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Atan(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="cd119-169">Liczba reprezentująca stycznej.</span><span class="sxs-lookup"><span data-stu-id="cd119-169">A number representing a tangent.</span></span></param>
        <summary><span data-ttu-id="cd119-170">Zwraca kąt, którego tangens jest równy podanej liczbie.</span><span class="sxs-lookup"><span data-stu-id="cd119-170">Returns the angle whose tangent is the specified number.</span></span></summary>
        <returns><span data-ttu-id="cd119-171">Kąt, θ mierzony w radianach, tak, aby ≤θ≤π - π/2/2.</span><span class="sxs-lookup"><span data-stu-id="cd119-171">An angle, θ, measured in radians, such that -π/2 ≤θ≤π/2.</span></span>  
  
 <span data-ttu-id="cd119-172">—lub—</span><span class="sxs-lookup"><span data-stu-id="cd119-172">-or-</span></span>  
  
 <span data-ttu-id="cd119-173"><see cref="F:System.Double.NaN" /> Jeśli <paramref name="d" /> jest równe <see cref="F:System.Double.NaN" />, - π/2 zaokrąglana do podwójnej precyzji (-1.5707963267949), jeśli <paramref name="d" /> jest równe <see cref="F:System.Double.NegativeInfinity" />, lub π/2 zaokrąglana do podwójnej precyzji (1.5707963267949), jeśli <paramref name="d" /> jest równe <see cref="F:System.Double.PositiveInfinity" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-173"><see cref="F:System.Double.NaN" /> if <paramref name="d" /> equals <see cref="F:System.Double.NaN" />, -π/2 rounded to double precision (-1.5707963267949) if <paramref name="d" /> equals <see cref="F:System.Double.NegativeInfinity" />, or π/2 rounded to double precision (1.5707963267949) if <paramref name="d" /> equals <see cref="F:System.Double.PositiveInfinity" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd119-174">Dodatnia wartość zwracany reprezentuje kątowi od osi x; zwracane wartości ujemnej reprezentuje kąt do ruchu wskazówek zegara.</span><span class="sxs-lookup"><span data-stu-id="cd119-174">A positive return value represents a counterclockwise angle from the x-axis; a negative return value represents a clockwise angle.</span></span>  
  
 <span data-ttu-id="cd119-175">Należy pomnożyć wartość zwracaną przez 180 /<xref:System.Math.PI?displayProperty=nameWithType> aby z radianów w stopniach.</span><span class="sxs-lookup"><span data-stu-id="cd119-175">Multiply the return value by 180/<xref:System.Math.PI?displayProperty=nameWithType> to convert from radians to degrees.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd119-176">W poniższym przykładzie pokazano sposób obliczania wartości arcus tangens i wyświetl ją do konsoli.</span><span class="sxs-lookup"><span data-stu-id="cd119-176">The following example demonstrates how to calculate the arctangent of a value and display it to the console.</span></span>  
  
 [!code-cpp[math.atanx#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.atanx/CPP/atan.cpp#1)]
 [!code-csharp[math.atanx#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.atanx/CS/atan.cs#1)]
 [!code-vb[math.atanx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.atanx/VB/atan.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan2">
      <MemberSignature Language="C#" Value="public static double Atan2 (double y, double x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Atan2(float64 y, float64 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Atan2(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Atan2 (y As Double, x As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Atan2(double y, double x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="y" Type="System.Double" />
        <Parameter Name="x" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="y"><span data-ttu-id="cd119-177">Współrzędna y punktu.</span><span class="sxs-lookup"><span data-stu-id="cd119-177">The y coordinate of a point.</span></span></param>
        <param name="x"><span data-ttu-id="cd119-178">Współrzędna x punktu.</span><span class="sxs-lookup"><span data-stu-id="cd119-178">The x coordinate of a point.</span></span></param>
        <summary><span data-ttu-id="cd119-179">Zwraca kąt, którego tangens jest równy ilorazowi dwóch podanych liczb.</span><span class="sxs-lookup"><span data-stu-id="cd119-179">Returns the angle whose tangent is the quotient of two specified numbers.</span></span></summary>
        <returns><span data-ttu-id="cd119-180">Kąt, θ mierzony w radianach, tak, aby - π≤θ≤π i tan(θ) = <paramref name="y" />  /  <paramref name="x" />, gdzie (<paramref name="x" />, <paramref name="y" />) jest punktem w płaszczyźnie kartezjański.</span><span class="sxs-lookup"><span data-stu-id="cd119-180">An angle, θ, measured in radians, such that -π≤θ≤π, and tan(θ) = <paramref name="y" /> / <paramref name="x" />, where (<paramref name="x" />, <paramref name="y" />) is a point in the Cartesian plane.</span></span> <span data-ttu-id="cd119-181">Sprawdź następujące czynności:</span><span class="sxs-lookup"><span data-stu-id="cd119-181">Observe the following:</span></span>  
  
-   <span data-ttu-id="cd119-182">Aby uzyskać (<paramref name="x" />, <paramref name="y" />) w wiązania kwadrantu 1, 0 &lt; θ &lt; π/2.</span><span class="sxs-lookup"><span data-stu-id="cd119-182">For (<paramref name="x" />, <paramref name="y" />) in quadrant 1, 0 &lt; θ &lt; π/2.</span></span>  
  
-   <span data-ttu-id="cd119-183">Aby uzyskać (<paramref name="x" />, <paramref name="y" />) w wiązania kwadrantu 2, π/2 &lt; θ≤π.</span><span class="sxs-lookup"><span data-stu-id="cd119-183">For (<paramref name="x" />, <paramref name="y" />) in quadrant 2, π/2 &lt; θ≤π.</span></span>  
  
-   <span data-ttu-id="cd119-184">Aby uzyskać (<paramref name="x" />, <paramref name="y" />) w wiązania kwadrantu 3, - π &lt; θ &lt; - π/2.</span><span class="sxs-lookup"><span data-stu-id="cd119-184">For (<paramref name="x" />, <paramref name="y" />) in quadrant 3, -π &lt; θ &lt; -π/2.</span></span>  
  
-   <span data-ttu-id="cd119-185">Aby uzyskać (<paramref name="x" />, <paramref name="y" />) w wiązania kwadrantu 4, - π/2 &lt; θ &lt; 0.</span><span class="sxs-lookup"><span data-stu-id="cd119-185">For (<paramref name="x" />, <paramref name="y" />) in quadrant 4, -π/2 &lt; θ &lt; 0.</span></span>  
  
 <span data-ttu-id="cd119-186">Dla punktów na granice ćwiartkach zwracana wartość jest następująca:</span><span class="sxs-lookup"><span data-stu-id="cd119-186">For points on the boundaries of the quadrants, the return value is the following:</span></span>  
  
-   <span data-ttu-id="cd119-187">Jeśli y ma wartość 0 i x jest nie ujemną, θ = 0.</span><span class="sxs-lookup"><span data-stu-id="cd119-187">If y is 0 and x is not negative, θ = 0.</span></span>  
  
-   <span data-ttu-id="cd119-188">Jeśli y wynosi 0 i x ma wartość ujemną, θ = π.</span><span class="sxs-lookup"><span data-stu-id="cd119-188">If y is 0 and x is negative, θ = π.</span></span>  
  
-   <span data-ttu-id="cd119-189">Jeśli y jest dodatnia, jak i x ma wartość 0, θ = π/2.</span><span class="sxs-lookup"><span data-stu-id="cd119-189">If y is positive and x is 0, θ = π/2.</span></span>  
  
-   <span data-ttu-id="cd119-190">Jeśli y jest ujemna, a x ma wartość 0, θ = - π/2.</span><span class="sxs-lookup"><span data-stu-id="cd119-190">If y is negative and x is 0, θ = -π/2.</span></span>  
  
-   <span data-ttu-id="cd119-191">Jeśli y wynosi 0 i x ma wartość 0, θ = 0.</span><span class="sxs-lookup"><span data-stu-id="cd119-191">If y is 0 and x is 0, θ = 0.</span></span>  
  
 <span data-ttu-id="cd119-192">Jeśli <paramref name="x" /> lub <paramref name="y" /> jest <see cref="F:System.Double.NaN" />, lub jeśli <paramref name="x" /> i <paramref name="y" /> są <see cref="F:System.Double.PositiveInfinity" /> lub <see cref="F:System.Double.NegativeInfinity" />, metoda zwraca <see cref="F:System.Double.NaN" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-192">If <paramref name="x" /> or <paramref name="y" /> is <see cref="F:System.Double.NaN" />, or if <paramref name="x" /> and <paramref name="y" /> are either <see cref="F:System.Double.PositiveInfinity" /> or <see cref="F:System.Double.NegativeInfinity" />, the method returns <see cref="F:System.Double.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd119-193">Wartość zwracana jest kąt płaszczyźnie kartezjański utworzone przez osi x i wektor uruchamianie ze źródła (0,0) oraz przerywanie punktu, (x, y).</span><span class="sxs-lookup"><span data-stu-id="cd119-193">The return value is the angle in the Cartesian plane formed by the x-axis, and a vector starting from the origin, (0,0), and terminating at the point, (x,y).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd119-194">W poniższym przykładzie pokazano sposób obliczania tangens kąta i wektora.</span><span class="sxs-lookup"><span data-stu-id="cd119-194">The following example demonstrates how to calculate the arctangent of an angle and a vector.</span></span> <span data-ttu-id="cd119-195">Wartość wynikową jest wyświetlana w konsoli.</span><span class="sxs-lookup"><span data-stu-id="cd119-195">The resulting value is displayed in the console.</span></span>  
  
 [!code-cpp[math.atanx#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.atanx/CPP/atan.cpp#1)]
 [!code-csharp[math.atanx#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.atanx/CS/atan.cs#1)]
 [!code-vb[math.atanx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.atanx/VB/atan.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Atanh">
      <MemberSignature Language="C#" Value="public static double Atanh (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Atanh(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Atanh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Atanh (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Atanh(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BigMul">
      <MemberSignature Language="C#" Value="public static long BigMul (int a, int b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 BigMul(int32 a, int32 b) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.BigMul(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BigMul (a As Integer, b As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long BigMul(int a, int b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int32" />
        <Parameter Name="b" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="cd119-196">Pierwszy liczbę Aby pomnożyć.</span><span class="sxs-lookup"><span data-stu-id="cd119-196">The first number to multiply.</span></span></param>
        <param name="b"><span data-ttu-id="cd119-197">Druga liczba do wielokrotnie.</span><span class="sxs-lookup"><span data-stu-id="cd119-197">The second number to multiply.</span></span></param>
        <summary><span data-ttu-id="cd119-198">Zwraca pełny iloczyn dwóch liczb 32-bitowych.</span><span class="sxs-lookup"><span data-stu-id="cd119-198">Produces the full product of two 32-bit numbers.</span></span></summary>
        <returns><span data-ttu-id="cd119-199">Liczba zawierający produktu podanych liczb.</span><span class="sxs-lookup"><span data-stu-id="cd119-199">The number containing the product of the specified numbers.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd119-200">W poniższym przykładzie pokazano użycie <xref:System.Math.BigMul%2A> metodę obliczania iloczyn dwóch wartości całkowite.</span><span class="sxs-lookup"><span data-stu-id="cd119-200">The following example demonstrates the use of the <xref:System.Math.BigMul%2A> method to calculate the product of two integer values.</span></span>  
  
 [!code-cpp[math.bigmul#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.bigmul/CPP/bigmul.cpp#1)]
 [!code-csharp[math.bigmul#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.bigmul/CS/bigmul.cs#1)]
 [!code-vb[math.bigmul#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.bigmul/VB/bigmul.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cbrt">
      <MemberSignature Language="C#" Value="public static double Cbrt (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Cbrt(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Cbrt(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cbrt (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Cbrt(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Ceiling">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cd119-201">Zwraca najmniejszą wartość całkowitą, większa lub równa podanej liczbie.</span><span class="sxs-lookup"><span data-stu-id="cd119-201">Returns the smallest integral value greater than or equal to the specified number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd119-202">Zachowanie tej metody jest zgodne ze standardem IEEE 754, sekcja 4.</span><span class="sxs-lookup"><span data-stu-id="cd119-202">The behavior of this method follows IEEE Standard 754, section 4.</span></span> <span data-ttu-id="cd119-203">Tego rodzaju zaokrąglenie jest czasami nazywane zaokrąglaniem kierunku plus nieskończoność.</span><span class="sxs-lookup"><span data-stu-id="cd119-203">This kind of rounding is sometimes called rounding toward positive infinity.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Ceiling">
      <MemberSignature Language="C#" Value="public static decimal Ceiling (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Ceiling(valuetype System.Decimal d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Ceiling(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Ceiling (d As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Ceiling(System::Decimal d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="cd119-204">Liczba dziesiętna.</span><span class="sxs-lookup"><span data-stu-id="cd119-204">A decimal number.</span></span></param>
        <summary><span data-ttu-id="cd119-205">Zwraca najmniejszą wartość całkowitą, która jest większa niż lub równa określonej liczby dziesiętnej.</span><span class="sxs-lookup"><span data-stu-id="cd119-205">Returns the smallest integral value that is greater than or equal to the specified decimal number.</span></span></summary>
        <returns><span data-ttu-id="cd119-206">Najmniejsza wartość całkowitą, którą jest większa niż lub równa <paramref name="d" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-206">The smallest integral value that is greater than or equal to <paramref name="d" />.</span></span> <span data-ttu-id="cd119-207">Należy pamiętać, że ta metoda zwraca <see cref="T:System.Decimal" /> zamiast typ całkowity.</span><span class="sxs-lookup"><span data-stu-id="cd119-207">Note that this method returns a <see cref="T:System.Decimal" /> instead of an integral type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd119-208">Zachowanie tej metody jest zgodne ze standardem IEEE 754, sekcja 4.</span><span class="sxs-lookup"><span data-stu-id="cd119-208">The behavior of this method follows IEEE Standard 754, section 4.</span></span> <span data-ttu-id="cd119-209">Tego rodzaju zaokrąglenie jest czasami nazywane zaokrąglaniem kierunku plus nieskończoność.</span><span class="sxs-lookup"><span data-stu-id="cd119-209">This kind of rounding is sometimes called rounding toward positive infinity.</span></span> <span data-ttu-id="cd119-210">Innymi słowy Jeśli `d` jest dodatnia, obecności dowolnej przyczyny ułamkowych części `d` ma zostać zaokrąglona do następną największą liczbę całkowitą.</span><span class="sxs-lookup"><span data-stu-id="cd119-210">In other words, if `d` is positive, the presence of any fractional component causes `d` to be rounded to the next highest integer.</span></span> <span data-ttu-id="cd119-211">Jeśli `d` jest ujemna, zaokrąglania operacja powoduje dowolnego składnika ułamkowych `d` być odrzucony.</span><span class="sxs-lookup"><span data-stu-id="cd119-211">If `d` is negative, the rounding operation causes any fractional component of `d` to be discarded.</span></span> <span data-ttu-id="cd119-212">Operacja ta metoda różni się od <xref:System.Math.Floor%28System.Decimal%29> metodę, która obsługuje zaokrąglania kierunku nieskończoności ujemnej.</span><span class="sxs-lookup"><span data-stu-id="cd119-212">The operation of this method differs from the <xref:System.Math.Floor%28System.Decimal%29> method, which supports rounding toward negative infinity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd119-213">Poniższy przykład przedstawia <xref:System.Math.Ceiling%28System.Decimal%29?displayProperty=nameWithType> metody różnic między go przy użyciu <xref:System.Math.Floor%28System.Decimal%29> metody.</span><span class="sxs-lookup"><span data-stu-id="cd119-213">The following example illustrates the <xref:System.Math.Ceiling%28System.Decimal%29?displayProperty=nameWithType> method and contrasts it with the <xref:System.Math.Floor%28System.Decimal%29> method.</span></span>  
  
 [!code-csharp[System.Math.Ceiling#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Ceiling/cs/Ceiling1.cs#1)]
 [!code-vb[System.Math.Ceiling#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Ceiling/vb/Ceiling1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Math.Round" />
        <altmember cref="M:System.Math.Floor(System.Decimal)" />
      </Docs>
    </Member>
    <Member MemberName="Ceiling">
      <MemberSignature Language="C#" Value="public static double Ceiling (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Ceiling(float64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Ceiling(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Ceiling (a As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Ceiling(double a);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="cd119-214">Liczba zmiennoprzecinkowa podwójnej precyzji.</span><span class="sxs-lookup"><span data-stu-id="cd119-214">A double-precision floating-point number.</span></span></param>
        <summary><span data-ttu-id="cd119-215">Zwraca najmniejszą wartość całkowitą, która jest większa niż lub równa podanej liczbie zmiennoprzecinkowej podwójnej precyzji.</span><span class="sxs-lookup"><span data-stu-id="cd119-215">Returns the smallest integral value that is greater than or equal to the specified double-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="cd119-216">Najmniejsza wartość całkowitą, którą jest większa niż lub równa <paramref name="a" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-216">The smallest integral value that is greater than or equal to <paramref name="a" />.</span></span> <span data-ttu-id="cd119-217">Jeśli <paramref name="a" /> jest równa <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, lub <see cref="F:System.Double.PositiveInfinity" />, jest zwracana wartość.</span><span class="sxs-lookup"><span data-stu-id="cd119-217">If <paramref name="a" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, that value is returned.</span></span> <span data-ttu-id="cd119-218">Należy pamiętać, że ta metoda zwraca <see cref="T:System.Double" /> zamiast typ całkowity.</span><span class="sxs-lookup"><span data-stu-id="cd119-218">Note that this method returns a <see cref="T:System.Double" /> instead of an integral type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd119-219">Zachowanie tej metody jest zgodne ze standardem IEEE 754, sekcja 4.</span><span class="sxs-lookup"><span data-stu-id="cd119-219">The behavior of this method follows IEEE Standard 754, section 4.</span></span> <span data-ttu-id="cd119-220">Tego rodzaju zaokrąglenie jest czasami nazywane zaokrąglaniem kierunku plus nieskończoność.</span><span class="sxs-lookup"><span data-stu-id="cd119-220">This kind of rounding is sometimes called rounding toward positive infinity.</span></span> <span data-ttu-id="cd119-221">Innymi słowy Jeśli `a` jest dodatnia, obecności dowolnej przyczyny ułamkowych części `a` ma zostać zaokrąglona do następną największą liczbę całkowitą.</span><span class="sxs-lookup"><span data-stu-id="cd119-221">In other words, if `a` is positive, the presence of any fractional component causes `a` to be rounded to the next highest integer.</span></span> <span data-ttu-id="cd119-222">Jeśli `a` jest ujemna, zaokrąglania operacja powoduje dowolnego składnika ułamkowych `a` być odrzucony.</span><span class="sxs-lookup"><span data-stu-id="cd119-222">If `a` is negative, the rounding operation causes any fractional component of `a` to be discarded.</span></span> <span data-ttu-id="cd119-223">Operacja ta metoda różni się od <xref:System.Math.Floor%28System.Double%29> metodę, która obsługuje zaokrąglania kierunku nieskończoności ujemnej.</span><span class="sxs-lookup"><span data-stu-id="cd119-223">The operation of this method differs from the <xref:System.Math.Floor%28System.Double%29> method, which supports rounding toward negative infinity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd119-224">Poniższy przykład przedstawia <xref:System.Math.Ceiling%28System.Double%29?displayProperty=nameWithType> metody różnic między go przy użyciu <xref:System.Math.Floor%28System.Double%29> metody.</span><span class="sxs-lookup"><span data-stu-id="cd119-224">The following example illustrates the <xref:System.Math.Ceiling%28System.Double%29?displayProperty=nameWithType> method and contrasts it with the <xref:System.Math.Floor%28System.Double%29> method.</span></span>  
  
 [!code-csharp[System.Math.Ceiling#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Ceiling/cs/Ceiling1.cs#2)]
 [!code-vb[System.Math.Ceiling#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Ceiling/vb/Ceiling1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Math.Round" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static byte Clamp (byte value, byte min, byte max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 Clamp(unsigned int8 value, unsigned int8 min, unsigned int8 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.Byte,System.Byte,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As Byte, min As Byte, max As Byte) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte Clamp(System::Byte value, System::Byte min, System::Byte max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="min" Type="System.Byte" />
        <Parameter Name="max" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static decimal Clamp (decimal value, decimal min, decimal max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Clamp(valuetype System.Decimal value, valuetype System.Decimal min, valuetype System.Decimal max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.Decimal,System.Decimal,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As Decimal, min As Decimal, max As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Clamp(System::Decimal value, System::Decimal min, System::Decimal max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="min" Type="System.Decimal" />
        <Parameter Name="max" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static double Clamp (double value, double min, double max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Clamp(float64 value, float64 min, float64 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As Double, min As Double, max As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Clamp(double value, double min, double max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="min" Type="System.Double" />
        <Parameter Name="max" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static short Clamp (short value, short min, short max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 Clamp(int16 value, int16 min, int16 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.Int16,System.Int16,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As Short, min As Short, max As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Clamp(short value, short min, short max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
        <Parameter Name="min" Type="System.Int16" />
        <Parameter Name="max" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static int Clamp (int value, int min, int max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Clamp(int32 value, int32 min, int32 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As Integer, min As Integer, max As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Clamp(int value, int min, int max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="min" Type="System.Int32" />
        <Parameter Name="max" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static long Clamp (long value, long min, long max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Clamp(int64 value, int64 min, int64 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.Int64,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As Long, min As Long, max As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Clamp(long value, long min, long max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="min" Type="System.Int64" />
        <Parameter Name="max" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static sbyte Clamp (sbyte value, sbyte min, sbyte max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 Clamp(int8 value, int8 min, int8 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.SByte,System.SByte,System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As SByte, min As SByte, max As SByte) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte Clamp(System::SByte value, System::SByte min, System::SByte max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
        <Parameter Name="min" Type="System.SByte" />
        <Parameter Name="max" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static float Clamp (float value, float min, float max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Clamp(float32 value, float32 min, float32 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.Single,System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As Single, min As Single, max As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Clamp(float value, float min, float max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="min" Type="System.Single" />
        <Parameter Name="max" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static ushort Clamp (ushort value, ushort min, ushort max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 Clamp(unsigned int16 value, unsigned int16 min, unsigned int16 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.UInt16,System.UInt16,System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As UShort, min As UShort, max As UShort) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 Clamp(System::UInt16 value, System::UInt16 min, System::UInt16 max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
        <Parameter Name="min" Type="System.UInt16" />
        <Parameter Name="max" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static uint Clamp (uint value, uint min, uint max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 Clamp(unsigned int32 value, unsigned int32 min, unsigned int32 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.UInt32,System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As UInteger, min As UInteger, max As UInteger) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 Clamp(System::UInt32 value, System::UInt32 min, System::UInt32 max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="min" Type="System.UInt32" />
        <Parameter Name="max" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static ulong Clamp (ulong value, ulong min, ulong max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 Clamp(unsigned int64 value, unsigned int64 min, unsigned int64 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.UInt64,System.UInt64,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As ULong, min As ULong, max As ULong) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 Clamp(System::UInt64 value, System::UInt64 min, System::UInt64 max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="min" Type="System.UInt64" />
        <Parameter Name="max" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cos">
      <MemberSignature Language="C#" Value="public static double Cos (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Cos(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Cos(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cos (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Cos(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="cd119-225">Kąt wyrażony w radianach.</span><span class="sxs-lookup"><span data-stu-id="cd119-225">An angle, measured in radians.</span></span></param>
        <summary><span data-ttu-id="cd119-226">Zwraca cosinus odpowiadający podanemu kątowi.</span><span class="sxs-lookup"><span data-stu-id="cd119-226">Returns the cosine of the specified angle.</span></span></summary>
        <returns><span data-ttu-id="cd119-227">Cosinus <paramref name="d" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-227">The cosine of <paramref name="d" />.</span></span> <span data-ttu-id="cd119-228">Jeśli <paramref name="d" /> jest równa <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, lub <see cref="F:System.Double.PositiveInfinity" />, ta metoda zwraca <see cref="F:System.Double.NaN" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-228">If <paramref name="d" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, this method returns <see cref="F:System.Double.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd119-229">Kąt `d`, musi być podany w radianach.</span><span class="sxs-lookup"><span data-stu-id="cd119-229">The angle, `d`, must be in radians.</span></span> <span data-ttu-id="cd119-230">Mnożenie przez <xref:System.Math.PI?displayProperty=nameWithType>/180 do Konwertuj stopnie na radiany.</span><span class="sxs-lookup"><span data-stu-id="cd119-230">Multiply by <xref:System.Math.PI?displayProperty=nameWithType>/180 to convert degrees to radians.</span></span>  
  
 <span data-ttu-id="cd119-231">Dopuszczalne wartości `d` z zakresu od około-9223372036854775295 do około 9223372036854775295.</span><span class="sxs-lookup"><span data-stu-id="cd119-231">Acceptable values of `d` range from approximately -9223372036854775295 to approximately 9223372036854775295.</span></span> <span data-ttu-id="cd119-232">Dla wartości poza tym zakresem <xref:System.Math.Cos%2A> metoda zwraca `d` niezmienione zamiast zgłaszać wyjątek.</span><span class="sxs-lookup"><span data-stu-id="cd119-232">For values outside this range, the <xref:System.Math.Cos%2A> method returns `d` unchanged rather than throwing an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd119-233">W poniższym przykładzie użyto <xref:System.Math.Cos%2A> do oceny niektórych trygonometryczne tożsamości dla wybranych kątów.</span><span class="sxs-lookup"><span data-stu-id="cd119-233">The following example uses <xref:System.Math.Cos%2A> to evaluate certain trigonometric identities for selected angles.</span></span>  
  
 [!code-cpp[System.Math.SinCos#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.SinCos/CPP/sincos.cpp#1)]
 [!code-csharp[System.Math.SinCos#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.SinCos/CS/sincos.cs#1)]
 [!code-vb[System.Math.SinCos#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.SinCos/VB/sincos.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cosh">
      <MemberSignature Language="C#" Value="public static double Cosh (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Cosh(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Cosh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cosh (value As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Cosh(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="cd119-234">Kąt wyrażony w radianach.</span><span class="sxs-lookup"><span data-stu-id="cd119-234">An angle, measured in radians.</span></span></param>
        <summary><span data-ttu-id="cd119-235">Zwraca cosinus hiperboliczny podanemu kątowi.</span><span class="sxs-lookup"><span data-stu-id="cd119-235">Returns the hyperbolic cosine of the specified angle.</span></span></summary>
        <returns><span data-ttu-id="cd119-236">Cosinus hiperboliczny liczby <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-236">The hyperbolic cosine of <paramref name="value" />.</span></span> <span data-ttu-id="cd119-237">Jeśli <paramref name="value" /> jest równa <see cref="F:System.Double.NegativeInfinity" /> lub <see cref="F:System.Double.PositiveInfinity" />, <see cref="F:System.Double.PositiveInfinity" /> jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="cd119-237">If <paramref name="value" /> is equal to <see cref="F:System.Double.NegativeInfinity" /> or <see cref="F:System.Double.PositiveInfinity" />, <see cref="F:System.Double.PositiveInfinity" /> is returned.</span></span> <span data-ttu-id="cd119-238">Jeśli <paramref name="value" /> jest równa <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="cd119-238">If <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd119-239">Kąt `value`, musi być podany w radianach.</span><span class="sxs-lookup"><span data-stu-id="cd119-239">The angle, `value`, must be in radians.</span></span> <span data-ttu-id="cd119-240">Mnożenie przez <xref:System.Math.PI?displayProperty=nameWithType>/180 do Konwertuj stopnie na radiany.</span><span class="sxs-lookup"><span data-stu-id="cd119-240">Multiply by <xref:System.Math.PI?displayProperty=nameWithType>/180 to convert degrees to radians.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd119-241">W poniższym przykładzie użyto <xref:System.Math.Cosh%2A> do oceny niektórych hiperboliczny tożsamości dla wybranych wartości.</span><span class="sxs-lookup"><span data-stu-id="cd119-241">The following example uses <xref:System.Math.Cosh%2A> to evaluate certain hyperbolic identities for selected values.</span></span>  
  
 [!code-cpp[System.Math.SinhCosh#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.SinhCosh/CPP/sinhcosh.cpp#1)]
 [!code-csharp[System.Math.SinhCosh#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.SinhCosh/CS/sinhcosh.cs#1)]
 [!code-vb[System.Math.SinhCosh#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.SinhCosh/VB/sinhcosh.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DivRem">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cd119-242">Oblicza iloraz dwóch liczb, a także zwraca resztę do parametru output.</span><span class="sxs-lookup"><span data-stu-id="cd119-242">Calculates the quotient of two numbers and also returns the remainder in an output parameter.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DivRem">
      <MemberSignature Language="C#" Value="public static int DivRem (int a, int b, out int result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DivRem(int32 a, int32 b, [out] int32&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.DivRem(System.Int32,System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivRem (a As Integer, b As Integer, ByRef result As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int DivRem(int a, int b, [Runtime::InteropServices::Out] int % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int32" />
        <Parameter Name="b" Type="System.Int32" />
        <Parameter Name="result" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="cd119-243">Dzielna.</span><span class="sxs-lookup"><span data-stu-id="cd119-243">The dividend.</span></span></param>
        <param name="b"><span data-ttu-id="cd119-244">Dzielnik.</span><span class="sxs-lookup"><span data-stu-id="cd119-244">The divisor.</span></span></param>
        <param name="result"><span data-ttu-id="cd119-245">Pozostałe.</span><span class="sxs-lookup"><span data-stu-id="cd119-245">The remainder.</span></span></param>
        <summary><span data-ttu-id="cd119-246">Oblicza iloraz dwóch liczb całkowitych ze znakiem 32-bitowe i również zwraca resztę do parametru output.</span><span class="sxs-lookup"><span data-stu-id="cd119-246">Calculates the quotient of two 32-bit signed integers and also returns the remainder in an output parameter.</span></span></summary>
        <returns><span data-ttu-id="cd119-247">Iloraz podanych liczb.</span><span class="sxs-lookup"><span data-stu-id="cd119-247">The quotient of the specified numbers.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd119-248">Pozostała jest obliczana przy użyciu operacji modułu.</span><span class="sxs-lookup"><span data-stu-id="cd119-248">The remainder is calculated by using the modulus operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd119-249">W poniższym przykładzie pokazano <xref:System.Math.DivRem%28System.Int32%2CSystem.Int32%2CSystem.Int32%40%29> metody.</span><span class="sxs-lookup"><span data-stu-id="cd119-249">The following example demonstrates the <xref:System.Math.DivRem%28System.Int32%2CSystem.Int32%2CSystem.Int32%40%29> method.</span></span>  
  
 [!code-csharp[System.Math.DivRem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.divrem/cs/divrem1.cs#1)]
 [!code-vb[System.Math.DivRem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.divrem/vb/divrem1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException">
          <span data-ttu-id="cd119-250"><paramref name="b" /> wynosi zero.</span><span class="sxs-lookup"><span data-stu-id="cd119-250"><paramref name="b" /> is zero.</span></span></exception>
        <altmember cref="M:System.Math.IEEERemainder(System.Double,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="DivRem">
      <MemberSignature Language="C#" Value="public static long DivRem (long a, long b, out long result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 DivRem(int64 a, int64 b, [out] int64&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.DivRem(System.Int64,System.Int64,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivRem (a As Long, b As Long, ByRef result As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long DivRem(long a, long b, [Runtime::InteropServices::Out] long % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int64" />
        <Parameter Name="b" Type="System.Int64" />
        <Parameter Name="result" Type="System.Int64&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="cd119-251">Dzielna.</span><span class="sxs-lookup"><span data-stu-id="cd119-251">The dividend.</span></span></param>
        <param name="b"><span data-ttu-id="cd119-252">Dzielnik.</span><span class="sxs-lookup"><span data-stu-id="cd119-252">The divisor.</span></span></param>
        <param name="result"><span data-ttu-id="cd119-253">Pozostałe.</span><span class="sxs-lookup"><span data-stu-id="cd119-253">The remainder.</span></span></param>
        <summary><span data-ttu-id="cd119-254">Oblicza iloraz dwóch liczb całkowitych ze znakiem 64-bitowe i również zwraca resztę do parametru output.</span><span class="sxs-lookup"><span data-stu-id="cd119-254">Calculates the quotient of two 64-bit signed integers and also returns the remainder in an output parameter.</span></span></summary>
        <returns><span data-ttu-id="cd119-255">Iloraz podanych liczb.</span><span class="sxs-lookup"><span data-stu-id="cd119-255">The quotient of the specified numbers.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd119-256">Pozostała jest obliczana przy użyciu operacji modułu.</span><span class="sxs-lookup"><span data-stu-id="cd119-256">The remainder is calculated by using the modulus operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd119-257">W poniższym przykładzie pokazano <xref:System.Math.DivRem%28System.Int64%2CSystem.Int64%2CSystem.Int64%40%29> metody.</span><span class="sxs-lookup"><span data-stu-id="cd119-257">The following example demonstrates the <xref:System.Math.DivRem%28System.Int64%2CSystem.Int64%2CSystem.Int64%40%29> method.</span></span>  
  
 [!code-csharp[System.Math.DivRem#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.divrem/cs/divrem2.cs#2)]
 [!code-vb[System.Math.DivRem#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.divrem/vb/divrem2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException">
          <span data-ttu-id="cd119-258"><paramref name="b" /> wynosi zero.</span><span class="sxs-lookup"><span data-stu-id="cd119-258"><paramref name="b" /> is zero.</span></span></exception>
        <altmember cref="M:System.Math.IEEERemainder(System.Double,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="E">
      <MemberSignature Language="C#" Value="public const double E = 2.71828182845905;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float64 E = (2.71828182845905)" />
      <MemberSignature Language="DocId" Value="F:System.Math.E" />
      <MemberSignature Language="VB.NET" Value="Public Const E As Double  = 2.71828182845905" />
      <MemberSignature Language="C++ CLI" Value="public: double E = 2.71828182845905;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <MemberValue>2.71828182845905</MemberValue>
      <Docs>
        <summary><span data-ttu-id="cd119-259">Reprezentuje podstawa logarytmu naturalnego, określony przez wartość stałej, <see langword="e" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-259">Represents the natural logarithmic base, specified by the constant, <see langword="e" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd119-260">Wartość tego pola jest 2.7182818284590452354.</span><span class="sxs-lookup"><span data-stu-id="cd119-260">The value of this field is 2.7182818284590452354.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd119-261">Poniższy przykład porównuje <xref:System.Math.E> z wartością obliczoną na podstawie serii zasilania.</span><span class="sxs-lookup"><span data-stu-id="cd119-261">The following example compares <xref:System.Math.E> with the value calculated from a power series.</span></span>  
  
 [!code-cpp[System.Math.E#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.E/CPP/efield.cpp#1)]
 [!code-csharp[System.Math.E#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.E/CS/efield.cs#1)]
 [!code-vb[System.Math.E#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.E/VB/efield.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Exp">
      <MemberSignature Language="C#" Value="public static double Exp (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Exp(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Exp(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exp (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Exp(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="cd119-262">Liczba określająca potęgi.</span><span class="sxs-lookup"><span data-stu-id="cd119-262">A number specifying a power.</span></span></param>
        <summary><span data-ttu-id="cd119-263">Zwraca <see langword="e" /> podniesionej do potęgi określonej.</span><span class="sxs-lookup"><span data-stu-id="cd119-263">Returns <see langword="e" /> raised to the specified power.</span></span></summary>
        <returns><span data-ttu-id="cd119-264">Liczba <see langword="e" /> podniesionej do potęgi <paramref name="d" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-264">The number <see langword="e" /> raised to the power <paramref name="d" />.</span></span> <span data-ttu-id="cd119-265">Jeśli <paramref name="d" /> jest równe <see cref="F:System.Double.NaN" /> lub <see cref="F:System.Double.PositiveInfinity" />, jest zwracana wartość.</span><span class="sxs-lookup"><span data-stu-id="cd119-265">If <paramref name="d" /> equals <see cref="F:System.Double.NaN" /> or <see cref="F:System.Double.PositiveInfinity" />, that value is returned.</span></span> <span data-ttu-id="cd119-266">Jeśli <paramref name="d" /> jest równe <see cref="F:System.Double.NegativeInfinity" />, zwracany jest 0.</span><span class="sxs-lookup"><span data-stu-id="cd119-266">If <paramref name="d" /> equals <see cref="F:System.Double.NegativeInfinity" />, 0 is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd119-267">`e` jest stałe matematyczne, którego wartość wynosi około 2.71828.</span><span class="sxs-lookup"><span data-stu-id="cd119-267">`e` is a mathematical constant whose value is approximately 2.71828.</span></span>  
  
 <span data-ttu-id="cd119-268">Użyj <xref:System.Math.Pow%2A> metodę obliczania uprawnień innych typów podstawowych.</span><span class="sxs-lookup"><span data-stu-id="cd119-268">Use the <xref:System.Math.Pow%2A> method to calculate powers of other bases.</span></span>  
  
 <span data-ttu-id="cd119-269"><xref:System.Math.Exp%2A> jest odwrotność <xref:System.Math.Log%2A>.</span><span class="sxs-lookup"><span data-stu-id="cd119-269"><xref:System.Math.Exp%2A> is the inverse of <xref:System.Math.Log%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd119-270">W poniższym przykładzie użyto <xref:System.Math.Exp%2A> do oceny niektórych wykładniczej i logarytmicznej tożsamości dla wybranych wartości.</span><span class="sxs-lookup"><span data-stu-id="cd119-270">The following example uses <xref:System.Math.Exp%2A> to evaluate certain exponential and logarithmic identities for selected values.</span></span>  
  
 [!code-cpp[System.Math.Exp#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.Exp/CPP/exp.cpp#1)]
 [!code-csharp[System.Math.Exp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Exp/CS/exp.cs#1)]
 [!code-vb[System.Math.Exp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Exp/VB/exp.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Math.E" />
        <altmember cref="M:System.Math.Pow(System.Double,System.Double)" />
        <altmember cref="M:System.Math.Log(System.Double)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Floor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cd119-271">Zwraca największą wartość całkowitą mniejszą niż określona liczba.</span><span class="sxs-lookup"><span data-stu-id="cd119-271">Returns the largest integral value less than or equal to the specified number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd119-272">Zachowanie tej metody jest zgodne ze standardem IEEE 754, sekcja 4.</span><span class="sxs-lookup"><span data-stu-id="cd119-272">The behavior of this method follows IEEE Standard 754, section 4.</span></span> <span data-ttu-id="cd119-273">Tego rodzaju zaokrąglenie jest czasami nazywane zaokrąglaniem kierunku minus nieskończoność.</span><span class="sxs-lookup"><span data-stu-id="cd119-273">This kind of rounding is sometimes called rounding toward negative infinity.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Floor">
      <MemberSignature Language="C#" Value="public static decimal Floor (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Floor(valuetype System.Decimal d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Floor(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Floor (d As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Floor(System::Decimal d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="cd119-274">Liczba dziesiętna.</span><span class="sxs-lookup"><span data-stu-id="cd119-274">A decimal number.</span></span></param>
        <summary><span data-ttu-id="cd119-275">Zwraca największą wartość całkowitą mniejszą niż określona liczba dziesiętna.</span><span class="sxs-lookup"><span data-stu-id="cd119-275">Returns the largest integral value less than or equal to the specified decimal number.</span></span></summary>
        <returns><span data-ttu-id="cd119-276">Całkowite największą wartość mniejsza lub równa <paramref name="d" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-276">The largest integral value less than or equal to <paramref name="d" />.</span></span>  <span data-ttu-id="cd119-277">Należy pamiętać, że ta metoda zwraca wartość całkowitą typu <see cref="T:System.Decimal" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-277">Note that the method returns an integral value of type <see cref="T:System.Decimal" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd119-278">Zachowanie tej metody jest zgodne ze standardem IEEE 754, sekcja 4.</span><span class="sxs-lookup"><span data-stu-id="cd119-278">The behavior of this method follows IEEE Standard 754, section 4.</span></span> <span data-ttu-id="cd119-279">Tego rodzaju zaokrąglenie jest czasami nazywane zaokrąglaniem kierunku minus nieskończoność.</span><span class="sxs-lookup"><span data-stu-id="cd119-279">This kind of rounding is sometimes called rounding toward negative infinity.</span></span> <span data-ttu-id="cd119-280">Innymi słowy Jeśli `d` jest dodatnia, dowolny składnik ułamkowych zostały obcięte.</span><span class="sxs-lookup"><span data-stu-id="cd119-280">In other words, if `d` is positive, any fractional component is truncated.</span></span> <span data-ttu-id="cd119-281">Jeśli `d` jest ujemna, obecności ułamkowych części powoduje ona ma zostać zaokrąglona na mniejszą liczbę całkowitą.</span><span class="sxs-lookup"><span data-stu-id="cd119-281">If `d` is negative, the presence of any fractional component causes it to be rounded to the smaller integer.</span></span> <span data-ttu-id="cd119-282">Operacja ta metoda różni się od <xref:System.Math.Ceiling%2A> metodę, która obsługuje zaokrąglania kierunku nieskończoności dodatniej.</span><span class="sxs-lookup"><span data-stu-id="cd119-282">The operation of this method differs from the <xref:System.Math.Ceiling%2A> method, which supports rounding toward positive infinity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd119-283">Poniższy przykład przedstawia <xref:System.Math.Floor%28System.Decimal%29?displayProperty=nameWithType> metody różnic między go przy użyciu <xref:System.Math.Ceiling%28System.Decimal%29> metody.</span><span class="sxs-lookup"><span data-stu-id="cd119-283">The following example illustrates the <xref:System.Math.Floor%28System.Decimal%29?displayProperty=nameWithType> method and contrasts it with the <xref:System.Math.Ceiling%28System.Decimal%29> method.</span></span>  
  
 [!code-csharp[System.Math.Ceiling#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Ceiling/cs/Ceiling1.cs#1)]
 [!code-vb[System.Math.Ceiling#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Ceiling/vb/Ceiling1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Math.Round" />
        <altmember cref="M:System.Math.Ceiling(System.Decimal)" />
        <altmember cref="M:System.Decimal.Floor(System.Decimal)" />
      </Docs>
    </Member>
    <Member MemberName="Floor">
      <MemberSignature Language="C#" Value="public static double Floor (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Floor(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Floor(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Floor (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Floor(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="cd119-284">Liczba zmiennoprzecinkowa podwójnej precyzji.</span><span class="sxs-lookup"><span data-stu-id="cd119-284">A double-precision floating-point number.</span></span></param>
        <summary><span data-ttu-id="cd119-285">Zwraca największą wartość całkowitą mniejszą lub równą podanej liczbie zmiennoprzecinkowej podwójnej precyzji.</span><span class="sxs-lookup"><span data-stu-id="cd119-285">Returns the largest integral value less than or equal to the specified double-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="cd119-286">Całkowite największą wartość mniejsza lub równa <paramref name="d" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-286">The largest integral value less than or equal to <paramref name="d" />.</span></span> <span data-ttu-id="cd119-287">Jeśli <paramref name="d" /> jest równa <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, lub <see cref="F:System.Double.PositiveInfinity" />, jest zwracana wartość.</span><span class="sxs-lookup"><span data-stu-id="cd119-287">If <paramref name="d" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, that value is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd119-288">Zachowanie tej metody jest zgodne ze standardem IEEE 754, sekcja 4.</span><span class="sxs-lookup"><span data-stu-id="cd119-288">The behavior of this method follows IEEE Standard 754, section 4.</span></span> <span data-ttu-id="cd119-289">Tego rodzaju zaokrąglenie jest czasami nazywane zaokrąglaniem kierunku minus nieskończoność.</span><span class="sxs-lookup"><span data-stu-id="cd119-289">This kind of rounding is sometimes called rounding toward negative infinity.</span></span> <span data-ttu-id="cd119-290">Innymi słowy Jeśli `d` jest dodatnia, dowolny składnik ułamkowych zostały obcięte.</span><span class="sxs-lookup"><span data-stu-id="cd119-290">In other words, if `d` is positive, any fractional component is truncated.</span></span> <span data-ttu-id="cd119-291">Jeśli `d` jest ujemna, obecności ułamkowych części powoduje ona ma zostać zaokrąglona na mniejszą liczbę całkowitą.</span><span class="sxs-lookup"><span data-stu-id="cd119-291">If `d` is negative, the presence of any fractional component causes it to be rounded to the smaller integer.</span></span> <span data-ttu-id="cd119-292">Operacja ta metoda różni się od <xref:System.Math.Ceiling%2A> metodę, która obsługuje zaokrąglania kierunku nieskończoności dodatniej.</span><span class="sxs-lookup"><span data-stu-id="cd119-292">The operation of this method differs from the <xref:System.Math.Ceiling%2A> method, which supports rounding toward positive infinity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd119-293">Poniższy przykład przedstawia <xref:System.Math.Floor%28System.Double%29?displayProperty=nameWithType> metody różnic między go przy użyciu <xref:System.Math.Ceiling%28System.Double%29> metody.</span><span class="sxs-lookup"><span data-stu-id="cd119-293">The following example illustrates the <xref:System.Math.Floor%28System.Double%29?displayProperty=nameWithType> method and contrasts it with the <xref:System.Math.Ceiling%28System.Double%29> method.</span></span>  
  
 [!code-csharp[System.Math.Ceiling#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Ceiling/cs/Ceiling1.cs#2)]
 [!code-vb[System.Math.Ceiling#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Ceiling/vb/Ceiling1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Math.Round" />
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="IEEERemainder">
      <MemberSignature Language="C#" Value="public static double IEEERemainder (double x, double y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 IEEERemainder(float64 x, float64 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.IEEERemainder(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IEEERemainder (x As Double, y As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double IEEERemainder(double x, double y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="cd119-294">Dzielna.</span><span class="sxs-lookup"><span data-stu-id="cd119-294">A dividend.</span></span></param>
        <param name="y"><span data-ttu-id="cd119-295">Dzielnik.</span><span class="sxs-lookup"><span data-stu-id="cd119-295">A divisor.</span></span></param>
        <summary><span data-ttu-id="cd119-296">Zwraca resztę z dzielenia liczby określonej przez inną podany numer.</span><span class="sxs-lookup"><span data-stu-id="cd119-296">Returns the remainder resulting from the division of a specified number by another specified number.</span></span></summary>
        <returns><span data-ttu-id="cd119-297">Liczby równej <paramref name="x" /> -(<paramref name="y" /> Q), gdzie Q jest równy ilorazowi <paramref name="x" />  /  <paramref name="y" /> zaokrąglona do najbliższej liczby całkowitej (Jeśli <paramref name="x" />  /  <paramref name="y" /> znajduje się w połowie między dwie liczb całkowitych, parzystej liczby całkowitej zwrócił).</span><span class="sxs-lookup"><span data-stu-id="cd119-297">A number equal to <paramref name="x" /> - (<paramref name="y" /> Q), where Q is the quotient of <paramref name="x" /> / <paramref name="y" /> rounded to the nearest integer (if <paramref name="x" /> / <paramref name="y" /> falls halfway between two integers, the even integer is returned).</span></span>  
  
 <span data-ttu-id="cd119-298">Jeśli <paramref name="x" /> -(<paramref name="y" /> Q) jest zero, wartość + 0 jest zwracany, jeśli <paramref name="x" /> jest dodatni lub — jeśli 0 <paramref name="x" /> jest ujemna.</span><span class="sxs-lookup"><span data-stu-id="cd119-298">If <paramref name="x" /> - (<paramref name="y" /> Q) is zero, the value +0 is returned if <paramref name="x" /> is positive, or -0 if <paramref name="x" /> is negative.</span></span>  
  
 <span data-ttu-id="cd119-299">Jeśli <paramref name="y" /> = 0, <see cref="F:System.Double.NaN" /> jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="cd119-299">If <paramref name="y" /> = 0, <see cref="F:System.Double.NaN" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd119-300">Ta operacja jest zgodny z pozostałą operacji zdefiniowanej w sekcji 5.1 754-1985 ANSI/IEEE Std; Standard IEEE binarne arytmetyczne zmiennoprzecinkowe; Institute of prądu i Electronics Engineers, Inc.; 1985.</span><span class="sxs-lookup"><span data-stu-id="cd119-300">This operation complies with the remainder operation defined in Section 5.1 of ANSI/IEEE Std 754-1985; IEEE Standard for Binary Floating-Point Arithmetic; Institute of Electrical and Electronics Engineers, Inc; 1985.</span></span>  
  
 <span data-ttu-id="cd119-301"><xref:System.Math.IEEERemainder%2A> Metoda nie jest taka sama jak operator modulo.</span><span class="sxs-lookup"><span data-stu-id="cd119-301">The <xref:System.Math.IEEERemainder%2A> method is not the same as the modulus operator.</span></span> <span data-ttu-id="cd119-302">Mimo że zwrócą resztę po dzielenia formuły używane są różne.</span><span class="sxs-lookup"><span data-stu-id="cd119-302">Although both return the remainder after division, the formulas they use are different.</span></span> <span data-ttu-id="cd119-303">Formuła <xref:System.Math.IEEERemainder%2A> metoda jest:</span><span class="sxs-lookup"><span data-stu-id="cd119-303">The formula for the <xref:System.Math.IEEERemainder%2A> method is:</span></span>  
  
```  
IEEERemainder = dividend - (divisor * Math.Round(dividend / divisor))  
```  
  
 <span data-ttu-id="cd119-304">Z kolei dla operatora modulo jest:</span><span class="sxs-lookup"><span data-stu-id="cd119-304">In contrast, the formula for the modulus operator is:</span></span>  
  
```  
Modulus = (Math.Abs(dividend) - (Math.Abs(divisor) *   
          (Math.Floor(Math.Abs(dividend) / Math.Abs(divisor))))) *   
          Math.Sign(dividend)  
```  
  
   
  
## Examples  
 <span data-ttu-id="cd119-305">Poniższy przykład zachowanie różni się od pozostałej zwrócony przez <xref:System.Math.IEEERemainder%2A> metody pozostałych zwracanych przez operator dzielenie modulo.</span><span class="sxs-lookup"><span data-stu-id="cd119-305">The following example contrasts the remainder returned by the <xref:System.Math.IEEERemainder%2A> method with the remainder returned by the modulus division operator.</span></span>  
  
 [!code-csharp[System.Math.IEEERemainder#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.ieeeremainder/cs/ieeeremainder1.cs#1)]
 [!code-vb[System.Math.IEEERemainder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.ieeeremainder/vb/ieeeremainder1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Log">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cd119-306">Zwraca wartość logarytmu określonej liczby.</span><span class="sxs-lookup"><span data-stu-id="cd119-306">Returns the logarithm of a specified number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static double Log (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Log(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Log(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="cd119-307">Liczba, której logarytm ma zostać znaleziona.</span><span class="sxs-lookup"><span data-stu-id="cd119-307">The number whose logarithm is to be found.</span></span></param>
        <summary><span data-ttu-id="cd119-308">Zwraca fizyczna (podstawowy <see langword="e" />) logarytm o podstawie określonej liczby.</span><span class="sxs-lookup"><span data-stu-id="cd119-308">Returns the natural (base <see langword="e" />) logarithm of a specified number.</span></span></summary>
        <returns><span data-ttu-id="cd119-309">Jedna z wartości w tabeli poniżej.</span><span class="sxs-lookup"><span data-stu-id="cd119-309">One of the values in the following table.</span></span>  
  
 <span data-ttu-id="cd119-310"><list type="table"><listheader><term><paramref name="d" /> Parametr</span><span class="sxs-lookup"><span data-stu-id="cd119-310"><list type="table"><listheader><term><paramref name="d" /> parameter</span></span>  
  
 <span data-ttu-id="cd119-311"></term><description> Wartość zwracana</span><span class="sxs-lookup"><span data-stu-id="cd119-311"></term><description> Return value</span></span>  
  
 <span data-ttu-id="cd119-312"></description></listheader><item><term> Dodatnią</span><span class="sxs-lookup"><span data-stu-id="cd119-312"></description></listheader><item><term> Positive</span></span>  
  
 <span data-ttu-id="cd119-313"></term><description> Logarytm naturalny <paramref name="d" />; oznacza to, ln <paramref name="d" />, lub dziennika e <paramref name="d" /> </description> </item> <item> <term> Zero</span><span class="sxs-lookup"><span data-stu-id="cd119-313"></term><description> The natural logarithm of <paramref name="d" />; that is, ln <paramref name="d" />, or log e <paramref name="d" /></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="cd119-314"></term><description><see cref="F:System.Double.NegativeInfinity" /></description></item><item><term> Ujemna</span><span class="sxs-lookup"><span data-stu-id="cd119-314"></term><description><see cref="F:System.Double.NegativeInfinity" /></description></item><item><term> Negative</span></span>  
  
 <span data-ttu-id="cd119-315"></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> Równa <see cref="F:System.Double.NaN" /> </term> <description> <see cref="F:System.Double.NaN" /> </description> </item> <item> <term> równe <see cref="F:System.Double.PositiveInfinity" /></term><description><see cref="F:System.Double.PositiveInfinity" /></description></item></list></span><span class="sxs-lookup"><span data-stu-id="cd119-315"></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> Equal to <see cref="F:System.Double.NaN" /></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> Equal to <see cref="F:System.Double.PositiveInfinity" /></term><description><see cref="F:System.Double.PositiveInfinity" /></description></item></list></span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd119-316">Parametr `d` jest określony jako podstawowy numer 10.</span><span class="sxs-lookup"><span data-stu-id="cd119-316">Parameter `d` is specified as a base 10 number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd119-317">Poniższy przykład przedstawia <xref:System.Math.Log%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="cd119-317">The following example illustrates the <xref:System.Math.Log%2A> method.</span></span>  
  
 [!code-csharp[System.Math.Log_Overloads#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Log_Overloads/CS/log1.cs#2)]
 [!code-vb[System.Math.Log_Overloads#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Log_Overloads/VB/log1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Math.E" />
        <altmember cref="M:System.Math.Exp(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static double Log (double a, double newBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log(float64 a, float64 newBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Log(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (a As Double, newBase As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Log(double a, double newBase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
        <Parameter Name="newBase" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="cd119-318">Liczba, której logarytm ma zostać znaleziona.</span><span class="sxs-lookup"><span data-stu-id="cd119-318">The number whose logarithm is to be found.</span></span></param>
        <param name="newBase"><span data-ttu-id="cd119-319">Podstawa logarytmu.</span><span class="sxs-lookup"><span data-stu-id="cd119-319">The base of the logarithm.</span></span></param>
        <summary><span data-ttu-id="cd119-320">Zwraca logarytm o określonej liczby w określonej podstawy.</span><span class="sxs-lookup"><span data-stu-id="cd119-320">Returns the logarithm of a specified number in a specified base.</span></span></summary>
        <returns><span data-ttu-id="cd119-321">Jedna z wartości w tabeli poniżej.</span><span class="sxs-lookup"><span data-stu-id="cd119-321">One of the values in the following table.</span></span> <span data-ttu-id="cd119-322">(+ Oznacza nieskończoność <see cref="F:System.Double.PositiveInfinity" />, - oznacza nieskończoność <see cref="F:System.Double.NegativeInfinity" />, i określa NaN <see cref="F:System.Double.NaN" />.)</span><span class="sxs-lookup"><span data-stu-id="cd119-322">(+Infinity denotes <see cref="F:System.Double.PositiveInfinity" />, -Infinity denotes <see cref="F:System.Double.NegativeInfinity" />, and NaN denotes <see cref="F:System.Double.NaN" />.)</span></span>  
  
 <span data-ttu-id="cd119-323"><list type="table"><listheader><term><paramref name="a" /></term><description><paramref name="newBase" /></description><description> Wartość zwracana</span><span class="sxs-lookup"><span data-stu-id="cd119-323"><list type="table"><listheader><term><paramref name="a" /></term><description><paramref name="newBase" /></description><description> Return value</span></span>  
  
 <span data-ttu-id="cd119-324"></description></listheader><item><term><paramref name="a" />&gt; 0</span><span class="sxs-lookup"><span data-stu-id="cd119-324"></description></listheader><item><term><paramref name="a" />&gt; 0</span></span>  
  
 <span data-ttu-id="cd119-325"></term><description> (0 &lt; <paramref name="newBase" /> &lt; 1) - lub -(<paramref name="newBase" /> &gt; 1)</span><span class="sxs-lookup"><span data-stu-id="cd119-325"></term><description> (0 &lt;<paramref name="newBase" />&lt; 1) -or-(<paramref name="newBase" />&gt; 1)</span></span>  
  
 <span data-ttu-id="cd119-326"></description><description> lognewBase(a)</span><span class="sxs-lookup"><span data-stu-id="cd119-326"></description><description> lognewBase(a)</span></span>  
  
 <span data-ttu-id="cd119-327"></description></item><item><term><paramref name="a" />&lt; 0</span><span class="sxs-lookup"><span data-stu-id="cd119-327"></description></item><item><term><paramref name="a" />&lt; 0</span></span>  
  
 <span data-ttu-id="cd119-328"></term><description> (wartości)</span><span class="sxs-lookup"><span data-stu-id="cd119-328"></term><description> (any value)</span></span>  
  
 <span data-ttu-id="cd119-329"></description><description> NaN</span><span class="sxs-lookup"><span data-stu-id="cd119-329"></description><description> NaN</span></span>  
  
 <span data-ttu-id="cd119-330"></description></item><item><term> (wartości)</span><span class="sxs-lookup"><span data-stu-id="cd119-330"></description></item><item><term> (any value)</span></span>  
  
 <span data-ttu-id="cd119-331"></term><description><paramref name="newBase" />&lt; 0</span><span class="sxs-lookup"><span data-stu-id="cd119-331"></term><description><paramref name="newBase" />&lt; 0</span></span>  
  
 <span data-ttu-id="cd119-332"></description><description> NaN</span><span class="sxs-lookup"><span data-stu-id="cd119-332"></description><description> NaN</span></span>  
  
 <span data-ttu-id="cd119-333"></description></item><item><term><paramref name="a" /> != 1</span><span class="sxs-lookup"><span data-stu-id="cd119-333"></description></item><item><term><paramref name="a" /> != 1</span></span>  
  
 <span data-ttu-id="cd119-334"></term><description><paramref name="newBase" /> = 0</span><span class="sxs-lookup"><span data-stu-id="cd119-334"></term><description><paramref name="newBase" /> = 0</span></span>  
  
 <span data-ttu-id="cd119-335"></description><description> NaN</span><span class="sxs-lookup"><span data-stu-id="cd119-335"></description><description> NaN</span></span>  
  
 <span data-ttu-id="cd119-336"></description></item><item><term><paramref name="a" /> != 1</span><span class="sxs-lookup"><span data-stu-id="cd119-336"></description></item><item><term><paramref name="a" /> != 1</span></span>  
  
 <span data-ttu-id="cd119-337"></term><description><paramref name="newBase" /> = + Infinity</span><span class="sxs-lookup"><span data-stu-id="cd119-337"></term><description><paramref name="newBase" /> = +Infinity</span></span>  
  
 <span data-ttu-id="cd119-338"></description><description> NaN</span><span class="sxs-lookup"><span data-stu-id="cd119-338"></description><description> NaN</span></span>  
  
 <span data-ttu-id="cd119-339"></description></item><item><term><paramref name="a" /> = NaN</span><span class="sxs-lookup"><span data-stu-id="cd119-339"></description></item><item><term><paramref name="a" /> = NaN</span></span>  
  
 <span data-ttu-id="cd119-340"></term><description> (wartości)</span><span class="sxs-lookup"><span data-stu-id="cd119-340"></term><description> (any value)</span></span>  
  
 <span data-ttu-id="cd119-341"></description><description> NaN</span><span class="sxs-lookup"><span data-stu-id="cd119-341"></description><description> NaN</span></span>  
  
 <span data-ttu-id="cd119-342"></description></item><item><term> (wartości)</span><span class="sxs-lookup"><span data-stu-id="cd119-342"></description></item><item><term> (any value)</span></span>  
  
 <span data-ttu-id="cd119-343"></term><description><paramref name="newBase" /> = NaN</span><span class="sxs-lookup"><span data-stu-id="cd119-343"></term><description><paramref name="newBase" /> = NaN</span></span>  
  
 <span data-ttu-id="cd119-344"></description><description> NaN</span><span class="sxs-lookup"><span data-stu-id="cd119-344"></description><description> NaN</span></span>  
  
 <span data-ttu-id="cd119-345"></description></item><item><term> (wartości)</span><span class="sxs-lookup"><span data-stu-id="cd119-345"></description></item><item><term> (any value)</span></span>  
  
 <span data-ttu-id="cd119-346"></term><description><paramref name="newBase" /> = 1</span><span class="sxs-lookup"><span data-stu-id="cd119-346"></term><description><paramref name="newBase" /> = 1</span></span>  
  
 <span data-ttu-id="cd119-347"></description><description> NaN</span><span class="sxs-lookup"><span data-stu-id="cd119-347"></description><description> NaN</span></span>  
  
 <span data-ttu-id="cd119-348"></description></item><item><term><paramref name="a" /> = 0</span><span class="sxs-lookup"><span data-stu-id="cd119-348"></description></item><item><term><paramref name="a" /> = 0</span></span>  
  
 <span data-ttu-id="cd119-349"></term><description> 0 &lt;<paramref name="newBase" />&lt; 1</span><span class="sxs-lookup"><span data-stu-id="cd119-349"></term><description> 0 &lt;<paramref name="newBase" />&lt; 1</span></span>  
  
 <span data-ttu-id="cd119-350"></description><description> + Infinity</span><span class="sxs-lookup"><span data-stu-id="cd119-350"></description><description> +Infinity</span></span>  
  
 <span data-ttu-id="cd119-351"></description></item><item><term><paramref name="a" /> = 0</span><span class="sxs-lookup"><span data-stu-id="cd119-351"></description></item><item><term><paramref name="a" /> = 0</span></span>  
  
 <span data-ttu-id="cd119-352"></term><description><paramref name="newBase" />&gt; 1</span><span class="sxs-lookup"><span data-stu-id="cd119-352"></term><description><paramref name="newBase" />&gt; 1</span></span>  
  
 <span data-ttu-id="cd119-353"></description><description> — Infinity</span><span class="sxs-lookup"><span data-stu-id="cd119-353"></description><description> -Infinity</span></span>  
  
 <span data-ttu-id="cd119-354"></description></item><item><term><paramref name="a" /> = + Infinity</span><span class="sxs-lookup"><span data-stu-id="cd119-354"></description></item><item><term><paramref name="a" /> =  +Infinity</span></span>  
  
 <span data-ttu-id="cd119-355"></term><description> 0 &lt;<paramref name="newBase" />&lt; 1</span><span class="sxs-lookup"><span data-stu-id="cd119-355"></term><description> 0 &lt;<paramref name="newBase" />&lt; 1</span></span>  
  
 <span data-ttu-id="cd119-356"></description><description> — Infinity</span><span class="sxs-lookup"><span data-stu-id="cd119-356"></description><description> -Infinity</span></span>  
  
 <span data-ttu-id="cd119-357"></description></item><item><term><paramref name="a" /> = + Infinity</span><span class="sxs-lookup"><span data-stu-id="cd119-357"></description></item><item><term><paramref name="a" /> =  +Infinity</span></span>  
  
 <span data-ttu-id="cd119-358"></term><description><paramref name="newBase" />&gt; 1</span><span class="sxs-lookup"><span data-stu-id="cd119-358"></term><description><paramref name="newBase" />&gt; 1</span></span>  
  
 <span data-ttu-id="cd119-359"></description><description> + Infinity</span><span class="sxs-lookup"><span data-stu-id="cd119-359"></description><description> +Infinity</span></span>  
  
 <span data-ttu-id="cd119-360"></description></item><item><term><paramref name="a" /> = 1</span><span class="sxs-lookup"><span data-stu-id="cd119-360"></description></item><item><term><paramref name="a" /> = 1</span></span>  
  
 <span data-ttu-id="cd119-361"></term><description><paramref name="newBase" /> = 0</span><span class="sxs-lookup"><span data-stu-id="cd119-361"></term><description><paramref name="newBase" /> = 0</span></span>  
  
 <span data-ttu-id="cd119-362"></description><description> 0</span><span class="sxs-lookup"><span data-stu-id="cd119-362"></description><description> 0</span></span>  
  
 <span data-ttu-id="cd119-363"></description></item><item><term><paramref name="a" /> = 1</span><span class="sxs-lookup"><span data-stu-id="cd119-363"></description></item><item><term><paramref name="a" /> = 1</span></span>  
  
 <span data-ttu-id="cd119-364"></term><description><paramref name="newBase" /> = + Infinity</span><span class="sxs-lookup"><span data-stu-id="cd119-364"></term><description><paramref name="newBase" /> = +Infinity</span></span>  
  
 <span data-ttu-id="cd119-365"></description><description> 0</span><span class="sxs-lookup"><span data-stu-id="cd119-365"></description><description> 0</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd119-366">W poniższym przykładzie użyto <xref:System.Math.Log%2A> do oceny niektórych logarytmicznej tożsamości dla wybranych wartości.</span><span class="sxs-lookup"><span data-stu-id="cd119-366">The following example uses <xref:System.Math.Log%2A> to evaluate certain logarithmic identities for selected values.</span></span>  
  
 [!code-cpp[System.Math.Log_Overloads#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.Log_Overloads/CPP/loggen.cpp#1)]
 [!code-csharp[System.Math.Log_Overloads#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Log_Overloads/CS/loggen.cs#1)]
 [!code-vb[System.Math.Log_Overloads#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Log_Overloads/VB/loggen.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Log10">
      <MemberSignature Language="C#" Value="public static double Log10 (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log10(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Log10(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log10 (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Log10(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="cd119-367">Liczba, której logarytm ma zostać znaleziona.</span><span class="sxs-lookup"><span data-stu-id="cd119-367">A number whose logarithm is to be found.</span></span></param>
        <summary><span data-ttu-id="cd119-368">Zwraca logarytm 10 podanej liczby.</span><span class="sxs-lookup"><span data-stu-id="cd119-368">Returns the base 10 logarithm of a specified number.</span></span></summary>
        <returns><span data-ttu-id="cd119-369">Jedna z wartości w tabeli poniżej.</span><span class="sxs-lookup"><span data-stu-id="cd119-369">One of the values in the following table.</span></span>  
  
 <span data-ttu-id="cd119-370"><list type="table"><listheader><term><paramref name="d" /> Parametr</span><span class="sxs-lookup"><span data-stu-id="cd119-370"><list type="table"><listheader><term><paramref name="d" /> parameter</span></span>  
  
 <span data-ttu-id="cd119-371"></term><description> Wartość zwracana</span><span class="sxs-lookup"><span data-stu-id="cd119-371"></term><description> Return value</span></span>  
  
 <span data-ttu-id="cd119-372"></description></listheader><item><term> Dodatnią</span><span class="sxs-lookup"><span data-stu-id="cd119-372"></description></listheader><item><term> Positive</span></span>  
  
 <span data-ttu-id="cd119-373"></term><description> Dziennik podstawowej 10 <paramref name="d" />; Zaloguj się 10<paramref name="d" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-373"></term><description> The base 10 log of <paramref name="d" />; that is, log 10<paramref name="d" />.</span></span>  
  
 <span data-ttu-id="cd119-374"></description></item><item><term> Zero</span><span class="sxs-lookup"><span data-stu-id="cd119-374"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="cd119-375"></term><description><see cref="F:System.Double.NegativeInfinity" /></description></item><item><term> Ujemna</span><span class="sxs-lookup"><span data-stu-id="cd119-375"></term><description><see cref="F:System.Double.NegativeInfinity" /></description></item><item><term> Negative</span></span>  
  
 <span data-ttu-id="cd119-376"></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> Równa <see cref="F:System.Double.NaN" /> </term> <description> <see cref="F:System.Double.NaN" /> </description> </item> <item> <term> równe <see cref="F:System.Double.PositiveInfinity" /></term><description><see cref="F:System.Double.PositiveInfinity" /></description></item></list></span><span class="sxs-lookup"><span data-stu-id="cd119-376"></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> Equal to <see cref="F:System.Double.NaN" /></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> Equal to <see cref="F:System.Double.PositiveInfinity" /></term><description><see cref="F:System.Double.PositiveInfinity" /></description></item></list></span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd119-377">Parametr `d` jest określony jako podstawowy numer 10.</span><span class="sxs-lookup"><span data-stu-id="cd119-377">Parameter `d` is specified as a base 10 number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd119-378">W poniższym przykładzie użyto <xref:System.Math.Log10%2A> metoda zwraca logarytm 10 dla wybranych wartości.</span><span class="sxs-lookup"><span data-stu-id="cd119-378">The following example uses the <xref:System.Math.Log10%2A> method to return the base 10 logarithm for selected values.</span></span>  
  
 [!code-csharp[System.Math.Log10#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Log10/CS/log10.cs#1)]
 [!code-vb[System.Math.Log10#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Log10/VB/log10.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Max">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cd119-379">Zwraca większych dwóch podanych liczb.</span><span class="sxs-lookup"><span data-stu-id="cd119-379">Returns the larger of two specified numbers.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static byte Max (byte val1, byte val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 Max(unsigned int8 val1, unsigned int8 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.Byte,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As Byte, val2 As Byte) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte Max(System::Byte val1, System::Byte val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Byte" />
        <Parameter Name="val2" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="cd119-380">Pierwszy z dwóch 8-bitowych liczb całkowitych bez znaku do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-380">The first of two 8-bit unsigned integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="cd119-381">Drugi dwóch 8-bitowych liczb całkowitych bez znaku do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-381">The second of two 8-bit unsigned integers to compare.</span></span></param>
        <summary><span data-ttu-id="cd119-382">Zwraca większy dwie liczb całkowitych bez znaku 8-bitową.</span><span class="sxs-lookup"><span data-stu-id="cd119-382">Returns the larger of two 8-bit unsigned integers.</span></span></summary>
        <returns><span data-ttu-id="cd119-383">Parametr <paramref name="val1" /> lub <paramref name="val2" />, w zależności od jest większy.</span><span class="sxs-lookup"><span data-stu-id="cd119-383">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd119-384">W poniższym przykładzie pokazano sposób użycia <xref:System.Math.Max%2A> metody, aby wrócić i wyświetlić większa niż dwie zmienne.</span><span class="sxs-lookup"><span data-stu-id="cd119-384">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static decimal Max (decimal val1, decimal val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Max(valuetype System.Decimal val1, valuetype System.Decimal val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.Decimal,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As Decimal, val2 As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Max(System::Decimal val1, System::Decimal val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Decimal" />
        <Parameter Name="val2" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="cd119-385">Pierwsze dwie liczb dziesiętnych do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-385">The first of two decimal numbers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="cd119-386">Drugi dwóch liczb dziesiętnych do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-386">The second of two decimal numbers to compare.</span></span></param>
        <summary><span data-ttu-id="cd119-387">Zwraca większych dwóch liczb dziesiętnych.</span><span class="sxs-lookup"><span data-stu-id="cd119-387">Returns the larger of two decimal numbers.</span></span></summary>
        <returns><span data-ttu-id="cd119-388">Parametr <paramref name="val1" /> lub <paramref name="val2" />, w zależności od jest większy.</span><span class="sxs-lookup"><span data-stu-id="cd119-388">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd119-389">W poniższym przykładzie pokazano sposób użycia <xref:System.Math.Max%2A> metody, aby wrócić i wyświetlić większa niż dwie zmienne.</span><span class="sxs-lookup"><span data-stu-id="cd119-389">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static double Max (double val1, double val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Max(float64 val1, float64 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As Double, val2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Max(double val1, double val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Double" />
        <Parameter Name="val2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="cd119-390">Pierwsze dwie liczb zmiennoprzecinkowych podwójnej precyzji do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-390">The first of two double-precision floating-point numbers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="cd119-391">Drugi dwie liczby zmiennoprzecinkowe podwójnej precyzji do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-391">The second of two double-precision floating-point numbers to compare.</span></span></param>
        <summary><span data-ttu-id="cd119-392">Zwraca większych dwie liczb zmiennoprzecinkowych podwójnej precyzji.</span><span class="sxs-lookup"><span data-stu-id="cd119-392">Returns the larger of two double-precision floating-point numbers.</span></span></summary>
        <returns><span data-ttu-id="cd119-393">Parametr <paramref name="val1" /> lub <paramref name="val2" />, w zależności od jest większy.</span><span class="sxs-lookup"><span data-stu-id="cd119-393">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span> <span data-ttu-id="cd119-394">Jeśli <paramref name="val1" />, <paramref name="val2" />, lub obie <paramref name="val1" /> i <paramref name="val2" /> są równe <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="cd119-394">If <paramref name="val1" />, <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd119-395">W poniższym przykładzie pokazano sposób użycia <xref:System.Math.Max%2A> metody, aby wrócić i wyświetlić większa niż dwie zmienne.</span><span class="sxs-lookup"><span data-stu-id="cd119-395">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static short Max (short val1, short val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 Max(int16 val1, int16 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.Int16,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As Short, val2 As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Max(short val1, short val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Int16" />
        <Parameter Name="val2" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="cd119-396">Pierwszy z dwóch 16-bitowych liczb całkowitych ze znakiem do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-396">The first of two 16-bit signed integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="cd119-397">Drugi dwóch 16-bitowych liczb całkowitych ze znakiem do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-397">The second of two 16-bit signed integers to compare.</span></span></param>
        <summary><span data-ttu-id="cd119-398">Zwraca większego z dwóch 16-bitowych liczb całkowitych ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="cd119-398">Returns the larger of two 16-bit signed integers.</span></span></summary>
        <returns><span data-ttu-id="cd119-399">Parametr <paramref name="val1" /> lub <paramref name="val2" />, w zależności od jest większy.</span><span class="sxs-lookup"><span data-stu-id="cd119-399">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd119-400">W poniższym przykładzie pokazano sposób użycia <xref:System.Math.Max%2A> metody, aby wrócić i wyświetlić większa niż dwie zmienne.</span><span class="sxs-lookup"><span data-stu-id="cd119-400">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static int Max (int val1, int val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Max(int32 val1, int32 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As Integer, val2 As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Max(int val1, int val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Int32" />
        <Parameter Name="val2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="cd119-401">Pierwszy z dwóch 32-bitowych liczb całkowitych ze znakiem do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-401">The first of two 32-bit signed integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="cd119-402">Drugi dwa 32-bitowych liczb całkowitych ze znakiem do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-402">The second of two 32-bit signed integers to compare.</span></span></param>
        <summary><span data-ttu-id="cd119-403">Zwraca większego z dwóch 32-bitowych liczb całkowitych ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="cd119-403">Returns the larger of two 32-bit signed integers.</span></span></summary>
        <returns><span data-ttu-id="cd119-404">Parametr <paramref name="val1" /> lub <paramref name="val2" />, w zależności od jest większy.</span><span class="sxs-lookup"><span data-stu-id="cd119-404">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd119-405">W poniższym przykładzie pokazano sposób użycia <xref:System.Math.Max%2A> metody, aby wrócić i wyświetlić większa niż dwie zmienne.</span><span class="sxs-lookup"><span data-stu-id="cd119-405">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static long Max (long val1, long val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Max(int64 val1, int64 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As Long, val2 As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Max(long val1, long val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Int64" />
        <Parameter Name="val2" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="cd119-406">Pierwszy z dwóch 64-bitowych liczb całkowitych ze znakiem do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-406">The first of two 64-bit signed integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="cd119-407">Drugi dwóch 64-bitowych liczb całkowitych ze znakiem do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-407">The second of two 64-bit signed integers to compare.</span></span></param>
        <summary><span data-ttu-id="cd119-408">Zwraca większego z dwóch 64-bitowych liczb całkowitych ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="cd119-408">Returns the larger of two 64-bit signed integers.</span></span></summary>
        <returns><span data-ttu-id="cd119-409">Parametr <paramref name="val1" /> lub <paramref name="val2" />, w zależności od jest większy.</span><span class="sxs-lookup"><span data-stu-id="cd119-409">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd119-410">W poniższym przykładzie pokazano sposób użycia <xref:System.Math.Max%2A> metody, aby wrócić i wyświetlić większa niż dwie zmienne.</span><span class="sxs-lookup"><span data-stu-id="cd119-410">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static sbyte Max (sbyte val1, sbyte val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 Max(int8 val1, int8 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.SByte,System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As SByte, val2 As SByte) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte Max(System::SByte val1, System::SByte val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.SByte" />
        <Parameter Name="val2" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="cd119-411">Pierwszy z dwóch 8-bitowych liczb całkowitych ze znakiem do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-411">The first of two 8-bit signed integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="cd119-412">Drugi dwóch 8-bitowych liczb całkowitych ze znakiem do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-412">The second of two 8-bit signed integers to compare.</span></span></param>
        <summary><span data-ttu-id="cd119-413">Zwraca większego z dwóch 8-bitowych liczb całkowitych ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="cd119-413">Returns the larger of two 8-bit signed integers.</span></span></summary>
        <returns><span data-ttu-id="cd119-414">Parametr <paramref name="val1" /> lub <paramref name="val2" />, w zależności od jest większy.</span><span class="sxs-lookup"><span data-stu-id="cd119-414">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd119-415">W poniższym przykładzie pokazano sposób użycia <xref:System.Math.Max%2A> metody, aby wrócić i wyświetlić większa niż dwie zmienne.</span><span class="sxs-lookup"><span data-stu-id="cd119-415">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static float Max (float val1, float val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Max(float32 val1, float32 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As Single, val2 As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Max(float val1, float val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Single" />
        <Parameter Name="val2" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="cd119-416">Pierwsze dwie liczb zmiennoprzecinkowych pojedynczej precyzji do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-416">The first of two single-precision floating-point numbers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="cd119-417">Drugi dwie liczb zmiennoprzecinkowych pojedynczej precyzji do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-417">The second of two single-precision floating-point numbers to compare.</span></span></param>
        <summary><span data-ttu-id="cd119-418">Zwraca większych dwie liczb zmiennoprzecinkowych pojedynczej precyzji.</span><span class="sxs-lookup"><span data-stu-id="cd119-418">Returns the larger of two single-precision floating-point numbers.</span></span></summary>
        <returns><span data-ttu-id="cd119-419">Parametr <paramref name="val1" /> lub <paramref name="val2" />, w zależności od jest większy.</span><span class="sxs-lookup"><span data-stu-id="cd119-419">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span> <span data-ttu-id="cd119-420">Jeśli <paramref name="val1" />, lub <paramref name="val2" />, lub obie <paramref name="val1" /> i <paramref name="val2" /> są równe <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="cd119-420">If <paramref name="val1" />, or <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are equal to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd119-421">W poniższym przykładzie pokazano sposób użycia <xref:System.Math.Max%2A> metody, aby wrócić i wyświetlić większa niż dwie zmienne.</span><span class="sxs-lookup"><span data-stu-id="cd119-421">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static ushort Max (ushort val1, ushort val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 Max(unsigned int16 val1, unsigned int16 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.UInt16,System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As UShort, val2 As UShort) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 Max(System::UInt16 val1, System::UInt16 val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.UInt16" />
        <Parameter Name="val2" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="cd119-422">Pierwszy z dwóch 16-bitowych liczb całkowitych bez znaku do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-422">The first of two 16-bit unsigned integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="cd119-423">Drugi dwóch 16-bitowych liczb całkowitych bez znaku do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-423">The second of two 16-bit unsigned integers to compare.</span></span></param>
        <summary><span data-ttu-id="cd119-424">Zwraca większy dwie liczb całkowitych bez znaku 16-bitowych.</span><span class="sxs-lookup"><span data-stu-id="cd119-424">Returns the larger of two 16-bit unsigned integers.</span></span></summary>
        <returns><span data-ttu-id="cd119-425">Parametr <paramref name="val1" /> lub <paramref name="val2" />, w zależności od jest większy.</span><span class="sxs-lookup"><span data-stu-id="cd119-425">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd119-426">W poniższym przykładzie pokazano sposób użycia <xref:System.Math.Max%2A> metody, aby wrócić i wyświetlić większa niż dwie zmienne.</span><span class="sxs-lookup"><span data-stu-id="cd119-426">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static uint Max (uint val1, uint val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 Max(unsigned int32 val1, unsigned int32 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As UInteger, val2 As UInteger) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 Max(System::UInt32 val1, System::UInt32 val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.UInt32" />
        <Parameter Name="val2" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="cd119-427">Pierwszy z dwóch 32-bitowych liczb całkowitych bez znaku do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-427">The first of two 32-bit unsigned integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="cd119-428">Drugi dwa 32-bitowych liczb całkowitych bez znaku do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-428">The second of two 32-bit unsigned integers to compare.</span></span></param>
        <summary><span data-ttu-id="cd119-429">Zwraca większy dwie liczb całkowitych bez znaku 32-bitowych.</span><span class="sxs-lookup"><span data-stu-id="cd119-429">Returns the larger of two 32-bit unsigned integers.</span></span></summary>
        <returns><span data-ttu-id="cd119-430">Parametr <paramref name="val1" /> lub <paramref name="val2" />, w zależności od jest większy.</span><span class="sxs-lookup"><span data-stu-id="cd119-430">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd119-431">W poniższym przykładzie pokazano sposób użycia <xref:System.Math.Max%2A> metody, aby wrócić i wyświetlić większa niż dwie zmienne.</span><span class="sxs-lookup"><span data-stu-id="cd119-431">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static ulong Max (ulong val1, ulong val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 Max(unsigned int64 val1, unsigned int64 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.UInt64,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As ULong, val2 As ULong) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 Max(System::UInt64 val1, System::UInt64 val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.UInt64" />
        <Parameter Name="val2" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="cd119-432">Pierwszy z dwóch 64-bitowych liczb całkowitych bez znaku do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-432">The first of two 64-bit unsigned integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="cd119-433">Drugi dwóch 64-bitowych liczb całkowitych bez znaku do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-433">The second of two 64-bit unsigned integers to compare.</span></span></param>
        <summary><span data-ttu-id="cd119-434">Zwraca większy dwie liczb całkowitych bez znaku 64-bitowych.</span><span class="sxs-lookup"><span data-stu-id="cd119-434">Returns the larger of two 64-bit unsigned integers.</span></span></summary>
        <returns><span data-ttu-id="cd119-435">Parametr <paramref name="val1" /> lub <paramref name="val2" />, w zależności od jest większy.</span><span class="sxs-lookup"><span data-stu-id="cd119-435">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd119-436">W poniższym przykładzie pokazano sposób użycia <xref:System.Math.Max%2A> metody, aby wrócić i wyświetlić większa niż dwie zmienne.</span><span class="sxs-lookup"><span data-stu-id="cd119-436">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Min">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cd119-437">Zwraca mniejszy z dwóch liczb.</span><span class="sxs-lookup"><span data-stu-id="cd119-437">Returns the smaller of two numbers.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static byte Min (byte val1, byte val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 Min(unsigned int8 val1, unsigned int8 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.Byte,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As Byte, val2 As Byte) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte Min(System::Byte val1, System::Byte val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Byte" />
        <Parameter Name="val2" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="cd119-438">Pierwszy z dwóch 8-bitowych liczb całkowitych bez znaku do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-438">The first of two 8-bit unsigned integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="cd119-439">Drugi dwóch 8-bitowych liczb całkowitych bez znaku do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-439">The second of two 8-bit unsigned integers to compare.</span></span></param>
        <summary><span data-ttu-id="cd119-440">Zwraca mniejszy z dwóch liczb całkowitych bez znaku 8-bitową.</span><span class="sxs-lookup"><span data-stu-id="cd119-440">Returns the smaller of two 8-bit unsigned integers.</span></span></summary>
        <returns><span data-ttu-id="cd119-441">Parametr <paramref name="val1" /> lub <paramref name="val2" />, w zależności od jest mniejsza.</span><span class="sxs-lookup"><span data-stu-id="cd119-441">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd119-442">W poniższym przykładzie pokazano sposób użycia <xref:System.Math.Min%2A> metody, aby wrócić i wyświetlić mniejszy z dwóch zmiennych.</span><span class="sxs-lookup"><span data-stu-id="cd119-442">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static decimal Min (decimal val1, decimal val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Min(valuetype System.Decimal val1, valuetype System.Decimal val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.Decimal,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As Decimal, val2 As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Min(System::Decimal val1, System::Decimal val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Decimal" />
        <Parameter Name="val2" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="cd119-443">Pierwsze dwie liczb dziesiętnych do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-443">The first of two decimal numbers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="cd119-444">Drugi dwóch liczb dziesiętnych do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-444">The second of two decimal numbers to compare.</span></span></param>
        <summary><span data-ttu-id="cd119-445">Zwraca mniejszy z dwóch liczb dziesiętnych.</span><span class="sxs-lookup"><span data-stu-id="cd119-445">Returns the smaller of two decimal numbers.</span></span></summary>
        <returns><span data-ttu-id="cd119-446">Parametr <paramref name="val1" /> lub <paramref name="val2" />, w zależności od jest mniejsza.</span><span class="sxs-lookup"><span data-stu-id="cd119-446">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd119-447">W poniższym przykładzie pokazano sposób użycia <xref:System.Math.Min%2A> metody, aby wrócić i wyświetlić mniejszy z dwóch zmiennych.</span><span class="sxs-lookup"><span data-stu-id="cd119-447">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static double Min (double val1, double val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Min(float64 val1, float64 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As Double, val2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Min(double val1, double val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Double" />
        <Parameter Name="val2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="cd119-448">Pierwsze dwie liczb zmiennoprzecinkowych podwójnej precyzji do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-448">The first of two double-precision floating-point numbers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="cd119-449">Drugi dwie liczby zmiennoprzecinkowe podwójnej precyzji do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-449">The second of two double-precision floating-point numbers to compare.</span></span></param>
        <summary><span data-ttu-id="cd119-450">Zwraca mniejszy z dwóch liczby zmiennoprzecinkowe podwójnej precyzji.</span><span class="sxs-lookup"><span data-stu-id="cd119-450">Returns the smaller of two double-precision floating-point numbers.</span></span></summary>
        <returns><span data-ttu-id="cd119-451">Parametr <paramref name="val1" /> lub <paramref name="val2" />, w zależności od jest mniejsza.</span><span class="sxs-lookup"><span data-stu-id="cd119-451">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span> <span data-ttu-id="cd119-452">Jeśli <paramref name="val1" />, <paramref name="val2" />, lub obie <paramref name="val1" /> i <paramref name="val2" /> są równe <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="cd119-452">If <paramref name="val1" />, <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd119-453">W poniższym przykładzie pokazano sposób użycia <xref:System.Math.Min%2A> metody, aby wrócić i wyświetlić mniejszy z dwóch zmiennych.</span><span class="sxs-lookup"><span data-stu-id="cd119-453">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static short Min (short val1, short val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 Min(int16 val1, int16 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.Int16,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As Short, val2 As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Min(short val1, short val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Int16" />
        <Parameter Name="val2" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="cd119-454">Pierwszy z dwóch 16-bitowych liczb całkowitych ze znakiem do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-454">The first of two 16-bit signed integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="cd119-455">Drugi dwóch 16-bitowych liczb całkowitych ze znakiem do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-455">The second of two 16-bit signed integers to compare.</span></span></param>
        <summary><span data-ttu-id="cd119-456">Zwraca mniejszy z dwóch 16-bitowych liczb całkowitych ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="cd119-456">Returns the smaller of two 16-bit signed integers.</span></span></summary>
        <returns><span data-ttu-id="cd119-457">Parametr <paramref name="val1" /> lub <paramref name="val2" />, w zależności od jest mniejsza.</span><span class="sxs-lookup"><span data-stu-id="cd119-457">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd119-458">W poniższym przykładzie pokazano sposób użycia <xref:System.Math.Min%2A> metody, aby wrócić i wyświetlić mniejszy z dwóch zmiennych.</span><span class="sxs-lookup"><span data-stu-id="cd119-458">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static int Min (int val1, int val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Min(int32 val1, int32 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As Integer, val2 As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Min(int val1, int val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Int32" />
        <Parameter Name="val2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="cd119-459">Pierwszy z dwóch 32-bitowych liczb całkowitych ze znakiem do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-459">The first of two 32-bit signed integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="cd119-460">Drugi dwa 32-bitowych liczb całkowitych ze znakiem do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-460">The second of two 32-bit signed integers to compare.</span></span></param>
        <summary><span data-ttu-id="cd119-461">Zwraca mniejszy z dwóch 32-bitowych liczb całkowitych ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="cd119-461">Returns the smaller of two 32-bit signed integers.</span></span></summary>
        <returns><span data-ttu-id="cd119-462">Parametr <paramref name="val1" /> lub <paramref name="val2" />, w zależności od jest mniejsza.</span><span class="sxs-lookup"><span data-stu-id="cd119-462">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd119-463">W poniższym przykładzie pokazano sposób użycia <xref:System.Math.Min%2A> metody, aby wrócić i wyświetlić mniejszy z dwóch zmiennych.</span><span class="sxs-lookup"><span data-stu-id="cd119-463">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static long Min (long val1, long val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Min(int64 val1, int64 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As Long, val2 As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Min(long val1, long val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Int64" />
        <Parameter Name="val2" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="cd119-464">Pierwszy z dwóch 64-bitowych liczb całkowitych ze znakiem do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-464">The first of two 64-bit signed integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="cd119-465">Drugi dwóch 64-bitowych liczb całkowitych ze znakiem do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-465">The second of two 64-bit signed integers to compare.</span></span></param>
        <summary><span data-ttu-id="cd119-466">Zwraca mniejszy z dwóch 64-bitowych liczb całkowitych ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="cd119-466">Returns the smaller of two 64-bit signed integers.</span></span></summary>
        <returns><span data-ttu-id="cd119-467">Parametr <paramref name="val1" /> lub <paramref name="val2" />, w zależności od jest mniejsza.</span><span class="sxs-lookup"><span data-stu-id="cd119-467">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd119-468">W poniższym przykładzie pokazano sposób użycia <xref:System.Math.Min%2A> metody, aby wrócić i wyświetlić mniejszy z dwóch zmiennych.</span><span class="sxs-lookup"><span data-stu-id="cd119-468">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static sbyte Min (sbyte val1, sbyte val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 Min(int8 val1, int8 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.SByte,System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As SByte, val2 As SByte) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte Min(System::SByte val1, System::SByte val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.SByte" />
        <Parameter Name="val2" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="cd119-469">Pierwszy z dwóch 8-bitowych liczb całkowitych ze znakiem do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-469">The first of two 8-bit signed integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="cd119-470">Drugi dwóch 8-bitowych liczb całkowitych ze znakiem do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-470">The second of two 8-bit signed integers to compare.</span></span></param>
        <summary><span data-ttu-id="cd119-471">Zwraca mniejszy z dwóch 8-bitowych liczb całkowitych ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="cd119-471">Returns the smaller of two 8-bit signed integers.</span></span></summary>
        <returns><span data-ttu-id="cd119-472">Parametr <paramref name="val1" /> lub <paramref name="val2" />, w zależności od jest mniejsza.</span><span class="sxs-lookup"><span data-stu-id="cd119-472">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd119-473">W poniższym przykładzie pokazano sposób użycia <xref:System.Math.Min%2A> metody, aby wrócić i wyświetlić mniejszy z dwóch zmiennych.</span><span class="sxs-lookup"><span data-stu-id="cd119-473">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static float Min (float val1, float val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Min(float32 val1, float32 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As Single, val2 As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Min(float val1, float val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Single" />
        <Parameter Name="val2" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="cd119-474">Pierwsze dwie liczb zmiennoprzecinkowych pojedynczej precyzji do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-474">The first of two single-precision floating-point numbers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="cd119-475">Drugi dwie liczb zmiennoprzecinkowych pojedynczej precyzji do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-475">The second of two single-precision floating-point numbers to compare.</span></span></param>
        <summary><span data-ttu-id="cd119-476">Zwraca mniejszy z dwóch liczb zmiennoprzecinkowych pojedynczej precyzji.</span><span class="sxs-lookup"><span data-stu-id="cd119-476">Returns the smaller of two single-precision floating-point numbers.</span></span></summary>
        <returns><span data-ttu-id="cd119-477">Parametr <paramref name="val1" /> lub <paramref name="val2" />, w zależności od jest mniejsza.</span><span class="sxs-lookup"><span data-stu-id="cd119-477">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span> <span data-ttu-id="cd119-478">Jeśli <paramref name="val1" />, <paramref name="val2" />, lub obie <paramref name="val1" /> i <paramref name="val2" /> są równe <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="cd119-478">If <paramref name="val1" />, <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are equal to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd119-479">W poniższym przykładzie pokazano sposób użycia <xref:System.Math.Min%2A> metody, aby wrócić i wyświetlić mniejszy z dwóch zmiennych.</span><span class="sxs-lookup"><span data-stu-id="cd119-479">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static ushort Min (ushort val1, ushort val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 Min(unsigned int16 val1, unsigned int16 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.UInt16,System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As UShort, val2 As UShort) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 Min(System::UInt16 val1, System::UInt16 val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.UInt16" />
        <Parameter Name="val2" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="cd119-480">Pierwszy z dwóch 16-bitowych liczb całkowitych bez znaku do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-480">The first of two 16-bit unsigned integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="cd119-481">Drugi dwóch 16-bitowych liczb całkowitych bez znaku do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-481">The second of two 16-bit unsigned integers to compare.</span></span></param>
        <summary><span data-ttu-id="cd119-482">Zwraca mniejszy z dwóch liczb całkowitych bez znaku 16-bitowych.</span><span class="sxs-lookup"><span data-stu-id="cd119-482">Returns the smaller of two 16-bit unsigned integers.</span></span></summary>
        <returns><span data-ttu-id="cd119-483">Parametr <paramref name="val1" /> lub <paramref name="val2" />, w zależności od jest mniejsza.</span><span class="sxs-lookup"><span data-stu-id="cd119-483">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd119-484">W poniższym przykładzie pokazano sposób użycia <xref:System.Math.Min%2A> metody, aby wrócić i wyświetlić mniejszy z dwóch zmiennych.</span><span class="sxs-lookup"><span data-stu-id="cd119-484">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static uint Min (uint val1, uint val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 Min(unsigned int32 val1, unsigned int32 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As UInteger, val2 As UInteger) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 Min(System::UInt32 val1, System::UInt32 val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.UInt32" />
        <Parameter Name="val2" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="cd119-485">Pierwszy z dwóch 32-bitowych liczb całkowitych bez znaku do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-485">The first of two 32-bit unsigned integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="cd119-486">Drugi dwa 32-bitowych liczb całkowitych bez znaku do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-486">The second of two 32-bit unsigned integers to compare.</span></span></param>
        <summary><span data-ttu-id="cd119-487">Zwraca mniejszy z dwóch liczb całkowitych bez znaku 32-bitowych.</span><span class="sxs-lookup"><span data-stu-id="cd119-487">Returns the smaller of two 32-bit unsigned integers.</span></span></summary>
        <returns><span data-ttu-id="cd119-488">Parametr <paramref name="val1" /> lub <paramref name="val2" />, w zależności od jest mniejsza.</span><span class="sxs-lookup"><span data-stu-id="cd119-488">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd119-489">W poniższym przykładzie pokazano sposób użycia <xref:System.Math.Min%2A> metody, aby wrócić i wyświetlić mniejszy z dwóch zmiennych.</span><span class="sxs-lookup"><span data-stu-id="cd119-489">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static ulong Min (ulong val1, ulong val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 Min(unsigned int64 val1, unsigned int64 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.UInt64,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As ULong, val2 As ULong) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 Min(System::UInt64 val1, System::UInt64 val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.UInt64" />
        <Parameter Name="val2" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="cd119-490">Pierwszy z dwóch 64-bitowych liczb całkowitych bez znaku do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-490">The first of two 64-bit unsigned integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="cd119-491">Drugi dwóch 64-bitowych liczb całkowitych bez znaku do porównania.</span><span class="sxs-lookup"><span data-stu-id="cd119-491">The second of two 64-bit unsigned integers to compare.</span></span></param>
        <summary><span data-ttu-id="cd119-492">Zwraca mniejszy z dwóch liczb całkowitych bez znaku 64-bitowych.</span><span class="sxs-lookup"><span data-stu-id="cd119-492">Returns the smaller of two 64-bit unsigned integers.</span></span></summary>
        <returns><span data-ttu-id="cd119-493">Parametr <paramref name="val1" /> lub <paramref name="val2" />, w zależności od jest mniejsza.</span><span class="sxs-lookup"><span data-stu-id="cd119-493">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd119-494">W poniższym przykładzie pokazano sposób użycia <xref:System.Math.Min%2A> metody, aby wrócić i wyświetlić mniejszy z dwóch zmiennych.</span><span class="sxs-lookup"><span data-stu-id="cd119-494">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PI">
      <MemberSignature Language="C#" Value="public const double PI = 3.14159265358979;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float64 PI = (3.14159265358979)" />
      <MemberSignature Language="DocId" Value="F:System.Math.PI" />
      <MemberSignature Language="VB.NET" Value="Public Const PI As Double  = 3.14159265358979" />
      <MemberSignature Language="C++ CLI" Value="public: double PI = 3.14159265358979;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <MemberValue>3.14159265358979</MemberValue>
      <Docs>
        <summary><span data-ttu-id="cd119-495">Reprezentuje stosunek obwodu koło jego średnicy, określony przez wartość stałej, π.</span><span class="sxs-lookup"><span data-stu-id="cd119-495">Represents the ratio of the circumference of a circle to its diameter, specified by the constant, π.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd119-496">Wartość tego pola jest 3.14159265358979323846.</span><span class="sxs-lookup"><span data-stu-id="cd119-496">The value of this field is 3.14159265358979323846.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd119-497">W poniższym przykładzie użyto <xref:System.Math.PI> ułatwiających obliczenia wewnętrzny kąty danego Trapez.</span><span class="sxs-lookup"><span data-stu-id="cd119-497">The following example uses <xref:System.Math.PI> to assist in the computation of the inner angles of a given trapezoid.</span></span>  
  
 [!code-cpp[MathSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/MathSample/CPP/mathsample.cpp#1)]
 [!code-csharp[MathSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/MathSample/CS/mathsample.cs#1)]
 [!code-vb[MathSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MathSample/VB/mathsample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pow">
      <MemberSignature Language="C#" Value="public static double Pow (double x, double y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Pow(float64 x, float64 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Pow(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Pow (x As Double, y As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Pow(double x, double y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="cd119-498">Liczba zmiennoprzecinkowa podwójnej precyzji do podniesione do potęgi.</span><span class="sxs-lookup"><span data-stu-id="cd119-498">A double-precision floating-point number to be raised to a power.</span></span></param>
        <param name="y"><span data-ttu-id="cd119-499">Liczba zmiennoprzecinkowe podwójnej precyzji, która określa potęgi.</span><span class="sxs-lookup"><span data-stu-id="cd119-499">A double-precision floating-point number that specifies a power.</span></span></param>
        <summary><span data-ttu-id="cd119-500">Zwraca określoną liczbę podniesioną do wskazanej potęgi.</span><span class="sxs-lookup"><span data-stu-id="cd119-500">Returns a specified number raised to the specified power.</span></span></summary>
        <returns><span data-ttu-id="cd119-501">Liczba <paramref name="x" /> podniesionej do potęgi <paramref name="y" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-501">The number <paramref name="x" /> raised to the power <paramref name="y" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd119-502">W poniższej tabeli przedstawiono wartość zwracana, gdy określono dla różnych wartości lub wartości `x` i `y` parametrów.</span><span class="sxs-lookup"><span data-stu-id="cd119-502">The following table indicates the return value when various values or ranges of values are specified for the `x` and `y` parameters.</span></span> <span data-ttu-id="cd119-503">Aby uzyskać więcej informacji, zobacz <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, i <xref:System.Double.NaN?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="cd119-503">For more information, see <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, and <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span>  
  
|<span data-ttu-id="cd119-504">Parametry</span><span class="sxs-lookup"><span data-stu-id="cd119-504">Parameters</span></span>|<span data-ttu-id="cd119-505">Wartość zwracana</span><span class="sxs-lookup"><span data-stu-id="cd119-505">Return value</span></span>|  
|----------------|------------------|  
|<span data-ttu-id="cd119-506">`x` lub `y`  =  `NaN`.</span><span class="sxs-lookup"><span data-stu-id="cd119-506">`x` or `y` = `NaN`.</span></span>|`NaN`|  
|<span data-ttu-id="cd119-507">`x` = Wszystkie wartości z wyjątkiem `NaN`; `y` = 0.</span><span class="sxs-lookup"><span data-stu-id="cd119-507">`x` = Any value except `NaN`; `y` = 0.</span></span>|<span data-ttu-id="cd119-508">1</span><span class="sxs-lookup"><span data-stu-id="cd119-508">1</span></span>|  
|<span data-ttu-id="cd119-509">`x` = `NegativeInfinity`; `y` < 0.</span><span class="sxs-lookup"><span data-stu-id="cd119-509">`x` = `NegativeInfinity`; `y` < 0.</span></span>|<span data-ttu-id="cd119-510">0</span><span class="sxs-lookup"><span data-stu-id="cd119-510">0</span></span>|  
|<span data-ttu-id="cd119-511">`x` = `NegativeInfinity`; `y` jest nieparzysta dodatnią liczbą całkowitą.</span><span class="sxs-lookup"><span data-stu-id="cd119-511">`x` = `NegativeInfinity`; `y` is a positive odd integer.</span></span>|`NegativeInfinity`|  
|<span data-ttu-id="cd119-512">`x` = `NegativeInfinity`; `y` jest dodatnia, ale nie nieparzystą liczbą całkowitą.</span><span class="sxs-lookup"><span data-stu-id="cd119-512">`x` = `NegativeInfinity`; `y` is positive but not an odd integer.</span></span>|`PositiveInfinity`|  
|<span data-ttu-id="cd119-513">`x` < 0, ale nie `NegativeInfinity`; `y` nie jest liczbą całkowitą `NegativeInfinity`, lub `PositiveInfinity`.</span><span class="sxs-lookup"><span data-stu-id="cd119-513">`x` < 0 but not `NegativeInfinity`; `y` is not an integer, `NegativeInfinity`, or `PositiveInfinity`.</span></span>|`NaN`|  
|<span data-ttu-id="cd119-514">`x` = -1; `y`  =  `NegativeInfinity` lub `PositiveInfinity`.</span><span class="sxs-lookup"><span data-stu-id="cd119-514">`x` = -1; `y` = `NegativeInfinity` or `PositiveInfinity`.</span></span>|`NaN`|  
|<span data-ttu-id="cd119-515">-1 < `x` < 1; `y` = `NegativeInfinity`.</span><span class="sxs-lookup"><span data-stu-id="cd119-515">-1 < `x` < 1; `y` = `NegativeInfinity`.</span></span>|`PositiveInfinity`|  
|<span data-ttu-id="cd119-516">-1 < `x` < 1; `y` = `PositiveInfinity`.</span><span class="sxs-lookup"><span data-stu-id="cd119-516">-1 < `x` < 1; `y` = `PositiveInfinity`.</span></span>|<span data-ttu-id="cd119-517">0</span><span class="sxs-lookup"><span data-stu-id="cd119-517">0</span></span>|  
|<span data-ttu-id="cd119-518">`x` < wartość -1 lub `x` > 1; `y` = `NegativeInfinity`.</span><span class="sxs-lookup"><span data-stu-id="cd119-518">`x` < -1 or `x` > 1; `y` = `NegativeInfinity`.</span></span>|<span data-ttu-id="cd119-519">0</span><span class="sxs-lookup"><span data-stu-id="cd119-519">0</span></span>|  
|<span data-ttu-id="cd119-520">`x` < wartość -1 lub `x` > 1; `y` = `PositiveInfinity`.</span><span class="sxs-lookup"><span data-stu-id="cd119-520">`x` < -1 or `x` > 1; `y` = `PositiveInfinity`.</span></span>|`PositiveInfinity`|  
|<span data-ttu-id="cd119-521">`x` = 0; `y` < 0.</span><span class="sxs-lookup"><span data-stu-id="cd119-521">`x` = 0; `y` < 0.</span></span>|`PositiveInfinity`|  
|<span data-ttu-id="cd119-522">`x` = 0; `y` > 0.</span><span class="sxs-lookup"><span data-stu-id="cd119-522">`x` = 0; `y` > 0.</span></span>|<span data-ttu-id="cd119-523">0</span><span class="sxs-lookup"><span data-stu-id="cd119-523">0</span></span>|  
|<span data-ttu-id="cd119-524">`x` = 1; `y` jest dowolną wartością, z wyjątkiem `NaN`.</span><span class="sxs-lookup"><span data-stu-id="cd119-524">`x` = 1; `y` is any value except `NaN`.</span></span>|<span data-ttu-id="cd119-525">1</span><span class="sxs-lookup"><span data-stu-id="cd119-525">1</span></span>|  
|<span data-ttu-id="cd119-526">`x` = `PositiveInfinity`; `y` < 0.</span><span class="sxs-lookup"><span data-stu-id="cd119-526">`x` = `PositiveInfinity`; `y` < 0.</span></span>|<span data-ttu-id="cd119-527">0</span><span class="sxs-lookup"><span data-stu-id="cd119-527">0</span></span>|  
|<span data-ttu-id="cd119-528">`x` = `PositiveInfinity`; `y` > 0.</span><span class="sxs-lookup"><span data-stu-id="cd119-528">`x` = `PositiveInfinity`; `y` > 0.</span></span>|`PositiveInfinity`|  
  
   
  
## Examples  
 <span data-ttu-id="cd119-529">W poniższym przykładzie użyto <xref:System.Math.Pow%2A> metody do obliczenia wartości będące wynikiem wywoływanie 2 do potęgi od 0 do 32.</span><span class="sxs-lookup"><span data-stu-id="cd119-529">The following example uses the <xref:System.Math.Pow%2A> method to calculate the value that results from raising 2 to a power ranging from 0 to 32.</span></span>  
  
 [!code-csharp[System.Math.Pow#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.pow/cs/pow1.cs#1)]
 [!code-vb[System.Math.Pow#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.pow/vb/pow1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Sqrt(System.Double)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Round">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cd119-530">Zaokrągla wartość do najbliższej liczby całkowitej lub do określonej liczby cyfr ułamkowych.</span><span class="sxs-lookup"><span data-stu-id="cd119-530">Rounds a value to the nearest integer or to the specified number of fractional digits.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd119-531">W tej sekcji:</span><span class="sxs-lookup"><span data-stu-id="cd119-531">In this section:</span></span>  
  
 <span data-ttu-id="cd119-532">[Przeciążona metoda składni](#Syntax) </span><span class="sxs-lookup"><span data-stu-id="cd119-532">[Overloaded method syntax](#Syntax) </span></span>  
 <span data-ttu-id="cd119-533">[Parametry](#Params) </span><span class="sxs-lookup"><span data-stu-id="cd119-533">[Parameters](#Params) </span></span>  
 <span data-ttu-id="cd119-534">[Wartość zwracana](#Returns) </span><span class="sxs-lookup"><span data-stu-id="cd119-534">[Return value](#Returns) </span></span>  
 <span data-ttu-id="cd119-535">[Wyjątki](#Exceptions) </span><span class="sxs-lookup"><span data-stu-id="cd119-535">[Exceptions](#Exceptions) </span></span>  
 <span data-ttu-id="cd119-536">[Która metoda zostanie wywołana?](#Tasks) </span><span class="sxs-lookup"><span data-stu-id="cd119-536">[Which method do I call?](#Tasks) </span></span>  
 <span data-ttu-id="cd119-537">[Środkowy wartości i konwencje zaokrąglania](#Midpoint) </span><span class="sxs-lookup"><span data-stu-id="cd119-537">[Midpoint values and rounding conventions](#Midpoint) </span></span>  
 <span data-ttu-id="cd119-538">[Zaokrąglanie i dokładność](#Precision) </span><span class="sxs-lookup"><span data-stu-id="cd119-538">[Rounding and precision](#Precision) </span></span>  
 <span data-ttu-id="cd119-539">[Zaokrąglania i pojedynczej precyzji wartości zmiennoprzecinkowych](#Single) </span><span class="sxs-lookup"><span data-stu-id="cd119-539">[Rounding and single-precision floating-point values](#Single) </span></span>  
 <span data-ttu-id="cd119-540">Przykłady:</span><span class="sxs-lookup"><span data-stu-id="cd119-540">Examples:</span></span>   
 [<span data-ttu-id="cd119-541">Math.Round(Decimal)</span><span class="sxs-lookup"><span data-stu-id="cd119-541">Math.Round(Decimal)</span></span>](#Round1_Example)  
 [<span data-ttu-id="cd119-542">Math.Round(Double)</span><span class="sxs-lookup"><span data-stu-id="cd119-542">Math.Round(Double)</span></span>](#Round2_Example)  
 [<span data-ttu-id="cd119-543">Math.round — (dziesiętna, Int32)</span><span class="sxs-lookup"><span data-stu-id="cd119-543">Math.Round(Decimal, Int32)</span></span>](#Round3_Example)  
 [<span data-ttu-id="cd119-544">Math.round — (dziesiętna, MidpointRounding)</span><span class="sxs-lookup"><span data-stu-id="cd119-544">Math.Round(Decimal, MidpointRounding)</span></span>](#Round4_Example)  
 [<span data-ttu-id="cd119-545">Math.round — (o podwójnej precyzji, Int32)</span><span class="sxs-lookup"><span data-stu-id="cd119-545">Math.Round(Double, Int32)</span></span>](#Round5_Example)  
 [<span data-ttu-id="cd119-546">Math.round — (o podwójnej precyzji, MidpointRounding)</span><span class="sxs-lookup"><span data-stu-id="cd119-546">Math.Round(Double, MidpointRounding)</span></span>](#Round6_Example)  
 [<span data-ttu-id="cd119-547">Math.round — (Decimal, Int32, MidpointRounding)</span><span class="sxs-lookup"><span data-stu-id="cd119-547">Math.Round(Decimal, Int32, MidpointRounding)</span></span>](#Round7_Example)  
 [<span data-ttu-id="cd119-548">Math.round — (MidpointRounding o podwójnej precyzji, Int32)</span><span class="sxs-lookup"><span data-stu-id="cd119-548">Math.Round(Double, Int32, MidpointRounding)</span></span>](#Round8_Example)  
[<span data-ttu-id="cd119-549">Informacje o wersji</span><span class="sxs-lookup"><span data-stu-id="cd119-549">Version information</span></span>](#Round_Versions)  
  
<a name="Syntax"></a>   
## <a name="overloaded-method-syntax"></a><span data-ttu-id="cd119-550">Przeciążona metoda składni</span><span class="sxs-lookup"><span data-stu-id="cd119-550">Overloaded method syntax</span></span>  
 <span data-ttu-id="cd119-551">Aby uzyskać dodatkowe wskazówki dotyczące wybierania przeciążenia, zobacz [która metoda zostanie wywołana?](#Tasks)</span><span class="sxs-lookup"><span data-stu-id="cd119-551">For additional guidance on choosing an overload, see [Which method do I call?](#Tasks)</span></span>  
  
 <span data-ttu-id="cd119-552">`Decimal Math.Round(Decimal` `d` `)`</span><span class="sxs-lookup"><span data-stu-id="cd119-552">`Decimal Math.Round(Decimal` `d` `)`</span></span>  
 <span data-ttu-id="cd119-553">Powoduje zaokrąglenie do najbliższej liczby całkowitej wartości dziesiętnej, a punkt środkowy Zaokrągla do najbliższej parzystej liczby ([przykład](#Round1_Example)).</span><span class="sxs-lookup"><span data-stu-id="cd119-553">Rounds a decimal value to the nearest integer, and rounds midpoint values to the nearest even number ([example](#Round1_Example)).</span></span>  
  
 <span data-ttu-id="cd119-554">`Double Math.Round(Double` `a` `)`</span><span class="sxs-lookup"><span data-stu-id="cd119-554">`Double Math.Round(Double` `a` `)`</span></span>  
 <span data-ttu-id="cd119-555">Zaokrągla wartość zmiennoprzecinkową podwójnej precyzji dla najbliższej liczby całkowitej i zaokrągla środkowego do najbliższej parzystej liczby ([przykład](#Round2_Example)).</span><span class="sxs-lookup"><span data-stu-id="cd119-555">Rounds a double-precision floating-point value to the nearest integer, and rounds midpoint values to the nearest even number ([example](#Round2_Example)).</span></span>  
  
 <span data-ttu-id="cd119-556">`Decimal Math.Round(Decimal` `d` `, Int32`  `decimals` `)`</span><span class="sxs-lookup"><span data-stu-id="cd119-556">`Decimal Math.Round(Decimal` `d` `, Int32`  `decimals` `)`</span></span>  
 <span data-ttu-id="cd119-557">Zaokrągla wartość dziesiętną do określonej liczby cyfr ułamkowych i zaokrągla środkowego do najbliższej parzystej liczby ([przykład](#Round3_Example)).</span><span class="sxs-lookup"><span data-stu-id="cd119-557">Rounds a decimal value to a specified number of fractional digits, and rounds midpoint values to the nearest even number ([example](#Round3_Example)).</span></span>  
  
 <span data-ttu-id="cd119-558">`Double Math.Round(Double` `value` `, Int32`  `digits` `)`</span><span class="sxs-lookup"><span data-stu-id="cd119-558">`Double Math.Round(Double` `value` `, Int32`  `digits` `)`</span></span>  
 <span data-ttu-id="cd119-559">Zaokrągla liczbę do określonej liczby cyfr ułamkowych wartości zmiennoprzecinkowej podwójnej precyzji i zaokrągla środkowego do najbliższej parzystej liczby ([przykład](#Round4_Example)).</span><span class="sxs-lookup"><span data-stu-id="cd119-559">Rounds a double-precision floating-point value to a specified number of fractional digits, and rounds midpoint values to the nearest even number ([example](#Round4_Example)).</span></span>  
  
 <span data-ttu-id="cd119-560">`Decimal Math.Round(Decimal` `d` `, MidpointRounding`  `mode` `)`</span><span class="sxs-lookup"><span data-stu-id="cd119-560">`Decimal Math.Round(Decimal` `d` `, MidpointRounding`  `mode` `)`</span></span>  
 <span data-ttu-id="cd119-561">Powoduje zaokrąglenie do najbliższej liczby całkowitej wartość dziesiętna i używa konwencji zaokrąglania określonej wartości punkt środkowy ([przykład](#Round5_Example)).</span><span class="sxs-lookup"><span data-stu-id="cd119-561">Rounds a decimal value to the nearest integer, and uses the specified rounding convention for midpoint values ([example](#Round5_Example)).</span></span>  
  
 <span data-ttu-id="cd119-562">`Double Math.Round(Double` `value` `, MidpointRounding`  `mode` `)`</span><span class="sxs-lookup"><span data-stu-id="cd119-562">`Double Math.Round(Double` `value` `, MidpointRounding`  `mode` `)`</span></span>  
 <span data-ttu-id="cd119-563">Zaokrągla wartość zmiennoprzecinkową podwójnej precyzji dla najbliższej liczby całkowitej i używa konwencji zaokrąglania określonej wartości punkt środkowy ([przykład](#Round6_Example)).</span><span class="sxs-lookup"><span data-stu-id="cd119-563">Rounds a double-precision floating-point value to the nearest integer, and uses the specified rounding convention for midpoint values ([example](#Round6_Example)).</span></span>  
  
 <span data-ttu-id="cd119-564">`Decimal Math.Round(Decimal` `d` `, Int32`  `decimals` `, MidpointRounding`  `mode` `)`</span><span class="sxs-lookup"><span data-stu-id="cd119-564">`Decimal Math.Round(Decimal` `d` `, Int32`  `decimals` `, MidpointRounding`  `mode` `)`</span></span>  
 <span data-ttu-id="cd119-565">Zaokrągla wartość dziesiętną do określonej liczby cyfr ułamkowych i używa konwencji zaokrąglania określonej wartości punkt środkowy ([przykład](#Round7_Example)).</span><span class="sxs-lookup"><span data-stu-id="cd119-565">Rounds a decimal value to a specified number of fractional digits, and uses the specified rounding convention for midpoint values ([example](#Round7_Example)).</span></span>  
  
 <span data-ttu-id="cd119-566">`Double Math.Round(Double` `value` `, Int32`  `digits` `, MidpointRounding`  `mode` `)`</span><span class="sxs-lookup"><span data-stu-id="cd119-566">`Double Math.Round(Double` `value` `, Int32`  `digits` `, MidpointRounding`  `mode` `)`</span></span>  
 <span data-ttu-id="cd119-567">Zaokrągla liczbę do określonej liczby cyfr ułamkowych wartości zmiennoprzecinkowej podwójnej precyzji i używa konwencji zaokrąglania określonej wartości punkt środkowy ([przykład](#Round8_Example)).</span><span class="sxs-lookup"><span data-stu-id="cd119-567">Rounds a double-precision floating-point value to a specified number of fractional digits, and uses the specified rounding convention for midpoint values ([example](#Round8_Example)).</span></span>  
  
<a name="Params"></a>   
## <a name="parameters"></a><span data-ttu-id="cd119-568">Parametry</span><span class="sxs-lookup"><span data-stu-id="cd119-568">Parameters</span></span>  
 <span data-ttu-id="cd119-569">Jest to pełna lista parametrów <xref:System.Math.Round%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="cd119-569">This is a complete list of parameters for the <xref:System.Math.Round%2A> method.</span></span> <span data-ttu-id="cd119-570">Dla parametrów używanych przez każde przeciążenie, zobacz powyżej temat dotyczący składni przeciążenia.</span><span class="sxs-lookup"><span data-stu-id="cd119-570">For the parameters used by each overload, see the overload syntax above.</span></span>  
  
|<span data-ttu-id="cd119-571">Parametr</span><span class="sxs-lookup"><span data-stu-id="cd119-571">Parameter</span></span>|<span data-ttu-id="cd119-572">Typ</span><span class="sxs-lookup"><span data-stu-id="cd119-572">Type</span></span>|<span data-ttu-id="cd119-573">Opis</span><span class="sxs-lookup"><span data-stu-id="cd119-573">Description</span></span>|  
|---------------|----------|-----------------|  
|`d`|<xref:System.Decimal>|<span data-ttu-id="cd119-574">Liczbę do zaokrąglenia.</span><span class="sxs-lookup"><span data-stu-id="cd119-574">A number to be rounded.</span></span>|  
|`a`<br /><br /> <span data-ttu-id="cd119-575">—lub—</span><span class="sxs-lookup"><span data-stu-id="cd119-575">-or-</span></span><br /><br /> `value`|<xref:System.Double>|<span data-ttu-id="cd119-576">Liczba zmiennoprzecinkowa podwójnej precyzji, która ma zostać zaokrąglona.</span><span class="sxs-lookup"><span data-stu-id="cd119-576">A double-precision floating-point number to be rounded.</span></span>|  
|`decimals`<br /><br /> <span data-ttu-id="cd119-577">—lub—</span><span class="sxs-lookup"><span data-stu-id="cd119-577">-or-</span></span><br /><br /> `digits`|<xref:System.Int32>|<span data-ttu-id="cd119-578">Liczba cyfr ułamkowych w wartości zwracanej.</span><span class="sxs-lookup"><span data-stu-id="cd119-578">The number of fractional digits in the return value.</span></span> <span data-ttu-id="cd119-579">Aby uzyskać <xref:System.Decimal> wartości, go może należeć do zakresu od 0 do 28.</span><span class="sxs-lookup"><span data-stu-id="cd119-579">For <xref:System.Decimal> values, it can range from 0 to 28.</span></span> <span data-ttu-id="cd119-580">Aby uzyskać <xref:System.Double> wartości, go może należeć do zakresu od 0 do 15.</span><span class="sxs-lookup"><span data-stu-id="cd119-580">For <xref:System.Double> values, it can range from 0 to 15.</span></span> <span data-ttu-id="cd119-581">Należy pamiętać, że 15 jest maksymalna liczba cyfr z zaokrągleń obsługiwane przez <xref:System.Double> typu.</span><span class="sxs-lookup"><span data-stu-id="cd119-581">Note that 15 is the maximum number of integral and fractional digits supported by the <xref:System.Double> type.</span></span><br /><br /> <span data-ttu-id="cd119-582">Wartość domyślna: 0, co powoduje zaokrąglenie do liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="cd119-582">Default value: 0, which rounds to an integer</span></span>|  
|`mode`|<xref:System.MidpointRounding>|<span data-ttu-id="cd119-583">Flaga określająca Konwencji do użycia na potrzeby zaokrąglania środkowego wartości.</span><span class="sxs-lookup"><span data-stu-id="cd119-583">A flag that specifies the convention to use for rounding midpoint values.</span></span> <span data-ttu-id="cd119-584">Zobacz [wartości punkt środkowy i konwencje zaokrąglania](#Midpoint).</span><span class="sxs-lookup"><span data-stu-id="cd119-584">See [Midpoint values and rounding conventions](#Midpoint).</span></span><br /><br /> <span data-ttu-id="cd119-585">Wartość domyślna: <xref:System.MidpointRounding.ToEven?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="cd119-585">Default value: <xref:System.MidpointRounding.ToEven?displayProperty=nameWithType></span></span>|  
  
<a name="Returns"></a>   
## <a name="return-value"></a><span data-ttu-id="cd119-586">Wartość zwracana</span><span class="sxs-lookup"><span data-stu-id="cd119-586">Return value</span></span>  
 <span data-ttu-id="cd119-587">Typ: <xref:System.Decimal> lub <xref:System.Double>, w zależności od typu wartości, które ma zostać zaokrąglona.</span><span class="sxs-lookup"><span data-stu-id="cd119-587">Type: <xref:System.Decimal> or <xref:System.Double>, depending on the type of the value to be rounded.</span></span>   
<span data-ttu-id="cd119-588">Wartość numeryczna tego samego typu co `d`, `a`, lub `value`, ale zaokrąglone do liczby całkowitej lub do określonej liczby miejsc po przecinku.</span><span class="sxs-lookup"><span data-stu-id="cd119-588">A numeric value of the same type as `d`, `a`, or `value`, but rounded either to an integer or to the specified number of decimal digits.</span></span> <span data-ttu-id="cd119-589">Zobacz [wartości punkt środkowy i konwencje zaokrąglania](#Midpoint) informacji o zaokrąglanie liczb z wartościami środkową.</span><span class="sxs-lookup"><span data-stu-id="cd119-589">See [Midpoint values and rounding conventions](#Midpoint) for information about rounding numbers with midpoint values.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="cd119-590">Gdy zaokrąglanie wartości punkt środkowy, algorytm zaokrąglania wykonuje testu równości.</span><span class="sxs-lookup"><span data-stu-id="cd119-590">When rounding midpoint values, the rounding algorithm performs an equality test.</span></span> <span data-ttu-id="cd119-591">Z powodu problemów binarna reprezentacja i dokładność format liczb zmiennoprzecinkowych może być nieoczekiwane wartość zwrócona przez metodę.</span><span class="sxs-lookup"><span data-stu-id="cd119-591">Because of problems of binary representation and precision in the floating-point format, the value returned by the method can be unexpected.</span></span> <span data-ttu-id="cd119-592">Aby uzyskać więcej informacji, zobacz [zaokrąglanie i dokładność](#Precision).</span><span class="sxs-lookup"><span data-stu-id="cd119-592">For more information, see [Rounding and precision](#Precision).</span></span>  
  
 <span data-ttu-id="cd119-593">Jeśli przeciążenia z <xref:System.Double> parametru jest wywoływana z <xref:System.Double.NaN?displayProperty=nameWithType>, metoda zwraca <xref:System.Double.NaN?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="cd119-593">If an overload with a <xref:System.Double> parameter is called with <xref:System.Double.NaN?displayProperty=nameWithType>, the method returns <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span> <span data-ttu-id="cd119-594">Jeśli zostanie wywołany z <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> lub <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, metoda zwraca <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> lub <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>odpowiednio.</span><span class="sxs-lookup"><span data-stu-id="cd119-594">If it is called with <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, the method returns <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, respectively.</span></span>  
  
<a name="Exceptions"></a>   
## <a name="exceptions"></a><span data-ttu-id="cd119-595">Wyjątki</span><span class="sxs-lookup"><span data-stu-id="cd119-595">Exceptions</span></span>  
  
|<span data-ttu-id="cd119-596">Wyjątek</span><span class="sxs-lookup"><span data-stu-id="cd119-596">Exception</span></span>|<span data-ttu-id="cd119-597">Warunek</span><span class="sxs-lookup"><span data-stu-id="cd119-597">Condition</span></span>|<span data-ttu-id="cd119-598">Generowane przez</span><span class="sxs-lookup"><span data-stu-id="cd119-598">Thrown by</span></span>|  
|---------------|---------------|---------------|  
|<xref:System.OverflowException>|<span data-ttu-id="cd119-599">Wynik jest poza zakresem <xref:System.Decimal> typu.</span><span class="sxs-lookup"><span data-stu-id="cd119-599">The result is outside the range of the <xref:System.Decimal> type.</span></span>|<xref:System.Math.Round%28System.Decimal%29><br /><br /> <xref:System.Math.Round%28System.Decimal%2CSystem.Int32%29><br /><br /> <xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29><br /><br /> <xref:System.Math.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29>|  
|<xref:System.ArgumentOutOfRangeException>|<span data-ttu-id="cd119-600">`decimals` jest mniejsza niż 0 lub większą niż 28.</span><span class="sxs-lookup"><span data-stu-id="cd119-600">`decimals` is less than 0 or greater than 28.</span></span><br /><br /> <span data-ttu-id="cd119-601">—lub—</span><span class="sxs-lookup"><span data-stu-id="cd119-601">-or-</span></span><br /><br /> <span data-ttu-id="cd119-602">`digits` jest mniejsza niż 0 lub większą niż 15.</span><span class="sxs-lookup"><span data-stu-id="cd119-602">`digits` is less than 0 or greater than 15.</span></span>|<xref:System.Math.Round%28System.Decimal%2CSystem.Int32%29><br /><br /> <xref:System.Math.Round%28System.Double%2CSystem.Int32%29><br /><br /> <xref:System.Math.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29><br /><br /> <xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29>|  
|<xref:System.ArgumentException>|<span data-ttu-id="cd119-603">`mode` nie jest prawidłową wartością <xref:System.MidpointRounding>.</span><span class="sxs-lookup"><span data-stu-id="cd119-603">`mode` is not a valid value of <xref:System.MidpointRounding>.</span></span>|<xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29><br /><br /> <xref:System.Math.Round%28System.Double%2CSystem.MidpointRounding%29><br /><br /> <xref:System.Math.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29><br /><br /> <xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29>|  
  
<a name="Tasks"></a>   
## <a name="which-method-do-i-call"></a><span data-ttu-id="cd119-604">Jaką metodę wywołać?</span><span class="sxs-lookup"><span data-stu-id="cd119-604">Which method do I call?</span></span>  
  
|<span data-ttu-id="cd119-605">Do</span><span class="sxs-lookup"><span data-stu-id="cd119-605">To</span></span>|<span data-ttu-id="cd119-606">Wywołania</span><span class="sxs-lookup"><span data-stu-id="cd119-606">Call</span></span>|  
|--------|----------|  
|<span data-ttu-id="cd119-607">Zaokrągla liczbę do wartości całkowitej przy użyciu zaokrąglenie do najbliższej Konwencji.</span><span class="sxs-lookup"><span data-stu-id="cd119-607">Round a number to an integer by using the rounding to nearest convention.</span></span>|<xref:System.Math.Round%28System.Decimal%29><br /><br /> <span data-ttu-id="cd119-608">—lub—</span><span class="sxs-lookup"><span data-stu-id="cd119-608">-or-</span></span><br /><br /> <xref:System.Math.Round%28System.Double%29>|  
|<span data-ttu-id="cd119-609">Zaokrąglij liczbę na liczbę całkowitą przy użyciu określonej zaokrąglania Konwencji.</span><span class="sxs-lookup"><span data-stu-id="cd119-609">Round a number to an integer by using a specified rounding convention.</span></span>|<xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29><br /><br /> <span data-ttu-id="cd119-610">—lub—</span><span class="sxs-lookup"><span data-stu-id="cd119-610">-or-</span></span><br /><br /> <xref:System.Math.Round%28System.Double%2CSystem.MidpointRounding%29>|  
|<span data-ttu-id="cd119-611">Zaokrągla liczbę do określonej liczby cyfr ułamkowych przy użyciu zaokrąglenie do najbliższej Konwencji.</span><span class="sxs-lookup"><span data-stu-id="cd119-611">Round a number to a specified number of fractional digits by using the rounding to nearest convention.</span></span>|<xref:System.Math.Round%28System.Decimal%2CSystem.Int32%29><br /><br /> <span data-ttu-id="cd119-612">—lub—</span><span class="sxs-lookup"><span data-stu-id="cd119-612">-or-</span></span><br /><br /> <xref:System.Math.Round%28System.Double%2CSystem.Int32%29>|  
|<span data-ttu-id="cd119-613">Zaokrąglij liczbę do określonej liczby cyfr ułamkowych przy użyciu określonej zaokrąglania Konwencji.</span><span class="sxs-lookup"><span data-stu-id="cd119-613">Round a number to a specified number of fractional digits by using a specified rounding convention.</span></span>|<xref:System.Math.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29><br /><br /> <span data-ttu-id="cd119-614">—lub—</span><span class="sxs-lookup"><span data-stu-id="cd119-614">-or-</span></span><br /><br /> <xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29>|  
|<span data-ttu-id="cd119-615">ROUND <xref:System.Single> wartości do określonej liczby cyfr ułamkowych przy użyciu określonego zaokrąglania Konwencji i minimalizując utratę dokładności.</span><span class="sxs-lookup"><span data-stu-id="cd119-615">Round a <xref:System.Single> value to a specified number of fractional digits by using a specified rounding convention and minimizing the loss of precision.</span></span>|<span data-ttu-id="cd119-616">Konwertuj <xref:System.Single> do <xref:System.Decimal> i Wywołaj <xref:System.Math.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29>.</span><span class="sxs-lookup"><span data-stu-id="cd119-616">Convert the <xref:System.Single> to a <xref:System.Decimal> and call <xref:System.Math.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29>.</span></span>|  
|<span data-ttu-id="cd119-617">Zaokrągla liczbę do określonej liczby cyfr ułamkowych przy jednoczesnym zmniejszeniu problemów dokładności zaokrąglania środkowego wartości.</span><span class="sxs-lookup"><span data-stu-id="cd119-617">Round a number to a specified number of fractional digits while minimizing problems of precision in rounding midpoint values.</span></span>|<span data-ttu-id="cd119-618">Wywołaj metodę zaokrąglania, która implementuje porównania "większe niż lub równa około".</span><span class="sxs-lookup"><span data-stu-id="cd119-618">Call a rounding method that implements a "greater than or approximately equal to" comparison.</span></span> <span data-ttu-id="cd119-619">Zobacz [zaokrąglanie i dokładność](#Precision).</span><span class="sxs-lookup"><span data-stu-id="cd119-619">See [Rounding and precision](#Precision).</span></span>|  
|<span data-ttu-id="cd119-620">Zaokrąglij wartość ułamkową, na liczbę całkowitą, która jest większa niż wartość ułamkową.</span><span class="sxs-lookup"><span data-stu-id="cd119-620">Round a fractional value to an integer that is greater than the fractional value.</span></span> <span data-ttu-id="cd119-621">Na przykład okrągłe 3.1 do 4.</span><span class="sxs-lookup"><span data-stu-id="cd119-621">For example, round 3.1 to 4.</span></span>|<xref:System.Math.Ceiling%2A>|  
|<span data-ttu-id="cd119-622">Zaokrąglij wartość ułamkową, na liczbę całkowitą jest mniejsza niż wartość ułamkową.</span><span class="sxs-lookup"><span data-stu-id="cd119-622">Round a fractional value to an integer that is less than the fractional value.</span></span> <span data-ttu-id="cd119-623">Na przykład okrągłe 3.9 do 3.</span><span class="sxs-lookup"><span data-stu-id="cd119-623">For example, round 3.9 to 3.</span></span>|<xref:System.Math.Floor%2A>|  
  
<a name="Midpoint"></a>   
## <a name="midpoint-values-and-rounding-conventions"></a><span data-ttu-id="cd119-624">Wartości punktu środkowego i konwencje zaokrąglania</span><span class="sxs-lookup"><span data-stu-id="cd119-624">Midpoint values and rounding conventions</span></span>  
 <span data-ttu-id="cd119-625">Zaokrąglanie polega na konwertowaniu wartość liczbową z dokładnością do określonej do najbliższej wartości z mniej dokładności.</span><span class="sxs-lookup"><span data-stu-id="cd119-625">Rounding involves converting a numeric value with a specified precision to the nearest value with less precision.</span></span> <span data-ttu-id="cd119-626">Na przykład można użyć <xref:System.Math.Round%28System.Double%29> metody zostać zaokrąglona wartość 3.4 do 3.0 i <xref:System.Math.Round%28System.Double%2CSystem.Int32%29> metody zostać zaokrąglona wartość 3,579 do 3.58.</span><span class="sxs-lookup"><span data-stu-id="cd119-626">For example, you can use the <xref:System.Math.Round%28System.Double%29> method to round a value of 3.4 to 3.0, and the <xref:System.Math.Round%28System.Double%2CSystem.Int32%29> method to round a value of 3.579 to 3.58.</span></span>  
  
 <span data-ttu-id="cd119-627">Wartość środkowego wartość po najmniej znaczący cyfr w wyniku jest dokładnie połowy między dwiema liczbami.</span><span class="sxs-lookup"><span data-stu-id="cd119-627">In a midpoint value, the value after the least significant digit in the result is precisely half way between two numbers.</span></span> <span data-ttu-id="cd119-628">Na przykład 3.47500 jest wartość punkt środkowy, jeśli ma zostać zaokrąglona dwoma miejscami dziesiętnymi, a 7.500 jest wartością środkową, jeśli jest zaokrąglana do liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="cd119-628">For example, 3.47500 is a midpoint value if it is to be rounded two decimal places, and 7.500 is a midpoint value if it is to be rounded to an integer.</span></span> <span data-ttu-id="cd119-629">W takich przypadkach najbliższej wartości nie można łatwo zidentyfikować bez konwencją zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="cd119-629">In these cases, the nearest value can't be easily identified without a rounding convention.</span></span>  
  
 <span data-ttu-id="cd119-630"><xref:System.Math.Round%2A> Metoda obsługuje dwa konwencje zaokrąglania obsługi środkowego wartości:</span><span class="sxs-lookup"><span data-stu-id="cd119-630">The <xref:System.Math.Round%2A> method supports two rounding conventions for handling midpoint values:</span></span>  
  
 <span data-ttu-id="cd119-631">**Zaokrąglanie w kierunku od zera.**</span><span class="sxs-lookup"><span data-stu-id="cd119-631">**Rounding away from zero**</span></span>  
 <span data-ttu-id="cd119-632">Środkowy wartości są zaokrąglane do następnej liczby w kierunku od zera.</span><span class="sxs-lookup"><span data-stu-id="cd119-632">Midpoint values are rounded to the next number away from zero.</span></span> <span data-ttu-id="cd119-633">Na przykład 3,75 powoduje zaokrąglenie do 3.8, 3.85 zaokrąglenie do 3.9,-3.75 powoduje zaokrąglenie do-3.8, i-3.85 powoduje zaokrąglenie do-3.9.</span><span class="sxs-lookup"><span data-stu-id="cd119-633">For example, 3.75 rounds to 3.8, 3.85 rounds to 3.9, -3.75 rounds to -3.8, and -3.85 rounds to -3.9.</span></span> <span data-ttu-id="cd119-634">Ten formularz zaokrąglania jest reprezentowana przez <xref:System.MidpointRounding.AwayFromZero?displayProperty=nameWithType> element członkowski wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="cd119-634">This form of rounding is represented by the <xref:System.MidpointRounding.AwayFromZero?displayProperty=nameWithType> enumeration member.</span></span>  
  
 <span data-ttu-id="cd119-635">Zaokrąglanie w kierunku od zera jest powszechnie znane formularza zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="cd119-635">Rounding away from zero is the most widely known form of rounding.</span></span>  
  
 <span data-ttu-id="cd119-636">**Zaokrąglenie do najbliższej lub zaokrąglenie kwot**</span><span class="sxs-lookup"><span data-stu-id="cd119-636">**Rounding to nearest, or banker's rounding**</span></span>  
 <span data-ttu-id="cd119-637">Środkowy wartości są zaokrąglane do najbliższej parzystej liczby.</span><span class="sxs-lookup"><span data-stu-id="cd119-637">Midpoint values are rounded to the nearest even number.</span></span> <span data-ttu-id="cd119-638">Na przykład zarówno 3,75 i 3.85 zaokrąglona do 3.8, a jednocześnie-3.75 i-3.85 zaokrąglona do-3.8.</span><span class="sxs-lookup"><span data-stu-id="cd119-638">For example, both 3.75 and 3.85 round to 3.8, and both -3.75 and -3.85 round to -3.8.</span></span> <span data-ttu-id="cd119-639">Ten formularz zaokrąglania jest reprezentowana przez <xref:System.MidpointRounding.ToEven?displayProperty=nameWithType> element członkowski wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="cd119-639">This form of rounding is represented by the <xref:System.MidpointRounding.ToEven?displayProperty=nameWithType> enumeration member.</span></span>  
  
 <span data-ttu-id="cd119-640">Zaokrąglenie do najbliższej to standardowy formularz zaokrąglania w operacjach finansowych i statystycznych.</span><span class="sxs-lookup"><span data-stu-id="cd119-640">Rounding to nearest is the standard form of rounding used in financial and statistical operations.</span></span> <span data-ttu-id="cd119-641">Odpowiada 754 Standard IEEE, sekcji 4.</span><span class="sxs-lookup"><span data-stu-id="cd119-641">It conforms to IEEE Standard 754, section 4.</span></span> <span data-ttu-id="cd119-642">W wielu operacjach zaokrąglania powoduje zmniejszenie zaokrąglania błąd jest spowodowany przez spójnie zaokrąglanie wartości punkt środkowy w jednym kierunku.</span><span class="sxs-lookup"><span data-stu-id="cd119-642">When used in multiple rounding operations, it reduces the rounding error that is caused by consistently rounding midpoint values in a single direction.</span></span> <span data-ttu-id="cd119-643">W niektórych przypadkach może być istotne ten błąd zaokrąglania.</span><span class="sxs-lookup"><span data-stu-id="cd119-643">In some cases, this rounding error can be significant.</span></span>  
  
 <span data-ttu-id="cd119-644">Poniższy przykład przedstawia odchylenia, które mogą być wynikiem spójnie zaokrąglanie wartości punkt środkowy w jednym kierunku.</span><span class="sxs-lookup"><span data-stu-id="cd119-644">The following example illustrates the bias that can result from consistently rounding midpoint values in a single direction.</span></span> <span data-ttu-id="cd119-645">Przykład oblicza średnią wartość true tablicy <xref:System.Decimal> wartości, a następnie oblicza średnią po wartości w tablicy są zaokrąglane przy użyciu dwóch Konwencji.</span><span class="sxs-lookup"><span data-stu-id="cd119-645">The example computes the true mean of an array of <xref:System.Decimal> values, and then computes the mean when the values in the array are rounded by using the two conventions.</span></span> <span data-ttu-id="cd119-646">W tym przykładzie średnią wartość true i oznaczają, że gdy zaokrąglenie do najbliższej są takie same.</span><span class="sxs-lookup"><span data-stu-id="cd119-646">In this example, the true mean and the mean that results when rounding to nearest are the same.</span></span> <span data-ttu-id="cd119-647">Jednak oznaczają, że gdy zaokrąglania w kierunku od zera różni się o.05 (lub 3,6%) z średnią wartość true.</span><span class="sxs-lookup"><span data-stu-id="cd119-647">However, the mean that results when rounding away from zero differs by .05 (or by 3.6%) from the true mean.</span></span>  
  
 [!code-csharp[System.Math.Round.Overload#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/mean1.cs#2)]
 [!code-vb[System.Math.Round.Overload#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/mean1.vb#2)]  
  
 <span data-ttu-id="cd119-648">Domyślnie <xref:System.Math.Round%2A> metoda używa zaokrąglenie do najbliższej Konwencji.</span><span class="sxs-lookup"><span data-stu-id="cd119-648">By default, the <xref:System.Math.Round%2A> method uses the rounding to nearest convention.</span></span> <span data-ttu-id="cd119-649">W poniższej tabeli wymieniono przeciążeń <xref:System.Math.Round%2A> — metoda i zaokrąglania Konwencji każda używa.</span><span class="sxs-lookup"><span data-stu-id="cd119-649">The following table lists the overloads of the <xref:System.Math.Round%2A> method and the rounding convention that each uses.</span></span>  
  
|<span data-ttu-id="cd119-650">Przeciążenia</span><span class="sxs-lookup"><span data-stu-id="cd119-650">Overload</span></span>|<span data-ttu-id="cd119-651">Zaokrąglanie Konwencji</span><span class="sxs-lookup"><span data-stu-id="cd119-651">Rounding convention</span></span>|  
|--------------|-------------------------|  
|<xref:System.Math.Round%28System.Decimal%29>|<xref:System.MidpointRounding.ToEven>|  
|<xref:System.Math.Round%28System.Double%29>|<xref:System.MidpointRounding.ToEven>|  
|<xref:System.Math.Round%28System.Decimal%2CSystem.Int32%29>|<xref:System.MidpointRounding.ToEven>|  
|<xref:System.Math.Round%28System.Double%2CSystem.Int32%29>|<xref:System.MidpointRounding.ToEven>|  
|<xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29>|<span data-ttu-id="cd119-652">Ustaleniami `mode` parametru.</span><span class="sxs-lookup"><span data-stu-id="cd119-652">Determined by `mode` parameter.</span></span>|  
|<xref:System.Math.Round%28System.Double%2CSystem.MidpointRounding%29>|<span data-ttu-id="cd119-653">Ustaleniami `mode` parametru</span><span class="sxs-lookup"><span data-stu-id="cd119-653">Determined by `mode` parameter</span></span>|  
|<xref:System.Math.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29>|<span data-ttu-id="cd119-654">Ustaleniami `mode` parametru</span><span class="sxs-lookup"><span data-stu-id="cd119-654">Determined by `mode` parameter</span></span>|  
|<xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29>|<span data-ttu-id="cd119-655">Ustaleniami `mode` parametru</span><span class="sxs-lookup"><span data-stu-id="cd119-655">Determined by `mode` parameter</span></span>|  
  
<a name="Precision"></a>   
## <a name="rounding-and-precision"></a><span data-ttu-id="cd119-656">Zaokrąglenia i dokładność</span><span class="sxs-lookup"><span data-stu-id="cd119-656">Rounding and precision</span></span>  
 <span data-ttu-id="cd119-657">W celu ustalenia, czy operacja zaokrąglania obejmuje wartością środkową <xref:System.Math.Round%2A> metody mnoży oryginalna wartość ma zostać zaokrąglona przez 10<sup>n</sup>, gdzie *n* jest odpowiednią liczbę ułamkowych cyfr w zwracanej wartości, a następnie określa, czy pozostałej części ułamkowych wartość jest większa niż lub równa.5.</span><span class="sxs-lookup"><span data-stu-id="cd119-657">In order to determine whether a rounding operation involves a midpoint value, the <xref:System.Math.Round%2A> method multiplies the original value to be rounded by 10<sup>n</sup>, where *n* is the desired number of fractional digits in the return value, and then determines whether the remaining fractional portion of the value is greater than or equal to .5.</span></span> <span data-ttu-id="cd119-658">Jest to niewielkie zmiany w teście równości i jak opisano w sekcji "Testowania dla równości" <xref:System.Double> temat referencyjny testy równości z wartości zmiennoprzecinkowych mogą powodować problemy ze względu na format zmiennoprzecinkowy problemy z plikiem binarnym Reprezentacja i dokładność.</span><span class="sxs-lookup"><span data-stu-id="cd119-658">This is a slight variation on a test for equality, and as discussed in the "Testing for Equality" section of the <xref:System.Double> reference topic, tests for equality with floating-point values are problematic because of the floating-point format's issues with binary representation and precision.</span></span> <span data-ttu-id="cd119-659">Oznacza to, że wszystkie ułamkową część liczby, która może nieco przekraczać.5 (ze względu na zmniejszenie precyzji) nie są zaokrąglane w górę.</span><span class="sxs-lookup"><span data-stu-id="cd119-659">This means that any fractional portion of a number that is slightly less than .5 (because of a loss of precision) will not be rounded upward.</span></span>  
  
 <span data-ttu-id="cd119-660">Poniższy przykład ilustruje ten problem.</span><span class="sxs-lookup"><span data-stu-id="cd119-660">The following example illustrates the problem.</span></span> <span data-ttu-id="cd119-661">Wielokrotnie dodaje.1 do 11.0 i zaokrągla wynik do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="cd119-661">It repeatedly adds .1 to 11.0 and rounds the result to the nearest integer.</span></span> <span data-ttu-id="cd119-662">Niezależnie od konwencji zaokrąglania 11.5 powinien zaokrąglona do 12.</span><span class="sxs-lookup"><span data-stu-id="cd119-662">Regardless of the rounding convention, 11.5 should round to 12.</span></span> <span data-ttu-id="cd119-663">Jednak jako dane wyjściowe w przykładzie pokazano, nie.</span><span class="sxs-lookup"><span data-stu-id="cd119-663">However, as the output from the example shows, it does not.</span></span> <span data-ttu-id="cd119-664">W przykładzie użyto "R" [ciągu standardowego formatu liczbowego](~/docs/standard/base-types/standard-numeric-format-strings.md) do wyświetlenia zmiennoprzecinkowy pełnej dokładności wartości i pokazuje, że wartość ma zostać zaokrąglona utracił dokładności podczas powtarzane dodatków i jej wartość jest rzeczywiście 11.499999999999998.</span><span class="sxs-lookup"><span data-stu-id="cd119-664">The example uses the "R" [standard numeric format string](~/docs/standard/base-types/standard-numeric-format-strings.md) to display the floating point value's full precision, and shows that the value to be rounded has lost precision during repeated additions, and its value is actually 11.499999999999998.</span></span> <span data-ttu-id="cd119-665">Ponieważ.499999999999998 jest mniejsza niż.5, wartość nie jest zaokrąglana do następną największą liczbę całkowitą.</span><span class="sxs-lookup"><span data-stu-id="cd119-665">Because .499999999999998 is less than .5, the value is not rounded to the next highest integer.</span></span> <span data-ttu-id="cd119-666">Jako przykład przedstawiono również, ten problem nie występuje, jeśli firma Microsoft po prostu Przypisz wartości stałej 11.5 do <xref:System.Double> zmiennej.</span><span class="sxs-lookup"><span data-stu-id="cd119-666">As the example also shows, this problem does not occur if we simply assign the constant value 11.5 to a <xref:System.Double> variable.</span></span>  
  
 [!code-csharp[System.Math.Round.Overload#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/precision1.cs#7)]
 [!code-vb[System.Math.Round.Overload#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/precision1.vb#7)]  
  
 <span data-ttu-id="cd119-667">Problemy dokładności zaokrąglania środkowego wartości są najbardziej prawdopodobne w następujących warunkach:</span><span class="sxs-lookup"><span data-stu-id="cd119-667">Problems of precision in rounding midpoint values are most likely to arise in the following conditions:</span></span>  
  
-   <span data-ttu-id="cd119-668">Jeśli wartość ułamkową, nie można wyrazić dokładnie w formacie binarnym typie zmiennoprzecinkowym.</span><span class="sxs-lookup"><span data-stu-id="cd119-668">When a fractional value cannot be expressed precisely in the floating-point type's binary format.</span></span>  
  
-   <span data-ttu-id="cd119-669">Gdy ma zostać zaokrąglona wartość jest obliczana na podstawie jednego lub więcej operacji zmiennoprzecinkowych.</span><span class="sxs-lookup"><span data-stu-id="cd119-669">When the value to be rounded is calculated from one or more floating-point operations.</span></span>  
  
-   <span data-ttu-id="cd119-670">Gdy ustawiona wartość ma zostać zaokrąglona to <xref:System.Single> zamiast <xref:System.Double> lub <xref:System.Decimal>.</span><span class="sxs-lookup"><span data-stu-id="cd119-670">When the value to be rounded is a <xref:System.Single> rather than a <xref:System.Double> or <xref:System.Decimal>.</span></span> <span data-ttu-id="cd119-671">Aby uzyskać więcej informacji, zobacz następną sekcję, [zaokrąglanie i wartości zmiennoprzecinkowych pojedynczej precyzji](#Single).</span><span class="sxs-lookup"><span data-stu-id="cd119-671">For more information, see the next section, [Rounding and single-precision floating-point values](#Single).</span></span>  
  
 <span data-ttu-id="cd119-672">W przypadku braku dokładności zaokrąglając operacji problem należy wykonać następujące:</span><span class="sxs-lookup"><span data-stu-id="cd119-672">In cases where the lack of precision in rounding operations is problematic, you can do the following:</span></span>  
  
-   <span data-ttu-id="cd119-673">Jeśli zaokrąglania operacji wywołania przeciążenia, które zaokrągla <xref:System.Double> wartości, można zmienić <xref:System.Double> do <xref:System.Decimal> wartości i wywoływać przeciążenia zaokrągla <xref:System.Decimal> jest wartość.</span><span class="sxs-lookup"><span data-stu-id="cd119-673">If the rounding operation calls an overload that rounds a <xref:System.Double> value, you can change the <xref:System.Double> to a <xref:System.Decimal> value and call an overload that rounds a <xref:System.Decimal> value instead.</span></span> <span data-ttu-id="cd119-674">Mimo że <xref:System.Decimal> — typ danych ma również problemy z reprezentacji i zmniejszenie precyzji, te problemy występują znacznie mniej.</span><span class="sxs-lookup"><span data-stu-id="cd119-674">Although the <xref:System.Decimal> data type also has problems of representation and loss of precision, these issues are far less common.</span></span>  
  
-   <span data-ttu-id="cd119-675">Zdefiniuj niestandardowe algorytm zaokrąglania, który przeprowadza test "prawie równe", aby określić, czy wartość ma zostać zaokrąglona prawidłowo jest blisko wartości punkt środkowy.</span><span class="sxs-lookup"><span data-stu-id="cd119-675">Define a custom rounding algorithm that performs a "nearly equal" test to determine whether the value to be rounded is acceptably close to a midpoint value.</span></span> <span data-ttu-id="cd119-676">W poniższym przykładzie zdefiniowano `RoundApproximate` metodę, która sprawdza, czy wartość ułamkową jest wystarczająco blisko wartość środkowego podlegać zaokrąglania punkt środkowy.</span><span class="sxs-lookup"><span data-stu-id="cd119-676">The following example defines a `RoundApproximate` method that examines whether a fractional value is sufficiently near to a midpoint value to be subject to midpoint rounding.</span></span> <span data-ttu-id="cd119-677">Jak dane wyjściowe w przykładzie pokazano, rozwiązuje problem zaokrąglania w poprzednim przykładzie.</span><span class="sxs-lookup"><span data-stu-id="cd119-677">As the output from the example shows, it corrects the rounding problem shown in the previous example.</span></span>  
  
     [!code-csharp[System.Math.Round.Overload#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/precision2.cs#8)]
     [!code-vb[System.Math.Round.Overload#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/precision2.vb#8)]  
  
<a name="Single"></a>   
## <a name="rounding-and-single-precision-floating-point-values"></a><span data-ttu-id="cd119-678">Zaokrąglenia i pojedyncza precyzja wartości zmiennoprzecinkowych</span><span class="sxs-lookup"><span data-stu-id="cd119-678">Rounding and single-precision floating-point values</span></span>  
 <span data-ttu-id="cd119-679"><xref:System.Math.Round%2A> Metoda zawiera przeciążenia, które akceptują argumentów typu <xref:System.Decimal> i <xref:System.Double>.</span><span class="sxs-lookup"><span data-stu-id="cd119-679">The <xref:System.Math.Round%2A> method includes overloads that accept arguments of type <xref:System.Decimal> and <xref:System.Double>.</span></span> <span data-ttu-id="cd119-680">Metodami nie zaokrąglanie wartości typu <xref:System.Single>.</span><span class="sxs-lookup"><span data-stu-id="cd119-680">There are no methods that round values of type <xref:System.Single>.</span></span> <span data-ttu-id="cd119-681">W przypadku przekazania <xref:System.Single> wartość do jednego z przeciążeń <xref:System.Math.Round%2A> metody jest rzutowanie (C#) lub przekonwertować (w języku Visual Basic) <xref:System.Double>i odpowiadający mu <xref:System.Math.Round%2A> przeciążenia z <xref:System.Double> nosi nazwę parametru.</span><span class="sxs-lookup"><span data-stu-id="cd119-681">If you pass a <xref:System.Single> value to one of the overloads of the <xref:System.Math.Round%2A> method, it is cast (in C#) or converted (in Visual Basic) to a <xref:System.Double>, and the corresponding <xref:System.Math.Round%2A> overload with a <xref:System.Double> parameter is called.</span></span> <span data-ttu-id="cd119-682">Choć to konwersję rozszerzającą często spowodowałoby utratę dokładności, jak pokazano w poniższym przykładzie.</span><span class="sxs-lookup"><span data-stu-id="cd119-682">Although this is a widening conversion, it often involves a loss of precision, as the following example illustrates.</span></span> <span data-ttu-id="cd119-683">Gdy <xref:System.Single> wartość 16.325 jest przekazywana do <xref:System.Math.Round%2A> — metoda i zaokrąglona do dwóch miejsc po przecinku przy użyciu zaokrąglenie do najbliższej Konwencji, wynikiem jest wynik 16.33 i nie oczekiwano 16.32.</span><span class="sxs-lookup"><span data-stu-id="cd119-683">When a <xref:System.Single> value of 16.325 is passed to the <xref:System.Math.Round%2A> method and rounded to two decimal places using the rounding to nearest convention, the result is 16.33 and not the expected result of 16.32.</span></span>  
  
 [!code-csharp[System.Math.Round.Overload#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/single1.cs#1)]
 [!code-vb[System.Math.Round.Overload#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/single1.vb#1)]  
  
 <span data-ttu-id="cd119-684">Jest to nieoczekiwany wynik z powodu utraty dokładności konwersji <xref:System.Single> do wartości <xref:System.Double>.</span><span class="sxs-lookup"><span data-stu-id="cd119-684">This unexpected result is due to a loss of precision in the conversion of the <xref:System.Single> value to a <xref:System.Double>.</span></span> <span data-ttu-id="cd119-685">Ponieważ powstałe w ten sposób <xref:System.Double> wartość 16.325000762939453 nie jest wartością środkową i jest większy niż 16.325, jest zawsze zaokrąglona w górę.</span><span class="sxs-lookup"><span data-stu-id="cd119-685">Because the resulting <xref:System.Double> value of 16.325000762939453 is not a midpoint value and is greater than 16.325, it is always rounded upward.</span></span>  
  
 <span data-ttu-id="cd119-686">W wielu przypadkach, jak pokazano w przykładzie utratę dokładności można zminimalizowane lub usunięte przez rzutowania lub konwersji <xref:System.Single> do wartości <xref:System.Decimal>.</span><span class="sxs-lookup"><span data-stu-id="cd119-686">In many cases, as the example illustrates, the loss of precision can be minimized or eliminated by casting or converting the <xref:System.Single> value to a <xref:System.Decimal>.</span></span> <span data-ttu-id="cd119-687">Należy pamiętać, że, ponieważ jest to konwersji zawężającej, wymaga przy użyciu operatora rzutowania lub wywołanie metody konwersji.</span><span class="sxs-lookup"><span data-stu-id="cd119-687">Note that, because this is a narrowing conversion, it requires using a cast operator or calling a conversion method.</span></span>  
  
<a name="Round1_Example"></a>   
## <a name="mathrounddecimal-example"></a><span data-ttu-id="cd119-688">Przykład Math.Round(Decimal)</span><span class="sxs-lookup"><span data-stu-id="cd119-688">Math.Round(Decimal) example</span></span>  
 <span data-ttu-id="cd119-689">W poniższym przykładzie pokazano <xref:System.Math.Round%28System.Decimal%29> metody.</span><span class="sxs-lookup"><span data-stu-id="cd119-689">The following example demonstrates the <xref:System.Math.Round%28System.Decimal%29> method.</span></span> <span data-ttu-id="cd119-690">Należy pamiętać, że <xref:System.Decimal> wartość 4.5 powoduje zaokrąglenie do 4, a nie 5, ponieważ to przeciążenie używa domyślnej <xref:System.MidpointRounding.ToEven> Konwencji.</span><span class="sxs-lookup"><span data-stu-id="cd119-690">Note that the <xref:System.Decimal> value of 4.5 rounds to 4 rather than 5, because this overload uses the default <xref:System.MidpointRounding.ToEven> convention.</span></span>  
  
 [!code-csharp[System.Math.Round#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round/cs/rounddecimal1.cs#6)]
 [!code-vb[System.Math.Round#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round/vb/rounddecimal1.vb#6)]  
  
<a name="Round2_Example"></a>   
## <a name="mathrounddouble-example"></a><span data-ttu-id="cd119-691">Przykład Math.Round(Double)</span><span class="sxs-lookup"><span data-stu-id="cd119-691">Math.Round(Double) example</span></span>  
 <span data-ttu-id="cd119-692">W poniższym przykładzie pokazano zaokrąglenie do najbliższej wartości całkowitej.</span><span class="sxs-lookup"><span data-stu-id="cd119-692">The following example demonstrates rounding to the nearest integer value.</span></span>  
  
 [!code-cpp[Classic Math.Round Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Math.Round Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Math.Round Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Math.Round Example/CS/source.cs#1)]
 [!code-vb[Classic Math.Round Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Math.Round Example/VB/source.vb#1)]  
  
<a name="Round3_Example"></a>   
## <a name="mathrounddecimal-int32-example"></a><span data-ttu-id="cd119-693">Przykład Math.Round (Decimal, Int32)</span><span class="sxs-lookup"><span data-stu-id="cd119-693">Math.Round(Decimal, Int32) example</span></span>  
 <span data-ttu-id="cd119-694">Poniższy przykład powoduje zaokrąglenie wartości dziesiętnych z dwóch cyfr ułamkowych do wartości, które mają pojedynczą cyfrą ułamkową.</span><span class="sxs-lookup"><span data-stu-id="cd119-694">The following example rounds decimal values with two fractional digits to values that have a single fractional digit.</span></span>  
  
 [!code-csharp[System.Math.Round.Overload#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/source.cs#3)]
 [!code-vb[System.Math.Round.Overload#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/source.vb#3)]  
  
<a name="Round4_Example"></a>   
## <a name="mathrounddouble-int32-example"></a><span data-ttu-id="cd119-695">Przykład Math.Round (podwójny, Int32)</span><span class="sxs-lookup"><span data-stu-id="cd119-695">Math.Round(Double, Int32) example</span></span>  
 <span data-ttu-id="cd119-696">Poniższy przykład zaokrągla dwa razy z dwóch cyfr ułamkowych na symulacyjnych mające pojedynczą cyfrą ułamkową.</span><span class="sxs-lookup"><span data-stu-id="cd119-696">The following example rounds double values with two fractional digits to doubles that have a single fractional digit.</span></span>  
  
 [!code-cpp[Classic Math.Round2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Math.Round2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Math.Round2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Math.Round2 Example/CS/source.cs#1)]
 [!code-vb[Classic Math.Round2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Math.Round2 Example/VB/source.vb#1)]  
  
<a name="Round5_Example"></a>   
## <a name="mathrounddecimal-midpointrounding-example"></a><span data-ttu-id="cd119-697">Przykład Math.Round (Decimal, MidpointRounding)</span><span class="sxs-lookup"><span data-stu-id="cd119-697">Math.Round(Decimal, MidpointRounding) example</span></span>  
 <span data-ttu-id="cd119-698">W poniższym przykładzie przedstawiono wartości zwracanych przez <xref:System.Math.Round%28System.Decimal%29> metody <xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29> metody z `mode` argument <xref:System.MidpointRounding.ToEven>i <xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29> metody z `mode` argument <xref:System.MidpointRounding.AwayFromZero>.</span><span class="sxs-lookup"><span data-stu-id="cd119-698">The following example displays values returned by the <xref:System.Math.Round%28System.Decimal%29> method, the <xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29> method with a `mode` argument of <xref:System.MidpointRounding.ToEven>, and the <xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29> method with a `mode` argument of <xref:System.MidpointRounding.AwayFromZero>.</span></span>  
  
 [!code-csharp[System.Math.Round.Overload#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/midpoint1.cs#5)]
 [!code-vb[System.Math.Round.Overload#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/midpoint1.vb#5)]  
  
<a name="Round6_Example"></a>   
## <a name="mathrounddouble-midpointrounding-example"></a><span data-ttu-id="cd119-699">Przykład Math.Round (Double, MidpointRounding)</span><span class="sxs-lookup"><span data-stu-id="cd119-699">Math.Round(Double, MidpointRounding) example</span></span>  
 <span data-ttu-id="cd119-700">W poniższym przykładzie przedstawiono wartości zwracanych przez <xref:System.Math.Round%28System.Double%29> metody <xref:System.Math.Round%28System.Double%2CSystem.MidpointRounding%29> metody z `mode` argument <xref:System.MidpointRounding.ToEven>i <xref:System.Math.Round%28System.Double%2CSystem.MidpointRounding%29> metody z `mode` argument <xref:System.MidpointRounding.AwayFromZero>.</span><span class="sxs-lookup"><span data-stu-id="cd119-700">The following example displays values returned by the <xref:System.Math.Round%28System.Double%29> method, the <xref:System.Math.Round%28System.Double%2CSystem.MidpointRounding%29> method with a `mode` argument of <xref:System.MidpointRounding.ToEven>, and the <xref:System.Math.Round%28System.Double%2CSystem.MidpointRounding%29> method with a `mode` argument of <xref:System.MidpointRounding.AwayFromZero>.</span></span>  
  
 [!code-csharp[System.Math.Round.Overload#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/midpoint2.cs#6)]
 [!code-vb[System.Math.Round.Overload#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/midpoint2.vb#6)]  
  
<a name="Round7_Example"></a>   
## <a name="mathrounddecimal-int32-midpointrounding-example"></a><span data-ttu-id="cd119-701">Przykład Math.Round (Decimal, Int32, MidpointRounding)</span><span class="sxs-lookup"><span data-stu-id="cd119-701">Math.Round(Decimal, Int32, MidpointRounding) example</span></span>  
 <span data-ttu-id="cd119-702">W poniższym przykładzie pokazano sposób użycia <xref:System.Math.Round%2A> metody z <xref:System.MidpointRounding> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="cd119-702">The following example demonstrates how to use the <xref:System.Math.Round%2A> method with the <xref:System.MidpointRounding> enumeration.</span></span>  
  
 [!code-cpp[math.midpointrounding#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.midpointrounding/cpp/mpr.cpp#1)]
 [!code-csharp[math.midpointrounding#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.midpointrounding/CS/mpr.cs#1)]
 [!code-vb[math.midpointrounding#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.midpointrounding/VB/mpr.vb#1)]  
  
<a name="Round8_Example"></a>   
## <a name="mathrounddouble-int32-midpointrounding-example"></a><span data-ttu-id="cd119-703">Przykład Math.Round (Double, Int32, MidpointRounding)</span><span class="sxs-lookup"><span data-stu-id="cd119-703">Math.Round(Double, Int32, MidpointRounding) example</span></span>  
 <span data-ttu-id="cd119-704">W poniższym przykładzie pokazano sposób użycia <xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29> metody z <xref:System.MidpointRounding> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="cd119-704">The following example demonstrates how to use the <xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29> method with the <xref:System.MidpointRounding> enumeration.</span></span>  
  
 [!code-csharp[System.Math.Round.Overload#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/mpr.cs#4)]
 [!code-vb[System.Math.Round.Overload#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/mpr.vb#4)]  
  
<a name="Round_Versions"></a>   
## <a name="version-information"></a><span data-ttu-id="cd119-705">Informacje o wersji</span><span class="sxs-lookup"><span data-stu-id="cd119-705">Version information</span></span>  
 <span data-ttu-id="cd119-706">.NET Framework</span><span class="sxs-lookup"><span data-stu-id="cd119-706">.NET Framework</span></span>  
 <span data-ttu-id="cd119-707">Overloads bez <xref:System.MidpointRounding> parametru są obsługiwane w: 4.5, 4, 3.5, 3.0, 2.0, 1.1, 1.0</span><span class="sxs-lookup"><span data-stu-id="cd119-707">Overloads without a <xref:System.MidpointRounding> parameter are supported in: 4.5, 4, 3.5, 3.0, 2.0, 1.1, 1.0</span></span>  
<span data-ttu-id="cd119-708">Overloads z <xref:System.MidpointRounding> parametru są obsługiwane w: 4.5, 4, 3.5, 3.0, 2.0</span><span class="sxs-lookup"><span data-stu-id="cd119-708">Overloads with a <xref:System.MidpointRounding> parameter are supported in: 4.5, 4, 3.5, 3.0, 2.0</span></span>  
  
 <span data-ttu-id="cd119-709">.NET Framework Client Profile</span><span class="sxs-lookup"><span data-stu-id="cd119-709">.NET Framework Client Profile</span></span>  
 <span data-ttu-id="cd119-710">Wszystkie przeciążenia są obsługiwane w wersjach: 4, 3.5 z dodatkiem SP1</span><span class="sxs-lookup"><span data-stu-id="cd119-710">All overloads are supported in: 4, 3.5 SP1</span></span>  
  
 <span data-ttu-id="cd119-711">Biblioteka klas przenośnych</span><span class="sxs-lookup"><span data-stu-id="cd119-711">Portable Class Library</span></span>  
 <span data-ttu-id="cd119-712">Obsługiwane są wszystkie przeciążenia</span><span class="sxs-lookup"><span data-stu-id="cd119-712">All overloads are supported</span></span>  
  
 <span data-ttu-id="cd119-713">Środowisko .NET dla aPLikacji do Sklepu Windows</span><span class="sxs-lookup"><span data-stu-id="cd119-713">.NET for Windows Store apps</span></span>  
 <span data-ttu-id="cd119-714">Wszystkie przeciążenia są obsługiwane w systemie Windows 8</span><span class="sxs-lookup"><span data-stu-id="cd119-714">All overloads are supported in: Windows 8</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Ceiling(System.Decimal)" />
        <altmember cref="M:System.Math.Floor(System.Decimal)" />
        <altmember cref="M:System.Math.Truncate(System.Decimal)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static decimal Round (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Round(valuetype System.Decimal d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (d As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Round(System::Decimal d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="cd119-715">Liczba dziesiętna ma zostać zaokrąglona.</span><span class="sxs-lookup"><span data-stu-id="cd119-715">A decimal number to be rounded.</span></span></param>
        <summary><span data-ttu-id="cd119-716">Zaokrągla wartość dziesiętną do najbliższej wartości całkowitej.</span><span class="sxs-lookup"><span data-stu-id="cd119-716">Rounds a decimal value to the nearest integral value.</span></span></summary>
        <returns><span data-ttu-id="cd119-717">Liczba całkowita najbliższej parametru <paramref name="d" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-717">The integer nearest parameter <paramref name="d" />.</span></span> <span data-ttu-id="cd119-718">Jeśli część ułamkowa <paramref name="d" /> jest w połowie między i innych nietypowych dwie liczb całkowitych, z których jeden jest parzysta, zwracany jest parzystą liczbą.</span><span class="sxs-lookup"><span data-stu-id="cd119-718">If the fractional component of <paramref name="d" /> is halfway between two integers, one of which is even and the other odd, the even number is returned.</span></span> <span data-ttu-id="cd119-719">Należy pamiętać, że ta metoda zwraca <see cref="T:System.Decimal" /> zamiast typ całkowity.</span><span class="sxs-lookup"><span data-stu-id="cd119-719">Note that this method returns a <see cref="T:System.Decimal" /> instead of an integral type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="cd119-720">Przykłady i informacje o użyciu kompleksowe dotyczących tego i innych przeciążeń `Round` metody, zobacz <xref:System.Math.Round%2A> strony odwołania.</span><span class="sxs-lookup"><span data-stu-id="cd119-720">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="cd119-721">Wynik jest poza zakresem <see cref="T:System.Decimal" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-721">The result is outside the range of a <see cref="T:System.Decimal" />.</span></span></exception>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static double Round (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Round(float64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (a As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Round(double a);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="cd119-722">Liczba zmiennoprzecinkowa podwójnej precyzji, która ma zostać zaokrąglona.</span><span class="sxs-lookup"><span data-stu-id="cd119-722">A double-precision floating-point number to be rounded.</span></span></param>
        <summary><span data-ttu-id="cd119-723">Powoduje zaokrąglenie do najbliższej wartości całkowitych wartości zmiennoprzecinkowej podwójnej precyzji.</span><span class="sxs-lookup"><span data-stu-id="cd119-723">Rounds a double-precision floating-point value to the nearest integral value.</span></span></summary>
        <returns><span data-ttu-id="cd119-724">Liczba całkowita najbliższej <paramref name="a" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-724">The integer nearest <paramref name="a" />.</span></span> <span data-ttu-id="cd119-725">Jeśli część ułamkowa <paramref name="a" /> jest w połowie między dwie liczb całkowitych, z których jeden jest parzysta i innych nietypowych, zwracana jest parzystą liczbą.</span><span class="sxs-lookup"><span data-stu-id="cd119-725">If the fractional component of <paramref name="a" /> is halfway between two integers, one of which is even and the other odd, then the even number is returned.</span></span> <span data-ttu-id="cd119-726">Należy pamiętać, że ta metoda zwraca <see cref="T:System.Double" /> zamiast typ całkowity.</span><span class="sxs-lookup"><span data-stu-id="cd119-726">Note that this method returns a <see cref="T:System.Double" /> instead of an integral type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="cd119-727">Przykłady i informacje o użyciu kompleksowe dotyczących tego i innych przeciążeń `Round` metody, zobacz <xref:System.Math.Round%2A> strony odwołania.</span><span class="sxs-lookup"><span data-stu-id="cd119-727">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para><span data-ttu-id="cd119-728">Ze względu na zmniejszenie precyzji, która może wynikać z reprezentujący wartości dziesiętnej jako liczby zmiennoprzecinkowe lub wykonywanie operacji arytmetycznych na wartości zmiennoprzecinkowe w niektórych przypadkach <see cref="M:System.Math.Round(System.Double)" /> zostać zaokrąglona środkowego wartości nie może występować — metoda najbliższej parzystej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="cd119-728">Because of the loss of precision that can result from representing decimal values as floating-point numbers or performing arithmetic operations on floating-point values, in some cases the <see cref="M:System.Math.Round(System.Double)" /> method may not appear to round midpoint values to the nearest even integer.</span></span> <span data-ttu-id="cd119-729">W poniższym przykładzie, ponieważ wartość zmiennoprzecinkowa.1 nie ma skończonego binarne reprezentacji, pierwsze wywołanie <see cref="M:System.Math.Round(System.Double)" /> metoda o wartości 11.5 zwraca 11 zamiast 12.</span><span class="sxs-lookup"><span data-stu-id="cd119-729">In the following example, because the floating-point value .1 has no finite binary representation, the first call to the <see cref="M:System.Math.Round(System.Double)" /> method with a value of 11.5 returns 11 instead of 12.</span></span>  
  
 [!code-csharp[System.Math.Round#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round/cs/round2.cs#1)]
 [!code-vb[System.Math.Round#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round/vb/round2.vb#1)]</para>
        </block>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static decimal Round (decimal d, int decimals);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Round(valuetype System.Decimal d, int32 decimals) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Decimal,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (d As Decimal, decimals As Integer) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Round(System::Decimal d, int decimals);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
        <Parameter Name="decimals" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="cd119-730">Liczba dziesiętna ma zostać zaokrąglona.</span><span class="sxs-lookup"><span data-stu-id="cd119-730">A decimal number to be rounded.</span></span></param>
        <param name="decimals"><span data-ttu-id="cd119-731">Liczba miejsc dziesiętnych w wartości zwracanej.</span><span class="sxs-lookup"><span data-stu-id="cd119-731">The number of decimal places in the return value.</span></span></param>
        <summary><span data-ttu-id="cd119-732">Zaokrągla liczbę do określonej liczby cyfr ułamkowych wartości dziesiętnej.</span><span class="sxs-lookup"><span data-stu-id="cd119-732">Rounds a decimal value to a specified number of fractional digits.</span></span></summary>
        <returns><span data-ttu-id="cd119-733">Liczba najbliżej do <paramref name="d" /> zawierający liczba cyfr ułamkowych równa <paramref name="decimals" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-733">The number nearest to <paramref name="d" /> that contains a number of fractional digits equal to <paramref name="decimals" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="cd119-734">Przykłady i informacje o użyciu kompleksowe dotyczących tego i innych przeciążeń `Round` metody, zobacz <xref:System.Math.Round%2A> strony odwołania.</span><span class="sxs-lookup"><span data-stu-id="cd119-734">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="cd119-735"><paramref name="decimals" /> jest mniejsza niż 0 lub większą niż 28.</span><span class="sxs-lookup"><span data-stu-id="cd119-735"><paramref name="decimals" /> is less than 0 or greater than 28.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="cd119-736">Wynik jest poza zakresem <see cref="T:System.Decimal" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-736">The result is outside the range of a <see cref="T:System.Decimal" />.</span></span></exception>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static decimal Round (decimal d, MidpointRounding mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Round(valuetype System.Decimal d, valuetype System.MidpointRounding mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Decimal,System.MidpointRounding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (d As Decimal, mode As MidpointRounding) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Round(System::Decimal d, MidpointRounding mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
        <Parameter Name="mode" Type="System.MidpointRounding" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="cd119-737">Liczba dziesiętna ma zostać zaokrąglona.</span><span class="sxs-lookup"><span data-stu-id="cd119-737">A decimal number to be rounded.</span></span></param>
        <param name="mode"><span data-ttu-id="cd119-738">Specyfikacja sposobu zaokrąglona <c>d</c> przypadku pośrodku dwie inne liczby.</span><span class="sxs-lookup"><span data-stu-id="cd119-738">Specification for how to round <c>d</c> if it is midway between two other numbers.</span></span></param>
        <summary><span data-ttu-id="cd119-739">Zaokrągla wartość dziesiętną do najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="cd119-739">Rounds a decimal value to the nearest integer.</span></span> <span data-ttu-id="cd119-740">Parametr określa sposób zaokrąglania wartości, jeśli jest w połowie między dwiema liczbami.</span><span class="sxs-lookup"><span data-stu-id="cd119-740">A parameter specifies how to round the value if it is midway between two numbers.</span></span></summary>
        <returns><span data-ttu-id="cd119-741">Liczba całkowita najbliższej <paramref name="d" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-741">The integer nearest <paramref name="d" />.</span></span> <span data-ttu-id="cd119-742">Jeśli <paramref name="d" /> następnie jest w połowie między dwóch liczb, z których jeden jest parzysta i innych nietypowych <paramref name="mode" /> określa dwóch zwrócony.</span><span class="sxs-lookup"><span data-stu-id="cd119-742">If <paramref name="d" /> is halfway between two numbers, one of which is even and the other odd, then <paramref name="mode" /> determines which of the two is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="cd119-743">Przykłady i informacje o użyciu kompleksowe dotyczących tego i innych przeciążeń `Round` metody, zobacz <xref:System.Math.Round%2A> strony odwołania.</span><span class="sxs-lookup"><span data-stu-id="cd119-743">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="cd119-744"><paramref name="mode" /> nie jest prawidłową wartością <see cref="T:System.MidpointRounding" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-744"><paramref name="mode" /> is not a valid value of <see cref="T:System.MidpointRounding" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="cd119-745">Wynik jest poza zakresem <see cref="T:System.Decimal" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-745">The result is outside the range of a <see cref="T:System.Decimal" />.</span></span></exception>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal,System.MidpointRounding)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static double Round (double value, int digits);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Round(float64 value, int32 digits) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Double,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (value As Double, digits As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Round(double value, int digits);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="digits" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="cd119-746">Liczba zmiennoprzecinkowa podwójnej precyzji, która ma zostać zaokrąglona.</span><span class="sxs-lookup"><span data-stu-id="cd119-746">A double-precision floating-point number to be rounded.</span></span></param>
        <param name="digits"><span data-ttu-id="cd119-747">Liczba cyfr ułamkowych w wartości zwracanej.</span><span class="sxs-lookup"><span data-stu-id="cd119-747">The number of fractional digits in the return value.</span></span></param>
        <summary><span data-ttu-id="cd119-748">Zaokrągla liczbę do określonej liczby cyfr ułamkowych wartości zmiennoprzecinkowej podwójnej precyzji.</span><span class="sxs-lookup"><span data-stu-id="cd119-748">Rounds a double-precision floating-point value to a specified number of fractional digits.</span></span></summary>
        <returns><span data-ttu-id="cd119-749">Liczba najbliżej do <paramref name="value" /> zawierający liczba cyfr ułamkowych równa <paramref name="digits" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-749">The number nearest to <paramref name="value" /> that contains a number of fractional digits equal to <paramref name="digits" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="cd119-750">Przykłady i informacje o użyciu kompleksowe dotyczących tego i innych przeciążeń `Round` metody, zobacz <xref:System.Math.Round%2A> strony odwołania.</span><span class="sxs-lookup"><span data-stu-id="cd119-750">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="cd119-751"><paramref name="digits" /> jest mniejsza niż 0 lub większą niż 15.</span><span class="sxs-lookup"><span data-stu-id="cd119-751"><paramref name="digits" /> is less than 0 or greater than 15.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="cd119-752">Ze względu na zmniejszenie precyzji, która może wynikać z reprezentujący wartości dziesiętnej jako liczby zmiennoprzecinkowe lub wykonywanie operacji arytmetycznych na wartości zmiennoprzecinkowe w niektórych przypadkach <see cref="M:System.Math.Round(System.Double,System.Int32)" /> zostać zaokrąglona środkowego wartości nie może występować — metoda najbliższej parzystej wartości w <paramref name="digits" /> dziesiętnego.</span><span class="sxs-lookup"><span data-stu-id="cd119-752">Because of the loss of precision that can result from representing decimal values as floating-point numbers or performing arithmetic operations on floating-point values, in some cases the <see cref="M:System.Math.Round(System.Double,System.Int32)" /> method may not appear to round midpoint values to the nearest even value in the <paramref name="digits" /> decimal position.</span></span> <span data-ttu-id="cd119-753">Jest to zilustrowane w poniższym przykładzie, w którym 2.135 jest zaokrąglana do 2.13 zamiast 2.14.</span><span class="sxs-lookup"><span data-stu-id="cd119-753">This is illustrated in the following example, where 2.135 is rounded to 2.13 instead of 2.14.</span></span> <span data-ttu-id="cd119-754">Dzieje się tak dlatego wewnętrznie mnoży metody <paramref name="value" /> przez 10<sup>cyfr</sup>, i operacja mnożenia w takim przypadku odczuwa utratę dokładności.</span><span class="sxs-lookup"><span data-stu-id="cd119-754">This occurs because internally the method multiplies <paramref name="value" /> by 10<sup>digits</sup>, and the multiplication operation in this case suffers from a loss of precision.</span></span>  
  
 [!code-csharp[System.Math.Round#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round/cs/round3.cs#2)]
 [!code-vb[System.Math.Round#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round/vb/round3.vb#2)]</para>
        </block>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static double Round (double value, MidpointRounding mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Round(float64 value, valuetype System.MidpointRounding mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Double,System.MidpointRounding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (value As Double, mode As MidpointRounding) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Round(double value, MidpointRounding mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="mode" Type="System.MidpointRounding" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="cd119-755">Liczba zmiennoprzecinkowa podwójnej precyzji, która ma zostać zaokrąglona.</span><span class="sxs-lookup"><span data-stu-id="cd119-755">A double-precision floating-point number to be rounded.</span></span></param>
        <param name="mode"><span data-ttu-id="cd119-756">Specyfikacja sposobu zaokrąglona <c>wartość</c> przypadku pośrodku dwie inne liczby.</span><span class="sxs-lookup"><span data-stu-id="cd119-756">Specification for how to round <c>value</c> if it is midway between two other numbers.</span></span></param>
        <summary><span data-ttu-id="cd119-757">Zaokrągla wartość zmiennoprzecinkową podwójnej precyzji dla najbliższej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="cd119-757">Rounds a double-precision floating-point value to the nearest integer.</span></span> <span data-ttu-id="cd119-758">Parametr określa sposób zaokrąglania wartości, jeśli jest w połowie między dwiema liczbami.</span><span class="sxs-lookup"><span data-stu-id="cd119-758">A parameter specifies how to round the value if it is midway between two numbers.</span></span></summary>
        <returns><span data-ttu-id="cd119-759">Liczba całkowita najbliższej <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-759">The integer nearest <paramref name="value" />.</span></span> <span data-ttu-id="cd119-760">Jeśli <paramref name="value" /> następnie jest w połowie między dwie liczb całkowitych, z których jeden jest parzysta i innych nietypowych <paramref name="mode" /> określa dwóch zwrócony.</span><span class="sxs-lookup"><span data-stu-id="cd119-760">If <paramref name="value" /> is halfway between two integers, one of which is even and the other odd, then <paramref name="mode" /> determines which of the two is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="cd119-761">Przykłady i informacje o użyciu kompleksowe dotyczących tego i innych przeciążeń `Round` metody, zobacz <xref:System.Math.Round%2A> strony odwołania.</span><span class="sxs-lookup"><span data-stu-id="cd119-761">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="cd119-762"><paramref name="mode" /> nie jest prawidłową wartością <see cref="T:System.MidpointRounding" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-762"><paramref name="mode" /> is not a valid value of <see cref="T:System.MidpointRounding" />.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="cd119-763">Ze względu na zmniejszenie precyzji, która może wynikać z reprezentujący wartości dziesiętnej jako liczby zmiennoprzecinkowe lub wykonywanie operacji arytmetycznych na wartości zmiennoprzecinkowe w niektórych przypadkach <see cref="M:System.Math.Round(System.Double,System.MidpointRounding)" /> zostać zaokrąglona środkowego wartości nie może występować — metoda najbliższej parzystej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="cd119-763">Because of the loss of precision that can result from representing decimal values as floating-point numbers or performing arithmetic operations on floating-point values, in some cases the <see cref="M:System.Math.Round(System.Double,System.MidpointRounding)" /> method may not appear to round midpoint values to the nearest even integer.</span></span> <span data-ttu-id="cd119-764">W poniższym przykładzie, ponieważ wartość zmiennoprzecinkowa.1 nie ma skończonego binarne reprezentacji, pierwsze wywołanie <see cref="M:System.Math.Round(System.Double)" /> metoda o wartości 11.5 zwraca 11 zamiast 12.</span><span class="sxs-lookup"><span data-stu-id="cd119-764">In the following example, because the floating-point value .1 has no finite binary representation, the first call to the <see cref="M:System.Math.Round(System.Double)" /> method with a value of 11.5 returns 11 instead of 12.</span></span>  
  
 [!code-csharp[System.Math.Round#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round/cs/round5.cs#4)]
 [!code-vb[System.Math.Round#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round/vb/round5.vb#4)]</para>
        </block>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal,System.MidpointRounding)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static decimal Round (decimal d, int decimals, MidpointRounding mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Round(valuetype System.Decimal d, int32 decimals, valuetype System.MidpointRounding mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Decimal,System.Int32,System.MidpointRounding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (d As Decimal, decimals As Integer, mode As MidpointRounding) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Round(System::Decimal d, int decimals, MidpointRounding mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
        <Parameter Name="decimals" Type="System.Int32" />
        <Parameter Name="mode" Type="System.MidpointRounding" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="cd119-765">Liczba dziesiętna ma zostać zaokrąglona.</span><span class="sxs-lookup"><span data-stu-id="cd119-765">A decimal number to be rounded.</span></span></param>
        <param name="decimals"><span data-ttu-id="cd119-766">Liczba miejsc dziesiętnych w wartości zwracanej.</span><span class="sxs-lookup"><span data-stu-id="cd119-766">The number of decimal places in the return value.</span></span></param>
        <param name="mode"><span data-ttu-id="cd119-767">Specyfikacja sposobu zaokrąglona <c>d</c> przypadku pośrodku dwie inne liczby.</span><span class="sxs-lookup"><span data-stu-id="cd119-767">Specification for how to round <c>d</c> if it is midway between two other numbers.</span></span></param>
        <summary><span data-ttu-id="cd119-768">Zaokrągla liczbę do określonej liczby cyfr ułamkowych wartości dziesiętnej.</span><span class="sxs-lookup"><span data-stu-id="cd119-768">Rounds a decimal value to a specified number of fractional digits.</span></span> <span data-ttu-id="cd119-769">Parametr określa sposób zaokrąglania wartości, jeśli jest w połowie między dwiema liczbami.</span><span class="sxs-lookup"><span data-stu-id="cd119-769">A parameter specifies how to round the value if it is midway between two numbers.</span></span></summary>
        <returns><span data-ttu-id="cd119-770">Liczba najbliżej do <paramref name="d" /> zawierający liczba cyfr ułamkowych równa <paramref name="decimals" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-770">The number nearest to <paramref name="d" /> that contains a number of fractional digits equal to <paramref name="decimals" />.</span></span> <span data-ttu-id="cd119-771">Jeśli <paramref name="d" /> ma mniejszą liczbę cyfr ułamkowych niż <paramref name="decimals" />, <paramref name="d" /> zwróceniu niezmieniona.</span><span class="sxs-lookup"><span data-stu-id="cd119-771">If <paramref name="d" /> has fewer fractional digits than <paramref name="decimals" />, <paramref name="d" /> is returned unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="cd119-772">Przykłady i informacje o użyciu kompleksowe dotyczących tego i innych przeciążeń `Round` metody, zobacz <xref:System.Math.Round%2A> strony odwołania.</span><span class="sxs-lookup"><span data-stu-id="cd119-772">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="cd119-773"><paramref name="decimals" /> jest mniejsza niż 0 lub większą niż 28.</span><span class="sxs-lookup"><span data-stu-id="cd119-773"><paramref name="decimals" /> is less than 0 or greater than 28.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="cd119-774"><paramref name="mode" /> nie jest prawidłową wartością <see cref="T:System.MidpointRounding" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-774"><paramref name="mode" /> is not a valid value of <see cref="T:System.MidpointRounding" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="cd119-775">Wynik jest poza zakresem <see cref="T:System.Decimal" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-775">The result is outside the range of a <see cref="T:System.Decimal" />.</span></span></exception>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal,System.Int32,System.MidpointRounding)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static double Round (double value, int digits, MidpointRounding mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Round(float64 value, int32 digits, valuetype System.MidpointRounding mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Double,System.Int32,System.MidpointRounding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (value As Double, digits As Integer, mode As MidpointRounding) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Round(double value, int digits, MidpointRounding mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="digits" Type="System.Int32" />
        <Parameter Name="mode" Type="System.MidpointRounding" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="cd119-776">Liczba zmiennoprzecinkowa podwójnej precyzji, która ma zostać zaokrąglona.</span><span class="sxs-lookup"><span data-stu-id="cd119-776">A double-precision floating-point number to be rounded.</span></span></param>
        <param name="digits"><span data-ttu-id="cd119-777">Liczba cyfr ułamkowych w wartości zwracanej.</span><span class="sxs-lookup"><span data-stu-id="cd119-777">The number of fractional digits in the return value.</span></span></param>
        <param name="mode"><span data-ttu-id="cd119-778">Specyfikacja sposobu zaokrąglona <c>wartość</c> przypadku pośrodku dwie inne liczby.</span><span class="sxs-lookup"><span data-stu-id="cd119-778">Specification for how to round <c>value</c> if it is midway between two other numbers.</span></span></param>
        <summary><span data-ttu-id="cd119-779">Zaokrągla liczbę do określonej liczby cyfr ułamkowych wartości zmiennoprzecinkowej podwójnej precyzji.</span><span class="sxs-lookup"><span data-stu-id="cd119-779">Rounds a double-precision floating-point value to a specified number of fractional digits.</span></span> <span data-ttu-id="cd119-780">Parametr określa sposób zaokrąglania wartości, jeśli jest w połowie między dwiema liczbami.</span><span class="sxs-lookup"><span data-stu-id="cd119-780">A parameter specifies how to round the value if it is midway between two numbers.</span></span></summary>
        <returns><span data-ttu-id="cd119-781">Liczba najbliżej do <paramref name="value" /> mający liczba cyfr ułamkowych równa <paramref name="digits" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-781">The number nearest to <paramref name="value" /> that has a number of fractional digits equal to <paramref name="digits" />.</span></span> <span data-ttu-id="cd119-782">Jeśli <paramref name="value" /> ma mniejszą liczbę cyfr ułamkowych niż <paramref name="digits" />, <paramref name="value" /> zwróceniu niezmieniona.</span><span class="sxs-lookup"><span data-stu-id="cd119-782">If <paramref name="value" /> has fewer fractional digits than <paramref name="digits" />, <paramref name="value" /> is returned unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="cd119-783">Przykłady i informacje o użyciu kompleksowe dotyczących tego i innych przeciążeń `Round` metody, zobacz <xref:System.Math.Round%2A> strony odwołania.</span><span class="sxs-lookup"><span data-stu-id="cd119-783">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="cd119-784"><paramref name="digits" /> jest mniejsza niż 0 lub większą niż 15.</span><span class="sxs-lookup"><span data-stu-id="cd119-784"><paramref name="digits" /> is less than 0 or greater than 15.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="cd119-785"><paramref name="mode" /> nie jest prawidłową wartością <see cref="T:System.MidpointRounding" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-785"><paramref name="mode" /> is not a valid value of <see cref="T:System.MidpointRounding" />.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="cd119-786">Ze względu na zmniejszenie precyzji, która może wynikać z reprezentujący wartości dziesiętnej jako liczby zmiennoprzecinkowe lub wykonywanie operacji arytmetycznych na wartości zmiennoprzecinkowe w niektórych przypadkach <see cref="M:System.Math.Round(System.Double,System.Int32,System.MidpointRounding)" /> zostać zaokrąglona środkowego wartości określonych nie może występować — metoda przez <paramref name="mode" /> parametru.</span><span class="sxs-lookup"><span data-stu-id="cd119-786">Because of the loss of precision that can result from representing decimal values as floating-point numbers or performing arithmetic operations on floating-point values, in some cases the <see cref="M:System.Math.Round(System.Double,System.Int32,System.MidpointRounding)" /> method may not appear to round midpoint values as specified by the <paramref name="mode" /> parameter.</span></span> <span data-ttu-id="cd119-787">Jest to zilustrowane w poniższym przykładzie, w którym 2.135 jest zaokrąglana do 2.13 zamiast 2.14.</span><span class="sxs-lookup"><span data-stu-id="cd119-787">This is illustrated in the following example, where 2.135 is rounded to 2.13 instead of 2.14.</span></span> <span data-ttu-id="cd119-788">Dzieje się tak dlatego wewnętrznie mnoży metody <paramref name="value" /> przez 10<sup>cyfr</sup>, i operacja mnożenia w takim przypadku odczuwa utratę dokładności.</span><span class="sxs-lookup"><span data-stu-id="cd119-788">This occurs because internally the method multiplies <paramref name="value" /> by 10<sup>digits</sup>, and the multiplication operation in this case suffers from a loss of precision.</span></span>  
  
 [!code-csharp[System.Math.Round#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round/cs/round4.cs#3)]
 [!code-vb[System.Math.Round#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round/vb/round4.vb#3)]</para>
        </block>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal,System.Int32,System.MidpointRounding)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Sign">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cd119-789">Zwraca liczbę całkowitą, która wskazuje znak liczby.</span><span class="sxs-lookup"><span data-stu-id="cd119-789">Returns an integer that indicates the sign of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sign(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As Decimal) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(System::Decimal value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="cd119-790">Podpisem liczbą dziesiętną.</span><span class="sxs-lookup"><span data-stu-id="cd119-790">A signed decimal number.</span></span></param>
        <summary><span data-ttu-id="cd119-791">Zwraca liczbę całkowitą, która wskazuje znak liczby dziesiętnej.</span><span class="sxs-lookup"><span data-stu-id="cd119-791">Returns an integer that indicates the sign of a decimal number.</span></span></summary>
        <returns><span data-ttu-id="cd119-792">Liczba, która określa znak <paramref name="value" />, jak pokazano w poniższej tabeli.</span><span class="sxs-lookup"><span data-stu-id="cd119-792">A number that indicates the sign of <paramref name="value" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="cd119-793"><list type="table"><listheader><term> Wartość zwracana</span><span class="sxs-lookup"><span data-stu-id="cd119-793"><list type="table"><listheader><term> Return value</span></span>  
  
 <span data-ttu-id="cd119-794"></term><description> Znaczenie</span><span class="sxs-lookup"><span data-stu-id="cd119-794"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="cd119-795"></description></listheader><item><term> -1</span><span class="sxs-lookup"><span data-stu-id="cd119-795"></description></listheader><item><term> -1</span></span>  
  
 <span data-ttu-id="cd119-796"></term><description><paramref name="value" /> jest mniejsza od zera.</span><span class="sxs-lookup"><span data-stu-id="cd119-796"></term><description><paramref name="value" /> is less than zero.</span></span>  
  
 <span data-ttu-id="cd119-797"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="cd119-797"></description></item><item><term> 0</span></span>  
  
 <span data-ttu-id="cd119-798"></term><description><paramref name="value" /> jest równa zero.</span><span class="sxs-lookup"><span data-stu-id="cd119-798"></term><description><paramref name="value" /> is equal to zero.</span></span>  
  
 <span data-ttu-id="cd119-799"></description></item><item><term> 1</span><span class="sxs-lookup"><span data-stu-id="cd119-799"></description></item><item><term> 1</span></span>  
  
 <span data-ttu-id="cd119-800"></term><description><paramref name="value" /> jest większa niż zero.</span><span class="sxs-lookup"><span data-stu-id="cd119-800"></term><description><paramref name="value" /> is greater than zero.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd119-801">W poniższym przykładzie pokazano sposób użycia <xref:System.Math.Sign%28System.Decimal%29> metodę, aby określić znak <xref:System.Decimal> wartość i wyświetl ją do konsoli.</span><span class="sxs-lookup"><span data-stu-id="cd119-801">The following example demonstrates how to use the <xref:System.Math.Sign%28System.Decimal%29> method to determine the sign of a <xref:System.Decimal> value and display it to the console.</span></span>  
  
 [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]
 [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]
 [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sign(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As Double) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="cd119-802">Liczba oznaczona.</span><span class="sxs-lookup"><span data-stu-id="cd119-802">A signed number.</span></span></param>
        <summary><span data-ttu-id="cd119-803">Zwraca liczbę całkowitą, która wskazuje znak liczby zmiennoprzecinkowej podwójnej precyzji.</span><span class="sxs-lookup"><span data-stu-id="cd119-803">Returns an integer that indicates the sign of a double-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="cd119-804">Liczba, która określa znak <paramref name="value" />, jak pokazano w poniższej tabeli.</span><span class="sxs-lookup"><span data-stu-id="cd119-804">A number that indicates the sign of <paramref name="value" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="cd119-805"><list type="table"><listheader><term> Wartość zwracana</span><span class="sxs-lookup"><span data-stu-id="cd119-805"><list type="table"><listheader><term> Return value</span></span>  
  
 <span data-ttu-id="cd119-806"></term><description> Znaczenie</span><span class="sxs-lookup"><span data-stu-id="cd119-806"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="cd119-807"></description></listheader><item><term> -1</span><span class="sxs-lookup"><span data-stu-id="cd119-807"></description></listheader><item><term> -1</span></span>  
  
 <span data-ttu-id="cd119-808"></term><description><paramref name="value" /> jest mniejsza od zera.</span><span class="sxs-lookup"><span data-stu-id="cd119-808"></term><description><paramref name="value" /> is less than zero.</span></span>  
  
 <span data-ttu-id="cd119-809"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="cd119-809"></description></item><item><term> 0</span></span>  
  
 <span data-ttu-id="cd119-810"></term><description><paramref name="value" /> jest równa zero.</span><span class="sxs-lookup"><span data-stu-id="cd119-810"></term><description><paramref name="value" /> is equal to zero.</span></span>  
  
 <span data-ttu-id="cd119-811"></description></item><item><term> 1</span><span class="sxs-lookup"><span data-stu-id="cd119-811"></description></item><item><term> 1</span></span>  
  
 <span data-ttu-id="cd119-812"></term><description><paramref name="value" /> jest większa niż zero.</span><span class="sxs-lookup"><span data-stu-id="cd119-812"></term><description><paramref name="value" /> is greater than zero.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd119-813">W poniższym przykładzie pokazano sposób użycia <xref:System.Math.Sign%28System.Double%29> metodę, aby określić znak <xref:System.Double> wartość i wyświetl ją do konsoli.</span><span class="sxs-lookup"><span data-stu-id="cd119-813">The following example demonstrates how to use the <xref:System.Math.Sign%28System.Double%29> method to determine the sign of a <xref:System.Double> value and display it to the console.</span></span>  
  
 [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]
 [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]
 [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArithmeticException">
          <span data-ttu-id="cd119-814"><paramref name="value" /> jest równa <see cref="F:System.Double.NaN" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-814"><paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sign(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As Short) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(short value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="cd119-815">Liczba oznaczona.</span><span class="sxs-lookup"><span data-stu-id="cd119-815">A signed number.</span></span></param>
        <summary><span data-ttu-id="cd119-816">Zwraca liczbę całkowitą, która wskazuje znak 16-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="cd119-816">Returns an integer that indicates the sign of a 16-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="cd119-817">Liczba, która określa znak <paramref name="value" />, jak pokazano w poniższej tabeli.</span><span class="sxs-lookup"><span data-stu-id="cd119-817">A number that indicates the sign of <paramref name="value" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="cd119-818"><list type="table"><listheader><term> Wartość zwracana</span><span class="sxs-lookup"><span data-stu-id="cd119-818"><list type="table"><listheader><term> Return value</span></span>  
  
 <span data-ttu-id="cd119-819"></term><description> Znaczenie</span><span class="sxs-lookup"><span data-stu-id="cd119-819"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="cd119-820"></description></listheader><item><term> -1</span><span class="sxs-lookup"><span data-stu-id="cd119-820"></description></listheader><item><term> -1</span></span>  
  
 <span data-ttu-id="cd119-821"></term><description><paramref name="value" /> jest mniejsza od zera.</span><span class="sxs-lookup"><span data-stu-id="cd119-821"></term><description><paramref name="value" /> is less than zero.</span></span>  
  
 <span data-ttu-id="cd119-822"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="cd119-822"></description></item><item><term> 0</span></span>  
  
 <span data-ttu-id="cd119-823"></term><description><paramref name="value" /> jest równa zero.</span><span class="sxs-lookup"><span data-stu-id="cd119-823"></term><description><paramref name="value" /> is equal to zero.</span></span>  
  
 <span data-ttu-id="cd119-824"></description></item><item><term> 1</span><span class="sxs-lookup"><span data-stu-id="cd119-824"></description></item><item><term> 1</span></span>  
  
 <span data-ttu-id="cd119-825"></term><description><paramref name="value" /> jest większa niż zero.</span><span class="sxs-lookup"><span data-stu-id="cd119-825"></term><description><paramref name="value" /> is greater than zero.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd119-826">W poniższym przykładzie pokazano sposób użycia <xref:System.Math.Sign%28System.Int16%29> metodę, aby określić znak <xref:System.Int16> wartość i wyświetl ją do konsoli.</span><span class="sxs-lookup"><span data-stu-id="cd119-826">The following example demonstrates how to use the <xref:System.Math.Sign%28System.Int16%29> method to determine the sign of an <xref:System.Int16> value and display it to the console.</span></span>  
  
 [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]
 [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]
 [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sign(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="cd119-827">Liczba oznaczona.</span><span class="sxs-lookup"><span data-stu-id="cd119-827">A signed number.</span></span></param>
        <summary><span data-ttu-id="cd119-828">Zwraca liczbę całkowitą, która wskazuje znak całkowita 32-bitowych.</span><span class="sxs-lookup"><span data-stu-id="cd119-828">Returns an integer that indicates the sign of a 32-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="cd119-829">Liczba, która określa znak <paramref name="value" />, jak pokazano w poniższej tabeli.</span><span class="sxs-lookup"><span data-stu-id="cd119-829">A number that indicates the sign of <paramref name="value" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="cd119-830"><list type="table"><listheader><term> Wartość zwracana</span><span class="sxs-lookup"><span data-stu-id="cd119-830"><list type="table"><listheader><term> Return value</span></span>  
  
 <span data-ttu-id="cd119-831"></term><description> Znaczenie</span><span class="sxs-lookup"><span data-stu-id="cd119-831"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="cd119-832"></description></listheader><item><term> -1</span><span class="sxs-lookup"><span data-stu-id="cd119-832"></description></listheader><item><term> -1</span></span>  
  
 <span data-ttu-id="cd119-833"></term><description><paramref name="value" /> jest mniejsza od zera.</span><span class="sxs-lookup"><span data-stu-id="cd119-833"></term><description><paramref name="value" /> is less than zero.</span></span>  
  
 <span data-ttu-id="cd119-834"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="cd119-834"></description></item><item><term> 0</span></span>  
  
 <span data-ttu-id="cd119-835"></term><description><paramref name="value" /> jest równa zero.</span><span class="sxs-lookup"><span data-stu-id="cd119-835"></term><description><paramref name="value" /> is equal to zero.</span></span>  
  
 <span data-ttu-id="cd119-836"></description></item><item><term> 1</span><span class="sxs-lookup"><span data-stu-id="cd119-836"></description></item><item><term> 1</span></span>  
  
 <span data-ttu-id="cd119-837"></term><description><paramref name="value" /> jest większa niż zero.</span><span class="sxs-lookup"><span data-stu-id="cd119-837"></term><description><paramref name="value" /> is greater than zero.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd119-838">W poniższym przykładzie pokazano sposób użycia <xref:System.Math.Sign%28System.Int32%29> metodę, aby określić znak <xref:System.Int32> wartość i wyświetl ją do konsoli.</span><span class="sxs-lookup"><span data-stu-id="cd119-838">The following example demonstrates how to use the <xref:System.Math.Sign%28System.Int32%29> method to determine the sign of an <xref:System.Int32> value and display it to the console.</span></span>  
  
 [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]
 [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]
 [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sign(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="cd119-839">Liczba oznaczona.</span><span class="sxs-lookup"><span data-stu-id="cd119-839">A signed number.</span></span></param>
        <summary><span data-ttu-id="cd119-840">Zwraca liczbę całkowitą, która wskazuje znak 64-bitowej podpisanej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="cd119-840">Returns an integer that indicates the sign of a 64-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="cd119-841">Liczba, która określa znak <paramref name="value" />, jak pokazano w poniższej tabeli.</span><span class="sxs-lookup"><span data-stu-id="cd119-841">A number that indicates the sign of <paramref name="value" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="cd119-842"><list type="table"><listheader><term> Wartość zwracana</span><span class="sxs-lookup"><span data-stu-id="cd119-842"><list type="table"><listheader><term> Return value</span></span>  
  
 <span data-ttu-id="cd119-843"></term><description> Znaczenie</span><span class="sxs-lookup"><span data-stu-id="cd119-843"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="cd119-844"></description></listheader><item><term> -1</span><span class="sxs-lookup"><span data-stu-id="cd119-844"></description></listheader><item><term> -1</span></span>  
  
 <span data-ttu-id="cd119-845"></term><description><paramref name="value" /> jest mniejsza od zera.</span><span class="sxs-lookup"><span data-stu-id="cd119-845"></term><description><paramref name="value" /> is less than zero.</span></span>  
  
 <span data-ttu-id="cd119-846"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="cd119-846"></description></item><item><term> 0</span></span>  
  
 <span data-ttu-id="cd119-847"></term><description><paramref name="value" /> jest równa zero.</span><span class="sxs-lookup"><span data-stu-id="cd119-847"></term><description><paramref name="value" /> is equal to zero.</span></span>  
  
 <span data-ttu-id="cd119-848"></description></item><item><term> 1</span><span class="sxs-lookup"><span data-stu-id="cd119-848"></description></item><item><term> 1</span></span>  
  
 <span data-ttu-id="cd119-849"></term><description><paramref name="value" /> jest większa niż zero.</span><span class="sxs-lookup"><span data-stu-id="cd119-849"></term><description><paramref name="value" /> is greater than zero.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd119-850">W poniższym przykładzie pokazano sposób użycia <xref:System.Math.Sign%28System.Int64%29> metodę, aby określić znak <xref:System.Int64> wartość i wyświetl ją do konsoli.</span><span class="sxs-lookup"><span data-stu-id="cd119-850">The following example demonstrates how to use the <xref:System.Math.Sign%28System.Int64%29> method to determine the sign of an <xref:System.Int64> value and display it to the console.</span></span>  
  
 [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]
 [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]
 [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sign(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As SByte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(System::SByte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="cd119-851">Liczba oznaczona.</span><span class="sxs-lookup"><span data-stu-id="cd119-851">A signed number.</span></span></param>
        <summary><span data-ttu-id="cd119-852">Zwraca liczbę całkowitą, która wskazuje znak 8-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="cd119-852">Returns an integer that indicates the sign of an 8-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="cd119-853">Liczba, która określa znak <paramref name="value" />, jak pokazano w poniższej tabeli.</span><span class="sxs-lookup"><span data-stu-id="cd119-853">A number that indicates the sign of <paramref name="value" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="cd119-854"><list type="table"><listheader><term> Wartość zwracana</span><span class="sxs-lookup"><span data-stu-id="cd119-854"><list type="table"><listheader><term> Return value</span></span>  
  
 <span data-ttu-id="cd119-855"></term><description> Znaczenie</span><span class="sxs-lookup"><span data-stu-id="cd119-855"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="cd119-856"></description></listheader><item><term> -1</span><span class="sxs-lookup"><span data-stu-id="cd119-856"></description></listheader><item><term> -1</span></span>  
  
 <span data-ttu-id="cd119-857"></term><description><paramref name="value" /> jest mniejsza od zera.</span><span class="sxs-lookup"><span data-stu-id="cd119-857"></term><description><paramref name="value" /> is less than zero.</span></span>  
  
 <span data-ttu-id="cd119-858"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="cd119-858"></description></item><item><term> 0</span></span>  
  
 <span data-ttu-id="cd119-859"></term><description><paramref name="value" /> jest równa zero.</span><span class="sxs-lookup"><span data-stu-id="cd119-859"></term><description><paramref name="value" /> is equal to zero.</span></span>  
  
 <span data-ttu-id="cd119-860"></description></item><item><term> 1</span><span class="sxs-lookup"><span data-stu-id="cd119-860"></description></item><item><term> 1</span></span>  
  
 <span data-ttu-id="cd119-861"></term><description><paramref name="value" /> jest większa niż zero.</span><span class="sxs-lookup"><span data-stu-id="cd119-861"></term><description><paramref name="value" /> is greater than zero.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd119-862">W poniższym przykładzie pokazano sposób użycia <xref:System.Math.Sign%28System.SByte%29> metodę, aby określić znak <xref:System.SByte> wartość i wyświetl ją do konsoli.</span><span class="sxs-lookup"><span data-stu-id="cd119-862">The following example demonstrates how to use the <xref:System.Math.Sign%28System.SByte%29> method to determine the sign of an <xref:System.SByte> value and display it to the console.</span></span>  
  
 [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]
 [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]
 [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sign(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="cd119-863">Liczba oznaczona.</span><span class="sxs-lookup"><span data-stu-id="cd119-863">A signed number.</span></span></param>
        <summary><span data-ttu-id="cd119-864">Zwraca liczbę całkowitą, która wskazuje znak liczby zmiennoprzecinkowej pojedynczej precyzji.</span><span class="sxs-lookup"><span data-stu-id="cd119-864">Returns an integer that indicates the sign of a single-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="cd119-865">Liczba, która określa znak <paramref name="value" />, jak pokazano w poniższej tabeli.</span><span class="sxs-lookup"><span data-stu-id="cd119-865">A number that indicates the sign of <paramref name="value" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="cd119-866"><list type="table"><listheader><term> Wartość zwracana</span><span class="sxs-lookup"><span data-stu-id="cd119-866"><list type="table"><listheader><term> Return value</span></span>  
  
 <span data-ttu-id="cd119-867"></term><description> Znaczenie</span><span class="sxs-lookup"><span data-stu-id="cd119-867"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="cd119-868"></description></listheader><item><term> -1</span><span class="sxs-lookup"><span data-stu-id="cd119-868"></description></listheader><item><term> -1</span></span>  
  
 <span data-ttu-id="cd119-869"></term><description><paramref name="value" /> jest mniejsza od zera.</span><span class="sxs-lookup"><span data-stu-id="cd119-869"></term><description><paramref name="value" /> is less than zero.</span></span>  
  
 <span data-ttu-id="cd119-870"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="cd119-870"></description></item><item><term> 0</span></span>  
  
 <span data-ttu-id="cd119-871"></term><description><paramref name="value" /> jest równa zero.</span><span class="sxs-lookup"><span data-stu-id="cd119-871"></term><description><paramref name="value" /> is equal to zero.</span></span>  
  
 <span data-ttu-id="cd119-872"></description></item><item><term> 1</span><span class="sxs-lookup"><span data-stu-id="cd119-872"></description></item><item><term> 1</span></span>  
  
 <span data-ttu-id="cd119-873"></term><description><paramref name="value" /> jest większa niż zero.</span><span class="sxs-lookup"><span data-stu-id="cd119-873"></term><description><paramref name="value" /> is greater than zero.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd119-874">W poniższym przykładzie pokazano sposób użycia <xref:System.Math.Sign%28System.Single%29> metodę, aby określić znak <xref:System.Single> wartość i wyświetl ją do konsoli.</span><span class="sxs-lookup"><span data-stu-id="cd119-874">The following example demonstrates how to use the <xref:System.Math.Sign%28System.Single%29> method to determine the sign of a <xref:System.Single> value and display it to the console.</span></span>  
  
 [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]
 [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]
 [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArithmeticException">
          <span data-ttu-id="cd119-875"><paramref name="value" /> jest równa <see cref="F:System.Single.NaN" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-875"><paramref name="value" /> is equal to <see cref="F:System.Single.NaN" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Sin">
      <MemberSignature Language="C#" Value="public static double Sin (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sin(float64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sin(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sin (a As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Sin(double a);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="cd119-876">Kąt wyrażony w radianach.</span><span class="sxs-lookup"><span data-stu-id="cd119-876">An angle, measured in radians.</span></span></param>
        <summary><span data-ttu-id="cd119-877">Zwraca sinus określonego kąta.</span><span class="sxs-lookup"><span data-stu-id="cd119-877">Returns the sine of the specified angle.</span></span></summary>
        <returns><span data-ttu-id="cd119-878">Sinus <paramref name="a" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-878">The sine of <paramref name="a" />.</span></span> <span data-ttu-id="cd119-879">Jeśli <paramref name="a" /> jest równa <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, lub <see cref="F:System.Double.PositiveInfinity" />, ta metoda zwraca <see cref="F:System.Double.NaN" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-879">If <paramref name="a" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, this method returns <see cref="F:System.Double.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd119-880">Kąt `a`, musi być podany w radianach.</span><span class="sxs-lookup"><span data-stu-id="cd119-880">The angle, `a`, must be in radians.</span></span> <span data-ttu-id="cd119-881">Mnożenie przez <xref:System.Math.PI?displayProperty=nameWithType>/180 do Konwertuj stopnie na radiany.</span><span class="sxs-lookup"><span data-stu-id="cd119-881">Multiply by <xref:System.Math.PI?displayProperty=nameWithType>/180 to convert degrees to radians.</span></span>  
  
 <span data-ttu-id="cd119-882">Dopuszczalne wartości `a` z zakresu od około-9223372036854775295 do około 9223372036854775295.</span><span class="sxs-lookup"><span data-stu-id="cd119-882">Acceptable values of `a` range from approximately -9223372036854775295 to approximately 9223372036854775295.</span></span> <span data-ttu-id="cd119-883">Dla wartości poza tym zakresem <xref:System.Math.Sin%2A> metoda zwraca `a` niezmienione zamiast zgłaszać wyjątek.</span><span class="sxs-lookup"><span data-stu-id="cd119-883">For values outside of this range, the <xref:System.Math.Sin%2A> method returns `a` unchanged rather than throwing an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd119-884">W poniższym przykładzie użyto <xref:System.Math.Sin%2A> do oceny niektórych trygonometryczne tożsamości dla wybranych kątów.</span><span class="sxs-lookup"><span data-stu-id="cd119-884">The following example uses <xref:System.Math.Sin%2A> to evaluate certain trigonometric identities for selected angles.</span></span>  
  
 [!code-cpp[System.Math.SinCos#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.SinCos/CPP/sincos.cpp#1)]
 [!code-csharp[System.Math.SinCos#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.SinCos/CS/sincos.cs#1)]
 [!code-vb[System.Math.SinCos#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.SinCos/VB/sincos.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sinh">
      <MemberSignature Language="C#" Value="public static double Sinh (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sinh(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sinh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sinh (value As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Sinh(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="cd119-885">Kąt wyrażony w radianach.</span><span class="sxs-lookup"><span data-stu-id="cd119-885">An angle, measured in radians.</span></span></param>
        <summary><span data-ttu-id="cd119-886">Zwraca sinus hiperboliczny podanemu kątowi.</span><span class="sxs-lookup"><span data-stu-id="cd119-886">Returns the hyperbolic sine of the specified angle.</span></span></summary>
        <returns><span data-ttu-id="cd119-887">Sinus hiperboliczny <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-887">The hyperbolic sine of <paramref name="value" />.</span></span> <span data-ttu-id="cd119-888">Jeśli <paramref name="value" /> jest równa <see cref="F:System.Double.NegativeInfinity" />, <see cref="F:System.Double.PositiveInfinity" />, lub <see cref="F:System.Double.NaN" />, ta metoda zwraca <see cref="T:System.Double" /> równa <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-888">If <paramref name="value" /> is equal to <see cref="F:System.Double.NegativeInfinity" />, <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NaN" />, this method returns a <see cref="T:System.Double" /> equal to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd119-889">Kąt `value`, musi być podany w radianach.</span><span class="sxs-lookup"><span data-stu-id="cd119-889">The angle, `value`, must be in radians.</span></span> <span data-ttu-id="cd119-890">Mnożenie przez <xref:System.Math.PI?displayProperty=nameWithType>/180 do Konwertuj stopnie na radiany.</span><span class="sxs-lookup"><span data-stu-id="cd119-890">Multiply by <xref:System.Math.PI?displayProperty=nameWithType>/180 to convert degrees to radians.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd119-891">W poniższym przykładzie użyto <xref:System.Math.Sinh%2A> do oceny niektórych hiperboliczny tożsamości dla wybranych wartości.</span><span class="sxs-lookup"><span data-stu-id="cd119-891">The following example uses <xref:System.Math.Sinh%2A> to evaluate certain hyperbolic identities for selected values.</span></span>  
  
 [!code-cpp[System.Math.SinhCosh#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.SinhCosh/CPP/sinhcosh.cpp#1)]
 [!code-csharp[System.Math.SinhCosh#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.SinhCosh/CS/sinhcosh.cs#1)]
 [!code-vb[System.Math.SinhCosh#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.SinhCosh/VB/sinhcosh.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sqrt">
      <MemberSignature Language="C#" Value="public static double Sqrt (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sqrt(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sqrt(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sqrt (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Sqrt(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="cd119-892">Liczba, której pierwiastek kwadratowy ma zostać znaleziona.</span><span class="sxs-lookup"><span data-stu-id="cd119-892">The number whose square root is to be found.</span></span></param>
        <summary><span data-ttu-id="cd119-893">Zwraca pierwiastek kwadratowy z podanej liczby.</span><span class="sxs-lookup"><span data-stu-id="cd119-893">Returns the square root of a specified number.</span></span></summary>
        <returns><span data-ttu-id="cd119-894">Jedna z wartości w tabeli poniżej.</span><span class="sxs-lookup"><span data-stu-id="cd119-894">One of the values in the following table.</span></span>  
  
 <span data-ttu-id="cd119-895"><list type="table"><listheader><term><paramref name="d" /> Parametr</span><span class="sxs-lookup"><span data-stu-id="cd119-895"><list type="table"><listheader><term><paramref name="d" /> parameter</span></span>  
  
 <span data-ttu-id="cd119-896"></term><description> Wartość zwracana</span><span class="sxs-lookup"><span data-stu-id="cd119-896"></term><description> Return value</span></span>  
  
 <span data-ttu-id="cd119-897"></description></listheader><item><term> Zero lub dodatnie</span><span class="sxs-lookup"><span data-stu-id="cd119-897"></description></listheader><item><term> Zero or positive</span></span>  
  
 <span data-ttu-id="cd119-898"></term><description> Dodatnia pierwiastek kwadratowy liczby <paramref name="d" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-898"></term><description> The positive square root of <paramref name="d" />.</span></span>  
  
 <span data-ttu-id="cd119-899"></description></item><item><term> Ujemna</span><span class="sxs-lookup"><span data-stu-id="cd119-899"></description></item><item><term> Negative</span></span>  
  
 <span data-ttu-id="cd119-900"></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> Equals <see cref="F:System.Double.NaN" /> </term> <description> <see cref="F:System.Double.NaN" /> </description> </item> <item> <term> jest równe <see cref="F:System.Double.PositiveInfinity" /></term><description><see cref="F:System.Double.PositiveInfinity" /></description></item></list></span><span class="sxs-lookup"><span data-stu-id="cd119-900"></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> Equals <see cref="F:System.Double.NaN" /></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> Equals <see cref="F:System.Double.PositiveInfinity" /></term><description><see cref="F:System.Double.PositiveInfinity" /></description></item></list></span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd119-901">Pierwiastek kwadratowy obszaru kwadrat reprezentuje długość boków kwadratu.</span><span class="sxs-lookup"><span data-stu-id="cd119-901">The square root of the area of a square represents the length of any side of the square.</span></span> <span data-ttu-id="cd119-902">Poniższy przykład przedstawia obszaru niektórych miastach w Stanach Zjednoczonych i daje wyobrażenie o rozmiarze każdemu miastu, jeśli były reprezentowane przez kwadrat.</span><span class="sxs-lookup"><span data-stu-id="cd119-902">The following example displays the area of some cities in the United States and gives an impression of each city's size if it were represented by a square.</span></span>  
  
 [!code-csharp[System.Math.Sqrt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.sqrt/cs/sqrt1.cs#1)]
 [!code-vb[System.Math.Sqrt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.sqrt/vb/sqrt1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Pow(System.Double,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Tan">
      <MemberSignature Language="C#" Value="public static double Tan (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Tan(float64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Tan(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Tan (a As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Tan(double a);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="cd119-903">Kąt wyrażony w radianach.</span><span class="sxs-lookup"><span data-stu-id="cd119-903">An angle, measured in radians.</span></span></param>
        <summary><span data-ttu-id="cd119-904">Zwraca tangens odpowiadający podanemu kątowi.</span><span class="sxs-lookup"><span data-stu-id="cd119-904">Returns the tangent of the specified angle.</span></span></summary>
        <returns><span data-ttu-id="cd119-905">Tangens <paramref name="a" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-905">The tangent of <paramref name="a" />.</span></span> <span data-ttu-id="cd119-906">Jeśli <paramref name="a" /> jest równa <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, lub <see cref="F:System.Double.PositiveInfinity" />, ta metoda zwraca <see cref="F:System.Double.NaN" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-906">If <paramref name="a" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, this method returns <see cref="F:System.Double.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd119-907">Kąt `a`, musi być podany w radianach.</span><span class="sxs-lookup"><span data-stu-id="cd119-907">The angle, `a`, must be in radians.</span></span> <span data-ttu-id="cd119-908">Mnożenie przez <xref:System.Math.PI?displayProperty=nameWithType>/180 do Konwertuj stopnie na radiany.</span><span class="sxs-lookup"><span data-stu-id="cd119-908">Multiply by <xref:System.Math.PI?displayProperty=nameWithType>/180 to convert degrees to radians.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd119-909">W poniższym przykładzie pokazano sposób Oblicz tangens kąta i wyświetl ją do konsoli.</span><span class="sxs-lookup"><span data-stu-id="cd119-909">The following example demonstrates how to calculate the tangent of an angle and display it to the console.</span></span>  
  
 [!code-cpp[math.atanx#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.atanx/CPP/atan.cpp#1)]
 [!code-csharp[math.atanx#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.atanx/CS/atan.cs#1)]
 [!code-vb[math.atanx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.atanx/VB/atan.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tanh">
      <MemberSignature Language="C#" Value="public static double Tanh (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Tanh(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Tanh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Tanh (value As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Tanh(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="cd119-910">Kąt wyrażony w radianach.</span><span class="sxs-lookup"><span data-stu-id="cd119-910">An angle, measured in radians.</span></span></param>
        <summary><span data-ttu-id="cd119-911">Zwraca tangens hiperboliczny podanemu kątowi.</span><span class="sxs-lookup"><span data-stu-id="cd119-911">Returns the hyperbolic tangent of the specified angle.</span></span></summary>
        <returns><span data-ttu-id="cd119-912">Tangens hiperboliczny liczby <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-912">The hyperbolic tangent of <paramref name="value" />.</span></span> <span data-ttu-id="cd119-913">Jeśli <paramref name="value" /> jest równa <see cref="F:System.Double.NegativeInfinity" />, ta metoda zwraca wartość -1.</span><span class="sxs-lookup"><span data-stu-id="cd119-913">If <paramref name="value" /> is equal to <see cref="F:System.Double.NegativeInfinity" />, this method returns -1.</span></span> <span data-ttu-id="cd119-914">Jeśli wartość jest równa <see cref="F:System.Double.PositiveInfinity" />, ta metoda zwraca wartość 1.</span><span class="sxs-lookup"><span data-stu-id="cd119-914">If value is equal to <see cref="F:System.Double.PositiveInfinity" />, this method returns 1.</span></span> <span data-ttu-id="cd119-915">Jeśli <paramref name="value" /> jest równa <see cref="F:System.Double.NaN" />, ta metoda zwraca <see cref="F:System.Double.NaN" />.</span><span class="sxs-lookup"><span data-stu-id="cd119-915">If <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />, this method returns <see cref="F:System.Double.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd119-916">Kąt `value`, musi być podany w radianach.</span><span class="sxs-lookup"><span data-stu-id="cd119-916">The angle, `value`, must be in radians.</span></span> <span data-ttu-id="cd119-917">Mnożenie przez <xref:System.Math.PI?displayProperty=nameWithType>/180 do Konwertuj stopnie na radiany.</span><span class="sxs-lookup"><span data-stu-id="cd119-917">Multiply by <xref:System.Math.PI?displayProperty=nameWithType>/180 to convert degrees to radians.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd119-918">W poniższym przykładzie użyto <xref:System.Math.Tanh%2A> do oceny niektórych tangens hiperboliczny tożsamości wybranych wartości.</span><span class="sxs-lookup"><span data-stu-id="cd119-918">The following example uses <xref:System.Math.Tanh%2A> to evaluate certain hyperbolic tangent identities for selected values.</span></span>  
  
 [!code-cpp[System.Math.Tanh#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.Tanh/CPP/tanh.cpp#1)]
 [!code-csharp[System.Math.Tanh#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Tanh/CS/tanh.cs#1)]
 [!code-vb[System.Math.Tanh#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Tanh/VB/tanh.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Truncate">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cd119-919">Oblicza integralną część liczby.</span><span class="sxs-lookup"><span data-stu-id="cd119-919">Calculates the integral part of a number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd119-920">Liczba jest zaokrąglana do najbliższej liczby całkowitej w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="cd119-920">The number is rounded to the nearest integer towards zero.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Truncate">
      <MemberSignature Language="C#" Value="public static decimal Truncate (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Truncate(valuetype System.Decimal d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Truncate(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Truncate (d As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Truncate(System::Decimal d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="cd119-921">Liczba obcięcia.</span><span class="sxs-lookup"><span data-stu-id="cd119-921">A number to truncate.</span></span></param>
        <summary><span data-ttu-id="cd119-922">Oblicza integralną częścią określony liczbą dziesiętną.</span><span class="sxs-lookup"><span data-stu-id="cd119-922">Calculates the integral part of a specified decimal number.</span></span></summary>
        <returns><span data-ttu-id="cd119-923">Integralną częścią <paramref name="d" />; oznacza to, liczba który pozostaje po wszelkich cyfr ułamkowych zostały odrzucone.</span><span class="sxs-lookup"><span data-stu-id="cd119-923">The integral part of <paramref name="d" />; that is, the number that remains after any fractional digits have been discarded.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd119-924"><xref:System.Math.Truncate%2A> Zaokrągla `d` do najbliższej liczby całkowitej w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="cd119-924"><xref:System.Math.Truncate%2A> rounds `d` to the nearest integer towards zero.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd119-925">Następujące przykładowe wywołania <xref:System.Math.Truncate%28System.Decimal%29> metody obcięcia zarówno pozytywnych i ujemny <xref:System.Decimal> wartość.</span><span class="sxs-lookup"><span data-stu-id="cd119-925">The following example calls the <xref:System.Math.Truncate%28System.Decimal%29> method to truncate both a positive and a negative <xref:System.Decimal> value.</span></span>  
  
 [!code-csharp[System.Math.Truncate#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Truncate/cs/Truncate1.cs#2)]
 [!code-vb[System.Math.Truncate#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Truncate/vb/Truncate1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Math.Round" />
        <altmember cref="M:System.Math.Ceiling(System.Decimal)" />
        <altmember cref="M:System.Math.Floor(System.Decimal)" />
      </Docs>
    </Member>
    <Member MemberName="Truncate">
      <MemberSignature Language="C#" Value="public static double Truncate (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Truncate(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Truncate(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Truncate (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Truncate(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="cd119-926">Liczba obcięcia.</span><span class="sxs-lookup"><span data-stu-id="cd119-926">A number to truncate.</span></span></param>
        <summary><span data-ttu-id="cd119-927">Oblicza integralną częścią podanej liczbie zmiennoprzecinkowej podwójnej precyzji.</span><span class="sxs-lookup"><span data-stu-id="cd119-927">Calculates the integral part of a specified double-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="cd119-928">Integralną częścią <paramref name="d" />; oznacza to, liczba który pozostaje po wszelkich cyfr ułamkowych zostały odrzucone lub jedna z wartości wymienionych w poniższej tabeli.</span><span class="sxs-lookup"><span data-stu-id="cd119-928">The integral part of <paramref name="d" />; that is, the number that remains after any fractional digits have been discarded, or one of the values listed in the following table.</span></span>  
  
 <span data-ttu-id="cd119-929"><list type="table"><listheader><term><paramref name="d" /></term><description> Wartość zwracana</span><span class="sxs-lookup"><span data-stu-id="cd119-929"><list type="table"><listheader><term><paramref name="d" /></term><description> Return value</span></span>  
  
 </description></listheader><item><term><see cref="F:System.Double.NaN" /></term><description><see cref="F:System.Double.NaN" /></description></item><item><term><see cref="F:System.Double.NegativeInfinity" /></term><description><see cref="F:System.Double.NegativeInfinity" /></description></item><item><term><see cref="F:System.Double.PositiveInfinity" /></term><description><see cref="F:System.Double.PositiveInfinity" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd119-930"><xref:System.Math.Truncate%2A> Zaokrągla `d` do najbliższej liczby całkowitej w kierunku zera.</span><span class="sxs-lookup"><span data-stu-id="cd119-930"><xref:System.Math.Truncate%2A> rounds `d` to the nearest integer towards zero.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd119-931">Następujące przykładowe wywołania <xref:System.Math.Truncate%28System.Double%29> metody obcięcia zarówno pozytywnych i ujemny <xref:System.Double> wartość.</span><span class="sxs-lookup"><span data-stu-id="cd119-931">The following example calls the <xref:System.Math.Truncate%28System.Double%29> method to truncate both a positive and a negative <xref:System.Double> value.</span></span>  
  
 [!code-csharp[System.Math.Truncate#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Truncate/cs/Truncate1.cs#1)]
 [!code-vb[System.Math.Truncate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Truncate/vb/Truncate1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Math.Round" />
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
      </Docs>
    </Member>
  </Members>
</Type>