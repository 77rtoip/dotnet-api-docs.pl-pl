<Type Name="IFormattable" FullName="System.IFormattable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9fc0bc7f4795e380e97f82eea143f43e349c98a7" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69420199" /></Metadata><TypeSignature Language="C#" Value="public interface IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.IFormattable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IFormattable" />
  <TypeSignature Language="F#" Value="type IFormattable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Zapewnia funkcjonalność do formatowania wartości obiektu w postaci ciągu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IFormattable> Interfejs Konwertuje obiekt na reprezentację ciągu na podstawie ciągu formatu i dostawcy formatu.  
  
 Ciąg formatu zazwyczaj definiuje ogólny wygląd obiektu. Na przykład .NET Framework obsługuje następujące elementy:  
  
-   Ciągi formatu standardowego dla wartości wyliczenia formatowania (zobacz [ciągi formatujące Wyliczenie](~/docs/standard/base-types/enumeration-format-strings.md)).  
  
-   Standardowe i niestandardowe ciągi formatujące do formatowania wartości liczbowych (zobacz [standardowe](~/docs/standard/base-types/standard-numeric-format-strings.md) ciągi formatujące numeryczne i [ciągi formatujące niestandardowe](~/docs/standard/base-types/custom-numeric-format-strings.md)).  
  
-   Standardowe i niestandardowe ciągi formatujące do formatowania wartości daty i godziny (zobacz [ciągi standardowego formatu daty i godziny](~/docs/standard/base-types/standard-date-and-time-format-strings.md) oraz [Niestandardowe ciągi formatujące datę i godzinę](~/docs/standard/base-types/custom-date-and-time-format-strings.md)).  
  
-   Standardowe i niestandardowe ciągi formatów do formatowania interwałów czasu (zobacz [Standard TimeSpan Format Strings](~/docs/standard/base-types/standard-timespan-format-strings.md) i [Custom TimeSpan format String](~/docs/standard/base-types/custom-timespan-format-strings.md)).  
  
 Możesz również zdefiniować własne ciągi formatujące do obsługi formatowania typów zdefiniowanych przez aplikację.  
  
 Dostawca formatu zwraca obiekt formatowania, który zwykle definiuje symbole używane w konwersji obiektu na jego reprezentację w postaci ciągu. Na przykład podczas konwertowania liczby na wartość walutową dostawca formatu definiuje symbol waluty, który pojawia się w ciągu wynikowym. .NET Framework definiuje trzech dostawców formatów:  
  
-   Klasa, która zwraca <xref:System.Globalization.NumberFormatInfo> obiekt do formatowania wartości <xref:System.Globalization.DateTimeFormatInfo> numerycznych lub obiektu do formatowania wartości daty i godziny. <xref:System.Globalization.CultureInfo?displayProperty=nameWithType>  
  
-   <xref:System.Globalization.NumberFormatInfo?displayProperty=nameWithType> Klasa, która zwraca wystąpienie samego siebie do formatowania wartości numerycznych.  
  
-   <xref:System.Globalization.DateTimeFormatInfo?displayProperty=nameWithType> Klasa, która zwraca wystąpienie samego siebie do formatowania wartości daty i godziny.  
  
 Ponadto możesz zdefiniować własnych niestandardowych dostawców formatów, aby dostarczać specyficzne dla kultury, specyficzne dla konkretnych zawodów lub specyficzne dla branży informacje używane w formatowaniu. Aby uzyskać więcej informacji na temat implementowania niestandardowego formatowania przy użyciu niestandardowego dostawcy formatu <xref:System.ICustomFormatter>, zobacz.  
  
 Interfejs definiuje pojedynczą <xref:System.IFormattable.ToString%2A>metodę, która dostarcza usługi formatowania dla typu implementującego. <xref:System.IFormattable> <xref:System.IFormattable.ToString%2A> Metodę można wywołać bezpośrednio. Ponadto jest on wywoływany automatycznie przez <xref:System.Convert.ToString%28System.Object%29?displayProperty=nameWithType> metody i <xref:System.Convert.ToString%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> i metodami korzystającymi z [funkcji formatowania złożonego](~/docs/standard/base-types/composite-formatting.md) w .NET Framework. Takie metody obejmują <xref:System.Console.WriteLine%28System.String%2CSystem.Object%29?displayProperty=nameWithType>, <xref:System.String.Format%2A?displayProperty=nameWithType>, i <xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%29?displayProperty=nameWithType>, między innymi. <xref:System.IFormattable.ToString%2A> Metoda jest wywoływana dla każdego elementu formatu w ciągu formatu metody.  
  
 <xref:System.IFormattable> Interfejs jest implementowany przez podstawowe typy danych.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano `Temperature` klasę, która <xref:System.IFormattable> implementuje interfejs. Klasa obsługuje cztery specyfikatory formatu: "G" i "C" wskazujący, że temperatura ma być wyświetlana w c. "F", co oznacza, że temperatura ma być wyświetlana w Fahrenheita; i "K", co oznacza, że temperatura ma być wyświetlana w Kelvin. Ponadto <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementacja może również obsługiwać ciąg formatu, który jest `null` lub pusty. Pozostałe dwie `ToString` metody zdefiniowane `Temperature` przez klasę po prostu <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> zawijają wywołanie do implementacji.  
  
 [!code-csharp[System.IFormattable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iformattable/cs/example1.cs#1)]
 [!code-vb[System.IFormattable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iformattable/vb/example1.vb#1)]  
  
 Poniższy przykład następnie wywołuje <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementację bezpośrednio lub przy użyciu ciągu formatu złożonego.  
  
 [!code-csharp[System.IFormattable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iformattable/cs/example1.cs#2)]
 [!code-vb[System.IFormattable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iformattable/vb/example1.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Klasy, które wymagają większej kontroli nad formatowaniem ciągów od <see cref="M:System.Object.ToString" /> , powinny implementować. <see cref="T:System.IFormattable" />  
  
Klasa implementująca <see cref="T:System.IFormattable" /> musi obsługiwać specyfikator formatu "G" (ogólne). Oprócz specyfikatora "G", Klasa może definiować listę specyfikatorów formatu, które obsługuje. Ponadto Klasa musi być przygotowana do obsługi specyfikatora <see langword="null" />formatu. Aby uzyskać więcej informacji na temat formatowania i formatowania kodów, zobacz [Typy formatowania](~/docs/standard/base-types/formatting-types.md)</para></block>
    <altmember cref="T:System.IFormatProvider" />
    <altmember cref="M:System.Object.ToString" />
    <altmember cref="P:System.Threading.Thread.CurrentCulture" />
    <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Formatowanie typów w programie .NET</related>
  </Docs>
  <Members>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="abstract member ToString : string * IFormatProvider -&gt; string" Usage="iFormattable.ToString (format, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Format do użycia.  
  
—lub— 
Odwołanie o wartości null<see langword="Nothing" /> (w Visual Basic) do użycia domyślnego formatu zdefiniowanego dla typu <see cref="T:System.IFormattable" /> implementacji.</param>
        <param name="formatProvider">Dostawca służący do formatowania wartości.  
  
—lub— 
Odwołanie o wartości null<see langword="Nothing" /> (w Visual Basic), aby uzyskać informacje o formacie liczbowym z bieżących ustawień regionalnych systemu operacyjnego.</param>
        <summary>Formatuje wartość bieżącego wystąpienia w określonym formacie.</summary>
        <returns>Wartość bieżącego wystąpienia w określonym formacie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IFormattable.ToString%2A> Metoda konwertuje wartość na reprezentację w postaci ciągu, która może być wyrażona na wiele sposobów. Dokładny format zależy od określonych symboli lub określonej kolejności zdefiniowanej przez określone kultury, zawody lub branże. Metodę można wywołać bezpośrednio. Jest on również wywoływany automatycznie przez <xref:System.Convert.ToString%28System.Object%29?displayProperty=nameWithType> metody <xref:System.Convert.ToString%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> i i metodami korzystającymi z funkcji formatowania złożonego w .NET Framework, takich jak <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>, <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>, i <xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>. (Aby uzyskać więcej informacji, zobacz [formatowanie złożone](~/docs/standard/base-types/composite-formatting.md)).  
  
 Metody formatowania złożonego wywołują <xref:System.IFormattable.ToString%2A> metodę jednokrotnie dla każdego elementu formatu w ciągu formatu. Parametry przesłane do metody zależą od określonej metody formatowania, która jest wywoływana i dla zawartości elementu format, w następujący sposób:  
  
-   Jeśli element formatu nie zawiera ciągu formatu (na przykład jeśli element formatu jest po prostu `{0}`), jest przesyłany `null` <xref:System.String?displayProperty=nameWithType> jako wartość parametru.  
  
-   Jeśli element formatu zawiera ciąg formatu (na przykład `{0:G}`), ten ciąg formatu jest przenoszona jako wartość <xref:System.String?displayProperty=nameWithType> parametru.  
  
-   Jeśli oryginalne wywołanie metody nie zawiera <xref:System.IFormatProvider?displayProperty=nameWithType> parametru, <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> jest przenoszona <xref:System.IFormatProvider?displayProperty=nameWithType> jako wartość parametru.  
  
-   Jeśli oryginalne wywołanie metody zawiera <xref:System.IFormatProvider?displayProperty=nameWithType> parametr, dostawca dostarczony w wywołaniu metody jest przekazywany jako wartość <xref:System.IFormatProvider?displayProperty=nameWithType> parametru.  
  
> [!NOTE]
>  <xref:System.IFormattable.ToString%2A> Implementacja obiektu jest nazywana metodami formatowania złożonego tylko wtedy, gdy nie <xref:System.ICustomFormatter> przechodzą <xref:System.ICustomFormatter.Format%2A> dostawcy formatowania lub metoda zwraca `null`dostawcę formatowania niestandardowego.  
  
 .NET Framework obejmuje trzy dostawców formatów, z których wszystkie implementują <xref:System.IFormatProvider> interfejs:  
  
-   <xref:System.Globalization.NumberFormatInfo>dostarcza informacje o formatowaniu liczb, takie jak znaki, które mają być używane dla separatorów dziesiętnych i grup, oraz pisownię i rozmieszczenie symboli walut w wartościach pieniężnych.  
  
-   <xref:System.Globalization.DateTimeFormatInfo>dostarcza informacje dotyczące formatowania powiązane z datami i czasu, takie jak pozycja miesiąca, dzień i rok w wzorcu daty.  
  
-   <xref:System.Globalization.CultureInfo>zawiera domyślne informacje o formatowaniu w określonej kulturze, w tym informacje o formacie liczbowym oraz informacje dotyczące formatowania powiązane z datami i czasowo.  
  
 Ponadto można zdefiniować własnego niestandardowego dostawcy formatu.  
  
   
  
## Examples  
 Poniższy przykład ilustruje `Temperature` klasę, która <xref:System.IFormattable.ToString%2A> implementuje metodę. Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.IFormattable> klasy.  
  
 [!code-csharp[System.IFormattable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iformattable/cs/example1.cs#1)]
 [!code-vb[System.IFormattable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iformattable/vb/example1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" /> Metoda musi obsługiwać specyfikator formatu "G" (ogólne). Oprócz specyfikatora "G", Klasa może definiować listę specyfikatorów formatu, które obsługuje. Ponadto Klasa musi być przygotowana do obsługi specyfikatora <see langword="null" />formatu. Aby uzyskać więcej informacji na temat formatowania i formatowania kodów, zobacz [Typy formatowania](~/docs/standard/base-types/formatting-types.md).</para></block>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.IFormatProvider" />
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
  </Members>
</Type>
