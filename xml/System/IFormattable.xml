<Type Name="IFormattable" FullName="System.IFormattable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f1ee32cae285a624ff6ceecaa94663848cf18034" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30744026" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.IFormattable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IFormattable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Zapewnia funkcje do formatowania wartości obiektu do reprezentacji w postaci ciągu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IFormattable> Interfejsu Konwertuje obiekt reprezentacji ciągu na podstawie ciągu formatowania i dostawca formatu.  
  
 Ciąg formatu zwykle definiuje ogólny wygląd obiektu. Na przykład .NET Framework obsługuje następujące funkcje:  
  
-   Standardowe ciągi formatujące formatowania wartości wyliczenia (zobacz [wyliczanie ciągów formatujących](~/docs/standard/base-types/enumeration-format-strings.md)).  
  
-   Ciągi formatujące standardowe i niestandardowe do formatowania wartości liczbowych (zobacz [standardowe ciągi formatu liczbowego](~/docs/standard/base-types/standard-numeric-format-strings.md) i [niestandardowych ciągów formatu liczbowego](~/docs/standard/base-types/custom-numeric-format-strings.md)).  
  
-   Ciągi formatujące standardowe i niestandardowe do formatowania wartości daty i godziny (zobacz [standardowe ciągi daty i godziny Format](~/docs/standard/base-types/standard-date-and-time-format-strings.md) i [niestandardowe ciągi daty i godziny Format](~/docs/standard/base-types/custom-date-and-time-format-strings.md)).  
  
-   Ciągi formatujące standardowe i niestandardowe formatowania przedziały czasu (zobacz [standardowe ciągi formatujące TimeSpan](~/docs/standard/base-types/standard-timespan-format-strings.md) i [niestandardowe ciągi formatujące TimeSpan](~/docs/standard/base-types/custom-timespan-format-strings.md)).  
  
 Istnieje również możliwość definiowania własnych ciągów formatujących do obsługi formatowania dla typów zdefiniowanych przez aplikację.  
  
 Dostawca formatu zwraca obiekt formatowania, który zwykle definiuje symbole używane w konwersji obiektu do reprezentacji ciągu. Na przykład jeśli Konwertuj liczbę na wartość waluty, dostawca formatu definiuje symbol waluty, która pojawia się w ciągu wynik. .NET Framework definiuje trzy dostawców formatu:  
  
-   <xref:System.Globalization.CultureInfo?displayProperty=nameWithType> Klasy, która zwraca albo <xref:System.Globalization.NumberFormatInfo> obiektu dla formatowanie wartości numerycznych lub <xref:System.Globalization.DateTimeFormatInfo> obiektu do formatowania wartości daty i godziny.  
  
-   <xref:System.Globalization.NumberFormatInfo?displayProperty=nameWithType> Klasy, która zwraca wystąpienia samej siebie do formatowania wartości liczbowych.  
  
-   <xref:System.Globalization.DateTimeFormatInfo?displayProperty=nameWithType> Klasy, która zwraca wystąpienia samej siebie do formatowania wartości daty i godziny.  
  
 Ponadto można definiować własnych dostawców niestandardowych formatów umożliwiają określanie wartości specyficzne dla kultury, specyficzne dla zawód lub informacje dotyczące branży używaną w formatowaniu. Aby uzyskać więcej informacji o implementacji niestandardowe formatowanie przy użyciu formatu niestandardowego dostawcy, zobacz <xref:System.ICustomFormatter>.  
  
 <xref:System.IFormattable> Interfejs definiuje jedną metodę <xref:System.IFormattable.ToString%2A>, która dostarcza formatowania usługi o typie implementującej. <xref:System.IFormattable.ToString%2A> Metodę można wywołać bezpośrednio. Ponadto, jest ona wywoływana automatycznie przez <xref:System.Convert.ToString%28System.Object%29?displayProperty=nameWithType> i <xref:System.Convert.ToString%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> metod oraz metody, które używają [złożonych funkcji formatowania](~/docs/standard/base-types/composite-formatting.md) w programie .NET Framework. Tych metod uwzględnić <xref:System.Console.WriteLine%28System.String%2CSystem.Object%29?displayProperty=nameWithType>, <xref:System.String.Format%2A?displayProperty=nameWithType>, i <xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%29?displayProperty=nameWithType>, między innymi. <xref:System.IFormattable.ToString%2A> Metoda jest wywoływana dla każdego elementu formatu w ciągu formatu metody.  
  
 <xref:System.IFormattable> Interfejs jest implementowany przez podstawowe typy danych.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano `Temperature` klasa implementująca <xref:System.IFormattable> interfejsu. Klasa obsługuje cztery specyfikatory formatu: "G" i "C", które wskazują, że temperatura mają być wyświetlane w c; "F", co oznacza, że temperatura ma być wyświetlany w f; i "K", co oznacza, że temperatura ma być wyświetlany w kelvin —. Ponadto <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> również implementacja może obsłużyć ciąg formatu, który jest `null` lub jest pusty. Pozostałe dwa `ToString` metody zdefiniowane przez `Temperature` klasy po prostu zawijać wywołanie <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementacji.  
  
 [!code-csharp[System.IFormattable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iformattable/cs/example1.cs#1)]
 [!code-vb[System.IFormattable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iformattable/vb/example1.vb#1)]  
  
 Poniższy przykład wywołuje <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementacji bezpośrednio lub za pomocą ciągu formatu złożonego.  
  
 [!code-csharp[System.IFormattable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iformattable/cs/example1.cs#2)]
 [!code-vb[System.IFormattable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iformattable/vb/example1.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Klasy, które wymagają większą kontrolę nad formatowanie ciągów niż <see cref="M:System.Object.ToString" /> zapewnia powinien implementować <see cref="T:System.IFormattable" />.  
  
 Klasa, która implementuje <see cref="T:System.IFormattable" /> musi obsługiwać specyfikator formatu (Ogólne) "G". Oprócz specyfikatora "G" klasy można zdefiniować listę specyfikatory formatu, które obsługuje. Ponadto klasy muszą być przygotowane do obsługi specyfikatora formatu, który jest <see langword="null" />. Aby uzyskać więcej informacji na temat formatowanie i kody formatowania, zobacz [typy formatowania](~/docs/standard/base-types/formatting-types.md)</para>
    </block>
    <altmember cref="T:System.IFormatProvider" />
    <altmember cref="M:System.Object.ToString" />
    <altmember cref="P:System.Threading.Thread.CurrentCulture" />
  </Docs>
  <Members>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Format, który ma być używany.  
  
 —lub—  
  
 Odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic) Aby użyć domyślnego formatu zdefiniowany dla typu <see cref="T:System.IFormattable" /> implementacji.</param>
        <param name="formatProvider">Dostawcę, który ma być używany do formatowania wartości.  
  
 —lub—  
  
 Odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic) można uzyskać informacji formatujące z bieżących ustawień regionalnych systemu operacyjnego.</param>
        <summary>Formatuje wartość bieżącego wystąpienia przy użyciu określonego formatu.</summary>
        <returns>Wartość bieżącego wystąpienia w określonym formacie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IFormattable.ToString%2A> Metoda konwertuje wartość na reprezentację ciągu, który może zostać wyrażona na wiele sposobów. Formatem dokładne zależy od określonego symboli lub określonej kolejności zdefiniowane przez określone kultury, zawodowych lub przemysłach. Metodę można wywołać bezpośrednio. Jest również nazywany automatycznie przez <xref:System.Convert.ToString%28System.Object%29?displayProperty=nameWithType> i <xref:System.Convert.ToString%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> metod oraz metody, które używają złożone formatowanie funkcję w programie .NET Framework, takich jak <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>, <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>, i <xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>. (Aby uzyskać więcej informacji, zobacz [złożone formatowanie](~/docs/standard/base-types/composite-formatting.md).)  
  
 Złożone formatowanie wywołania metody <xref:System.IFormattable.ToString%2A> metody raz dla każdego elementu formatu w ciągu formatu. Parametry przekazane do metody zależą od określonego formatowania metodę, która jest wywoływana i zawartość elementu format, w następujący sposób:  
  
-   Jeśli element formatu nie zawiera ciąg formatu (na przykład, jeśli element formatu jest po prostu `{0}`), jest przekazywany `null` jako wartość <xref:System.String?displayProperty=nameWithType> parametru.  
  
-   Jeśli element formatu zawiera ciąg formatu (na przykład `{0:G}`), że ciąg formatu jest przekazywany jako wartość <xref:System.String?displayProperty=nameWithType> parametru.  
  
-   Jeśli oryginalny wywołanie metody nie obejmuje <xref:System.IFormatProvider?displayProperty=nameWithType> parametru <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> jest przekazywany jako wartość <xref:System.IFormatProvider?displayProperty=nameWithType> parametru.  
  
-   Jeśli oryginalny wywołanie metody zawiera <xref:System.IFormatProvider?displayProperty=nameWithType> parametr, dostawcy, który jest dostarczany w wywołaniu metody jest przekazywany jako wartość <xref:System.IFormatProvider?displayProperty=nameWithType> parametru.  
  
> [!NOTE]
>  Obiekt <xref:System.IFormattable.ToString%2A> implementacji jest wywoływana przez złożone metod formatowania tylko wtedy, gdy nie są one przekazywane <xref:System.ICustomFormatter> dostawca formatu lub, jeśli <xref:System.ICustomFormatter.Format%2A> metoda formatu niestandardowego dostawcy zwraca `null`.  
  
 .NET Framework obejmuje trzy dostawców formatu, które implementuje <xref:System.IFormatProvider> interfejsu:  
  
-   <xref:System.Globalization.NumberFormatInfo> dostarcza liczbowych formatowania informacje, takie jak znaki miejsc dziesiętnych i separatorów grup i pisownię i umieszczania symbole waluty w wartości monetarnych.  
  
-   <xref:System.Globalization.DateTimeFormatInfo> udostępnia związane z datą i związanych z czasem formatowania informacje, takie jak pozycja miesiąc, dzień i rok w układzie daty.  
  
-   <xref:System.Globalization.CultureInfo> zawiera domyślne formatowanie informacje określoną kulturę, wraz z informacjami formatujące i związane z datą i związanych z czasem informacje dotyczące formatowania.  
  
 Ponadto można określić dostawcę formatu niestandardowego.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano `Temperature` klasa implementująca <xref:System.IFormattable.ToString%2A> metody. Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.IFormattable> klasy.  
  
 [!code-csharp[System.IFormattable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iformattable/cs/example1.cs#1)]
 [!code-vb[System.IFormattable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iformattable/vb/example1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" /> Metody musi obsługiwać specyfikator formatu (Ogólne) "G". Oprócz specyfikatora "G" klasy można zdefiniować listę specyfikatory formatu, które obsługuje. Ponadto klasy muszą być przygotowane do obsługi specyfikatora formatu, który jest <see langword="null" />. Aby uzyskać więcej informacji na temat formatowanie i kody formatowania, zobacz [typy formatowania](~/docs/standard/base-types/formatting-types.md).</para>
        </block>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.IFormatProvider" />
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
  </Members>
</Type>