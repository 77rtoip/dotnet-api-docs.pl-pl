<Type Name="Delegate" FullName="System.Delegate">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ff46d2238922f0bd6c0a5e0c5fc6b7aad451269d" />
    <Meta Name="ms.sourcegitcommit" Value="84c54c0c7d64827a5637d1f05e74e1f0598606a1" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/27/2018" />
    <Meta Name="ms.locfileid" Value="42955777" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Delegate : ICloneable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract serializable beforefieldinit Delegate extends System.Object implements class System.ICloneable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Delegate" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Delegate&#xA;Implements ICloneable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Delegate abstract : ICloneable, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type Delegate = class&#xA;    interface ICloneable&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="bf708-101">Reprezentuje delegata, która jest strukturą danych, która odwołuje się do metody statycznej lub wystąpienie klasy i metody wystąpienia tej klasy.</span>
      <span class="sxs-lookup">
        <span data-stu-id="bf708-101">Represents a delegate, which is a data structure that refers to a static method or to a class instance and an instance method of that class.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf708-102"><xref:System.Delegate> Klasa to klasa podstawowa dla typów obiektów delegowanych.</span><span class="sxs-lookup"><span data-stu-id="bf708-102">The <xref:System.Delegate> class is the base class for delegate types.</span></span> <span data-ttu-id="bf708-103">Jednak tylko system i kompilatorów mogą dziedziczyć jawnie <xref:System.Delegate> klasy lub <xref:System.MulticastDelegate> klasy.</span><span class="sxs-lookup"><span data-stu-id="bf708-103">However, only the system and compilers can derive explicitly from the <xref:System.Delegate> class or from the <xref:System.MulticastDelegate> class.</span></span> <span data-ttu-id="bf708-104">Ponadto nie jest dozwolone do wyprowadzenia nowego typu z typem delegowanym.</span><span class="sxs-lookup"><span data-stu-id="bf708-104">It is also not permissible to derive a new type from a delegate type.</span></span> <span data-ttu-id="bf708-105"><xref:System.Delegate> Klasy nie jest uznawany za typ delegata; jest klasą używaną do wyprowadzenia typy delegatów.</span><span class="sxs-lookup"><span data-stu-id="bf708-105">The <xref:System.Delegate> class is not considered a delegate type; it is a class used to derive delegate types.</span></span>  
  
 <span data-ttu-id="bf708-106">Implementowanie większość języków `delegate` — słowo kluczowe i kompilatorów dla tych języków mogą pochodzić od <xref:System.MulticastDelegate> klasy; dlatego użytkownicy powinni używać `delegate` — słowo kluczowe, dostarczone przez język.</span><span class="sxs-lookup"><span data-stu-id="bf708-106">Most languages implement a `delegate` keyword, and compilers for those languages are able to derive from the <xref:System.MulticastDelegate> class; therefore, users should use the `delegate` keyword provided by the language.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bf708-107">Środowisko uruchomieniowe języka wspólnego `Invoke` metody dla każdego typu delegata z taką samą sygnaturę jak delegat.</span><span class="sxs-lookup"><span data-stu-id="bf708-107">The common language runtime provides an `Invoke` method for each delegate type, with the same signature as the delegate.</span></span> <span data-ttu-id="bf708-108">Nie trzeba jawnie wywołać tę metodę w języku C#, Visual Basic lub Visual C++, ponieważ kompilatory wywołać ją automatycznie.</span><span class="sxs-lookup"><span data-stu-id="bf708-108">You do not have to call this method explicitly from C#, Visual Basic, or Visual C++, because the compilers call it automatically.</span></span> <span data-ttu-id="bf708-109">`Invoke` Metoda jest przydatna w [odbicia](~/docs/framework/reflection-and-codedom/reflection.md) kiedy chcesz odnaleźć podpisu typu delegata.</span><span class="sxs-lookup"><span data-stu-id="bf708-109">The `Invoke` method is useful in [reflection](~/docs/framework/reflection-and-codedom/reflection.md) when you want to find the signature of the delegate type.</span></span>  
  
 <span data-ttu-id="bf708-110">Środowisko uruchomieniowe języka wspólnego zawiera każdy typ delegata z `BeginInvoke` i `EndInvoke` metody, aby włączyć asynchroniczne wywołanie delegata.</span><span class="sxs-lookup"><span data-stu-id="bf708-110">The common language runtime provides each delegate type with `BeginInvoke` and `EndInvoke` methods, to enable asynchronous invocation of the delegate.</span></span> <span data-ttu-id="bf708-111">Aby uzyskać więcej informacji o tych metodach, zobacz [wywołanie asynchroniczne synchroniczne metody](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span><span class="sxs-lookup"><span data-stu-id="bf708-111">For more information about these methods, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 <span data-ttu-id="bf708-112">Deklaracja typu delegata ustanawia kontraktu, który określa podpis co najmniej jednej metody.</span><span class="sxs-lookup"><span data-stu-id="bf708-112">The declaration of a delegate type establishes a contract that specifies the signature of one or more methods.</span></span> <span data-ttu-id="bf708-113">Obiekt delegowany jest wystąpieniem typu delegata, który zawiera odwołania do:</span><span class="sxs-lookup"><span data-stu-id="bf708-113">A delegate is an instance of a delegate type that has references to:</span></span>  
  
-   <span data-ttu-id="bf708-114">Metoda wystąpienia, typem i obiekt docelowy, który można przypisać do tego typu.</span><span class="sxs-lookup"><span data-stu-id="bf708-114">An instance method of a type and a target object assignable to that type.</span></span>  
  
-   <span data-ttu-id="bf708-115">Metoda wystąpienia typu, przy użyciu ukrytego `this` parametru widoczne na liście parametrów formalnych.</span><span class="sxs-lookup"><span data-stu-id="bf708-115">An instance method of a type, with the hidden `this` parameter exposed in the formal parameter list.</span></span> <span data-ttu-id="bf708-116">Delegat jest określane jako Otwórz wystąpienie delegata.</span><span class="sxs-lookup"><span data-stu-id="bf708-116">The delegate is said to be an open instance delegate.</span></span>  
  
-   <span data-ttu-id="bf708-117">Metoda statyczna.</span><span class="sxs-lookup"><span data-stu-id="bf708-117">A static method.</span></span>  
  
-   <span data-ttu-id="bf708-118">Metoda statyczna i obiekt docelowy, który można przypisać do pierwszego parametru metody.</span><span class="sxs-lookup"><span data-stu-id="bf708-118">A static method and a target object assignable to the first parameter of the method.</span></span> <span data-ttu-id="bf708-119">Delegat jest nazywany zamknięte w ciągu pierwszego argumentu.</span><span class="sxs-lookup"><span data-stu-id="bf708-119">The delegate is said to be closed over its first argument.</span></span>  
  
 <span data-ttu-id="bf708-120">Aby uzyskać więcej informacji o powiązaniach delegatów, zobacz <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> przeciążenie metody.</span><span class="sxs-lookup"><span data-stu-id="bf708-120">For more information on delegate binding, see the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bf708-121">W wersjach programu .NET Framework 1.0 i 1.1 delegata może reprezentować metodę, tylko wtedy, gdy sygnatura metody dokładnie pasuje do oznaczenia określonego przez typ delegata.</span><span class="sxs-lookup"><span data-stu-id="bf708-121">In the .NET Framework versions 1.0 and 1.1, a delegate can represent a method only if the signature of the method exactly matches the signature specified by the delegate type.</span></span> <span data-ttu-id="bf708-122">W związku z tym obsługiwane są tylko pierwszy i trzeci punktory na powyższej liście, a pierwszy punktor wymaga dopasowania dokładnego typu.</span><span class="sxs-lookup"><span data-stu-id="bf708-122">Thus, only the first and third bullets in the preceding list are supported, and the first bullet requires an exact type match.</span></span>  
  
 <span data-ttu-id="bf708-123">Gdy obiekt delegowany reprezentuje metodę wystąpienia, zamknięte przez swój pierwszy argument (najbardziej typowe wielkości liter), delegat przechowuje odwołanie do metody punktu wejścia i odwołanie do obiektu o nazwie obiektu docelowego, który można przypisać do typu, który zdefiniowany typ Metoda.</span><span class="sxs-lookup"><span data-stu-id="bf708-123">When a delegate represents an instance method closed over its first argument (the most common case), the delegate stores a reference to the method's entry point and a reference to an object, called the target, which is of a type assignable to the type that defined the method.</span></span> <span data-ttu-id="bf708-124">Obiekt delegowany reprezentuje otwartą metodę wystąpienia, są przechowywane odwołania do metody punktu wejścia.</span><span class="sxs-lookup"><span data-stu-id="bf708-124">When a delegate represents an open instance method, it stores a reference to the method's entry point.</span></span> <span data-ttu-id="bf708-125">Podpis delegata może zawierać ukryte `this` parametru na liście parametrów formalnych; w takim przypadku delegat nie ma odwołanie do obiektu docelowego i obiekt docelowy musi być podany obiekt delegowany jest wywoływany.</span><span class="sxs-lookup"><span data-stu-id="bf708-125">The delegate signature must include the hidden `this` parameter in its formal parameter list; in this case, the delegate does not have a reference to a target object, and a target object must be supplied when the delegate is invoked.</span></span>  
  
 <span data-ttu-id="bf708-126">Gdy obiekt delegowany reprezentuje metodę statyczną, delegat przechowuje odwołania do metody punktu wejścia.</span><span class="sxs-lookup"><span data-stu-id="bf708-126">When a delegate represents a static method, the delegate stores a reference to the method's entry point.</span></span> <span data-ttu-id="bf708-127">Gdy obiekt delegowany reprezentuje metodę statyczną zamknięte w ciągu pierwszego argumentu, delegat przechowuje odwołanie do metody punktu wejścia i odwołanie do obiektu docelowego, który można przypisać do typu pierwszego argumentu metody.</span><span class="sxs-lookup"><span data-stu-id="bf708-127">When a delegate represents a static method closed over its first argument, the delegate stores a reference to the method's entry point and a reference to a target object assignable to the type of the method's first argument.</span></span> <span data-ttu-id="bf708-128">Gdy obiekt delegowany jest wywoływany, pierwszy argument metody statycznej odbiera obiektu docelowego.</span><span class="sxs-lookup"><span data-stu-id="bf708-128">When the delegate is invoked, the first argument of the static method receives the target object.</span></span>  
  
 <span data-ttu-id="bf708-129">Listy wywołań obiektu delegowanego jest uporządkowany zestaw obiektów delegowanych, w których każdy element listy wywołuje dokładnie jeden z metody reprezentowanej przez delegata.</span><span class="sxs-lookup"><span data-stu-id="bf708-129">The invocation list of a delegate is an ordered set of delegates in which each element of the list invokes exactly one of the methods represented by the delegate.</span></span> <span data-ttu-id="bf708-130">Listę wywołań może zawierać zduplikowanych metody.</span><span class="sxs-lookup"><span data-stu-id="bf708-130">An invocation list can contain duplicate methods.</span></span> <span data-ttu-id="bf708-131">Podczas wywoływania metody są wywoływane w kolejności, w jakiej są wyświetlane na liście wywołania.</span><span class="sxs-lookup"><span data-stu-id="bf708-131">During an invocation, methods are invoked in the order in which they appear in the invocation list.</span></span> <span data-ttu-id="bf708-132">Delegat próbuje wywołać co metodę liście wywołania; duplikaty są wywoływane, gdy dla każdej godziny są wyświetlane na liście wywołania.</span><span class="sxs-lookup"><span data-stu-id="bf708-132">A delegate attempts to invoke every method in its invocation list; duplicates are invoked once for each time they appear in the invocation list.</span></span> <span data-ttu-id="bf708-133">Delegaty są niezmienne; Po utworzeniu listy wywołań obiektu delegowanego nie zmienia się.</span><span class="sxs-lookup"><span data-stu-id="bf708-133">Delegates are immutable; once created, the invocation list of a delegate does not change.</span></span>  
  
 <span data-ttu-id="bf708-134">Delegaty są określane jako multiemisji lub możliwych do łączenia, ponieważ delegata można wywołać jedną lub więcej metod i mogą być używane w połączeniu operacji.</span><span class="sxs-lookup"><span data-stu-id="bf708-134">Delegates are referred to as multicast, or combinable, because a delegate can invoke one or more methods and can be used in combining operations.</span></span>  
  
 <span data-ttu-id="bf708-135">Łącząc operacje, takie jak <xref:System.Delegate.Combine%2A> i <xref:System.Delegate.Remove%2A>, nie należy zmieniać istniejących obiektów delegowanych.</span><span class="sxs-lookup"><span data-stu-id="bf708-135">Combining operations, such as <xref:System.Delegate.Combine%2A> and <xref:System.Delegate.Remove%2A>, do not alter existing delegates.</span></span> <span data-ttu-id="bf708-136">Zamiast tego taka operacja zwraca nowy delegata, który zawiera wyniki operacji, delegat bez zmian lub `null`.</span><span class="sxs-lookup"><span data-stu-id="bf708-136">Instead, such an operation returns a new delegate that contains the results of the operation, an unchanged delegate, or `null`.</span></span> <span data-ttu-id="bf708-137">Operacja łączenia zwraca `null` po wyniku operacji jest delegat, który nie odwołuje się do co najmniej jedną metodę.</span><span class="sxs-lookup"><span data-stu-id="bf708-137">A combining operation returns `null` when the result of the operation is a delegate that does not reference at least one method.</span></span> <span data-ttu-id="bf708-138">Operacja łączenia zwraca delegat bez zmian, gdy żądana operacja nie ma wpływu.</span><span class="sxs-lookup"><span data-stu-id="bf708-138">A combining operation returns an unchanged delegate when the requested operation has no effect.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bf708-139">Użyj języki zarządzane <xref:System.Delegate.Combine%2A> i <xref:System.Delegate.Remove%2A> metody służące do implementacji operacje delegata.</span><span class="sxs-lookup"><span data-stu-id="bf708-139">Managed languages use the <xref:System.Delegate.Combine%2A> and <xref:System.Delegate.Remove%2A> methods to implement delegate operations.</span></span> <span data-ttu-id="bf708-140">Przykłady obejmują `AddHandler` i `RemoveHandler` instrukcji w języku Visual Basic i operatory "+= i-=" na delegowanie typów w języku C#.</span><span class="sxs-lookup"><span data-stu-id="bf708-140">Examples include the `AddHandler` and `RemoveHandler` statements in Visual Basic and the += and -= operators on delegate types in C#.</span></span>  
  
 <span data-ttu-id="bf708-141">Począwszy od [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], ogólnymi typami delegatów mogą mieć wariantne parametry typu.</span><span class="sxs-lookup"><span data-stu-id="bf708-141">Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], generic delegate types can have variant type parameters.</span></span> <span data-ttu-id="bf708-142">Kontrawariantnych parametrów typu można używać jako typy parametrów delegata i kowariantnego parametru typu może służyć jako typ zwracany.</span><span class="sxs-lookup"><span data-stu-id="bf708-142">Contravariant type parameters can be used as parameter types of the delegate, and a covariant type parameter can be used as the return type.</span></span> <span data-ttu-id="bf708-143">Ta funkcja umożliwia Delegat ogólny typy, które są konstruowane na podstawie jednej definicji typu ogólnego, aby być zgodny przypisania, jeśli ich argumentów typu są typami odwołań przy użyciu relacji dziedziczenia, jak wyjaśniono w [kowariancji i Kontrawariancja](~/docs/standard/generics/covariance-and-contravariance.md).</span><span class="sxs-lookup"><span data-stu-id="bf708-143">This feature allows generic delegate types that are constructed from the same generic type definition to be assignment-compatible if their type arguments are reference types with an inheritance relationship, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bf708-144">Delegaty ogólne, które są zgodne z przypisania ze względu na odchylenie nie są zawsze możliwych do łączenia.</span><span class="sxs-lookup"><span data-stu-id="bf708-144">Generic delegates that are assignment-compatible because of variance are not necessarily combinable.</span></span> <span data-ttu-id="bf708-145">Jako możliwych do łączenia, typy musi dokładnie pasować.</span><span class="sxs-lookup"><span data-stu-id="bf708-145">To be combinable, the types must match exactly.</span></span> <span data-ttu-id="bf708-146">Na przykład załóżmy, że klasę o nazwie `Derived` jest pochodną klasę o nazwie `Base`.</span><span class="sxs-lookup"><span data-stu-id="bf708-146">For example, suppose that a class named `Derived` is derived from a class named `Base`.</span></span> <span data-ttu-id="bf708-147">Delegat typu `Action<Base>` (`Action(Of Base)` w języku Visual Basic) można przypisać do zmiennej typu `Action<Derived>`, ale nie można łączyć dwóch obiektów delegowanych, ponieważ typy nie są dokładnie zgodne.</span><span class="sxs-lookup"><span data-stu-id="bf708-147">A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, but the two delegates cannot be combined because the types do not match exactly.</span></span>  
  
 <span data-ttu-id="bf708-148">Wywołana metoda zgłasza wyjątek, metoda zatrzymuje wykonywanie, wyjątek jest przekazywany z powrotem do obiektu wywołującego delegata i pozostałe metody na liście wywołania nie są wywoływane.</span><span class="sxs-lookup"><span data-stu-id="bf708-148">If an invoked method throws an exception, the method stops executing, the exception is passed back to the caller of the delegate, and remaining methods in the invocation list are not invoked.</span></span> <span data-ttu-id="bf708-149">Przechwytywanie wyjątku w obiekcie wywołującym nie zmienia to zachowanie.</span><span class="sxs-lookup"><span data-stu-id="bf708-149">Catching the exception in the caller does not alter this behavior.</span></span>  
  
 <span data-ttu-id="bf708-150">Po podpis metody wywoływane przez obiekt delegowany zawiera wartości zwracanej, delegat zwraca wartość zwracaną wartość ostatniego elementu na liście wywołania.</span><span class="sxs-lookup"><span data-stu-id="bf708-150">When the signature of the methods invoked by a delegate includes a return value, the delegate returns the return value of the last element in the invocation list.</span></span> <span data-ttu-id="bf708-151">Jeśli podpis zawiera parametr, który jest przekazywany przez odwołanie, końcowa wartość parametru jest wynik każdej metody na liście wywołania, wykonanie sekwencyjne i aktualizowania wartości parametru.</span><span class="sxs-lookup"><span data-stu-id="bf708-151">When the signature includes a parameter that is passed by reference, the final value of the parameter is the result of every method in the invocation list executing sequentially and updating the parameter's value.</span></span>  
  
 <span data-ttu-id="bf708-152">Najbliższy wielokrotność delegata w C lub C++ jest wskaźnik funkcji.</span><span class="sxs-lookup"><span data-stu-id="bf708-152">The closest equivalent of a delegate in C or C++ is a function pointer.</span></span> <span data-ttu-id="bf708-153">Delegat może reprezentować metodę statyczną lub metodą wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="bf708-153">A delegate can represent a static method or an instance method.</span></span> <span data-ttu-id="bf708-154">Gdy delegat reprezentuje metodę wystąpienia, delegat przechowuje nie tylko odwołanie do metody punktu wejścia, ale również odwołanie do wystąpienia klasy.</span><span class="sxs-lookup"><span data-stu-id="bf708-154">When the delegate represents an instance method, the delegate stores not only a reference to the method's entry point, but also a reference to the class instance.</span></span> <span data-ttu-id="bf708-155">W przeciwieństwie do wskaźników funkcji obiekty delegowane są zorientowana obiektowo i bezpieczeństwa typów.</span><span class="sxs-lookup"><span data-stu-id="bf708-155">Unlike function pointers, delegates are object oriented and type safe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bf708-156">Poniższy przykład pokazuje jak zdefiniować delegata, o nazwie `myMethodDelegate`.</span><span class="sxs-lookup"><span data-stu-id="bf708-156">The following example shows how to define a delegate named `myMethodDelegate`.</span></span> <span data-ttu-id="bf708-157">Wystąpienia tego obiektu delegowanego są tworzone dla metody wystąpienia i niestatyczną metodą zagnieżdżonego `mySampleClass` klasy.</span><span class="sxs-lookup"><span data-stu-id="bf708-157">Instances of this delegate are created for an instance method and a static method of the nested `mySampleClass` class.</span></span> <span data-ttu-id="bf708-158">Delegata dla metody wystąpienia wymaga wystąpienia `mySampleClass`.</span><span class="sxs-lookup"><span data-stu-id="bf708-158">The delegate for the instance method requires an instance of `mySampleClass`.</span></span> <span data-ttu-id="bf708-159">`mySampleClass` Wystąpienia jest zapisywane w zmiennej o nazwie `mySC`.</span><span class="sxs-lookup"><span data-stu-id="bf708-159">The `mySampleClass` instance is saved in a variable named `mySC`.</span></span>  
  
 [!code-cpp[Classic Delegate Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Delegate Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Delegate Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Delegate Example/CS/source.cs#1)]
 [!code-vb[Classic Delegate Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Delegate Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.MulticastDelegate" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="bf708-160">Inicjuje nowe delegowanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-160">Initializes a new delegate.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Delegate (object target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(object target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.#ctor(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (target As Object, method As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Delegate(System::Object ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="new Delegate : obj * string -&gt; Delegate" Usage="new System.Delegate (target, method)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="bf708-161">Wystąpienie klasy, na którym wywołuje delegata <c>metoda</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-161">The class instance on which the delegate invokes <c>method</c>.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="bf708-162">Nazwa metody wystąpienia, który reprezentuje obiekt delegowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-162">The name of the instance method that the delegate represents.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf708-163">Inicjuje obiekt delegowany, wywołuje metodę wystąpienia określonego wystąpienia określonej klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-163">Initializes a delegate that invokes the specified instance method on the specified class instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf708-164">Ten konstruktor nie można użyć w kodzie aplikacji.</span><span class="sxs-lookup"><span data-stu-id="bf708-164">This constructor cannot be used in application code.</span></span> <span data-ttu-id="bf708-165">Do utworzenia delegata, określając nazwę metody wystąpienia, używanie przeciążenia <xref:System.Delegate.CreateDelegate%2A> metody, która określa nazwę metody i obiekt docelowy.</span><span class="sxs-lookup"><span data-stu-id="bf708-165">To create a delegate by specifying the name of an instance method, use an overload of the <xref:System.Delegate.CreateDelegate%2A> method that specifies a method name and a target object.</span></span> <span data-ttu-id="bf708-166">Na przykład <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%29> przeciążenie metody tworzy delegata dla metody wystąpienie o określonej nazwie.</span><span class="sxs-lookup"><span data-stu-id="bf708-166">For example, the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%29> method overload creates a delegate for an instance method with a specified name.</span></span>  
  
 <span data-ttu-id="bf708-167">Ten konstruktor tworzy delegatów dla wystąpienia tylko metody.</span><span class="sxs-lookup"><span data-stu-id="bf708-167">This constructor creates delegates for instance methods only.</span></span> <span data-ttu-id="bf708-168">Metoda wystąpienia to metoda, która jest skojarzona z wystąpieniem klasy, natomiast metoda statyczna jest skojarzona z samą klasą.</span><span class="sxs-lookup"><span data-stu-id="bf708-168">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="bf708-169">
            <paramref name="target" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-169">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="bf708-170">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-170">-or-</span>
          </span>
          <span data-ttu-id="bf708-171">
            <paramref name="method" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-171">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="bf708-172">Wystąpił błąd wiązania do metody docelowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-172">There was an error binding to the target method.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="bf708-173">Po wywołaniu późnego wiązania za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-173">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="bf708-174">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-174">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Delegate (Type target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Type target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.#ctor(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (target As Type, method As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Delegate(Type ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="new Delegate : Type * string -&gt; Delegate" Usage="new System.Delegate (target, method)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="target" Type="System.Type" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="bf708-175">
            <see cref="T:System.Type" /> Reprezentujący klasę, która definiuje <c>metoda</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-175">The <see cref="T:System.Type" /> representing the class that defines <c>method</c>.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="bf708-176">Nazwa metody statycznej, który reprezentuje obiekt delegowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-176">The name of the static method that the delegate represents.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf708-177">Inicjuje delegat, który wywołuje określoną metodę statyczną z określonej klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-177">Initializes a delegate that invokes the specified static method from the specified class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf708-178">Ten konstruktor nie można użyć w kodzie aplikacji.</span><span class="sxs-lookup"><span data-stu-id="bf708-178">This constructor cannot be used in application code.</span></span> <span data-ttu-id="bf708-179">Do utworzenia delegata, określając nazwę metody statycznej, użyj przeciążenia <xref:System.Delegate.CreateDelegate%2A> metodę, która określa nazwę metody, ale nie określa obiektu docelowego.</span><span class="sxs-lookup"><span data-stu-id="bf708-179">To create a delegate by specifying the name of a static method, use an overload of the <xref:System.Delegate.CreateDelegate%2A> method that specifies a method name but does not specify a target object.</span></span> <span data-ttu-id="bf708-180">Na przykład <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%29> przeciążenie metody tworzy statyczny delegata dla metody o określonej nazwie.</span><span class="sxs-lookup"><span data-stu-id="bf708-180">For example, the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%29> method overload creates a static delegate for a method with a specified name.</span></span>  
  
 <span data-ttu-id="bf708-181">Ten konstruktor tworzy delegatów dla tylko metody statyczne.</span><span class="sxs-lookup"><span data-stu-id="bf708-181">This constructor creates delegates for static methods only.</span></span> <span data-ttu-id="bf708-182">Metoda wystąpienia to metoda, która jest skojarzona z wystąpieniem klasy, natomiast metoda statyczna jest skojarzona z samą klasą.</span><span class="sxs-lookup"><span data-stu-id="bf708-182">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="bf708-183">
            <paramref name="target" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-183">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="bf708-184">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-184">-or-</span>
          </span>
          <span data-ttu-id="bf708-185">
            <paramref name="method" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-185">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="bf708-186">
            <paramref name="target" /> nie jest <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-186">
              <paramref name="target" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="bf708-187">Zobacz [typów środowiska wykonawczego w odbiciu](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-187">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="bf708-188">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-188">-or-</span>
          </span>
          <span data-ttu-id="bf708-189">
            <paramref name="target" /> reprezentuje otwartym typem ogólnym.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-189">
              <paramref name="target" /> represents an open generic type.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="bf708-190">Po wywołaniu późnego wiązania za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-190">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="bf708-191">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-191">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="delegate.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="bf708-192">Tworzy kopię pobieżną delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-192">Creates a shallow copy of the delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf708-193">Płytka kopia elementu delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-193">A shallow copy of the delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf708-194">Klon ma taką samą <xref:System.Type>, listy docelowej, metody i wywołania jak oryginalny obiekt delegowany.</span><span class="sxs-lookup"><span data-stu-id="bf708-194">The clone has the same <xref:System.Type>, target, method, and invocation list as the original delegate.</span></span>  
  
 <span data-ttu-id="bf708-195">Wykonywana jest płytka kopia tworzy nowe wystąpienie tego samego typu co oryginalny obiekt, a następnie kopiuje niestatycznego pola oryginalnego obiektu.</span><span class="sxs-lookup"><span data-stu-id="bf708-195">A shallow copy creates a new instance of the same type as the original object, and then copies the nonstatic fields of the original object.</span></span> <span data-ttu-id="bf708-196">Jeśli pole jest typem wartości, bit przez bitowy kopię pole jest wykonywane.</span><span class="sxs-lookup"><span data-stu-id="bf708-196">If the field is a value type, a bit-by-bit copy of the field is performed.</span></span> <span data-ttu-id="bf708-197">Jeśli pole jest typem referencyjnym, odwołanie jest kopiowane, ale przywoływanego obiektu jest; w związku z tym odwołań w oryginalnym obiekcie i odwołania w klonu wskazują ten sam obiekt.</span><span class="sxs-lookup"><span data-stu-id="bf708-197">If the field is a reference type, the reference is copied but the referred object is not; therefore, the reference in the original object and the reference in the clone point to the same object.</span></span> <span data-ttu-id="bf708-198">Natomiast głębokie kopiowanie obiektu duplikuje wszystko bezpośrednio lub pośrednio odwołuje się pola w obiekcie.</span><span class="sxs-lookup"><span data-stu-id="bf708-198">In contrast, a deep copy of an object duplicates everything directly or indirectly referenced by the fields in the object.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="bf708-199">Po wywołaniu późnego wiązania za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-199">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="bf708-200">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-200">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Combine">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="bf708-201">Łączy listę wywołania delegatów multiemisji określony (combinable).</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-201">Concatenates the invocation lists of the specified multicast (combinable) delegates.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static Delegate Combine (params Delegate[] delegates);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate Combine(class System.Delegate[] delegates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Combine(System.Delegate[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (ParamArray delegates As Delegate()) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ Combine(... cli::array &lt;Delegate ^&gt; ^ delegates);" />
      <MemberSignature Language="F#" Value="static member Combine : Delegate[] -&gt; Delegate" Usage="System.Delegate.Combine delegates" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegates" Type="System.Delegate[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delegates">
          <span data-ttu-id="bf708-202">Tablica obiektów delegowanych, aby połączyć.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-202">The array of delegates to combine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf708-203">Łączy listę wywołania tablicę obiektów delegowanych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-203">Concatenates the invocation lists of an array of delegates.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf708-204">Nowe delegowanie przy użyciu listy wywołania łączącej list wywołania delegatów w <paramref name="delegates" /> tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-204">A new delegate with an invocation list that concatenates the invocation lists of the delegates in the <paramref name="delegates" /> array.</span>
          </span>
          <span data-ttu-id="bf708-205">Zwraca <see langword="null" /> Jeśli <paramref name="delegates" /> jest <see langword="null" />, jeśli <paramref name="delegates" /> zawiera zero elementy, lub w przypadku każdego wpisu w <paramref name="delegates" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-205">Returns <see langword="null" /> if <paramref name="delegates" /> is <see langword="null" />, if <paramref name="delegates" /> contains zero elements, or if every entry in <paramref name="delegates" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf708-206">Jeśli `delegates` tablica zawiera wpisy, które są `null`, te wpisy są ignorowane.</span><span class="sxs-lookup"><span data-stu-id="bf708-206">If the `delegates` array contains entries that are `null`, those entries are ignored.</span></span>  
  
 <span data-ttu-id="bf708-207">Lista wywołania może zawierać zduplikowane wpisy. oznacza to, wpisy, które odwołują się do tej samej metody na tym samym obiekcie.</span><span class="sxs-lookup"><span data-stu-id="bf708-207">The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bf708-208">Delegaty ogólne, które są zgodne z przypisania ze względu na odchylenie nie są zawsze możliwych do łączenia.</span><span class="sxs-lookup"><span data-stu-id="bf708-208">Generic delegates that are assignment-compatible because of variance are not necessarily combinable.</span></span> <span data-ttu-id="bf708-209">Jako możliwych do łączenia, typy musi dokładnie pasować.</span><span class="sxs-lookup"><span data-stu-id="bf708-209">To be combinable, the types must match exactly.</span></span> <span data-ttu-id="bf708-210">Na przykład załóżmy, że klasę o nazwie `Derived` jest pochodną klasę o nazwie `Base`.</span><span class="sxs-lookup"><span data-stu-id="bf708-210">For example, suppose that a class named `Derived` is derived from a class named `Base`.</span></span> <span data-ttu-id="bf708-211">Delegat typu `Action<Base>` (`Action(Of Base)` w języku Visual Basic) można przypisać do zmiennej typu `Action<Derived>`, jak wyjaśniono w [kowariancji i kontrawariancji](~/docs/standard/generics/covariance-and-contravariance.md), ale nie można połączyć dwa delegaty, ponieważ typy zrobić nie są dokładnie zgodne.</span><span class="sxs-lookup"><span data-stu-id="bf708-211">A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md), but the two delegates cannot be combined because the types do not match exactly.</span></span>  
  
 <span data-ttu-id="bf708-212"><xref:System.Delegate.Combine%2A> jest przydatne do tworzenia programów obsługi zdarzeń, które występuje wiele metod czas zdarzenia wywołań.</span><span class="sxs-lookup"><span data-stu-id="bf708-212"><xref:System.Delegate.Combine%2A> is useful for creating event handlers that call multiple methods each time an event occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="bf708-213">Nie wszystkie wpisy inną niż null w <paramref name="delegates" /> wystąpień tego samego typu delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-213">Not all the non-null entries in <paramref name="delegates" /> are instances of the same delegate type.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="bf708-214">Po wywołaniu późnego wiązania za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-214">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="bf708-215">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-215">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="M:System.Delegate.CombineImpl(System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static Delegate Combine (Delegate a, Delegate b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate Combine(class System.Delegate a, class System.Delegate b) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Combine(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (a As Delegate, b As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ Combine(Delegate ^ a, Delegate ^ b);" />
      <MemberSignature Language="F#" Value="static member Combine : Delegate * Delegate -&gt; Delegate" Usage="System.Delegate.Combine (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Delegate" />
        <Parameter Name="b" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="a">
          <span data-ttu-id="bf708-216">Delegat wykorzystasz którego lista wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-216">The delegate whose invocation list comes first.</span>
          </span>
        </param>
        <param name="b">
          <span data-ttu-id="bf708-217">Delegat, w których listy wywołań pochodzi ostatni.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-217">The delegate whose invocation list comes last.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf708-218">Łączy listę wywołania dwóch delegatów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-218">Concatenates the invocation lists of two delegates.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf708-219">Nowy delegat z listy wywołań, która łączy wywołania wykazy <paramref name="a" /> i <paramref name="b" /> w tej kolejności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-219">A new delegate with an invocation list that concatenates the invocation lists of <paramref name="a" /> and <paramref name="b" /> in that order.</span>
          </span>
          <span data-ttu-id="bf708-220">Zwraca <paramref name="a" /> Jeśli <paramref name="b" /> jest <see langword="null" />, zwraca <paramref name="b" /> Jeśli <paramref name="a" /> jest odwołanie o wartości null i zwraca odwołanie o wartości null, jeśli obie <paramref name="a" /> i <paramref name="b" /> są odwołaniami o wartości null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-220">Returns <paramref name="a" /> if <paramref name="b" /> is <see langword="null" />, returns <paramref name="b" /> if <paramref name="a" /> is a null reference, and returns a null reference if both <paramref name="a" /> and <paramref name="b" /> are null references.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf708-221">Lista wywołania może zawierać zduplikowane wpisy. oznacza to, wpisy, które odwołują się do tej samej metody na tym samym obiekcie.</span><span class="sxs-lookup"><span data-stu-id="bf708-221">The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bf708-222">Delegaty ogólne, które są zgodne z przypisania ze względu na odchylenie nie są zawsze możliwych do łączenia.</span><span class="sxs-lookup"><span data-stu-id="bf708-222">Generic delegates that are assignment-compatible because of variance are not necessarily combinable.</span></span> <span data-ttu-id="bf708-223">Jako możliwych do łączenia, typy musi dokładnie pasować.</span><span class="sxs-lookup"><span data-stu-id="bf708-223">To be combinable, the types must match exactly.</span></span> <span data-ttu-id="bf708-224">Na przykład załóżmy, że klasę o nazwie `Derived` jest pochodną klasę o nazwie `Base`.</span><span class="sxs-lookup"><span data-stu-id="bf708-224">For example, suppose that a class named `Derived` is derived from a class named `Base`.</span></span> <span data-ttu-id="bf708-225">Delegat typu `Action<Base>` (`Action(Of Base)` w języku Visual Basic) można przypisać do zmiennej typu `Action<Derived>`, jak wyjaśniono w [kowariancji i kontrawariancji](~/docs/standard/generics/covariance-and-contravariance.md), ale nie można połączyć dwa delegaty, ponieważ typy zrobić nie są dokładnie zgodne.</span><span class="sxs-lookup"><span data-stu-id="bf708-225">A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md), but the two delegates cannot be combined because the types do not match exactly.</span></span>  
  
 <span data-ttu-id="bf708-226"><xref:System.Delegate.Combine%2A> jest przydatne do tworzenia programów obsługi zdarzeń, które występuje wiele metod czas zdarzenia wywołań.</span><span class="sxs-lookup"><span data-stu-id="bf708-226"><xref:System.Delegate.Combine%2A> is useful for creating event handlers that call multiple methods each time an event occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="bf708-227">Zarówno <paramref name="a" /> i <paramref name="b" /> nie <see langword="null" />, i <paramref name="a" /> i <paramref name="b" /> nie są wystąpieniami tego samego typu delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-227">Both <paramref name="a" /> and <paramref name="b" /> are not <see langword="null" />, and <paramref name="a" /> and <paramref name="b" /> are not instances of the same delegate type.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="bf708-228">Po wywołaniu późnego wiązania za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-228">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="bf708-229">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-229">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="M:System.Delegate.CombineImpl(System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="CombineImpl">
      <MemberSignature Language="C#" Value="protected virtual Delegate CombineImpl (Delegate d);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Delegate CombineImpl(class System.Delegate d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CombineImpl(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CombineImpl (d As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Delegate ^ CombineImpl(Delegate ^ d);" />
      <MemberSignature Language="F#" Value="abstract member CombineImpl : Delegate -&gt; Delegate&#xA;override this.CombineImpl : Delegate -&gt; Delegate" Usage="delegate.CombineImpl d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="bf708-230">Multiemisji (combinable) delegować delegować którego lista wywołania do dołączenia na końcu listy wywołania bieżącego multiemisji (combinable).</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-230">The multicast (combinable) delegate whose invocation list to append to the end of the invocation list of the current multicast (combinable) delegate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf708-231">Łączy listę wywołania określonego delegata (combinable) multiemisji i bieżącej multiemisji delegata (combinable).</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-231">Concatenates the invocation lists of the specified multicast (combinable) delegate and the current multicast (combinable) delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf708-232">Nowe multiemisja (combinable) delegowanie przy użyciu listy wywołania łączącej listy wywołania bieżącego multiemisji delegata (combinable) i listę wywołania <paramref name="d" />, lub delegować bieżącego multiemisji (możliwych do łączenia), jeśli <paramref name="d" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-232">A new multicast (combinable) delegate with an invocation list that concatenates the invocation list of the current multicast (combinable) delegate and the invocation list of <paramref name="d" />, or the current multicast (combinable) delegate if <paramref name="d" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf708-233">Ta metoda ma zastosowanie tylko wtedy, gdy bieżący delegat jest multiemisji (combinable).</span><span class="sxs-lookup"><span data-stu-id="bf708-233">This method applies only if the current delegate is multicast (combinable).</span></span>  
  
 <span data-ttu-id="bf708-234">Bieżąca implementacja parametru po prostu wywołuje wyjątek <xref:System.MulticastNotSupportedException>.</span><span class="sxs-lookup"><span data-stu-id="bf708-234">The current implementation simply throws a <xref:System.MulticastNotSupportedException>.</span></span>  
  
 <span data-ttu-id="bf708-235">Lista wywołania może zawierać zduplikowane wpisy. oznacza to, wpisy, które odwołują się do tej samej metody na tym samym obiekcie.</span><span class="sxs-lookup"><span data-stu-id="bf708-235">The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MulticastNotSupportedException">
          <span data-ttu-id="bf708-236">Zawsze generowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-236">Always thrown.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="bf708-237">Po wywołaniu późnego wiązania za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-237">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="bf708-238">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-238">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.Combine(System.Delegate,System.Delegate)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateDelegate">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="bf708-239">Tworzy delegata, o określonym typie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-239">Creates a delegate of the specified type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * System.Reflection.MethodInfo -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="bf708-240">
            <see cref="T:System.Type" /> Delegata do utworzenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-240">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="bf708-241">
            <see cref="T:System.Reflection.MethodInfo" /> Opisujące statyczną lub metodę ma reprezentować delegat wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-241">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span>
          </span>
          <span data-ttu-id="bf708-242">W .NET Framework w wersji 1.0 i 1.1, obsługiwane są tylko metody statyczne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-242">Only static methods are supported in the .NET Framework version 1.0 and 1.1.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf708-243">Tworzy obiekt delegowany określonego typu i reprezentują określonej metody statycznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-243">Creates a delegate of the specified type to represent the specified static method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf708-244">Delegat określonego typu do reprezentowania określonej metody statycznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-244">A delegate of the specified type to represent the specified static method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf708-245">W .NET Framework w wersji 1.0 i 1.1 tego przeciążenia metody tworzy delegatów dla tylko metody statyczne.</span><span class="sxs-lookup"><span data-stu-id="bf708-245">In the .NET Framework version 1.0 and 1.1, this method overload creates delegates for static methods only.</span></span> <span data-ttu-id="bf708-246">W .NET Framework w wersji 2.0 tego przeciążenia metody również utworzyć Otwórz wystąpienie metody delegatów; oznacza to delegatów, które jawnie dostarczyć ukryte pierwszy argument wystąpienia metody.</span><span class="sxs-lookup"><span data-stu-id="bf708-246">In the .NET Framework version 2.0, this method overload also can create open instance method delegates; that is, delegates that explicitly supply the hidden first argument of instance methods.</span></span> <span data-ttu-id="bf708-247">Aby uzyskać szczegółowy opis Zobacz bardziej ogólnej <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> przeciążenia metody, która pozwala na tworzenie wszystkich kombinacji delegatów otwarte lub zamknięte dla wystąpienia lub metody statyczne i opcjonalnie określ pierwszy argument.</span><span class="sxs-lookup"><span data-stu-id="bf708-247">For a detailed explanation, see the more general <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> method overload, which allows you to create all combinations of open or closed delegates for instance or static methods, and optionally to specify a first argument.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bf708-248">Tego przeciążenia metody należy użyć gdy delegat nie jest zamknięty przez swój pierwszy argument, ponieważ jest trochę szybszy w takiej sytuacji.</span><span class="sxs-lookup"><span data-stu-id="bf708-248">This method overload should be used when the delegate is not closed over its first argument, because it is somewhat faster in that case.</span></span>  
  
 <span data-ttu-id="bf708-249">Tego przeciążenia metody jest równoważne z wywoływaniem <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> przeciążenie metody i określając `true` dla `throwOnBindFailure`.</span><span class="sxs-lookup"><span data-stu-id="bf708-249">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload and specifying `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bf708-250">Począwszy od [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], Metoda ta może służyć do dostępu do metod niepublicznych, jeśli obiekt wywołujący zostało udzielone <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> Flaga, a jeśli zestaw uprawnień metod niepublicznych jest ograniczony do obiektu wywołującego przyznania zestawu lub być podzbiorem jej.</span><span class="sxs-lookup"><span data-stu-id="bf708-250">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="bf708-251">(Zobacz [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="bf708-251">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="bf708-252">Aby używać tej funkcji, powinien dotyczyć aplikacji [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszej.</span><span class="sxs-lookup"><span data-stu-id="bf708-252">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="bf708-253">Zgodne typy parametrów i zwracany typ</span><span class="sxs-lookup"><span data-stu-id="bf708-253">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="bf708-254">W .NET Framework w wersji 2.0 typy parametrów i typ zwracany obiektu delegowanego utworzone za pomocą tego przeciążenia metody muszą być zgodne z typami parametrów i zwracany typ metody, który reprezentuje obiekt delegowany; typy musi dokładnie odpowiadać.</span><span class="sxs-lookup"><span data-stu-id="bf708-254">In the .NET Framework version 2.0, the parameter types and return type of a delegate created using this method overload must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span> <span data-ttu-id="bf708-255">Reprezentuje złagodzenie zachowanie wiązania w .NET Framework w wersji 1.0 i 1.1, których typy muszą być zgodne.</span><span class="sxs-lookup"><span data-stu-id="bf708-255">This represents a relaxation of the binding behavior in the .NET Framework version 1.0 and 1.1, where the types must match exactly.</span></span>  
  
 <span data-ttu-id="bf708-256">Parametru obiektu delegowanego jest zgodny z odpowiednim parametrem metody, jeśli typ parametru delegata jest bardziej restrykcyjny niż typ parametru metody, ponieważ gwarantuje to, że argument przekazany do obiektu delegowanego można bezpiecznie przekazać do Metoda.</span><span class="sxs-lookup"><span data-stu-id="bf708-256">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="bf708-257">Podobnie zwracany typ delegata jest zgodny z typem zwracanym metody, jeśli typ zwracany metody jest bardziej restrykcyjny niż typ zwracany obiektu delegowanego, ponieważ gwarantuje to, że wartość zwracana metody może być bezpiecznie umieszczona na zwracany typ e delegata.</span><span class="sxs-lookup"><span data-stu-id="bf708-257">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="bf708-258">Na przykład delegat z parametrem typu <xref:System.Collections.Hashtable> i zwracanym typem <xref:System.Object> może reprezentować metodę z parametrem typu <xref:System.Object> oraz wartość zwracaną typu <xref:System.Collections.Hashtable>.</span><span class="sxs-lookup"><span data-stu-id="bf708-258">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bf708-259">Ten rozdział zawiera dwa przykłady kodu.</span><span class="sxs-lookup"><span data-stu-id="bf708-259">This section contains two code examples.</span></span> <span data-ttu-id="bf708-260">W pierwszym przykładzie pokazano dwa rodzaje obiektów delegowanych, które mogą być tworzone za pomocą tego przeciążenia metody: Otwórz za pośrednictwem metody wystąpienia, a następnie otwórz za pośrednictwem metody statycznej.</span><span class="sxs-lookup"><span data-stu-id="bf708-260">The first example demonstrates the two kinds of delegates that can be created with this method overload: open over an instance method and open over a static method.</span></span>  
  
 <span data-ttu-id="bf708-261">Drugi przykład kodu ilustruje zgodność typów parametrów i zwracanych typów.</span><span class="sxs-lookup"><span data-stu-id="bf708-261">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="bf708-262">**Przykład 1**</span><span class="sxs-lookup"><span data-stu-id="bf708-262">**Example 1**</span></span>  
  
 <span data-ttu-id="bf708-263">Poniższy przykład kodu pokazuje dwa sposoby delegata można tworzyć przy użyciu tego przeciążenia <xref:System.Delegate.CreateDelegate%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="bf708-263">The following code example demonstrates the two ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bf708-264">Istnieją dwa przeciążenia <xref:System.Delegate.CreateDelegate%2A> — określające <xref:System.Reflection.MethodInfo> , ale pierwszy argument; ich funkcjonalność jest taka sama, z tą różnicą, że jeden pozwala określić, czy po niepowodzeniu do powiązania, a drugi zawsze zgłasza.</span><span class="sxs-lookup"><span data-stu-id="bf708-264">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify a <xref:System.Reflection.MethodInfo> but not a first argument; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="bf708-265">W tym przykładzie kodu są używane oba przeciążenia.</span><span class="sxs-lookup"><span data-stu-id="bf708-265">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="bf708-266">Przykład deklaruje klasę `C` przy użyciu statycznej metody `M2` i metoda wystąpienia `M1`, i dwa typy delegatów: `D1` przyjmuje wystąpienie klasy `C` i ciąg, a `D2` ciąg znaków.</span><span class="sxs-lookup"><span data-stu-id="bf708-266">The example declares a class `C` with a static method `M2` and an instance method `M1`, and two delegate types: `D1` takes an instance of `C` and a string, and `D2` takes a string.</span></span>  
  
 <span data-ttu-id="bf708-267">Druga klasa o nazwie `Example` zawiera kod, który tworzy delegatów.</span><span class="sxs-lookup"><span data-stu-id="bf708-267">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="bf708-268">Delegat typu `D1`, reprezentujący otwartą metodę wystąpienia, jest tworzony dla metody wystąpienia `M1`.</span><span class="sxs-lookup"><span data-stu-id="bf708-268">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="bf708-269">Wystąpienie musi zostać przekazane podczas wywoływania delegata.</span><span class="sxs-lookup"><span data-stu-id="bf708-269">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="bf708-270">Delegat typu `D2`, reprezentujący otwartą metodę statyczną, jest tworzony dla metody statycznej `M2`.</span><span class="sxs-lookup"><span data-stu-id="bf708-270">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="bf708-271">**Przykład 2**</span><span class="sxs-lookup"><span data-stu-id="bf708-271">**Example 2**</span></span>  
  
 <span data-ttu-id="bf708-272">Poniższy przykład kodu ilustruje zgodność typów parametrów i zwracanych typów.</span><span class="sxs-lookup"><span data-stu-id="bf708-272">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
 <span data-ttu-id="bf708-273">Przykładowy kod definiuje klasę bazową, o nazwie `Base` i klasę o nazwie `Derived` który pochodzi od klasy `Base`.</span><span class="sxs-lookup"><span data-stu-id="bf708-273">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="bf708-274">Klasa pochodna zawiera `static` (`Shared` w języku Visual Basic) metodę o nazwie `MyMethod` z jednym parametrem typu `Base` i zwracanym typem `Derived`.</span><span class="sxs-lookup"><span data-stu-id="bf708-274">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="bf708-275">Przykład kodu jest również definiowany delegat o nazwie `Example` posiadającą jeden parametr typu `Derived` i zwracanym typem `Base`.</span><span class="sxs-lookup"><span data-stu-id="bf708-275">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="bf708-276">Przykład kodu demonstruje, że delegat o nazwie `Example` może służyć do reprezentowania metody `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="bf708-276">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="bf708-277">Metodę można powiązać z delegatem, ponieważ:</span><span class="sxs-lookup"><span data-stu-id="bf708-277">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="bf708-278">Typ parametru delegata (`Derived`) jest bardziej restrykcyjny niż typ parametru `MyMethod` (`Base`), dzięki czemu jest zawsze można bezpiecznie przekazać argument delegata do `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="bf708-278">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="bf708-279">Zwracany typ `MyMethod` (`Derived`) jest bardziej restrykcyjny niż typ parametru delegata (`Base`), dzięki czemu zawsze jest bezpieczne rzutować zwracany typ metody do zwracanego typu delegata.</span><span class="sxs-lookup"><span data-stu-id="bf708-279">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="bf708-280">W przykładowym kodzie nie są generowane żadne dane wyjściowe.</span><span class="sxs-lookup"><span data-stu-id="bf708-280">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="bf708-281">
            <paramref name="type" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-281">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="bf708-282">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-282">-or-</span>
          </span>
          <span data-ttu-id="bf708-283">
            <paramref name="method" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-283">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="bf708-284">
            <paramref name="type" /> nie dziedziczy <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-284">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="bf708-285">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-285">-or-</span>
          </span>
          <span data-ttu-id="bf708-286">
            <paramref name="type" /> nie jest <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-286">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="bf708-287">Zobacz [typów środowiska wykonawczego w odbiciu](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-287">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="bf708-288">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-288">-or-</span>
          </span>
          <span data-ttu-id="bf708-289">
            <paramref name="method" /> nie jest statyczna metoda, a wersja programu .NET Framework jest w wersji 1.0 lub 1.1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-289">
              <paramref name="method" /> is not a static method, and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
          <span data-ttu-id="bf708-290">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-290">-or-</span>
          </span>
          <span data-ttu-id="bf708-291">
            <paramref name="method" /> Nie można powiązać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-291">
              <paramref name="method" /> cannot be bound.</span>
          </span>
          <span data-ttu-id="bf708-292">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-292">-or-</span>
          </span>
          <span data-ttu-id="bf708-293">
            <paramref name="method" /> nie jest <see langword="RuntimeMethodInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-293">
              <paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span>
          </span>
          <span data-ttu-id="bf708-294">Zobacz [typów środowiska wykonawczego w odbiciu](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-294">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="bf708-295">
            <see langword="Invoke" /> Metody <paramref name="type" /> nie zostanie znaleziony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-295">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="bf708-296">Obiekt wywołujący nie ma uprawnienia niezbędne do dostępu <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-296">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="bf708-297">Po wywołaniu późnego wiązania za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-297">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="bf708-298">Powiązane wyliczenie: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-298">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object firstArgument, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object firstArgument, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ firstArgument, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * System.Reflection.MethodInfo -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, firstArgument, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="firstArgument" Type="System.Object" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="bf708-299">
            <see cref="T:System.Type" /> Delegata do utworzenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-299">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="firstArgument">
          <span data-ttu-id="bf708-300">Obiekt, z którym powiązany jest delegat, lub <see langword="null" /> traktowanie <c>metoda</c> jako <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-300">The object to which the delegate is bound, or <see langword="null" /> to treat <c>method</c> as <see langword="static" /> (<see langword="Shared" /> in Visual Basic).</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="bf708-301">
            <see cref="T:System.Reflection.MethodInfo" /> Opisujące statyczną lub metodę ma reprezentować delegat wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-301">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf708-302">Tworzy delegata określonego typu, który reprezentuje określony statyczna lub metoda wystąpienia, z pierwszego określonego argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-302">Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf708-303">Delegat określonego typu, który reprezentuje określony statyczną lub metodę wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-303">A delegate of the specified type that represents the specified static or instance method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf708-304">Wywołanie tego przeciążenia metody jest równoważne z wywoływaniem <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> przeciążenie metody i określając `true` dla `throwOnBindFailure`.</span><span class="sxs-lookup"><span data-stu-id="bf708-304">Calling this method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload and specifying `true` for `throwOnBindFailure`.</span></span> <span data-ttu-id="bf708-305">Te dwa przeciążenia zawierają najbardziej elastyczny sposób do tworzenia obiektów delegowanych.</span><span class="sxs-lookup"><span data-stu-id="bf708-305">These two overloads provide the most flexible way to create delegates.</span></span> <span data-ttu-id="bf708-306">Można ich użyć do tworzenia delegatów dla statycznych lub metoda instancji i opcjonalnie określ pierwszy argument.</span><span class="sxs-lookup"><span data-stu-id="bf708-306">You can use them to create delegates for either static or instance methods, and optionally to specify the first argument.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bf708-307">Jeśli pierwszy argument nie zostanie podana, należy użyć <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> przeciążenie metody w celu zapewnienia lepszej wydajności.</span><span class="sxs-lookup"><span data-stu-id="bf708-307">If you do not supply a first argument, use the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload for better performance.</span></span>  
  
 <span data-ttu-id="bf708-308">Typ delegata, a także metoda musi mieć zgodne typy zwracane.</span><span class="sxs-lookup"><span data-stu-id="bf708-308">The delegate type and the method must have compatible return types.</span></span> <span data-ttu-id="bf708-309">Oznacza to, że typ zwracany `method` musi być przypisane do zwracanego typu `type`.</span><span class="sxs-lookup"><span data-stu-id="bf708-309">That is, the return type of `method` must be assignable to the return type of `type`.</span></span>  
  
 <span data-ttu-id="bf708-310">Jeśli `firstArgument` jest podany, zostanie on przekazany do `method` za każdym razem, gdy obiekt delegowany jest wywoływany; `firstArgument` jest nazywany powiązać z delegatem, i delegowany jest zamknięte w ciągu pierwszego argumentu.</span><span class="sxs-lookup"><span data-stu-id="bf708-310">If `firstArgument` is supplied, it is passed to `method` every time the delegate is invoked; `firstArgument` is said to be bound to the delegate, and the delegate is said to be closed over its first argument.</span></span> <span data-ttu-id="bf708-311">Jeśli `method` jest `static` (`Shared` w języku Visual Basic), argument dostarczona podczas wywoływania delegata lista zawiera wszystkie parametry z wyjątkiem pierwszej; Jeśli `method` jest metodą wystąpienia `firstArgument` są przekazywane do wystąpienia ukryte parametr (reprezentowane przez `this` w języku C# lub przez `Me` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="bf708-311">If `method` is `static` (`Shared` in Visual Basic), the argument list supplied when invoking the delegate includes all parameters except the first; if `method` is an instance method, then `firstArgument` is passed to the hidden instance parameter (represented by `this` in C#, or by `Me` in Visual Basic).</span></span>  
  
 <span data-ttu-id="bf708-312">Jeśli `firstArgument` jest podany, pierwszy parametr `method` musi być typem referencyjnym, i `firstArgument` muszą być zgodne z danym typem.</span><span class="sxs-lookup"><span data-stu-id="bf708-312">If `firstArgument` is supplied, the first parameter of `method` must be a reference type, and `firstArgument` must be compatible with that type.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bf708-313">Jeśli `method` jest `static` (`Shared` w języku Visual Basic), a jej pierwszy parametr jest typu <xref:System.Object> lub <xref:System.ValueType>, następnie `firstArgument` może być typem wartości.</span><span class="sxs-lookup"><span data-stu-id="bf708-313">If `method` is `static` (`Shared` in Visual Basic) and its first parameter is of type <xref:System.Object> or <xref:System.ValueType>, then `firstArgument` can be a value type.</span></span> <span data-ttu-id="bf708-314">W tym przypadku `firstArgument` jest automatycznie ramce.</span><span class="sxs-lookup"><span data-stu-id="bf708-314">In this case `firstArgument` is automatically boxed.</span></span> <span data-ttu-id="bf708-315">Automatyczne pakowanie nie występuje żadnych argumentów, jak w języku C# lub Visual Basic funkcji wywołałby.</span><span class="sxs-lookup"><span data-stu-id="bf708-315">Automatic boxing does not occur for any other arguments, as it would in a C# or Visual Basic function call.</span></span>  
  
 <span data-ttu-id="bf708-316">Jeśli `firstArgument` jest odwołanie o wartości null i `method` jest metodą wystąpienia, wynik zależy od podpisy typu delegata `type` i `method`:</span><span class="sxs-lookup"><span data-stu-id="bf708-316">If `firstArgument` is a null reference and `method` is an instance method, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="bf708-317">Jeśli podpis `type` jawnie zawierającym ukryte pierwszy parametr `method`, delegowany jest reprezentujący otwartą metodę wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="bf708-317">If the signature of `type` explicitly includes the hidden first parameter of `method`, the delegate is said to represent an open instance method.</span></span> <span data-ttu-id="bf708-318">Gdy obiekt delegowany jest wywoływany, pierwszy argument na liście argumentów jest przekazywany do parametru instance ukrytych z `method`.</span><span class="sxs-lookup"><span data-stu-id="bf708-318">When the delegate is invoked, the first argument in the argument list is passed to the hidden instance parameter of `method`.</span></span>  
  
-   <span data-ttu-id="bf708-319">Jeśli sygnatur `method` i `type` dopasowania (oznacza to, że wszystkie typy parametrów są zgodne), a następnie delegowany jest zamknięte przez odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="bf708-319">If the signatures of `method` and `type` match (that is, all parameter types are compatible), then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="bf708-320">Wywołanie delegata jest podobne do wywołania metody wystąpienia na wystąpienie o wartości null, która nie jest szczególnie przydatne niczego robić.</span><span class="sxs-lookup"><span data-stu-id="bf708-320">Invoking the delegate is like calling an instance method on a null instance, which is not a particularly useful thing to do.</span></span>  
  
 <span data-ttu-id="bf708-321">Jeśli `firstArgument` jest odwołanie o wartości null i `method` jest statyczny, wynik zależy od podpisy typu delegata `type` i `method`:</span><span class="sxs-lookup"><span data-stu-id="bf708-321">If `firstArgument` is a null reference and `method` is static, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="bf708-322">Jeśli podpis `method` i `type` dopasowania (oznacza to, że wszystkie typy parametrów są zgodne), delegowany jest reprezentujący otwartą metodę statyczną.</span><span class="sxs-lookup"><span data-stu-id="bf708-322">If the signature of `method` and `type` match (that is, all parameter types are compatible), the delegate is said to represent an open static method.</span></span> <span data-ttu-id="bf708-323">Dotyczy to najbardziej typowe dla metod statycznych.</span><span class="sxs-lookup"><span data-stu-id="bf708-323">This is the most common case for static methods.</span></span> <span data-ttu-id="bf708-324">W tym przypadku nieco lepszą wydajność można uzyskać za pomocą <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> przeciążenie metody.</span><span class="sxs-lookup"><span data-stu-id="bf708-324">In this case, you can get slightly better performance by using the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span>  
  
-   <span data-ttu-id="bf708-325">Jeśli podpis `type` zaczyna się od drugiego parametru `method` i pozostałe typy parametrów są niezgodne, a następnie delegowany jest zamknięte przez odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="bf708-325">If the signature of `type` begins with the second parameter of `method` and the rest of the parameter types are compatible, then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="bf708-326">Gdy obiekt delegowany jest wywoływany, odwołanie o wartości null jest przekazywana do pierwszy parametr `method`.</span><span class="sxs-lookup"><span data-stu-id="bf708-326">When the delegate is invoked, a null reference is passed to the first parameter of `method`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bf708-327">Począwszy od [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], Metoda ta może służyć do dostępu do metod niepublicznych, jeśli obiekt wywołujący zostało udzielone <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> Flaga, a jeśli zestaw uprawnień metod niepublicznych jest ograniczony do obiektu wywołującego przyznania zestawu lub być podzbiorem jej.</span><span class="sxs-lookup"><span data-stu-id="bf708-327">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="bf708-328">(Zobacz [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="bf708-328">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="bf708-329">Aby używać tej funkcji, powinien dotyczyć aplikacji [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszej.</span><span class="sxs-lookup"><span data-stu-id="bf708-329">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="bf708-330">Zgodne typy parametrów i zwracany typ</span><span class="sxs-lookup"><span data-stu-id="bf708-330">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="bf708-331">Typy parametrów i typ zwracany obiektu delegowanego musi być zgodny z typami parametrów i zwracany typ metody, który reprezentuje obiekt delegowany; typy musi dokładnie odpowiadać.</span><span class="sxs-lookup"><span data-stu-id="bf708-331">The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bf708-332">W .NET Framework w wersji 1.0 i 1.1 typy musi dokładnie pasować.</span><span class="sxs-lookup"><span data-stu-id="bf708-332">In the .NET Framework version 1.0 and 1.1, the types must match exactly.</span></span>  
  
 <span data-ttu-id="bf708-333">Parametru obiektu delegowanego jest zgodny z odpowiednim parametrem metody, jeśli typ parametru delegata jest bardziej restrykcyjny niż typ parametru metody, ponieważ gwarantuje to, że argument przekazany do obiektu delegowanego można bezpiecznie przekazać do Metoda.</span><span class="sxs-lookup"><span data-stu-id="bf708-333">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="bf708-334">Podobnie zwracany typ delegata jest zgodny z typem zwracanym metody, jeśli typ zwracany metody jest bardziej restrykcyjny niż typ zwracany obiektu delegowanego, ponieważ gwarantuje to, że wartość zwracana metody może być bezpiecznie umieszczona na zwracany typ e delegata.</span><span class="sxs-lookup"><span data-stu-id="bf708-334">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="bf708-335">Na przykład delegat z parametrem typu <xref:System.Collections.Hashtable> i zwracanym typem <xref:System.Object> może reprezentować metodę z parametrem typu <xref:System.Object> oraz wartość zwracaną typu <xref:System.Collections.Hashtable>.</span><span class="sxs-lookup"><span data-stu-id="bf708-335">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
## <a name="determining-the-methods-a-delegate-can-represent"></a><span data-ttu-id="bf708-336">Określenie metod, które może reprezentować delegat</span><span class="sxs-lookup"><span data-stu-id="bf708-336">Determining the Methods a Delegate Can Represent</span></span>  
 <span data-ttu-id="bf708-337">Innym sposobem przydatne z elastyczności, jaką to przeciążenie <xref:System.Delegate.CreateDelegate%2A> jest, że wszelkie danego które może reprezentować delegat cztery różne kombinacje podpis metody i rodzaju metody (statyczne w porównaniu z wystąpienia).</span><span class="sxs-lookup"><span data-stu-id="bf708-337">Another useful way to think of the flexibility provided by this overload of <xref:System.Delegate.CreateDelegate%2A> is that any given delegate can represent four different combinations of method signature and method kind (static versus instance).</span></span> <span data-ttu-id="bf708-338">Należy wziąć pod uwagę typ delegata `D` z jednym argumentem typu `C`.</span><span class="sxs-lookup"><span data-stu-id="bf708-338">Consider a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="bf708-339">Poniżej opisano metody `D` może reprezentować ignoruje typ zwracany, ponieważ musi on być zgodny we wszystkich przypadkach:</span><span class="sxs-lookup"><span data-stu-id="bf708-339">The following describes the methods `D` can represent, ignoring the return type since it must match in all cases:</span></span>  
  
-   <span data-ttu-id="bf708-340">`D` może reprezentować dowolną metodę wystąpienia, która ma dokładnie jednego argumentu typu `C`, niezależnie od tego, jakiego typu, którego należy metoda wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="bf708-340">`D` can represent any instance method that has exactly one argument of type `C`, regardless of what type the instance method belongs to.</span></span> <span data-ttu-id="bf708-341">Gdy <xref:System.Delegate.CreateDelegate%2A> jest wywoływana, `firstArgument` jest wystąpieniem typu `method` , do której należy i wynikowego delegata ma zostać zamknięte w ciągu tego wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="bf708-341">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of the type `method` belongs to, and the resulting delegate is said to be closed over that instance.</span></span> <span data-ttu-id="bf708-342">(W przypadku, `D` również może zostać zamknięty przez odwołanie o wartości null, jeśli `firstArgument` jest odwołanie o wartości null.)</span><span class="sxs-lookup"><span data-stu-id="bf708-342">(Trivially, `D` can also be closed over a null reference if `firstArgument` is a null reference.)</span></span>  
  
-   <span data-ttu-id="bf708-343">`D` może reprezentować metodę wystąpienia `C` , nie ma argumentów.</span><span class="sxs-lookup"><span data-stu-id="bf708-343">`D` can represent an instance method of `C` that has no arguments.</span></span> <span data-ttu-id="bf708-344">Gdy <xref:System.Delegate.CreateDelegate%2A> jest wywoływana, `firstArgument` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="bf708-344">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="bf708-345">Wynikowego delegata reprezentuje otwartą metodę wystąpienia, a wystąpienie `C` musi zostać dostarczony zawsze jest wywoływany.</span><span class="sxs-lookup"><span data-stu-id="bf708-345">The resulting delegate represents an open instance method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="bf708-346">`D` może reprezentować statycznej metody, która przyjmuje jeden argument typu `C`, oraz że metoda mogą należeć do dowolnego typu.</span><span class="sxs-lookup"><span data-stu-id="bf708-346">`D` can represent a static method that takes one argument of type `C`, and that method can belong to any type.</span></span> <span data-ttu-id="bf708-347">Gdy <xref:System.Delegate.CreateDelegate%2A> jest wywoływana, `firstArgument` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="bf708-347">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="bf708-348">Wynikowego delegata reprezentuje otwartą metodę statyczną i wystąpienie `C` musi zostać dostarczony zawsze jest wywoływany.</span><span class="sxs-lookup"><span data-stu-id="bf708-348">The resulting delegate represents an open static method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="bf708-349">`D` może reprezentować statycznej metody, która należy do typu `F` i ma dwa argumenty typu `F` i typ `C`.</span><span class="sxs-lookup"><span data-stu-id="bf708-349">`D` can represent a static method that belongs to type `F` and has two arguments, of type `F` and type `C`.</span></span> <span data-ttu-id="bf708-350">Gdy <xref:System.Delegate.CreateDelegate%2A> jest wywoływana, `firstArgument` jest wystąpieniem `F`.</span><span class="sxs-lookup"><span data-stu-id="bf708-350">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of `F`.</span></span> <span data-ttu-id="bf708-351">Metoda statyczna, który jest zamknięty przez to wystąpienie reprezentuje wynikowy obiekt delegowany `F`.</span><span class="sxs-lookup"><span data-stu-id="bf708-351">The resulting delegate represents a static method that is closed over that instance of `F`.</span></span> <span data-ttu-id="bf708-352">Należy pamiętać, że w przypadku których `F` i `C` tego samego typu, statycznej metody ma dwa argumenty typu.</span><span class="sxs-lookup"><span data-stu-id="bf708-352">Note that in the case where `F` and `C` are the same type, the static method has two arguments of that type.</span></span> <span data-ttu-id="bf708-353">(W tym przypadku `D` zamknięte przez odwołanie o wartości null, jeśli `firstArgument` jest odwołanie o wartości null.)</span><span class="sxs-lookup"><span data-stu-id="bf708-353">(In this case, `D` is closed over a null reference if `firstArgument` is a null reference.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bf708-354">Ta sekcja zawiera trzy przykłady kodu.</span><span class="sxs-lookup"><span data-stu-id="bf708-354">This section contains three code examples.</span></span> <span data-ttu-id="bf708-355">Pierwszy przykład przedstawia cztery rodzaje obiektów delegowanych, które mogą być tworzone: zamknięte za pośrednictwem metody wystąpienia, otwartego za pośrednictwem metody wystąpienia, otwartego za pośrednictwem statycznej metody i zamknięte przez metodę statyczną.</span><span class="sxs-lookup"><span data-stu-id="bf708-355">The first example demonstrates the four kinds of delegates that can be created: closed over an instance method, open over an instance method, open over a static method, and closed over a static method.</span></span>  
  
 <span data-ttu-id="bf708-356">Drugi przykład kodu ilustruje zgodność typów parametrów i zwracanych typów.</span><span class="sxs-lookup"><span data-stu-id="bf708-356">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="bf708-357">Trzeci przykład kodu Określa typ delegata pojedynczego i pokazuje, że wszystkie metody, których typ delegowany może reprezentować.</span><span class="sxs-lookup"><span data-stu-id="bf708-357">The third code example defines a single delegate type, and shows all the methods that delegate type can represent.</span></span>  
  
 <span data-ttu-id="bf708-358">**Przykład 1**</span><span class="sxs-lookup"><span data-stu-id="bf708-358">**Example 1**</span></span>  
  
 <span data-ttu-id="bf708-359">Poniższy przykład kodu demonstruje cztery sposoby delegata można tworzyć przy użyciu tego przeciążenia <xref:System.Delegate.CreateDelegate%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="bf708-359">The following code example demonstrates the four ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bf708-360">Istnieją dwa przeciążenia <xref:System.Delegate.CreateDelegate%2A> — określające `firstArgument` i <xref:System.Reflection.MethodInfo>; ich funkcjonalność jest taka sama, z tą różnicą, że jeden pozwala określić, czy po niepowodzeniu do powiązania, a drugi zawsze zgłasza.</span><span class="sxs-lookup"><span data-stu-id="bf708-360">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="bf708-361">W tym przykładzie kodu są używane oba przeciążenia.</span><span class="sxs-lookup"><span data-stu-id="bf708-361">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="bf708-362">Przykład deklaruje klasę `C` za pomocą metody statycznej `M2` i metoda wystąpienia `M1`, i trzy typy delegatów: `D1` przyjmuje wystąpienie klasy `C` i ciąg, `D2` przyjmuje parametry i `D3`nie ma argumentów.</span><span class="sxs-lookup"><span data-stu-id="bf708-362">The example declares a class `C` with a static method `M2` and an instance method `M1`, and three delegate types: `D1` takes an instance of `C` and a string, `D2` takes a string, and `D3` has no arguments.</span></span>  
  
 <span data-ttu-id="bf708-363">Druga klasa o nazwie `Example` zawiera kod, który tworzy delegatów.</span><span class="sxs-lookup"><span data-stu-id="bf708-363">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="bf708-364">Delegat typu `D2`, zamknięte przez wystąpienie `C`, jest tworzony dla metody wystąpienia `M1`.</span><span class="sxs-lookup"><span data-stu-id="bf708-364">A delegate of type `D2`, closed over an instance of `C`, is created for the instance method `M1`.</span></span> <span data-ttu-id="bf708-365">Jest wywoływany przy użyciu różnych ciągów, aby pokazać, że wystąpienia związanego `C` jest zawsze używana.</span><span class="sxs-lookup"><span data-stu-id="bf708-365">It is invoked with different strings, to show that the bound instance of `C` is always used.</span></span>  
  
-   <span data-ttu-id="bf708-366">Delegat typu `D1`, reprezentujący otwartą metodę wystąpienia, jest tworzony dla metody wystąpienia `M1`.</span><span class="sxs-lookup"><span data-stu-id="bf708-366">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="bf708-367">Wystąpienie musi zostać przekazane podczas wywoływania delegata.</span><span class="sxs-lookup"><span data-stu-id="bf708-367">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="bf708-368">Delegat typu `D2`, reprezentujący otwartą metodę statyczną, jest tworzony dla metody statycznej `M2`.</span><span class="sxs-lookup"><span data-stu-id="bf708-368">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
-   <span data-ttu-id="bf708-369">Na koniec delegat typu `D3`, zamknięte przez ciąg, jest tworzony dla metody statycznej `M2`.</span><span class="sxs-lookup"><span data-stu-id="bf708-369">Finally, a delegate of type `D3`, closed over a string, is created for the static method `M2`.</span></span> <span data-ttu-id="bf708-370">Metoda jest wywoływana do wyświetlenia, korzysta z powiązanej ciągu.</span><span class="sxs-lookup"><span data-stu-id="bf708-370">The method is invoked to show that it uses the bound string.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="bf708-371">**Przykład 2**</span><span class="sxs-lookup"><span data-stu-id="bf708-371">**Example 2**</span></span>  
  
 <span data-ttu-id="bf708-372">Poniższy przykład kodu ilustruje zgodność typów parametrów i zwracanych typów.</span><span class="sxs-lookup"><span data-stu-id="bf708-372">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bf708-373">W tym przykładzie kodu użyto <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> przeciążenie metody.</span><span class="sxs-lookup"><span data-stu-id="bf708-373">This code example uses the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span> <span data-ttu-id="bf708-374">Użyj innych przeciążeń przybierają tego <xref:System.Reflection.MethodInfo> jest podobny.</span><span class="sxs-lookup"><span data-stu-id="bf708-374">The use of other overloads that take <xref:System.Reflection.MethodInfo> is similar.</span></span>  
  
 <span data-ttu-id="bf708-375">Przykładowy kod definiuje klasę bazową, o nazwie `Base` i klasę o nazwie `Derived` który pochodzi od klasy `Base`.</span><span class="sxs-lookup"><span data-stu-id="bf708-375">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="bf708-376">Klasa pochodna zawiera `static` (`Shared` w języku Visual Basic) metodę o nazwie `MyMethod` z jednym parametrem typu `Base` i zwracanym typem `Derived`.</span><span class="sxs-lookup"><span data-stu-id="bf708-376">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="bf708-377">Przykład kodu jest również definiowany delegat o nazwie `Example` posiadającą jeden parametr typu `Derived` i zwracanym typem `Base`.</span><span class="sxs-lookup"><span data-stu-id="bf708-377">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="bf708-378">Przykład kodu demonstruje, że delegat o nazwie `Example` może służyć do reprezentowania metody `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="bf708-378">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="bf708-379">Metodę można powiązać z delegatem, ponieważ:</span><span class="sxs-lookup"><span data-stu-id="bf708-379">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="bf708-380">Typ parametru delegata (`Derived`) jest bardziej restrykcyjny niż typ parametru `MyMethod` (`Base`), dzięki czemu jest zawsze można bezpiecznie przekazać argument delegata do `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="bf708-380">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="bf708-381">Zwracany typ `MyMethod` (`Derived`) jest bardziej restrykcyjny niż typ parametru delegata (`Base`), dzięki czemu zawsze jest bezpieczne rzutować zwracany typ metody do zwracanego typu delegata.</span><span class="sxs-lookup"><span data-stu-id="bf708-381">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="bf708-382">W przykładowym kodzie nie są generowane żadne dane wyjściowe.</span><span class="sxs-lookup"><span data-stu-id="bf708-382">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 <span data-ttu-id="bf708-383">**Przykład 3**</span><span class="sxs-lookup"><span data-stu-id="bf708-383">**Example 3**</span></span>  
  
 <span data-ttu-id="bf708-384">Poniższy przykład kodu pokazuje wszystkie metody typ pojedynczego obiektu delegowanego może reprezentować przy użyciu <xref:System.Delegate.CreateDelegate%2A> metodą tworzenia delegatów.</span><span class="sxs-lookup"><span data-stu-id="bf708-384">The following code example shows all the methods a single delegate type can represent, using the <xref:System.Delegate.CreateDelegate%2A> method to create the delegates.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bf708-385">Istnieją dwa przeciążenia <xref:System.Delegate.CreateDelegate%2A> — określające `firstArgument` i <xref:System.Reflection.MethodInfo>; ich funkcjonalność jest taka sama, z tą różnicą, że jeden pozwala określić, czy po niepowodzeniu do powiązania, a drugi zawsze zgłasza.</span><span class="sxs-lookup"><span data-stu-id="bf708-385">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="bf708-386">W tym przykładzie kodu są używane oba przeciążenia.</span><span class="sxs-lookup"><span data-stu-id="bf708-386">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="bf708-387">Przykładowy kod definiuje dwie klasy `C` i `F`, a typ delegata `D` z jednym argumentem typu `C`.</span><span class="sxs-lookup"><span data-stu-id="bf708-387">The code example defines two classes, `C` and `F`, and a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="bf708-388">Klasy mają odpowiednie statycznych lub wystąpienie metody `M1`, `M3`, i `M4`, a klasa `C` ma również metodą wystąpienia `M2` , nie ma argumentów.</span><span class="sxs-lookup"><span data-stu-id="bf708-388">The classes have matching static and instance methods `M1`, `M3`, and `M4`, and class `C` also has an instance method `M2` that has no arguments.</span></span>  
  
 <span data-ttu-id="bf708-389">Trzecim klasę o nazwie `Example` zawiera kod, który tworzy delegatów.</span><span class="sxs-lookup"><span data-stu-id="bf708-389">A third class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="bf708-390">Delegaty są tworzone na przykład metoda `M1` typu `C` i typ `F`; każdy zostało zamknięte przez wystąpienie odpowiedniego typu.</span><span class="sxs-lookup"><span data-stu-id="bf708-390">Delegates are created for instance method `M1` of type `C` and type `F`; each is closed over an instance of the respective type.</span></span> <span data-ttu-id="bf708-391">Metoda `M1` typu `C` Wyświetla `ID` właściwości powiązanej wystąpienia i argumentu.</span><span class="sxs-lookup"><span data-stu-id="bf708-391">Method `M1` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
-   <span data-ttu-id="bf708-392">Obiekt delegowany jest tworzony dla metody `M2` typu `C`.</span><span class="sxs-lookup"><span data-stu-id="bf708-392">A delegate is created for method `M2` of type `C`.</span></span> <span data-ttu-id="bf708-393">Jest to delegat Otwórz wystąpienie, w której argument delegata reprezentuje ukryte pierwszy argument dla metody wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="bf708-393">This is an open instance delegate, in which the argument of the delegate represents the hidden first argument on the instance method.</span></span> <span data-ttu-id="bf708-394">Metoda nie ma innych argumentów.</span><span class="sxs-lookup"><span data-stu-id="bf708-394">The method has no other arguments.</span></span> <span data-ttu-id="bf708-395">Jest to tak, jakby był to metoda statyczna.</span><span class="sxs-lookup"><span data-stu-id="bf708-395">It is called as if it were a static method.</span></span>  
  
-   <span data-ttu-id="bf708-396">Delegaty są tworzone dla metody statycznej `M3` typu `C` i typ `F`; są one otwarte statycznych obiektów delegowanych.</span><span class="sxs-lookup"><span data-stu-id="bf708-396">Delegates are created for static method `M3` of type `C` and type `F`; these are open static delegates.</span></span>  
  
-   <span data-ttu-id="bf708-397">Na koniec obiekty delegowane są tworzone dla metody statycznej `M4` typu `C` i typ `F`; każda metoda charakteryzuje się typ deklarujący jako swój pierwszy argument, a wystąpienie tego typu jest podany, więc delegatów zostaną zamknięte za pośrednictwem ich pierwszym argumentów .</span><span class="sxs-lookup"><span data-stu-id="bf708-397">Finally, delegates are created for static method `M4` of type `C` and type `F`; each method has the declaring type as its first argument, and an instance of the type is supplied, so the delegates are closed over their first arguments.</span></span> <span data-ttu-id="bf708-398">Metoda `M4` typu `C` Wyświetla `ID` właściwości powiązanej wystąpienia i argumentu.</span><span class="sxs-lookup"><span data-stu-id="bf708-398">Method `M4` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="bf708-399">
            <paramref name="type" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-399">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="bf708-400">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-400">-or-</span>
          </span>
          <span data-ttu-id="bf708-401">
            <paramref name="method" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-401">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="bf708-402">
            <paramref name="type" /> nie dziedziczy <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-402">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="bf708-403">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-403">-or-</span>
          </span>
          <span data-ttu-id="bf708-404">
            <paramref name="type" /> nie jest <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-404">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="bf708-405">Zobacz [typów środowiska wykonawczego w odbiciu](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-405">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="bf708-406">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-406">-or-</span>
          </span>
          <span data-ttu-id="bf708-407">
            <paramref name="method" /> Nie można powiązać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-407">
              <paramref name="method" /> cannot be bound.</span>
          </span>
          <span data-ttu-id="bf708-408">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-408">-or-</span>
          </span>
          <span data-ttu-id="bf708-409">
            <paramref name="method" /> nie jest <see langword="RuntimeMethodInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-409">
              <paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span>
          </span>
          <span data-ttu-id="bf708-410">Zobacz [typów środowiska wykonawczego w odbiciu](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-410">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="bf708-411">
            <see langword="Invoke" /> Metody <paramref name="type" /> nie zostanie znaleziony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-411">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="bf708-412">Obiekt wywołujący nie ma uprawnienia niezbędne do dostępu <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-412">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="bf708-413">Po wywołaniu późnego wiązania za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-413">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="bf708-414">Powiązane wyliczenie: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-414">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * string -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="bf708-415">
            <see cref="T:System.Type" /> Delegata do utworzenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-415">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="bf708-416">Wystąpienie klasy, na którym <c>metoda</c> jest wywoływana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-416">The class instance on which <c>method</c> is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="bf708-417">Nazwa metody wystąpienia, która ma reprezentować delegat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-417">The name of the instance method that the delegate is to represent.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf708-418">Tworzy obiekt delegowany określony typ, który reprezentuje określonego wystąpienia metody do wywołania na wystąpienie określonej klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-418">Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf708-419">Delegat określonego typu, który reprezentuje metodę określone wystąpienie do wywołania na wystąpienie określonej klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-419">A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf708-420">Ta metoda tworzy delegatów dla wystąpienia tylko metody.</span><span class="sxs-lookup"><span data-stu-id="bf708-420">This method creates delegates for instance methods only.</span></span> <span data-ttu-id="bf708-421">Metoda wystąpienia to metoda, która jest skojarzona z wystąpieniem klasy, natomiast metoda statyczna jest skojarzona z samą klasą.</span><span class="sxs-lookup"><span data-stu-id="bf708-421">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="bf708-422">Tego przeciążenia metody jest równoważne z wywoływaniem <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> przeciążenia metody, określając `false` dla `ignoreCase` i `true` dla `throwOnBindFailure`.</span><span class="sxs-lookup"><span data-stu-id="bf708-422">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `false` for `ignoreCase` and `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bf708-423">Począwszy od [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], Metoda ta może służyć do dostępu do metod niepublicznych, jeśli obiekt wywołujący zostało udzielone <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> Flaga, a jeśli zestaw uprawnień metod niepublicznych jest ograniczony do obiektu wywołującego przyznania zestawu lub być podzbiorem jej.</span><span class="sxs-lookup"><span data-stu-id="bf708-423">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="bf708-424">(Zobacz [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="bf708-424">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="bf708-425">Aby używać tej funkcji, powinien dotyczyć aplikacji [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszej.</span><span class="sxs-lookup"><span data-stu-id="bf708-425">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="bf708-426">
            <paramref name="type" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-426">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="bf708-427">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-427">-or-</span>
          </span>
          <span data-ttu-id="bf708-428">
            <paramref name="target" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-428">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="bf708-429">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-429">-or-</span>
          </span>
          <span data-ttu-id="bf708-430">
            <paramref name="method" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-430">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="bf708-431">
            <paramref name="type" /> nie dziedziczy <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-431">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="bf708-432">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-432">-or-</span>
          </span>
          <span data-ttu-id="bf708-433">
            <paramref name="type" /> nie jest <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-433">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="bf708-434">Zobacz [typów środowiska wykonawczego w odbiciu](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-434">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="bf708-435">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-435">-or-</span>
          </span>
          <span data-ttu-id="bf708-436">
            <paramref name="method" /> nie jest metodą wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-436">
              <paramref name="method" /> is not an instance method.</span>
          </span>
          <span data-ttu-id="bf708-437">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-437">-or-</span>
          </span>
          <span data-ttu-id="bf708-438">
            <paramref name="method" /> Nie można powiązać, na przykład ponieważ nie można odnaleźć.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-438">
              <paramref name="method" /> cannot be bound, for example because it cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="bf708-439">
            <see langword="Invoke" /> Metody <paramref name="type" /> nie zostanie znaleziony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-439">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="bf708-440">Obiekt wywołujący nie ma uprawnienia niezbędne do dostępu <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-440">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="bf708-441">Po wywołaniu późnego wiązania za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-441">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="bf708-442">Powiązane wyliczenie: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-442">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, System.Reflection.MethodInfo method, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Reflection.MethodInfo method, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Reflection::MethodInfo ^ method, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * System.Reflection.MethodInfo * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, method, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="bf708-443">
            <see cref="T:System.Type" /> Delegata do utworzenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-443">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="bf708-444">
            <see cref="T:System.Reflection.MethodInfo" /> Opisujące statyczną lub metodę ma reprezentować delegat wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-444">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span>
          </span>
        </param>
        <param name="throwOnBindFailure">
          <span data-ttu-id="bf708-445">
            <see langword="true" /> Aby zgłosić wyjątek, jeśli <c>metoda</c> nie może być; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-445">
              <see langword="true" /> to throw an exception if <c>method</c> cannot be bound; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf708-446">Tworzy określonego typu do reprezentowania określonej metody statycznej z określonego zachowania w przypadku niepowodzenia, można powiązać delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-446">Creates a delegate of the specified type to represent the specified static method, with the specified behavior on failure to bind.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf708-447">Delegat określonego typu do reprezentowania określonej metody statycznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-447">A delegate of the specified type to represent the specified static method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf708-448">Tego przeciążenia metody można utworzyć delegatów otwartą metodę statyczną i otwórz wystąpienie metody delegatów — czyli delegatów, które ujawniają ukryte pierwszy argument wystąpienia metody.</span><span class="sxs-lookup"><span data-stu-id="bf708-448">This method overload can create open static method delegates and open instance method delegates — that is, delegates that expose the hidden first argument of instance methods.</span></span> <span data-ttu-id="bf708-449">Aby uzyskać szczegółowy opis Zobacz bardziej ogólnej <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> przeciążenia metody, dzięki czemu można na przykład utworzyć wszystkie kombinacje delegatów otwarte lub zamknięte lub metod statycznych.</span><span class="sxs-lookup"><span data-stu-id="bf708-449">For a detailed explanation, see the more general <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload, which allows you to create all combinations of open or closed delegates for instance or static methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bf708-450">Tego przeciążenia metody należy użyć gdy delegat nie jest zamknięty przez swój pierwszy argument, ponieważ jest trochę szybszy w takiej sytuacji.</span><span class="sxs-lookup"><span data-stu-id="bf708-450">This method overload should be used when the delegate is not closed over its first argument, because it is somewhat faster in that case.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bf708-451">Począwszy od [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], Metoda ta może służyć do dostępu do metod niepublicznych, jeśli obiekt wywołujący zostało udzielone <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> Flaga, a jeśli zestaw uprawnień metod niepublicznych jest ograniczony do obiektu wywołującego przyznania zestawu lub być podzbiorem jej.</span><span class="sxs-lookup"><span data-stu-id="bf708-451">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="bf708-452">(Zobacz [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="bf708-452">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="bf708-453">Aby używać tej funkcji, powinien dotyczyć aplikacji [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszej.</span><span class="sxs-lookup"><span data-stu-id="bf708-453">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="bf708-454">Zgodne typy parametrów i zwracany typ</span><span class="sxs-lookup"><span data-stu-id="bf708-454">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="bf708-455">Typy parametrów i typ zwracany obiektu delegowanego musi być zgodny z typami parametrów i zwracany typ metody, który reprezentuje obiekt delegowany; typy musi dokładnie odpowiadać.</span><span class="sxs-lookup"><span data-stu-id="bf708-455">The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bf708-456">W .NET Framework w wersji 1.0 i 1.1 typy musi dokładnie pasować.</span><span class="sxs-lookup"><span data-stu-id="bf708-456">In the .NET Framework version 1.0 and 1.1, the types must match exactly.</span></span>  
  
 <span data-ttu-id="bf708-457">Parametru obiektu delegowanego jest zgodny z odpowiednim parametrem metody, jeśli typ parametru delegata jest bardziej restrykcyjny niż typ parametru metody, ponieważ gwarantuje to, że argument przekazany do obiektu delegowanego można bezpiecznie przekazać do Metoda.</span><span class="sxs-lookup"><span data-stu-id="bf708-457">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="bf708-458">Podobnie zwracany typ delegata jest zgodny z typem zwracanym metody, jeśli typ zwracany metody jest bardziej restrykcyjny niż typ zwracany obiektu delegowanego, ponieważ gwarantuje to, że wartość zwracana metody może być bezpiecznie umieszczona na zwracany typ e delegata.</span><span class="sxs-lookup"><span data-stu-id="bf708-458">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="bf708-459">Na przykład delegat z parametrem typu <xref:System.Collections.Hashtable> i zwracanym typem <xref:System.Object> może reprezentować metodę z parametrem typu <xref:System.Object> oraz wartość zwracaną typu <xref:System.Collections.Hashtable>.</span><span class="sxs-lookup"><span data-stu-id="bf708-459">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bf708-460">Ten rozdział zawiera dwa przykłady kodu.</span><span class="sxs-lookup"><span data-stu-id="bf708-460">This section contains two code examples.</span></span> <span data-ttu-id="bf708-461">W pierwszym przykładzie pokazano dwa rodzaje obiektów delegowanych, które mogą być tworzone za pomocą tego przeciążenia metody: Otwórz za pośrednictwem metody wystąpienia, a następnie otwórz za pośrednictwem metody statycznej.</span><span class="sxs-lookup"><span data-stu-id="bf708-461">The first example demonstrates the two kinds of delegates that can be created with this method overload: open over an instance method and open over a static method.</span></span>  
  
 <span data-ttu-id="bf708-462">Drugi przykład kodu ilustruje zgodność typów parametrów i zwracanych typów.</span><span class="sxs-lookup"><span data-stu-id="bf708-462">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="bf708-463">**Przykład 1**</span><span class="sxs-lookup"><span data-stu-id="bf708-463">**Example 1**</span></span>  
  
 <span data-ttu-id="bf708-464">Poniższy przykład kodu pokazuje dwa sposoby delegata można tworzyć przy użyciu tego przeciążenia <xref:System.Delegate.CreateDelegate%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="bf708-464">The following code example demonstrates the two ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bf708-465">Istnieją dwa przeciążenia <xref:System.Delegate.CreateDelegate%2A> — określające <xref:System.Reflection.MethodInfo> , ale pierwszy argument; ich funkcjonalność jest taka sama, z tą różnicą, że jeden pozwala określić, czy po niepowodzeniu do powiązania, a drugi zawsze zgłasza.</span><span class="sxs-lookup"><span data-stu-id="bf708-465">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify a <xref:System.Reflection.MethodInfo> but not a first argument; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="bf708-466">W tym przykładzie kodu są używane oba przeciążenia.</span><span class="sxs-lookup"><span data-stu-id="bf708-466">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="bf708-467">Przykład deklaruje klasę `C` przy użyciu statycznej metody `M2` i metoda wystąpienia `M1`, i dwa typy delegatów: `D1` przyjmuje wystąpienie klasy `C` i ciąg, a `D2` ciąg znaków.</span><span class="sxs-lookup"><span data-stu-id="bf708-467">The example declares a class `C` with a static method `M2` and an instance method `M1`, and two delegate types: `D1` takes an instance of `C` and a string, and `D2` takes a string.</span></span>  
  
 <span data-ttu-id="bf708-468">Druga klasa o nazwie `Example` zawiera kod, który tworzy delegatów.</span><span class="sxs-lookup"><span data-stu-id="bf708-468">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="bf708-469">Delegat typu `D1`, reprezentujący otwartą metodę wystąpienia, jest tworzony dla metody wystąpienia `M1`.</span><span class="sxs-lookup"><span data-stu-id="bf708-469">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="bf708-470">Wystąpienie musi zostać przekazane podczas wywoływania delegata.</span><span class="sxs-lookup"><span data-stu-id="bf708-470">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="bf708-471">Delegat typu `D2`, reprezentujący otwartą metodę statyczną, jest tworzony dla metody statycznej `M2`.</span><span class="sxs-lookup"><span data-stu-id="bf708-471">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="bf708-472">**Przykład 2**</span><span class="sxs-lookup"><span data-stu-id="bf708-472">**Example 2**</span></span>  
  
 <span data-ttu-id="bf708-473">Poniższy przykład kodu ilustruje zgodność typów parametrów i zwracanych typów.</span><span class="sxs-lookup"><span data-stu-id="bf708-473">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bf708-474">W tym przykładzie kodu użyto <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> przeciążenie metody.</span><span class="sxs-lookup"><span data-stu-id="bf708-474">This code example uses the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span> <span data-ttu-id="bf708-475">Użyj innych przeciążeń przybierają tego <xref:System.Reflection.MethodInfo> jest podobny.</span><span class="sxs-lookup"><span data-stu-id="bf708-475">The use of other overloads that take <xref:System.Reflection.MethodInfo> is similar.</span></span>  
  
 <span data-ttu-id="bf708-476">Przykładowy kod definiuje klasę bazową, o nazwie `Base` i klasę o nazwie `Derived` który pochodzi od klasy `Base`.</span><span class="sxs-lookup"><span data-stu-id="bf708-476">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="bf708-477">Klasa pochodna zawiera `static` (`Shared` w języku Visual Basic) metodę o nazwie `MyMethod` z jednym parametrem typu `Base` i zwracanym typem `Derived`.</span><span class="sxs-lookup"><span data-stu-id="bf708-477">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="bf708-478">Przykład kodu jest również definiowany delegat o nazwie `Example` posiadającą jeden parametr typu `Derived` i zwracanym typem `Base`.</span><span class="sxs-lookup"><span data-stu-id="bf708-478">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="bf708-479">Przykład kodu demonstruje, że delegat o nazwie `Example` może służyć do reprezentowania metody `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="bf708-479">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="bf708-480">Metodę można powiązać z delegatem, ponieważ:</span><span class="sxs-lookup"><span data-stu-id="bf708-480">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="bf708-481">Typ parametru delegata (`Derived`) jest bardziej restrykcyjny niż typ parametru `MyMethod` (`Base`), dzięki czemu jest zawsze można bezpiecznie przekazać argument delegata do `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="bf708-481">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="bf708-482">Zwracany typ `MyMethod` (`Derived`) jest bardziej restrykcyjny niż typ parametru delegata (`Base`), dzięki czemu zawsze jest bezpieczne rzutować zwracany typ metody do zwracanego typu delegata.</span><span class="sxs-lookup"><span data-stu-id="bf708-482">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="bf708-483">W przykładowym kodzie nie są generowane żadne dane wyjściowe.</span><span class="sxs-lookup"><span data-stu-id="bf708-483">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="bf708-484">
            <paramref name="type" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-484">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="bf708-485">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-485">-or-</span>
          </span>
          <span data-ttu-id="bf708-486">
            <paramref name="method" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-486">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="bf708-487">
            <paramref name="type" /> nie dziedziczy <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-487">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="bf708-488">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-488">-or-</span>
          </span>
          <span data-ttu-id="bf708-489">
            <paramref name="type" /> nie jest <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-489">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="bf708-490">Zobacz [typów środowiska wykonawczego w odbiciu](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-490">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="bf708-491">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-491">-or-</span>
          </span>
          <span data-ttu-id="bf708-492">
            <paramref name="method" /> Nie można powiązać, i <paramref name="throwOnBindFailure" /> jest <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-492">
              <paramref name="method" /> cannot be bound, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="bf708-493">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-493">-or-</span>
          </span>
          <span data-ttu-id="bf708-494">
            <paramref name="method" /> nie jest <see langword="RuntimeMethodInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-494">
              <paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span>
          </span>
          <span data-ttu-id="bf708-495">Zobacz [typów środowiska wykonawczego w odbiciu](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-495">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="bf708-496">
            <see langword="Invoke" /> Metody <paramref name="type" /> nie zostanie znaleziony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-496">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="bf708-497">Obiekt wywołujący nie ma uprawnienia niezbędne do dostępu <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-497">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="bf708-498">Po wywołaniu późnego wiązania za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-498">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="bf708-499">Powiązane wyliczenie: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-499">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, Type target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Type target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, Type ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * Type * string -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Type" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="bf708-500">
            <see cref="T:System.Type" /> Delegata do utworzenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-500">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="bf708-501">
            <see cref="T:System.Type" /> Reprezentujący klasę, która implementuje <c>metoda</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-501">The <see cref="T:System.Type" /> representing the class that implements <c>method</c>.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="bf708-502">Nazwa statyczna metoda, która ma reprezentować delegat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-502">The name of the static method that the delegate is to represent.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf708-503">Tworzy obiekt delegowany określony typ, który reprezentuje określonej metody statycznej określonej klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-503">Creates a delegate of the specified type that represents the specified static method of the specified class.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf708-504">Delegat określony typ, który reprezentuje określonej metody statycznej określonej klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-504">A delegate of the specified type that represents the specified static method of the specified class.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf708-505">Ta metoda tworzy delegatów dla tylko metody statyczne.</span><span class="sxs-lookup"><span data-stu-id="bf708-505">This method creates delegates for static methods only.</span></span> <span data-ttu-id="bf708-506">Metoda wystąpienia to metoda, która jest skojarzona z wystąpieniem klasy, natomiast metoda statyczna jest skojarzona z samą klasą.</span><span class="sxs-lookup"><span data-stu-id="bf708-506">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="bf708-507">Tego przeciążenia metody jest równoważne z wywoływaniem <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> przeciążenia metody, określając `false` dla `ignoreCase` i `true` dla `throwOnBindFailure`.</span><span class="sxs-lookup"><span data-stu-id="bf708-507">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `false` for `ignoreCase` and `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bf708-508">Począwszy od [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], Metoda ta może służyć do dostępu do metod niepublicznych, jeśli obiekt wywołujący zostało udzielone <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> Flaga, a jeśli zestaw uprawnień metod niepublicznych jest ograniczony do obiektu wywołującego przyznania zestawu lub być podzbiorem jej.</span><span class="sxs-lookup"><span data-stu-id="bf708-508">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="bf708-509">(Zobacz [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="bf708-509">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="bf708-510">Aby używać tej funkcji, powinien dotyczyć aplikacji [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszej.</span><span class="sxs-lookup"><span data-stu-id="bf708-510">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="bf708-511">
            <paramref name="type" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-511">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="bf708-512">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-512">-or-</span>
          </span>
          <span data-ttu-id="bf708-513">
            <paramref name="target" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-513">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="bf708-514">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-514">-or-</span>
          </span>
          <span data-ttu-id="bf708-515">
            <paramref name="method" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-515">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="bf708-516">
            <paramref name="type" /> nie dziedziczy <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-516">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="bf708-517">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-517">-or-</span>
          </span>
          <span data-ttu-id="bf708-518">
            <paramref name="type" /> nie jest <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-518">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="bf708-519">Zobacz [typów środowiska wykonawczego w odbiciu](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-519">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="bf708-520">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-520">-or-</span>
          </span>
          <span data-ttu-id="bf708-521">
            <paramref name="target" /> nie jest <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-521">
              <paramref name="target" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="bf708-522">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-522">-or-</span>
          </span>
          <span data-ttu-id="bf708-523">
            <paramref name="target" /> jest to otwarty typ ogólny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-523">
              <paramref name="target" /> is an open generic type.</span>
          </span>
          <span data-ttu-id="bf708-524">Oznacza to, że jego <see cref="P:System.Type.ContainsGenericParameters" /> właściwość <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-524">That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="bf708-525">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-525">-or-</span>
          </span>
          <span data-ttu-id="bf708-526">
            <paramref name="method" /> nie jest <see langword="static" /> — metoda (<see langword="Shared" /> w języku Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-526">
              <paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).</span>
          </span>
          <span data-ttu-id="bf708-527">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-527">-or-</span>
          </span>
          <span data-ttu-id="bf708-528">
            <paramref name="method" /> Nie można powiązać, na przykład ponieważ nie można odnaleźć, i <paramref name="throwOnBindFailure" /> jest <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-528">
              <paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="bf708-529">
            <see langword="Invoke" /> Metody <paramref name="type" /> nie zostanie znaleziony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-529">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="bf708-530">Obiekt wywołujący nie ma uprawnienia niezbędne do dostępu <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-530">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="bf708-531">Po wywołaniu późnego wiązania za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-531">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="bf708-532">Powiązane wyliczenie: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-532">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object firstArgument, System.Reflection.MethodInfo method, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object firstArgument, class System.Reflection.MethodInfo method, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ firstArgument, System::Reflection::MethodInfo ^ method, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * System.Reflection.MethodInfo * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, firstArgument, method, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="firstArgument" Type="System.Object" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="bf708-533">A <see cref="T:System.Type" /> reprezentujący typ delegata do utworzenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-533">A <see cref="T:System.Type" /> representing the type of delegate to create.</span>
          </span>
        </param>
        <param name="firstArgument">
          <span data-ttu-id="bf708-534">
            <see cref="T:System.Object" /> Oznacza to pierwszy argument metody reprezentuje obiekt delegowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-534">An <see cref="T:System.Object" /> that is the first argument of the method the delegate represents.</span>
          </span>
          <span data-ttu-id="bf708-535">Na przykład metody, musi ona zgodny z typem wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-535">For instance methods, it must be compatible with the instance type.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="bf708-536">
            <see cref="T:System.Reflection.MethodInfo" /> Opisujące statyczną lub metodę ma reprezentować delegat wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-536">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span>
          </span>
        </param>
        <param name="throwOnBindFailure">
          <span data-ttu-id="bf708-537">
            <see langword="true" /> Aby zgłosić wyjątek, jeśli <c>metoda</c> nie może być; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-537">
              <see langword="true" /> to throw an exception if <c>method</c> cannot be bound; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf708-538">Tworzy określonego typu, który reprezentuje określony statyczna lub metoda wystąpienia, z pierwszego określonego argumentu i określonego zachowania w przypadku niepowodzenia, można powiązać delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-538">Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument and the specified behavior on failure to bind.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf708-539">Delegat określonego typu, który reprezentuje określony statyczna lub metoda wystąpienia, lub <see langword="null" /> Jeśli <paramref name="throwOnBindFailure" /> jest <see langword="false" /> i nie można powiązać delegata z <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-539">A delegate of the specified type that represents the specified static or instance method, or <see langword="null" /> if <paramref name="throwOnBindFailure" /> is <see langword="false" /> and the delegate cannot be bound to <paramref name="method" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf708-540">Tego przeciążenia metody i <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> przeciążenia metody, która zawsze zgłasza wyjątek w przypadku niepowodzenia, można powiązać, podaj najbardziej elastyczny sposób do tworzenia obiektów delegowanych.</span><span class="sxs-lookup"><span data-stu-id="bf708-540">This method overload and the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> method overload, which always throws on failure to bind, provide the most flexible way to create delegates.</span></span> <span data-ttu-id="bf708-541">Służy ich do tworzenia delegatów dla statycznych lub metody wystąpienia, z lub bez pierwszy argument.</span><span class="sxs-lookup"><span data-stu-id="bf708-541">You can use them to create delegates for either static or instance methods, with or without a first argument.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bf708-542">Jeśli pierwszy argument nie zostanie podana, należy użyć <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> przeciążenie metody w celu zapewnienia lepszej wydajności.</span><span class="sxs-lookup"><span data-stu-id="bf708-542">If you do not supply a first argument, use the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload for better performance.</span></span>  
  
 <span data-ttu-id="bf708-543">Typ delegata, a także metoda musi mieć zgodne typy zwracane.</span><span class="sxs-lookup"><span data-stu-id="bf708-543">The delegate type and the method must have compatible return types.</span></span> <span data-ttu-id="bf708-544">Oznacza to, że typ zwracany `method` musi być przypisane do zwracanego typu `type`.</span><span class="sxs-lookup"><span data-stu-id="bf708-544">That is, the return type of `method` must be assignable to the return type of `type`.</span></span>  
  
 <span data-ttu-id="bf708-545">Jeśli `firstArgument` jest podany, zostanie on przekazany do `method` za każdym razem, gdy obiekt delegowany jest wywoływany; `firstArgument` jest nazywany powiązać z delegatem, i delegowany jest zamknięte w ciągu pierwszego argumentu.</span><span class="sxs-lookup"><span data-stu-id="bf708-545">If `firstArgument` is supplied, it is passed to `method` every time the delegate is invoked; `firstArgument` is said to be bound to the delegate, and the delegate is said to be closed over its first argument.</span></span> <span data-ttu-id="bf708-546">Jeśli `method` jest `static` (`Shared` w języku Visual Basic), argument dostarczona podczas wywoływania delegata lista zawiera wszystkie parametry z wyjątkiem pierwszej; Jeśli `method` jest metodą wystąpienia `firstArgument` są przekazywane do wystąpienia ukryte parametr (reprezentowane przez `this` w języku C# lub przez `Me` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="bf708-546">If `method` is `static` (`Shared` in Visual Basic), the argument list supplied when invoking the delegate includes all parameters except the first; if `method` is an instance method, then `firstArgument` is passed to the hidden instance parameter (represented by `this` in C#, or by `Me` in Visual Basic).</span></span>  
  
 <span data-ttu-id="bf708-547">Jeśli `firstArgument` jest podany, pierwszy parametr `method` musi być typem referencyjnym, i `firstArgument` muszą być zgodne z danym typem.</span><span class="sxs-lookup"><span data-stu-id="bf708-547">If `firstArgument` is supplied, the first parameter of `method` must be a reference type, and `firstArgument` must be compatible with that type.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bf708-548">Jeśli `method` jest `static` (`Shared` w języku Visual Basic), a jej pierwszy parametr jest typu <xref:System.Object> lub <xref:System.ValueType>, następnie `firstArgument` może być typem wartości.</span><span class="sxs-lookup"><span data-stu-id="bf708-548">If `method` is `static` (`Shared` in Visual Basic) and its first parameter is of type <xref:System.Object> or <xref:System.ValueType>, then `firstArgument` can be a value type.</span></span> <span data-ttu-id="bf708-549">W tym przypadku `firstArgument` jest automatycznie ramce.</span><span class="sxs-lookup"><span data-stu-id="bf708-549">In this case `firstArgument` is automatically boxed.</span></span> <span data-ttu-id="bf708-550">Automatyczne pakowanie nie występuje żadnych argumentów, jak w języku C# lub Visual Basic funkcji wywołałby.</span><span class="sxs-lookup"><span data-stu-id="bf708-550">Automatic boxing does not occur for any other arguments, as it would in a C# or Visual Basic function call.</span></span>  
  
 <span data-ttu-id="bf708-551">Jeśli `firstArgument` jest odwołanie o wartości null i `method` jest metodą wystąpienia, wynik zależy od podpisy typu delegata `type` i `method`:</span><span class="sxs-lookup"><span data-stu-id="bf708-551">If `firstArgument` is a null reference and `method` is an instance method, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="bf708-552">Jeśli podpis `type` jawnie zawierającym ukryte pierwszy parametr `method`, delegowany jest reprezentujący otwartą metodę wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="bf708-552">If the signature of `type` explicitly includes the hidden first parameter of `method`, the delegate is said to represent an open instance method.</span></span> <span data-ttu-id="bf708-553">Gdy obiekt delegowany jest wywoływany, pierwszy argument na liście argumentów jest przekazywany do parametru instance ukrytych z `method`.</span><span class="sxs-lookup"><span data-stu-id="bf708-553">When the delegate is invoked, the first argument in the argument list is passed to the hidden instance parameter of `method`.</span></span>  
  
-   <span data-ttu-id="bf708-554">Jeśli sygnatur `method` i `type` dopasowania (oznacza to, że wszystkie typy parametrów są zgodne), a następnie delegowany jest zamknięte przez odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="bf708-554">If the signatures of `method` and `type` match (that is, all parameter types are compatible), then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="bf708-555">Wywołanie delegata jest podobne do wywołania metody wystąpienia na wystąpienie o wartości null, która nie jest szczególnie przydatne niczego robić.</span><span class="sxs-lookup"><span data-stu-id="bf708-555">Invoking the delegate is like calling an instance method on a null instance, which is not a particularly useful thing to do.</span></span>  
  
 <span data-ttu-id="bf708-556">Jeśli `firstArgument` jest odwołanie o wartości null i `method` jest statyczny, wynik zależy od podpisy typu delegata `type` i `method`:</span><span class="sxs-lookup"><span data-stu-id="bf708-556">If `firstArgument` is a null reference and `method` is static, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="bf708-557">Jeśli podpis `method` i `type` dopasowania (oznacza to, że wszystkie typy parametrów są zgodne), delegowany jest reprezentujący otwartą metodę statyczną.</span><span class="sxs-lookup"><span data-stu-id="bf708-557">If the signature of `method` and `type` match (that is, all parameter types are compatible), the delegate is said to represent an open static method.</span></span> <span data-ttu-id="bf708-558">Dotyczy to najbardziej typowe dla metod statycznych.</span><span class="sxs-lookup"><span data-stu-id="bf708-558">This is the most common case for static methods.</span></span> <span data-ttu-id="bf708-559">W tym przypadku nieco lepszą wydajność można uzyskać za pomocą <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> przeciążenie metody.</span><span class="sxs-lookup"><span data-stu-id="bf708-559">In this case, you can get slightly better performance by using the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload.</span></span>  
  
-   <span data-ttu-id="bf708-560">Jeśli podpis `type` zaczyna się od drugiego parametru `method` i pozostałe typy parametrów są niezgodne, a następnie delegowany jest zamknięte przez odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="bf708-560">If the signature of `type` begins with the second parameter of `method` and the rest of the parameter types are compatible, then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="bf708-561">Gdy obiekt delegowany jest wywoływany, odwołanie o wartości null jest przekazywana do pierwszy parametr `method`.</span><span class="sxs-lookup"><span data-stu-id="bf708-561">When the delegate is invoked, a null reference is passed to the first parameter of `method`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bf708-562">Począwszy od [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], Metoda ta może służyć do dostępu do metod niepublicznych, jeśli obiekt wywołujący zostało udzielone <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> Flaga, a jeśli zestaw uprawnień metod niepublicznych jest ograniczony do obiektu wywołującego przyznania zestawu lub być podzbiorem jej.</span><span class="sxs-lookup"><span data-stu-id="bf708-562">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="bf708-563">(Zobacz [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="bf708-563">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="bf708-564">Aby używać tej funkcji, powinien dotyczyć aplikacji [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszej.</span><span class="sxs-lookup"><span data-stu-id="bf708-564">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="bf708-565">Zgodne typy parametrów i zwracany typ</span><span class="sxs-lookup"><span data-stu-id="bf708-565">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="bf708-566">Typy parametrów i typ zwracany obiektu delegowanego musi być zgodny z typami parametrów i zwracany typ metody, który reprezentuje obiekt delegowany; typy musi dokładnie odpowiadać.</span><span class="sxs-lookup"><span data-stu-id="bf708-566">The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bf708-567">W .NET Framework w wersji 1.0 i 1.1 typów musi dokładnie pasować.</span><span class="sxs-lookup"><span data-stu-id="bf708-567">In the .NET Framework version 1.0 and 1.1 the types must match exactly.</span></span>  
  
 <span data-ttu-id="bf708-568">Parametru obiektu delegowanego jest zgodny z odpowiednim parametrem metody, jeśli typ parametru delegata jest bardziej restrykcyjny niż typ parametru metody, ponieważ gwarantuje to, że argument przekazany do obiektu delegowanego można bezpiecznie przekazać do Metoda.</span><span class="sxs-lookup"><span data-stu-id="bf708-568">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="bf708-569">Podobnie zwracany typ delegata jest zgodny z typem zwracanym metody, jeśli typ zwracany metody jest bardziej restrykcyjny niż typ zwracany obiektu delegowanego, ponieważ gwarantuje to, że wartość zwracana metody może być bezpiecznie umieszczona na zwracany typ e delegata.</span><span class="sxs-lookup"><span data-stu-id="bf708-569">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="bf708-570">Na przykład delegat z parametrem typu <xref:System.Collections.Hashtable> i zwracanym typem <xref:System.Object> może reprezentować metodę z parametrem typu <xref:System.Object> oraz wartość zwracaną typu <xref:System.Collections.Hashtable>.</span><span class="sxs-lookup"><span data-stu-id="bf708-570">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
## <a name="determining-the-methods-a-delegate-can-represent"></a><span data-ttu-id="bf708-571">Określenie metod, które może reprezentować delegat</span><span class="sxs-lookup"><span data-stu-id="bf708-571">Determining the Methods a Delegate Can Represent</span></span>  
 <span data-ttu-id="bf708-572">Innym sposobem przydatne z elastyczności, jaką to przeciążenie <xref:System.Delegate.CreateDelegate%2A> jest, że wszelkie danego które może reprezentować delegat cztery różne kombinacje podpis metody i rodzaju metody (statyczne w porównaniu z wystąpienia).</span><span class="sxs-lookup"><span data-stu-id="bf708-572">Another useful way to think of the flexibility provided by this overload of <xref:System.Delegate.CreateDelegate%2A> is that any given delegate can represent four different combinations of method signature and method kind (static versus instance).</span></span> <span data-ttu-id="bf708-573">Należy wziąć pod uwagę typ delegata `D` z jednym argumentem typu `C`.</span><span class="sxs-lookup"><span data-stu-id="bf708-573">Consider a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="bf708-574">Poniżej opisano metody `D` może reprezentować ignoruje typ zwracany, ponieważ musi on być zgodny we wszystkich przypadkach:</span><span class="sxs-lookup"><span data-stu-id="bf708-574">The following describes the methods `D` can represent, ignoring the return type since it must match in all cases:</span></span>  
  
-   <span data-ttu-id="bf708-575">`D` może reprezentować dowolną metodę wystąpienia, która ma dokładnie jednego argumentu typu `C`, niezależnie od tego, jakiego typu, którego należy metoda wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="bf708-575">`D` can represent any instance method that has exactly one argument of type `C`, regardless of what type the instance method belongs to.</span></span> <span data-ttu-id="bf708-576">Gdy <xref:System.Delegate.CreateDelegate%2A> jest wywoływana, `firstArgument` jest wystąpieniem typu `method` , do której należy i wynikowego delegata ma zostać zamknięte w ciągu tego wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="bf708-576">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of the type `method` belongs to, and the resulting delegate is said to be closed over that instance.</span></span> <span data-ttu-id="bf708-577">(W przypadku, `D` również może zostać zamknięty przez odwołanie o wartości null, jeśli `firstArgument` jest `null`.)</span><span class="sxs-lookup"><span data-stu-id="bf708-577">(Trivially, `D` can also be closed over a null reference if `firstArgument` is `null`.)</span></span>  
  
-   <span data-ttu-id="bf708-578">`D` może reprezentować metodę wystąpienia `C` , nie ma argumentów.</span><span class="sxs-lookup"><span data-stu-id="bf708-578">`D` can represent an instance method of `C` that has no arguments.</span></span> <span data-ttu-id="bf708-579">Gdy <xref:System.Delegate.CreateDelegate%2A> jest wywoływana, `firstArgument` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="bf708-579">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="bf708-580">Wynikowego delegata reprezentuje otwartą metodę wystąpienia, a wystąpienie `C` musi zostać dostarczony zawsze jest wywoływany.</span><span class="sxs-lookup"><span data-stu-id="bf708-580">The resulting delegate represents an open instance method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="bf708-581">`D` może reprezentować statycznej metody, która przyjmuje jeden argument typu `C`, oraz że metoda mogą należeć do dowolnego typu.</span><span class="sxs-lookup"><span data-stu-id="bf708-581">`D` can represent a static method that takes one argument of type `C`, and that method can belong to any type.</span></span> <span data-ttu-id="bf708-582">Gdy <xref:System.Delegate.CreateDelegate%2A> jest wywoływana, `firstArgument` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="bf708-582">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="bf708-583">Wynikowego delegata reprezentuje otwartą metodę statyczną i wystąpienie `C` musi zostać dostarczony zawsze jest wywoływany.</span><span class="sxs-lookup"><span data-stu-id="bf708-583">The resulting delegate represents an open static method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="bf708-584">`D` może reprezentować statycznej metody, która należy do typu `F` i ma dwa argumenty typu `F` i typ `C`.</span><span class="sxs-lookup"><span data-stu-id="bf708-584">`D` can represent a static method that belongs to type `F` and has two arguments, of type `F` and type `C`.</span></span> <span data-ttu-id="bf708-585">Gdy <xref:System.Delegate.CreateDelegate%2A> jest wywoływana, `firstArgument` jest wystąpieniem `F`.</span><span class="sxs-lookup"><span data-stu-id="bf708-585">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of `F`.</span></span> <span data-ttu-id="bf708-586">Metoda statyczna, który jest zamknięty przez to wystąpienie reprezentuje wynikowy obiekt delegowany `F`.</span><span class="sxs-lookup"><span data-stu-id="bf708-586">The resulting delegate represents a static method that is closed over that instance of `F`.</span></span> <span data-ttu-id="bf708-587">Należy pamiętać, że w przypadku których `F` i `C` tego samego typu, statycznej metody ma dwa argumenty typu.</span><span class="sxs-lookup"><span data-stu-id="bf708-587">Note that in the case where `F` and `C` are the same type, the static method has two arguments of that type.</span></span> <span data-ttu-id="bf708-588">(W tym przypadku `D` zamknięte przez odwołanie o wartości null, jeśli `firstArgument` jest `null`.)</span><span class="sxs-lookup"><span data-stu-id="bf708-588">(In this case, `D` is closed over a null reference if `firstArgument` is `null`.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bf708-589">Ta sekcja zawiera trzy przykłady kodu.</span><span class="sxs-lookup"><span data-stu-id="bf708-589">This section contains three code examples.</span></span> <span data-ttu-id="bf708-590">Pierwszy przykład przedstawia cztery rodzaje obiektów delegowanych, które mogą być tworzone: zamknięte za pośrednictwem metody wystąpienia, otwartego za pośrednictwem metody wystąpienia, otwartego za pośrednictwem statycznej metody i zamknięte przez metodę statyczną.</span><span class="sxs-lookup"><span data-stu-id="bf708-590">The first example demonstrates the four kinds of delegates that can be created: closed over an instance method, open over an instance method, open over a static method, and closed over a static method.</span></span>  
  
 <span data-ttu-id="bf708-591">Drugi przykład kodu ilustruje zgodność typów parametrów i zwracanych typów.</span><span class="sxs-lookup"><span data-stu-id="bf708-591">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="bf708-592">Trzeci przykład kodu Określa typ delegata pojedynczego i pokazuje, że wszystkie metody, których typ delegowany może reprezentować.</span><span class="sxs-lookup"><span data-stu-id="bf708-592">The third code example defines a single delegate type, and shows all the methods that delegate type can represent.</span></span>  
  
 <span data-ttu-id="bf708-593">**Przykład 1**</span><span class="sxs-lookup"><span data-stu-id="bf708-593">**Example 1**</span></span>  
  
 <span data-ttu-id="bf708-594">Poniższy przykład kodu demonstruje cztery sposoby delegata można tworzyć przy użyciu tego przeciążenia <xref:System.Delegate.CreateDelegate%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="bf708-594">The following code example demonstrates the four ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bf708-595">Istnieją dwa przeciążenia <xref:System.Delegate.CreateDelegate%2A> — określające `firstArgument` i <xref:System.Reflection.MethodInfo>; ich funkcjonalność jest taka sama, z tą różnicą, że jeden pozwala określić, czy po niepowodzeniu do powiązania, a drugi zawsze zgłasza.</span><span class="sxs-lookup"><span data-stu-id="bf708-595">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="bf708-596">W tym przykładzie kodu są używane oba przeciążenia.</span><span class="sxs-lookup"><span data-stu-id="bf708-596">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="bf708-597">Przykład deklaruje klasę `C` za pomocą metody statycznej `M2` i metoda wystąpienia `M1`, i trzy typy delegatów: `D1` przyjmuje wystąpienie klasy `C` i ciąg, `D2` przyjmuje parametry i `D3`nie ma argumentów.</span><span class="sxs-lookup"><span data-stu-id="bf708-597">The example declares a class `C` with a static method `M2` and an instance method `M1`, and three delegate types: `D1` takes an instance of `C` and a string, `D2` takes a string, and `D3` has no arguments.</span></span>  
  
 <span data-ttu-id="bf708-598">Druga klasa o nazwie `Example` zawiera kod, który tworzy delegatów.</span><span class="sxs-lookup"><span data-stu-id="bf708-598">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="bf708-599">Delegat typu `D2`, zamknięte przez wystąpienie `C`, jest tworzony dla metody wystąpienia `M1`.</span><span class="sxs-lookup"><span data-stu-id="bf708-599">A delegate of type `D2`, closed over an instance of `C`, is created for the instance method `M1`.</span></span> <span data-ttu-id="bf708-600">Jest wywoływany przy użyciu różnych ciągów, aby pokazać, że wystąpienia związanego `C` jest zawsze używana.</span><span class="sxs-lookup"><span data-stu-id="bf708-600">It is invoked with different strings, to show that the bound instance of `C` is always used.</span></span>  
  
-   <span data-ttu-id="bf708-601">Delegat typu `D1`, reprezentujący otwartą metodę wystąpienia, jest tworzony dla metody wystąpienia `M1`.</span><span class="sxs-lookup"><span data-stu-id="bf708-601">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="bf708-602">Wystąpienie musi zostać przekazane podczas wywoływania delegata.</span><span class="sxs-lookup"><span data-stu-id="bf708-602">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="bf708-603">Delegat typu `D2`, reprezentujący otwartą metodę statyczną, jest tworzony dla metody statycznej `M2`.</span><span class="sxs-lookup"><span data-stu-id="bf708-603">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
-   <span data-ttu-id="bf708-604">Na koniec delegat typu `D3`, zamknięte przez ciąg, jest tworzony dla metody statycznej `M2`.</span><span class="sxs-lookup"><span data-stu-id="bf708-604">Finally, a delegate of type `D3`, closed over a string, is created for the static method `M2`.</span></span> <span data-ttu-id="bf708-605">Metoda jest wywoływana do wyświetlenia, korzysta z powiązanej ciągu.</span><span class="sxs-lookup"><span data-stu-id="bf708-605">The method is invoked to show that it uses the bound string.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="bf708-606">**Przykład 2**</span><span class="sxs-lookup"><span data-stu-id="bf708-606">**Example 2**</span></span>  
  
 <span data-ttu-id="bf708-607">Poniższy przykład kodu ilustruje zgodność typów parametrów i zwracanych typów.</span><span class="sxs-lookup"><span data-stu-id="bf708-607">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bf708-608">W tym przykładzie kodu użyto <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> przeciążenie metody.</span><span class="sxs-lookup"><span data-stu-id="bf708-608">This code example uses the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span> <span data-ttu-id="bf708-609">Użyj innych przeciążeń przybierają tego <xref:System.Reflection.MethodInfo> jest podobny.</span><span class="sxs-lookup"><span data-stu-id="bf708-609">The use of other overloads that take <xref:System.Reflection.MethodInfo> is similar.</span></span>  
  
 <span data-ttu-id="bf708-610">Przykładowy kod definiuje klasę bazową, o nazwie `Base` i klasę o nazwie `Derived` który pochodzi od klasy `Base`.</span><span class="sxs-lookup"><span data-stu-id="bf708-610">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="bf708-611">Klasa pochodna zawiera `static` (`Shared` w języku Visual Basic) metodę o nazwie `MyMethod` z jednym parametrem typu `Base` i zwracanym typem `Derived`.</span><span class="sxs-lookup"><span data-stu-id="bf708-611">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="bf708-612">Przykład kodu jest również definiowany delegat o nazwie `Example` posiadającą jeden parametr typu `Derived` i zwracanym typem `Base`.</span><span class="sxs-lookup"><span data-stu-id="bf708-612">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="bf708-613">Przykład kodu demonstruje, że delegat o nazwie `Example` może służyć do reprezentowania metody `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="bf708-613">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="bf708-614">Metodę można powiązać z delegatem, ponieważ:</span><span class="sxs-lookup"><span data-stu-id="bf708-614">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="bf708-615">Typ parametru delegata (`Derived`) jest bardziej restrykcyjny niż typ parametru `MyMethod` (`Base`), dzięki czemu jest zawsze można bezpiecznie przekazać argument delegata do `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="bf708-615">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="bf708-616">Zwracany typ `MyMethod` (`Derived`) jest bardziej restrykcyjny niż typ parametru delegata (`Base`), dzięki czemu zawsze jest bezpieczne rzutować zwracany typ metody do zwracanego typu delegata.</span><span class="sxs-lookup"><span data-stu-id="bf708-616">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="bf708-617">W przykładowym kodzie nie są generowane żadne dane wyjściowe.</span><span class="sxs-lookup"><span data-stu-id="bf708-617">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 <span data-ttu-id="bf708-618">**Przykład 3**</span><span class="sxs-lookup"><span data-stu-id="bf708-618">**Example 3**</span></span>  
  
 <span data-ttu-id="bf708-619">Poniższy przykład kodu pokazuje wszystkie metody, których typ pojedynczego obiektu delegowanego może reprezentować.</span><span class="sxs-lookup"><span data-stu-id="bf708-619">The following code example shows all the methods a single delegate type can represent.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bf708-620">Istnieją dwa przeciążenia <xref:System.Delegate.CreateDelegate%2A> — określające `firstArgument` i <xref:System.Reflection.MethodInfo>; ich funkcjonalność jest taka sama, z tą różnicą, że jeden pozwala określić, czy po niepowodzeniu do powiązania, a drugi zawsze zgłasza.</span><span class="sxs-lookup"><span data-stu-id="bf708-620">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="bf708-621">W tym przykładzie kodu są używane oba przeciążenia.</span><span class="sxs-lookup"><span data-stu-id="bf708-621">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="bf708-622">Przykładowy kod definiuje dwie klasy `C` i `F`, a typ delegata `D` z jednym argumentem typu `C`.</span><span class="sxs-lookup"><span data-stu-id="bf708-622">The code example defines two classes, `C` and `F`, and a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="bf708-623">Klasy mają odpowiednie statycznych lub wystąpienie metody `M1`, `M3`, i `M4`, a klasa `C` ma również metodą wystąpienia `M2` , nie ma argumentów.</span><span class="sxs-lookup"><span data-stu-id="bf708-623">The classes have matching static and instance methods `M1`, `M3`, and `M4`, and class `C` also has an instance method `M2` that has no arguments.</span></span>  
  
 <span data-ttu-id="bf708-624">Trzecim klasę o nazwie `Example` zawiera kod, który tworzy delegatów.</span><span class="sxs-lookup"><span data-stu-id="bf708-624">A third class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="bf708-625">Delegaty są tworzone na przykład metoda `M1` typu `C` i typ `F`; każdy zostało zamknięte przez wystąpienie odpowiedniego typu.</span><span class="sxs-lookup"><span data-stu-id="bf708-625">Delegates are created for instance method `M1` of type `C` and type `F`; each is closed over an instance of the respective type.</span></span> <span data-ttu-id="bf708-626">Metoda `M1` typu `C` Wyświetla `ID` właściwości powiązanej wystąpienia i argumentu.</span><span class="sxs-lookup"><span data-stu-id="bf708-626">Method `M1` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
-   <span data-ttu-id="bf708-627">Obiekt delegowany jest tworzony dla metody `M2` typu `C`.</span><span class="sxs-lookup"><span data-stu-id="bf708-627">A delegate is created for method `M2` of type `C`.</span></span> <span data-ttu-id="bf708-628">Jest to delegat Otwórz wystąpienie, w której argument delegata reprezentuje ukryte pierwszy argument dla metody wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="bf708-628">This is an open instance delegate, in which the argument of the delegate represents the hidden first argument on the instance method.</span></span> <span data-ttu-id="bf708-629">Metoda nie ma innych argumentów.</span><span class="sxs-lookup"><span data-stu-id="bf708-629">The method has no other arguments.</span></span>  
  
-   <span data-ttu-id="bf708-630">Delegaty są tworzone dla metody statycznej `M3` typu `C` i typ `F`; są one otwarte statycznych obiektów delegowanych.</span><span class="sxs-lookup"><span data-stu-id="bf708-630">Delegates are created for static method `M3` of type `C` and type `F`; these are open static delegates.</span></span>  
  
-   <span data-ttu-id="bf708-631">Na koniec obiekty delegowane są tworzone dla metody statycznej `M4` typu `C` i typ `F`; każda metoda charakteryzuje się typ deklarujący jako swój pierwszy argument, a wystąpienie tego typu jest podany, więc delegatów zostaną zamknięte za pośrednictwem ich pierwszym argumentów .</span><span class="sxs-lookup"><span data-stu-id="bf708-631">Finally, delegates are created for static method `M4` of type `C` and type `F`; each method has the declaring type as its first argument, and an instance of the type is supplied, so the delegates are closed over their first arguments.</span></span> <span data-ttu-id="bf708-632">Metoda `M4` typu `C` Wyświetla `ID` właściwości powiązanej wystąpienia i argumentu.</span><span class="sxs-lookup"><span data-stu-id="bf708-632">Method `M4` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="bf708-633">
            <paramref name="type" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-633">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="bf708-634">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-634">-or-</span>
          </span>
          <span data-ttu-id="bf708-635">
            <paramref name="method" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-635">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="bf708-636">
            <paramref name="type" /> nie dziedziczy <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-636">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="bf708-637">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-637">-or-</span>
          </span>
          <span data-ttu-id="bf708-638">
            <paramref name="type" /> nie jest <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-638">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="bf708-639">Zobacz [typów środowiska wykonawczego w odbiciu](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-639">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="bf708-640">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-640">-or-</span>
          </span>
          <span data-ttu-id="bf708-641">
            <paramref name="method" /> Nie można powiązać, i <paramref name="throwOnBindFailure" /> jest <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-641">
              <paramref name="method" /> cannot be bound, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="bf708-642">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-642">-or-</span>
          </span>
          <span data-ttu-id="bf708-643">
            <paramref name="method" /> nie jest <see langword="RuntimeMethodInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-643">
              <paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span>
          </span>
          <span data-ttu-id="bf708-644">Zobacz [typów środowiska wykonawczego w odbiciu](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-644">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="bf708-645">
            <see langword="Invoke" /> Metody <paramref name="type" /> nie zostanie znaleziony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-645">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="bf708-646">Obiekt wywołujący nie ma uprawnienia niezbędne do dostępu <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-646">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="bf708-647">Po wywołaniu późnego wiązania za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-647">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="bf708-648">Powiązane wyliczenie: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-648">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object target, string method, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object target, string method, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ target, System::String ^ method, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * string * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="bf708-649">
            <see cref="T:System.Type" /> Delegata do utworzenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-649">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="bf708-650">Wystąpienie klasy, na którym <c>metoda</c> jest wywoływana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-650">The class instance on which <c>method</c> is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="bf708-651">Nazwa metody wystąpienia, która ma reprezentować delegat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-651">The name of the instance method that the delegate is to represent.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="bf708-652">Wartość logiczna wskazująca, podczas porównywania nazwy metody ma być ignorowana wielkość liter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-652">A Boolean indicating whether to ignore the case when comparing the name of the method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf708-653">Tworzy delegata określonego typu, który reprezentuje metodę określone wystąpienie do wywołania na wystąpienie określonej klasy przy użyciu określonego uwzględnianie wielkości liter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-653">Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance with the specified case-sensitivity.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf708-654">Delegat określonego typu, który reprezentuje metodę określone wystąpienie do wywołania na wystąpienie określonej klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-654">A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf708-655">Ta metoda tworzy delegatów dla wystąpienia tylko metody.</span><span class="sxs-lookup"><span data-stu-id="bf708-655">This method creates delegates for instance methods only.</span></span> <span data-ttu-id="bf708-656">Metoda wystąpienia to metoda, która jest skojarzona z wystąpieniem klasy, natomiast metoda statyczna jest skojarzona z samą klasą.</span><span class="sxs-lookup"><span data-stu-id="bf708-656">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="bf708-657">Tego przeciążenia metody jest równoważne z wywoływaniem <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> przeciążenia metody, określając `true` dla `throwOnBindFailure`.</span><span class="sxs-lookup"><span data-stu-id="bf708-657">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bf708-658">Począwszy od [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], Metoda ta może służyć do dostępu do metod niepublicznych, jeśli obiekt wywołujący zostało udzielone <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> Flaga, a jeśli zestaw uprawnień metod niepublicznych jest ograniczony do obiektu wywołującego przyznania zestawu lub być podzbiorem jej.</span><span class="sxs-lookup"><span data-stu-id="bf708-658">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="bf708-659">(Zobacz [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="bf708-659">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="bf708-660">Aby używać tej funkcji, powinien dotyczyć aplikacji [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszej.</span><span class="sxs-lookup"><span data-stu-id="bf708-660">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="bf708-661">
            <paramref name="type" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-661">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="bf708-662">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-662">-or-</span>
          </span>
          <span data-ttu-id="bf708-663">
            <paramref name="target" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-663">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="bf708-664">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-664">-or-</span>
          </span>
          <span data-ttu-id="bf708-665">
            <paramref name="method" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-665">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="bf708-666">
            <paramref name="type" /> nie dziedziczy <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-666">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="bf708-667">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-667">-or-</span>
          </span>
          <span data-ttu-id="bf708-668">
            <paramref name="type" /> nie jest <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-668">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="bf708-669">Zobacz [typów środowiska wykonawczego w odbiciu](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-669">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="bf708-670">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-670">-or-</span>
          </span>
          <span data-ttu-id="bf708-671">
            <paramref name="method" /> nie jest metodą wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-671">
              <paramref name="method" /> is not an instance method.</span>
          </span>
          <span data-ttu-id="bf708-672">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-672">-or-</span>
          </span>
          <span data-ttu-id="bf708-673">
            <paramref name="method" /> Nie można powiązać, na przykład ponieważ nie można odnaleźć.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-673">
              <paramref name="method" /> cannot be bound, for example because it cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="bf708-674">
            <see langword="Invoke" /> Metody <paramref name="type" /> nie zostanie znaleziony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-674">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="bf708-675">Obiekt wywołujący nie ma uprawnienia niezbędne do dostępu <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-675">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="bf708-676">Po wywołaniu późnego wiązania za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-676">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="bf708-677">Powiązane wyliczenie: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-677">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, Type target, string method, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Type target, string method, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, Type ^ target, System::String ^ method, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * Type * string * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Type" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="bf708-678">
            <see cref="T:System.Type" /> Delegata do utworzenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-678">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="bf708-679">
            <see cref="T:System.Type" /> Reprezentujący klasę, która implementuje <c>metoda</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-679">The <see cref="T:System.Type" /> representing the class that implements <c>method</c>.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="bf708-680">Nazwa statyczna metoda, która ma reprezentować delegat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-680">The name of the static method that the delegate is to represent.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="bf708-681">Wartość logiczna wskazująca, podczas porównywania nazwy metody ma być ignorowana wielkość liter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-681">A Boolean indicating whether to ignore the case when comparing the name of the method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf708-682">Tworzy delegata określonego typu, który reprezentuje określonej metody statycznej określonej klasy przy użyciu określonego uwzględnianie wielkości liter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-682">Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf708-683">Delegat określony typ, który reprezentuje określonej metody statycznej określonej klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-683">A delegate of the specified type that represents the specified static method of the specified class.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf708-684">Ta metoda tworzy delegatów dla tylko metody statyczne.</span><span class="sxs-lookup"><span data-stu-id="bf708-684">This method creates delegates for static methods only.</span></span> <span data-ttu-id="bf708-685">Metoda wystąpienia to metoda, która jest skojarzona z wystąpieniem klasy, natomiast metoda statyczna jest skojarzona z samą klasą.</span><span class="sxs-lookup"><span data-stu-id="bf708-685">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="bf708-686">Tego przeciążenia metody jest równoważne z wywoływaniem <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> przeciążenia metody, określając `true` dla `throwOnBindFailure`.</span><span class="sxs-lookup"><span data-stu-id="bf708-686">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bf708-687">Począwszy od [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], Metoda ta może służyć do dostępu do metod niepublicznych, jeśli obiekt wywołujący zostało udzielone <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> Flaga, a jeśli zestaw uprawnień metod niepublicznych jest ograniczony do obiektu wywołującego przyznania zestawu lub być podzbiorem jej.</span><span class="sxs-lookup"><span data-stu-id="bf708-687">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="bf708-688">(Zobacz [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="bf708-688">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="bf708-689">Aby używać tej funkcji, powinien dotyczyć aplikacji [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszej.</span><span class="sxs-lookup"><span data-stu-id="bf708-689">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="bf708-690">
            <paramref name="type" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-690">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="bf708-691">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-691">-or-</span>
          </span>
          <span data-ttu-id="bf708-692">
            <paramref name="target" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-692">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="bf708-693">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-693">-or-</span>
          </span>
          <span data-ttu-id="bf708-694">
            <paramref name="method" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-694">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="bf708-695">
            <paramref name="type" /> nie dziedziczy <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-695">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="bf708-696">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-696">-or-</span>
          </span>
          <span data-ttu-id="bf708-697">
            <paramref name="type" /> nie jest <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-697">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="bf708-698">Zobacz [typów środowiska wykonawczego w odbiciu](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-698">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="bf708-699">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-699">-or-</span>
          </span>
          <span data-ttu-id="bf708-700">
            <paramref name="target" /> nie jest <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-700">
              <paramref name="target" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="bf708-701">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-701">-or-</span>
          </span>
          <span data-ttu-id="bf708-702">
            <paramref name="target" /> jest to otwarty typ ogólny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-702">
              <paramref name="target" /> is an open generic type.</span>
          </span>
          <span data-ttu-id="bf708-703">Oznacza to, że jego <see cref="P:System.Type.ContainsGenericParameters" /> właściwość <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-703">That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="bf708-704">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-704">-or-</span>
          </span>
          <span data-ttu-id="bf708-705">
            <paramref name="method" /> nie jest <see langword="static" /> — metoda (<see langword="Shared" /> w języku Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-705">
              <paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).</span>
          </span>
          <span data-ttu-id="bf708-706">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-706">-or-</span>
          </span>
          <span data-ttu-id="bf708-707">
            <paramref name="method" /> Nie można powiązać, na przykład ponieważ nie można odnaleźć.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-707">
              <paramref name="method" /> cannot be bound, for example because it cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="bf708-708">
            <see langword="Invoke" /> Metody <paramref name="type" /> nie zostanie znaleziony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-708">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="bf708-709">Obiekt wywołujący nie ma uprawnienia niezbędne do dostępu <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-709">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="bf708-710">Po wywołaniu późnego wiązania za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-710">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="bf708-711">Powiązane wyliczenie: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-711">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ target, System::String ^ method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * string * bool * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="bf708-712">
            <see cref="T:System.Type" /> Delegata do utworzenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-712">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="bf708-713">Wystąpienie klasy, na którym <c>metoda</c> jest wywoływana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-713">The class instance on which <c>method</c> is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="bf708-714">Nazwa metody wystąpienia, która ma reprezentować delegat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-714">The name of the instance method that the delegate is to represent.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="bf708-715">Wartość logiczna wskazująca, podczas porównywania nazwy metody ma być ignorowana wielkość liter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-715">A Boolean indicating whether to ignore the case when comparing the name of the method.</span>
          </span>
        </param>
        <param name="throwOnBindFailure">
          <span data-ttu-id="bf708-716">
            <see langword="true" /> Aby zgłosić wyjątek, jeśli <c>metoda</c> nie może być; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-716">
              <see langword="true" /> to throw an exception if <c>method</c> cannot be bound; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf708-717">Tworzy określonego typu, który reprezentuje metodę określone wystąpienie do wywołania na wystąpienie określonej klasy przy użyciu określonego uwzględnianie wielkości liter i określonego zachowania w przypadku niepowodzenia, można powiązać delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-717">Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance, with the specified case-sensitivity and the specified behavior on failure to bind.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf708-718">Delegat określonego typu, który reprezentuje metodę określone wystąpienie do wywołania na wystąpienie określonej klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-718">A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf708-719">Ta metoda tworzy delegatów dla wystąpienia tylko metody.</span><span class="sxs-lookup"><span data-stu-id="bf708-719">This method creates delegates for instance methods only.</span></span> <span data-ttu-id="bf708-720">Metoda wystąpienia to metoda, która jest skojarzona z wystąpieniem klasy, natomiast metoda statyczna jest skojarzona z samą klasą.</span><span class="sxs-lookup"><span data-stu-id="bf708-720">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bf708-721">Począwszy od [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], Metoda ta może służyć do dostępu do metod niepublicznych, jeśli obiekt wywołujący zostało udzielone <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> Flaga, a jeśli zestaw uprawnień metod niepublicznych jest ograniczony do obiektu wywołującego przyznania zestawu lub być podzbiorem jej.</span><span class="sxs-lookup"><span data-stu-id="bf708-721">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="bf708-722">(Zobacz [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="bf708-722">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="bf708-723">Aby używać tej funkcji, powinien dotyczyć aplikacji [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszej.</span><span class="sxs-lookup"><span data-stu-id="bf708-723">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="bf708-724">
            <paramref name="type" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-724">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="bf708-725">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-725">-or-</span>
          </span>
          <span data-ttu-id="bf708-726">
            <paramref name="target" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-726">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="bf708-727">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-727">-or-</span>
          </span>
          <span data-ttu-id="bf708-728">
            <paramref name="method" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-728">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="bf708-729">
            <paramref name="type" /> nie dziedziczy <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-729">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="bf708-730">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-730">-or-</span>
          </span>
          <span data-ttu-id="bf708-731">
            <paramref name="type" /> nie jest <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-731">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="bf708-732">Zobacz [typów środowiska wykonawczego w odbiciu](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-732">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="bf708-733">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-733">-or-</span>
          </span>
          <span data-ttu-id="bf708-734">
            <paramref name="method" /> nie jest metodą wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-734">
              <paramref name="method" /> is not an instance method.</span>
          </span>
          <span data-ttu-id="bf708-735">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-735">-or-</span>
          </span>
          <span data-ttu-id="bf708-736">
            <paramref name="method" /> Nie można powiązać, na przykład ponieważ nie można odnaleźć, i <paramref name="throwOnBindFailure" /> jest <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-736">
              <paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="bf708-737">
            <see langword="Invoke" /> Metody <paramref name="type" /> nie zostanie znaleziony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-737">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="bf708-738">Obiekt wywołujący nie ma uprawnienia niezbędne do dostępu <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-738">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="bf708-739">Po wywołaniu późnego wiązania za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-739">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="bf708-740">Powiązane wyliczenie: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-740">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, Type target, string method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Type target, string method, bool ignoreCase, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, Type ^ target, System::String ^ method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * Type * string * bool * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Type" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="bf708-741">
            <see cref="T:System.Type" /> Delegata do utworzenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-741">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="bf708-742">
            <see cref="T:System.Type" /> Reprezentujący klasę, która implementuje <c>metoda</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-742">The <see cref="T:System.Type" /> representing the class that implements <c>method</c>.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="bf708-743">Nazwa statyczna metoda, która ma reprezentować delegat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-743">The name of the static method that the delegate is to represent.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="bf708-744">Wartość logiczna wskazująca, podczas porównywania nazwy metody ma być ignorowana wielkość liter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-744">A Boolean indicating whether to ignore the case when comparing the name of the method.</span>
          </span>
        </param>
        <param name="throwOnBindFailure">
          <span data-ttu-id="bf708-745">
            <see langword="true" /> Aby zgłosić wyjątek, jeśli <c>metoda</c> nie może być; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-745">
              <see langword="true" /> to throw an exception if <c>method</c> cannot be bound; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf708-746">Tworzy określonego typu, który reprezentuje określonej metody statycznej określonej klasy z określonym uwzględnianie wielkości liter i określonego zachowania w przypadku niepowodzenia, można powiązać delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-746">Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity and the specified behavior on failure to bind.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf708-747">Delegat określony typ, który reprezentuje określonej metody statycznej określonej klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-747">A delegate of the specified type that represents the specified static method of the specified class.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf708-748">Ta metoda tworzy delegatów dla tylko metody statyczne.</span><span class="sxs-lookup"><span data-stu-id="bf708-748">This method creates delegates for static methods only.</span></span> <span data-ttu-id="bf708-749">Metoda wystąpienia to metoda, która jest skojarzona z wystąpieniem klasy, natomiast metoda statyczna jest skojarzona z samą klasą.</span><span class="sxs-lookup"><span data-stu-id="bf708-749">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bf708-750">Począwszy od [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], Metoda ta może służyć do dostępu do metod niepublicznych, jeśli obiekt wywołujący zostało udzielone <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> Flaga, a jeśli zestaw uprawnień metod niepublicznych jest ograniczony do obiektu wywołującego przyznania zestawu lub być podzbiorem jej.</span><span class="sxs-lookup"><span data-stu-id="bf708-750">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="bf708-751">(Zobacz [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="bf708-751">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="bf708-752">Aby używać tej funkcji, powinien dotyczyć aplikacji [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszej.</span><span class="sxs-lookup"><span data-stu-id="bf708-752">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="bf708-753">
            <paramref name="type" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-753">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="bf708-754">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-754">-or-</span>
          </span>
          <span data-ttu-id="bf708-755">
            <paramref name="target" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-755">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="bf708-756">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-756">-or-</span>
          </span>
          <span data-ttu-id="bf708-757">
            <paramref name="method" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-757">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="bf708-758">
            <paramref name="type" /> nie dziedziczy <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-758">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="bf708-759">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-759">-or-</span>
          </span>
          <span data-ttu-id="bf708-760">
            <paramref name="type" /> nie jest <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-760">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="bf708-761">Zobacz [typów środowiska wykonawczego w odbiciu](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-761">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="bf708-762">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-762">-or-</span>
          </span>
          <span data-ttu-id="bf708-763">
            <paramref name="target" /> nie jest <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-763">
              <paramref name="target" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="bf708-764">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-764">-or-</span>
          </span>
          <span data-ttu-id="bf708-765">
            <paramref name="target" /> jest to otwarty typ ogólny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-765">
              <paramref name="target" /> is an open generic type.</span>
          </span>
          <span data-ttu-id="bf708-766">Oznacza to, że jego <see cref="P:System.Type.ContainsGenericParameters" /> właściwość <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-766">That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="bf708-767">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-767">-or-</span>
          </span>
          <span data-ttu-id="bf708-768">
            <paramref name="method" /> nie jest <see langword="static" /> — metoda (<see langword="Shared" /> w języku Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-768">
              <paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).</span>
          </span>
          <span data-ttu-id="bf708-769">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-769">-or-</span>
          </span>
          <span data-ttu-id="bf708-770">
            <paramref name="method" /> Nie można powiązać, na przykład ponieważ nie można odnaleźć, i <paramref name="throwOnBindFailure" /> jest <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-770">
              <paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="bf708-771">
            <see langword="Invoke" /> Metody <paramref name="type" /> nie zostanie znaleziony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-771">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="bf708-772">Obiekt wywołujący nie ma uprawnienia niezbędne do dostępu <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-772">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="bf708-773">Po wywołaniu późnego wiązania za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-773">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="bf708-774">Powiązane wyliczenie: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-774">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="DynamicInvoke">
      <MemberSignature Language="C#" Value="public object DynamicInvoke (params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object DynamicInvoke(object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.DynamicInvoke(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DynamicInvoke (ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ DynamicInvoke(... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.DynamicInvoke : obj[] -&gt; obj" Usage="delegate.DynamicInvoke args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="args">
          <span data-ttu-id="bf708-775">Tablica obiektów, które są argumenty do przekazania do metody reprezentowanej przez delegata bieżącego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-775">An array of objects that are the arguments to pass to the method represented by the current delegate.</span>
          </span>
          <span data-ttu-id="bf708-776">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-776">-or-</span>
          </span>
          <span data-ttu-id="bf708-777">
            <see langword="null" />, jeśli metoda reprezentowanej przez delegata bieżącego nie wymaga argumentów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-777">
              <see langword="null" />, if the method represented by the current delegate does not require arguments.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf708-778">Dynamicznie wywołuje (z późnym wiązaniem) metodę reprezentowaną przez bieżące delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-778">Dynamically invokes (late-bound) the method represented by the current delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf708-779">Obiekt zwracany przez metodę reprezentowanej przez delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-779">The object returned by the method represented by the delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf708-780">Ta metoda wywołuje <xref:System.Delegate.DynamicInvokeImpl%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="bf708-780">This method calls the <xref:System.Delegate.DynamicInvokeImpl%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="bf708-781">Obiekt wywołujący nie ma dostępu do metody reprezentowanej przez delegata (na przykład jeśli metoda jest prywatna).</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-781">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
          <span data-ttu-id="bf708-782">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-782">-or-</span>
          </span>
          <span data-ttu-id="bf708-783">Liczbę, kolejność lub typu parametrów wymienionych w <paramref name="args" /> jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-783">The number, order, or type of parameters listed in <paramref name="args" /> is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="bf708-784">Metoda reprezentowanej przez delegata jest wywoływane na obiekt lub klasa, która nie obsługuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-784">The method represented by the delegate is invoked on an object or a class that does not support it.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="bf708-785">Metoda reprezentowanej przez delegata jest metodą wystąpienia i obiekt docelowy jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-785">The method represented by the delegate is an instance method and the target object is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="bf708-786">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-786">-or-</span>
          </span>
          <span data-ttu-id="bf708-787">Jedną z metod zhermetyzowany zgłasza wyjątek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-787">One of the encapsulated methods throws an exception.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="bf708-788">Po wywołaniu późnego wiązania za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-788">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="bf708-789">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-789">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.DynamicInvokeImpl(System.Object[])" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="DynamicInvokeImpl">
      <MemberSignature Language="C#" Value="protected virtual object DynamicInvokeImpl (object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object DynamicInvokeImpl(object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.DynamicInvokeImpl(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function DynamicInvokeImpl (args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ DynamicInvokeImpl(cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member DynamicInvokeImpl : obj[] -&gt; obj&#xA;override this.DynamicInvokeImpl : obj[] -&gt; obj" Usage="delegate.DynamicInvokeImpl args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="args">
          <span data-ttu-id="bf708-790">Tablica obiektów, które są argumenty do przekazania do metody reprezentowanej przez delegata bieżącego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-790">An array of objects that are the arguments to pass to the method represented by the current delegate.</span>
          </span>
          <span data-ttu-id="bf708-791">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-791">-or-</span>
          </span>
          <span data-ttu-id="bf708-792">
            <see langword="null" />, jeśli metoda reprezentowanej przez delegata bieżącego nie wymaga argumentów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-792">
              <see langword="null" />, if the method represented by the current delegate does not require arguments.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf708-793">Dynamicznie wywołuje (z późnym wiązaniem) metodę reprezentowaną przez bieżące delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-793">Dynamically invokes (late-bound) the method represented by the current delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf708-794">Obiekt zwracany przez metodę reprezentowanej przez delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-794">The object returned by the method represented by the delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf708-795">Ta metoda implementuje <xref:System.Delegate.DynamicInvoke%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="bf708-795">This method implements the <xref:System.Delegate.DynamicInvoke%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="bf708-796">Obiekt wywołujący nie ma dostępu do metody reprezentowanej przez delegata (na przykład jeśli metoda jest prywatna).</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-796">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
          <span data-ttu-id="bf708-797">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-797">-or-</span>
          </span>
          <span data-ttu-id="bf708-798">Liczbę, kolejność lub typu parametrów wymienionych w <paramref name="args" /> jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-798">The number, order, or type of parameters listed in <paramref name="args" /> is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="bf708-799">Metoda reprezentowanej przez delegata jest wywoływane na obiekt lub klasa, która nie obsługuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-799">The method represented by the delegate is invoked on an object or a class that does not support it.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="bf708-800">Metoda reprezentowanej przez delegata jest metodą wystąpienia i obiekt docelowy jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-800">The method represented by the delegate is an instance method and the target object is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="bf708-801">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-801">-or-</span>
          </span>
          <span data-ttu-id="bf708-802">Jedną z metod zhermetyzowany zgłasza wyjątek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-802">One of the encapsulated methods throws an exception.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="bf708-803">Po wywołaniu późnego wiązania za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-803">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="bf708-804">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-804">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.DynamicInvoke(System.Object[])" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="delegate.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="bf708-805">Obiekt do porównania z bieżącym obiektem delegowanym.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-805">The object to compare with the current delegate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf708-806">Określa, czy określony obiekt bieżącej delegata są tego samego typu i udostępniać te same obiekty docelowe, metody i listy wywołań.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-806">Determines whether the specified object and the current delegate are of the same type and share the same targets, methods, and invocation list.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf708-807">
            <see langword="true" /> Jeśli <paramref name="obj" /> i bieżącej delegat ma te same obiekty docelowe, metody i listy wywołań; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-807">
              <see langword="true" /> if <paramref name="obj" /> and the current delegate have the same targets, methods, and invocation list; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf708-808">Jeśli dwa obiekty delegowane są tego samego typu, nie są uwzględniane równe.</span><span class="sxs-lookup"><span data-stu-id="bf708-808">If the two delegates are not of the same type, they are not considered equal.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bf708-809">W .NET Framework w wersji 1.0 i 1.1 dwa delegaty były uważane za równe, ich celów, metody i listy wywołań były takie same, nawet gdyby delegatów różnych typów.</span><span class="sxs-lookup"><span data-stu-id="bf708-809">In the .NET Framework version 1.0 and 1.1, two delegates were considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.</span></span>  
  
 <span data-ttu-id="bf708-810">Metody i obiekty docelowe są porównywane pod kątem równości w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="bf708-810">The methods and targets are compared for equality as follows:</span></span>  
  
-   <span data-ttu-id="bf708-811">Jeśli te dwie metody, którą jest porównywany są statyczne i tej samej metody na tej samej klasy, metody są traktowane jako równe i elementy docelowe również są traktowane jako równe.</span><span class="sxs-lookup"><span data-stu-id="bf708-811">If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="bf708-812">Jeśli te dwie metody, którą jest porównywany wystąpienia metod i tej samej metody na ten sam obiekt, te metody są traktowane jako równe i elementy docelowe również są traktowane jako równe.</span><span class="sxs-lookup"><span data-stu-id="bf708-812">If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="bf708-813">W przeciwnym razie metody nie są uważane za równe, i elementy docelowe również nie są uważane za równe.</span><span class="sxs-lookup"><span data-stu-id="bf708-813">Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.</span></span>  
  
 <span data-ttu-id="bf708-814">Dwie listy wywołania są traktowane jako identyczne, tylko wtedy, gdy mają takiej samej kolejności, a odpowiednie elementy z dwóch list reprezentują te same metody i docelowej.</span><span class="sxs-lookup"><span data-stu-id="bf708-814">Two invocation lists are considered identical only if they have the same order and the corresponding elements from the two lists represent the same method and target.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="bf708-815">Obiekt wywołujący nie ma dostępu do metody reprezentowanej przez delegata (na przykład jeśli metoda jest prywatna).</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-815">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="bf708-816">Po wywołaniu późnego wiązania za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-816">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="bf708-817">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-817">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="delegate.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="bf708-818">Zwraca wartość skrótu dla delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-818">Returns a hash code for the delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf708-819">Wartość skrótu dla delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-819">A hash code for the delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf708-820">Wartość zwracana przez tę metodę nie musi zostać utrwalona, dwóch powodów.</span><span class="sxs-lookup"><span data-stu-id="bf708-820">The return value of this method must not be persisted for two reasons.</span></span> <span data-ttu-id="bf708-821">Najpierw funkcji skrótu klasy może zmienić do generowania dystrybucji lepsze, renderowanie bezcelowe żadnych wartości ze starej funkcji skrótu.</span><span class="sxs-lookup"><span data-stu-id="bf708-821">First, the hash function of a class might be altered to generate a better distribution, rendering any values from the old hash function useless.</span></span> <span data-ttu-id="bf708-822">Po drugie Domyślna implementacja tej klasy nie gwarantuje, że taką samą wartość zwracaną przez różne wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="bf708-822">Second, the default implementation of this class does not guarantee that the same value will be returned by different instances.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="bf708-823">Po wywołaniu późnego wiązania za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-823">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="bf708-824">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-824">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetInvocationList">
      <MemberSignature Language="C#" Value="public virtual Delegate[] GetInvocationList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Delegate[] GetInvocationList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetInvocationList" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetInvocationList () As Delegate()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Delegate ^&gt; ^ GetInvocationList();" />
      <MemberSignature Language="F#" Value="abstract member GetInvocationList : unit -&gt; Delegate[]&#xA;override this.GetInvocationList : unit -&gt; Delegate[]" Usage="delegate.GetInvocationList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="bf708-825">Zwraca listę wywołanie delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-825">Returns the invocation list of the delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf708-826">Tablica obiektów delegowanych reprezentujący listę wywołanie delegata bieżącego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-826">An array of delegates representing the invocation list of the current delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf708-827">Każdego delegata w tablicy reprezentuje dokładnie jedną z metod.</span><span class="sxs-lookup"><span data-stu-id="bf708-827">Each delegate in the array represents exactly one method.</span></span>  
  
 <span data-ttu-id="bf708-828">Kolejność delegatów w tablicy jest tej samej kolejności, w którym bieżącego delegata wywołuje metody, które reprezentują tych delegatów.</span><span class="sxs-lookup"><span data-stu-id="bf708-828">The order of the delegates in the array is the same order in which the current delegate invokes the methods that those delegates represent.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bf708-829">Poniższy przykład przypisuje trzy metody delegata.</span><span class="sxs-lookup"><span data-stu-id="bf708-829">The following example assigns three methods to a delegate.</span></span> <span data-ttu-id="bf708-830">Następnie wywołuje <xref:System.Delegate.GetInvocationList%2A> metodę, aby uzyskać łączna liczba metod przypisane do delegata, można wykonać delegatów w odwrotnej kolejności i wykonywanie metod, których nazwa zawiera podciąg "File".</span><span class="sxs-lookup"><span data-stu-id="bf708-830">It then calls the  <xref:System.Delegate.GetInvocationList%2A> method to get a total count of the methods assigned to the delegate, to execute the delegates in reverse order, and to execute the methods whose name do not include the substring "File".</span></span>  
  
 [!code-csharp[System.Delegate.GetInvocationList#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Delegate.GetInvocationList/cs/GetInvocationList1.cs#1)]
 [!code-vb[System.Delegate.GetInvocationList#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Delegate.GetInvocationList/vb/GetInvocationList1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="bf708-831">Po wywołaniu późnego wiązania za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-831">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="bf708-832">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-832">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImpl">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.MethodInfo GetMethodImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethodImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetMethodImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetMethodImpl () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Reflection::MethodInfo ^ GetMethodImpl();" />
      <MemberSignature Language="F#" Value="abstract member GetMethodImpl : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethodImpl : unit -&gt; System.Reflection.MethodInfo" Usage="delegate.GetMethodImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="bf708-833">Pobiera statycznej metody reprezentowanej przez delegata bieżącego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-833">Gets the static method represented by the current delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf708-834">A <see cref="T:System.Reflection.MethodInfo" /> opisujące statycznej metody reprezentowanej przez delegata bieżącego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-834">A <see cref="T:System.Reflection.MethodInfo" /> describing the static method represented by the current delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf708-835">Ta metoda ma zastosowanie tylko wtedy, gdy metoda statyczna reprezentuje bieżący obiekt delegowany.</span><span class="sxs-lookup"><span data-stu-id="bf708-835">This method applies only if the current delegate represents a static method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="bf708-836">Obiekt wywołujący nie ma dostępu do metody reprezentowanej przez delegata (na przykład jeśli metoda jest prywatna).</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-836">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="bf708-837">Po wywołaniu późnego wiązania za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-837">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="bf708-838">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-838">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="P:System.Delegate.Method" />
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="delegate.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="bf708-839">Nieobsługiwane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-839">Not supported.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="bf708-840">Nieobsługiwane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-840">Not supported.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf708-841">Nieobsługiwane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-841">Not supported.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="bf708-842">Ta metoda nie jest obsługiwana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-842">This method is not supported.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="bf708-843">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-843">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="bf708-844">Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-844">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
      </Docs>
    </Member>
    <Member MemberName="Method">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo Method { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo Method" />
      <MemberSignature Language="DocId" Value="P:System.Delegate.Method" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Method As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::MethodInfo ^ Method { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Method : System.Reflection.MethodInfo" Usage="System.Delegate.Method" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bf708-845">Pobiera metody reprezentowanej przez delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-845">Gets the method represented by the delegate.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bf708-846">A <see cref="T:System.Reflection.MethodInfo" /> opisujące metody reprezentowanej przez delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-846">A <see cref="T:System.Reflection.MethodInfo" /> describing the method represented by the delegate.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="bf708-847">Obiekt wywołujący nie ma dostępu do metody reprezentowanej przez delegata (na przykład jeśli metoda jest prywatna).</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-847">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="bf708-848">Po wywołaniu późnego wiązania za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-848">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="bf708-849">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-849">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="M:System.Delegate.GetMethodImpl" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (Delegate d1, Delegate d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Delegate d1, class System.Delegate d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.op_Equality(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (d1 As Delegate, d2 As Delegate) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(Delegate ^ d1, Delegate ^ d2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : Delegate * Delegate -&gt; bool" Usage="d1 = d2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Delegate" />
        <Parameter Name="d2" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d1">
          <span data-ttu-id="bf708-850">Pierwszy delegata do porównania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-850">The first delegate to compare.</span>
          </span>
        </param>
        <param name="d2">
          <span data-ttu-id="bf708-851">Drugiego delegata do porównania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-851">The second delegate to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf708-852">Określa, czy określony delegatów są takie same.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-852">Determines whether the specified delegates are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf708-853">
            <see langword="true" /> Jeśli <paramref name="d1" /> jest równa <paramref name="d2" />; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-853">
              <see langword="true" /> if <paramref name="d1" /> is equal to <paramref name="d2" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf708-854">Dwa delegaty tego samego typu przy użyciu list wywołania te same obiekty docelowe, metody i są uznawane za równe.</span><span class="sxs-lookup"><span data-stu-id="bf708-854">Two delegates of the same type with the same targets, methods, and invocation lists are considered equal.</span></span>  
  
 <span data-ttu-id="bf708-855">Jeśli dwa obiekty delegowane są tego samego typu, nie są uwzględniane równe.</span><span class="sxs-lookup"><span data-stu-id="bf708-855">If the two delegates are not of the same type, they are not considered equal.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bf708-856">W .NET Framework w wersji 1.0 i 1.1 dwa delegaty były uważane za równe, ich celów, metody i listy wywołań były takie same, nawet gdyby delegatów różnych typów.</span><span class="sxs-lookup"><span data-stu-id="bf708-856">In the .NET Framework version 1.0 and 1.1, two delegates were considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.</span></span>  
  
 <span data-ttu-id="bf708-857">Metody i obiekty docelowe są porównywane pod kątem równości w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="bf708-857">The methods and targets are compared for equality as follows:</span></span>  
  
-   <span data-ttu-id="bf708-858">Jeśli te dwie metody, którą jest porównywany są statyczne i tej samej metody na tej samej klasy, metody są traktowane jako równe i elementy docelowe również są traktowane jako równe.</span><span class="sxs-lookup"><span data-stu-id="bf708-858">If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="bf708-859">Jeśli te dwie metody, którą jest porównywany wystąpienia metod i tej samej metody na ten sam obiekt, te metody są traktowane jako równe i elementy docelowe również są traktowane jako równe.</span><span class="sxs-lookup"><span data-stu-id="bf708-859">If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="bf708-860">W przeciwnym razie metody nie są uważane za równe, i elementy docelowe również nie są uważane za równe.</span><span class="sxs-lookup"><span data-stu-id="bf708-860">Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.</span></span>  
  
 <span data-ttu-id="bf708-861">Dwie listy wywołania są traktowane jako identyczne, jeśli mają takiej samej kolejności, a odpowiednie elementy z dwóch list reprezentują te same metody i docelowej.</span><span class="sxs-lookup"><span data-stu-id="bf708-861">Two invocation lists are considered identical if they have the same order and the corresponding elements from the two lists represent the same method and target.</span></span>  
  
 <span data-ttu-id="bf708-862">Jest równoważne metodę dla tego operatora <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="bf708-862">The equivalent method for this operator is <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="bf708-863">Po wywołaniu późnego wiązania za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-863">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="bf708-864">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-864">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (Delegate d1, Delegate d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Delegate d1, class System.Delegate d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.op_Inequality(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (d1 As Delegate, d2 As Delegate) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(Delegate ^ d1, Delegate ^ d2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : Delegate * Delegate -&gt; bool" Usage="System.Delegate.op_Inequality (d1, d2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Delegate" />
        <Parameter Name="d2" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d1">
          <span data-ttu-id="bf708-865">Pierwszy delegata do porównania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-865">The first delegate to compare.</span>
          </span>
        </param>
        <param name="d2">
          <span data-ttu-id="bf708-866">Drugiego delegata do porównania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-866">The second delegate to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf708-867">Określa, czy określony delegatów nie są takie same.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-867">Determines whether the specified delegates are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf708-868">
            <see langword="true" /> Jeśli <paramref name="d1" /> nie jest równa <paramref name="d2" />; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-868">
              <see langword="true" /> if <paramref name="d1" /> is not equal to <paramref name="d2" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf708-869">Dwa obiekty delegowane są traktowane jako nie równe są różnych typów lub mają różne metody, różnych elementów docelowych lub listy różnych wywołania.</span><span class="sxs-lookup"><span data-stu-id="bf708-869">Two delegates are considered not equal if they are of different types, or have different methods, different targets, or different invocation lists.</span></span>  
  
 <span data-ttu-id="bf708-870">Jeśli dwa obiekty delegowane są tego samego typu, nie są uwzględniane równe.</span><span class="sxs-lookup"><span data-stu-id="bf708-870">If the two delegates are not of the same type, they are not considered equal.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bf708-871">W .NET Framework w wersji 1.0 i 1.1 dwa delegaty są traktowane jako równe, ich celów, metody i listy wywołań były takie same, nawet gdyby delegatów różnych typów.</span><span class="sxs-lookup"><span data-stu-id="bf708-871">In the .NET Framework version 1.0 and 1.1, two delegates are considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.</span></span>  
  
 <span data-ttu-id="bf708-872">Metody i obiekty docelowe są porównywane pod kątem równości w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="bf708-872">The methods and targets are compared for equality as follows:</span></span>  
  
-   <span data-ttu-id="bf708-873">Jeśli te dwie metody, którą jest porównywany są statyczne i tej samej metody na tej samej klasy, metody są traktowane jako równe i elementy docelowe również są traktowane jako równe.</span><span class="sxs-lookup"><span data-stu-id="bf708-873">If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="bf708-874">Jeśli te dwie metody, którą jest porównywany wystąpienia metod i tej samej metody na ten sam obiekt, te metody są traktowane jako równe i elementy docelowe również są traktowane jako równe.</span><span class="sxs-lookup"><span data-stu-id="bf708-874">If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="bf708-875">W przeciwnym razie metody nie są uważane za równe, i elementy docelowe również nie są uważane za równe.</span><span class="sxs-lookup"><span data-stu-id="bf708-875">Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.</span></span>  
  
 <span data-ttu-id="bf708-876">Dwie listy wywołania nie są równe, jeśli mają różne rozmiary, jeśli są uporządkowane inaczej, czy co najmniej jeden element z listy jeden reprezentuje metodę lub docelowy, który jest inny niż czas reprezentowany przez odpowiadającego mu elementu na liście inne.</span><span class="sxs-lookup"><span data-stu-id="bf708-876">Two invocation lists are not equal if they have different sizes, if they are ordered differently, or if at least one element from one list represents a method or target that is different from that represented by its corresponding element in the other list.</span></span>  
  
 <span data-ttu-id="bf708-877">Jest równoważne metodę dla tego operatora <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="bf708-877">The equivalent method for this operator is <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="bf708-878">Po wywołaniu późnego wiązania za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-878">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="bf708-879">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-879">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public static Delegate Remove (Delegate source, Delegate value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate Remove(class System.Delegate source, class System.Delegate value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Remove(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Remove (source As Delegate, value As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ Remove(Delegate ^ source, Delegate ^ value);" />
      <MemberSignature Language="F#" Value="static member Remove : Delegate * Delegate -&gt; Delegate" Usage="System.Delegate.Remove (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Delegate" />
        <Parameter Name="value" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="bf708-880">Delegat, z którego mają zostać usunięte wywołanie listę <c>wartość</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-880">The delegate from which to remove the invocation list of <c>value</c>.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="bf708-881">Delegat, który dostarcza listę wywołań, aby usunąć z listy wywołania <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-881">The delegate that supplies the invocation list to remove from the invocation list of <c>source</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf708-882">Usuwa ostatniego wystąpienia listy wywołań obiektu delegowanego z listy wywołanie innego obiektu delegowanego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-882">Removes the last occurrence of the invocation list of a delegate from the invocation list of another delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf708-883">Nowe delegowanie przy użyciu listy wywołania utworzone przez wykonanie wywołania listę <paramref name="source" /> i usuwanie ostatniego wystąpienia listy wywołania <paramref name="value" />, jeśli na liście wywołania <paramref name="value" /> znajduje się w obrębie listy wywołania <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-883">A new delegate with an invocation list formed by taking the invocation list of <paramref name="source" /> and removing the last occurrence of the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the invocation list of <paramref name="source" />.</span>
          </span>
          <span data-ttu-id="bf708-884">Zwraca <paramref name="source" /> Jeśli <paramref name="value" /> jest <see langword="null" /> lub, jeśli na liście wywołania <paramref name="value" /> nie znajduje się w obrębie listy wywołania <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-884">Returns <paramref name="source" /> if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the invocation list of <paramref name="source" />.</span>
          </span>
          <span data-ttu-id="bf708-885">Zwraca odwołanie o wartości null, jeśli na liście wywołania <paramref name="value" /> jest taki sam, jak wywołania listę <paramref name="source" /> lub, jeśli <paramref name="source" /> jest odwołanie o wartości null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-885">Returns a null reference if the invocation list of <paramref name="value" /> is equal to the invocation list of <paramref name="source" /> or if <paramref name="source" /> is a null reference.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf708-886">Jeśli na liście wywołania `value` odpowiada ciągły zestaw elementów na liście wywołania `source`, następnie wywołania listy `value` mówimy w obrębie listy wywołania `source`.</span><span class="sxs-lookup"><span data-stu-id="bf708-886">If the invocation list of `value` matches a contiguous set of elements in the invocation list of `source`, then the invocation list of `value` is said to occur within the invocation list of `source`.</span></span> <span data-ttu-id="bf708-887">Jeśli na liście wywołania `value` występuje więcej niż raz na liście wywołania `source`, ostatnie wystąpienie zostanie usunięte.</span><span class="sxs-lookup"><span data-stu-id="bf708-887">If the invocation list of `value` occurs more than once in the invocation list of `source`, the last occurrence is removed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="bf708-888">Obiekt wywołujący nie ma dostępu do metody reprezentowanej przez delegata (na przykład jeśli metoda jest prywatna).</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-888">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="bf708-889">Typy delegatów są niezgodne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-889">The delegate types do not match.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="bf708-890">Po wywołaniu późnego wiązania za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-890">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="bf708-891">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-891">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.RemoveAll(System.Delegate,System.Delegate)" />
        <altmember cref="M:System.Delegate.RemoveImpl(System.Delegate)" />
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public static Delegate RemoveAll (Delegate source, Delegate value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate RemoveAll(class System.Delegate source, class System.Delegate value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.RemoveAll(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RemoveAll (source As Delegate, value As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ RemoveAll(Delegate ^ source, Delegate ^ value);" />
      <MemberSignature Language="F#" Value="static member RemoveAll : Delegate * Delegate -&gt; Delegate" Usage="System.Delegate.RemoveAll (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Delegate" />
        <Parameter Name="value" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="bf708-892">Delegat, z którego mają zostać usunięte wywołanie listę <c>wartość</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-892">The delegate from which to remove the invocation list of <c>value</c>.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="bf708-893">Delegat, który dostarcza listę wywołań, aby usunąć z listy wywołania <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-893">The delegate that supplies the invocation list to remove from the invocation list of <c>source</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf708-894">Usuwa wszystkie wystąpienia listy wywołań obiektu delegowanego z listy wywołanie innego obiektu delegowanego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-894">Removes all occurrences of the invocation list of a delegate from the invocation list of another delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf708-895">Nowe delegowanie przy użyciu listy wywołania utworzone przez wykonanie wywołania listę <paramref name="source" /> i usunięcie wszystkich wystąpień elementu na liście wywołania <paramref name="value" />, jeśli na liście wywołania <paramref name="value" /> znajduje się w obrębie listy wywołania <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-895">A new delegate with an invocation list formed by taking the invocation list of <paramref name="source" /> and removing all occurrences of the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the invocation list of <paramref name="source" />.</span>
          </span>
          <span data-ttu-id="bf708-896">Zwraca <paramref name="source" /> Jeśli <paramref name="value" /> jest <see langword="null" /> lub, jeśli na liście wywołania <paramref name="value" /> nie znajduje się w obrębie listy wywołania <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-896">Returns <paramref name="source" /> if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the invocation list of <paramref name="source" />.</span>
          </span>
          <span data-ttu-id="bf708-897">Zwraca odwołanie o wartości null, jeśli wywołania listę <paramref name="value" /> jest taki sam, jak wywołania listę <paramref name="source" />, jeśli <paramref name="source" /> zawiera tylko szereg listy wywołania, które są równe do listy wywołania <paramref name="value" />, lub jeśli <paramref name="source" /> ma wartość null odwołanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-897">Returns a null reference if the invocation list of <paramref name="value" /> is equal to the invocation list of <paramref name="source" />, if <paramref name="source" /> contains only a series of invocation lists that are equal to the invocation list of <paramref name="value" />, or if <paramref name="source" /> is a null reference.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf708-898">Jeśli na liście wywołania `value` odpowiada ciągły zestaw elementów na liście wywołania `source`, następnie wywołania listy `value` mówimy w obrębie listy wywołania `source`.</span><span class="sxs-lookup"><span data-stu-id="bf708-898">If the invocation list of `value` matches a contiguous set of elements in the invocation list of `source`, then the invocation list of `value` is said to occur within the invocation list of `source`.</span></span> <span data-ttu-id="bf708-899">Jeśli na liście wywołania `value` występuje więcej niż raz na liście wywołania `source`, zostaną usunięte wszystkie wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="bf708-899">If the invocation list of `value` occurs more than once in the invocation list of `source`, all occurrences are removed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="bf708-900">Obiekt wywołujący nie ma dostępu do metody reprezentowanej przez delegata (na przykład jeśli metoda jest prywatna).</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-900">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="bf708-901">Typy delegatów są niezgodne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-901">The delegate types do not match.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="bf708-902">Po wywołaniu późnego wiązania za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-902">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="bf708-903">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-903">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.Remove(System.Delegate,System.Delegate)" />
        <altmember cref="M:System.Delegate.RemoveImpl(System.Delegate)" />
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveImpl">
      <MemberSignature Language="C#" Value="protected virtual Delegate RemoveImpl (Delegate d);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Delegate RemoveImpl(class System.Delegate d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.RemoveImpl(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RemoveImpl (d As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Delegate ^ RemoveImpl(Delegate ^ d);" />
      <MemberSignature Language="F#" Value="abstract member RemoveImpl : Delegate -&gt; Delegate&#xA;override this.RemoveImpl : Delegate -&gt; Delegate" Usage="delegate.RemoveImpl d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="bf708-904">Delegat, który dostarcza listę wywołań, można usunąć z listy wywołań bieżącego obiektu delegowanego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-904">The delegate that supplies the invocation list to remove from the invocation list of the current delegate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bf708-905">Usuwa listy wywołań obiektu delegowanego z listy wywołanie innego obiektu delegowanego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-905">Removes the invocation list of a delegate from the invocation list of another delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bf708-906">Nowe delegowanie przy użyciu listy wywołania utworzone przez pobranie listy wywołanie delegata bieżącego i usuwanie listy wywołania <paramref name="value" />, jeśli na liście wywołania <paramref name="value" /> znajduje się w obrębie listy wywołań obiektu delegowanego bieżącego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-906">A new delegate with an invocation list formed by taking the invocation list of the current delegate and removing the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the current delegate's invocation list.</span>
          </span>
          <span data-ttu-id="bf708-907">Zwraca bieżący delegata, jeśli <paramref name="value" /> jest <see langword="null" /> lub, jeśli na liście wywołania <paramref name="value" /> nie znajduje się w obrębie listy wywołań obiektu delegowanego bieżącego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-907">Returns the current delegate if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the current delegate's invocation list.</span>
          </span>
          <span data-ttu-id="bf708-908">Zwraca <see langword="null" /> Jeśli wywołanie listę <paramref name="value" /> jest taki sam, jak listy wywołań obiektu delegowanego bieżącego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-908">Returns <see langword="null" /> if the invocation list of <paramref name="value" /> is equal to the current delegate's invocation list.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf708-909">Jeśli na liście wywołania `value` dopasowuje ciągły zestaw elementów listy wywołań obiektu delegowanego bieżący, a następnie na liście wywołania `value` mówimy w obrębie listy wywołań obiektu delegowanego bieżącego.</span><span class="sxs-lookup"><span data-stu-id="bf708-909">If the invocation list of `value` matches a contiguous set of elements in the current delegate's invocation list, then the invocation list of `value` is said to occur within the current delegate's invocation list.</span></span> <span data-ttu-id="bf708-910">Jeśli na liście wywołania `value` występuje więcej niż jeden raz w bieżącej listy wywołań obiektu delegowanego, ostatnie wystąpienie zostanie usunięte.</span><span class="sxs-lookup"><span data-stu-id="bf708-910">If the invocation list of `value` occurs more than once in the current delegate's invocation list, the last occurrence is removed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="bf708-911">Obiekt wywołujący nie ma dostępu do metody reprezentowanej przez delegata (na przykład jeśli metoda jest prywatna).</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-911">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="bf708-912">Po wywołaniu późnego wiązania za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-912">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="bf708-913">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-913">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.Remove(System.Delegate,System.Delegate)" />
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="public object Target { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Target" />
      <MemberSignature Language="DocId" Value="P:System.Delegate.Target" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Target As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Target { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Target : obj" Usage="System.Delegate.Target" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bf708-914">Pobiera wystąpienie klasy, na którym bieżącego delegata wywołuje metodę wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-914">Gets the class instance on which the current delegate invokes the instance method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bf708-915">Obiekt, na którym bieżącego delegata wywołuje metodę wystąpienia, jeśli metoda wystąpienia; reprezentuje obiekt delegowany <see langword="null" /> Jeśli delegat reprezentuje metodę statyczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-915">The object on which the current delegate invokes the instance method, if the delegate represents an instance method; <see langword="null" /> if the delegate represents a static method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bf708-916">Metoda wystąpienia to metoda, która jest skojarzona z wystąpieniem klasy, natomiast metoda statyczna jest skojarzona z samą klasą.</span><span class="sxs-lookup"><span data-stu-id="bf708-916">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="bf708-917">Jeśli delegat wywołuje co najmniej jedną metodę wystąpienia, ta właściwość zwraca celem ostatniego metodę wystąpienia na liście wywołania.</span><span class="sxs-lookup"><span data-stu-id="bf708-917">If the delegate invokes one or more instance methods, this property returns the target of the last instance method in the invocation list.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="bf708-918">Po wywołaniu późnego wiązania za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-918">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="bf708-919">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="bf708-919">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
  </Members>
</Type>