<Type Name="Delegate" FullName="System.Delegate">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3f0536eac77f3171e3a7eeb74486cfcf863ec3d8" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Delegate : ICloneable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract serializable beforefieldinit Delegate extends System.Object implements class System.ICloneable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Delegate" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Delegate&#xA;Implements ICloneable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Delegate abstract : ICloneable, System::Runtime::Serialization::ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="1d87f-101">Reprezentuje delegata, który jest strukturą danych, która odwołuje się do metody statycznej lub wystąpienia klasy i metody wystąpienia tej klasy.</span>
      <span class="sxs-lookup">
        <span data-stu-id="1d87f-101">Represents a delegate, which is a data structure that refers to a static method or to a class instance and an instance method of that class.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d87f-102"><xref:System.Delegate> Klasy to klasa podstawowa dla typów delegatów.</span><span class="sxs-lookup"><span data-stu-id="1d87f-102">The <xref:System.Delegate> class is the base class for delegate types.</span></span> <span data-ttu-id="1d87f-103">Jednak tylko systemu i kompilatory można jawnie pochodzi od <xref:System.Delegate> klasy lub <xref:System.MulticastDelegate> klasy.</span><span class="sxs-lookup"><span data-stu-id="1d87f-103">However, only the system and compilers can derive explicitly from the <xref:System.Delegate> class or from the <xref:System.MulticastDelegate> class.</span></span> <span data-ttu-id="1d87f-104">Również nie jest dozwolone wyprowadzenia nowy typ z typem obiektu delegowanego.</span><span class="sxs-lookup"><span data-stu-id="1d87f-104">It is also not permissible to derive a new type from a delegate type.</span></span> <span data-ttu-id="1d87f-105"><xref:System.Delegate> Klasa nie jest uznawany za typ delegata; jest on klasą używany do uzyskania typów delegatów.</span><span class="sxs-lookup"><span data-stu-id="1d87f-105">The <xref:System.Delegate> class is not considered a delegate type; it is a class used to derive delegate types.</span></span>  
  
 <span data-ttu-id="1d87f-106">Większość języków zaimplementować `delegate` — słowo kluczowe i kompilatory w tych językach mogą pochodzić z <xref:System.MulticastDelegate> klasy; w związku z tym użytkownicy powinni używać `delegate` — słowo kluczowe udostępniane przez język.</span><span class="sxs-lookup"><span data-stu-id="1d87f-106">Most languages implement a `delegate` keyword, and compilers for those languages are able to derive from the <xref:System.MulticastDelegate> class; therefore, users should use the `delegate` keyword provided by the language.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d87f-107">Udostępnia środowisko uruchomieniowe języka wspólnego `Invoke` metody dla każdego typu obiektu delegowanego z takiego samego podpisu jak obiekt delegowany.</span><span class="sxs-lookup"><span data-stu-id="1d87f-107">The common language runtime provides an `Invoke` method for each delegate type, with the same signature as the delegate.</span></span> <span data-ttu-id="1d87f-108">Nie trzeba jawnie wywołać tę metodę w C#, Visual Basic lub Visual C++, ponieważ kompilatory wywołać ją automatycznie.</span><span class="sxs-lookup"><span data-stu-id="1d87f-108">You do not have to call this method explicitly from C#, Visual Basic, or Visual C++, because the compilers call it automatically.</span></span> <span data-ttu-id="1d87f-109">`Invoke` Metoda jest przydatna w [odbicia](~/docs/framework/reflection-and-codedom/reflection.md) gdy chcesz znaleźć podpisu z typem obiektu delegowanego.</span><span class="sxs-lookup"><span data-stu-id="1d87f-109">The `Invoke` method is useful in [reflection](~/docs/framework/reflection-and-codedom/reflection.md) when you want to find the signature of the delegate type.</span></span>  
  
 <span data-ttu-id="1d87f-110">Środowisko uruchomieniowe języka wspólnego zapewnia każdego typu obiektu delegowanego z `BeginInvoke` i `EndInvoke` metody w celu umożliwienia wywołania asynchronicznego delegata.</span><span class="sxs-lookup"><span data-stu-id="1d87f-110">The common language runtime provides each delegate type with `BeginInvoke` and `EndInvoke` methods, to enable asynchronous invocation of the delegate.</span></span> <span data-ttu-id="1d87f-111">Aby uzyskać więcej informacji na temat tych metod, zobacz [wywołanie asynchroniczne synchroniczne metody](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span><span class="sxs-lookup"><span data-stu-id="1d87f-111">For more information about these methods, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 <span data-ttu-id="1d87f-112">Deklaracja typu delegata ustanawia kontraktu, który określa podpis co najmniej jedną metodę.</span><span class="sxs-lookup"><span data-stu-id="1d87f-112">The declaration of a delegate type establishes a contract that specifies the signature of one or more methods.</span></span> <span data-ttu-id="1d87f-113">Delegat jest wystąpieniem typu delegata, który odwołuje się do:</span><span class="sxs-lookup"><span data-stu-id="1d87f-113">A delegate is an instance of a delegate type that has references to:</span></span>  
  
-   <span data-ttu-id="1d87f-114">Metoda wystąpienia typu i można przypisać do tego typu obiektu docelowego.</span><span class="sxs-lookup"><span data-stu-id="1d87f-114">An instance method of a type and a target object assignable to that type.</span></span>  
  
-   <span data-ttu-id="1d87f-115">Metodą wystąpienia typu, ukrytego `this` parametru widoczne na liście parametrów formalnych.</span><span class="sxs-lookup"><span data-stu-id="1d87f-115">An instance method of a type, with the hidden `this` parameter exposed in the formal parameter list.</span></span> <span data-ttu-id="1d87f-116">Delegat jest określany jako pełnomocnika otwartej instancji.</span><span class="sxs-lookup"><span data-stu-id="1d87f-116">The delegate is said to be an open instance delegate.</span></span>  
  
-   <span data-ttu-id="1d87f-117">Metoda statyczna.</span><span class="sxs-lookup"><span data-stu-id="1d87f-117">A static method.</span></span>  
  
-   <span data-ttu-id="1d87f-118">Metody statycznej i obiekt docelowy można przypisać do pierwszego parametru metody.</span><span class="sxs-lookup"><span data-stu-id="1d87f-118">A static method and a target object assignable to the first parameter of the method.</span></span> <span data-ttu-id="1d87f-119">Delegat jest nazywany zamknięte przez jego pierwszym argumentem.</span><span class="sxs-lookup"><span data-stu-id="1d87f-119">The delegate is said to be closed over its first argument.</span></span>  
  
 <span data-ttu-id="1d87f-120">Aby uzyskać więcej informacji na delegata powiązanie, zobacz <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> przeciążenie metody.</span><span class="sxs-lookup"><span data-stu-id="1d87f-120">For more information on delegate binding, see the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d87f-121">W wersji systemu .NET Framework 1.0 i 1.1 Delegat może reprezentować metody tylko wtedy, gdy podpis metody jest identyczny podpis określony przez typ delegata.</span><span class="sxs-lookup"><span data-stu-id="1d87f-121">In the .NET Framework versions 1.0 and 1.1, a delegate can represent a method only if the signature of the method exactly matches the signature specified by the delegate type.</span></span> <span data-ttu-id="1d87f-122">W związku z tym są obsługiwane tylko pierwszy i trzeci punktory z powyższej listy, a pierwszy punktor wymaga typu dokładnego dopasowania.</span><span class="sxs-lookup"><span data-stu-id="1d87f-122">Thus, only the first and third bullets in the preceding list are supported, and the first bullet requires an exact type match.</span></span>  
  
 <span data-ttu-id="1d87f-123">Jeśli delegat reprezentuje metodę wystąpienia zamknięte za pośrednictwem pierwszego argumentu (najbardziej typowych przypadkach), delegat przechowuje odwołania do metody punktu wejścia i odwołanie do obiektu o nazwie docelowych, które można przypisać do typu, który jest zdefiniowany typ Metoda.</span><span class="sxs-lookup"><span data-stu-id="1d87f-123">When a delegate represents an instance method closed over its first argument (the most common case), the delegate stores a reference to the method's entry point and a reference to an object, called the target, which is of a type assignable to the type that defined the method.</span></span> <span data-ttu-id="1d87f-124">Delegat reprezentuje metodę Otwórz wystąpienie, są przechowywane odwołania do metody punktu wejścia.</span><span class="sxs-lookup"><span data-stu-id="1d87f-124">When a delegate represents an open instance method, it stores a reference to the method's entry point.</span></span> <span data-ttu-id="1d87f-125">Podpis delegata musi zawierać ukrytego `this` parametrem na liście parametrów formalnych; w takim przypadku delegat nie ma odwołanie do obiektu docelowego i obiekt docelowy musi być podany jest wywoływany delegat.</span><span class="sxs-lookup"><span data-stu-id="1d87f-125">The delegate signature must include the hidden `this` parameter in its formal parameter list; in this case, the delegate does not have a reference to a target object, and a target object must be supplied when the delegate is invoked.</span></span>  
  
 <span data-ttu-id="1d87f-126">Jeśli delegat reprezentuje metody statycznej, delegat przechowuje odwołania do metody punktu wejścia.</span><span class="sxs-lookup"><span data-stu-id="1d87f-126">When a delegate represents a static method, the delegate stores a reference to the method's entry point.</span></span> <span data-ttu-id="1d87f-127">Jeśli delegat reprezentuje statycznej metody zamknięte za pośrednictwem pierwszego argumentu, delegat przechowuje odwołania do metody punktu wejścia i odwołanie do obiektu docelowego, można przypisać do typu pierwszy argument metody.</span><span class="sxs-lookup"><span data-stu-id="1d87f-127">When a delegate represents a static method closed over its first argument, the delegate stores a reference to the method's entry point and a reference to a target object assignable to the type of the method's first argument.</span></span> <span data-ttu-id="1d87f-128">Po wywołaniu delegat pierwszy argument metody statycznej odbiera obiektu docelowego.</span><span class="sxs-lookup"><span data-stu-id="1d87f-128">When the delegate is invoked, the first argument of the static method receives the target object.</span></span>  
  
 <span data-ttu-id="1d87f-129">Lista wywołania delegata jest uporządkowany zestaw obiektów delegowanych, w których każdy element listy wywołuje dokładnie jedną z metod reprezentowany przez delegata.</span><span class="sxs-lookup"><span data-stu-id="1d87f-129">The invocation list of a delegate is an ordered set of delegates in which each element of the list invokes exactly one of the methods represented by the delegate.</span></span> <span data-ttu-id="1d87f-130">Lista wywołanie może zawierać zduplikowanych metody.</span><span class="sxs-lookup"><span data-stu-id="1d87f-130">An invocation list can contain duplicate methods.</span></span> <span data-ttu-id="1d87f-131">Podczas wywoływania metody są wywoływane w kolejności, w którym są wyświetlane na liście wywołania.</span><span class="sxs-lookup"><span data-stu-id="1d87f-131">During an invocation, methods are invoked in the order in which they appear in the invocation list.</span></span> <span data-ttu-id="1d87f-132">Delegat podejmuje próbę wywołania metody, co na swojej liście wywołania; duplikaty są wywoływane po za każdym razem, są wyświetlane na liście wywołania.</span><span class="sxs-lookup"><span data-stu-id="1d87f-132">A delegate attempts to invoke every method in its invocation list; duplicates are invoked once for each time they appear in the invocation list.</span></span> <span data-ttu-id="1d87f-133">Obiekty delegowane są niezmienne; Po utworzeniu listy wywołania delegata nie zmienia się.</span><span class="sxs-lookup"><span data-stu-id="1d87f-133">Delegates are immutable; once created, the invocation list of a delegate does not change.</span></span>  
  
 <span data-ttu-id="1d87f-134">Obiekty delegowane są określane jako multiemisji lub łączonymi, ponieważ Delegat może wywołać co najmniej jedną metodę i mogą być używane w połączeniu operacji.</span><span class="sxs-lookup"><span data-stu-id="1d87f-134">Delegates are referred to as multicast, or combinable, because a delegate can invoke one or more methods and can be used in combining operations.</span></span>  
  
 <span data-ttu-id="1d87f-135">Połączenie operacji, takich jak <xref:System.Delegate.Combine%2A> i <xref:System.Delegate.Remove%2A>, nie należy zmieniać istniejących obiektów delegowanych.</span><span class="sxs-lookup"><span data-stu-id="1d87f-135">Combining operations, such as <xref:System.Delegate.Combine%2A> and <xref:System.Delegate.Remove%2A>, do not alter existing delegates.</span></span> <span data-ttu-id="1d87f-136">Zamiast tego takie działanie zwraca nowe delegowanie, zawierającego wyniki operacji pełnomocnika bez zmian lub `null`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-136">Instead, such an operation returns a new delegate that contains the results of the operation, an unchanged delegate, or `null`.</span></span> <span data-ttu-id="1d87f-137">Zwraca operacji łączenia `null` gdy wyniku operacji jest delegata, który nie odwołuje się co najmniej jedną metodę.</span><span class="sxs-lookup"><span data-stu-id="1d87f-137">A combining operation returns `null` when the result of the operation is a delegate that does not reference at least one method.</span></span> <span data-ttu-id="1d87f-138">Operacji łączenia zwraca delegata bez zmian, gdy żądana operacja nie ma wpływu.</span><span class="sxs-lookup"><span data-stu-id="1d87f-138">A combining operation returns an unchanged delegate when the requested operation has no effect.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d87f-139">Zarządzane Użyj języków <xref:System.Delegate.Combine%2A> i <xref:System.Delegate.Remove%2A> metody służące do implementacji działania delegata.</span><span class="sxs-lookup"><span data-stu-id="1d87f-139">Managed languages use the <xref:System.Delegate.Combine%2A> and <xref:System.Delegate.Remove%2A> methods to implement delegate operations.</span></span> <span data-ttu-id="1d87f-140">Przykłady obejmują `AddHandler` i `RemoveHandler` instrukcji w języku Visual Basic i operatory "+= i-=" na delegata typów w języku C#.</span><span class="sxs-lookup"><span data-stu-id="1d87f-140">Examples include the `AddHandler` and `RemoveHandler` statements in Visual Basic and the += and -= operators on delegate types in C#.</span></span>  
  
 <span data-ttu-id="1d87f-141">Począwszy od [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], ogólnych typów delegata mogą mieć parametrów typu variant.</span><span class="sxs-lookup"><span data-stu-id="1d87f-141">Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], generic delegate types can have variant type parameters.</span></span> <span data-ttu-id="1d87f-142">Parametry typu kontrawariantnego mogą być używane jako typy parametrów delegata, a parametr typu kowariantnego może służyć jako typ zwracany.</span><span class="sxs-lookup"><span data-stu-id="1d87f-142">Contravariant type parameters can be used as parameter types of the delegate, and a covariant type parameter can be used as the return type.</span></span> <span data-ttu-id="1d87f-143">Ta funkcja umożliwia Delegat ogólny typy, które są tworzone na podstawie tej samej definicji typu ogólnego za zgodny przypisania, jeśli ich argumenty typu są typy referencyjne z relację dziedziczenia, zgodnie z objaśnieniem w [Kowariancja i Kontrawariancja](~/docs/standard/generics/covariance-and-contravariance.md).</span><span class="sxs-lookup"><span data-stu-id="1d87f-143">This feature allows generic delegate types that are constructed from the same generic type definition to be assignment-compatible if their type arguments are reference types with an inheritance relationship, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d87f-144">Delegaty ogólne, które są zgodne z przypisania z powodu wariancję nie są zawsze łączonymi.</span><span class="sxs-lookup"><span data-stu-id="1d87f-144">Generic delegates that are assignment-compatible because of variance are not necessarily combinable.</span></span> <span data-ttu-id="1d87f-145">Być łączonymi typy muszą być całkowicie zgodne.</span><span class="sxs-lookup"><span data-stu-id="1d87f-145">To be combinable, the types must match exactly.</span></span> <span data-ttu-id="1d87f-146">Na przykład załóżmy, że klasa o nazwie `Derived` jest pochodną klasy o nazwie `Base`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-146">For example, suppose that a class named `Derived` is derived from a class named `Base`.</span></span> <span data-ttu-id="1d87f-147">Delegowanego typu `Action<Base>` (`Action(Of Base)` w języku Visual Basic) można przypisać do zmiennej typu `Action<Derived>`, ale nie można połączyć dwóch delegatów, ponieważ typy nie są zgodne dokładnie.</span><span class="sxs-lookup"><span data-stu-id="1d87f-147">A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, but the two delegates cannot be combined because the types do not match exactly.</span></span>  
  
 <span data-ttu-id="1d87f-148">Wywołana metoda zgłasza wyjątek, metoda zatrzymuje wykonywanie, wyjątek jest przekazywane z powrotem do wywołującego delegata i pozostałe metody na liście wywołania nie są wywoływane.</span><span class="sxs-lookup"><span data-stu-id="1d87f-148">If an invoked method throws an exception, the method stops executing, the exception is passed back to the caller of the delegate, and remaining methods in the invocation list are not invoked.</span></span> <span data-ttu-id="1d87f-149">Przechwytywanie wyjątków w obiekt wywołujący nie zmienia to zachowanie.</span><span class="sxs-lookup"><span data-stu-id="1d87f-149">Catching the exception in the caller does not alter this behavior.</span></span>  
  
 <span data-ttu-id="1d87f-150">Podpis metody wywoływane przez obiekt delegowany zawierającego wartość zwrotna, delegat zwraca wartość zwracaną ostatniego elementu na liście wywołania.</span><span class="sxs-lookup"><span data-stu-id="1d87f-150">When the signature of the methods invoked by a delegate includes a return value, the delegate returns the return value of the last element in the invocation list.</span></span> <span data-ttu-id="1d87f-151">Jeśli podpis zawiera parametr, który jest przekazywana przez odwołanie, końcowa wartość parametru jest wynikiem każdej metody na liście wywołania wykonywane sekwencyjnie i aktualizowania wartości parametru.</span><span class="sxs-lookup"><span data-stu-id="1d87f-151">When the signature includes a parameter that is passed by reference, the final value of the parameter is the result of every method in the invocation list executing sequentially and updating the parameter's value.</span></span>  
  
 <span data-ttu-id="1d87f-152">Najbliższym odpowiednikiem delegata w języka C lub C++ jest wskaźnik funkcji.</span><span class="sxs-lookup"><span data-stu-id="1d87f-152">The closest equivalent of a delegate in C or C++ is a function pointer.</span></span> <span data-ttu-id="1d87f-153">Delegat może reprezentować metodą statyczną lub metodą wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="1d87f-153">A delegate can represent a static method or an instance method.</span></span> <span data-ttu-id="1d87f-154">Jeśli delegat reprezentuje metodę wystąpienia, delegat przechowuje nie tylko odwołania do metody punktu wejścia, ale również odwołanie do wystąpienia klasy.</span><span class="sxs-lookup"><span data-stu-id="1d87f-154">When the delegate represents an instance method, the delegate stores not only a reference to the method's entry point, but also a reference to the class instance.</span></span> <span data-ttu-id="1d87f-155">W przeciwieństwie do wskaźników funkcji delegatów są obiektowej i wpisz bezpieczne.</span><span class="sxs-lookup"><span data-stu-id="1d87f-155">Unlike function pointers, delegates are object oriented and type safe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1d87f-156">Poniższy przykład przedstawia sposób definiowania delegata o nazwie `myMethodDelegate`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-156">The following example shows how to define a delegate named `myMethodDelegate`.</span></span> <span data-ttu-id="1d87f-157">Utworzenie wystąpień tego obiektu delegowanego dla metody wystąpienia i metodą statyczną zagnieżdżone `mySampleClass` klasy.</span><span class="sxs-lookup"><span data-stu-id="1d87f-157">Instances of this delegate are created for an instance method and a static method of the nested `mySampleClass` class.</span></span> <span data-ttu-id="1d87f-158">Delegat dla metody wystąpienia wymaga wystąpienia `mySampleClass`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-158">The delegate for the instance method requires an instance of `mySampleClass`.</span></span> <span data-ttu-id="1d87f-159">`mySampleClass` Wystąpienia jest zapisywane w zmiennej o nazwie `mySC`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-159">The `mySampleClass` instance is saved in a variable named `mySC`.</span></span>  
  
 [!code-cpp[Classic Delegate Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Delegate Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Delegate Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Delegate Example/CS/source.cs#1)]
 [!code-vb[Classic Delegate Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Delegate Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.MulticastDelegate" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1d87f-160">Inicjuje nowe delegowanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-160">Initializes a new delegate.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Delegate (object target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(object target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.#ctor(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (target As Object, method As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Delegate(System::Object ^ target, System::String ^ method);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="1d87f-161">Wystąpienie klasy, w którym wywołuje delegata <c>metody</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-161">The class instance on which the delegate invokes <c>method</c>.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="1d87f-162">Nazwa metody wystąpienia, który reprezentuje delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-162">The name of the instance method that the delegate represents.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1d87f-163">Inicjuje delegata, który wywołuje metodę wystąpienia określonego wystąpienia określonej klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-163">Initializes a delegate that invokes the specified instance method on the specified class instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d87f-164">Ten konstruktor nie można używać w kodzie aplikacji.</span><span class="sxs-lookup"><span data-stu-id="1d87f-164">This constructor cannot be used in application code.</span></span> <span data-ttu-id="1d87f-165">Aby utworzyć delegata, określając nazwę metody wystąpienia, należy użyć przeciążenia <xref:System.Delegate.CreateDelegate%2A> metodę, która określa nazwę metody i obiekt docelowy.</span><span class="sxs-lookup"><span data-stu-id="1d87f-165">To create a delegate by specifying the name of an instance method, use an overload of the <xref:System.Delegate.CreateDelegate%2A> method that specifies a method name and a target object.</span></span> <span data-ttu-id="1d87f-166">Na przykład <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%29> przeciążenie metody tworzy delegowany do metody wystąpienia o określonej nazwie.</span><span class="sxs-lookup"><span data-stu-id="1d87f-166">For example, the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%29> method overload creates a delegate for an instance method with a specified name.</span></span>  
  
 <span data-ttu-id="1d87f-167">Ten konstruktor tworzy delegatów na przykład tylko metody.</span><span class="sxs-lookup"><span data-stu-id="1d87f-167">This constructor creates delegates for instance methods only.</span></span> <span data-ttu-id="1d87f-168">Metoda wystąpienia to metoda, która jest skojarzona z wystąpieniem klasy, natomiast metoda statyczna jest skojarzona z samą klasą.</span><span class="sxs-lookup"><span data-stu-id="1d87f-168">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1d87f-169">
            <paramref name="target" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-169">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1d87f-170">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-170">-or-</span>
          </span>
          <span data-ttu-id="1d87f-171">
            <paramref name="method" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-171">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1d87f-172">Wystąpił błąd powiązania z metodą docelową.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-172">There was an error binding to the target method.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="1d87f-173">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-173">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="1d87f-174">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-174">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Delegate (Type target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Type target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.#ctor(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (target As Type, method As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Delegate(Type ^ target, System::String ^ method);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="target" Type="System.Type" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="1d87f-175">
            <see cref="T:System.Type" /> Reprezentujący klasę, która definiuje <c>metody</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-175">The <see cref="T:System.Type" /> representing the class that defines <c>method</c>.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="1d87f-176">Nazwa metody statycznej, który reprezentuje delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-176">The name of the static method that the delegate represents.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1d87f-177">Inicjuje delegata, który wywołuje określonej metody statycznej z określonej klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-177">Initializes a delegate that invokes the specified static method from the specified class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d87f-178">Ten konstruktor nie można używać w kodzie aplikacji.</span><span class="sxs-lookup"><span data-stu-id="1d87f-178">This constructor cannot be used in application code.</span></span> <span data-ttu-id="1d87f-179">Do utworzenia delegata, określając nazwę metody statycznej, użyj przeciążenia <xref:System.Delegate.CreateDelegate%2A> metodę, która określa nazwę metody, ale nie określa obiektu docelowego.</span><span class="sxs-lookup"><span data-stu-id="1d87f-179">To create a delegate by specifying the name of a static method, use an overload of the <xref:System.Delegate.CreateDelegate%2A> method that specifies a method name but does not specify a target object.</span></span> <span data-ttu-id="1d87f-180">Na przykład <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%29> przeciążenie metody tworzy delegata statycznej metody o określonej nazwie.</span><span class="sxs-lookup"><span data-stu-id="1d87f-180">For example, the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%29> method overload creates a static delegate for a method with a specified name.</span></span>  
  
 <span data-ttu-id="1d87f-181">Ten konstruktor tworzy delegatów tylko metody statyczne.</span><span class="sxs-lookup"><span data-stu-id="1d87f-181">This constructor creates delegates for static methods only.</span></span> <span data-ttu-id="1d87f-182">Metoda wystąpienia to metoda, która jest skojarzona z wystąpieniem klasy, natomiast metoda statyczna jest skojarzona z samą klasą.</span><span class="sxs-lookup"><span data-stu-id="1d87f-182">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1d87f-183">
            <paramref name="target" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-183">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1d87f-184">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-184">-or-</span>
          </span>
          <span data-ttu-id="1d87f-185">
            <paramref name="method" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-185">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1d87f-186">
            <paramref name="target" /> nie jest <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-186">
              <paramref name="target" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="1d87f-187">Zobacz [typów środowiska wykonawczego w odbicia](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-187">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="1d87f-188">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-188">-or-</span>
          </span>
          <span data-ttu-id="1d87f-189">
            <paramref name="target" /> reprezentuje otwartym typem ogólnym.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-189">
              <paramref name="target" /> represents an open generic type.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="1d87f-190">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-190">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="1d87f-191">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-191">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1d87f-192">Tworzy kopię pobieżną delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-192">Creates a shallow copy of the delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1d87f-193">Kopia pobieżna delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-193">A shallow copy of the delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d87f-194">Klon ma taką samą <xref:System.Type>, listy docelowej, metodę oraz wywołania jak oryginalny obiekt delegowany.</span><span class="sxs-lookup"><span data-stu-id="1d87f-194">The clone has the same <xref:System.Type>, target, method, and invocation list as the original delegate.</span></span>  
  
 <span data-ttu-id="1d87f-195">Kopia pobieżna tworzy nowe wystąpienie tego samego typu co oryginalny obiekt, a następnie kopiuje niestatycznego pola oryginalnego obiektu.</span><span class="sxs-lookup"><span data-stu-id="1d87f-195">A shallow copy creates a new instance of the same type as the original object, and then copies the nonstatic fields of the original object.</span></span> <span data-ttu-id="1d87f-196">Jeśli pole jest typu wartości, jest wykonywane kopii bitowej przez bitowej pola.</span><span class="sxs-lookup"><span data-stu-id="1d87f-196">If the field is a value type, a bit-by-bit copy of the field is performed.</span></span> <span data-ttu-id="1d87f-197">Jeśli pole jest typu odwołania, jest kopiowana odwołania, ale określony obiekt jest; w związku z tym odwołania w obiekcie oryginalnym i odwołania w klonowania wskazują ten sam obiekt.</span><span class="sxs-lookup"><span data-stu-id="1d87f-197">If the field is a reference type, the reference is copied but the referred object is not; therefore, the reference in the original object and the reference in the clone point to the same object.</span></span> <span data-ttu-id="1d87f-198">Z kolei głęboką kopię obiektu jest duplikatem wszystko bezpośrednio lub pośrednio odwołuje się pola w obiekcie.</span><span class="sxs-lookup"><span data-stu-id="1d87f-198">In contrast, a deep copy of an object duplicates everything directly or indirectly referenced by the fields in the object.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="1d87f-199">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-199">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="1d87f-200">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-200">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Combine">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1d87f-201">Łączy listę wywołania obiekty delegowane multiemisji określony (łączonymi).</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-201">Concatenates the invocation lists of the specified multicast (combinable) delegates.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static Delegate Combine (params Delegate[] delegates);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate Combine(class System.Delegate[] delegates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Combine(System.Delegate[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (ParamArray delegates As Delegate()) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ Combine(... cli::array &lt;Delegate ^&gt; ^ delegates);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegates" Type="System.Delegate[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delegates">
          <span data-ttu-id="1d87f-202">Tablica obiektów delegowanych połączyć.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-202">The array of delegates to combine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1d87f-203">Łączy listę wywołania tablicę obiektów delegowanych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-203">Concatenates the invocation lists of an array of delegates.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1d87f-204">Nowe delegowanie przy użyciu listy wywołania, który łączy list wywołania delegatów w <paramref name="delegates" /> tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-204">A new delegate with an invocation list that concatenates the invocation lists of the delegates in the <paramref name="delegates" /> array.</span>
          </span>
          <span data-ttu-id="1d87f-205">Zwraca <see langword="null" /> Jeśli <paramref name="delegates" /> jest <see langword="null" />, jeśli <paramref name="delegates" /> nie zawiera zero elementów lub jeśli każdy wpis w <paramref name="delegates" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-205">Returns <see langword="null" /> if <paramref name="delegates" /> is <see langword="null" />, if <paramref name="delegates" /> contains zero elements, or if every entry in <paramref name="delegates" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d87f-206">Jeśli `delegates` tablica zawiera wpisów, które są `null`, te wpisy są ignorowane.</span><span class="sxs-lookup"><span data-stu-id="1d87f-206">If the `delegates` array contains entries that are `null`, those entries are ignored.</span></span>  
  
 <span data-ttu-id="1d87f-207">Lista wywołanie może zawierać zduplikowanych wpisów; oznacza to, wpisów, które odwołują się do tej samej metody na tym samym obiekcie.</span><span class="sxs-lookup"><span data-stu-id="1d87f-207">The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d87f-208">Delegaty ogólne, które są zgodne z przypisania z powodu wariancję nie są zawsze łączonymi.</span><span class="sxs-lookup"><span data-stu-id="1d87f-208">Generic delegates that are assignment-compatible because of variance are not necessarily combinable.</span></span> <span data-ttu-id="1d87f-209">Być łączonymi typy muszą być całkowicie zgodne.</span><span class="sxs-lookup"><span data-stu-id="1d87f-209">To be combinable, the types must match exactly.</span></span> <span data-ttu-id="1d87f-210">Na przykład załóżmy, że klasa o nazwie `Derived` jest pochodną klasy o nazwie `Base`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-210">For example, suppose that a class named `Derived` is derived from a class named `Base`.</span></span> <span data-ttu-id="1d87f-211">Delegowanego typu `Action<Base>` (`Action(Of Base)` w języku Visual Basic) można przypisać do zmiennej typu `Action<Derived>`, zgodnie z objaśnieniem w [Kowariancja i Kontrawariancja](~/docs/standard/generics/covariance-and-contravariance.md), ale nie można połączyć dwóch delegatów, ponieważ typy są nie takie same.</span><span class="sxs-lookup"><span data-stu-id="1d87f-211">A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md), but the two delegates cannot be combined because the types do not match exactly.</span></span>  
  
 <span data-ttu-id="1d87f-212"><xref:System.Delegate.Combine%2A> jest przydatne w przypadku tworzenia procedury obsługi zdarzeń, które występuje wiele metod czasu zdarzenie wywołania.</span><span class="sxs-lookup"><span data-stu-id="1d87f-212"><xref:System.Delegate.Combine%2A> is useful for creating event handlers that call multiple methods each time an event occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1d87f-213">Nie wszystkie wpisy z systemem innym niż null w <paramref name="delegates" /> wystąpień tego samego typu delegowanego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-213">Not all the non-null entries in <paramref name="delegates" /> are instances of the same delegate type.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="1d87f-214">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-214">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="1d87f-215">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-215">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="M:System.Delegate.CombineImpl(System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static Delegate Combine (Delegate a, Delegate b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate Combine(class System.Delegate a, class System.Delegate b) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Combine(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (a As Delegate, b As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ Combine(Delegate ^ a, Delegate ^ b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Delegate" />
        <Parameter Name="b" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="a">
          <span data-ttu-id="1d87f-216">Delegat, którego lista wywołania zostanie osiągnięty jako pierwszy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-216">The delegate whose invocation list comes first.</span>
          </span>
        </param>
        <param name="b">
          <span data-ttu-id="1d87f-217">Delegat, którego lista wywołania pochodzi ostatni.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-217">The delegate whose invocation list comes last.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1d87f-218">Łączy listę wywołania dwóch delegatów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-218">Concatenates the invocation lists of two delegates.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1d87f-219">Nowe delegowanie przy użyciu listy wywołania, który łączy wywołanie list <paramref name="a" /> i <paramref name="b" /> w podanej kolejności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-219">A new delegate with an invocation list that concatenates the invocation lists of <paramref name="a" /> and <paramref name="b" /> in that order.</span>
          </span>
          <span data-ttu-id="1d87f-220">Zwraca <paramref name="a" /> Jeśli <paramref name="b" /> jest <see langword="null" />, zwraca <paramref name="b" /> Jeśli <paramref name="a" /> jest odwołanie o wartości null i zwraca odwołanie o wartości null, jeśli obie <paramref name="a" /> i <paramref name="b" /> są puste odwołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-220">Returns <paramref name="a" /> if <paramref name="b" /> is <see langword="null" />, returns <paramref name="b" /> if <paramref name="a" /> is a null reference, and returns a null reference if both <paramref name="a" /> and <paramref name="b" /> are null references.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d87f-221">Lista wywołanie może zawierać zduplikowanych wpisów; oznacza to, wpisów, które odwołują się do tej samej metody na tym samym obiekcie.</span><span class="sxs-lookup"><span data-stu-id="1d87f-221">The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d87f-222">Delegaty ogólne, które są zgodne z przypisania z powodu wariancję nie są zawsze łączonymi.</span><span class="sxs-lookup"><span data-stu-id="1d87f-222">Generic delegates that are assignment-compatible because of variance are not necessarily combinable.</span></span> <span data-ttu-id="1d87f-223">Być łączonymi typy muszą być całkowicie zgodne.</span><span class="sxs-lookup"><span data-stu-id="1d87f-223">To be combinable, the types must match exactly.</span></span> <span data-ttu-id="1d87f-224">Na przykład załóżmy, że klasa o nazwie `Derived` jest pochodną klasy o nazwie `Base`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-224">For example, suppose that a class named `Derived` is derived from a class named `Base`.</span></span> <span data-ttu-id="1d87f-225">Delegowanego typu `Action<Base>` (`Action(Of Base)` w języku Visual Basic) można przypisać do zmiennej typu `Action<Derived>`, zgodnie z objaśnieniem w [Kowariancja i Kontrawariancja](~/docs/standard/generics/covariance-and-contravariance.md), ale nie można połączyć dwóch delegatów, ponieważ typy są nie takie same.</span><span class="sxs-lookup"><span data-stu-id="1d87f-225">A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md), but the two delegates cannot be combined because the types do not match exactly.</span></span>  
  
 <span data-ttu-id="1d87f-226"><xref:System.Delegate.Combine%2A> jest przydatne w przypadku tworzenia procedury obsługi zdarzeń, które występuje wiele metod czasu zdarzenie wywołania.</span><span class="sxs-lookup"><span data-stu-id="1d87f-226"><xref:System.Delegate.Combine%2A> is useful for creating event handlers that call multiple methods each time an event occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1d87f-227">Zarówno <paramref name="a" /> i <paramref name="b" /> nie są <see langword="null" />, i <paramref name="a" /> i <paramref name="b" /> nie są wystąpień tego samego typu delegowanego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-227">Both <paramref name="a" /> and <paramref name="b" /> are not <see langword="null" />, and <paramref name="a" /> and <paramref name="b" /> are not instances of the same delegate type.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="1d87f-228">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-228">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="1d87f-229">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-229">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="M:System.Delegate.CombineImpl(System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="CombineImpl">
      <MemberSignature Language="C#" Value="protected virtual Delegate CombineImpl (Delegate d);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Delegate CombineImpl(class System.Delegate d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CombineImpl(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CombineImpl (d As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Delegate ^ CombineImpl(Delegate ^ d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="1d87f-230">(Łączonymi) multiemisji delegować delegować których listy wywołania do dołączenia do końca listy wywołania bieżącego multiemisji (łączonymi).</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-230">The multicast (combinable) delegate whose invocation list to append to the end of the invocation list of the current multicast (combinable) delegate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1d87f-231">Łączy listę wywołania określonego delegata (łączonymi) multiemisji i bieżącego multiemisji delegata (łączonymi).</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-231">Concatenates the invocation lists of the specified multicast (combinable) delegate and the current multicast (combinable) delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1d87f-232">Delegowanie nowe multiemisja (łączonymi) przy użyciu listy wywołania, który łączy listy wywołania bieżącego multiemisji delegata (łączonymi) i wywołania listę <paramref name="d" />, delegować bieżącego multiemisji (łączonymi), jeśli <paramref name="d" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-232">A new multicast (combinable) delegate with an invocation list that concatenates the invocation list of the current multicast (combinable) delegate and the invocation list of <paramref name="d" />, or the current multicast (combinable) delegate if <paramref name="d" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d87f-233">Ta metoda ma zastosowanie tylko wtedy, gdy bieżący delegat jest multiemisji (łączonymi).</span><span class="sxs-lookup"><span data-stu-id="1d87f-233">This method applies only if the current delegate is multicast (combinable).</span></span>  
  
 <span data-ttu-id="1d87f-234">Bieżąca implementacja po prostu zgłasza <xref:System.MulticastNotSupportedException>.</span><span class="sxs-lookup"><span data-stu-id="1d87f-234">The current implementation simply throws a <xref:System.MulticastNotSupportedException>.</span></span>  
  
 <span data-ttu-id="1d87f-235">Lista wywołanie może zawierać zduplikowanych wpisów; oznacza to, wpisów, które odwołują się do tej samej metody na tym samym obiekcie.</span><span class="sxs-lookup"><span data-stu-id="1d87f-235">The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MulticastNotSupportedException">
          <span data-ttu-id="1d87f-236">Zawsze generowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-236">Always thrown.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="1d87f-237">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-237">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="1d87f-238">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-238">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.Combine(System.Delegate,System.Delegate)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateDelegate">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1d87f-239">Tworzy delegata określonego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-239">Creates a delegate of the specified type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="1d87f-240">
            <see cref="T:System.Type" /> Delegata do utworzenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-240">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="1d87f-241">
            <see cref="T:System.Reflection.MethodInfo" /> Opisujące statycznych lub metody obiektu delegowanego jest do reprezentowania wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-241">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span>
          </span>
          <span data-ttu-id="1d87f-242">Tylko metody statyczne są obsługiwane w programie .NET Framework w wersji 1.0, 1.1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-242">Only static methods are supported in the .NET Framework version 1.0 and 1.1.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1d87f-243">Tworzy delegata do reprezentowania określonej metody statyczne określonego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-243">Creates a delegate of the specified type to represent the specified static method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1d87f-244">Delegat określonego typu do reprezentowania określonej metody statycznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-244">A delegate of the specified type to represent the specified static method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d87f-245">W programie .NET Framework w wersji 1.0, 1.1 przeciążenie metody tworzy delegatów tylko metody statyczne.</span><span class="sxs-lookup"><span data-stu-id="1d87f-245">In the .NET Framework version 1.0 and 1.1, this method overload creates delegates for static methods only.</span></span> <span data-ttu-id="1d87f-246">W programie .NET Framework w wersji 2.0 przeciążenie metody również tworzyć Otwórz wystąpienie metody obiektów delegowanych; oznacza to delegatów, zapewniających jawnie ukryte pierwszego argumentu wystąpienia metody.</span><span class="sxs-lookup"><span data-stu-id="1d87f-246">In the .NET Framework version 2.0, this method overload also can create open instance method delegates; that is, delegates that explicitly supply the hidden first argument of instance methods.</span></span> <span data-ttu-id="1d87f-247">Aby uzyskać szczegółowy opis, zobacz więcej ogólnych <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> przeciążenie metody, dzięki czemu można utworzyć wszystkie kombinacje open lub closed delegatów wystąpieniem lub metody statyczne i opcjonalnie określ pierwszy argument.</span><span class="sxs-lookup"><span data-stu-id="1d87f-247">For a detailed explanation, see the more general <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> method overload, which allows you to create all combinations of open or closed delegates for instance or static methods, and optionally to specify a first argument.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d87f-248">Przeciążenie tej metody należy użyć podczas delegat nie zostaną zamknięte za pośrednictwem pierwszego argumentu, ponieważ jest nieco szybszy w takim przypadku.</span><span class="sxs-lookup"><span data-stu-id="1d87f-248">This method overload should be used when the delegate is not closed over its first argument, because it is somewhat faster in that case.</span></span>  
  
 <span data-ttu-id="1d87f-249">Przeciążenie tej metody jest odpowiednikiem wywołania <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> przeciążenie metody i określając `true` dla `throwOnBindFailure`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-249">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload and specifying `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d87f-250">Począwszy od [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], ta metoda może służyć do niepublicznego metody dostępu, jeśli element wywołujący zostało udzielone <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> Flaga i jeśli zestaw grant metody niepublicznej jest ograniczone do obiektu wywołującego udzielić zestawu lub być podzbiorem jej.</span><span class="sxs-lookup"><span data-stu-id="1d87f-250">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="1d87f-251">(Zobacz [zagadnienia dotyczące zabezpieczeń dla odbicia](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="1d87f-251">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="1d87f-252">Aby używać tej funkcji, należy docelowy aplikacji [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszym.</span><span class="sxs-lookup"><span data-stu-id="1d87f-252">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="1d87f-253">Zgodne typy parametrów i zwracany typ</span><span class="sxs-lookup"><span data-stu-id="1d87f-253">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="1d87f-254">W programie .NET Framework w wersji 2.0 typy parametrów i typ zwracany delegata utworzone za pomocą tego przeciążenia metody muszą być zgodne z typami parametrów i typ zwracany metody, która reprezentuje delegata; typy musi dokładnie odpowiadać.</span><span class="sxs-lookup"><span data-stu-id="1d87f-254">In the .NET Framework version 2.0, the parameter types and return type of a delegate created using this method overload must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span> <span data-ttu-id="1d87f-255">Reprezentuje złagodzenie zachowanie wiązania w programie .NET Framework w wersji 1.0, 1.1, których typy muszą być zgodne.</span><span class="sxs-lookup"><span data-stu-id="1d87f-255">This represents a relaxation of the binding behavior in the .NET Framework version 1.0 and 1.1, where the types must match exactly.</span></span>  
  
 <span data-ttu-id="1d87f-256">Parametr typu delegata jest zgodny z odpowiadającego mu parametru metody, jeśli typ parametru delegowanego jest bardziej restrykcyjny niż typ parametru metody, ponieważ gwarantuje to, że argument przekazany do delegata można bezpiecznie przekazany do Metoda.</span><span class="sxs-lookup"><span data-stu-id="1d87f-256">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="1d87f-257">Podobnie zwracany typ delegata jest zgodny z typem zwracanym metody, jeśli typ zwracany metody jest bardziej restrykcyjny niż typ zwracany delegata, ponieważ gwarantuje to, że zwracana wartość metody mogą być bezpiecznie rzutowane na zwracany typ e delegata.</span><span class="sxs-lookup"><span data-stu-id="1d87f-257">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="1d87f-258">Na przykład delegata z parametrem typu <xref:System.Collections.Hashtable> i typ zwracany <xref:System.Object> może reprezentować metody z parametrem typu <xref:System.Object> i zwracanej wartości typu <xref:System.Collections.Hashtable>.</span><span class="sxs-lookup"><span data-stu-id="1d87f-258">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1d87f-259">Ten rozdział zawiera dwa przykłady kodu.</span><span class="sxs-lookup"><span data-stu-id="1d87f-259">This section contains two code examples.</span></span> <span data-ttu-id="1d87f-260">W pierwszym przykładzie pokazano dwa rodzaje obiektów delegowanych, które mogą być tworzone za pomocą tego przeciążenia metody: Otwórz za pośrednictwem metody wystąpienia a za pośrednictwem metody statycznej.</span><span class="sxs-lookup"><span data-stu-id="1d87f-260">The first example demonstrates the two kinds of delegates that can be created with this method overload: open over an instance method and open over a static method.</span></span>  
  
 <span data-ttu-id="1d87f-261">Drugi przykład kodu ilustruje zgodność typów parametrów i zwracanych typów.</span><span class="sxs-lookup"><span data-stu-id="1d87f-261">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="1d87f-262">**Przykład 1**</span><span class="sxs-lookup"><span data-stu-id="1d87f-262">**Example 1**</span></span>  
  
 <span data-ttu-id="1d87f-263">W poniższym przykładzie kodu pokazano dwa sposoby delegata mogą być tworzone przy użyciu tego przeciążenia <xref:System.Delegate.CreateDelegate%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="1d87f-263">The following code example demonstrates the two ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d87f-264">Istnieją dwa przeciążenia metody <xref:System.Delegate.CreateDelegate%2A> — metoda, która określa <xref:System.Reflection.MethodInfo> , ale pierwszy argument; ich funkcji jest taki sam, z wyjątkiem tego, co umożliwia Określ, czy ma być generowany w przypadku niepowodzenia powiązać i innych zawsze zwraca.</span><span class="sxs-lookup"><span data-stu-id="1d87f-264">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify a <xref:System.Reflection.MethodInfo> but not a first argument; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="1d87f-265">W tym przykładzie kodu są używane oba przeciążenia.</span><span class="sxs-lookup"><span data-stu-id="1d87f-265">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="1d87f-266">Przykład deklaruje klasy `C` z metodą statyczną `M2` i metody wystąpienia `M1`, i delegowanie dwa typy: `D1` przyjmuje wystąpienia `C` i ciąg, i `D2` ciąg znaków.</span><span class="sxs-lookup"><span data-stu-id="1d87f-266">The example declares a class `C` with a static method `M2` and an instance method `M1`, and two delegate types: `D1` takes an instance of `C` and a string, and `D2` takes a string.</span></span>  
  
 <span data-ttu-id="1d87f-267">Drugiej klasy o nazwie `Example` zawiera kod, który tworzy delegatów.</span><span class="sxs-lookup"><span data-stu-id="1d87f-267">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="1d87f-268">Delegat typu `D1`, reprezentujący metodę otwarte wystąpienia, jest tworzona dla metody wystąpienia `M1`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-268">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="1d87f-269">Wystąpienie musi zostać przekazane podczas wywoływania delegata.</span><span class="sxs-lookup"><span data-stu-id="1d87f-269">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="1d87f-270">Delegat typu `D2`, reprezentujący otwarty metody statycznej, jest tworzona dla metody statycznej `M2`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-270">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="1d87f-271">**Przykład 2**</span><span class="sxs-lookup"><span data-stu-id="1d87f-271">**Example 2**</span></span>  
  
 <span data-ttu-id="1d87f-272">Poniższy przykład kodu ilustruje zgodność typów parametrów i zwracanych typów.</span><span class="sxs-lookup"><span data-stu-id="1d87f-272">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
 <span data-ttu-id="1d87f-273">Przykładowy kod definiuje klasę podstawową o nazwie `Base` i klasę o nazwie `Derived` która pochodzi z `Base`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-273">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="1d87f-274">Klasa pochodna ma `static` (`Shared` w języku Visual Basic) metodę o nazwie `MyMethod` z jednym parametrem typu `Base` i typ zwracany `Derived`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-274">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="1d87f-275">Przykładowy kod definiuje również delegata o nazwie `Example` który ma jeden parametr typu `Derived` i typ zwracany `Base`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-275">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="1d87f-276">Przykład kodu pokazuje, że delegata o nazwie `Example` może służyć do reprezentowania metody `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-276">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="1d87f-277">Metodę można powiązać z delegatem, ponieważ:</span><span class="sxs-lookup"><span data-stu-id="1d87f-277">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="1d87f-278">Typ parametru delegata (`Derived`) jest bardziej restrykcyjny niż typ parametru `MyMethod` (`Base`), dzięki czemu zawsze jest bezpieczne argument pełnomocnika, aby przekazać `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-278">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="1d87f-279">Zwracany typ `MyMethod` (`Derived`) jest bardziej restrykcyjny niż typ parametru delegata (`Base`), dzięki czemu zawsze jest bezpieczne rzutowanie zwracany typ metody na zwracany typ delegata.</span><span class="sxs-lookup"><span data-stu-id="1d87f-279">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="1d87f-280">W przykładowym kodzie nie są generowane żadne dane wyjściowe.</span><span class="sxs-lookup"><span data-stu-id="1d87f-280">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1d87f-281">
            <paramref name="type" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-281">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1d87f-282">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-282">-or-</span>
          </span>
          <span data-ttu-id="1d87f-283">
            <paramref name="method" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-283">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1d87f-284">
            <paramref name="type" /> nie dziedziczy <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-284">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="1d87f-285">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-285">-or-</span>
          </span>
          <span data-ttu-id="1d87f-286">
            <paramref name="type" /> nie jest <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-286">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="1d87f-287">Zobacz [typów środowiska wykonawczego w odbicia](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-287">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="1d87f-288">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-288">-or-</span>
          </span>
          <span data-ttu-id="1d87f-289">
            <paramref name="method" /> nie jest metodą statyczną, i jest programu .NET Framework w wersji 1.0 lub 1.1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-289">
              <paramref name="method" /> is not a static method, and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
          <span data-ttu-id="1d87f-290">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-290">-or-</span>
          </span>
          <span data-ttu-id="1d87f-291">
            <paramref name="method" /> Nie można powiązać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-291">
              <paramref name="method" /> cannot be bound.</span>
          </span>
          <span data-ttu-id="1d87f-292">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-292">-or-</span>
          </span>
          <span data-ttu-id="1d87f-293">
            <paramref name="method" /> nie jest <see langword="RuntimeMethodInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-293">
              <paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span>
          </span>
          <span data-ttu-id="1d87f-294">Zobacz [typów środowiska wykonawczego w odbicia](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-294">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="1d87f-295">
            <see langword="Invoke" /> Metody <paramref name="type" /> nie można odnaleźć.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-295">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="1d87f-296">Obiekt wywołujący nie ma uprawnień do dostępu <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-296">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="1d87f-297">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-297">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="1d87f-298">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-298">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object firstArgument, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object firstArgument, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ firstArgument, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="firstArgument" Type="System.Object" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="1d87f-299">
            <see cref="T:System.Type" /> Delegata do utworzenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-299">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="firstArgument">
          <span data-ttu-id="1d87f-300">Obiekt, z którym jest powiązany delegata, lub <see langword="null" /> traktować <c>metody</c> jako <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-300">The object to which the delegate is bound, or <see langword="null" /> to treat <c>method</c> as <see langword="static" /> (<see langword="Shared" /> in Visual Basic).</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="1d87f-301">
            <see cref="T:System.Reflection.MethodInfo" /> Opisujące statycznych lub metody obiektu delegowanego jest do reprezentowania wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-301">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1d87f-302">Tworzy określonego typu, który reprezentuje określony static lub metody wystąpienia, z określonym pierwszym argumentem delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-302">Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1d87f-303">Delegat określonego typu, który reprezentuje określony static lub metody wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-303">A delegate of the specified type that represents the specified static or instance method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d87f-304">Wywołanie metody przeciążenie tej metody jest odpowiednikiem wywołania <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> przeciążenie metody i określając `true` dla `throwOnBindFailure`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-304">Calling this method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload and specifying `true` for `throwOnBindFailure`.</span></span> <span data-ttu-id="1d87f-305">Te dwa przeciążenia umożliwiają najbardziej elastycznego do tworzenia delegatów.</span><span class="sxs-lookup"><span data-stu-id="1d87f-305">These two overloads provide the most flexible way to create delegates.</span></span> <span data-ttu-id="1d87f-306">Można używać ich do tworzenia delegatów dla statycznych lub metody wystąpienia i opcjonalnie określ pierwszy argument.</span><span class="sxs-lookup"><span data-stu-id="1d87f-306">You can use them to create delegates for either static or instance methods, and optionally to specify the first argument.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d87f-307">Jeśli pierwszy argument nie zostanie podana, użyj <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> przeciążenie metody w celu zapewnienia lepszej wydajności.</span><span class="sxs-lookup"><span data-stu-id="1d87f-307">If you do not supply a first argument, use the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload for better performance.</span></span>  
  
 <span data-ttu-id="1d87f-308">Typ delegata i metody muszą mieć zgodne typy zwracane.</span><span class="sxs-lookup"><span data-stu-id="1d87f-308">The delegate type and the method must have compatible return types.</span></span> <span data-ttu-id="1d87f-309">Oznacza to, że typ zwracany `method` musi być można przypisać do typu zwracanego przez `type`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-309">That is, the return type of `method` must be assignable to the return type of `type`.</span></span>  
  
 <span data-ttu-id="1d87f-310">Jeśli `firstArgument` jest podany, jest on przekazany do `method` za każdym razem, gdy jest wywoływany delegat; `firstArgument` jest nazywany powiązać delegata, i zostanie zamknięty za pośrednictwem jego pierwszym argumentem delegata.</span><span class="sxs-lookup"><span data-stu-id="1d87f-310">If `firstArgument` is supplied, it is passed to `method` every time the delegate is invoked; `firstArgument` is said to be bound to the delegate, and the delegate is said to be closed over its first argument.</span></span> <span data-ttu-id="1d87f-311">Jeśli `method` jest `static` (`Shared` w języku Visual Basic), argument dostarczona podczas wywoływania delegat lista zawiera wszystkie parametry oprócz pierwszego; Jeśli `method` jest metodą wystąpienia `firstArgument` została przekazana do wystąpienia ukryte parametr (reprezentowane przez `this` w języku C# lub przez `Me` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="1d87f-311">If `method` is `static` (`Shared` in Visual Basic), the argument list supplied when invoking the delegate includes all parameters except the first; if `method` is an instance method, then `firstArgument` is passed to the hidden instance parameter (represented by `this` in C#, or by `Me` in Visual Basic).</span></span>  
  
 <span data-ttu-id="1d87f-312">Jeśli `firstArgument` zostanie podany, pierwszy parametr `method` musi być typem referencyjnym, i `firstArgument` muszą być zgodne z danym typem.</span><span class="sxs-lookup"><span data-stu-id="1d87f-312">If `firstArgument` is supplied, the first parameter of `method` must be a reference type, and `firstArgument` must be compatible with that type.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1d87f-313">Jeśli `method` jest `static` (`Shared` w języku Visual Basic) i jej pierwszy parametr jest typu <xref:System.Object> lub <xref:System.ValueType>, następnie `firstArgument` może być typem wartości.</span><span class="sxs-lookup"><span data-stu-id="1d87f-313">If `method` is `static` (`Shared` in Visual Basic) and its first parameter is of type <xref:System.Object> or <xref:System.ValueType>, then `firstArgument` can be a value type.</span></span> <span data-ttu-id="1d87f-314">W takim przypadku `firstArgument` automatycznie jest opakowany.</span><span class="sxs-lookup"><span data-stu-id="1d87f-314">In this case `firstArgument` is automatically boxed.</span></span> <span data-ttu-id="1d87f-315">Automatyczne opakowywanie nie występuje inne argumenty, zgodnie z go w C# lub Visual Basic funkcji wywołać.</span><span class="sxs-lookup"><span data-stu-id="1d87f-315">Automatic boxing does not occur for any other arguments, as it would in a C# or Visual Basic function call.</span></span>  
  
 <span data-ttu-id="1d87f-316">Jeśli `firstArgument` jest odwołanie o wartości null i `method` jest metodą wystąpienia wynik zależy od podpisów typu delegata `type` i `method`:</span><span class="sxs-lookup"><span data-stu-id="1d87f-316">If `firstArgument` is a null reference and `method` is an instance method, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="1d87f-317">Jeśli podpis `type` jawnie zawiera ukryty pierwszy parametr `method`, delegat jest nazywany do reprezentowania metody open wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="1d87f-317">If the signature of `type` explicitly includes the hidden first parameter of `method`, the delegate is said to represent an open instance method.</span></span> <span data-ttu-id="1d87f-318">Po wywołaniu delegat pierwszego argumentu na liście argumentów jest przekazany do parametru ukryte wystąpienia `method`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-318">When the delegate is invoked, the first argument in the argument list is passed to the hidden instance parameter of `method`.</span></span>  
  
-   <span data-ttu-id="1d87f-319">Jeśli sygnatur `method` i `type` zgodne (to znaczy, że wszystkie typy parametrów są zgodne), następnie delegat jest nazywany zostanie zamknięty przez odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="1d87f-319">If the signatures of `method` and `type` match (that is, all parameter types are compatible), then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="1d87f-320">Wywoływanie delegat przypomina na wystąpienie o wartości null, która nie jest szczególnie przydatne etapem podczas wywoływania metody wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="1d87f-320">Invoking the delegate is like calling an instance method on a null instance, which is not a particularly useful thing to do.</span></span>  
  
 <span data-ttu-id="1d87f-321">Jeśli `firstArgument` jest odwołanie o wartości null i `method` jest statyczny, wynik zależy od podpisów typu delegata `type` i `method`:</span><span class="sxs-lookup"><span data-stu-id="1d87f-321">If `firstArgument` is a null reference and `method` is static, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="1d87f-322">Jeśli podpis `method` i `type` zgodne (to znaczy, że wszystkie typy parametrów są zgodne), delegat jest nazywany do reprezentowania statycznej metody open.</span><span class="sxs-lookup"><span data-stu-id="1d87f-322">If the signature of `method` and `type` match (that is, all parameter types are compatible), the delegate is said to represent an open static method.</span></span> <span data-ttu-id="1d87f-323">Dotyczy to najbardziej typowe dla metod statycznych.</span><span class="sxs-lookup"><span data-stu-id="1d87f-323">This is the most common case for static methods.</span></span> <span data-ttu-id="1d87f-324">W takim przypadku nieco lepszą wydajność można uzyskać za pomocą <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> przeciążenie metody.</span><span class="sxs-lookup"><span data-stu-id="1d87f-324">In this case, you can get slightly better performance by using the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span>  
  
-   <span data-ttu-id="1d87f-325">Jeśli podpis `type` zaczyna się od drugiego parametru `method` i pozostałe typy parametrów są niezgodne, a następnie delegat jest nazywany zostanie zamknięty przez odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="1d87f-325">If the signature of `type` begins with the second parameter of `method` and the rest of the parameter types are compatible, then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="1d87f-326">Po wywołaniu delegat odwołanie o wartości null jest przekazywany do pierwszego parametru metody `method`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-326">When the delegate is invoked, a null reference is passed to the first parameter of `method`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d87f-327">Począwszy od [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], ta metoda może służyć do niepublicznego metody dostępu, jeśli element wywołujący zostało udzielone <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> Flaga i jeśli zestaw grant metody niepublicznej jest ograniczone do obiektu wywołującego udzielić zestawu lub być podzbiorem jej.</span><span class="sxs-lookup"><span data-stu-id="1d87f-327">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="1d87f-328">(Zobacz [zagadnienia dotyczące zabezpieczeń dla odbicia](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="1d87f-328">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="1d87f-329">Aby używać tej funkcji, należy docelowy aplikacji [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszym.</span><span class="sxs-lookup"><span data-stu-id="1d87f-329">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="1d87f-330">Zgodne typy parametrów i zwracany typ</span><span class="sxs-lookup"><span data-stu-id="1d87f-330">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="1d87f-331">Typy parametrów i typ zwracany delegata musi być zgodny z typami parametrów i typ zwracany metody, która reprezentuje delegata; typy musi dokładnie odpowiadać.</span><span class="sxs-lookup"><span data-stu-id="1d87f-331">The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d87f-332">W programie .NET Framework w wersji 1.0, 1.1 typy muszą być całkowicie zgodne.</span><span class="sxs-lookup"><span data-stu-id="1d87f-332">In the .NET Framework version 1.0 and 1.1, the types must match exactly.</span></span>  
  
 <span data-ttu-id="1d87f-333">Parametr typu delegata jest zgodny z odpowiadającego mu parametru metody, jeśli typ parametru delegowanego jest bardziej restrykcyjny niż typ parametru metody, ponieważ gwarantuje to, że argument przekazany do delegata można bezpiecznie przekazany do Metoda.</span><span class="sxs-lookup"><span data-stu-id="1d87f-333">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="1d87f-334">Podobnie zwracany typ delegata jest zgodny z typem zwracanym metody, jeśli typ zwracany metody jest bardziej restrykcyjny niż typ zwracany delegata, ponieważ gwarantuje to, że zwracana wartość metody mogą być bezpiecznie rzutowane na zwracany typ e delegata.</span><span class="sxs-lookup"><span data-stu-id="1d87f-334">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="1d87f-335">Na przykład delegata z parametrem typu <xref:System.Collections.Hashtable> i typ zwracany <xref:System.Object> może reprezentować metody z parametrem typu <xref:System.Object> i zwracanej wartości typu <xref:System.Collections.Hashtable>.</span><span class="sxs-lookup"><span data-stu-id="1d87f-335">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
## <a name="determining-the-methods-a-delegate-can-represent"></a><span data-ttu-id="1d87f-336">Określenie metod, które może reprezentować delegat</span><span class="sxs-lookup"><span data-stu-id="1d87f-336">Determining the Methods a Delegate Can Represent</span></span>  
 <span data-ttu-id="1d87f-337">Innym sposobem przydatne Rozważmy elastyczności przez to przeciążenie metody <xref:System.Delegate.CreateDelegate%2A> jest żadnego delegowania danego reprezentują cztery różne kombinacje podpis metody i rodzaj — metoda (statyczne i wystąpienie).</span><span class="sxs-lookup"><span data-stu-id="1d87f-337">Another useful way to think of the flexibility provided by this overload of <xref:System.Delegate.CreateDelegate%2A> is that any given delegate can represent four different combinations of method signature and method kind (static versus instance).</span></span> <span data-ttu-id="1d87f-338">Należy wziąć pod uwagę typ delegata `D` z jednym argumentem typu `C`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-338">Consider a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="1d87f-339">Poniżej opisano metody `D` może reprezentować ignorowanie typ zwracany, ponieważ musi on być zgodny we wszystkich przypadkach:</span><span class="sxs-lookup"><span data-stu-id="1d87f-339">The following describes the methods `D` can represent, ignoring the return type since it must match in all cases:</span></span>  
  
-   <span data-ttu-id="1d87f-340">`D` może reprezentować dowolnej metody wystąpienia, który ma dokładnie jeden argument typu `C`, niezależnie od tego, jakiego typu metody wystąpienia należy.</span><span class="sxs-lookup"><span data-stu-id="1d87f-340">`D` can represent any instance method that has exactly one argument of type `C`, regardless of what type the instance method belongs to.</span></span> <span data-ttu-id="1d87f-341">Gdy <xref:System.Delegate.CreateDelegate%2A> jest nazywany `firstArgument` jest wystąpieniem typu `method` , do której należy i zamknięte przez to wystąpienie wynikowego obiektu delegowanego.</span><span class="sxs-lookup"><span data-stu-id="1d87f-341">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of the type `method` belongs to, and the resulting delegate is said to be closed over that instance.</span></span> <span data-ttu-id="1d87f-342">(Trivially, `D` również może zostać zamknięty przez odwołanie o wartości null, jeśli `firstArgument` jest odwołanie o wartości null.)</span><span class="sxs-lookup"><span data-stu-id="1d87f-342">(Trivially, `D` can also be closed over a null reference if `firstArgument` is a null reference.)</span></span>  
  
-   <span data-ttu-id="1d87f-343">`D` może reprezentować metod wystąpień `C` który nie ma argumentów.</span><span class="sxs-lookup"><span data-stu-id="1d87f-343">`D` can represent an instance method of `C` that has no arguments.</span></span> <span data-ttu-id="1d87f-344">Gdy <xref:System.Delegate.CreateDelegate%2A> jest nazywany `firstArgument` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="1d87f-344">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="1d87f-345">Wynikowa delegata reprezentuje metody Otwórz wystąpienie i wystąpienie `C` musi zostać dostarczona zawsze jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="1d87f-345">The resulting delegate represents an open instance method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="1d87f-346">`D` może reprezentować statyczną metodę, która przyjmuje jeden argument typu `C`, i czy metoda może należeć do dowolnego typu.</span><span class="sxs-lookup"><span data-stu-id="1d87f-346">`D` can represent a static method that takes one argument of type `C`, and that method can belong to any type.</span></span> <span data-ttu-id="1d87f-347">Gdy <xref:System.Delegate.CreateDelegate%2A> jest nazywany `firstArgument` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="1d87f-347">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="1d87f-348">Wynikowa delegata reprezentuje Otwórz metody statycznej i wystąpienie `C` musi zostać dostarczona zawsze jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="1d87f-348">The resulting delegate represents an open static method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="1d87f-349">`D` może reprezentować statyczną metodę, która należy do typu `F` i ma dwa argumenty typu `F` i typu `C`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-349">`D` can represent a static method that belongs to type `F` and has two arguments, of type `F` and type `C`.</span></span> <span data-ttu-id="1d87f-350">Gdy <xref:System.Delegate.CreateDelegate%2A> jest nazywany `firstArgument` jest wystąpieniem `F`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-350">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of `F`.</span></span> <span data-ttu-id="1d87f-351">Wynikowa delegata reprezentuje statyczną metodę, która jest zamknięte przez to wystąpienie `F`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-351">The resulting delegate represents a static method that is closed over that instance of `F`.</span></span> <span data-ttu-id="1d87f-352">Należy pamiętać, że w przypadku gdy `F` i `C` są tego samego typu, metody statycznej ma dwa argumenty typu.</span><span class="sxs-lookup"><span data-stu-id="1d87f-352">Note that in the case where `F` and `C` are the same type, the static method has two arguments of that type.</span></span> <span data-ttu-id="1d87f-353">(W tym przypadku `D` zamknięte przez odwołanie o wartości null, jeśli `firstArgument` jest odwołanie o wartości null.)</span><span class="sxs-lookup"><span data-stu-id="1d87f-353">(In this case, `D` is closed over a null reference if `firstArgument` is a null reference.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1d87f-354">Ta sekcja zawiera trzy przykłady kodu.</span><span class="sxs-lookup"><span data-stu-id="1d87f-354">This section contains three code examples.</span></span> <span data-ttu-id="1d87f-355">Pierwszym przykładzie przedstawiono cztery rodzaje obiektów delegowanych, które mogą być tworzone: zamknięte za pośrednictwem metody wystąpienia, Otwórz za pośrednictwem metody wystąpienia, Otwórz za pośrednictwem metody statycznej i zamknięte za pośrednictwem metody statycznej.</span><span class="sxs-lookup"><span data-stu-id="1d87f-355">The first example demonstrates the four kinds of delegates that can be created: closed over an instance method, open over an instance method, open over a static method, and closed over a static method.</span></span>  
  
 <span data-ttu-id="1d87f-356">Drugi przykład kodu ilustruje zgodność typów parametrów i zwracanych typów.</span><span class="sxs-lookup"><span data-stu-id="1d87f-356">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="1d87f-357">Trzeci przykładowy kod definiuje typ delegata pojedynczego i zawiera wszystkie metody, których typ delegowany może reprezentować.</span><span class="sxs-lookup"><span data-stu-id="1d87f-357">The third code example defines a single delegate type, and shows all the methods that delegate type can represent.</span></span>  
  
 <span data-ttu-id="1d87f-358">**Przykład 1**</span><span class="sxs-lookup"><span data-stu-id="1d87f-358">**Example 1**</span></span>  
  
 <span data-ttu-id="1d87f-359">W poniższym przykładzie kodu pokazano cztery metody delegata mogą być tworzone przy użyciu tego przeciążenia <xref:System.Delegate.CreateDelegate%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="1d87f-359">The following code example demonstrates the four ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d87f-360">Istnieją dwa przeciążenia metody <xref:System.Delegate.CreateDelegate%2A> — metoda, która określa `firstArgument` i <xref:System.Reflection.MethodInfo>; ich funkcji jest taki sam, z wyjątkiem tego, co umożliwia Określ, czy ma być generowany w przypadku niepowodzenia powiązać i innych zawsze zwraca.</span><span class="sxs-lookup"><span data-stu-id="1d87f-360">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="1d87f-361">W tym przykładzie kodu są używane oba przeciążenia.</span><span class="sxs-lookup"><span data-stu-id="1d87f-361">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="1d87f-362">Przykład deklaruje klasy `C` z metodą statyczną `M2` i metody wystąpienia `M1`, i trzech typów delegatów: `D1` przyjmuje wystąpienia `C` i ciąg, `D2` ciągu i `D3`nie ma argumentów.</span><span class="sxs-lookup"><span data-stu-id="1d87f-362">The example declares a class `C` with a static method `M2` and an instance method `M1`, and three delegate types: `D1` takes an instance of `C` and a string, `D2` takes a string, and `D3` has no arguments.</span></span>  
  
 <span data-ttu-id="1d87f-363">Drugiej klasy o nazwie `Example` zawiera kod, który tworzy delegatów.</span><span class="sxs-lookup"><span data-stu-id="1d87f-363">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="1d87f-364">Delegat typu `D2`zamkniętej za pośrednictwem wystąpienia `C`, jest tworzona dla metody wystąpienia `M1`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-364">A delegate of type `D2`, closed over an instance of `C`, is created for the instance method `M1`.</span></span> <span data-ttu-id="1d87f-365">Jest wywoływana z różnych ciągami, wykazała, że wystąpienie powiązania `C` zawsze jest używany.</span><span class="sxs-lookup"><span data-stu-id="1d87f-365">It is invoked with different strings, to show that the bound instance of `C` is always used.</span></span>  
  
-   <span data-ttu-id="1d87f-366">Delegat typu `D1`, reprezentujący metodę otwarte wystąpienia, jest tworzona dla metody wystąpienia `M1`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-366">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="1d87f-367">Wystąpienie musi zostać przekazane podczas wywoływania delegata.</span><span class="sxs-lookup"><span data-stu-id="1d87f-367">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="1d87f-368">Delegat typu `D2`, reprezentujący otwarty metody statycznej, jest tworzona dla metody statycznej `M2`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-368">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
-   <span data-ttu-id="1d87f-369">Na koniec delegowanego typu `D3`, zamknięte przez ciąg, jest tworzona dla metody statycznej `M2`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-369">Finally, a delegate of type `D3`, closed over a string, is created for the static method `M2`.</span></span> <span data-ttu-id="1d87f-370">Metoda wywoływana w celu Pokaż korzysta z ciągu powiązania.</span><span class="sxs-lookup"><span data-stu-id="1d87f-370">The method is invoked to show that it uses the bound string.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="1d87f-371">**Przykład 2**</span><span class="sxs-lookup"><span data-stu-id="1d87f-371">**Example 2**</span></span>  
  
 <span data-ttu-id="1d87f-372">Poniższy przykład kodu ilustruje zgodność typów parametrów i zwracanych typów.</span><span class="sxs-lookup"><span data-stu-id="1d87f-372">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d87f-373">W tym przykładzie kodu używane <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> przeciążenie metody.</span><span class="sxs-lookup"><span data-stu-id="1d87f-373">This code example uses the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span> <span data-ttu-id="1d87f-374">Użyj innych overloads które trwają <xref:System.Reflection.MethodInfo> przypomina.</span><span class="sxs-lookup"><span data-stu-id="1d87f-374">The use of other overloads that take <xref:System.Reflection.MethodInfo> is similar.</span></span>  
  
 <span data-ttu-id="1d87f-375">Przykładowy kod definiuje klasę podstawową o nazwie `Base` i klasę o nazwie `Derived` która pochodzi z `Base`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-375">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="1d87f-376">Klasa pochodna ma `static` (`Shared` w języku Visual Basic) metodę o nazwie `MyMethod` z jednym parametrem typu `Base` i typ zwracany `Derived`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-376">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="1d87f-377">Przykładowy kod definiuje również delegata o nazwie `Example` który ma jeden parametr typu `Derived` i typ zwracany `Base`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-377">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="1d87f-378">Przykład kodu pokazuje, że delegata o nazwie `Example` może służyć do reprezentowania metody `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-378">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="1d87f-379">Metodę można powiązać z delegatem, ponieważ:</span><span class="sxs-lookup"><span data-stu-id="1d87f-379">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="1d87f-380">Typ parametru delegata (`Derived`) jest bardziej restrykcyjny niż typ parametru `MyMethod` (`Base`), dzięki czemu zawsze jest bezpieczne argument pełnomocnika, aby przekazać `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-380">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="1d87f-381">Zwracany typ `MyMethod` (`Derived`) jest bardziej restrykcyjny niż typ parametru delegata (`Base`), dzięki czemu zawsze jest bezpieczne rzutowanie zwracany typ metody na zwracany typ delegata.</span><span class="sxs-lookup"><span data-stu-id="1d87f-381">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="1d87f-382">W przykładowym kodzie nie są generowane żadne dane wyjściowe.</span><span class="sxs-lookup"><span data-stu-id="1d87f-382">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 <span data-ttu-id="1d87f-383">**Przykład 3**</span><span class="sxs-lookup"><span data-stu-id="1d87f-383">**Example 3**</span></span>  
  
 <span data-ttu-id="1d87f-384">Poniższy przykład kodu pokazuje wszystkie metody typu delegata pojedynczego może reprezentować przy użyciu <xref:System.Delegate.CreateDelegate%2A> metody do tworzenia delegatów.</span><span class="sxs-lookup"><span data-stu-id="1d87f-384">The following code example shows all the methods a single delegate type can represent, using the <xref:System.Delegate.CreateDelegate%2A> method to create the delegates.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d87f-385">Istnieją dwa przeciążenia metody <xref:System.Delegate.CreateDelegate%2A> — metoda, która określa `firstArgument` i <xref:System.Reflection.MethodInfo>; ich funkcji jest taki sam, z wyjątkiem tego, co umożliwia Określ, czy ma być generowany w przypadku niepowodzenia powiązać i innych zawsze zwraca.</span><span class="sxs-lookup"><span data-stu-id="1d87f-385">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="1d87f-386">W tym przykładzie kodu są używane oba przeciążenia.</span><span class="sxs-lookup"><span data-stu-id="1d87f-386">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="1d87f-387">Przykład kodu definiuje dwie klasy `C` i `F`, a typem obiektu delegowanego `D` z jednym argumentem typu `C`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-387">The code example defines two classes, `C` and `F`, and a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="1d87f-388">Klasy zawierają zgodnych statyczne i wystąpienie metody `M1`, `M3`, i `M4`, a klasa `C` ma również metody wystąpienia `M2` który nie ma argumentów.</span><span class="sxs-lookup"><span data-stu-id="1d87f-388">The classes have matching static and instance methods `M1`, `M3`, and `M4`, and class `C` also has an instance method `M2` that has no arguments.</span></span>  
  
 <span data-ttu-id="1d87f-389">Innej klasy o nazwie `Example` zawiera kod, który tworzy delegatów.</span><span class="sxs-lookup"><span data-stu-id="1d87f-389">A third class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="1d87f-390">Obiekty delegowane są tworzone dla wystąpienia metody `M1` typu `C` i typu `F`; każdego zostało zamknięte przez wystąpienie odpowiedniego typu.</span><span class="sxs-lookup"><span data-stu-id="1d87f-390">Delegates are created for instance method `M1` of type `C` and type `F`; each is closed over an instance of the respective type.</span></span> <span data-ttu-id="1d87f-391">Metoda `M1` typu `C` Wyświetla `ID` właściwości powiązanej wystąpienia i argumentu.</span><span class="sxs-lookup"><span data-stu-id="1d87f-391">Method `M1` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
-   <span data-ttu-id="1d87f-392">Delegat jest tworzony dla metody `M2` typu `C`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-392">A delegate is created for method `M2` of type `C`.</span></span> <span data-ttu-id="1d87f-393">Jest to pełnomocnika otwartej instancji, w którym argumentu delegata reprezentuje ukryte pierwszy argument dla metody wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="1d87f-393">This is an open instance delegate, in which the argument of the delegate represents the hidden first argument on the instance method.</span></span> <span data-ttu-id="1d87f-394">Metoda nie ma innych argumentów.</span><span class="sxs-lookup"><span data-stu-id="1d87f-394">The method has no other arguments.</span></span> <span data-ttu-id="1d87f-395">Jest to tak, jakby była metodą statyczną.</span><span class="sxs-lookup"><span data-stu-id="1d87f-395">It is called as if it were a static method.</span></span>  
  
-   <span data-ttu-id="1d87f-396">Obiekty delegowane są tworzone dla metody statycznej `M3` typu `C` i typu `F`; są one otwarte statycznych obiektów delegowanych.</span><span class="sxs-lookup"><span data-stu-id="1d87f-396">Delegates are created for static method `M3` of type `C` and type `F`; these are open static delegates.</span></span>  
  
-   <span data-ttu-id="1d87f-397">Na koniec delegatów są tworzone dla metody statycznej `M4` typu `C` i typu `F`; każda metoda ma typ deklarujący jako pierwszego argumentu i wystąpienie typu został podany, więc delegatów są zamykane za pośrednictwem ich pierwszym argumentów .</span><span class="sxs-lookup"><span data-stu-id="1d87f-397">Finally, delegates are created for static method `M4` of type `C` and type `F`; each method has the declaring type as its first argument, and an instance of the type is supplied, so the delegates are closed over their first arguments.</span></span> <span data-ttu-id="1d87f-398">Metoda `M4` typu `C` Wyświetla `ID` właściwości powiązanej wystąpienia i argumentu.</span><span class="sxs-lookup"><span data-stu-id="1d87f-398">Method `M4` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1d87f-399">
            <paramref name="type" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-399">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1d87f-400">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-400">-or-</span>
          </span>
          <span data-ttu-id="1d87f-401">
            <paramref name="method" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-401">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1d87f-402">
            <paramref name="type" /> nie dziedziczy <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-402">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="1d87f-403">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-403">-or-</span>
          </span>
          <span data-ttu-id="1d87f-404">
            <paramref name="type" /> nie jest <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-404">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="1d87f-405">Zobacz [typów środowiska wykonawczego w odbicia](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-405">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="1d87f-406">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-406">-or-</span>
          </span>
          <span data-ttu-id="1d87f-407">
            <paramref name="method" /> Nie można powiązać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-407">
              <paramref name="method" /> cannot be bound.</span>
          </span>
          <span data-ttu-id="1d87f-408">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-408">-or-</span>
          </span>
          <span data-ttu-id="1d87f-409">
            <paramref name="method" /> nie jest <see langword="RuntimeMethodInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-409">
              <paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span>
          </span>
          <span data-ttu-id="1d87f-410">Zobacz [typów środowiska wykonawczego w odbicia](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-410">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="1d87f-411">
            <see langword="Invoke" /> Metody <paramref name="type" /> nie można odnaleźć.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-411">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="1d87f-412">Obiekt wywołujący nie ma uprawnień do dostępu <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-412">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="1d87f-413">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-413">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="1d87f-414">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-414">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ target, System::String ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="1d87f-415">
            <see cref="T:System.Type" /> Delegata do utworzenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-415">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="1d87f-416">Wystąpienie klasy, w którym <c>metoda</c> jest wywoływana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-416">The class instance on which <c>method</c> is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="1d87f-417">Nazwa metody wystąpienia, która ma reprezentować delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-417">The name of the instance method that the delegate is to represent.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1d87f-418">Tworzy delegata określonego typu, który reprezentuje określone wystąpienie metody w wystąpieniu określonej klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-418">Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1d87f-419">Delegat określonego typu, który reprezentuje określone wystąpienie metody w wystąpieniu określonej klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-419">A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d87f-420">Ta metoda tworzy delegatów na przykład tylko metody.</span><span class="sxs-lookup"><span data-stu-id="1d87f-420">This method creates delegates for instance methods only.</span></span> <span data-ttu-id="1d87f-421">Metoda wystąpienia to metoda, która jest skojarzona z wystąpieniem klasy, natomiast metoda statyczna jest skojarzona z samą klasą.</span><span class="sxs-lookup"><span data-stu-id="1d87f-421">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="1d87f-422">Przeciążenie tej metody jest odpowiednikiem wywołania <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> przeciążenia metody, określając `false` dla `ignoreCase` i `true` dla `throwOnBindFailure`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-422">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `false` for `ignoreCase` and `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d87f-423">Począwszy od [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], ta metoda może służyć do niepublicznego metody dostępu, jeśli element wywołujący zostało udzielone <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> Flaga i jeśli zestaw grant metody niepublicznej jest ograniczone do obiektu wywołującego udzielić zestawu lub być podzbiorem jej.</span><span class="sxs-lookup"><span data-stu-id="1d87f-423">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="1d87f-424">(Zobacz [zagadnienia dotyczące zabezpieczeń dla odbicia](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="1d87f-424">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="1d87f-425">Aby używać tej funkcji, należy docelowy aplikacji [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszym.</span><span class="sxs-lookup"><span data-stu-id="1d87f-425">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1d87f-426">
            <paramref name="type" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-426">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1d87f-427">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-427">-or-</span>
          </span>
          <span data-ttu-id="1d87f-428">
            <paramref name="target" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-428">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1d87f-429">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-429">-or-</span>
          </span>
          <span data-ttu-id="1d87f-430">
            <paramref name="method" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-430">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1d87f-431">
            <paramref name="type" /> nie dziedziczy <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-431">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="1d87f-432">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-432">-or-</span>
          </span>
          <span data-ttu-id="1d87f-433">
            <paramref name="type" /> nie jest <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-433">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="1d87f-434">Zobacz [typów środowiska wykonawczego w odbicia](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-434">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="1d87f-435">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-435">-or-</span>
          </span>
          <span data-ttu-id="1d87f-436">
            <paramref name="method" /> nie jest metodą wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-436">
              <paramref name="method" /> is not an instance method.</span>
          </span>
          <span data-ttu-id="1d87f-437">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-437">-or-</span>
          </span>
          <span data-ttu-id="1d87f-438">
            <paramref name="method" /> Nie można powiązać, np. ponieważ nie można odnaleźć.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-438">
              <paramref name="method" /> cannot be bound, for example because it cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="1d87f-439">
            <see langword="Invoke" /> Metody <paramref name="type" /> nie można odnaleźć.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-439">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="1d87f-440">Obiekt wywołujący nie ma uprawnień do dostępu <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-440">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="1d87f-441">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-441">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="1d87f-442">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-442">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, System.Reflection.MethodInfo method, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Reflection.MethodInfo method, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Reflection::MethodInfo ^ method, bool throwOnBindFailure);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="1d87f-443">
            <see cref="T:System.Type" /> Delegata do utworzenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-443">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="1d87f-444">
            <see cref="T:System.Reflection.MethodInfo" /> Opisujące statycznych lub metody obiektu delegowanego jest do reprezentowania wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-444">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span>
          </span>
        </param>
        <param name="throwOnBindFailure">
          <span data-ttu-id="1d87f-445">
            <see langword="true" /> Aby zgłosić wyjątek, jeśli <c>metody</c> nie może być powiązane; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-445">
              <see langword="true" /> to throw an exception if <c>method</c> cannot be bound; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1d87f-446">Tworzy określonego typu do reprezentowania określonej metody statycznej z określonego zachowania w przypadku awarii można powiązać delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-446">Creates a delegate of the specified type to represent the specified static method, with the specified behavior on failure to bind.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1d87f-447">Delegat określonego typu do reprezentowania określonej metody statycznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-447">A delegate of the specified type to represent the specified static method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d87f-448">Przeciążenie tej metody można utworzyć delegatów Otwórz metody statycznej i otwórz wystąpienie metody delegatów — to znaczy delegatów, które udostępniają ukryte pierwszego argumentu wystąpienia metody.</span><span class="sxs-lookup"><span data-stu-id="1d87f-448">This method overload can create open static method delegates and open instance method delegates — that is, delegates that expose the hidden first argument of instance methods.</span></span> <span data-ttu-id="1d87f-449">Aby uzyskać szczegółowy opis, zobacz więcej ogólnych <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> przeciążenie metody, dzięki czemu można na przykład utworzyć wszystkie kombinacje delegatów open lub closed lub metod statycznych.</span><span class="sxs-lookup"><span data-stu-id="1d87f-449">For a detailed explanation, see the more general <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload, which allows you to create all combinations of open or closed delegates for instance or static methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d87f-450">Przeciążenie tej metody należy użyć podczas delegat nie zostaną zamknięte za pośrednictwem pierwszego argumentu, ponieważ jest nieco szybszy w takim przypadku.</span><span class="sxs-lookup"><span data-stu-id="1d87f-450">This method overload should be used when the delegate is not closed over its first argument, because it is somewhat faster in that case.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d87f-451">Począwszy od [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], ta metoda może służyć do niepublicznego metody dostępu, jeśli element wywołujący zostało udzielone <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> Flaga i jeśli zestaw grant metody niepublicznej jest ograniczone do obiektu wywołującego udzielić zestawu lub być podzbiorem jej.</span><span class="sxs-lookup"><span data-stu-id="1d87f-451">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="1d87f-452">(Zobacz [zagadnienia dotyczące zabezpieczeń dla odbicia](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="1d87f-452">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="1d87f-453">Aby używać tej funkcji, należy docelowy aplikacji [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszym.</span><span class="sxs-lookup"><span data-stu-id="1d87f-453">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="1d87f-454">Zgodne typy parametrów i zwracany typ</span><span class="sxs-lookup"><span data-stu-id="1d87f-454">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="1d87f-455">Typy parametrów i typ zwracany delegata musi być zgodny z typami parametrów i typ zwracany metody, która reprezentuje delegata; typy musi dokładnie odpowiadać.</span><span class="sxs-lookup"><span data-stu-id="1d87f-455">The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d87f-456">W programie .NET Framework w wersji 1.0, 1.1 typy muszą być całkowicie zgodne.</span><span class="sxs-lookup"><span data-stu-id="1d87f-456">In the .NET Framework version 1.0 and 1.1, the types must match exactly.</span></span>  
  
 <span data-ttu-id="1d87f-457">Parametr typu delegata jest zgodny z odpowiadającego mu parametru metody, jeśli typ parametru delegowanego jest bardziej restrykcyjny niż typ parametru metody, ponieważ gwarantuje to, że argument przekazany do delegata można bezpiecznie przekazany do Metoda.</span><span class="sxs-lookup"><span data-stu-id="1d87f-457">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="1d87f-458">Podobnie zwracany typ delegata jest zgodny z typem zwracanym metody, jeśli typ zwracany metody jest bardziej restrykcyjny niż typ zwracany delegata, ponieważ gwarantuje to, że zwracana wartość metody mogą być bezpiecznie rzutowane na zwracany typ e delegata.</span><span class="sxs-lookup"><span data-stu-id="1d87f-458">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="1d87f-459">Na przykład delegata z parametrem typu <xref:System.Collections.Hashtable> i typ zwracany <xref:System.Object> może reprezentować metody z parametrem typu <xref:System.Object> i zwracanej wartości typu <xref:System.Collections.Hashtable>.</span><span class="sxs-lookup"><span data-stu-id="1d87f-459">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1d87f-460">Ten rozdział zawiera dwa przykłady kodu.</span><span class="sxs-lookup"><span data-stu-id="1d87f-460">This section contains two code examples.</span></span> <span data-ttu-id="1d87f-461">W pierwszym przykładzie pokazano dwa rodzaje obiektów delegowanych, które mogą być tworzone za pomocą tego przeciążenia metody: Otwórz za pośrednictwem metody wystąpienia a za pośrednictwem metody statycznej.</span><span class="sxs-lookup"><span data-stu-id="1d87f-461">The first example demonstrates the two kinds of delegates that can be created with this method overload: open over an instance method and open over a static method.</span></span>  
  
 <span data-ttu-id="1d87f-462">Drugi przykład kodu ilustruje zgodność typów parametrów i zwracanych typów.</span><span class="sxs-lookup"><span data-stu-id="1d87f-462">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="1d87f-463">**Przykład 1**</span><span class="sxs-lookup"><span data-stu-id="1d87f-463">**Example 1**</span></span>  
  
 <span data-ttu-id="1d87f-464">W poniższym przykładzie kodu pokazano dwa sposoby delegata mogą być tworzone przy użyciu tego przeciążenia <xref:System.Delegate.CreateDelegate%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="1d87f-464">The following code example demonstrates the two ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d87f-465">Istnieją dwa przeciążenia metody <xref:System.Delegate.CreateDelegate%2A> — metoda, która określa <xref:System.Reflection.MethodInfo> , ale pierwszy argument; ich funkcji jest taki sam, z wyjątkiem tego, co umożliwia Określ, czy ma być generowany w przypadku niepowodzenia powiązać i innych zawsze zwraca.</span><span class="sxs-lookup"><span data-stu-id="1d87f-465">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify a <xref:System.Reflection.MethodInfo> but not a first argument; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="1d87f-466">W tym przykładzie kodu są używane oba przeciążenia.</span><span class="sxs-lookup"><span data-stu-id="1d87f-466">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="1d87f-467">Przykład deklaruje klasy `C` z metodą statyczną `M2` i metody wystąpienia `M1`, i delegowanie dwa typy: `D1` przyjmuje wystąpienia `C` i ciąg, i `D2` ciąg znaków.</span><span class="sxs-lookup"><span data-stu-id="1d87f-467">The example declares a class `C` with a static method `M2` and an instance method `M1`, and two delegate types: `D1` takes an instance of `C` and a string, and `D2` takes a string.</span></span>  
  
 <span data-ttu-id="1d87f-468">Drugiej klasy o nazwie `Example` zawiera kod, który tworzy delegatów.</span><span class="sxs-lookup"><span data-stu-id="1d87f-468">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="1d87f-469">Delegat typu `D1`, reprezentujący metodę otwarte wystąpienia, jest tworzona dla metody wystąpienia `M1`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-469">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="1d87f-470">Wystąpienie musi zostać przekazane podczas wywoływania delegata.</span><span class="sxs-lookup"><span data-stu-id="1d87f-470">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="1d87f-471">Delegat typu `D2`, reprezentujący otwarty metody statycznej, jest tworzona dla metody statycznej `M2`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-471">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="1d87f-472">**Przykład 2**</span><span class="sxs-lookup"><span data-stu-id="1d87f-472">**Example 2**</span></span>  
  
 <span data-ttu-id="1d87f-473">Poniższy przykład kodu ilustruje zgodność typów parametrów i zwracanych typów.</span><span class="sxs-lookup"><span data-stu-id="1d87f-473">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d87f-474">W tym przykładzie kodu używane <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> przeciążenie metody.</span><span class="sxs-lookup"><span data-stu-id="1d87f-474">This code example uses the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span> <span data-ttu-id="1d87f-475">Użyj innych overloads które trwają <xref:System.Reflection.MethodInfo> przypomina.</span><span class="sxs-lookup"><span data-stu-id="1d87f-475">The use of other overloads that take <xref:System.Reflection.MethodInfo> is similar.</span></span>  
  
 <span data-ttu-id="1d87f-476">Przykładowy kod definiuje klasę podstawową o nazwie `Base` i klasę o nazwie `Derived` która pochodzi z `Base`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-476">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="1d87f-477">Klasa pochodna ma `static` (`Shared` w języku Visual Basic) metodę o nazwie `MyMethod` z jednym parametrem typu `Base` i typ zwracany `Derived`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-477">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="1d87f-478">Przykładowy kod definiuje również delegata o nazwie `Example` który ma jeden parametr typu `Derived` i typ zwracany `Base`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-478">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="1d87f-479">Przykład kodu pokazuje, że delegata o nazwie `Example` może służyć do reprezentowania metody `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-479">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="1d87f-480">Metodę można powiązać z delegatem, ponieważ:</span><span class="sxs-lookup"><span data-stu-id="1d87f-480">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="1d87f-481">Typ parametru delegata (`Derived`) jest bardziej restrykcyjny niż typ parametru `MyMethod` (`Base`), dzięki czemu zawsze jest bezpieczne argument pełnomocnika, aby przekazać `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-481">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="1d87f-482">Zwracany typ `MyMethod` (`Derived`) jest bardziej restrykcyjny niż typ parametru delegata (`Base`), dzięki czemu zawsze jest bezpieczne rzutowanie zwracany typ metody na zwracany typ delegata.</span><span class="sxs-lookup"><span data-stu-id="1d87f-482">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="1d87f-483">W przykładowym kodzie nie są generowane żadne dane wyjściowe.</span><span class="sxs-lookup"><span data-stu-id="1d87f-483">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1d87f-484">
            <paramref name="type" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-484">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1d87f-485">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-485">-or-</span>
          </span>
          <span data-ttu-id="1d87f-486">
            <paramref name="method" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-486">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1d87f-487">
            <paramref name="type" /> nie dziedziczy <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-487">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="1d87f-488">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-488">-or-</span>
          </span>
          <span data-ttu-id="1d87f-489">
            <paramref name="type" /> nie jest <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-489">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="1d87f-490">Zobacz [typów środowiska wykonawczego w odbicia](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-490">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="1d87f-491">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-491">-or-</span>
          </span>
          <span data-ttu-id="1d87f-492">
            <paramref name="method" /> Nie można powiązać, i <paramref name="throwOnBindFailure" /> jest <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-492">
              <paramref name="method" /> cannot be bound, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="1d87f-493">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-493">-or-</span>
          </span>
          <span data-ttu-id="1d87f-494">
            <paramref name="method" /> nie jest <see langword="RuntimeMethodInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-494">
              <paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span>
          </span>
          <span data-ttu-id="1d87f-495">Zobacz [typów środowiska wykonawczego w odbicia](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-495">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="1d87f-496">
            <see langword="Invoke" /> Metody <paramref name="type" /> nie można odnaleźć.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-496">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="1d87f-497">Obiekt wywołujący nie ma uprawnień do dostępu <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-497">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="1d87f-498">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-498">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="1d87f-499">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-499">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, Type target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Type target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, Type ^ target, System::String ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Type" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="1d87f-500">
            <see cref="T:System.Type" /> Delegata do utworzenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-500">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="1d87f-501">
            <see cref="T:System.Type" /> Reprezentujący klasę, która implementuje <c>metody</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-501">The <see cref="T:System.Type" /> representing the class that implements <c>method</c>.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="1d87f-502">Nazwa statyczną metodę, która ma reprezentować delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-502">The name of the static method that the delegate is to represent.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1d87f-503">Tworzy delegata określonego typu, który reprezentuje określonej metody statycznej określonej klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-503">Creates a delegate of the specified type that represents the specified static method of the specified class.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1d87f-504">Delegat określonego typu, który reprezentuje określonej metody statycznej określonej klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-504">A delegate of the specified type that represents the specified static method of the specified class.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d87f-505">Ta metoda tworzy delegatów tylko metody statyczne.</span><span class="sxs-lookup"><span data-stu-id="1d87f-505">This method creates delegates for static methods only.</span></span> <span data-ttu-id="1d87f-506">Metoda wystąpienia to metoda, która jest skojarzona z wystąpieniem klasy, natomiast metoda statyczna jest skojarzona z samą klasą.</span><span class="sxs-lookup"><span data-stu-id="1d87f-506">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="1d87f-507">Przeciążenie tej metody jest odpowiednikiem wywołania <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> przeciążenia metody, określając `false` dla `ignoreCase` i `true` dla `throwOnBindFailure`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-507">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `false` for `ignoreCase` and `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d87f-508">Począwszy od [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], ta metoda może służyć do niepublicznego metody dostępu, jeśli element wywołujący zostało udzielone <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> Flaga i jeśli zestaw grant metody niepublicznej jest ograniczone do obiektu wywołującego udzielić zestawu lub być podzbiorem jej.</span><span class="sxs-lookup"><span data-stu-id="1d87f-508">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="1d87f-509">(Zobacz [zagadnienia dotyczące zabezpieczeń dla odbicia](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="1d87f-509">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="1d87f-510">Aby używać tej funkcji, należy docelowy aplikacji [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszym.</span><span class="sxs-lookup"><span data-stu-id="1d87f-510">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1d87f-511">
            <paramref name="type" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-511">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1d87f-512">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-512">-or-</span>
          </span>
          <span data-ttu-id="1d87f-513">
            <paramref name="target" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-513">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1d87f-514">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-514">-or-</span>
          </span>
          <span data-ttu-id="1d87f-515">
            <paramref name="method" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-515">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1d87f-516">
            <paramref name="type" /> nie dziedziczy <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-516">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="1d87f-517">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-517">-or-</span>
          </span>
          <span data-ttu-id="1d87f-518">
            <paramref name="type" /> nie jest <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-518">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="1d87f-519">Zobacz [typów środowiska wykonawczego w odbicia](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-519">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="1d87f-520">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-520">-or-</span>
          </span>
          <span data-ttu-id="1d87f-521">
            <paramref name="target" /> nie jest <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-521">
              <paramref name="target" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="1d87f-522">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-522">-or-</span>
          </span>
          <span data-ttu-id="1d87f-523">
            <paramref name="target" /> jest to otwarty typ ogólny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-523">
              <paramref name="target" /> is an open generic type.</span>
          </span>
          <span data-ttu-id="1d87f-524">Oznacza to, że jego <see cref="P:System.Type.ContainsGenericParameters" /> jest właściwość <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-524">That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="1d87f-525">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-525">-or-</span>
          </span>
          <span data-ttu-id="1d87f-526">
            <paramref name="method" /> nie jest <see langword="static" /> — metoda (<see langword="Shared" /> metody w języku Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-526">
              <paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).</span>
          </span>
          <span data-ttu-id="1d87f-527">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-527">-or-</span>
          </span>
          <span data-ttu-id="1d87f-528">
            <paramref name="method" /> Nie można powiązać, np. ponieważ nie można odnaleźć, i <paramref name="throwOnBindFailure" /> jest <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-528">
              <paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="1d87f-529">
            <see langword="Invoke" /> Metody <paramref name="type" /> nie można odnaleźć.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-529">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="1d87f-530">Obiekt wywołujący nie ma uprawnień do dostępu <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-530">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="1d87f-531">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-531">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="1d87f-532">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-532">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object firstArgument, System.Reflection.MethodInfo method, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object firstArgument, class System.Reflection.MethodInfo method, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ firstArgument, System::Reflection::MethodInfo ^ method, bool throwOnBindFailure);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="firstArgument" Type="System.Object" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="1d87f-533">A <see cref="T:System.Type" /> reprezentujący typ delegata do utworzenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-533">A <see cref="T:System.Type" /> representing the type of delegate to create.</span>
          </span>
        </param>
        <param name="firstArgument">
          <span data-ttu-id="1d87f-534">
            <see cref="T:System.Object" /> Oznacza to pierwszy argument metody reprezentuje delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-534">An <see cref="T:System.Object" /> that is the first argument of the method the delegate represents.</span>
          </span>
          <span data-ttu-id="1d87f-535">Dla wystąpienia metody, musi ona zgodna z typem wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-535">For instance methods, it must be compatible with the instance type.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="1d87f-536">
            <see cref="T:System.Reflection.MethodInfo" /> Opisujące statycznych lub metody obiektu delegowanego jest do reprezentowania wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-536">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span>
          </span>
        </param>
        <param name="throwOnBindFailure">
          <span data-ttu-id="1d87f-537">
            <see langword="true" /> Aby zgłosić wyjątek, jeśli <c>metody</c> nie może być powiązane; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-537">
              <see langword="true" /> to throw an exception if <c>method</c> cannot be bound; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1d87f-538">Tworzy określonego typu, który reprezentuje określony static lub metody wystąpienia, z określonym pierwszy argument i określonego zachowania w przypadku awarii można powiązać delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-538">Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument and the specified behavior on failure to bind.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1d87f-539">Delegat określony typ, który reprezentuje określony static lub metody wystąpienia lub <see langword="null" /> Jeśli <paramref name="throwOnBindFailure" /> jest <see langword="false" /> i nie można powiązać delegata z <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-539">A delegate of the specified type that represents the specified static or instance method, or <see langword="null" /> if <paramref name="throwOnBindFailure" /> is <see langword="false" /> and the delegate cannot be bound to <paramref name="method" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d87f-540">To przeciążenie metody i <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> przeciążenie metody, która zawsze zgłoszenie błędu można powiązać, podaj najbardziej elastyczny sposób do tworzenia delegatów.</span><span class="sxs-lookup"><span data-stu-id="1d87f-540">This method overload and the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> method overload, which always throws on failure to bind, provide the most flexible way to create delegates.</span></span> <span data-ttu-id="1d87f-541">Służy ich do tworzenia delegatów dla statycznych lub metody wystąpienia, z lub bez pierwszy argument.</span><span class="sxs-lookup"><span data-stu-id="1d87f-541">You can use them to create delegates for either static or instance methods, with or without a first argument.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d87f-542">Jeśli pierwszy argument nie zostanie podana, użyj <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> przeciążenie metody w celu zapewnienia lepszej wydajności.</span><span class="sxs-lookup"><span data-stu-id="1d87f-542">If you do not supply a first argument, use the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload for better performance.</span></span>  
  
 <span data-ttu-id="1d87f-543">Typ delegata i metody muszą mieć zgodne typy zwracane.</span><span class="sxs-lookup"><span data-stu-id="1d87f-543">The delegate type and the method must have compatible return types.</span></span> <span data-ttu-id="1d87f-544">Oznacza to, że typ zwracany `method` musi być można przypisać do typu zwracanego przez `type`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-544">That is, the return type of `method` must be assignable to the return type of `type`.</span></span>  
  
 <span data-ttu-id="1d87f-545">Jeśli `firstArgument` jest podany, jest on przekazany do `method` za każdym razem, gdy jest wywoływany delegat; `firstArgument` jest nazywany powiązać delegata, i zostanie zamknięty za pośrednictwem jego pierwszym argumentem delegata.</span><span class="sxs-lookup"><span data-stu-id="1d87f-545">If `firstArgument` is supplied, it is passed to `method` every time the delegate is invoked; `firstArgument` is said to be bound to the delegate, and the delegate is said to be closed over its first argument.</span></span> <span data-ttu-id="1d87f-546">Jeśli `method` jest `static` (`Shared` w języku Visual Basic), argument dostarczona podczas wywoływania delegat lista zawiera wszystkie parametry oprócz pierwszego; Jeśli `method` jest metodą wystąpienia `firstArgument` została przekazana do wystąpienia ukryte parametr (reprezentowane przez `this` w języku C# lub przez `Me` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="1d87f-546">If `method` is `static` (`Shared` in Visual Basic), the argument list supplied when invoking the delegate includes all parameters except the first; if `method` is an instance method, then `firstArgument` is passed to the hidden instance parameter (represented by `this` in C#, or by `Me` in Visual Basic).</span></span>  
  
 <span data-ttu-id="1d87f-547">Jeśli `firstArgument` zostanie podany, pierwszy parametr `method` musi być typem referencyjnym, i `firstArgument` muszą być zgodne z danym typem.</span><span class="sxs-lookup"><span data-stu-id="1d87f-547">If `firstArgument` is supplied, the first parameter of `method` must be a reference type, and `firstArgument` must be compatible with that type.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1d87f-548">Jeśli `method` jest `static` (`Shared` w języku Visual Basic) i jej pierwszy parametr jest typu <xref:System.Object> lub <xref:System.ValueType>, następnie `firstArgument` może być typem wartości.</span><span class="sxs-lookup"><span data-stu-id="1d87f-548">If `method` is `static` (`Shared` in Visual Basic) and its first parameter is of type <xref:System.Object> or <xref:System.ValueType>, then `firstArgument` can be a value type.</span></span> <span data-ttu-id="1d87f-549">W takim przypadku `firstArgument` automatycznie jest opakowany.</span><span class="sxs-lookup"><span data-stu-id="1d87f-549">In this case `firstArgument` is automatically boxed.</span></span> <span data-ttu-id="1d87f-550">Automatyczne opakowywanie nie występuje inne argumenty, zgodnie z go w C# lub Visual Basic funkcji wywołać.</span><span class="sxs-lookup"><span data-stu-id="1d87f-550">Automatic boxing does not occur for any other arguments, as it would in a C# or Visual Basic function call.</span></span>  
  
 <span data-ttu-id="1d87f-551">Jeśli `firstArgument` jest odwołanie o wartości null i `method` jest metodą wystąpienia wynik zależy od podpisów typu delegata `type` i `method`:</span><span class="sxs-lookup"><span data-stu-id="1d87f-551">If `firstArgument` is a null reference and `method` is an instance method, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="1d87f-552">Jeśli podpis `type` jawnie zawiera ukryty pierwszy parametr `method`, delegat jest nazywany do reprezentowania metody open wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="1d87f-552">If the signature of `type` explicitly includes the hidden first parameter of `method`, the delegate is said to represent an open instance method.</span></span> <span data-ttu-id="1d87f-553">Po wywołaniu delegat pierwszego argumentu na liście argumentów jest przekazany do parametru ukryte wystąpienia `method`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-553">When the delegate is invoked, the first argument in the argument list is passed to the hidden instance parameter of `method`.</span></span>  
  
-   <span data-ttu-id="1d87f-554">Jeśli sygnatur `method` i `type` zgodne (to znaczy, że wszystkie typy parametrów są zgodne), następnie delegat jest nazywany zostanie zamknięty przez odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="1d87f-554">If the signatures of `method` and `type` match (that is, all parameter types are compatible), then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="1d87f-555">Wywoływanie delegat przypomina na wystąpienie o wartości null, która nie jest szczególnie przydatne etapem podczas wywoływania metody wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="1d87f-555">Invoking the delegate is like calling an instance method on a null instance, which is not a particularly useful thing to do.</span></span>  
  
 <span data-ttu-id="1d87f-556">Jeśli `firstArgument` jest odwołanie o wartości null i `method` jest statyczny, wynik zależy od podpisów typu delegata `type` i `method`:</span><span class="sxs-lookup"><span data-stu-id="1d87f-556">If `firstArgument` is a null reference and `method` is static, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="1d87f-557">Jeśli podpis `method` i `type` zgodne (to znaczy, że wszystkie typy parametrów są zgodne), delegat jest nazywany do reprezentowania statycznej metody open.</span><span class="sxs-lookup"><span data-stu-id="1d87f-557">If the signature of `method` and `type` match (that is, all parameter types are compatible), the delegate is said to represent an open static method.</span></span> <span data-ttu-id="1d87f-558">Dotyczy to najbardziej typowe dla metod statycznych.</span><span class="sxs-lookup"><span data-stu-id="1d87f-558">This is the most common case for static methods.</span></span> <span data-ttu-id="1d87f-559">W takim przypadku nieco lepszą wydajność można uzyskać za pomocą <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> przeciążenie metody.</span><span class="sxs-lookup"><span data-stu-id="1d87f-559">In this case, you can get slightly better performance by using the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload.</span></span>  
  
-   <span data-ttu-id="1d87f-560">Jeśli podpis `type` zaczyna się od drugiego parametru `method` i pozostałe typy parametrów są niezgodne, a następnie delegat jest nazywany zostanie zamknięty przez odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="1d87f-560">If the signature of `type` begins with the second parameter of `method` and the rest of the parameter types are compatible, then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="1d87f-561">Po wywołaniu delegat odwołanie o wartości null jest przekazywany do pierwszego parametru metody `method`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-561">When the delegate is invoked, a null reference is passed to the first parameter of `method`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d87f-562">Począwszy od [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], ta metoda może służyć do niepublicznego metody dostępu, jeśli element wywołujący zostało udzielone <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> Flaga i jeśli zestaw grant metody niepublicznej jest ograniczone do obiektu wywołującego udzielić zestawu lub być podzbiorem jej.</span><span class="sxs-lookup"><span data-stu-id="1d87f-562">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="1d87f-563">(Zobacz [zagadnienia dotyczące zabezpieczeń dla odbicia](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="1d87f-563">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="1d87f-564">Aby używać tej funkcji, należy docelowy aplikacji [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszym.</span><span class="sxs-lookup"><span data-stu-id="1d87f-564">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="1d87f-565">Zgodne typy parametrów i zwracany typ</span><span class="sxs-lookup"><span data-stu-id="1d87f-565">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="1d87f-566">Typy parametrów i typ zwracany delegata musi być zgodny z typami parametrów i typ zwracany metody, która reprezentuje delegata; typy musi dokładnie odpowiadać.</span><span class="sxs-lookup"><span data-stu-id="1d87f-566">The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d87f-567">W programie .NET Framework w wersji 1.0, 1.1 typy muszą być całkowicie zgodne.</span><span class="sxs-lookup"><span data-stu-id="1d87f-567">In the .NET Framework version 1.0 and 1.1 the types must match exactly.</span></span>  
  
 <span data-ttu-id="1d87f-568">Parametr typu delegata jest zgodny z odpowiadającego mu parametru metody, jeśli typ parametru delegowanego jest bardziej restrykcyjny niż typ parametru metody, ponieważ gwarantuje to, że argument przekazany do delegata można bezpiecznie przekazany do Metoda.</span><span class="sxs-lookup"><span data-stu-id="1d87f-568">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="1d87f-569">Podobnie zwracany typ delegata jest zgodny z typem zwracanym metody, jeśli typ zwracany metody jest bardziej restrykcyjny niż typ zwracany delegata, ponieważ gwarantuje to, że zwracana wartość metody mogą być bezpiecznie rzutowane na zwracany typ e delegata.</span><span class="sxs-lookup"><span data-stu-id="1d87f-569">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="1d87f-570">Na przykład delegata z parametrem typu <xref:System.Collections.Hashtable> i typ zwracany <xref:System.Object> może reprezentować metody z parametrem typu <xref:System.Object> i zwracanej wartości typu <xref:System.Collections.Hashtable>.</span><span class="sxs-lookup"><span data-stu-id="1d87f-570">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
## <a name="determining-the-methods-a-delegate-can-represent"></a><span data-ttu-id="1d87f-571">Określenie metod, które może reprezentować delegat</span><span class="sxs-lookup"><span data-stu-id="1d87f-571">Determining the Methods a Delegate Can Represent</span></span>  
 <span data-ttu-id="1d87f-572">Innym sposobem przydatne Rozważmy elastyczności przez to przeciążenie metody <xref:System.Delegate.CreateDelegate%2A> jest żadnego delegowania danego reprezentują cztery różne kombinacje podpis metody i rodzaj — metoda (statyczne i wystąpienie).</span><span class="sxs-lookup"><span data-stu-id="1d87f-572">Another useful way to think of the flexibility provided by this overload of <xref:System.Delegate.CreateDelegate%2A> is that any given delegate can represent four different combinations of method signature and method kind (static versus instance).</span></span> <span data-ttu-id="1d87f-573">Należy wziąć pod uwagę typ delegata `D` z jednym argumentem typu `C`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-573">Consider a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="1d87f-574">Poniżej opisano metody `D` może reprezentować ignorowanie typ zwracany, ponieważ musi on być zgodny we wszystkich przypadkach:</span><span class="sxs-lookup"><span data-stu-id="1d87f-574">The following describes the methods `D` can represent, ignoring the return type since it must match in all cases:</span></span>  
  
-   <span data-ttu-id="1d87f-575">`D` może reprezentować dowolnej metody wystąpienia, który ma dokładnie jeden argument typu `C`, niezależnie od tego, jakiego typu metody wystąpienia należy.</span><span class="sxs-lookup"><span data-stu-id="1d87f-575">`D` can represent any instance method that has exactly one argument of type `C`, regardless of what type the instance method belongs to.</span></span> <span data-ttu-id="1d87f-576">Gdy <xref:System.Delegate.CreateDelegate%2A> jest nazywany `firstArgument` jest wystąpieniem typu `method` , do której należy i zamknięte przez to wystąpienie wynikowego obiektu delegowanego.</span><span class="sxs-lookup"><span data-stu-id="1d87f-576">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of the type `method` belongs to, and the resulting delegate is said to be closed over that instance.</span></span> <span data-ttu-id="1d87f-577">(Trivially, `D` również może zostać zamknięty przez odwołanie o wartości null, jeśli `firstArgument` jest `null`.)</span><span class="sxs-lookup"><span data-stu-id="1d87f-577">(Trivially, `D` can also be closed over a null reference if `firstArgument` is `null`.)</span></span>  
  
-   <span data-ttu-id="1d87f-578">`D` może reprezentować metod wystąpień `C` który nie ma argumentów.</span><span class="sxs-lookup"><span data-stu-id="1d87f-578">`D` can represent an instance method of `C` that has no arguments.</span></span> <span data-ttu-id="1d87f-579">Gdy <xref:System.Delegate.CreateDelegate%2A> jest nazywany `firstArgument` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="1d87f-579">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="1d87f-580">Wynikowa delegata reprezentuje metody Otwórz wystąpienie i wystąpienie `C` musi zostać dostarczona zawsze jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="1d87f-580">The resulting delegate represents an open instance method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="1d87f-581">`D` może reprezentować statyczną metodę, która przyjmuje jeden argument typu `C`, i czy metoda może należeć do dowolnego typu.</span><span class="sxs-lookup"><span data-stu-id="1d87f-581">`D` can represent a static method that takes one argument of type `C`, and that method can belong to any type.</span></span> <span data-ttu-id="1d87f-582">Gdy <xref:System.Delegate.CreateDelegate%2A> jest nazywany `firstArgument` jest odwołanie o wartości null.</span><span class="sxs-lookup"><span data-stu-id="1d87f-582">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="1d87f-583">Wynikowa delegata reprezentuje Otwórz metody statycznej i wystąpienie `C` musi zostać dostarczona zawsze jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="1d87f-583">The resulting delegate represents an open static method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="1d87f-584">`D` może reprezentować statyczną metodę, która należy do typu `F` i ma dwa argumenty typu `F` i typu `C`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-584">`D` can represent a static method that belongs to type `F` and has two arguments, of type `F` and type `C`.</span></span> <span data-ttu-id="1d87f-585">Gdy <xref:System.Delegate.CreateDelegate%2A> jest nazywany `firstArgument` jest wystąpieniem `F`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-585">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of `F`.</span></span> <span data-ttu-id="1d87f-586">Wynikowa delegata reprezentuje statyczną metodę, która jest zamknięte przez to wystąpienie `F`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-586">The resulting delegate represents a static method that is closed over that instance of `F`.</span></span> <span data-ttu-id="1d87f-587">Należy pamiętać, że w przypadku gdy `F` i `C` są tego samego typu, metody statycznej ma dwa argumenty typu.</span><span class="sxs-lookup"><span data-stu-id="1d87f-587">Note that in the case where `F` and `C` are the same type, the static method has two arguments of that type.</span></span> <span data-ttu-id="1d87f-588">(W tym przypadku `D` zamknięte przez odwołanie o wartości null, jeśli `firstArgument` jest `null`.)</span><span class="sxs-lookup"><span data-stu-id="1d87f-588">(In this case, `D` is closed over a null reference if `firstArgument` is `null`.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1d87f-589">Ta sekcja zawiera trzy przykłady kodu.</span><span class="sxs-lookup"><span data-stu-id="1d87f-589">This section contains three code examples.</span></span> <span data-ttu-id="1d87f-590">Pierwszym przykładzie przedstawiono cztery rodzaje obiektów delegowanych, które mogą być tworzone: zamknięte za pośrednictwem metody wystąpienia, Otwórz za pośrednictwem metody wystąpienia, Otwórz za pośrednictwem metody statycznej i zamknięte za pośrednictwem metody statycznej.</span><span class="sxs-lookup"><span data-stu-id="1d87f-590">The first example demonstrates the four kinds of delegates that can be created: closed over an instance method, open over an instance method, open over a static method, and closed over a static method.</span></span>  
  
 <span data-ttu-id="1d87f-591">Drugi przykład kodu ilustruje zgodność typów parametrów i zwracanych typów.</span><span class="sxs-lookup"><span data-stu-id="1d87f-591">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="1d87f-592">Trzeci przykładowy kod definiuje typ delegata pojedynczego i zawiera wszystkie metody, których typ delegowany może reprezentować.</span><span class="sxs-lookup"><span data-stu-id="1d87f-592">The third code example defines a single delegate type, and shows all the methods that delegate type can represent.</span></span>  
  
 <span data-ttu-id="1d87f-593">**Przykład 1**</span><span class="sxs-lookup"><span data-stu-id="1d87f-593">**Example 1**</span></span>  
  
 <span data-ttu-id="1d87f-594">W poniższym przykładzie kodu pokazano cztery metody delegata mogą być tworzone przy użyciu tego przeciążenia <xref:System.Delegate.CreateDelegate%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="1d87f-594">The following code example demonstrates the four ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d87f-595">Istnieją dwa przeciążenia metody <xref:System.Delegate.CreateDelegate%2A> — metoda, która określa `firstArgument` i <xref:System.Reflection.MethodInfo>; ich funkcji jest taki sam, z wyjątkiem tego, co umożliwia Określ, czy ma być generowany w przypadku niepowodzenia powiązać i innych zawsze zwraca.</span><span class="sxs-lookup"><span data-stu-id="1d87f-595">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="1d87f-596">W tym przykładzie kodu są używane oba przeciążenia.</span><span class="sxs-lookup"><span data-stu-id="1d87f-596">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="1d87f-597">Przykład deklaruje klasy `C` z metodą statyczną `M2` i metody wystąpienia `M1`, i trzech typów delegatów: `D1` przyjmuje wystąpienia `C` i ciąg, `D2` ciągu i `D3`nie ma argumentów.</span><span class="sxs-lookup"><span data-stu-id="1d87f-597">The example declares a class `C` with a static method `M2` and an instance method `M1`, and three delegate types: `D1` takes an instance of `C` and a string, `D2` takes a string, and `D3` has no arguments.</span></span>  
  
 <span data-ttu-id="1d87f-598">Drugiej klasy o nazwie `Example` zawiera kod, który tworzy delegatów.</span><span class="sxs-lookup"><span data-stu-id="1d87f-598">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="1d87f-599">Delegat typu `D2`zamkniętej za pośrednictwem wystąpienia `C`, jest tworzona dla metody wystąpienia `M1`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-599">A delegate of type `D2`, closed over an instance of `C`, is created for the instance method `M1`.</span></span> <span data-ttu-id="1d87f-600">Jest wywoływana z różnych ciągami, wykazała, że wystąpienie powiązania `C` zawsze jest używany.</span><span class="sxs-lookup"><span data-stu-id="1d87f-600">It is invoked with different strings, to show that the bound instance of `C` is always used.</span></span>  
  
-   <span data-ttu-id="1d87f-601">Delegat typu `D1`, reprezentujący metodę otwarte wystąpienia, jest tworzona dla metody wystąpienia `M1`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-601">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="1d87f-602">Wystąpienie musi zostać przekazane podczas wywoływania delegata.</span><span class="sxs-lookup"><span data-stu-id="1d87f-602">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="1d87f-603">Delegat typu `D2`, reprezentujący otwarty metody statycznej, jest tworzona dla metody statycznej `M2`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-603">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
-   <span data-ttu-id="1d87f-604">Na koniec delegowanego typu `D3`, zamknięte przez ciąg, jest tworzona dla metody statycznej `M2`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-604">Finally, a delegate of type `D3`, closed over a string, is created for the static method `M2`.</span></span> <span data-ttu-id="1d87f-605">Metoda wywoływana w celu Pokaż korzysta z ciągu powiązania.</span><span class="sxs-lookup"><span data-stu-id="1d87f-605">The method is invoked to show that it uses the bound string.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="1d87f-606">**Przykład 2**</span><span class="sxs-lookup"><span data-stu-id="1d87f-606">**Example 2**</span></span>  
  
 <span data-ttu-id="1d87f-607">Poniższy przykład kodu ilustruje zgodność typów parametrów i zwracanych typów.</span><span class="sxs-lookup"><span data-stu-id="1d87f-607">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d87f-608">W tym przykładzie kodu używane <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> przeciążenie metody.</span><span class="sxs-lookup"><span data-stu-id="1d87f-608">This code example uses the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span> <span data-ttu-id="1d87f-609">Użyj innych overloads które trwają <xref:System.Reflection.MethodInfo> przypomina.</span><span class="sxs-lookup"><span data-stu-id="1d87f-609">The use of other overloads that take <xref:System.Reflection.MethodInfo> is similar.</span></span>  
  
 <span data-ttu-id="1d87f-610">Przykładowy kod definiuje klasę podstawową o nazwie `Base` i klasę o nazwie `Derived` która pochodzi z `Base`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-610">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="1d87f-611">Klasa pochodna ma `static` (`Shared` w języku Visual Basic) metodę o nazwie `MyMethod` z jednym parametrem typu `Base` i typ zwracany `Derived`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-611">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="1d87f-612">Przykładowy kod definiuje również delegata o nazwie `Example` który ma jeden parametr typu `Derived` i typ zwracany `Base`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-612">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="1d87f-613">Przykład kodu pokazuje, że delegata o nazwie `Example` może służyć do reprezentowania metody `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-613">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="1d87f-614">Metodę można powiązać z delegatem, ponieważ:</span><span class="sxs-lookup"><span data-stu-id="1d87f-614">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="1d87f-615">Typ parametru delegata (`Derived`) jest bardziej restrykcyjny niż typ parametru `MyMethod` (`Base`), dzięki czemu zawsze jest bezpieczne argument pełnomocnika, aby przekazać `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-615">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="1d87f-616">Zwracany typ `MyMethod` (`Derived`) jest bardziej restrykcyjny niż typ parametru delegata (`Base`), dzięki czemu zawsze jest bezpieczne rzutowanie zwracany typ metody na zwracany typ delegata.</span><span class="sxs-lookup"><span data-stu-id="1d87f-616">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="1d87f-617">W przykładowym kodzie nie są generowane żadne dane wyjściowe.</span><span class="sxs-lookup"><span data-stu-id="1d87f-617">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 <span data-ttu-id="1d87f-618">**Przykład 3**</span><span class="sxs-lookup"><span data-stu-id="1d87f-618">**Example 3**</span></span>  
  
 <span data-ttu-id="1d87f-619">Poniższy przykład kodu pokazuje wszystkie metody, które może wymagać typu delegata pojedynczego.</span><span class="sxs-lookup"><span data-stu-id="1d87f-619">The following code example shows all the methods a single delegate type can represent.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d87f-620">Istnieją dwa przeciążenia metody <xref:System.Delegate.CreateDelegate%2A> — metoda, która określa `firstArgument` i <xref:System.Reflection.MethodInfo>; ich funkcji jest taki sam, z wyjątkiem tego, co umożliwia Określ, czy ma być generowany w przypadku niepowodzenia powiązać i innych zawsze zwraca.</span><span class="sxs-lookup"><span data-stu-id="1d87f-620">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="1d87f-621">W tym przykładzie kodu są używane oba przeciążenia.</span><span class="sxs-lookup"><span data-stu-id="1d87f-621">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="1d87f-622">Przykład kodu definiuje dwie klasy `C` i `F`, a typem obiektu delegowanego `D` z jednym argumentem typu `C`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-622">The code example defines two classes, `C` and `F`, and a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="1d87f-623">Klasy zawierają zgodnych statyczne i wystąpienie metody `M1`, `M3`, i `M4`, a klasa `C` ma również metody wystąpienia `M2` który nie ma argumentów.</span><span class="sxs-lookup"><span data-stu-id="1d87f-623">The classes have matching static and instance methods `M1`, `M3`, and `M4`, and class `C` also has an instance method `M2` that has no arguments.</span></span>  
  
 <span data-ttu-id="1d87f-624">Innej klasy o nazwie `Example` zawiera kod, który tworzy delegatów.</span><span class="sxs-lookup"><span data-stu-id="1d87f-624">A third class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="1d87f-625">Obiekty delegowane są tworzone dla wystąpienia metody `M1` typu `C` i typu `F`; każdego zostało zamknięte przez wystąpienie odpowiedniego typu.</span><span class="sxs-lookup"><span data-stu-id="1d87f-625">Delegates are created for instance method `M1` of type `C` and type `F`; each is closed over an instance of the respective type.</span></span> <span data-ttu-id="1d87f-626">Metoda `M1` typu `C` Wyświetla `ID` właściwości powiązanej wystąpienia i argumentu.</span><span class="sxs-lookup"><span data-stu-id="1d87f-626">Method `M1` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
-   <span data-ttu-id="1d87f-627">Delegat jest tworzony dla metody `M2` typu `C`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-627">A delegate is created for method `M2` of type `C`.</span></span> <span data-ttu-id="1d87f-628">Jest to pełnomocnika otwartej instancji, w którym argumentu delegata reprezentuje ukryte pierwszy argument dla metody wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="1d87f-628">This is an open instance delegate, in which the argument of the delegate represents the hidden first argument on the instance method.</span></span> <span data-ttu-id="1d87f-629">Metoda nie ma innych argumentów.</span><span class="sxs-lookup"><span data-stu-id="1d87f-629">The method has no other arguments.</span></span>  
  
-   <span data-ttu-id="1d87f-630">Obiekty delegowane są tworzone dla metody statycznej `M3` typu `C` i typu `F`; są one otwarte statycznych obiektów delegowanych.</span><span class="sxs-lookup"><span data-stu-id="1d87f-630">Delegates are created for static method `M3` of type `C` and type `F`; these are open static delegates.</span></span>  
  
-   <span data-ttu-id="1d87f-631">Na koniec delegatów są tworzone dla metody statycznej `M4` typu `C` i typu `F`; każda metoda ma typ deklarujący jako pierwszego argumentu i wystąpienie typu został podany, więc delegatów są zamykane za pośrednictwem ich pierwszym argumentów .</span><span class="sxs-lookup"><span data-stu-id="1d87f-631">Finally, delegates are created for static method `M4` of type `C` and type `F`; each method has the declaring type as its first argument, and an instance of the type is supplied, so the delegates are closed over their first arguments.</span></span> <span data-ttu-id="1d87f-632">Metoda `M4` typu `C` Wyświetla `ID` właściwości powiązanej wystąpienia i argumentu.</span><span class="sxs-lookup"><span data-stu-id="1d87f-632">Method `M4` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1d87f-633">
            <paramref name="type" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-633">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1d87f-634">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-634">-or-</span>
          </span>
          <span data-ttu-id="1d87f-635">
            <paramref name="method" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-635">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1d87f-636">
            <paramref name="type" /> nie dziedziczy <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-636">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="1d87f-637">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-637">-or-</span>
          </span>
          <span data-ttu-id="1d87f-638">
            <paramref name="type" /> nie jest <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-638">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="1d87f-639">Zobacz [typów środowiska wykonawczego w odbicia](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-639">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="1d87f-640">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-640">-or-</span>
          </span>
          <span data-ttu-id="1d87f-641">
            <paramref name="method" /> Nie można powiązać, i <paramref name="throwOnBindFailure" /> jest <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-641">
              <paramref name="method" /> cannot be bound, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="1d87f-642">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-642">-or-</span>
          </span>
          <span data-ttu-id="1d87f-643">
            <paramref name="method" /> nie jest <see langword="RuntimeMethodInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-643">
              <paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span>
          </span>
          <span data-ttu-id="1d87f-644">Zobacz [typów środowiska wykonawczego w odbicia](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-644">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="1d87f-645">
            <see langword="Invoke" /> Metody <paramref name="type" /> nie można odnaleźć.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-645">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="1d87f-646">Obiekt wywołujący nie ma uprawnień do dostępu <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-646">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="1d87f-647">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-647">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="1d87f-648">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-648">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object target, string method, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object target, string method, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ target, System::String ^ method, bool ignoreCase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="1d87f-649">
            <see cref="T:System.Type" /> Delegata do utworzenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-649">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="1d87f-650">Wystąpienie klasy, w którym <c>metoda</c> jest wywoływana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-650">The class instance on which <c>method</c> is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="1d87f-651">Nazwa metody wystąpienia, która ma reprezentować delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-651">The name of the instance method that the delegate is to represent.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="1d87f-652">Wartość logiczna wskazująca, podczas porównywania nazwy metody ma być ignorowana wielkość liter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-652">A Boolean indicating whether to ignore the case when comparing the name of the method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1d87f-653">Tworzy delegata określonego typu, który reprezentuje określone wystąpienie metody w wystąpieniu określonej klasy z określonym rozróżnianiem wielkości liter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-653">Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance with the specified case-sensitivity.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1d87f-654">Delegat określonego typu, który reprezentuje określone wystąpienie metody w wystąpieniu określonej klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-654">A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d87f-655">Ta metoda tworzy delegatów na przykład tylko metody.</span><span class="sxs-lookup"><span data-stu-id="1d87f-655">This method creates delegates for instance methods only.</span></span> <span data-ttu-id="1d87f-656">Metoda wystąpienia to metoda, która jest skojarzona z wystąpieniem klasy, natomiast metoda statyczna jest skojarzona z samą klasą.</span><span class="sxs-lookup"><span data-stu-id="1d87f-656">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="1d87f-657">Przeciążenie tej metody jest odpowiednikiem wywołania <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> przeciążenia metody, określając `true` dla `throwOnBindFailure`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-657">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d87f-658">Począwszy od [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], ta metoda może służyć do niepublicznego metody dostępu, jeśli element wywołujący zostało udzielone <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> Flaga i jeśli zestaw grant metody niepublicznej jest ograniczone do obiektu wywołującego udzielić zestawu lub być podzbiorem jej.</span><span class="sxs-lookup"><span data-stu-id="1d87f-658">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="1d87f-659">(Zobacz [zagadnienia dotyczące zabezpieczeń dla odbicia](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="1d87f-659">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="1d87f-660">Aby używać tej funkcji, należy docelowy aplikacji [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszym.</span><span class="sxs-lookup"><span data-stu-id="1d87f-660">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1d87f-661">
            <paramref name="type" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-661">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1d87f-662">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-662">-or-</span>
          </span>
          <span data-ttu-id="1d87f-663">
            <paramref name="target" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-663">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1d87f-664">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-664">-or-</span>
          </span>
          <span data-ttu-id="1d87f-665">
            <paramref name="method" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-665">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1d87f-666">
            <paramref name="type" /> nie dziedziczy <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-666">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="1d87f-667">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-667">-or-</span>
          </span>
          <span data-ttu-id="1d87f-668">
            <paramref name="type" /> nie jest <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-668">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="1d87f-669">Zobacz [typów środowiska wykonawczego w odbicia](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-669">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="1d87f-670">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-670">-or-</span>
          </span>
          <span data-ttu-id="1d87f-671">
            <paramref name="method" /> nie jest metodą wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-671">
              <paramref name="method" /> is not an instance method.</span>
          </span>
          <span data-ttu-id="1d87f-672">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-672">-or-</span>
          </span>
          <span data-ttu-id="1d87f-673">
            <paramref name="method" /> Nie można powiązać, np. ponieważ nie można odnaleźć.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-673">
              <paramref name="method" /> cannot be bound, for example because it cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="1d87f-674">
            <see langword="Invoke" /> Metody <paramref name="type" /> nie można odnaleźć.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-674">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="1d87f-675">Obiekt wywołujący nie ma uprawnień do dostępu <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-675">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="1d87f-676">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-676">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="1d87f-677">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-677">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, Type target, string method, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Type target, string method, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, Type ^ target, System::String ^ method, bool ignoreCase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Type" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="1d87f-678">
            <see cref="T:System.Type" /> Delegata do utworzenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-678">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="1d87f-679">
            <see cref="T:System.Type" /> Reprezentujący klasę, która implementuje <c>metody</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-679">The <see cref="T:System.Type" /> representing the class that implements <c>method</c>.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="1d87f-680">Nazwa statyczną metodę, która ma reprezentować delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-680">The name of the static method that the delegate is to represent.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="1d87f-681">Wartość logiczna wskazująca, podczas porównywania nazwy metody ma być ignorowana wielkość liter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-681">A Boolean indicating whether to ignore the case when comparing the name of the method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1d87f-682">Tworzy delegata określonego typu, który reprezentuje określonej metody statycznej określonej klasy, z określonym rozróżnianiem wielkości liter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-682">Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1d87f-683">Delegat określonego typu, który reprezentuje określonej metody statycznej określonej klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-683">A delegate of the specified type that represents the specified static method of the specified class.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d87f-684">Ta metoda tworzy delegatów tylko metody statyczne.</span><span class="sxs-lookup"><span data-stu-id="1d87f-684">This method creates delegates for static methods only.</span></span> <span data-ttu-id="1d87f-685">Metoda wystąpienia to metoda, która jest skojarzona z wystąpieniem klasy, natomiast metoda statyczna jest skojarzona z samą klasą.</span><span class="sxs-lookup"><span data-stu-id="1d87f-685">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="1d87f-686">Przeciążenie tej metody jest odpowiednikiem wywołania <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> przeciążenia metody, określając `true` dla `throwOnBindFailure`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-686">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d87f-687">Począwszy od [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], ta metoda może służyć do niepublicznego metody dostępu, jeśli element wywołujący zostało udzielone <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> Flaga i jeśli zestaw grant metody niepublicznej jest ograniczone do obiektu wywołującego udzielić zestawu lub być podzbiorem jej.</span><span class="sxs-lookup"><span data-stu-id="1d87f-687">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="1d87f-688">(Zobacz [zagadnienia dotyczące zabezpieczeń dla odbicia](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="1d87f-688">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="1d87f-689">Aby używać tej funkcji, należy docelowy aplikacji [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszym.</span><span class="sxs-lookup"><span data-stu-id="1d87f-689">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1d87f-690">
            <paramref name="type" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-690">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1d87f-691">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-691">-or-</span>
          </span>
          <span data-ttu-id="1d87f-692">
            <paramref name="target" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-692">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1d87f-693">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-693">-or-</span>
          </span>
          <span data-ttu-id="1d87f-694">
            <paramref name="method" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-694">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1d87f-695">
            <paramref name="type" /> nie dziedziczy <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-695">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="1d87f-696">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-696">-or-</span>
          </span>
          <span data-ttu-id="1d87f-697">
            <paramref name="type" /> nie jest <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-697">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="1d87f-698">Zobacz [typów środowiska wykonawczego w odbicia](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-698">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="1d87f-699">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-699">-or-</span>
          </span>
          <span data-ttu-id="1d87f-700">
            <paramref name="target" /> nie jest <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-700">
              <paramref name="target" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="1d87f-701">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-701">-or-</span>
          </span>
          <span data-ttu-id="1d87f-702">
            <paramref name="target" /> jest to otwarty typ ogólny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-702">
              <paramref name="target" /> is an open generic type.</span>
          </span>
          <span data-ttu-id="1d87f-703">Oznacza to, że jego <see cref="P:System.Type.ContainsGenericParameters" /> jest właściwość <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-703">That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="1d87f-704">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-704">-or-</span>
          </span>
          <span data-ttu-id="1d87f-705">
            <paramref name="method" /> nie jest <see langword="static" /> — metoda (<see langword="Shared" /> metody w języku Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-705">
              <paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).</span>
          </span>
          <span data-ttu-id="1d87f-706">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-706">-or-</span>
          </span>
          <span data-ttu-id="1d87f-707">
            <paramref name="method" /> Nie można powiązać, np. ponieważ nie można odnaleźć.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-707">
              <paramref name="method" /> cannot be bound, for example because it cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="1d87f-708">
            <see langword="Invoke" /> Metody <paramref name="type" /> nie można odnaleźć.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-708">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="1d87f-709">Obiekt wywołujący nie ma uprawnień do dostępu <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-709">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="1d87f-710">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-710">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="1d87f-711">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-711">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ target, System::String ^ method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="1d87f-712">
            <see cref="T:System.Type" /> Delegata do utworzenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-712">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="1d87f-713">Wystąpienie klasy, w którym <c>metoda</c> jest wywoływana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-713">The class instance on which <c>method</c> is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="1d87f-714">Nazwa metody wystąpienia, która ma reprezentować delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-714">The name of the instance method that the delegate is to represent.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="1d87f-715">Wartość logiczna wskazująca, podczas porównywania nazwy metody ma być ignorowana wielkość liter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-715">A Boolean indicating whether to ignore the case when comparing the name of the method.</span>
          </span>
        </param>
        <param name="throwOnBindFailure">
          <span data-ttu-id="1d87f-716">
            <see langword="true" /> Aby zgłosić wyjątek, jeśli <c>metody</c> nie może być powiązane; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-716">
              <see langword="true" /> to throw an exception if <c>method</c> cannot be bound; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1d87f-717">Tworzy określonego typu, który reprezentuje określone wystąpienie metody wystąpienia określonej klasy, z określonym uwzględnianie wielkości liter i określonego zachowania w przypadku awarii można powiązać delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-717">Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance, with the specified case-sensitivity and the specified behavior on failure to bind.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1d87f-718">Delegat określonego typu, który reprezentuje określone wystąpienie metody w wystąpieniu określonej klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-718">A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d87f-719">Ta metoda tworzy delegatów na przykład tylko metody.</span><span class="sxs-lookup"><span data-stu-id="1d87f-719">This method creates delegates for instance methods only.</span></span> <span data-ttu-id="1d87f-720">Metoda wystąpienia to metoda, która jest skojarzona z wystąpieniem klasy, natomiast metoda statyczna jest skojarzona z samą klasą.</span><span class="sxs-lookup"><span data-stu-id="1d87f-720">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d87f-721">Począwszy od [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], ta metoda może służyć do niepublicznego metody dostępu, jeśli element wywołujący zostało udzielone <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> Flaga i jeśli zestaw grant metody niepublicznej jest ograniczone do obiektu wywołującego udzielić zestawu lub być podzbiorem jej.</span><span class="sxs-lookup"><span data-stu-id="1d87f-721">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="1d87f-722">(Zobacz [zagadnienia dotyczące zabezpieczeń dla odbicia](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="1d87f-722">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="1d87f-723">Aby używać tej funkcji, należy docelowy aplikacji [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszym.</span><span class="sxs-lookup"><span data-stu-id="1d87f-723">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1d87f-724">
            <paramref name="type" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-724">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1d87f-725">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-725">-or-</span>
          </span>
          <span data-ttu-id="1d87f-726">
            <paramref name="target" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-726">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1d87f-727">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-727">-or-</span>
          </span>
          <span data-ttu-id="1d87f-728">
            <paramref name="method" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-728">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1d87f-729">
            <paramref name="type" /> nie dziedziczy <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-729">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="1d87f-730">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-730">-or-</span>
          </span>
          <span data-ttu-id="1d87f-731">
            <paramref name="type" /> nie jest <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-731">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="1d87f-732">Zobacz [typów środowiska wykonawczego w odbicia](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-732">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="1d87f-733">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-733">-or-</span>
          </span>
          <span data-ttu-id="1d87f-734">
            <paramref name="method" /> nie jest metodą wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-734">
              <paramref name="method" /> is not an instance method.</span>
          </span>
          <span data-ttu-id="1d87f-735">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-735">-or-</span>
          </span>
          <span data-ttu-id="1d87f-736">
            <paramref name="method" /> Nie można powiązać, np. ponieważ nie można odnaleźć, i <paramref name="throwOnBindFailure" /> jest <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-736">
              <paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="1d87f-737">
            <see langword="Invoke" /> Metody <paramref name="type" /> nie można odnaleźć.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-737">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="1d87f-738">Obiekt wywołujący nie ma uprawnień do dostępu <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-738">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="1d87f-739">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-739">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="1d87f-740">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-740">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, Type target, string method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Type target, string method, bool ignoreCase, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, Type ^ target, System::String ^ method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Type" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="1d87f-741">
            <see cref="T:System.Type" /> Delegata do utworzenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-741">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="1d87f-742">
            <see cref="T:System.Type" /> Reprezentujący klasę, która implementuje <c>metody</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-742">The <see cref="T:System.Type" /> representing the class that implements <c>method</c>.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="1d87f-743">Nazwa statyczną metodę, która ma reprezentować delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-743">The name of the static method that the delegate is to represent.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="1d87f-744">Wartość logiczna wskazująca, podczas porównywania nazwy metody ma być ignorowana wielkość liter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-744">A Boolean indicating whether to ignore the case when comparing the name of the method.</span>
          </span>
        </param>
        <param name="throwOnBindFailure">
          <span data-ttu-id="1d87f-745">
            <see langword="true" /> Aby zgłosić wyjątek, jeśli <c>metody</c> nie może być powiązane; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-745">
              <see langword="true" /> to throw an exception if <c>method</c> cannot be bound; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1d87f-746">Tworzy określonego typu, który reprezentuje określonej metody statycznej określonej klasy, z określonym uwzględnianie wielkości liter i określonego zachowania w przypadku awarii można powiązać delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-746">Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity and the specified behavior on failure to bind.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1d87f-747">Delegat określonego typu, który reprezentuje określonej metody statycznej określonej klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-747">A delegate of the specified type that represents the specified static method of the specified class.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d87f-748">Ta metoda tworzy delegatów tylko metody statyczne.</span><span class="sxs-lookup"><span data-stu-id="1d87f-748">This method creates delegates for static methods only.</span></span> <span data-ttu-id="1d87f-749">Metoda wystąpienia to metoda, która jest skojarzona z wystąpieniem klasy, natomiast metoda statyczna jest skojarzona z samą klasą.</span><span class="sxs-lookup"><span data-stu-id="1d87f-749">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1d87f-750">Począwszy od [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], ta metoda może służyć do niepublicznego metody dostępu, jeśli element wywołujący zostało udzielone <xref:System.Security.Permissions.ReflectionPermission> z <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> Flaga i jeśli zestaw grant metody niepublicznej jest ograniczone do obiektu wywołującego udzielić zestawu lub być podzbiorem jej.</span><span class="sxs-lookup"><span data-stu-id="1d87f-750">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="1d87f-751">(Zobacz [zagadnienia dotyczące zabezpieczeń dla odbicia](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="1d87f-751">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="1d87f-752">Aby używać tej funkcji, należy docelowy aplikacji [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] lub nowszym.</span><span class="sxs-lookup"><span data-stu-id="1d87f-752">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1d87f-753">
            <paramref name="type" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-753">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1d87f-754">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-754">-or-</span>
          </span>
          <span data-ttu-id="1d87f-755">
            <paramref name="target" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-755">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1d87f-756">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-756">-or-</span>
          </span>
          <span data-ttu-id="1d87f-757">
            <paramref name="method" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-757">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1d87f-758">
            <paramref name="type" /> nie dziedziczy <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-758">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="1d87f-759">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-759">-or-</span>
          </span>
          <span data-ttu-id="1d87f-760">
            <paramref name="type" /> nie jest <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-760">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="1d87f-761">Zobacz [typów środowiska wykonawczego w odbicia](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-761">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="1d87f-762">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-762">-or-</span>
          </span>
          <span data-ttu-id="1d87f-763">
            <paramref name="target" /> nie jest <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-763">
              <paramref name="target" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="1d87f-764">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-764">-or-</span>
          </span>
          <span data-ttu-id="1d87f-765">
            <paramref name="target" /> jest to otwarty typ ogólny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-765">
              <paramref name="target" /> is an open generic type.</span>
          </span>
          <span data-ttu-id="1d87f-766">Oznacza to, że jego <see cref="P:System.Type.ContainsGenericParameters" /> jest właściwość <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-766">That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="1d87f-767">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-767">-or-</span>
          </span>
          <span data-ttu-id="1d87f-768">
            <paramref name="method" /> nie jest <see langword="static" /> — metoda (<see langword="Shared" /> metody w języku Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-768">
              <paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).</span>
          </span>
          <span data-ttu-id="1d87f-769">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-769">-or-</span>
          </span>
          <span data-ttu-id="1d87f-770">
            <paramref name="method" /> Nie można powiązać, np. ponieważ nie można odnaleźć, i <paramref name="throwOnBindFailure" /> jest <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-770">
              <paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="1d87f-771">
            <see langword="Invoke" /> Metody <paramref name="type" /> nie można odnaleźć.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-771">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="1d87f-772">Obiekt wywołujący nie ma uprawnień do dostępu <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-772">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="1d87f-773">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-773">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="1d87f-774">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-774">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="DynamicInvoke">
      <MemberSignature Language="C#" Value="public object DynamicInvoke (params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object DynamicInvoke(object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.DynamicInvoke(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DynamicInvoke (ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ DynamicInvoke(... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="args">
          <span data-ttu-id="1d87f-775">Tablica obiektów, które są argumenty do przekazania do metodę reprezentowaną przez bieżące delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-775">An array of objects that are the arguments to pass to the method represented by the current delegate.</span>
          </span>
          <span data-ttu-id="1d87f-776">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-776">-or-</span>
          </span>
          <span data-ttu-id="1d87f-777">
            <see langword="null" />, jeśli metodę reprezentowaną przez bieżące delegata nie wymaga argumentów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-777">
              <see langword="null" />, if the method represented by the current delegate does not require arguments.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1d87f-778">Dynamicznie wywołuje (późnym wiązaniem) metodę reprezentowaną przez bieżące delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-778">Dynamically invokes (late-bound) the method represented by the current delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1d87f-779">Obiekt zwrócony przez metodę reprezentowaną przez delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-779">The object returned by the method represented by the delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d87f-780">Ta metoda wywołuje <xref:System.Delegate.DynamicInvokeImpl%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="1d87f-780">This method calls the <xref:System.Delegate.DynamicInvokeImpl%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="1d87f-781">Obiekt wywołujący nie ma dostępu do metody reprezentowanej przez delegata (na przykład jeśli metoda jest prywatna).</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-781">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
          <span data-ttu-id="1d87f-782">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-782">-or-</span>
          </span>
          <span data-ttu-id="1d87f-783">Numer zamówienia i typu na liście parametrów <paramref name="args" /> jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-783">The number, order, or type of parameters listed in <paramref name="args" /> is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1d87f-784">Metodę reprezentowaną przez delegat jest wywoływane na obiekt lub klasa, która nie obsługuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-784">The method represented by the delegate is invoked on an object or a class that does not support it.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="1d87f-785">Metodę reprezentowaną przez delegat jest metodą wystąpienia i obiekt docelowy jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-785">The method represented by the delegate is an instance method and the target object is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1d87f-786">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-786">-or-</span>
          </span>
          <span data-ttu-id="1d87f-787">Jedną z metod hermetyzowany zgłasza wyjątek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-787">One of the encapsulated methods throws an exception.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="1d87f-788">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-788">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="1d87f-789">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-789">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.DynamicInvokeImpl(System.Object[])" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="DynamicInvokeImpl">
      <MemberSignature Language="C#" Value="protected virtual object DynamicInvokeImpl (object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object DynamicInvokeImpl(object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.DynamicInvokeImpl(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function DynamicInvokeImpl (args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ DynamicInvokeImpl(cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="args">
          <span data-ttu-id="1d87f-790">Tablica obiektów, które są argumenty do przekazania do metodę reprezentowaną przez bieżące delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-790">An array of objects that are the arguments to pass to the method represented by the current delegate.</span>
          </span>
          <span data-ttu-id="1d87f-791">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-791">-or-</span>
          </span>
          <span data-ttu-id="1d87f-792">
            <see langword="null" />, jeśli metodę reprezentowaną przez bieżące delegata nie wymaga argumentów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-792">
              <see langword="null" />, if the method represented by the current delegate does not require arguments.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1d87f-793">Dynamicznie wywołuje (późnym wiązaniem) metodę reprezentowaną przez bieżące delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-793">Dynamically invokes (late-bound) the method represented by the current delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1d87f-794">Obiekt zwrócony przez metodę reprezentowaną przez delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-794">The object returned by the method represented by the delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d87f-795">Ta metoda implementuje <xref:System.Delegate.DynamicInvoke%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="1d87f-795">This method implements the <xref:System.Delegate.DynamicInvoke%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="1d87f-796">Obiekt wywołujący nie ma dostępu do metody reprezentowanej przez delegata (na przykład jeśli metoda jest prywatna).</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-796">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
          <span data-ttu-id="1d87f-797">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-797">-or-</span>
          </span>
          <span data-ttu-id="1d87f-798">Numer zamówienia i typu na liście parametrów <paramref name="args" /> jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-798">The number, order, or type of parameters listed in <paramref name="args" /> is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1d87f-799">Metodę reprezentowaną przez delegat jest wywoływane na obiekt lub klasa, która nie obsługuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-799">The method represented by the delegate is invoked on an object or a class that does not support it.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="1d87f-800">Metodę reprezentowaną przez delegat jest metodą wystąpienia i obiekt docelowy jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-800">The method represented by the delegate is an instance method and the target object is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1d87f-801">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-801">-or-</span>
          </span>
          <span data-ttu-id="1d87f-802">Jedną z metod hermetyzowany zgłasza wyjątek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-802">One of the encapsulated methods throws an exception.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="1d87f-803">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-803">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="1d87f-804">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-804">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.DynamicInvoke(System.Object[])" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="1d87f-805">Obiekt do porównania z bieżącym obiektem delegowanym.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-805">The object to compare with the current delegate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1d87f-806">Określa, czy określony obiekt i bieżącego delegata są tego samego typu i udostępnianie tego samego elementów docelowych, metod i listy wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-806">Determines whether the specified object and the current delegate are of the same type and share the same targets, methods, and invocation list.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1d87f-807">
            <see langword="true" /> Jeśli <paramref name="obj" /> i bieżącego delegat ma tego samego elementów docelowych, metod i listy wywołania; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-807">
              <see langword="true" /> if <paramref name="obj" /> and the current delegate have the same targets, methods, and invocation list; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d87f-808">Jeśli dwa obiekty delegowane nie są tego samego typu, nie jest uwzględniana takie same.</span><span class="sxs-lookup"><span data-stu-id="1d87f-808">If the two delegates are not of the same type, they are not considered equal.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1d87f-809">W programie .NET Framework w wersji 1.0, 1.1 dwóch delegatów zostały uznane za takie same, jeśli ich elementów docelowych, metod i listy wywołania były takie same, nawet jeżeli różnych typów delegatów.</span><span class="sxs-lookup"><span data-stu-id="1d87f-809">In the .NET Framework version 1.0 and 1.1, two delegates were considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.</span></span>  
  
 <span data-ttu-id="1d87f-810">Metody i obiekty docelowe są porównywane pod kątem równości w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="1d87f-810">The methods and targets are compared for equality as follows:</span></span>  
  
-   <span data-ttu-id="1d87f-811">Jeśli te dwie metody są porównywane są statyczne i tej samej metody na tej samej klasy, metody są traktowane jako równe i elementy docelowe również są traktowane jako równe.</span><span class="sxs-lookup"><span data-stu-id="1d87f-811">If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="1d87f-812">Jeśli te dwie metody są porównywane metody wystąpienia i tej samej metody dla tego samego obiektu, metody są traktowane jako równe i elementy docelowe również są traktowane jako równe.</span><span class="sxs-lookup"><span data-stu-id="1d87f-812">If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="1d87f-813">W przeciwnym razie metod nie są traktowane jako równe i elementy docelowe również nie są uważane za równe.</span><span class="sxs-lookup"><span data-stu-id="1d87f-813">Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.</span></span>  
  
 <span data-ttu-id="1d87f-814">Dwie listy wywołania są traktowane jako identyczne, tylko wtedy, gdy mają one taką samą kolejność i odpowiednie elementy z dwoma listami reprezentują te same metody i docelowej.</span><span class="sxs-lookup"><span data-stu-id="1d87f-814">Two invocation lists are considered identical only if they have the same order and the corresponding elements from the two lists represent the same method and target.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="1d87f-815">Obiekt wywołujący nie ma dostępu do metody reprezentowanej przez delegata (na przykład jeśli metoda jest prywatna).</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-815">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="1d87f-816">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-816">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="1d87f-817">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-817">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1d87f-818">Zwraca wartość skrótu dla obiekt delegowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-818">Returns a hash code for the delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1d87f-819">Wartość skrótu dla obiekt delegowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-819">A hash code for the delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d87f-820">Wartość zwracana tej metody nie musi utrwalone dwóch powodów.</span><span class="sxs-lookup"><span data-stu-id="1d87f-820">The return value of this method must not be persisted for two reasons.</span></span> <span data-ttu-id="1d87f-821">Najpierw funkcji skrótu klasy może zostać zmienione w celu Generowanie lepsze dystrybucji renderowania wartości z starego funkcji skrótu bezużyteczny.</span><span class="sxs-lookup"><span data-stu-id="1d87f-821">First, the hash function of a class might be altered to generate a better distribution, rendering any values from the old hash function useless.</span></span> <span data-ttu-id="1d87f-822">Po drugie Domyślna implementacja tej klasy nie gwarantuje, że taką samą wartość zwracaną przez różnych wystąpień.</span><span class="sxs-lookup"><span data-stu-id="1d87f-822">Second, the default implementation of this class does not guarantee that the same value will be returned by different instances.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="1d87f-823">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-823">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="1d87f-824">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-824">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetInvocationList">
      <MemberSignature Language="C#" Value="public virtual Delegate[] GetInvocationList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Delegate[] GetInvocationList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetInvocationList" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetInvocationList () As Delegate()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Delegate ^&gt; ^ GetInvocationList();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1d87f-825">Zwraca listę wywołania delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-825">Returns the invocation list of the delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1d87f-826">Tablica obiektów delegowanych reprezentujący listy wywołania bieżącego obiektu delegowanego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-826">An array of delegates representing the invocation list of the current delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d87f-827">Każdy delegata w tablicy reprezentuje dokładnie jedną metodę.</span><span class="sxs-lookup"><span data-stu-id="1d87f-827">Each delegate in the array represents exactly one method.</span></span>  
  
 <span data-ttu-id="1d87f-828">Kolejność delegatów w tablicy jest tej samej kolejności, w którym bieżącego obiektu delegowanego wywołuje metody, które reprezentują tych obiektów delegowanych.</span><span class="sxs-lookup"><span data-stu-id="1d87f-828">The order of the delegates in the array is the same order in which the current delegate invokes the methods that those delegates represent.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1d87f-829">Poniższy przykład przypisuje trzy metody delegata.</span><span class="sxs-lookup"><span data-stu-id="1d87f-829">The following example assigns three methods to a delegate.</span></span> <span data-ttu-id="1d87f-830">Następnie wywołuje <xref:System.Delegate.GetInvocationList%2A> metodę, aby pobrać całkowita liczba metod przypisane do delegata, można wykonać delegatów w odwrotnej kolejności i wykonywanie metod, którego nazwa zawiera podciąg "Plik".</span><span class="sxs-lookup"><span data-stu-id="1d87f-830">It then calls the  <xref:System.Delegate.GetInvocationList%2A> method to get a total count of the methods assigned to the delegate, to execute the delegates in reverse order, and to execute the methods whose name do not include the substring "File".</span></span>  
  
 [!code-csharp[System.Delegate.GetInvocationList#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Delegate.GetInvocationList/cs/GetInvocationList1.cs#1)]
 [!code-vb[System.Delegate.GetInvocationList#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Delegate.GetInvocationList/vb/GetInvocationList1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="1d87f-831">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-831">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="1d87f-832">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-832">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImpl">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.MethodInfo GetMethodImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethodImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetMethodImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetMethodImpl () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Reflection::MethodInfo ^ GetMethodImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1d87f-833">Pobiera metody statycznej reprezentowany przez bieżącego obiektu delegowanego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-833">Gets the static method represented by the current delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1d87f-834">A <see cref="T:System.Reflection.MethodInfo" /> opisujące metody statycznej reprezentowany przez bieżącego obiektu delegowanego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-834">A <see cref="T:System.Reflection.MethodInfo" /> describing the static method represented by the current delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d87f-835">Ta metoda ma zastosowanie tylko wtedy, gdy bieżący delegata reprezentuje metody statycznej.</span><span class="sxs-lookup"><span data-stu-id="1d87f-835">This method applies only if the current delegate represents a static method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="1d87f-836">Obiekt wywołujący nie ma dostępu do metody reprezentowanej przez delegata (na przykład jeśli metoda jest prywatna).</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-836">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="1d87f-837">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-837">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="1d87f-838">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-838">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="P:System.Delegate.Method" />
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="1d87f-839">Nieobsługiwane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-839">Not supported.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="1d87f-840">Nieobsługiwane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-840">Not supported.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1d87f-841">Nieobsługiwane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-841">Not supported.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="1d87f-842">Ta metoda nie jest obsługiwana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-842">This method is not supported.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="1d87f-843">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-843">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="1d87f-844">Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-844">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
      </Docs>
    </Member>
    <Member MemberName="Method">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo Method { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo Method" />
      <MemberSignature Language="DocId" Value="P:System.Delegate.Method" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Method As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::MethodInfo ^ Method { System::Reflection::MethodInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1d87f-845">Pobiera metodę reprezentowaną przez delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-845">Gets the method represented by the delegate.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1d87f-846">A <see cref="T:System.Reflection.MethodInfo" /> opisujące metodę reprezentowaną przez delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-846">A <see cref="T:System.Reflection.MethodInfo" /> describing the method represented by the delegate.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="1d87f-847">Obiekt wywołujący nie ma dostępu do metody reprezentowanej przez delegata (na przykład jeśli metoda jest prywatna).</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-847">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="1d87f-848">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-848">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="1d87f-849">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-849">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="M:System.Delegate.GetMethodImpl" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (Delegate d1, Delegate d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Delegate d1, class System.Delegate d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.op_Equality(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (d1 As Delegate, d2 As Delegate) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(Delegate ^ d1, Delegate ^ d2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Delegate" />
        <Parameter Name="d2" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d1">
          <span data-ttu-id="1d87f-850">Pierwszy delegata do porównania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-850">The first delegate to compare.</span>
          </span>
        </param>
        <param name="d2">
          <span data-ttu-id="1d87f-851">Delegat drugi do porównania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-851">The second delegate to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1d87f-852">Określa, czy określony delegatów są takie same.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-852">Determines whether the specified delegates are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1d87f-853">
            <see langword="true" /> Jeśli <paramref name="d1" /> jest równa <paramref name="d2" />; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-853">
              <see langword="true" /> if <paramref name="d1" /> is equal to <paramref name="d2" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d87f-854">Dwa obiekty delegowane tego samego typu z tej samej elementy docelowe, metod i listy wywołania są traktowane jako równe.</span><span class="sxs-lookup"><span data-stu-id="1d87f-854">Two delegates of the same type with the same targets, methods, and invocation lists are considered equal.</span></span>  
  
 <span data-ttu-id="1d87f-855">Jeśli dwa obiekty delegowane nie są tego samego typu, nie jest uwzględniana takie same.</span><span class="sxs-lookup"><span data-stu-id="1d87f-855">If the two delegates are not of the same type, they are not considered equal.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1d87f-856">W programie .NET Framework w wersji 1.0, 1.1 dwóch delegatów zostały uznane za takie same, jeśli ich elementów docelowych, metod i listy wywołania były takie same, nawet jeżeli różnych typów delegatów.</span><span class="sxs-lookup"><span data-stu-id="1d87f-856">In the .NET Framework version 1.0 and 1.1, two delegates were considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.</span></span>  
  
 <span data-ttu-id="1d87f-857">Metody i obiekty docelowe są porównywane pod kątem równości w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="1d87f-857">The methods and targets are compared for equality as follows:</span></span>  
  
-   <span data-ttu-id="1d87f-858">Jeśli te dwie metody są porównywane są statyczne i tej samej metody na tej samej klasy, metody są traktowane jako równe i elementy docelowe również są traktowane jako równe.</span><span class="sxs-lookup"><span data-stu-id="1d87f-858">If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="1d87f-859">Jeśli te dwie metody są porównywane metody wystąpienia i tej samej metody dla tego samego obiektu, metody są traktowane jako równe i elementy docelowe również są traktowane jako równe.</span><span class="sxs-lookup"><span data-stu-id="1d87f-859">If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="1d87f-860">W przeciwnym razie metod nie są traktowane jako równe i elementy docelowe również nie są uważane za równe.</span><span class="sxs-lookup"><span data-stu-id="1d87f-860">Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.</span></span>  
  
 <span data-ttu-id="1d87f-861">Dwie listy wywołania są traktowane jako identyczne, jeśli mają taką samą kolejność i odpowiednie elementy z dwoma listami reprezentują te same metody i docelowej.</span><span class="sxs-lookup"><span data-stu-id="1d87f-861">Two invocation lists are considered identical if they have the same order and the corresponding elements from the two lists represent the same method and target.</span></span>  
  
 <span data-ttu-id="1d87f-862">Jest równoważne metodę dla tego operatora <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="1d87f-862">The equivalent method for this operator is <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="1d87f-863">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-863">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="1d87f-864">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-864">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (Delegate d1, Delegate d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Delegate d1, class System.Delegate d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.op_Inequality(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (d1 As Delegate, d2 As Delegate) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(Delegate ^ d1, Delegate ^ d2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Delegate" />
        <Parameter Name="d2" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d1">
          <span data-ttu-id="1d87f-865">Pierwszy delegata do porównania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-865">The first delegate to compare.</span>
          </span>
        </param>
        <param name="d2">
          <span data-ttu-id="1d87f-866">Delegat drugi do porównania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-866">The second delegate to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1d87f-867">Określa, czy określony delegatów nie są takie same.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-867">Determines whether the specified delegates are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1d87f-868">
            <see langword="true" /> Jeśli <paramref name="d1" /> nie jest równa <paramref name="d2" />; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-868">
              <see langword="true" /> if <paramref name="d1" /> is not equal to <paramref name="d2" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d87f-869">Dwa obiekty delegowane nie są uważane za taki sam, jeśli są różnych typów lub różnych metod, różnych elementów docelowych lub list innego wywołania.</span><span class="sxs-lookup"><span data-stu-id="1d87f-869">Two delegates are considered not equal if they are of different types, or have different methods, different targets, or different invocation lists.</span></span>  
  
 <span data-ttu-id="1d87f-870">Jeśli dwa obiekty delegowane nie są tego samego typu, nie jest uwzględniana takie same.</span><span class="sxs-lookup"><span data-stu-id="1d87f-870">If the two delegates are not of the same type, they are not considered equal.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1d87f-871">W programie .NET Framework w wersji 1.0, 1.1 dwa obiekty delegowane są traktowane jako równe, jeśli ich elementów docelowych, metod i listy wywołania były takie same, nawet jeżeli różnych typów delegatów.</span><span class="sxs-lookup"><span data-stu-id="1d87f-871">In the .NET Framework version 1.0 and 1.1, two delegates are considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.</span></span>  
  
 <span data-ttu-id="1d87f-872">Metody i obiekty docelowe są porównywane pod kątem równości w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="1d87f-872">The methods and targets are compared for equality as follows:</span></span>  
  
-   <span data-ttu-id="1d87f-873">Jeśli te dwie metody są porównywane są statyczne i tej samej metody na tej samej klasy, metody są traktowane jako równe i elementy docelowe również są traktowane jako równe.</span><span class="sxs-lookup"><span data-stu-id="1d87f-873">If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="1d87f-874">Jeśli te dwie metody są porównywane metody wystąpienia i tej samej metody dla tego samego obiektu, metody są traktowane jako równe i elementy docelowe również są traktowane jako równe.</span><span class="sxs-lookup"><span data-stu-id="1d87f-874">If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="1d87f-875">W przeciwnym razie metod nie są traktowane jako równe i elementy docelowe również nie są uważane za równe.</span><span class="sxs-lookup"><span data-stu-id="1d87f-875">Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.</span></span>  
  
 <span data-ttu-id="1d87f-876">Dwie listy wywołania nie są takie same, jeśli mają różne rozmiary, jeśli są uporządkowane inaczej lub co najmniej jeden element z listy jeden reprezentuje metody lub docelowego, który różni się od reprezentowany przez jej odpowiadającego mu elementu na liście inne.</span><span class="sxs-lookup"><span data-stu-id="1d87f-876">Two invocation lists are not equal if they have different sizes, if they are ordered differently, or if at least one element from one list represents a method or target that is different from that represented by its corresponding element in the other list.</span></span>  
  
 <span data-ttu-id="1d87f-877">Jest równoważne metodę dla tego operatora <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="1d87f-877">The equivalent method for this operator is <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="1d87f-878">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-878">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="1d87f-879">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-879">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public static Delegate Remove (Delegate source, Delegate value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate Remove(class System.Delegate source, class System.Delegate value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Remove(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Remove (source As Delegate, value As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ Remove(Delegate ^ source, Delegate ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Delegate" />
        <Parameter Name="value" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="1d87f-880">Delegat, z którego mają zostać usunięte wywołanie lista <c>wartość</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-880">The delegate from which to remove the invocation list of <c>value</c>.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="1d87f-881">Delegata, który dostarcza listy wywołania do usunięcia z listy wywołania <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-881">The delegate that supplies the invocation list to remove from the invocation list of <c>source</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1d87f-882">Usuwa ostatniego wystąpienia listy wywołania delegata z listy wywołanie innego obiektu delegowanego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-882">Removes the last occurrence of the invocation list of a delegate from the invocation list of another delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1d87f-883">Nowe delegowanie przy użyciu listy wywołania utworzony listy wywołania <paramref name="source" /> i usuwanie ostatniego wystąpienia listy wywołania <paramref name="value" />, jeśli na liście wywołania <paramref name="value" /> znajduje się na liście wywołania <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-883">A new delegate with an invocation list formed by taking the invocation list of <paramref name="source" /> and removing the last occurrence of the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the invocation list of <paramref name="source" />.</span>
          </span>
          <span data-ttu-id="1d87f-884">Zwraca <paramref name="source" /> Jeśli <paramref name="value" /> jest <see langword="null" /> lub, jeśli na liście wywołania <paramref name="value" /> nie znajduje się na liście wywołania <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-884">Returns <paramref name="source" /> if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the invocation list of <paramref name="source" />.</span>
          </span>
          <span data-ttu-id="1d87f-885">Zwraca odwołanie o wartości null, jeśli na liście wywołania <paramref name="value" /> jest taki sam, jak lista wywołania <paramref name="source" /> lub, jeśli <paramref name="source" /> jest odwołanie o wartości null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-885">Returns a null reference if the invocation list of <paramref name="value" /> is equal to the invocation list of <paramref name="source" /> or if <paramref name="source" /> is a null reference.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d87f-886">Jeśli na liście wywołania `value` odpowiada ciągłe zbiór elementów na liście wywołania `source`, następnie wywołania listę `value` mówimy na liście wywołania `source`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-886">If the invocation list of `value` matches a contiguous set of elements in the invocation list of `source`, then the invocation list of `value` is said to occur within the invocation list of `source`.</span></span> <span data-ttu-id="1d87f-887">Jeśli na liście wywołania `value` występuje więcej niż raz na liście wywołania `source`, ostatnie wystąpienie zostanie usunięta.</span><span class="sxs-lookup"><span data-stu-id="1d87f-887">If the invocation list of `value` occurs more than once in the invocation list of `source`, the last occurrence is removed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="1d87f-888">Obiekt wywołujący nie ma dostępu do metody reprezentowanej przez delegata (na przykład jeśli metoda jest prywatna).</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-888">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1d87f-889">Typy delegatów są niezgodne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-889">The delegate types do not match.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="1d87f-890">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-890">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="1d87f-891">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-891">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.RemoveAll(System.Delegate,System.Delegate)" />
        <altmember cref="M:System.Delegate.RemoveImpl(System.Delegate)" />
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public static Delegate RemoveAll (Delegate source, Delegate value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate RemoveAll(class System.Delegate source, class System.Delegate value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.RemoveAll(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RemoveAll (source As Delegate, value As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ RemoveAll(Delegate ^ source, Delegate ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Delegate" />
        <Parameter Name="value" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="1d87f-892">Delegat, z którego mają zostać usunięte wywołanie lista <c>wartość</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-892">The delegate from which to remove the invocation list of <c>value</c>.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="1d87f-893">Delegata, który dostarcza listy wywołania do usunięcia z listy wywołania <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-893">The delegate that supplies the invocation list to remove from the invocation list of <c>source</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1d87f-894">Usuwa wszystkie wystąpienia listy wywołania delegata z listy wywołanie innego obiektu delegowanego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-894">Removes all occurrences of the invocation list of a delegate from the invocation list of another delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1d87f-895">Nowe delegowanie przy użyciu listy wywołania utworzony listy wywołania <paramref name="source" /> i usunięcie wszystkich wystąpień elementu listy wywołania <paramref name="value" />, jeśli na liście wywołania <paramref name="value" /> znajduje się na liście wywołania <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-895">A new delegate with an invocation list formed by taking the invocation list of <paramref name="source" /> and removing all occurrences of the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the invocation list of <paramref name="source" />.</span>
          </span>
          <span data-ttu-id="1d87f-896">Zwraca <paramref name="source" /> Jeśli <paramref name="value" /> jest <see langword="null" /> lub, jeśli na liście wywołania <paramref name="value" /> nie znajduje się na liście wywołania <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-896">Returns <paramref name="source" /> if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the invocation list of <paramref name="source" />.</span>
          </span>
          <span data-ttu-id="1d87f-897">Zwraca odwołanie o wartości null, jeśli na liście wywołania <paramref name="value" /> jest taki sam, jak lista wywołania <paramref name="source" />, jeśli <paramref name="source" /> zawiera tylko szereg listy wywołania, które są takie same na liście wywołania <paramref name="value" />, lub, jeśli <paramref name="source" /> ma wartość null odwołanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-897">Returns a null reference if the invocation list of <paramref name="value" /> is equal to the invocation list of <paramref name="source" />, if <paramref name="source" /> contains only a series of invocation lists that are equal to the invocation list of <paramref name="value" />, or if <paramref name="source" /> is a null reference.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d87f-898">Jeśli na liście wywołania `value` odpowiada ciągłe zbiór elementów na liście wywołania `source`, następnie wywołania listę `value` mówimy na liście wywołania `source`.</span><span class="sxs-lookup"><span data-stu-id="1d87f-898">If the invocation list of `value` matches a contiguous set of elements in the invocation list of `source`, then the invocation list of `value` is said to occur within the invocation list of `source`.</span></span> <span data-ttu-id="1d87f-899">Jeśli na liście wywołania `value` występuje więcej niż raz na liście wywołania `source`, zostaną usunięte wszystkie wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="1d87f-899">If the invocation list of `value` occurs more than once in the invocation list of `source`, all occurrences are removed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="1d87f-900">Obiekt wywołujący nie ma dostępu do metody reprezentowanej przez delegata (na przykład jeśli metoda jest prywatna).</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-900">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1d87f-901">Typy delegatów są niezgodne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-901">The delegate types do not match.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="1d87f-902">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-902">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="1d87f-903">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-903">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.Remove(System.Delegate,System.Delegate)" />
        <altmember cref="M:System.Delegate.RemoveImpl(System.Delegate)" />
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveImpl">
      <MemberSignature Language="C#" Value="protected virtual Delegate RemoveImpl (Delegate d);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Delegate RemoveImpl(class System.Delegate d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.RemoveImpl(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RemoveImpl (d As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Delegate ^ RemoveImpl(Delegate ^ d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="1d87f-904">Delegat, który dostarcza listy wywołania do usunięcia z listy wywołania bieżącego obiektu delegowanego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-904">The delegate that supplies the invocation list to remove from the invocation list of the current delegate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1d87f-905">Usuwa listy wywołania delegata z listy wywołanie innego obiektu delegowanego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-905">Removes the invocation list of a delegate from the invocation list of another delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1d87f-906">Nowe delegowanie przy użyciu listy wywołania utworzone przez pobranie listy wywołania bieżącego obiektu delegowanego i usuwanie listy wywołania <paramref name="value" />, jeśli na liście wywołania <paramref name="value" /> znajduje się w obrębie listy wywołania bieżącego obiektu delegowanego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-906">A new delegate with an invocation list formed by taking the invocation list of the current delegate and removing the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the current delegate's invocation list.</span>
          </span>
          <span data-ttu-id="1d87f-907">Zwraca bieżący delegata, jeśli <paramref name="value" /> jest <see langword="null" /> lub, jeśli na liście wywołania <paramref name="value" /> nie można odnaleźć w bieżącym delegata wywołania listy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-907">Returns the current delegate if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the current delegate's invocation list.</span>
          </span>
          <span data-ttu-id="1d87f-908">Zwraca <see langword="null" /> Jeśli wywołanie lista <paramref name="value" /> jest taki sam, jak bieżący delegata wywołania listy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-908">Returns <see langword="null" /> if the invocation list of <paramref name="value" /> is equal to the current delegate's invocation list.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d87f-909">Jeśli na liście wywołania `value` odpowiada ciągłe zbiór elementów w bieżącym delegata wywołania listy, a następnie na liście wywołania `value` mówimy w obrębie bieżącego delegata wywołania listy.</span><span class="sxs-lookup"><span data-stu-id="1d87f-909">If the invocation list of `value` matches a contiguous set of elements in the current delegate's invocation list, then the invocation list of `value` is said to occur within the current delegate's invocation list.</span></span> <span data-ttu-id="1d87f-910">Jeśli na liście wywołania `value` występuje więcej niż raz na liście wywołania delegata bieżącego ostatniego wystąpienia zostanie usunięta.</span><span class="sxs-lookup"><span data-stu-id="1d87f-910">If the invocation list of `value` occurs more than once in the current delegate's invocation list, the last occurrence is removed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="1d87f-911">Obiekt wywołujący nie ma dostępu do metody reprezentowanej przez delegata (na przykład jeśli metoda jest prywatna).</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-911">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="1d87f-912">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-912">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="1d87f-913">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-913">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.Remove(System.Delegate,System.Delegate)" />
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="public object Target { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Target" />
      <MemberSignature Language="DocId" Value="P:System.Delegate.Target" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Target As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Target { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1d87f-914">Pobiera wystąpienie klasy, w którym bieżącego obiektu delegowanego wywołuje metodę wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-914">Gets the class instance on which the current delegate invokes the instance method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1d87f-915">Obiekt, na którym bieżącego obiektu delegowanego wywołuje metodę wystąpienia, jeśli delegat reprezentuje metodę wystąpienia; <see langword="null" /> Jeśli delegat reprezentuje metody statycznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-915">The object on which the current delegate invokes the instance method, if the delegate represents an instance method; <see langword="null" /> if the delegate represents a static method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d87f-916">Metoda wystąpienia to metoda, która jest skojarzona z wystąpieniem klasy, natomiast metoda statyczna jest skojarzona z samą klasą.</span><span class="sxs-lookup"><span data-stu-id="1d87f-916">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="1d87f-917">Jeśli delegat wywołuje co najmniej jedną metodę wystąpienia, ta właściwość zwraca docelowy metody ostatniego wystąpienia na liście wywołania.</span><span class="sxs-lookup"><span data-stu-id="1d87f-917">If the delegate invokes one or more instance methods, this property returns the target of the last instance method in the invocation list.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="1d87f-918">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-918">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="1d87f-919">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="1d87f-919">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
  </Members>
</Type>