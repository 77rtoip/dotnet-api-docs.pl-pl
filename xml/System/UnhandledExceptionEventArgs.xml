<Type Name="UnhandledExceptionEventArgs" FullName="System.UnhandledExceptionEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9811531194d62fd50310ad6baf15b7e5d3024df0" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37727025" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class UnhandledExceptionEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit UnhandledExceptionEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.UnhandledExceptionEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class UnhandledExceptionEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class UnhandledExceptionEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type UnhandledExceptionEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Udostępnia dane dla zdarzenia, które jest wywoływane, gdy występuje wyjątek, który nie jest obsługiwany w każdej domenie aplikacji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.UnhandledExceptionEventArgs> zapewnia dostęp do obiektu wyjątku i flagę wskazującą, czy jest przerywany, środowisko uruchomieniowe języka wspólnego. <xref:System.UnhandledExceptionEventArgs> To jeden z parametrów przekazanych do <xref:System.UnhandledExceptionEventHandler> dla <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType> zdarzeń.  
  
 Aby uzyskać więcej informacji na temat delegatów obsługi zdarzeń, zobacz [Handling and Raising Events](~/docs/standard/events/index.md).  
  
 ]]></format>
    </remarks>
    <altmember cref="E:System.AppDomain.UnhandledException" />
    <altmember cref="T:System.UnhandledExceptionEventHandler" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UnhandledExceptionEventArgs (object exception, bool isTerminating);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object exception, bool isTerminating) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (exception As Object, isTerminating As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UnhandledExceptionEventArgs(System::Object ^ exception, bool isTerminating);" />
      <MemberSignature Language="F#" Value="new UnhandledExceptionEventArgs : obj * bool -&gt; UnhandledExceptionEventArgs" Usage="new System.UnhandledExceptionEventArgs (exception, isTerminating)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="exception" Type="System.Object" />
        <Parameter Name="isTerminating" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="exception">Wyjątek, który nie jest obsługiwany.</param>
        <param name="isTerminating">
          <see langword="true" /> Jeśli środowisko wykonawcze jest przerywany; w przeciwnym razie <see langword="false" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.UnhandledExceptionEventArgs" /> klasy z obiektu wyjątku i wspólne Flaga zakończenia środowiska uruchomieniowego języka.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionObject">
      <MemberSignature Language="C#" Value="public object ExceptionObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ExceptionObject" />
      <MemberSignature Language="DocId" Value="P:System.UnhandledExceptionEventArgs.ExceptionObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExceptionObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ExceptionObject { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExceptionObject : obj" Usage="System.UnhandledExceptionEventArgs.ExceptionObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt nieobsługiwany wyjątek.</summary>
        <value>Obiekt nieobsługiwany wyjątek.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość zwraca obiekt typu <xref:System.Object> zamiast jednego pochodną <xref:System.Exception>. Mimo że specyfikacja Common Language Specification wymaga, że wszystkie typy wyjątków pochodzić od <xref:System.Exception>, jest możliwe dla metod, które zgłaszają wyjątki z obiektami, które nie pochodzi od <xref:System.Exception>. Możesz wykonać następujące polecenie, aby pracować z tym wyjątkiem:  
  
-   Zastosuj <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> atrybutem <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows%2A?displayProperty=nameWithType> wartość `true` do zestawu, który zawiera program obsługi zdarzeń. To opakowuje wszystkie wyjątki nie pochodzi od <xref:System.Exception> klasy w <xref:System.Runtime.CompilerServices.RuntimeWrappedException> obiektu. Możesz bezpiecznie rzutowania (w języku C#) lub przekonwertować (w języku Visual Basic) obiektu zwróconego przez tę właściwość, aby <xref:System.Exception> obiektu, a następnie pobrać oryginalny obiekt wyjątku z <xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=nameWithType> właściwości. Należy pamiętać, że niektóre kompilatory, takie jak kompilatory języków C# i Visual Basic automatycznie stosuje się ten atrybut.  
  
-   Rzutowanie obiektu zwróconego przez tę właściwość, aby <xref:System.Exception> obiektu.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano <xref:System.AppDomain.UnhandledException> zdarzeń. Definiuje procedurę obsługi zdarzeń, `MyHandler`, która jest wywoływana zawsze wtedy, gdy wystąpił nieobsługiwany wyjątek jest zgłaszany w domyślnej domeny aplikacji. Następnie wyniku weryfikacji zgłasza wyjątek dwoma wyjątkami. Pierwszy jest obsługiwany przez **bloku try/catch** bloku. Drugi nie jest obsługiwana i wywołuje `MyHandle` procedury, zanim aplikacja zakończy.  
  
 [!code-cpp[AppDomain_UnhandledException#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_UnhandledException/CPP/unhandledexception.cpp#1)]
 [!code-csharp[AppDomain_UnhandledException#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_UnhandledException/CS/unhandledexception.cs#1)]
 [!code-vb[AppDomain_UnhandledException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_UnhandledException/VB/unhandledexception.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute" />
        <altmember cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" />
      </Docs>
    </Member>
    <Member MemberName="IsTerminating">
      <MemberSignature Language="C#" Value="public bool IsTerminating { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTerminating" />
      <MemberSignature Language="DocId" Value="P:System.UnhandledExceptionEventArgs.IsTerminating" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsTerminating As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTerminating { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsTerminating : bool" Usage="System.UnhandledExceptionEventArgs.IsTerminating" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wskazuje, czy jest przerywany, środowisko uruchomieniowe języka wspólnego.</summary>
        <value>
          <see langword="true" /> Jeśli środowisko wykonawcze jest przerywany; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Począwszy od programu .NET Framework w wersji 2.0, właściwość ta zwraca `true` dla większości nieobsługiwane wyjątki, chyba że używana jest flaga zgodności aplikacji, aby powrócić do zachowania w wersjach 1.0 i 1.1. Przyczyną jest to najbardziej nieobsługiwanych wyjątków w wątkach, łącznie z wątków z puli wątków, będą mogli kontynuować naturalnie, co zwykle powoduje w zakończeniu działania aplikacji. Aby uzyskać więcej informacji, łącznie z listą przypadki, w których środowisko uruchomieniowe nie kończy się, zobacz [wyjątki w zarządzanych wątkach](~/docs/standard/threading/exceptions-in-managed-threads.md).  
  
## <a name="version-information"></a>Informacje o wersji  
 Poniższe uwagi dotyczą wersji systemu .NET Framework 1.0 i 1.1: Ta właściwość zwraca `true` po trafiła do wyjątku, ale nie jest obsługiwany przez wątku głównego aplikacji. Właściwość ta zwraca również wartość `true` Jeśli wątek niezarządzany wykonuje kod zarządzany i otrzyma nieobsługiwany wyjątek. Na koniec ta właściwość zwraca `false` wątków z puli wątków i wątki zarządzane utworzone przez aplikację, ponieważ w wersjach 1.0 i 1.1 catch nieobsługiwanych wyjątków w tych wątkach i je ignorować.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>