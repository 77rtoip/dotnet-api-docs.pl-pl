<Type Name="UnhandledExceptionEventArgs" FullName="System.UnhandledExceptionEventArgs">
  <TypeSignature Language="C#" Value="public class UnhandledExceptionEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit UnhandledExceptionEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.UnhandledExceptionEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class UnhandledExceptionEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class UnhandledExceptionEventArgs : EventArgs" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="af530-101">Udostępnia dane dla zdarzenia, które jest wywoływane, gdy występuje wyjątek, który nie jest obsługiwany w dowolnej domenie aplikacji.</span><span class="sxs-lookup"><span data-stu-id="af530-101">Provides data for the event that is raised when there is an exception that is not handled in any application domain.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af530-102"><xref:System.UnhandledExceptionEventArgs> zapewnia dostęp do obiektu wyjątku i flagę wskazującą, czy środowisko uruchomieniowe języka wspólnego kończy działanie wątku.</span><span class="sxs-lookup"><span data-stu-id="af530-102"><xref:System.UnhandledExceptionEventArgs> provides access to the exception object and a flag indicating whether the common language runtime is terminating.</span></span> <span data-ttu-id="af530-103"><xref:System.UnhandledExceptionEventArgs> Jest jednym z parametrów przekazanych do <xref:System.UnhandledExceptionEventHandler> dla <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType> zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="af530-103">The <xref:System.UnhandledExceptionEventArgs> is one of the parameters passed into <xref:System.UnhandledExceptionEventHandler> for the <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType> event.</span></span>  
  
 <span data-ttu-id="af530-104">Aby uzyskać więcej informacji na temat delegatów obsługi zdarzeń, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).</span><span class="sxs-lookup"><span data-stu-id="af530-104">For more information about event handler delegates, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="E:System.AppDomain.UnhandledException" />
    <altmember cref="T:System.UnhandledExceptionEventHandler" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UnhandledExceptionEventArgs (object exception, bool isTerminating);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object exception, bool isTerminating) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (exception As Object, isTerminating As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UnhandledExceptionEventArgs(System::Object ^ exception, bool isTerminating);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="exception" Type="System.Object" />
        <Parameter Name="isTerminating" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="exception"><span data-ttu-id="af530-105">Wyjątek, który nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="af530-105">The exception that is not handled.</span></span></param>
        <param name="isTerminating">
          <span data-ttu-id="af530-106"><see langword="true" /> Jeśli środowisko uruchomieniowe przerywa; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="af530-106"><see langword="true" /> if the runtime is terminating; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="af530-107">Inicjuje nowe wystąpienie klasy <see cref="T:System.UnhandledExceptionEventArgs" /> klasy z obiektu wyjątku i wspólne flagi zakończenia środowiska uruchomieniowego języka.</span><span class="sxs-lookup"><span data-stu-id="af530-107">Initializes a new instance of the <see cref="T:System.UnhandledExceptionEventArgs" /> class with the exception object and a common language runtime termination flag.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionObject">
      <MemberSignature Language="C#" Value="public object ExceptionObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ExceptionObject" />
      <MemberSignature Language="DocId" Value="P:System.UnhandledExceptionEventArgs.ExceptionObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExceptionObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ExceptionObject { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="af530-108">Pobiera obiekt nieobsługiwany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="af530-108">Gets the unhandled exception object.</span></span></summary>
        <value><span data-ttu-id="af530-109">Obiekt nieobsługiwany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="af530-109">The unhandled exception object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af530-110">Ta właściwość zwraca obiekt typu <xref:System.Object> zamiast jedną pochodną <xref:System.Exception>.</span><span class="sxs-lookup"><span data-stu-id="af530-110">This property returns an object of type <xref:System.Object> rather than one derived from <xref:System.Exception>.</span></span> <span data-ttu-id="af530-111">Specyfikacja języka wspólnego wymaga, że wszystkie typy wyjątek pochodzi z <xref:System.Exception>, istnieje możliwość zgłaszanie wyjątków z obiektami nie pochodzi z metody <xref:System.Exception>.</span><span class="sxs-lookup"><span data-stu-id="af530-111">Although the Common Language Specification requires that all exception types derive from <xref:System.Exception>, it is possible for methods to throw exceptions with objects not derived from <xref:System.Exception>.</span></span> <span data-ttu-id="af530-112">Można wykonać następujące czynności, aby pracować z tego wyjątku:</span><span class="sxs-lookup"><span data-stu-id="af530-112">You can do the following to work with this exception:</span></span>  
  
-   <span data-ttu-id="af530-113">Zastosuj <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> atrybutem <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows%2A?displayProperty=nameWithType> wartość `true` do zestawu, który zawiera program obsługi zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="af530-113">Apply the  <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> attribute with a <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows%2A?displayProperty=nameWithType> value of `true` to the assembly that contains the event handler.</span></span> <span data-ttu-id="af530-114">To opakowuje wszystkie wyjątki nie pochodzi od <xref:System.Exception> klasy w <xref:System.Runtime.CompilerServices.RuntimeWrappedException> obiektu.</span><span class="sxs-lookup"><span data-stu-id="af530-114">This wraps all exceptions not derived from the <xref:System.Exception> class in a <xref:System.Runtime.CompilerServices.RuntimeWrappedException> object.</span></span> <span data-ttu-id="af530-115">Można bezpiecznie rzutowanie (C#) lub przekonwertować (w języku Visual Basic) obiektu zwracanego przez tę właściwość, aby <xref:System.Exception> obiektu i pobrać oryginalnego obiektu wyjątek <xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=nameWithType> właściwości.</span><span class="sxs-lookup"><span data-stu-id="af530-115">You can then safely cast (in C#) or convert (in Visual Basic) the object returned by this property to an <xref:System.Exception> object, and retrieve the original exception object from the <xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="af530-116">Należy pamiętać, że niektóre kompilatory, takich jak C# i Visual Basic kompilatorów automatycznie zastosowaniu tego atrybutu.</span><span class="sxs-lookup"><span data-stu-id="af530-116">Note that some compilers, such as the C# and Visual Basic compilers, automatically apply this attribute.</span></span>  
  
-   <span data-ttu-id="af530-117">Rzutowanie tego obiektu zwracane przez tę właściwość, aby <xref:System.Exception> obiektu.</span><span class="sxs-lookup"><span data-stu-id="af530-117">Cast the object returned by this property to an <xref:System.Exception> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af530-118">W poniższym przykładzie pokazano <xref:System.AppDomain.UnhandledException> zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="af530-118">The following example demonstrates the <xref:System.AppDomain.UnhandledException> event.</span></span> <span data-ttu-id="af530-119">Definiuje program obsługi zdarzeń `MyHandler`, które jest wywoływane zawsze, gdy wystąpił nieobsługiwany wyjątek jest zgłaszany w domyślnej domeny aplikacji.</span><span class="sxs-lookup"><span data-stu-id="af530-119">It defines an event handler, `MyHandler`, that is invoked whenever an unhandled exception is thrown in the default application domain.</span></span> <span data-ttu-id="af530-120">Zgłasza dwa wyjątki.</span><span class="sxs-lookup"><span data-stu-id="af530-120">It then throws two exceptions.</span></span> <span data-ttu-id="af530-121">Pierwszy jest obsługiwany przez **bloku try/catch** bloku.</span><span class="sxs-lookup"><span data-stu-id="af530-121">The first is handled by a **try/catch** block.</span></span> <span data-ttu-id="af530-122">Drugim jest nieobsługiwany i wywołuje `MyHandle` procedury przed kończy aplikacji.</span><span class="sxs-lookup"><span data-stu-id="af530-122">The second is unhandled and invokes the `MyHandle` routine before the application terminates.</span></span>  
  
 [!code-cpp[AppDomain_UnhandledException#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_UnhandledException/CPP/unhandledexception.cpp#1)]
 [!code-csharp[AppDomain_UnhandledException#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_UnhandledException/CS/unhandledexception.cs#1)]
 [!code-vb[AppDomain_UnhandledException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_UnhandledException/VB/unhandledexception.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute" />
        <altmember cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" />
      </Docs>
    </Member>
    <Member MemberName="IsTerminating">
      <MemberSignature Language="C#" Value="public bool IsTerminating { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTerminating" />
      <MemberSignature Language="DocId" Value="P:System.UnhandledExceptionEventArgs.IsTerminating" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsTerminating As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTerminating { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="af530-123">Wskazuje, czy środowisko uruchomieniowe języka wspólnego kończy działanie wątku.</span><span class="sxs-lookup"><span data-stu-id="af530-123">Indicates whether the common language runtime is terminating.</span></span></summary>
        <value>
          <span data-ttu-id="af530-124"><see langword="true" /> Jeśli środowisko uruchomieniowe przerywa; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="af530-124"><see langword="true" /> if the runtime is terminating; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af530-125">Począwszy od programu .NET Framework w wersji 2.0, ta właściwość zwraca `true` dla większości nieobsługiwane wyjątki, chyba że używana jest flaga zgodności aplikacji, aby powrócić do zachowania w wersjach 1.0 i 1.1.</span><span class="sxs-lookup"><span data-stu-id="af530-125">Beginning with the .NET Framework version 2.0, this property returns `true` for most unhandled exceptions, unless an application compatibility flag is used to revert to the behavior of versions 1.0 and 1.1.</span></span> <span data-ttu-id="af530-126">Przyczyną jest możliwość najbardziej nieobsługiwanych wyjątków w wątkach, łącznie z wątków z puli wątków, aby kontynuować naturalnie, które zwykle powoduje przerwanie aplikacji.</span><span class="sxs-lookup"><span data-stu-id="af530-126">The reason is that most unhandled exceptions in threads, including thread pool threads, are allowed to proceed naturally, which normally results in termination of the application.</span></span> <span data-ttu-id="af530-127">Aby uzyskać więcej informacji, łącznie z listą przypadków, w których środowisko uruchomieniowe nie kończy się, zobacz [wyjątki w zarządzanych wątkach](~/docs/standard/threading/exceptions-in-managed-threads.md).</span><span class="sxs-lookup"><span data-stu-id="af530-127">For more information, including a list of cases in which the runtime does not terminate, see [Exceptions in Managed Threads](~/docs/standard/threading/exceptions-in-managed-threads.md).</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="af530-128">Informacje o wersji</span><span class="sxs-lookup"><span data-stu-id="af530-128">Version Information</span></span>  
 <span data-ttu-id="af530-129">Poniższe uwagi dotyczą wersji systemu .NET Framework 1.0 i 1.1: Ta właściwość zwraca `true` gdy otrzymane w wyjątek, ale nie są obsługiwane przez wątku głównego aplikacji.</span><span class="sxs-lookup"><span data-stu-id="af530-129">The following applies to the .NET Framework versions 1.0 and 1.1: This property returns `true` when an exception is received in, but not handled by, an application's main thread.</span></span> <span data-ttu-id="af530-130">Ta właściwość zwraca również wartość `true` gdy niezarządzany wątek jest wykonywanie kodu zarządzanego i odbiera nieobsługiwany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="af530-130">This property also returns `true` if an unmanaged thread is executing managed code and receives an unhandled exception.</span></span> <span data-ttu-id="af530-131">Ponadto ta właściwość zwraca `false` wątków z puli wątków i zarządzanych wątków utworzone przez aplikację, ponieważ w wersjach 1.0 i 1.1 catch nieobsługiwanych wyjątków w takich wątków i je zignorować.</span><span class="sxs-lookup"><span data-stu-id="af530-131">Finally, this property returns `false` for thread pool threads and managed threads created by an application, because versions 1.0 and 1.1 catch unhandled exceptions in such threads and ignore them.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>