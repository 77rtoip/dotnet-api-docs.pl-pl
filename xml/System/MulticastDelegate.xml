<Type Name="MulticastDelegate" FullName="System.MulticastDelegate">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="53d55fb65dda42d603fed586e14887c2801674c9" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36431082" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class MulticastDelegate : Delegate" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract serializable beforefieldinit MulticastDelegate extends System.Delegate" />
  <TypeSignature Language="DocId" Value="T:System.MulticastDelegate" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MulticastDelegate&#xA;Inherits Delegate" />
  <TypeSignature Language="C++ CLI" Value="public ref class MulticastDelegate abstract : Delegate" />
  <TypeSignature Language="F#" Value="type MulticastDelegate = class&#xA;    inherit Delegate" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="ab09a-101">Reprezentuje delegata, multiemisji; oznacza to, który może mieć więcej niż jeden element na liście wywołania delegata.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ab09a-101">Represents a multicast delegate; that is, a delegate that can have more than one element in its invocation list.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab09a-102"><xref:System.MulticastDelegate> jest klasą specjalnych.</span><span class="sxs-lookup"><span data-stu-id="ab09a-102"><xref:System.MulticastDelegate> is a special class.</span></span> <span data-ttu-id="ab09a-103">Kompilatory i inne narzędzia mogą dziedziczyć po tej klasie, ale nie może pochodzić od niego jawnie.</span><span class="sxs-lookup"><span data-stu-id="ab09a-103">Compilers and other tools can derive from this class, but you cannot derive from it explicitly.</span></span> <span data-ttu-id="ab09a-104">To samo dotyczy z <xref:System.Delegate> klasy.</span><span class="sxs-lookup"><span data-stu-id="ab09a-104">The same is true of the <xref:System.Delegate> class.</span></span>  
  
 <span data-ttu-id="ab09a-105">Oprócz metod, które typów delegatów dziedziczyć <xref:System.MulticastDelegate>, środowisko uruchomieniowe języka wspólnego udostępnia dwie metody specjalne: `BeginInvoke` i `EndInvoke`.</span><span class="sxs-lookup"><span data-stu-id="ab09a-105">In addition to the methods that delegate types inherit from <xref:System.MulticastDelegate>, the common language runtime provides two special methods: `BeginInvoke` and `EndInvoke`.</span></span> <span data-ttu-id="ab09a-106">Aby uzyskać więcej informacji na temat tych metod, zobacz [wywołanie asynchroniczne synchroniczne metody](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span><span class="sxs-lookup"><span data-stu-id="ab09a-106">For more information about these methods, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 <span data-ttu-id="ab09a-107">A <xref:System.MulticastDelegate> ma połączonej listy obiektów delegowanych, nazywany listy wywołania składające się z co najmniej jeden element.</span><span class="sxs-lookup"><span data-stu-id="ab09a-107">A <xref:System.MulticastDelegate> has a linked list of delegates, called an invocation list, consisting of one or more elements.</span></span> <span data-ttu-id="ab09a-108">Po wywołaniu multiemisji delegata delegatów na liście wywołania są nazywane synchronicznie w kolejności ich występowania.</span><span class="sxs-lookup"><span data-stu-id="ab09a-108">When a multicast delegate is invoked, the delegates in the invocation list are called synchronously in the order in which they appear.</span></span> <span data-ttu-id="ab09a-109">Jeśli wystąpi błąd podczas wykonywania listy jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="ab09a-109">If an error occurs during execution of the list then an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ab09a-110">W poniższym przykładzie zdefiniowano klasę, `StringContainer`, która obejmuje kolekcji ciągów.</span><span class="sxs-lookup"><span data-stu-id="ab09a-110">The following example defines a class, `StringContainer`, which includes a collection of strings.</span></span> <span data-ttu-id="ab09a-111">Jeden z jego elementów członkowskich `CheckAndDisplayDelegate` delegata, która jest używana do wyświetlania ciągi przechowywane w `StringContainer` spełniają kryteria określonego obiektu.</span><span class="sxs-lookup"><span data-stu-id="ab09a-111">One of its members is the `CheckAndDisplayDelegate` delegate, which is used to display strings stored in a `StringContainer` object that satisfy particular criteria.</span></span> <span data-ttu-id="ab09a-112">Delegat przyjmuje jeden ciąg jako parametr i zwraca `void` (lub w języku Visual Basic, jest `Sub` procedury).</span><span class="sxs-lookup"><span data-stu-id="ab09a-112">The delegate takes a single string as a parameter and returns `void` (or, in Visual Basic, it's a `Sub` procedure).</span></span> <span data-ttu-id="ab09a-113">Zawiera również metody, `DisplayAllQualified`, który ma jeden parametr, `CheckAndDisplayDelegate` delegowanie.</span><span class="sxs-lookup"><span data-stu-id="ab09a-113">It also includes a method, `DisplayAllQualified`, that has a single parameter, a `CheckAndDisplayDelegate` delegate.</span></span> <span data-ttu-id="ab09a-114">Dzięki temu można wywołać metodę i aby wyświetlić zestaw parametrów, które zostały przefiltrowane na podstawie metody, które zawiera delegata.</span><span class="sxs-lookup"><span data-stu-id="ab09a-114">This allows the method to be called and to display a set of strings that are filtered based on the methods that the delegate contains.</span></span>  
  
 <span data-ttu-id="ab09a-115">Przykład również definiuje klasę narzędzie `StringExtensions`, która ma dwóch metod:</span><span class="sxs-lookup"><span data-stu-id="ab09a-115">The example also defines a utility class, `StringExtensions`, that has two methods:</span></span>  
  
-   <span data-ttu-id="ab09a-116">`ConStart`, który zawiera ciągi rozpoczynające się od spółgłoską.</span><span class="sxs-lookup"><span data-stu-id="ab09a-116">`ConStart`, which displays strings that begin with a consonant.</span></span>  
  
-   <span data-ttu-id="ab09a-117">`VowelStart`, który zawiera ciągi rozpoczynające się od samogłosek.</span><span class="sxs-lookup"><span data-stu-id="ab09a-117">`VowelStart`, which displays strings that begin with a vowel.</span></span>  
  
 <span data-ttu-id="ab09a-118">Należy pamiętać, że obie metody obejmują parametr będący pojedynczym ciągiem i zwraca `void`.</span><span class="sxs-lookup"><span data-stu-id="ab09a-118">Note that both methods include a single string parameter and return `void`.</span></span> <span data-ttu-id="ab09a-119">Innymi słowy, obie metody mogą być przypisane do `CheckAndDisplayDelegate` delegowanie.</span><span class="sxs-lookup"><span data-stu-id="ab09a-119">In other words, both methods can be assigned to the  `CheckAndDisplayDelegate` delegate.</span></span>  
  
 <span data-ttu-id="ab09a-120">`Test.Main` Metoda jest punkt wejścia aplikacji.</span><span class="sxs-lookup"><span data-stu-id="ab09a-120">The `Test.Main` method is the application entry point.</span></span> <span data-ttu-id="ab09a-121">Metoda tworzy `StringContainer` obiekt, wypełnia ciągów i utworzenie dwóch `CheckAndDisplayDelegate` delegatów, `conStart` i `vowelStart`, który wywołania pojedynczej metody.</span><span class="sxs-lookup"><span data-stu-id="ab09a-121">It instantiates a `StringContainer` object, populates it with strings, and creates two `CheckAndDisplayDelegate` delegates, `conStart` and `vowelStart`, that invoke a single method.</span></span> <span data-ttu-id="ab09a-122">Następnie wywołuje <xref:System.Delegate.Combine%2A?displayProperty=nameWithType> metodę w celu utworzenia `multipleDelegates` delegata, który początkowo zawiera `ConStart` i `VowelStart` delegatów.</span><span class="sxs-lookup"><span data-stu-id="ab09a-122">It then calls the <xref:System.Delegate.Combine%2A?displayProperty=nameWithType> method to create the `multipleDelegates` delegate, which initially contains the `ConStart` and  `VowelStart` delegates.</span></span> <span data-ttu-id="ab09a-123">Należy pamiętać, że w przypadku `multipleDelegates` jest wywoływany delegat, wyświetlane są wszystkie ciągi w kolekcji w oryginalnym porządku.</span><span class="sxs-lookup"><span data-stu-id="ab09a-123">Note that when the `multipleDelegates` delegate is invoked, it displays all the strings in the collection in their original order.</span></span> <span data-ttu-id="ab09a-124">To dlatego każdej litery są przekazywane osobno do każdej delegata i każdej litery spełnia kryteria filtrowania tylko jednej z dwóch obiektów delegowanych.</span><span class="sxs-lookup"><span data-stu-id="ab09a-124">This is because each letter is passed separately to each delegate, and each letter meets the filtering criteria of only one of the two delegates.</span></span> <span data-ttu-id="ab09a-125">Na koniec, po wywołań <xref:System.Delegate.Remove%2A?displayProperty=nameWithType> i <xref:System.Delegate.Combine%2A?displayProperty=nameWithType>, `multipleDelegates` zawiera dwa `conStart` delegatów.</span><span class="sxs-lookup"><span data-stu-id="ab09a-125">Finally, after calls to <xref:System.Delegate.Remove%2A?displayProperty=nameWithType> and <xref:System.Delegate.Combine%2A?displayProperty=nameWithType>, `multipleDelegates` contains two `conStart` delegates.</span></span> <span data-ttu-id="ab09a-126">Gdy jest wywoływana, każdy ciąg `StringContainer` obiekt jest wyświetlany dwa razy.</span><span class="sxs-lookup"><span data-stu-id="ab09a-126">When it is invoked, each string in the `StringContainer` object is displayed twice.</span></span>  
  
 [!code-cpp[Multicast Delegate Introduction#1](~/samples/snippets/cpp/VS_Snippets_CLR/Multicast Delegate Introduction/CPP/delegatestring.cpp#1)]
 [!code-csharp[Multicast Delegate Introduction#1](~/samples/snippets/csharp/VS_Snippets_CLR/Multicast Delegate Introduction/CS/delegatestring.cs#1)]
 [!code-vb[Multicast Delegate Introduction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Multicast Delegate Introduction/VB/delegatestring.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ab09a-127">Inicjuje nowe wystąpienie klasy <see cref="T:System.MulticastDelegate" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-127">Initializes a new instance of the <see cref="T:System.MulticastDelegate" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MulticastDelegate (object target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(object target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MulticastDelegate.#ctor(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (target As Object, method As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MulticastDelegate(System::Object ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="new MulticastDelegate : obj * string -&gt; MulticastDelegate" Usage="new System.MulticastDelegate (target, method)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="ab09a-128">Obiekt, w którym <c>metoda</c> jest zdefiniowana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-128">The object on which <c>method</c> is defined.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="ab09a-129">Nazwa metody, dla której utworzona jest delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-129">The name of the method for which a delegate is created.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ab09a-130">Inicjuje nowe wystąpienie klasy <see cref="T:System.MulticastDelegate" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-130">Initializes a new instance of the <see cref="T:System.MulticastDelegate" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab09a-131">Ten konstruktor nie można używać w kodzie aplikacji.</span><span class="sxs-lookup"><span data-stu-id="ab09a-131">This constructor cannot be used in application code.</span></span> <span data-ttu-id="ab09a-132">Aby utworzyć delegata, określając nazwę metody wystąpienia, należy użyć przeciążenia <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> metodę, która określa nazwę metody i obiekt docelowy.</span><span class="sxs-lookup"><span data-stu-id="ab09a-132">To create a delegate by specifying the name of an instance method, use an overload of the <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> method that specifies a method name and a target object.</span></span> <span data-ttu-id="ab09a-133">Na przykład <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%29?displayProperty=nameWithType> przeciążenie metody tworzy delegowany do metody wystąpienia o określonej nazwie.</span><span class="sxs-lookup"><span data-stu-id="ab09a-133">For example, the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%29?displayProperty=nameWithType> method overload creates a delegate for an instance method with a specified name.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="ab09a-134">Nie można utworzyć wystąpienia klasy abstrakcyjnej, lub ten element członkowski został wywołany z mechanizmem późnego wiązania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-134">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="ab09a-135">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-135">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="ab09a-136">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-136">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MulticastDelegate (Type target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Type target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MulticastDelegate.#ctor(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (target As Type, method As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MulticastDelegate(Type ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="new MulticastDelegate : Type * string -&gt; MulticastDelegate" Usage="new System.MulticastDelegate (target, method)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="target" Type="System.Type" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="ab09a-137">Typ obiektu, na którym <c>metoda</c> jest zdefiniowana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-137">The type of object on which <c>method</c> is defined.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="ab09a-138">Nazwa metody statycznej, dla której utworzona jest delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-138">The name of the static method for which a delegate is created.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ab09a-139">Inicjuje nowe wystąpienie klasy <see cref="T:System.MulticastDelegate" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-139">Initializes a new instance of the <see cref="T:System.MulticastDelegate" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab09a-140">Ten konstruktor nie można używać w kodzie aplikacji.</span><span class="sxs-lookup"><span data-stu-id="ab09a-140">This constructor cannot be used in application code.</span></span> <span data-ttu-id="ab09a-141">Do utworzenia delegata, określając nazwę metody statycznej, użyj przeciążenia <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> metodę, która określa nazwę metody, ale nie określa obiektu docelowego.</span><span class="sxs-lookup"><span data-stu-id="ab09a-141">To create a delegate by specifying the name of a static method, use an overload of the <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> method that specifies a method name but does not specify a target object.</span></span> <span data-ttu-id="ab09a-142">Na przykład <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%29?displayProperty=nameWithType> przeciążenie metody tworzy delegata statycznej metody o określonej nazwie.</span><span class="sxs-lookup"><span data-stu-id="ab09a-142">For example, the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%29?displayProperty=nameWithType> method overload creates a static delegate for a method with a specified name.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="ab09a-143">Nie można utworzyć wystąpienia klasy abstrakcyjnej, lub ten element członkowski został wywołany z mechanizmem późnego wiązania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-143">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="ab09a-144">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-144">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="ab09a-145">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-145">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="CombineImpl">
      <MemberSignature Language="C#" Value="protected override sealed Delegate CombineImpl (Delegate follow);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Delegate CombineImpl(class System.Delegate follow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MulticastDelegate.CombineImpl(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Function CombineImpl (follow As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override Delegate ^ CombineImpl(Delegate ^ follow);" />
      <MemberSignature Language="F#" Value="override this.CombineImpl : Delegate -&gt; Delegate" Usage="multicastDelegate.CombineImpl follow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="follow" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="follow">
          <span data-ttu-id="ab09a-146">Delegat do łączenia z tym obiektem delegowanym.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-146">The delegate to combine with this delegate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ab09a-147">Łączy to <see cref="T:System.Delegate" /> z określonym <see cref="T:System.Delegate" /> do utworzenia nowego obiektu delegowanego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-147">Combines this <see cref="T:System.Delegate" /> with the specified <see cref="T:System.Delegate" /> to form a new delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ab09a-148">A czyli przekazać nowy katalog główny <see cref="T:System.MulticastDelegate" /> listy wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-148">A delegate that is the new root of the <see cref="T:System.MulticastDelegate" /> invocation list.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ab09a-149">
            <paramref name="follow" /> nie ma tego samego typu co tego wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-149">
              <paramref name="follow" /> does not have the same type as this instance.</span>
          </span>
        </exception>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="ab09a-150">Nie można utworzyć wystąpienia klasy abstrakcyjnej, lub ten element członkowski został wywołany z mechanizmem późnego wiązania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-150">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="ab09a-151">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-151">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="ab09a-152">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-152">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="DynamicInvokeImpl">
      <MemberSignature Language="C#" Value="protected override sealed object DynamicInvokeImpl (object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object DynamicInvokeImpl(object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MulticastDelegate.DynamicInvokeImpl(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Function DynamicInvokeImpl (args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Object ^ DynamicInvokeImpl(cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="override this.DynamicInvokeImpl : obj[] -&gt; obj" Usage="multicastDelegate.DynamicInvokeImpl args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override sealed bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MulticastDelegate.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="multicastDelegate.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="ab09a-153">Obiekt, który ma zostać porównany z tym wystąpieniem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-153">The object to compare with this instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ab09a-154">Określa, czy ten delegat multiemisji i określonego obiektu są takie same.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-154">Determines whether this multicast delegate and the specified object are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ab09a-155">
            <see langword="true" /> Jeśli <paramref name="obj" /> i to wystąpienie mają tej samej listy wywołania; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-155">
              <see langword="true" /> if <paramref name="obj" /> and this instance have the same invocation lists; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab09a-156">Dwa obiekty delegowane są takie same, jeśli nie są one `null` i są dokładnie tego samego typu, ich listy wywołania zawierają tę samą liczbę elementów, a każdy element na liście wywołania delegata pierwszy jest równa odpowiadającego mu elementu wywołania Lista drugi delegata.</span><span class="sxs-lookup"><span data-stu-id="ab09a-156">Two delegates are equal if they are not `null` and are of exactly the same type, their invocation lists contain the same number of elements, and every element in the invocation list of the first delegate is equal to the corresponding element in the invocation list of the second delegate.</span></span>  
  
 <span data-ttu-id="ab09a-157">Dwa elementy listy wywołania są takie same, jeśli ich wywołanie tej samej metody wystąpienia tego samego wystąpienia docelowego lub ich wywołanie tej samej metody statycznej.</span><span class="sxs-lookup"><span data-stu-id="ab09a-157">Two invocation list elements are equal if they invoke the same instance method on the same target instance, or they invoke the same static method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="ab09a-158">Nie można utworzyć wystąpienia klasy abstrakcyjnej, lub ten element członkowski został wywołany z mechanizmem późnego wiązania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-158">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="ab09a-159">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-159">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="ab09a-160">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-160">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override sealed int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MulticastDelegate.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="multicastDelegate.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ab09a-161">Zwraca kod skrótu dla tego wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-161">Returns the hash code for this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ab09a-162">Kod skrótu 32-bitowej liczby całkowitej ze znakiem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-162">A 32-bit signed integer hash code.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="ab09a-163">Nie można utworzyć wystąpienia klasy abstrakcyjnej, lub ten element członkowski został wywołany z mechanizmem późnego wiązania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-163">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="ab09a-164">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-164">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="ab09a-165">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-165">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetInvocationList">
      <MemberSignature Language="C#" Value="public override sealed Delegate[] GetInvocationList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Delegate[] GetInvocationList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MulticastDelegate.GetInvocationList" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function GetInvocationList () As Delegate()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;Delegate ^&gt; ^ GetInvocationList();" />
      <MemberSignature Language="F#" Value="override this.GetInvocationList : unit -&gt; Delegate[]" Usage="multicastDelegate.GetInvocationList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ab09a-166">Zwraca listę wywołania tego obiektu delegowanego multiemisji, w kolejności wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-166">Returns the invocation list of this multicast delegate, in invocation order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ab09a-167">Tablica obiektów delegowanych, którego wywołania wymieniono zbiorczo zgodny z listą wywołania tego wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-167">An array of delegates whose invocation lists collectively match the invocation list of this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab09a-168">Tablica zawiera zestaw obiektów delegowanych, każde z nich listę wywołań o jedną pozycję.</span><span class="sxs-lookup"><span data-stu-id="ab09a-168">The array contains a set of delegates, each with an invocation list of one entry.</span></span> <span data-ttu-id="ab09a-169">Wywoływanie tych obiektów delegowanych sekwencyjnie, w kolejności, w jakiej występują w tablicy, jest taki sam jak wywoływanie bieżącego wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="ab09a-169">Invoking these delegates sequentially, in the order they appear in the array, produces the same results as invoking the current instance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="ab09a-170">Nie można utworzyć wystąpienia klasy abstrakcyjnej, lub ten element członkowski został wywołany z mechanizmem późnego wiązania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-170">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="ab09a-171">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-171">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="ab09a-172">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-172">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImpl">
      <MemberSignature Language="C#" Value="protected override System.Reflection.MethodInfo GetMethodImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Reflection.MethodInfo GetMethodImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MulticastDelegate.GetMethodImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetMethodImpl () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Reflection::MethodInfo ^ GetMethodImpl();" />
      <MemberSignature Language="F#" Value="override this.GetMethodImpl : unit -&gt; System.Reflection.MethodInfo" Usage="multicastDelegate.GetMethodImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ab09a-173">Zwraca metody statycznej reprezentowany przez bieżący <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-173">Returns a static method represented by the current <see cref="T:System.MulticastDelegate" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ab09a-174">Metody statycznej reprezentowany przez bieżący <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-174">A static method represented by the current <see cref="T:System.MulticastDelegate" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab09a-175">Jeśli <xref:System.MulticastDelegate> reprezentuje wiele metod, zwracany jest tylko jedna metoda.</span><span class="sxs-lookup"><span data-stu-id="ab09a-175">If the <xref:System.MulticastDelegate> represents multiple methods, only one method is returned.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MulticastDelegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="multicastDelegate.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="ab09a-176">Obiekt, który przechowuje wszystkie dane potrzebne do serializacji lub deserializacji tego wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-176">An object that holds all the data needed to serialize or deserialize this instance.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="ab09a-177">(Zastrzeżone) Lokalizacja, w którym dane serializowane są przechowywane i pobierane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-177">(Reserved) The location where serialized data is stored and retrieved.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ab09a-178">Wypełnia <see cref="T:System.Runtime.Serialization.SerializationInfo" /> obiektu z wszystkie dane potrzebne do serializacji tego wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-178">Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with all the data needed to serialize this instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab09a-179">Ta metoda przechowuje wszystkie informacje w `info` niezbędne do serializowania tego wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="ab09a-179">This method stores all the information in `info` necessary to serialize this instance.</span></span>  
  
 <span data-ttu-id="ab09a-180">`context` Parametr jest zarezerwowany i nie jest obecnie używany podczas wykonywania tej metody.</span><span class="sxs-lookup"><span data-stu-id="ab09a-180">The `context` parameter is reserved and is not currently used in the execution of this method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ab09a-181">
            <paramref name="info" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-181">
              <paramref name="info" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="ab09a-182">Nie można utworzyć wystąpienia klasy abstrakcyjnej, lub ten element członkowski został wywołany z mechanizmem późnego wiązania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-182">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span>
          </span>
        </exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">
          <span data-ttu-id="ab09a-183">Wystąpił błąd serializacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-183">A serialization error occurred.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="ab09a-184">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-184">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="ab09a-185">Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-185">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (MulticastDelegate d1, MulticastDelegate d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.MulticastDelegate d1, class System.MulticastDelegate d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (d1 As MulticastDelegate, d2 As MulticastDelegate) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(MulticastDelegate ^ d1, MulticastDelegate ^ d2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : MulticastDelegate * MulticastDelegate -&gt; bool" Usage="d1 = d2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.MulticastDelegate" />
        <Parameter Name="d2" Type="System.MulticastDelegate" />
      </Parameters>
      <Docs>
        <param name="d1">
          <span data-ttu-id="ab09a-186">Lewy argument operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-186">The left operand.</span>
          </span>
        </param>
        <param name="d2">
          <span data-ttu-id="ab09a-187">Prawy argument operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-187">The right operand.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ab09a-188">Określa, czy dwa <see cref="T:System.MulticastDelegate" /> obiekty są takie same.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-188">Determines whether two <see cref="T:System.MulticastDelegate" /> objects are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ab09a-189">
            <see langword="true" /> Jeśli <paramref name="d1" /> i <paramref name="d2" /> mają tej samej listy wywołania; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-189">
              <see langword="true" /> if <paramref name="d1" /> and <paramref name="d2" /> have the same invocation lists; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab09a-190">Dwa obiekty delegowane są takie same, jeśli nie są one `null` i są dokładnie tego samego typu, ich listy wywołania zawierają tę samą liczbę elementów, a każdy element na liście wywołania delegata pierwszy jest równa odpowiadającego mu elementu wywołania Lista drugi delegata.</span><span class="sxs-lookup"><span data-stu-id="ab09a-190">Two delegates are equal if they are not `null` and are of exactly the same type, their invocation lists contain the same number of elements, and every element in the invocation list of the first delegate is equal to the corresponding element in the invocation list of the second delegate.</span></span>  
  
 <span data-ttu-id="ab09a-191">Dwa elementy listy wywołania są takie same, jeśli ich wywołanie tej samej metody wystąpienia tego samego wystąpienia docelowego lub ich wywołanie tej samej metody statycznej.</span><span class="sxs-lookup"><span data-stu-id="ab09a-191">Two invocation list elements are equal if they invoke the same instance method on the same target instance, or they invoke the same static method.</span></span>  
  
 <span data-ttu-id="ab09a-192">Jest równoważne metodę dla tego operatora <xref:System.MulticastDelegate.Equals%28System.Object%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="ab09a-192">The equivalent method for this operator is <xref:System.MulticastDelegate.Equals%28System.Object%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="ab09a-193">Nie można utworzyć wystąpienia klasy abstrakcyjnej, lub ten element członkowski został wywołany z mechanizmem późnego wiązania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-193">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="ab09a-194">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-194">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="ab09a-195">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-195">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (MulticastDelegate d1, MulticastDelegate d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.MulticastDelegate d1, class System.MulticastDelegate d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (d1 As MulticastDelegate, d2 As MulticastDelegate) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(MulticastDelegate ^ d1, MulticastDelegate ^ d2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : MulticastDelegate * MulticastDelegate -&gt; bool" Usage="System.MulticastDelegate.op_Inequality (d1, d2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.MulticastDelegate" />
        <Parameter Name="d2" Type="System.MulticastDelegate" />
      </Parameters>
      <Docs>
        <param name="d1">
          <span data-ttu-id="ab09a-196">Lewy argument operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-196">The left operand.</span>
          </span>
        </param>
        <param name="d2">
          <span data-ttu-id="ab09a-197">Prawy argument operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-197">The right operand.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ab09a-198">Określa, czy dwa <see cref="T:System.MulticastDelegate" /> obiekty nie są takie same.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-198">Determines whether two <see cref="T:System.MulticastDelegate" /> objects are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ab09a-199">
            <see langword="true" /> Jeśli <paramref name="d1" /> i <paramref name="d2" /> nie mają tej samej listy wywołania; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-199">
              <see langword="true" /> if <paramref name="d1" /> and <paramref name="d2" /> do not have the same invocation lists; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab09a-200">Dwa obiekty delegowane są takie same, jeśli nie są one `null` i są dokładnie tego samego typu, ich listy wywołania zawierają tę samą liczbę elementów, a każdy element na liście wywołania delegata pierwszy jest równa odpowiadającego mu elementu wywołania Lista drugi delegata.</span><span class="sxs-lookup"><span data-stu-id="ab09a-200">Two delegates are equal if they are not `null` and are of exactly the same type, their invocation lists contain the same number of elements, and every element in the invocation list of the first delegate is equal to the corresponding element in the invocation list of the second delegate.</span></span>  
  
 <span data-ttu-id="ab09a-201">Dwa elementy listy wywołania są takie same, jeśli ich wywołanie tej samej metody wystąpienia tego samego wystąpienia docelowego lub ich wywołanie tej samej metody statycznej.</span><span class="sxs-lookup"><span data-stu-id="ab09a-201">Two invocation list elements are equal if they invoke the same instance method on the same target instance, or they invoke the same static method.</span></span>  
  
 <span data-ttu-id="ab09a-202">Jest równoważne metodę dla tego operatora <xref:System.MulticastDelegate.Equals%28System.Object%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="ab09a-202">The equivalent method for this operator is <xref:System.MulticastDelegate.Equals%28System.Object%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="ab09a-203">Nie można utworzyć wystąpienia klasy abstrakcyjnej, lub ten element członkowski został wywołany z mechanizmem późnego wiązania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-203">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="ab09a-204">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-204">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="ab09a-205">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-205">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="RemoveImpl">
      <MemberSignature Language="C#" Value="protected override sealed Delegate RemoveImpl (Delegate value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Delegate RemoveImpl(class System.Delegate value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MulticastDelegate.RemoveImpl(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Function RemoveImpl (value As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override Delegate ^ RemoveImpl(Delegate ^ value);" />
      <MemberSignature Language="F#" Value="override this.RemoveImpl : Delegate -&gt; Delegate" Usage="multicastDelegate.RemoveImpl value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="ab09a-206">Delegat do wyszukiwania na liście wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-206">The delegate to search for in the invocation list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ab09a-207">Usuwa element z listy wywołania <see cref="T:System.MulticastDelegate" /> wynosi określonego delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-207">Removes an element from the invocation list of this <see cref="T:System.MulticastDelegate" /> that is equal to the specified delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ab09a-208">Jeśli <paramref name="value" /> znajduje się na liście wywołania dla tego wystąpienia, a następnie nowy <see cref="T:System.Delegate" /> bez <paramref name="value" /> liście wywołania; w przeciwnym razie to wystąpienie z jego oryginalnej listy wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-208">If <paramref name="value" /> is found in the invocation list for this instance, then a new <see cref="T:System.Delegate" /> without <paramref name="value" /> in its invocation list; otherwise, this instance with its original invocation list.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="ab09a-209">Nie można utworzyć wystąpienia klasy abstrakcyjnej, lub ten element członkowski został wywołany z mechanizmem późnego wiązania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-209">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="ab09a-210">Po wywołaniu późnym wiązaniem za pomocą mechanizmów takich jak <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-210">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="ab09a-211">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="ab09a-211">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
  </Members>
</Type>