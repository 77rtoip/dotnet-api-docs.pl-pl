<Type Name="Func&lt;T1,T2,T3,T4,T5,TResult&gt;" FullName="System.Func&lt;T1,T2,T3,T4,T5,TResult&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d1be2de79ce0a49df8ff4e96c2a0f25d2b03ce3a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30743894" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T1,in T2,in T3,in T4,in T5,out TResult&gt;(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`6&lt;- T1, - T2, - T3, - T4, - T5, + TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`6" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of In T1, In T2, In T3, In T4, In T5, Out TResult)(arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4, arg5 As T5) As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename TResult&gt;&#xA;public delegate TResult Func(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T3">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T4">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T5">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="arg1" Type="T1" />
    <Parameter Name="arg2" Type="T2" />
    <Parameter Name="arg3" Type="T3" />
    <Parameter Name="arg4" Type="T4" />
    <Parameter Name="arg5" Type="T5" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1">Typ pierwszego parametru metody, która hermetyzuje tego delegata.</typeparam>
    <typeparam name="T2">Typ drugiego parametru metody, która hermetyzuje tego delegata.</typeparam>
    <typeparam name="T3">Typ trzeciego parametru metody, która hermetyzuje tego delegata.</typeparam>
    <typeparam name="T4">Typ czwartego parametru metody, która hermetyzuje tego delegata.</typeparam>
    <typeparam name="T5">Typ piątego parametru metody, która hermetyzuje tego delegata.</typeparam>
    <typeparam name="TResult">Typ zwracanej wartości metody, która hermetyzuje tego delegata.</typeparam>
    <param name="arg1">Pierwszy parametr metody, która hermetyzuje tego delegata.</param>
    <param name="arg2">Drugi parametr metody, która hermetyzuje tego delegata.</param>
    <param name="arg3">Trzeci parametr metody, która hermetyzuje tego delegata.</param>
    <param name="arg4">Czwartego parametru metody, która hermetyzuje tego delegata.</param>
    <param name="arg5">Piątego parametru metody, która hermetyzuje tego delegata.</param>
    <summary>Hermetyzuje metodę, która ma pięć parametrów i zwraca wartość typu określonego przez <typeparamref name="TResult" /> parametru.</summary>
    <returns>Wartość zwracaną metody, która hermetyzuje tego delegata.</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten delegat umożliwia reprezentuje metodę, która można przekazać jako parametru bez jawnie deklarowanie niestandardowego obiektu delegowanego. Metoda hermetyzowany musi odpowiadać podpis metody jest definiowana za pomocą tego delegata. Oznacza to, że hermetyzowany metoda musi mieć pięć parametrów, z których każdy jest przekazywana do niej przez wartość, a aplikacja musi zwracać wartość.  
  
> [!NOTE]
>  Metody, która ma pięć parametrów i zwraca odwołanie do `void` (lub w języku Visual Basic, który jest zadeklarowany jako `Sub` , a nie jako `Function`), używać ogólnych <xref:System.Action%605> zamiast tego delegata.  
  
 Można również użyć <xref:System.Func%606> delegata z metody anonimowe i wyrażenia lambda.  
  
 Podstawowy typ wyrażenia lambda jest jednym z ogólnego `Func` delegatów. Dzięki temu można przekazać wyrażenia lambda jako parametr bez jawnie przypisywania go do delegata.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Action`5" />
  </Docs>
</Type>