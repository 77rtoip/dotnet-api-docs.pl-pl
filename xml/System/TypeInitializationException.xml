<Type Name="TypeInitializationException" FullName="System.TypeInitializationException">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1593c517175a34772b35a05f3770c0c79a61337c" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58737389" /></Metadata><TypeSignature Language="C#" Value="public sealed class TypeInitializationException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit TypeInitializationException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.TypeInitializationException" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TypeInitializationException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeInitializationException sealed : SystemException" />
  <TypeSignature Language="F#" Value="type TypeInitializationException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Wyjątek, który jest zgłaszany jako otokę wyjątku zgłoszonego przez inicjatora klasy. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy inicjator klasy nie można zainicjować typu, <xref:System.TypeInitializationException> jest tworzony i przekazywany odwołania do wyjątku zgłoszonego przez typ klasy inicjatora. <xref:System.Exception.InnerException%2A> Właściwość <xref:System.TypeInitializationException> przechowuje bazowego wyjątku.  
  
 Zazwyczaj <xref:System.TypeInitializationException> wyjątek odzwierciedla stan krytyczny (środowisko wykonawcze jest nie można utworzyć wystąpienia typu) który uniemożliwia kontynuowanie.  Najczęściej <xref:System.TypeInitializationException> jest zgłaszany w odpowiedzi na niektóre zmiany w środowisku wykonywania aplikacji. W związku z tym, innym niż prawdopodobnie do rozwiązywania problemów debugowania kodu, wyjątek nie obsługi w `try` / `catch` bloku. Zamiast tego przyczyną wyjątku należy zbadać i wyeliminować.  
  
 <xref:System.TypeInitializationException> używa COR_E_TYPEINITIALIZATION HRESULT, która ma wartość 0x80131534.  
  
 Aby uzyskać listę początkowe wartości właściwości wystąpienia <xref:System.TypeInitializationException>, zobacz <xref:System.TypeInitializationException.%23ctor%2A> konstruktorów.  
  
 W poniższych sekcjach opisano niektóre sytuacje, w których <xref:System.TypeInitializationException> jest zgłaszany wyjątek.  
  
- [Konstruktory statyczne i typeinitializationexception — wyjątek](#Static)   
- [Wartości limitu czasu dopasowanie wyrażenia regularnego](#Timeout)   
- [Kalendarze i kultury danych](#Calendars)  
  
<a name="Static"></a>   
## <a name="static-constructors-and-the-typeinitializationexception"></a>Konstruktory statyczne i typeinitializationexception —

 Statyczny Konstruktor, jeśli istnieje, jest wywoływana automatycznie przez środowisko wykonawcze przed utworzeniem nowego wystąpienia typu. Konstruktory statyczne mogą jawnie definiowane przez dewelopera. Jeśli Konstruktor statyczny nie jest jawnie zdefiniowany, kompilatorów automatycznie utwórz je, aby zainicjować dowolne `static` (w języku C#) lub `Shared` (w języku Visual Basic) elementy członkowskie tego typu.  Aby uzyskać więcej informacji na temat konstruktorów statycznych, zobacz [konstruktorów statycznych](~/docs/csharp/programming-guide/classes-and-structs/static-constructors.md).  
  
 Najczęściej <xref:System.TypeInitializationException> wyjątek jest zgłaszany, gdy Konstruktor statyczny nie może utworzyć wystąpienia typu.  <xref:System.Exception.InnerException%2A> Właściwość wskazuje, dlaczego Konstruktor statyczny nie może utworzyć wystąpienia typu. Niektóre typowe przyczyny <xref:System.TypeInitializationException> wyjątku:  
  
- Nieobsługiwany wyjątek w konstruktorze statycznym  
 
   Jeśli wyjątek zostanie zgłoszony w konstruktorze statycznym, ten wyjątek jest opakowana w <xref:System.TypeInitializationException> wyjątek i typu nie można utworzyć wystąpienia.  
  
   Co często sprawia, że ten wyjątek trudne do rozwiązania to, że konstruktory statyczne nie są zawsze jawnie zdefiniowane w kodzie źródłowym. Statyczny Konstruktor istnieje w typie, jeśli:  
  
   -   Została ona jawnie zdefiniowana jako członka typu.  
  
   -   Typ ma `static` (w języku C#) lub `Shared` (w języku Visual Basic) zmiennych, które są deklarowane i inicjowane w pojedynczej instrukcji. W tym przypadku kompilator języka wygeneruje Konstruktor statyczny dla danego typu. Można sprawdzić przy użyciu narzędzia, takiego jak [dezasembler IL](~/docs/framework/tools/ildasm-exe-il-disassembler.md). Na przykład gdy kompilatory C# i VB skompilować poniższy przykład, generują IL dla statyczny Konstruktor, który jest podobny do następującego:  
  
   ```  
   .method private specialname rtspecialname static   
           void  .cctor() cil managed  
   {  
     // Code size       12 (0xc)  
     .maxstack  8  
     IL_0000:  ldc.i4.3  
     IL_0001:  newobj     instance void TestClass::.ctor(int32)  
     IL_0006:  stsfld     class TestClass Example::test  
     IL_000b:  ret  
   } // end of method Example::.cctor  
   ```  
  
   W poniższym przykładzie przedstawiono <xref:System.TypeInitializationException> wyjątku, generowanych przez kompilator Konstruktor statyczny. `Example` Klasa zawiera `static` (w języku C#) lub `Shared` (w języku Visual Basic) pole typu `TestClass` , jest tworzone przez przekazanie wartości 3 do jej konstruktora klasy.  Jednak ta wartość jest niedozwolone; dozwolone są tylko wartości 0 lub 1. W rezultacie `TestClass` zgłasza konstruktora klasy <xref:System.ArgumentOutOfRangeException>. Ponieważ ten wyjątek nie jest obsługiwane, są opakowane w <xref:System.TypeInitializationException> wyjątku.  
  
   [!code-csharp[System.TypeInitializationException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/ctorException1.cs#3)]
   [!code-vb[System.TypeInitializationException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/CtorException1.vb#3)]  
  
   Należy pamiętać, że komunikat o wyjątku przedstawia informacje na temat <xref:System.Exception.InnerException%2A> właściwości.  
  
- Brak pliku zestawu lub danych  
 
   Częstą przyczyną <xref:System.TypeInitializationException> wyjątek jest plik zestawu lub danych, który znajdował się w środowiskach tworzenia i testowania aplikacji brakuje jego środowiska uruchomieniowego. Na przykład można skompilować poniższy przykład, aby zestaw o nazwie Missing1a.dll przy użyciu następującej składni wiersza polecenia:  
  
   ```csharp  
   csc -t:library Missing1a.cs  
   ```  
  
   ```vb  
   vbc Missing1a.vb -t:library  
   ```  
  
   [!code-csharp[System.TypeInitializationException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Missing1a.cs#1)]
   [!code-vb[System.TypeInitializationException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Missing1a.vb#1)]  
  
   Następnie można skompilować poniższy przykład do pliku wykonywalnego o nazwie Missing1.exe, umieszczając odwołanie do Missing1a.dll:  
  
   ```csharp
   csc Missing1.cs /r:Missing1a.dll  
   ```  
  
   ```vb
   vbc Missing1.vb /r:Missing1a.dll  
   ```  
  
   Jednakże, jeśli należy zmienić nazwę, przenieść, lub usunąć Missing1a.dll i uruchomić przykład wyniku weryfikacji zgłasza wyjątek <xref:System.TypeInitializationException> wyjątek i wyświetla dane wyjściowe, jak pokazano w przykładzie.  Należy pamiętać, że komunikat o wyjątku zawiera informacje o <xref:System.Exception.InnerException%2A> właściwości. W tym przypadku jest wyjątek wewnętrzny <xref:System.IO.FileNotFoundException> , jest generowany, ponieważ środowisko wykonawcze nie można znaleźć zestawu zależnego.  
  
   [!code-csharp[System.TypeInitializationException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Missing1.cs#2)]
   [!code-vb[System.TypeInitializationException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Missing1.vb#2)]  
  
   > [!NOTE]
   >  W tym przykładzie <xref:System.TypeInitializationException> został zgłoszony wyjątek, ponieważ nie można załadować zestawu. Również może zostać wygenerowany wyjątek, jeśli Konstruktor statyczny próbuje otworzyć plik danych, takich jak plik konfiguracji, plik XML lub plik zawierający serializowane dane, które nie można odnaleźć.  
  
<a name="Timeout"></a>   
## <a name="regular-expression-match-timeout-values"></a>Wartości limitu czasu dopasowanie wyrażenia regularnego  
 Można ustawić domyślny limit czasu operacji na podstawie domeny aplikacji dopasowania do wzorca wyrażenia regularnego. Limit czasu jest zdefiniowany, określając <xref:System.TimeSpan> wartości dla właściwości "REGEX_DEFAULT_MATCH_TIMEOUT", aby <xref:System.AppDomain.SetData%2A?displayProperty=nameWithType> metody. Interwał czasu musi być prawidłowym <xref:System.TimeSpan> obiektu, który jest większy od zera i mniejszy niż około 24 dni. Jeśli te wymagania nie są spełnione, można ustawić domyślną wartość limitu czasu zgłasza <xref:System.ArgumentOutOfRangeException>, który z kolei opakowanej w <xref:System.TypeInitializationException> wyjątku.  
  
 W poniższym przykładzie przedstawiono <xref:System.TypeInitializationException> , jest generowany, gdy wartość przypisana do właściwości "REGEX_DEFAULT_MATCH_TIMEOUT" jest nieprawidłowa. Aby wyeliminować wyjątek, ustaw właściwość "REGEX_DEFAULT_MATCH_TIMEOUT" na <xref:System.TimeSpan> wartość, która jest większa od zera i mniejszy niż około 24 dni.  
  
 [!code-csharp[System.TypeInitializationException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Regex1.cs#4)]
 [!code-vb[System.TypeInitializationException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Regex1.vb#4)]  
  
<a name="Calendars"></a>   
## <a name="calendars-and-cultural-data"></a>Kalendarze i kultury danych  
 Jeśli użytkownik podejmie próbę utworzenia wystąpienia kalendarza, ale środowisko wykonawcze nie można utworzyć wystąpienia <xref:System.Globalization.CultureInfo> obiekt, który odnosi się do tego kalendarza wyniku weryfikacji zgłasza wyjątek <xref:System.TypeInitializationException> wyjątku. Ten wyjątek może zostać wygenerowany przez następujących konstruktorów klas kalendarza:  
  
-   Domyślny konstruktor obiektu <xref:System.Globalization.JapaneseCalendar> klasy.  
  
-   Domyślny konstruktor obiektu <xref:System.Globalization.KoreanCalendar> klasy.  
  
-   Domyślny konstruktor obiektu <xref:System.Globalization.TaiwanCalendar> klasy.  
  
 Ponieważ kultury danych dla tych języków powinny być dostępne we wszystkich systemach, powinna rzadko, jeśli w ogóle, napotkasz ten wyjątek.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
    <related type="Article" href="~/docs/standard/exceptions/index.md">Obsługa i zgłaszanie wyjątków na platformie .NET</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeInitializationException (string fullTypeName, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fullTypeName, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TypeInitializationException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fullTypeName As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeInitializationException(System::String ^ fullTypeName, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new TypeInitializationException : string * Exception -&gt; TypeInitializationException" Usage="new System.TypeInitializationException (fullTypeName, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fullTypeName" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="fullTypeName">W pełni kwalifikowana nazwa typu, który nie uda się zainicjowanie.</param>
        <param name="innerException">Wyjątek, który jest przyczyną bieżącego wyjątku. Jeśli <paramref name="innerException" /> parametr nie jest odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic), bieżący wyjątek jest zgłaszany w <see langword="catch" /> blok, który obsługuje wyjątek wewnętrzny.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.TypeInitializationException" /> klasy przy użyciu domyślnego komunikatu o błędzie, nazwę określonego typu i odwołanie do wewnętrznego wyjątku, który jest główną przyczynę tego wyjątku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wyjątek generowany jako bezpośredni wynik poprzedniego wyjątku może zawierać odwołanie do poprzedniego wyjątku we <xref:System.Exception.InnerException%2A> właściwości. <xref:System.Exception.InnerException%2A> Właściwość zwraca taką samą wartość, która jest przekazywana do konstruktora, lub odwołanie o wartości null (`Nothing` w języku Visual Basic) jeżeli <xref:System.Exception.InnerException%2A> nie dostarcza wartości wewnętrznego wyjątku do konstruktora.  
  
 W poniższej tabeli przedstawiono początkowe wartości właściwości dla wystąpienia <xref:System.TypeInitializationException>.  
  
|Właściwość|Wartość|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Odwołanie do wewnętrznego wyjątku.|  
|<xref:System.Exception.Message%2A>|Zlokalizowany ciąg komunikatu o błędzie.|  
|<xref:System.TypeInitializationException.TypeName%2A>|Nazwa typu.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
        <related type="Article" href="~/docs/standard/exceptions/index.md">Obsługa i zgłaszanie wyjątków na platformie .NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TypeInitializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="typeInitializationException.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo" /> Zawierający dane zserializowanego obiektu dotyczące zgłaszanego wyjątku.</param>
        <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext" /> Zawierający informacje kontekstowe o źródle lub miejscu docelowym.</param>
        <summary>Zestawy <see cref="T:System.Runtime.Serialization.SerializationInfo" /> obiektu o nazwie typu i dodatkowe informacje o wyjątku.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego. Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</permission>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public string TypeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeName" />
      <MemberSignature Language="DocId" Value="P:System.TypeInitializationException.TypeName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TypeName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeName : string" Usage="System.TypeInitializationException.TypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera w pełni kwalifikowaną nazwę typu, który nie uda się zainicjowanie.</summary>
        <value>W pełni kwalifikowana nazwa typu, który nie uda się zainicjowanie.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>