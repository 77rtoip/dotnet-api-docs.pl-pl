<Type Name="TypeInitializationException" FullName="System.TypeInitializationException">
  <Metadata><Meta Name="ms.openlocfilehash" Value="39a4b1dcc059d82d9cb113e1969487948a2ac652" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69418932" /></Metadata><TypeSignature Language="C#" Value="public sealed class TypeInitializationException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit TypeInitializationException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.TypeInitializationException" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TypeInitializationException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeInitializationException sealed : SystemException" />
  <TypeSignature Language="F#" Value="type TypeInitializationException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Wyjątek, który jest generowany jako otoka wokół wyjątku zgłoszonego przez inicjatora klasy. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy inicjator klasy nie może zainicjować typu, <xref:System.TypeInitializationException> zostaje utworzony i przeszedł odwołanie do wyjątku zgłoszonego przez inicjator klasy typu. <xref:System.Exception.InnerException%2A> Właściwość<xref:System.TypeInitializationException> zawiera wyjątek podstawowy.  
  
 <xref:System.TypeInitializationException> Zwykle wyjątek odzwierciedla warunek katastrofalny (środowisko uruchomieniowe nie może utworzyć wystąpienia typu), które uniemożliwia kontynuowanie działania aplikacji.  <xref:System.TypeInitializationException> Najczęściej jest zgłaszany w odpowiedzi na pewne zmiany w środowisku wykonywanym aplikacji. W związku z tym, inne niż prawdopodobnie do rozwiązywania problemów z kodem debugowania, wyjątek nie powinien `try` być obsługiwany w / `catch` bloku. Zamiast tego należy zbadać i wyeliminować przyczynę wyjątku.  
  
 <xref:System.TypeInitializationException>używa HRESULT COR_E_TYPEINITIALIZATION o wartości 0x80131534.  
  
 Aby uzyskać listę początkowe wartości właściwości wystąpienia <xref:System.TypeInitializationException>, zobacz <xref:System.TypeInitializationException.%23ctor%2A> konstruktorów.  
  
 W poniższych sekcjach opisano niektóre sytuacje, w których <xref:System.TypeInitializationException> wyjątek jest zgłaszany.  
  
- [Konstruktory statyczne i wyjątek TypeInitializationException](#Static)   
- [Wartości limitu czasu dopasowania wyrażenia regularnego](#Timeout)   
- [Kalendarze i dane kulturowe](#Calendars)  
  
<a name="Static"></a>   
## <a name="static-constructors-and-the-typeinitializationexception"></a>Konstruktory statyczne i TypeInitializationException

 Statyczny Konstruktor, jeśli taki istnieje, jest wywoływany automatycznie przez środowisko uruchomieniowe przed utworzeniem nowego wystąpienia typu. Konstruktory statyczne mogą być jawnie definiowane przez dewelopera. Jeśli statyczny Konstruktor nie jest jawnie zdefiniowany, kompilatory automatycznie tworzą jeden do inicjowania dowolnego `static` (w C#) lub `Shared` (w Visual Basic) elementów członkowskich typu.  Aby uzyskać więcej informacji na temat konstruktorów statycznych, zobacz [statyczne konstruktory](~/docs/csharp/programming-guide/classes-and-structs/static-constructors.md).  
  
 Najczęściej <xref:System.TypeInitializationException> wyjątek jest zgłaszany, gdy Konstruktor statyczny nie może utworzyć wystąpienia typu.  <xref:System.Exception.InnerException%2A> Właściwość wskazuje, dlaczego Konstruktor statyczny nie mógł utworzyć wystąpienia typu. Niektóre z najczęstszych przyczyn <xref:System.TypeInitializationException> wyjątku są następujące:  
  
- Nieobsługiwany wyjątek w konstruktorze statycznym  
 
   Jeśli wyjątek jest zgłaszany w konstruktorze statycznym, ten wyjątek jest opakowany <xref:System.TypeInitializationException> w wyjątek i nie można utworzyć wystąpienia tego typu.  
  
   Często ten wyjątek utrudnia rozwiązywanie problemów polega na tym, że konstruktory statyczne nie są zawsze jawnie zdefiniowane w kodzie źródłowym. Statyczny Konstruktor istnieje w typie, jeśli:  
  
   -   Został jawnie zdefiniowany jako element członkowski typu.  
  
   -   Typ ma `static` (w C#) lub `Shared` (w Visual Basic) zmienne, które są zadeklarowane i inicjowane w pojedynczej instrukcji. W takim przypadku kompilator języka generuje statyczny Konstruktor dla tego typu. Można je sprawdzić za pomocą narzędzia, takiego jak [Il dezasembler](~/docs/framework/tools/ildasm-exe-il-disassembler.md). Na przykład, gdy C# KOMPILATORY języka vb kompilują Poniższy przykład, generują Il dla konstruktora statycznego, który jest podobny do następującego:  
  
   ```  
   .method private specialname rtspecialname static   
           void  .cctor() cil managed  
   {  
     // Code size       12 (0xc)  
     .maxstack  8  
     IL_0000:  ldc.i4.3  
     IL_0001:  newobj     instance void TestClass::.ctor(int32)  
     IL_0006:  stsfld     class TestClass Example::test  
     IL_000b:  ret  
   } // end of method Example::.cctor  
   ```  
  
   Poniższy przykład pokazuje <xref:System.TypeInitializationException> wyjątek zgłoszony przez Konstruktor statyczny wygenerowany przez kompilator. C# `Shared` Klasa zawiera pole (in`TestClass` ) lub (w Visual Basic) typu, którego wystąpienie jest tworzone przez przekazanie wartości 3 do jej konstruktora klasy. `static` `Example`  Ta wartość jest jednak niedozwolona; dozwolone są tylko wartości 0 i 1. W efekcie `TestClass` Konstruktor klasy <xref:System.ArgumentOutOfRangeException>zgłasza. Ponieważ ten wyjątek nie jest obsługiwany, jest opakowany w <xref:System.TypeInitializationException> wyjątek.  
  
   [!code-csharp[System.TypeInitializationException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/ctorException1.cs#3)]
   [!code-vb[System.TypeInitializationException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/CtorException1.vb#3)]  
  
   Należy zauważyć, że komunikat o wyjątku wyświetla informacje <xref:System.Exception.InnerException%2A> o właściwości.  
  
- Brak zestawu lub pliku danych  
 
   Typową przyczyną <xref:System.TypeInitializationException> wyjątku jest to, że w środowisku uruchomieniowym brakuje zestawu lub pliku danych, który był obecny w środowiskach deweloperskich i testowych aplikacji. Na przykład, można skompilować następujący przykład do zestawu o nazwie Missing1a. dll przy użyciu tej składni wiersza polecenia:  
  
   ```csharp  
   csc -t:library Missing1a.cs  
   ```  
  
   ```vb  
   vbc Missing1a.vb -t:library  
   ```  
  
   [!code-csharp[System.TypeInitializationException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Missing1a.cs#1)]
   [!code-vb[System.TypeInitializationException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Missing1a.vb#1)]  
  
   Następnie można skompilować następujący przykład do pliku wykonywalnego o nazwie Missing1. exe, dołączając odwołanie do Missing1a. dll:  
  
   ```csharp
   csc Missing1.cs /r:Missing1a.dll  
   ```  
  
   ```vb
   vbc Missing1.vb /r:Missing1a.dll  
   ```  
  
   Jednak w przypadku zmiany nazwy, przeniesienia lub usunięcia Missing1a. dll i uruchomienia przykładu zgłasza <xref:System.TypeInitializationException> wyjątek i wyświetla dane wyjściowe widoczne w przykładzie.  Należy zauważyć, że komunikat o wyjątku zawiera informacje <xref:System.Exception.InnerException%2A> o właściwości. W tym przypadku wyjątek wewnętrzny jest <xref:System.IO.FileNotFoundException> zgłaszany, ponieważ środowisko uruchomieniowe nie może znaleźć zestawu zależnego.  
  
   [!code-csharp[System.TypeInitializationException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Missing1.cs#2)]
   [!code-vb[System.TypeInitializationException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Missing1.vb#2)]  
  
   > [!NOTE]
   >  W tym przykładzie wystąpił <xref:System.TypeInitializationException> wyjątek, ponieważ nie można załadować zestawu. Wyjątek może być również zgłaszany, jeśli statyczny Konstruktor próbuje otworzyć plik danych, taki jak plik konfiguracyjny, plik XML lub plik zawierający dane serializowane, którego nie można znaleźć.  
  
<a name="Timeout"></a>   
## <a name="regular-expression-match-timeout-values"></a>Wartości limitu czasu dopasowania wyrażenia regularnego  
 Można ustawić domyślną wartość limitu czasu dla operacji dopasowania wzorca wyrażenia regularnego dla domeny dla poszczególnych aplikacji. Limit czasu jest definiowany przez określenie <xref:System.TimeSpan> wartości właściwości <xref:System.AppDomain.SetData%2A?displayProperty=nameWithType> "REGEX_DEFAULT_MATCH_TIMEOUT" w metodzie. Interwał czasu musi być prawidłowym <xref:System.TimeSpan> obiektem, który jest większy od zera i mniejszy niż około 24 dni. Jeśli te wymagania nie są spełnione, próba ustawienia domyślnej wartości limitu czasu zgłasza <xref:System.ArgumentOutOfRangeException>, która z kolei jest opakowana <xref:System.TypeInitializationException> w wyjątek.  
  
 Poniższy przykład pokazuje <xref:System.TypeInitializationException> , że jest generowany, gdy wartość przypisana do właściwości "REGEX_DEFAULT_MATCH_TIMEOUT" jest nieprawidłowa. Aby wyeliminować wyjątek, ustaw właściwość "REGEX_DEFAULT_MATCH_TIMEOUT" na <xref:System.TimeSpan> wartość większą od zera i mniejszą niż około 24 dni.  
  
 [!code-csharp[System.TypeInitializationException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Regex1.cs#4)]
 [!code-vb[System.TypeInitializationException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Regex1.vb#4)]  
  
<a name="Calendars"></a>   
## <a name="calendars-and-cultural-data"></a>Kalendarze i dane kulturowe  
 Jeśli spróbujesz utworzyć wystąpienie kalendarza, ale środowisko uruchomieniowe nie może utworzyć wystąpienia <xref:System.Globalization.CultureInfo> obiektu odpowiadającego temu kalendarzowi, <xref:System.TypeInitializationException> zgłasza wyjątek. Ten wyjątek może być zgłaszany przez następujące konstruktory klas kalendarza:  
  
-   Konstruktor bez parametrów <xref:System.Globalization.JapaneseCalendar> klasy.  
  
-   Konstruktor bez parametrów <xref:System.Globalization.KoreanCalendar> klasy.  
  
-   Konstruktor bez parametrów <xref:System.Globalization.TaiwanCalendar> klasy.  
  
 Ze względu na to, że dane kulturowe dla tych kultur powinny być dostępne we wszystkich systemach, należy rzadko, jeśli kiedykolwiek wystąpi ten wyjątek.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
    <related type="Article" href="~/docs/standard/exceptions/index.md">Obsługa i zgłaszanie wyjątków na platformie .NET</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeInitializationException (string fullTypeName, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fullTypeName, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TypeInitializationException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fullTypeName As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeInitializationException(System::String ^ fullTypeName, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new TypeInitializationException : string * Exception -&gt; TypeInitializationException" Usage="new System.TypeInitializationException (fullTypeName, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fullTypeName" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="fullTypeName">W pełni kwalifikowana nazwa typu, który nie może zostać zainicjowany.</param>
        <param name="innerException">Wyjątek, który jest przyczyną bieżącego wyjątku. Jeśli parametr nie jest odwołaniem null (<see langword="Nothing" /> w Visual Basic), bieżący <see langword="catch" /> wyjątek jest wywoływany w bloku, który obsługuje wyjątek wewnętrzny. <paramref name="innerException" /></param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.TypeInitializationException" /> klasy z domyślnym komunikatem o błędzie, określoną nazwą typu i odwołaniem do wewnętrznego wyjątku, który jest główną przyczyną tego wyjątku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wyjątek, który jest generowany jako bezpośredni wynik poprzedniego wyjątku może zawierać odwołanie do poprzedniego wyjątku we <xref:System.Exception.InnerException%2A> właściwości. Właściwość zwraca tę samą wartość, która jest przenoszona do konstruktora lub odwołanie o wartości null (`Nothing` <xref:System.Exception.InnerException%2A> w Visual Basic), jeśli właściwość nie poda wewnętrznej wartości wyjątku do konstruktora. <xref:System.Exception.InnerException%2A>  
  
 W poniższej tabeli przedstawiono początkowe wartości właściwości dla wystąpienia <xref:System.TypeInitializationException>.  
  
|Właściwość|Wartość|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Odwołanie do wewnętrznego wyjątku.|  
|<xref:System.Exception.Message%2A>|Zlokalizowany ciąg komunikatu o błędzie.|  
|<xref:System.TypeInitializationException.TypeName%2A>|Nazwa typu.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
        <related type="Article" href="~/docs/standard/exceptions/index.md">Obsługa i zgłaszanie wyjątków na platformie .NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TypeInitializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="typeInitializationException.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo" /> Przechowujący dane serializowanego obiektu o generowanym wyjątku.</param>
        <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext" /> Zawiera informacje kontekstowe o źródle lub miejscu docelowym.</param>
        <summary><see cref="T:System.Runtime.Serialization.SerializationInfo" /> Ustawia obiekt z nazwą typu i dodatkowymi informacjami o wyjątku.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego. Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</permission>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public string TypeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeName" />
      <MemberSignature Language="DocId" Value="P:System.TypeInitializationException.TypeName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TypeName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeName : string" Usage="System.TypeInitializationException.TypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera w pełni kwalifikowaną nazwę typu, którego nie można zainicjować.</summary>
        <value>W pełni kwalifikowana nazwa typu, który nie może zostać zainicjowany.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
