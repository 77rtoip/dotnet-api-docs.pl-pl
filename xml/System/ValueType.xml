<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ValueType.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac53b756fc1621dab1597966503a0af93b3c8478663.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3b756fc1621dab1597966503a0af93b3c8478663</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ValueType">
          <source>Provides the base class for value types.</source>
          <target state="translated">Udostępnia klasę podstawową dla typów wartości.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source><ph id="ph1">&lt;xref:System.ValueType&gt;</ph> overrides the virtual methods from <ph id="ph2">&lt;xref:System.Object&gt;</ph> with more appropriate implementations for value types.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ValueType&gt;</ph> zastępuje metody wirtualne z <ph id="ph2">&lt;xref:System.Object&gt;</ph> z implementacjami bardziej odpowiednie dla typów wartości.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>See also <ph id="ph1">&lt;xref:System.Enum&gt;</ph>, which inherits from <ph id="ph2">&lt;xref:System.ValueType&gt;</ph>.</source>
          <target state="translated">Zobacz też <ph id="ph1">&lt;xref:System.Enum&gt;</ph>, który dziedziczy z <ph id="ph2">&lt;xref:System.ValueType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>Data types are separated into value types and reference types.</source>
          <target state="translated">Typy danych są podzielone na typy wartości i typy referencyjne.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>Value types are either stack-allocated or allocated inline in a structure.</source>
          <target state="translated">Typy wartości są przydzielone stosu lub przydzielone wbudowany w strukturze.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>Reference types are heap-allocated.</source>
          <target state="translated">Typy odwołań są przydzielone stosu.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>Both reference and value types are derived from the ultimate base class <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">Typy zarówno odwołania, jak i wartości pochodzą z ultimate klasy podstawowej <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>In cases where it is necessary for a value type to behave like an object, a wrapper that makes the value type look like a reference object is allocated on the heap, and the value type's value is copied into it.</source>
          <target state="translated">W przypadkach, gdy jest niezbędne dla typu wartości działały jak obiekt otoka dzięki temu wygląda jak obiektu odwołania jest przydzielony na stosie, a typ wartości jest kopiowana do jej typ wartości.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>The wrapper is marked so the system knows that it contains a value type.</source>
          <target state="translated">Otoka jest oznaczony jako, aby umożliwić systemowi, że zawiera on typu wartości.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>This process is known as boxing, and the reverse process is known as unboxing.</source>
          <target state="translated">Ten proces jest nazywany opakowywanie i procesu jest znany jako rozpakowywanie.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>Boxing and unboxing allow any type to be treated as an object.</source>
          <target state="translated">Opakowywanie i rozpakowywanie umożliwia dowolny typ powinien być traktowany jako obiekt.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>Although <ph id="ph1">&lt;xref:System.ValueType&gt;</ph> is the implicit base class for value types, you cannot create a class that inherits from <ph id="ph2">&lt;xref:System.ValueType&gt;</ph> directly.</source>
          <target state="translated">Mimo że <ph id="ph1">&lt;xref:System.ValueType&gt;</ph> jest niejawna klasa podstawowa dla typów wartości nie można utworzyć klasy, która dziedziczy <ph id="ph2">&lt;xref:System.ValueType&gt;</ph> bezpośrednio.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>Instead, individual compilers provide a language keyword or construct (such as <ph id="ph1">`struct`</ph> in C# and <ph id="ph2">`Structure`</ph>…<ph id="ph3">`End Structure`</ph></source>
          <target state="translated">Zamiast tego indywidualnych kompilatory zapewniają słowa kluczowego języka lub konstrukcji (takich jak <ph id="ph1">`struct`</ph> w języku C# i <ph id="ph2">`Structure`</ph>...<ph id="ph3">`End Structure`</ph></target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>in Visual Basic) to support the creation of value types.</source>
          <target state="translated">w Visual Basic) w celu tworzenia typów wartości.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>Aside from serving as the base class for value types in the .NET Framework, the <ph id="ph1">&lt;xref:System.ValueType&gt;</ph> structure is generally not used directly in code.</source>
          <target state="translated">Jako uzupełnienie służy jako klasa podstawowa dla typów wartości w programie .NET Framework <ph id="ph1">&lt;xref:System.ValueType&gt;</ph> struktury nie jest zwykle używany bezpośrednio w kodzie.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>However, it can be used as a parameter in method calls to restrict possible arguments to value types instead of all objects, or to permit a method to handle a number of different value types.</source>
          <target state="translated">Jednak może służyć jako parametr w wywołaniach metody ograniczyć możliwe argumenty do typów wartości, a nie wszystkich obiektów lub umożliwiające metody do obsługi wielu typów inną wartość.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>The following example illustrates how <ph id="ph1">&lt;xref:System.ValueType&gt;</ph> prevents reference types from being passed to methods.</source>
          <target state="translated">Poniższy przykład przedstawia sposób <ph id="ph1">&lt;xref:System.ValueType&gt;</ph> zapobiega przekazywaniu do metod typy referencyjne.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>It defines a class named <ph id="ph1">`Utility`</ph> that contains four methods: <ph id="ph2">`IsNumeric`</ph>, which indicates whether its argument is a number; <ph id="ph3">`IsInteger`</ph>, which indicates whether its argument is an integer; <ph id="ph4">`IsFloat`</ph>, which indicates whether its argument is a floating-point number; and <ph id="ph5">`Compare`</ph>, which indicates the relationship between two numeric values.</source>
          <target state="translated">Definiuje klasę o nazwie <ph id="ph1">`Utility`</ph> zawiera cztery metody: <ph id="ph2">`IsNumeric`</ph>, która wskazuje, czy jej argument jest liczbą; <ph id="ph3">`IsInteger`</ph>, która wskazuje, czy jej argument jest liczbą całkowitą. <ph id="ph4">`IsFloat`</ph>, która wskazuje, czy argumentem jest liczba zmiennoprzecinkowa; i <ph id="ph5">`Compare`</ph>, które określa relację między dwóch wartości liczbowych.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>In each case, the method parameters are of type <ph id="ph1">&lt;xref:System.ValueType&gt;</ph>, and reference types are prevented from being passed to the methods.</source>
          <target state="translated">W każdym przypadku parametry metody są typu <ph id="ph1">&lt;xref:System.ValueType&gt;</ph>, i typy referencyjne nie będą mogli przekazywany do metody.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ValueType">
          <source>The following example illustrates calls to the methods of the <ph id="ph1">`Utility`</ph> class.</source>
          <target state="translated">Poniższy przykład przedstawia wywołania metody <ph id="ph1">`Utility`</ph> klasy.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.ValueType.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ValueType" /&gt;</ph> class.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.ValueType" /&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.ValueType.Equals(System.Object)">
          <source>The object to compare with the current instance.</source>
          <target state="translated">Obiekt do porównania z bieżącym wystąpieniem.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.ValueType.Equals(System.Object)">
          <source>Indicates whether this instance and a specified object are equal.</source>
          <target state="translated">Wskazuje, czy to wystąpienie oraz określony obiekt są równe.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.ValueType.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> and this instance are the same type and represent the same value; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> oraz to wystąpienie są tego samego typu i reprezentują tę samą wartość; w przeciwnym razie <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.Equals(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> method overrides <ph id="ph2">&lt;xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> and provides the default implementation of value equality for all value types in the .NET Framework.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> Zamienników metod <ph id="ph2">&lt;xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> i udostępnia domyślną implementację równości wartości dla wszystkich typów wartości w programie .NET Framework.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.Equals(System.Object)">
          <source>If none of the fields of the current instance and <ph id="ph1">`obj`</ph> are reference types, the <ph id="ph2">&lt;xref:System.ValueType.Equals%2A&gt;</ph> method performs a byte-by-byte comparison of the two objects in memory.</source>
          <target state="translated">Jeśli żadne z pól bieżącego wystąpienia i <ph id="ph1">`obj`</ph> są typy referencyjne <ph id="ph2">&lt;xref:System.ValueType.Equals%2A&gt;</ph> metoda wykonuje po bicie porównanie dwóch obiektów w pamięci.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.Equals(System.Object)">
          <source>Otherwise, it uses reflection to compare the corresponding fields of <ph id="ph1">`obj`</ph> and this instance.</source>
          <target state="translated">W przeciwnym razie używa odbicia do porównania z odpowiednich pól <ph id="ph1">`obj`</ph> i to wystąpienie.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.Equals(System.Object)">
          <source>Particularly if your value type contains fields that are reference types, you should override the <ph id="ph1">&lt;xref:System.ValueType.Equals%28System.Object%29&gt;</ph> method.</source>
          <target state="translated">Zwłaszcza w wypadku danego typu wartość zawiera pola, które są typy odwołań, należy zastąpić <ph id="ph1">&lt;xref:System.ValueType.Equals%28System.Object%29&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.Equals(System.Object)">
          <source>This can improve performance and enable you to more closely represent the meaning of equality for the type.</source>
          <target state="translated">Może to poprawić wydajność i pozwala na dokładniejsze reprezentują znaczenie równości dla typu.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.Equals(System.Object)">
          <source>Notes for the <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph></source>
          <target state="translated">Uwagi dla <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.Equals(System.Object)">
          <source>When you call the <ph id="ph1">&lt;xref:System.ValueType.Equals%2A&gt;</ph> method on a <ph id="ph2">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> structure, it provides the default behavior for value types that don’t override <ph id="ph3">&lt;xref:System.ValueType.Equals%2A&gt;</ph>.</source>
          <target state="translated">Podczas wywoływania <ph id="ph1">&lt;xref:System.ValueType.Equals%2A&gt;</ph> metoda <ph id="ph2">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> struktury zapewnia domyślne zachowanie dla typów wartości, które nie zastępują <ph id="ph3">&lt;xref:System.ValueType.Equals%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.Equals(System.Object)">
          <source>This is part of the support that the .NET Framework provides for the <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> (see <bpt id="p1">[</bpt>.NET Framework Support for Windows Store Apps and Windows Runtime<ept id="p1">](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)</ept>).</source>
          <target state="translated">To jest częścią programu .NET Framework zapewnia obsługę <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> (zobacz <bpt id="p1">[</bpt>.NET Framework obsługuje dla aplikacji ze Sklepu Windows i środowiska wykonawczego systemu Windows<ept id="p1">](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)</ept>).</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.Equals(System.Object)">
          <source><ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> structures can’t override <ph id="ph2">&lt;xref:System.ValueType.Equals%2A&gt;</ph>, even if they’re written with C# or Visual Basic, because they can’t have methods.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> Nie można zastąpić struktury <ph id="ph2">&lt;xref:System.ValueType.Equals%2A&gt;</ph>nawet wtedy, gdy są napisane w języku C# lub Visual Basic, ponieważ nie mają metod.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.Equals(System.Object)">
          <source>(In addition, structures in the <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> itself don’t inherit <ph id="ph2">&lt;xref:System.ValueType&gt;</ph>.) However, they appear to have <ph id="ph3">&lt;xref:System.ValueType.ToString%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.ValueType.Equals%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</source>
          <target state="translated">(Ponadto struktury w <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> sam nie dziedziczą <ph id="ph2">&lt;xref:System.ValueType&gt;</ph>.) Jednak pojawią się one mieć <ph id="ph3">&lt;xref:System.ValueType.ToString%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.ValueType.Equals%2A&gt;</ph>, i <ph id="ph5">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph> metody, gdy ich używać w kodzie C# lub Visual Basic i .NET Framework zapewnia domyślne zachowanie dla tych metod.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.Equals(System.Object)">
          <source>The following example demonstrates how the <ph id="ph1">&lt;xref:System.ValueType.Equals%2A&gt;</ph> method can be overridden by a derived value type.</source>
          <target state="translated">W poniższym przykładzie pokazano sposób <ph id="ph1">&lt;xref:System.ValueType.Equals%2A&gt;</ph> metodę można przesłonić według typu pochodnego.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.ValueType.GetHashCode">
          <source>Returns the hash code for this instance.</source>
          <target state="translated">Zwraca kod skrótu dla tego wystąpienia.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.ValueType.GetHashCode">
          <source>A 32-bit signed integer that is the hash code for this instance.</source>
          <target state="translated">32-bitowe liczby całkowite ze znakiem jest wartość skrótu dla tego wystąpienia.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.GetHashCode">
          <source>The <ph id="ph1">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph> method applies to types derived from <ph id="ph2">&lt;xref:System.ValueType&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph> Metodę stosuje się do typów pochodnych <ph id="ph2">&lt;xref:System.ValueType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.GetHashCode">
          <source>One or more fields of the derived type is used to calculate the return value.</source>
          <target state="translated">Co najmniej jedno pole typu pochodnego służy do obliczania wartości zwracanej.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.GetHashCode">
          <source>If you call the derived type's <ph id="ph1">`GetHashCode`</ph> method, the return value is not likely to be suitable for use as a key in a hash table.</source>
          <target state="translated">Wywołanie typu pochodnego <ph id="ph1">`GetHashCode`</ph> metody, wartość zwracana prawdopodobnie nie można użyć jako klucza w tablicy skrótów.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.GetHashCode">
          <source>Additionally, if the value of one or more of those fields changes, the return value might become unsuitable for use as a key in a hash table.</source>
          <target state="translated">Ponadto jeśli zmieni się wartość co najmniej jednego z tych pól, zwracana wartość mogą stać się niezdatna do użytku jako klucz w tablicy skrótów.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.GetHashCode">
          <source>In either case, consider writing your own implementation of the <ph id="ph1">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph> method that more closely represents the concept of a hash code for the type.</source>
          <target state="translated">W obu przypadkach należy wziąć pod uwagę pisanie własnych implementacja <ph id="ph1">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph> metoda, która reprezentuje dokładniejsze pojęcie wartość skrótu dla tego typu.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.GetHashCode">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A?displayProperty=nameWithType&gt;</ph>, and <ph id="ph2">&lt;xref:System.Collections.Hashtable?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A?displayProperty=nameWithType&gt;</ph>, i <ph id="ph2">&lt;xref:System.Collections.Hashtable?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.GetHashCode">
          <source>Notes for the <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph></source>
          <target state="translated">Uwagi dla <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph></target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.GetHashCode">
          <source>When you call the <ph id="ph1">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph> method on a <ph id="ph2">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> structure, it provides the default behavior for value types that don’t override <ph id="ph3">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph>.</source>
          <target state="translated">Podczas wywoływania <ph id="ph1">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph> metoda <ph id="ph2">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> struktury zapewnia domyślne zachowanie dla typów wartości, które nie zastępują <ph id="ph3">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.GetHashCode">
          <source>This is part of the support that the .NET Framework provides for the <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> (see <bpt id="p1">[</bpt>.NET Framework Support for Windows Store Apps and Windows Runtime<ept id="p1">](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)</ept>).</source>
          <target state="translated">To jest częścią programu .NET Framework zapewnia obsługę <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> (zobacz <bpt id="p1">[</bpt>.NET Framework obsługuje dla aplikacji ze Sklepu Windows i środowiska wykonawczego systemu Windows<ept id="p1">](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)</ept>).</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.GetHashCode">
          <source><ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> structures can’t override <ph id="ph2">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph>, even if they’re written with C# or Visual Basic, because they can’t have methods.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> Nie można zastąpić struktury <ph id="ph2">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph>nawet wtedy, gdy są napisane w języku C# lub Visual Basic, ponieważ nie mają metod.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.GetHashCode">
          <source>(In addition, structures in the <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> itself don’t inherit <ph id="ph2">&lt;xref:System.ValueType&gt;</ph>.) However, they appear to have <ph id="ph3">&lt;xref:System.ValueType.ToString%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.ValueType.Equals%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</source>
          <target state="translated">(Ponadto struktury w <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> sam nie dziedziczą <ph id="ph2">&lt;xref:System.ValueType&gt;</ph>.) Jednak pojawią się one mieć <ph id="ph3">&lt;xref:System.ValueType.ToString%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.ValueType.Equals%2A&gt;</ph>, i <ph id="ph5">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph> metody, gdy ich używać w kodzie C# lub Visual Basic i .NET Framework zapewnia domyślne zachowanie dla tych metod.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.GetHashCode">
          <source>The following example demonstrates how the <ph id="ph1">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph> method can be overridden by a derived value type.</source>
          <target state="translated">W poniższym przykładzie pokazano sposób <ph id="ph1">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph> metodę można przesłonić według typu pochodnego.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.ValueType.ToString">
          <source>Returns the fully qualified type name of this instance.</source>
          <target state="translated">Zwraca nazwę FQDN typu tego wystąpienia.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.ValueType.ToString">
          <source>The fully qualified type name.</source>
          <target state="translated">Nazwa FQDN typu.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.ToString">
          <source>The <ph id="ph1">&lt;xref:System.ValueType.ToString%2A?displayProperty=nameWithType&gt;</ph> method overrides the <ph id="ph2">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph> method and provides the default implementation of the <ph id="ph3">`ToString`</ph> method for value types.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ValueType.ToString%2A?displayProperty=nameWithType&gt;</ph> Zamienników metod <ph id="ph2">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph> — metoda i udostępnia domyślną implementację elementu <ph id="ph3">`ToString`</ph> metody dla typów wartości.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.ToString">
          <source>(Value types are types defined by the <ph id="ph1">`struct`</ph> keyword in C#, and by the <ph id="ph2">`Structure`</ph>...<ph id="ph3">`End Structure`</ph> construct in Visual Basic.) Functionally, however, the implementation is that same as that of <ph id="ph4">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph>: the method returns the fully qualified type name.</source>
          <target state="translated">(Typy wartości są typy zdefiniowane przez <ph id="ph1">`struct`</ph> słów kluczowych w języku C#, a także <ph id="ph2">`Structure`</ph>... <ph id="ph3">`End Structure`</ph> utworzyć w języku Visual Basic.) Funkcjonalnie, jednak jest to taka sama, jak te wdrożenia <ph id="ph4">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph>: metoda zwraca w pełni kwalifikowaną nazwę typu.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.ToString">
          <source>Value types defined by the <ph id="ph1">`struct`</ph> keyword in C# and the <ph id="ph2">`Structure`</ph>...<ph id="ph3">`End Structure`</ph> construct in Visual Basic typically override the <ph id="ph4">&lt;xref:System.ValueType.ToString%2A?displayProperty=nameWithType&gt;</ph> method to provide a more meaningful string representation of the value type.</source>
          <target state="translated">Typy zdefiniowane przez wartości <ph id="ph1">`struct`</ph> — słowo kluczowe języka C# i <ph id="ph2">`Structure`</ph>... <ph id="ph3">`End Structure`</ph> zwykle zastąpienie konstrukcja w języku Visual Basic <ph id="ph4">&lt;xref:System.ValueType.ToString%2A?displayProperty=nameWithType&gt;</ph> metodę w celu zapewnienia bardziej zrozumiałej reprezentację ciągu na wartość typu.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.ToString">
          <source>The following example illustrates the difference.</source>
          <target state="translated">Poniższy przykład przedstawia różnicy.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.ToString">
          <source>It defines two value types, <ph id="ph1">`EmployeeA`</ph> and <ph id="ph2">`EmployeeB`</ph>, creates an instance of each, and calls its <ph id="ph3">`ToString`</ph> method.</source>
          <target state="translated">Definiuje dwa typy wartości, <ph id="ph1">`EmployeeA`</ph> i <ph id="ph2">`EmployeeB`</ph>, tworzone jest wystąpienie i wywołuje jego <ph id="ph3">`ToString`</ph> metody.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.ToString">
          <source>Because the <ph id="ph1">`EmployeeA`</ph> structure does not override the <ph id="ph2">&lt;xref:System.ValueType.ToString%2A?displayProperty=nameWithType&gt;</ph> method, it displays only the fully qualified type name.</source>
          <target state="translated">Ponieważ <ph id="ph1">`EmployeeA`</ph> struktury nie przesłania <ph id="ph2">&lt;xref:System.ValueType.ToString%2A?displayProperty=nameWithType&gt;</ph> metody wyświetla tylko pełni kwalifikowaną nazwę typu.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.ToString">
          <source>The <ph id="ph1">`EmployeeB.ToString`</ph> method, on the other hand, provides meaningful information about the object.</source>
          <target state="translated"><ph id="ph1">`EmployeeB.ToString`</ph> Metody z drugiej strony, zawiera przydatne informacje o obiekcie.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.ToString">
          <source>Note that, although enumeration types are also value types, they derive from the <ph id="ph1">&lt;xref:System.Enum&gt;</ph> class, which overrides  <ph id="ph2">&lt;xref:System.ValueType.ToString%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Należy pamiętać, że chociaż Typy wyliczeniowe są również typy wartości, pochodzą one od <ph id="ph1">&lt;xref:System.Enum&gt;</ph> klasy, co zastępuje <ph id="ph2">&lt;xref:System.ValueType.ToString%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.ToString">
          <source>Notes for the Windows Runtime</source>
          <target state="translated">Uwagi dla środowiska uruchomieniowego systemu Windows</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.ToString">
          <source>When you call the <ph id="ph1">&lt;xref:System.ValueType.ToString%2A&gt;</ph> method on a <ph id="ph2">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> structure, it provides the default behavior for value types that don’t override <ph id="ph3">&lt;xref:System.ValueType.ToString%2A&gt;</ph>.</source>
          <target state="translated">Podczas wywoływania <ph id="ph1">&lt;xref:System.ValueType.ToString%2A&gt;</ph> metoda <ph id="ph2">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> struktury zapewnia domyślne zachowanie dla typów wartości, które nie zastępują <ph id="ph3">&lt;xref:System.ValueType.ToString%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.ToString">
          <source>This is part of the support that the .NET Framework provides for the <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> (see <bpt id="p1">[</bpt>.NET Framework Support for Windows Store Apps and Windows Runtime<ept id="p1">](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)</ept>).</source>
          <target state="translated">To jest częścią programu .NET Framework zapewnia obsługę <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> (zobacz <bpt id="p1">[</bpt>.NET Framework obsługuje dla aplikacji ze Sklepu Windows i środowiska wykonawczego systemu Windows<ept id="p1">](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)</ept>).</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.ToString">
          <source><ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> structures can’t override <ph id="ph2">&lt;xref:System.ValueType.ToString%2A&gt;</ph>, even if they’re written with C# or Visual Basic, because they can’t have methods.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> Nie można zastąpić struktury <ph id="ph2">&lt;xref:System.ValueType.ToString%2A&gt;</ph>nawet wtedy, gdy są napisane w języku C# lub Visual Basic, ponieważ nie mają metod.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ValueType.ToString">
          <source>(In addition, structures in the <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> itself don’t inherit <ph id="ph2">&lt;xref:System.ValueType&gt;</ph>.) However, they appear to have <ph id="ph3">&lt;xref:System.ValueType.ToString%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.ValueType.Equals%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</source>
          <target state="translated">(Ponadto struktury w <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> sam nie dziedziczą <ph id="ph2">&lt;xref:System.ValueType&gt;</ph>.) Jednak pojawią się one mieć <ph id="ph3">&lt;xref:System.ValueType.ToString%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.ValueType.Equals%2A&gt;</ph>, i <ph id="ph5">&lt;xref:System.ValueType.GetHashCode%2A&gt;</ph> metody, gdy ich używać w kodzie C# lub Visual Basic i .NET Framework zapewnia domyślne zachowanie dla tych metod.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>