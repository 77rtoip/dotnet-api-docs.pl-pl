<Type Name="ValueType" FullName="System.ValueType">
  <Metadata><Meta Name="ms.openlocfilehash" Value="28f1d057ec658f2384bcc5dd43aacd177553bacc" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69404371" /></Metadata><TypeSignature Language="C#" Value="public abstract class ValueType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit ValueType extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ValueType" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ValueType" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValueType abstract" />
  <TypeSignature Language="F#" Value="type ValueType = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Udostępnia klasę bazową dla typów wartości.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ValueType>przesłania metody wirtualne z <xref:System.Object> programu przy użyciu większej liczby odpowiednich implementacji dla typów wartości. Zobacz również <xref:System.Enum>, który dziedziczy z <xref:System.ValueType>.  
  
 Typy danych są rozdzielane na typy wartości i typy odwołań. Typy wartości są przydzielonymi przez stos lub przydzielonymi wbudowanymi w strukturze. Typy odwołań są przydzieloną sterty. Oba typy odwołań i wartości są wyprowadzane z klasy <xref:System.Object>bazowej Ultimate. W przypadkach, gdy jest to konieczne, aby typ wartości działał jak obiekt, otoka, która sprawia, że typ wartości wygląda jak obiekt referencyjny, jest przypisywany na stercie, a wartość typu wartości jest kopiowana do niej. Otoka jest oznaczona, więc system wie, że zawiera typ wartości. Ten proces jest znany jako opakowanie, a proces odwrotny jest znany jako rozpakowywanie. Opakowanie i rozpakowywanie Zezwalaj na każdy typ, który ma być traktowany jako obiekt.  
  
 Chociaż <xref:System.ValueType> jest niejawną klasą bazową dla typów wartości, nie można utworzyć klasy, <xref:System.ValueType> która dziedziczy po bezpośredniej. Zamiast tego poszczególne kompilatory dostarczają słowo kluczowe lub konstrukcja języka (na przykład `struct` w C# i `Structure`...`End Structure` w Visual Basic) do obsługi tworzenia typów wartości.  
  
 Nie jest to obsługiwane jako klasa bazowa dla typów wartości w .NET Framework, <xref:System.ValueType> struktura zazwyczaj nie jest używana bezpośrednio w kodzie. Można go jednak użyć jako parametru w wywołaniach metod, aby ograniczyć liczbę możliwych argumentów do typów wartości, a nie wszystkich obiektów, lub zezwolić na użycie metody do obsługi wielu różnych typów wartości. Poniższy przykład ilustruje sposób <xref:System.ValueType> uniemożliwia przekazywanie typów odwołań do metod. Definiuje klasę o nazwie `Utility` , która zawiera cztery metody: `IsNumeric`, która wskazuje, czy jego argument jest liczbą; `IsInteger`, która wskazuje, czy jego argument jest liczbą całkowitą; , która wskazuje, czy jego argument jest liczbą zmiennoprzecinkową; i `Compare`, która wskazuje relację między dwiema wartościami liczbowymi. `IsFloat` W każdym przypadku parametry metody są typu <xref:System.ValueType>, a typy odwołań nie mogą być przesyłane do metod.  
  
 [!code-csharp[System.ValueType.Structure#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#1)]
 [!code-vb[System.ValueType.Structure#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#1)]  
  
 Poniższy przykład ilustruje wywołania metod `Utility` klasy.  
  
 [!code-csharp[System.ValueType.Structure#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#2)]
 [!code-vb[System.ValueType.Structure#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Object" />
    <altmember cref="T:System.Enum" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValueType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ValueType();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.ValueType" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="valueType.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Obiekt do porównania z bieżącym wystąpieniem.</param>
        <summary>Wskazuje, czy to wystąpienie i określony obiekt są równe.</summary>
        <returns><see langword="true" />Jeśli <paramref name="obj" /> to wystąpienie jest tego samego typu i reprezentuje tę samą wartość, <see langword="false" />w przeciwnym razie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType> Metoda przesłania<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> i zapewnia domyślną implementację równość wartości dla wszystkich typów wartości w .NET Framework.  
  
 Jeśli żadne z pól bieżącego wystąpienia i `obj` nie są typami odwołań <xref:System.ValueType.Equals%2A> , Metoda wykonuje porównanie bajt po bajcie dwóch obiektów w pamięci. W przeciwnym razie używa odbicia, aby porównać odpowiednie pola `obj` i to wystąpienie.  
  
> [!TIP]
>  Szczególnie jeśli typ wartości zawiera pola, które są typami odwołań, należy zastąpić <xref:System.ValueType.Equals%28System.Object%29> metodę. Pozwala to zwiększyć wydajność i pozwala dokładniej przedstawiać znaczenie dla tego typu.  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a>Uwagi dotyczące[!INCLUDE[wrt](~/includes/wrt-md.md)]  
 Gdy wywoływana jest <xref:System.ValueType.Equals%2A> Metoda [!INCLUDE[wrt](~/includes/wrt-md.md)] w strukturze, zapewnia domyślne zachowanie dla typów wartości, które nie są zastępowane <xref:System.ValueType.Equals%2A>. Jest to część pomocy technicznej zapewnianej [!INCLUDE[wrt](~/includes/wrt-md.md)] przez .NET Framework (zobacz [.NET Framework obsługa aplikacji do sklepu Windows i środowisko wykonawcze systemu Windows](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)). [!INCLUDE[wrt](~/includes/wrt-md.md)]nie można przesłonić <xref:System.ValueType.Equals%2A>struktur, nawet jeśli są C# one zapisywana lub Visual Basic, ponieważ nie mogą mieć metod. (Ponadto struktury [!INCLUDE[wrt](~/includes/wrt-md.md)] same w sobie nie dziedziczą <xref:System.ValueType>). Jednak pojawiają się one w <xref:System.ValueType.ToString%2A>taki <xref:System.ValueType.Equals%2A>sposób, <xref:System.ValueType.GetHashCode%2A> że metody,, i, gdy C# są używane w kodzie lub Visual Basic, a .NET Framework zapewnia domyślne zachowanie tych metod.  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób <xref:System.ValueType.Equals%2A> przesłania metody przez pochodny typ wartości.  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="valueType.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca kod skrótu dla tego wystąpienia.</summary>
        <returns>32-bitowa liczba całkowita ze znakiem, która jest kodem skrótu dla tego wystąpienia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda ma zastosowanie do typów pochodnych od <xref:System.ValueType>. <xref:System.ValueType.GetHashCode%2A> Co najmniej jedno pole typu pochodnego jest używane do obliczania wartości zwracanej. Jeśli wywołasz `GetHashCode` metodę typu pochodnego, wartość zwracana prawdopodobnie nie będzie odpowiednia do użycia jako klucz w tabeli skrótów. Ponadto jeśli wartość jednego lub kilku z tych pól ulegnie zmianie, wartość zwracana może stać się nieodpowiednia do użycia jako klucz w tabeli skrótów. W obu przypadkach należy rozważyć napisanie własnej implementacji <xref:System.ValueType.GetHashCode%2A> metody, która dokładniej reprezentuje koncepcję kodu skrótu dla tego typu.  
  
 Aby uzyskać więcej informacji, <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>Zobacz i <xref:System.Collections.Hashtable?displayProperty=nameWithType>.  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a>Uwagi dotyczące[!INCLUDE[wrt](~/includes/wrt-md.md)]  
 Gdy wywoływana jest <xref:System.ValueType.GetHashCode%2A> Metoda [!INCLUDE[wrt](~/includes/wrt-md.md)] w strukturze, zapewnia domyślne zachowanie dla typów wartości, które nie są zastępowane <xref:System.ValueType.GetHashCode%2A>. Jest to część pomocy technicznej zapewnianej [!INCLUDE[wrt](~/includes/wrt-md.md)] przez .NET Framework (zobacz [.NET Framework obsługa aplikacji do sklepu Windows i środowisko wykonawcze systemu Windows](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)). [!INCLUDE[wrt](~/includes/wrt-md.md)]nie można przesłonić <xref:System.ValueType.GetHashCode%2A>struktur, nawet jeśli są C# one zapisywana lub Visual Basic, ponieważ nie mogą mieć metod. (Ponadto struktury [!INCLUDE[wrt](~/includes/wrt-md.md)] same w sobie nie dziedziczą <xref:System.ValueType>). Jednak pojawiają się one w <xref:System.ValueType.ToString%2A>taki <xref:System.ValueType.Equals%2A>sposób, <xref:System.ValueType.GetHashCode%2A> że metody,, i, gdy C# są używane w kodzie lub Visual Basic, a .NET Framework zapewnia domyślne zachowanie tych metod.  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób <xref:System.ValueType.GetHashCode%2A> przesłania metody przez pochodny typ wartości.  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="valueType.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca w pełni kwalifikowaną nazwę typu tego wystąpienia.</summary>
        <returns>W pełni kwalifikowana nazwa typu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda przesłania metodę i zapewnia domyślną implementację `ToString` metody dla typów wartości. <xref:System.Object.ToString%2A?displayProperty=nameWithType> <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> (Typy wartości są typami zdefiniowanymi przez `struct` słowo kluczowe C#w `Structure`, i przez... `End Structure` konstrukcja w Visual Basic.) Jednakże implementacja jest taka sama jak w przypadku <xref:System.Object.ToString%2A?displayProperty=nameWithType>: Metoda zwraca w pełni kwalifikowaną nazwę typu.  
  
 Typy wartości zdefiniowane przez `struct` słowo kluczowe w C# i `Structure`... konstrukcja w Visual Basic zwykle przesłania metodę <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> , aby zapewnić bardziej zrozumiałą reprezentację ciągu typu wartości. `End Structure` Poniższy przykład ilustruje różnicę. Definiuje dwa typy `EmployeeA` wartości i `EmployeeB`, tworzy wystąpienie każdego i wywołuje jego `ToString` metodę. Ponieważ struktura nie <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> przesłania metody, zostanie wyświetlona tylko w pełni kwalifikowana nazwa typu. `EmployeeA` `EmployeeB.ToString` Metoda z drugiej strony zawiera istotne informacje dotyczące obiektu.  
  
 [!code-csharp[System.ValueType.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ValueType.ToString/cs/ToString2.cs#1)]
 [!code-vb[System.ValueType.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ValueType.ToString/vb/ToString2.vb#1)]  
  
 Należy pamiętać, że chociaż typy wyliczeniowe są również typami wartości, pochodzą <xref:System.Enum> z klasy, która <xref:System.ValueType.ToString%2A?displayProperty=nameWithType>zastępuje.  
  
## <a name="notes-for-the-windows-runtime"></a>Uwagi dotyczące środowisko wykonawcze systemu Windows  
 Gdy wywoływana jest <xref:System.ValueType.ToString%2A> Metoda [!INCLUDE[wrt](~/includes/wrt-md.md)] w strukturze, zapewnia domyślne zachowanie dla typów wartości, które nie są zastępowane <xref:System.ValueType.ToString%2A>. Jest to część pomocy technicznej zapewnianej [!INCLUDE[wrt](~/includes/wrt-md.md)] przez .NET Framework (zobacz [.NET Framework obsługa aplikacji do sklepu Windows i środowisko wykonawcze systemu Windows](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)). [!INCLUDE[wrt](~/includes/wrt-md.md)]nie można przesłonić <xref:System.ValueType.ToString%2A>struktur, nawet jeśli są C# one zapisywana lub Visual Basic, ponieważ nie mogą mieć metod. (Ponadto struktury [!INCLUDE[wrt](~/includes/wrt-md.md)] same w sobie nie dziedziczą <xref:System.ValueType>). Jednak pojawiają się one w <xref:System.ValueType.ToString%2A>taki <xref:System.ValueType.Equals%2A>sposób, <xref:System.ValueType.GetHashCode%2A> że metody,, i, gdy C# są używane w kodzie lub Visual Basic, a .NET Framework zapewnia domyślne zachowanie tych metod.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
