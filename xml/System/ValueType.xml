<Type Name="ValueType" FullName="System.ValueType">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="90c8c20799ff15aac3b07f147a974ce31a576b37" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39943663" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ValueType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit ValueType extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ValueType" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ValueType" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValueType abstract" />
  <TypeSignature Language="F#" Value="type ValueType = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Udostępnia klasę bazową dla typów wartości.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ValueType> zastępuje metody wirtualne od <xref:System.Object> z implementacjami bardziej odpowiednie dla typów wartości. Zobacz też <xref:System.Enum>, który dziedziczy z <xref:System.ValueType>.  
  
 Typy danych są podzielone na typy wartości i odwołań. Typy wartości są przydzielone do stosu lub alokowana wewnątrz struktury. Typy odwołań są przydzielony w stercie. Typy odwołań i wartości pochodzą z klasy bazowej ultimate <xref:System.Object>. W przypadkach, gdy jest niezbędne dla typu wartości działały jak obiekt otoki, sprawia, że typ wartości wygląd obiektu odwołania jest przydzielony na stosie i typ wartości jest kopiowana do niego. Otoki jest oznaczona, więc system wie, że zawiera on typu wartości. Ten proces jest nazywany pakowania i procesu jest znany jako rozpakowywania. Pakowanie i rozpakowywanie Zezwalaj na dowolny typ powinien być traktowany jako obiekt.  
  
 Mimo że <xref:System.ValueType> jest niejawne klasa podstawowa dla typów wartości nie można utworzyć klasę, która dziedziczy po elemencie <xref:System.ValueType> bezpośrednio. Zamiast tego indywidualnych kompilatorów zapewniają słowo kluczowe języka lub konstrukcji (takie jak `struct` w języku C# i `Structure`...`End Structure` w Visual Basic), aby obsługiwać tworzenie typów wartości.  
  
 Oprócz służy jako klasa bazowa dla typów wartości w programie .NET Framework <xref:System.ValueType> struktura nie jest zazwyczaj używany bezpośrednio w kodzie. Jednak może służyć jako parametr w wywołaniach metod ograniczyć możliwe argumenty do typów wartości, a nie wszystkich obiektów lub zezwolić na metodę do obsługi wielu typów inną wartość. Poniższy przykład ilustruje sposób <xref:System.ValueType> zapobiega przekazywaniu do metod typy odwołań. Definiuje klasę o nazwie `Utility` zawierający cztery metody: `IsNumeric`, która wskazuje, czy argument jest liczbą; `IsInteger`, która wskazuje, czy argument jest liczbą całkowitą; `IsFloat`, która wskazuje, czy argument jest liczbą zmiennoprzecinkową; i `Compare`, który określa relację pomiędzy dwóch wartości liczbowych. W obu przypadkach parametry metody są typu <xref:System.ValueType>, i typy referencyjne nie będą mogli przekazywany do metody.  
  
 [!code-csharp[System.ValueType.Structure#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#1)]
 [!code-vb[System.ValueType.Structure#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#1)]  
  
 Poniższy przykład ilustruje sposób wywołania metody `Utility` klasy.  
  
 [!code-csharp[System.ValueType.Structure#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#2)]
 [!code-vb[System.ValueType.Structure#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Object" />
    <altmember cref="T:System.Enum" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValueType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ValueType();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.ValueType" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="valueType.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Obiekt do porównania z bieżącym wystąpieniem.</param>
        <summary>Wskazuje, czy to wystąpienie oraz określony obiekt są równe.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="obj" /> oraz to wystąpienie są tego samego typu i reprezentują tę samą wartość; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType> Zastąpienia metody <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> i udostępnia domyślną implementację elementu równości wartości dla wszystkich typów wartości w programie .NET Framework.  
  
 Jeśli żadne z pól bieżącego wystąpienia i `obj` są typami odwołań, <xref:System.ValueType.Equals%2A> metoda wykonuje porównanie bajt po bajcie dwóch obiektów w pamięci. W przeciwnym razie używa odbicia do porównania odpowiednich pól `obj` i tego wystąpienia.  
  
> [!TIP]
>  Szczególnie w przypadku, gdy typ wartości zawiera pola, które są typami odwołań, należy zastąpić <xref:System.ValueType.Equals%28System.Object%29> metody. Może to zwiększyć wydajność i pozwalają na dokładniejsze reprezentują znaczenie równości dla typu.  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a>Uwagi dla [!INCLUDE[wrt](~/includes/wrt-md.md)]  
 Gdy wywołujesz <xref:System.ValueType.Equals%2A> metody [!INCLUDE[wrt](~/includes/wrt-md.md)] struktury, zapewnia domyślne zachowanie dla typów wartości, które nie zastąpisz <xref:System.ValueType.Equals%2A>. Jest to część obsługi, która oferuje funkcje programu .NET Framework [!INCLUDE[wrt](~/includes/wrt-md.md)] (zobacz [.NET Framework obsługuje for Windows Store Apps i środowiska wykonawczego Windows](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)). [!INCLUDE[wrt](~/includes/wrt-md.md)] Nie można zastąpić struktury <xref:System.ValueType.Equals%2A>nawet wtedy, gdy zostały napisane w języku C# lub Visual Basic, ponieważ nie mają metod. (Ponadto struktury w [!INCLUDE[wrt](~/includes/wrt-md.md)] sam nie dziedziczą <xref:System.ValueType>.) Jednak wydają się mieć <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, i <xref:System.ValueType.GetHashCode%2A> metody, gdy będziesz ich używać w kodzie języka C# lub Visual Basic a .NET Framework zapewnia domyślne zachowanie dla tych metod.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób, w jaki <xref:System.ValueType.Equals%2A> metodę można przesłonić według typu pochodnego.  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="valueType.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca kod skrótu dla tego wystąpienia.</summary>
        <returns>32-bitowa liczba całkowita ze znakiem jest wartość skrótu dla tego wystąpienia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ValueType.GetHashCode%2A> Metodę stosuje się do typów pochodnych typu <xref:System.ValueType>. Co najmniej jedno pole typu pochodnego jest używane do obliczania wartości zwracanej. Jeśli wywołasz typu pochodnego `GetHashCode` metody, wartość zwracana prawdopodobnie nie można użyć jako klucza w tabeli wyznaczania wartości skrótu. Ponadto jeśli zmieni się wartość co najmniej jeden z tych pól, wartość zwracana mogą stać się niezdatna do użytku jako klucz w tabeli wyznaczania wartości skrótu. W obu przypadkach należy wziąć pod uwagę pisania własnych implementacji <xref:System.ValueType.GetHashCode%2A> metodę, która lepiej reprezentuje pojęcie wartość skrótu dla tego typu.  
  
 Aby uzyskać więcej informacji, zobacz <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>, i <xref:System.Collections.Hashtable?displayProperty=nameWithType>.  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a>Uwagi dla [!INCLUDE[wrt](~/includes/wrt-md.md)]  
 Gdy wywołujesz <xref:System.ValueType.GetHashCode%2A> metody [!INCLUDE[wrt](~/includes/wrt-md.md)] struktury, zapewnia domyślne zachowanie dla typów wartości, które nie zastąpisz <xref:System.ValueType.GetHashCode%2A>. Jest to część obsługi, która oferuje funkcje programu .NET Framework [!INCLUDE[wrt](~/includes/wrt-md.md)] (zobacz [.NET Framework obsługuje for Windows Store Apps i środowiska wykonawczego Windows](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)). [!INCLUDE[wrt](~/includes/wrt-md.md)] Nie można zastąpić struktury <xref:System.ValueType.GetHashCode%2A>nawet wtedy, gdy zostały napisane w języku C# lub Visual Basic, ponieważ nie mają metod. (Ponadto struktury w [!INCLUDE[wrt](~/includes/wrt-md.md)] sam nie dziedziczą <xref:System.ValueType>.) Jednak wydają się mieć <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, i <xref:System.ValueType.GetHashCode%2A> metody, gdy będziesz ich używać w kodzie języka C# lub Visual Basic a .NET Framework zapewnia domyślne zachowanie dla tych metod.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób, w jaki <xref:System.ValueType.GetHashCode%2A> metodę można przesłonić według typu pochodnego.  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="valueType.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca w pełni kwalifikowana nazwa typu tego wystąpienia.</summary>
        <returns>W pełni kwalifikowana nazwa typu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> Zastąpienia metody <xref:System.Object.ToString%2A?displayProperty=nameWithType> metody i udostępnia domyślną implementację elementu `ToString` metody dla typów wartości. (Typy wartości są typy zdefiniowane przez `struct` — słowo kluczowe w języku C# i przez `Structure`... `End Structure` konstruowania w języku Visual Basic.) Funkcjonalnie, jednak jest to ten sam, jak w przypadku wdrożenia <xref:System.Object.ToString%2A?displayProperty=nameWithType>: metoda ta zwraca w pełni kwalifikowana nazwa typu.  
  
 Typy zdefiniowane przez wartości `struct` — słowo kluczowe w języku C# i `Structure`... `End Structure` konstrukcja w języku Visual Basic zazwyczaj zastąpienie <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> metody w celu zapewnienia bardziej znaczącą reprezentację ciągu typu wartości. Poniższy przykład ilustruje tę różnicę. Definiuje dwa typy wartości, `EmployeeA` i `EmployeeB`, tworzone jest wystąpienie i wywołuje jego `ToString` metody. Ponieważ `EmployeeA` struktury nie zastępuje <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> metody wyświetla tylko w pełni kwalifikowana nazwa typu. `EmployeeB.ToString` Metody, z drugiej strony, zapewnia istotnych informacji o obiekcie.  
  
 [!code-csharp[System.ValueType.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ValueType.ToString/cs/ToString2.cs#1)]
 [!code-vb[System.ValueType.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ValueType.ToString/vb/ToString2.vb#1)]  
  
 Należy pamiętać, że chociaż Typy wyliczeniowe są również typy wartości, pochodzą one od <xref:System.Enum> klasy, co zastępuje <xref:System.ValueType.ToString%2A?displayProperty=nameWithType>.  
  
## <a name="notes-for-the-windows-runtime"></a>Uwagi dotyczące środowiska uruchomieniowego Windows  
 Gdy wywołujesz <xref:System.ValueType.ToString%2A> metody [!INCLUDE[wrt](~/includes/wrt-md.md)] struktury, zapewnia domyślne zachowanie dla typów wartości, które nie zastąpisz <xref:System.ValueType.ToString%2A>. Jest to część obsługi, która oferuje funkcje programu .NET Framework [!INCLUDE[wrt](~/includes/wrt-md.md)] (zobacz [.NET Framework obsługuje for Windows Store Apps i środowiska wykonawczego Windows](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)). [!INCLUDE[wrt](~/includes/wrt-md.md)] Nie można zastąpić struktury <xref:System.ValueType.ToString%2A>nawet wtedy, gdy zostały napisane w języku C# lub Visual Basic, ponieważ nie mają metod. (Ponadto struktury w [!INCLUDE[wrt](~/includes/wrt-md.md)] sam nie dziedziczą <xref:System.ValueType>.) Jednak wydają się mieć <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, i <xref:System.ValueType.GetHashCode%2A> metody, gdy będziesz ich używać w kodzie języka C# lub Visual Basic a .NET Framework zapewnia domyślne zachowanie dla tych metod.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>