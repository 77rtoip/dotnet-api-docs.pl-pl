<Type Name="ValueType" FullName="System.ValueType">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3b756fc1621dab1597966503a0af93b3c8478663" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30744083" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ValueType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit ValueType extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ValueType" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ValueType" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValueType abstract" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Udostępnia klasę podstawową dla typów wartości.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ValueType> zastępuje metody wirtualne z <xref:System.Object> z implementacjami bardziej odpowiednie dla typów wartości. Zobacz też <xref:System.Enum>, który dziedziczy z <xref:System.ValueType>.  
  
 Typy danych są podzielone na typy wartości i typy referencyjne. Typy wartości są przydzielone stosu lub przydzielone wbudowany w strukturze. Typy odwołań są przydzielone stosu. Typy zarówno odwołania, jak i wartości pochodzą z ultimate klasy podstawowej <xref:System.Object>. W przypadkach, gdy jest niezbędne dla typu wartości działały jak obiekt otoka dzięki temu wygląda jak obiektu odwołania jest przydzielony na stosie, a typ wartości jest kopiowana do jej typ wartości. Otoka jest oznaczony jako, aby umożliwić systemowi, że zawiera on typu wartości. Ten proces jest nazywany opakowywanie i procesu jest znany jako rozpakowywanie. Opakowywanie i rozpakowywanie umożliwia dowolny typ powinien być traktowany jako obiekt.  
  
 Mimo że <xref:System.ValueType> jest niejawna klasa podstawowa dla typów wartości nie można utworzyć klasy, która dziedziczy <xref:System.ValueType> bezpośrednio. Zamiast tego indywidualnych kompilatory zapewniają słowa kluczowego języka lub konstrukcji (takich jak `struct` w języku C# i `Structure`...`End Structure` w Visual Basic) w celu tworzenia typów wartości.  
  
 Jako uzupełnienie służy jako klasa podstawowa dla typów wartości w programie .NET Framework <xref:System.ValueType> struktury nie jest zwykle używany bezpośrednio w kodzie. Jednak może służyć jako parametr w wywołaniach metody ograniczyć możliwe argumenty do typów wartości, a nie wszystkich obiektów lub umożliwiające metody do obsługi wielu typów inną wartość. Poniższy przykład przedstawia sposób <xref:System.ValueType> zapobiega przekazywaniu do metod typy referencyjne. Definiuje klasę o nazwie `Utility` zawiera cztery metody: `IsNumeric`, która wskazuje, czy jej argument jest liczbą; `IsInteger`, która wskazuje, czy jej argument jest liczbą całkowitą. `IsFloat`, która wskazuje, czy argumentem jest liczba zmiennoprzecinkowa; i `Compare`, które określa relację między dwóch wartości liczbowych. W każdym przypadku parametry metody są typu <xref:System.ValueType>, i typy referencyjne nie będą mogli przekazywany do metody.  
  
 [!code-csharp[System.ValueType.Structure#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#1)]
 [!code-vb[System.ValueType.Structure#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#1)]  
  
 Poniższy przykład przedstawia wywołania metody `Utility` klasy.  
  
 [!code-csharp[System.ValueType.Structure#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#2)]
 [!code-vb[System.ValueType.Structure#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Object" />
    <altmember cref="T:System.Enum" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValueType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ValueType();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.ValueType" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Obiekt do porównania z bieżącym wystąpieniem.</param>
        <summary>Wskazuje, czy to wystąpienie oraz określony obiekt są równe.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="obj" /> oraz to wystąpienie są tego samego typu i reprezentują tę samą wartość; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType> Zamienników metod <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> i udostępnia domyślną implementację równości wartości dla wszystkich typów wartości w programie .NET Framework.  
  
 Jeśli żadne z pól bieżącego wystąpienia i `obj` są typy referencyjne <xref:System.ValueType.Equals%2A> metoda wykonuje po bicie porównanie dwóch obiektów w pamięci. W przeciwnym razie używa odbicia do porównania z odpowiednich pól `obj` i to wystąpienie.  
  
> [!TIP]
>  Zwłaszcza w wypadku danego typu wartość zawiera pola, które są typy odwołań, należy zastąpić <xref:System.ValueType.Equals%28System.Object%29> metody. Może to poprawić wydajność i pozwala na dokładniejsze reprezentują znaczenie równości dla typu.  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a>Uwagi dla [!INCLUDE[wrt](~/includes/wrt-md.md)]  
 Podczas wywoływania <xref:System.ValueType.Equals%2A> metoda [!INCLUDE[wrt](~/includes/wrt-md.md)] struktury zapewnia domyślne zachowanie dla typów wartości, które nie zastępują <xref:System.ValueType.Equals%2A>. To jest częścią programu .NET Framework zapewnia obsługę [!INCLUDE[wrt](~/includes/wrt-md.md)] (zobacz [.NET Framework obsługuje dla aplikacji ze Sklepu Windows i środowiska wykonawczego systemu Windows](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)). [!INCLUDE[wrt](~/includes/wrt-md.md)] Nie można zastąpić struktury <xref:System.ValueType.Equals%2A>nawet wtedy, gdy są napisane w języku C# lub Visual Basic, ponieważ nie mają metod. (Ponadto struktury w [!INCLUDE[wrt](~/includes/wrt-md.md)] sam nie dziedziczą <xref:System.ValueType>.) Jednak pojawią się one mieć <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, i <xref:System.ValueType.GetHashCode%2A> metody, gdy ich używać w kodzie C# lub Visual Basic i .NET Framework zapewnia domyślne zachowanie dla tych metod.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób <xref:System.ValueType.Equals%2A> metodę można przesłonić według typu pochodnego.  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca kod skrótu dla tego wystąpienia.</summary>
        <returns>32-bitowe liczby całkowite ze znakiem jest wartość skrótu dla tego wystąpienia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ValueType.GetHashCode%2A> Metodę stosuje się do typów pochodnych <xref:System.ValueType>. Co najmniej jedno pole typu pochodnego służy do obliczania wartości zwracanej. Wywołanie typu pochodnego `GetHashCode` metody, wartość zwracana prawdopodobnie nie można użyć jako klucza w tablicy skrótów. Ponadto jeśli zmieni się wartość co najmniej jednego z tych pól, zwracana wartość mogą stać się niezdatna do użytku jako klucz w tablicy skrótów. W obu przypadkach należy wziąć pod uwagę pisanie własnych implementacja <xref:System.ValueType.GetHashCode%2A> metoda, która reprezentuje dokładniejsze pojęcie wartość skrótu dla tego typu.  
  
 Aby uzyskać więcej informacji, zobacz <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>, i <xref:System.Collections.Hashtable?displayProperty=nameWithType>.  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a>Uwagi dla [!INCLUDE[wrt](~/includes/wrt-md.md)]  
 Podczas wywoływania <xref:System.ValueType.GetHashCode%2A> metoda [!INCLUDE[wrt](~/includes/wrt-md.md)] struktury zapewnia domyślne zachowanie dla typów wartości, które nie zastępują <xref:System.ValueType.GetHashCode%2A>. To jest częścią programu .NET Framework zapewnia obsługę [!INCLUDE[wrt](~/includes/wrt-md.md)] (zobacz [.NET Framework obsługuje dla aplikacji ze Sklepu Windows i środowiska wykonawczego systemu Windows](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)). [!INCLUDE[wrt](~/includes/wrt-md.md)] Nie można zastąpić struktury <xref:System.ValueType.GetHashCode%2A>nawet wtedy, gdy są napisane w języku C# lub Visual Basic, ponieważ nie mają metod. (Ponadto struktury w [!INCLUDE[wrt](~/includes/wrt-md.md)] sam nie dziedziczą <xref:System.ValueType>.) Jednak pojawią się one mieć <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, i <xref:System.ValueType.GetHashCode%2A> metody, gdy ich używać w kodzie C# lub Visual Basic i .NET Framework zapewnia domyślne zachowanie dla tych metod.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób <xref:System.ValueType.GetHashCode%2A> metodę można przesłonić według typu pochodnego.  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca nazwę FQDN typu tego wystąpienia.</summary>
        <returns>Nazwa FQDN typu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> Zamienników metod <xref:System.Object.ToString%2A?displayProperty=nameWithType> — metoda i udostępnia domyślną implementację elementu `ToString` metody dla typów wartości. (Typy wartości są typy zdefiniowane przez `struct` słów kluczowych w języku C#, a także `Structure`... `End Structure` utworzyć w języku Visual Basic.) Funkcjonalnie, jednak jest to taka sama, jak te wdrożenia <xref:System.Object.ToString%2A?displayProperty=nameWithType>: metoda zwraca w pełni kwalifikowaną nazwę typu.  
  
 Typy zdefiniowane przez wartości `struct` — słowo kluczowe języka C# i `Structure`... `End Structure` zwykle zastąpienie konstrukcja w języku Visual Basic <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> metodę w celu zapewnienia bardziej zrozumiałej reprezentację ciągu na wartość typu. Poniższy przykład przedstawia różnicy. Definiuje dwa typy wartości, `EmployeeA` i `EmployeeB`, tworzone jest wystąpienie i wywołuje jego `ToString` metody. Ponieważ `EmployeeA` struktury nie przesłania <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> metody wyświetla tylko pełni kwalifikowaną nazwę typu. `EmployeeB.ToString` Metody z drugiej strony, zawiera przydatne informacje o obiekcie.  
  
 [!code-csharp[System.ValueType.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ValueType.ToString/cs/ToString2.cs#1)]
 [!code-vb[System.ValueType.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ValueType.ToString/vb/ToString2.vb#1)]  
  
 Należy pamiętać, że chociaż Typy wyliczeniowe są również typy wartości, pochodzą one od <xref:System.Enum> klasy, co zastępuje <xref:System.ValueType.ToString%2A?displayProperty=nameWithType>.  
  
## <a name="notes-for-the-windows-runtime"></a>Uwagi dla środowiska uruchomieniowego systemu Windows  
 Podczas wywoływania <xref:System.ValueType.ToString%2A> metoda [!INCLUDE[wrt](~/includes/wrt-md.md)] struktury zapewnia domyślne zachowanie dla typów wartości, które nie zastępują <xref:System.ValueType.ToString%2A>. To jest częścią programu .NET Framework zapewnia obsługę [!INCLUDE[wrt](~/includes/wrt-md.md)] (zobacz [.NET Framework obsługuje dla aplikacji ze Sklepu Windows i środowiska wykonawczego systemu Windows](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)). [!INCLUDE[wrt](~/includes/wrt-md.md)] Nie można zastąpić struktury <xref:System.ValueType.ToString%2A>nawet wtedy, gdy są napisane w języku C# lub Visual Basic, ponieważ nie mają metod. (Ponadto struktury w [!INCLUDE[wrt](~/includes/wrt-md.md)] sam nie dziedziczą <xref:System.ValueType>.) Jednak pojawią się one mieć <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, i <xref:System.ValueType.GetHashCode%2A> metody, gdy ich używać w kodzie C# lub Visual Basic i .NET Framework zapewnia domyślne zachowanie dla tych metod.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>