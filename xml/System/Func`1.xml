<Type Name="Func&lt;TResult&gt;" FullName="System.Func&lt;TResult&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="12c19fab871127dad68688aaa249b48d82668c35" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69406313" /></Metadata><TypeSignature Language="C#" Value="public delegate TResult Func&lt;out TResult&gt;();" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`1&lt;+ TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of Out TResult)() As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA;public delegate TResult Func();" />
  <TypeSignature Language="F#" Value="type Func&lt;'Result&gt; = delegate of unit -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters />
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="TResult"><span data-ttu-id="9ae25-101">Typ wartości zwracanej przez ten delegata.</span><span class="sxs-lookup"><span data-stu-id="9ae25-101">The type of the return value of the method that this delegate encapsulates.</span></span></typeparam>
    <summary><span data-ttu-id="9ae25-102">Hermetyzuje metodę, która nie ma parametrów i zwraca wartość typu określonego przez <typeparamref name="TResult" /> parametr.</span><span class="sxs-lookup"><span data-stu-id="9ae25-102">Encapsulates a method that has no parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</span></span></summary>
    <returns><span data-ttu-id="9ae25-103">Wartość zwracana metody, która jest hermetyzowana przez ten delegat.</span><span class="sxs-lookup"><span data-stu-id="9ae25-103">The return value of the method that this delegate encapsulates.</span></span></returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ae25-104">Tego delegata można użyć do reprezentowania metody, którą można przekazać jako parametru bez jawnego deklarowania niestandardowego delegata.</span><span class="sxs-lookup"><span data-stu-id="9ae25-104">You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="9ae25-105">Metoda hermetyzowana musi odpowiadać sygnaturze metody zdefiniowanej przez tego delegata.</span><span class="sxs-lookup"><span data-stu-id="9ae25-105">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="9ae25-106">Oznacza to, że metoda hermetyzowana nie może mieć parametrów i musi zwracać wartość.</span><span class="sxs-lookup"><span data-stu-id="9ae25-106">This means that the encapsulated method must have no parameters and must return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9ae25-107">Aby odwołać się do metody, która nie ma `void` parametrów i zwraca (lub w Visual Basic, która jest `Sub` zadeklarowana jako, `Function`a nie jako) <xref:System.Action> , należy zamiast tego użyć delegata.</span><span class="sxs-lookup"><span data-stu-id="9ae25-107">To reference a method that has no parameters and returns `void` (or in Visual Basic, that is declared as a `Sub` rather than as a `Function`), use the <xref:System.Action> delegate instead.</span></span>  
  
 <span data-ttu-id="9ae25-108">W przypadku korzystania z <xref:System.Func%601> delegata nie trzeba jawnie definiować delegata, który hermetyzuje metodę bez parametrów.</span><span class="sxs-lookup"><span data-stu-id="9ae25-108">When you use the <xref:System.Func%601> delegate, you do not have to explicitly define a delegate that encapsulates a parameterless method.</span></span> <span data-ttu-id="9ae25-109">Na przykład poniższy kod jawnie deklaruje delegata o nazwie `WriteMethod` i przypisuje odwołanie `OutputTarget.SendToFile` do metody wystąpienia do jego wystąpienia delegata.</span><span class="sxs-lookup"><span data-stu-id="9ae25-109">For example, the following code explicitly declares a delegate named `WriteMethod` and assigns a reference to the `OutputTarget.SendToFile` instance method to its delegate instance.</span></span>  
  
 [!code-csharp[System.Func~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Delegate.cs#1)]
 [!code-vb[System.Func~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Delegate.vb#1)]  
  
 <span data-ttu-id="9ae25-110">Poniższy przykład upraszcza ten kod przez utworzenie wystąpienia <xref:System.Func%601> delegata zamiast jawnego definiowania nowego delegata i przypisanie do niego nazwanej metody.</span><span class="sxs-lookup"><span data-stu-id="9ae25-110">The following example simplifies this code by instantiating the <xref:System.Func%601> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-csharp[System.Func~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Func1.cs#2)]
 [!code-vb[System.Func~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Func1.vb#2)]  
  
 <span data-ttu-id="9ae25-111">Można użyć <xref:System.Func%601> delegata z metodami anonimowymi C#w, jak pokazano w poniższym przykładzie.</span><span class="sxs-lookup"><span data-stu-id="9ae25-111">You can use the <xref:System.Func%601> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="9ae25-112">(Aby uzyskać wprowadzenie do metod anonimowych, zobacz [metody anonimowe](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)).</span><span class="sxs-lookup"><span data-stu-id="9ae25-112">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
  
 [!code-csharp[System.Func~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Anon.cs#3)]  
  
 <span data-ttu-id="9ae25-113">Można również przypisać wyrażenie lambda do <xref:System.Func%602> delegata, jak pokazano w poniższym przykładzie.</span><span class="sxs-lookup"><span data-stu-id="9ae25-113">You can also assign a lambda expression to a <xref:System.Func%602> delegate, as the following example illustrates.</span></span> <span data-ttu-id="9ae25-114">(Aby uzyskać wprowadzenie do wyrażeń lambda, zobacz [wyrażenia lambda](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) i [wyrażenia lambda](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span><span class="sxs-lookup"><span data-stu-id="9ae25-114">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) and [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 [!code-csharp[System.Func~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Lambda.cs#4)]
 [!code-vb[System.Func~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Lambda.vb#4)]  
  
 <span data-ttu-id="9ae25-115">Typ podstawowy wyrażenia lambda jest jednym z delegatów ogólnych `Func` .</span><span class="sxs-lookup"><span data-stu-id="9ae25-115">The underlying type of a lambda expression is one of the generic `Func` delegates.</span></span> <span data-ttu-id="9ae25-116">Dzięki temu można przekazać wyrażenie lambda jako parametr bez jawnego przypisywania go do delegata.</span><span class="sxs-lookup"><span data-stu-id="9ae25-116">This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.</span></span> <span data-ttu-id="9ae25-117">W szczególności, ponieważ wiele metod typów w <xref:System.Linq> przestrzeni nazw ma `Func` parametry, można przekazać te metody wyrażenie lambda `Func` bez bezpośredniego tworzenia wystąpienia delegata.</span><span class="sxs-lookup"><span data-stu-id="9ae25-117">In particular, because many methods of types in the <xref:System.Linq> namespace have `Func` parameters, you can pass these methods a lambda expression without explicitly instantiating a `Func` delegate.</span></span>  
  
 <span data-ttu-id="9ae25-118">Jeśli masz kosztowne obliczenie, które chcesz wykonać tylko wtedy, gdy wynik jest rzeczywiście potrzebny, można przypisać kosztowną funkcję do <xref:System.Func%601> delegata.</span><span class="sxs-lookup"><span data-stu-id="9ae25-118">If you have an expensive computation that you want to execute only if the result is actually needed, you can assign the expensive function to a <xref:System.Func%601> delegate.</span></span> <span data-ttu-id="9ae25-119">Wykonanie funkcji może następnie zostać opóźnione do momentu użycia właściwości, która uzyskuje dostęp do wartości w wyrażeniu.</span><span class="sxs-lookup"><span data-stu-id="9ae25-119">The execution of the function can then be delayed until a property that accesses the value is used in an expression.</span></span> <span data-ttu-id="9ae25-120">W przykładzie w następnej sekcji pokazano, jak to zrobić.</span><span class="sxs-lookup"><span data-stu-id="9ae25-120">The example in the next section demonstrates how to do this.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9ae25-121">W poniższym przykładzie pokazano, jak używać delegata, który nie przyjmuje żadnych parametrów.</span><span class="sxs-lookup"><span data-stu-id="9ae25-121">The following example demonstrates how to use a delegate that takes no parameters.</span></span> <span data-ttu-id="9ae25-122">Ten kod tworzy klasę generyczną o `LazyValue` nazwie, która ma pole typu <xref:System.Func%601>.</span><span class="sxs-lookup"><span data-stu-id="9ae25-122">This code creates a generic class named `LazyValue` that has a field of type <xref:System.Func%601>.</span></span> <span data-ttu-id="9ae25-123">To pole delegata może przechowywać odwołanie do dowolnej funkcji, która zwraca wartość typu, który odpowiada parametrowi `LazyValue` typu obiektu.</span><span class="sxs-lookup"><span data-stu-id="9ae25-123">This delegate field can store a reference to any function that returns a value of the type that corresponds to the type parameter of the `LazyValue` object.</span></span> <span data-ttu-id="9ae25-124">`LazyValue` Typ marównieżwłaściwość,którawykonujefunkcję(jeśliniezostałajeszczewykonana)i`Value` zwraca wartość wynikową.</span><span class="sxs-lookup"><span data-stu-id="9ae25-124">The `LazyValue` type also has a `Value` property that executes the function (if it has not already been executed) and returns the resulting value.</span></span>  
  
 <span data-ttu-id="9ae25-125">W przykładzie są tworzone dwie metody i tworzone są `LazyValue` dwa obiekty z wyrażeniami lambda, które wywołują te metody.</span><span class="sxs-lookup"><span data-stu-id="9ae25-125">The example creates two methods and instantiates two `LazyValue` objects with lambda expressions that call these methods.</span></span> <span data-ttu-id="9ae25-126">Wyrażenia lambda nie pobierają parametrów, ponieważ tylko muszą wywołać metodę.</span><span class="sxs-lookup"><span data-stu-id="9ae25-126">The lambda expressions do not take parameters because they just need to call a method.</span></span> <span data-ttu-id="9ae25-127">Ponieważ dane wyjściowe są wyświetlane, dwie metody są wykonywane tylko wtedy, gdy jest pobierana wartość każdego `LazyValue` obiektu.</span><span class="sxs-lookup"><span data-stu-id="9ae25-127">As the output shows, the two methods are executed only when the value of each `LazyValue` object is retrieved.</span></span>  
  
 [!code-csharp[System.Func~1#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Example.cs#5)]
 [!code-vb[System.Func~1#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md"><span data-ttu-id="9ae25-128">Wyrażenia lambda (Przewodnik programowania w języku C#)</span><span class="sxs-lookup"><span data-stu-id="9ae25-128">Lambda Expressions (C# Programming Guide)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md"><span data-ttu-id="9ae25-129">Wyrażenia lambda</span><span class="sxs-lookup"><span data-stu-id="9ae25-129">Lambda Expressions</span></span></related>
    <related type="Article" href="~/docs/csharp/programming-guide/delegates/index.md"><span data-ttu-id="9ae25-130">Delegaty (Przewodnik programowania w języku C#)</span><span class="sxs-lookup"><span data-stu-id="9ae25-130">Delegates (C# Programming Guide)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/delegates/index.md"><span data-ttu-id="9ae25-131">Delegaty w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="9ae25-131">Delegates in Visual Basic</span></span></related>
  </Docs>
</Type>
