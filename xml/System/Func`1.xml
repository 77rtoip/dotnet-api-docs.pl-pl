<Type Name="Func&lt;TResult&gt;" FullName="System.Func&lt;TResult&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="69512d04d7ee64f191d1ea741c2ca953bc1c0e8a" /><Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="09/22/2018" /><Meta Name="ms.locfileid" Value="46630555" /></Metadata><TypeSignature Language="C#" Value="public delegate TResult Func&lt;out TResult&gt;();" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`1&lt;+ TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of Out TResult)() As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA;public delegate TResult Func();" />
  <TypeSignature Language="F#" Value="type Func&lt;'Result&gt; = delegate of unit -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters />
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="TResult"><span data-ttu-id="80195-101">Typ wartości zwracanej metody, która hermetyzuje tego delegata.</span><span class="sxs-lookup"><span data-stu-id="80195-101">The type of the return value of the method that this delegate encapsulates.</span></span></typeparam>
    <summary><span data-ttu-id="80195-102">Hermetyzuje metody, która nie ma parametrów i zwraca wartość typu określonego przez <typeparamref name="TResult" /> parametru.</span><span class="sxs-lookup"><span data-stu-id="80195-102">Encapsulates a method that has no parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</span></span></summary>
    <returns><span data-ttu-id="80195-103">Wartość zwracaną przez metodę, która hermetyzuje tego delegata.</span><span class="sxs-lookup"><span data-stu-id="80195-103">The return value of the method that this delegate encapsulates.</span></span></returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80195-104">Ten delegat służy do reprezentowania metody, która może być przekazywany jako parametr bez jawnego deklarowania niestandardową klasę delegatów.</span><span class="sxs-lookup"><span data-stu-id="80195-104">You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="80195-105">Metoda zhermetyzowany musi odpowiadać podpis metody, który jest definiowany przez ten delegat.</span><span class="sxs-lookup"><span data-stu-id="80195-105">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="80195-106">Oznacza to, że metoda zhermetyzowany może mieć żadnych parametrów i musi zwracać wartość.</span><span class="sxs-lookup"><span data-stu-id="80195-106">This means that the encapsulated method must have no parameters and must return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="80195-107">Metoda, która nie ma parametrów i zwraca odwołanie do `void` (lub w języku Visual Basic, który jest zadeklarowany jako `Sub` , a nie jako `Function`), użyj <xref:System.Action> delegowania, zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="80195-107">To reference a method that has no parameters and returns `void` (or in Visual Basic, that is declared as a `Sub` rather than as a `Function`), use the <xref:System.Action> delegate instead.</span></span>  
  
 <span data-ttu-id="80195-108">Kiedy używasz <xref:System.Func%601> delegata, nie trzeba jawnie zdefiniować delegata, która hermetyzuje metody bez parametrów.</span><span class="sxs-lookup"><span data-stu-id="80195-108">When you use the <xref:System.Func%601> delegate, you do not have to explicitly define a delegate that encapsulates a parameterless method.</span></span> <span data-ttu-id="80195-109">Na przykład, poniższy kod deklaruje jawnie delegat o nazwie `WriteMethod` i odwołanie do `OutputTarget.SendToFile` wystąpienia metodę, aby jego wystąpienie delegata.</span><span class="sxs-lookup"><span data-stu-id="80195-109">For example, the following code explicitly declares a delegate named `WriteMethod` and assigns a reference to the `OutputTarget.SendToFile` instance method to its delegate instance.</span></span>  
  
 [!code-csharp[System.Func~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Delegate.cs#1)]
 [!code-vb[System.Func~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Delegate.vb#1)]  
  
 <span data-ttu-id="80195-110">Poniższy przykład upraszcza ten kod przez utworzenie wystąpienia <xref:System.Func%601> delegata zamiast jawnie nowe delegowanie definiowanie i przypisywanie metodę o nazwie.</span><span class="sxs-lookup"><span data-stu-id="80195-110">The following example simplifies this code by instantiating the <xref:System.Func%601> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-csharp[System.Func~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Func1.cs#2)]
 [!code-vb[System.Func~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Func1.vb#2)]  
  
 <span data-ttu-id="80195-111">Możesz użyć <xref:System.Func%601> delegowanie przy użyciu metod anonimowych w języku C#, tak jak pokazano w poniższym przykładzie.</span><span class="sxs-lookup"><span data-stu-id="80195-111">You can use the <xref:System.Func%601> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="80195-112">(Wprowadzenie do metod anonimowych, zobacz [anonimowymi](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span><span class="sxs-lookup"><span data-stu-id="80195-112">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
  
 [!code-csharp[System.Func~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Anon.cs#3)]  
  
 <span data-ttu-id="80195-113">Można również przypisywać w wyrażeniu lambda <xref:System.Func%602> delegować, tak jak pokazano w poniższym przykładzie.</span><span class="sxs-lookup"><span data-stu-id="80195-113">You can also assign a lambda expression to a <xref:System.Func%602> delegate, as the following example illustrates.</span></span> <span data-ttu-id="80195-114">(Wprowadzenie do wyrażenia lambda, zobacz [wyrażeń Lambda](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) i [wyrażeń Lambda](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span><span class="sxs-lookup"><span data-stu-id="80195-114">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) and [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 [!code-csharp[System.Func~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Lambda.cs#4)]
 [!code-vb[System.Func~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Lambda.vb#4)]  
  
 <span data-ttu-id="80195-115">Podstawowy typ wyrażenia lambda jest jednym z ogólnego `Func` delegatów.</span><span class="sxs-lookup"><span data-stu-id="80195-115">The underlying type of a lambda expression is one of the generic `Func` delegates.</span></span> <span data-ttu-id="80195-116">Dzięki temu można przekazać wyrażenia lambda jako parametr bez jawnie przypisywania do delegata.</span><span class="sxs-lookup"><span data-stu-id="80195-116">This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.</span></span> <span data-ttu-id="80195-117">W szczególności ponieważ wiele metod typów w <xref:System.Linq> przestrzeń nazw ma `Func` parametrów można przekazywać te metody wyrażenia lambda bez jawnego wystąpienia `Func` delegować.</span><span class="sxs-lookup"><span data-stu-id="80195-117">In particular, because many methods of types in the <xref:System.Linq> namespace have `Func` parameters, you can pass these methods a lambda expression without explicitly instantiating a `Func` delegate.</span></span>  
  
 <span data-ttu-id="80195-118">Jeśli masz kosztowne obliczenie, które chcesz wykonać tylko wtedy, gdy wynik będzie to wymagane, można przypisać kosztowna funkcja <xref:System.Func%601> delegować.</span><span class="sxs-lookup"><span data-stu-id="80195-118">If you have an expensive computation that you want to execute only if the result is actually needed, you can assign the expensive function to a <xref:System.Func%601> delegate.</span></span> <span data-ttu-id="80195-119">Wykonywanie funkcji następnie może być opóźniony, dopóki nie właściwość, która uzyskuje dostęp do wartości zostanie użyta w wyrażeniu.</span><span class="sxs-lookup"><span data-stu-id="80195-119">The execution of the function can then be delayed until a property that accesses the value is used in an expression.</span></span> <span data-ttu-id="80195-120">W przykładzie w następnej sekcji pokazano, jak to zrobić.</span><span class="sxs-lookup"><span data-stu-id="80195-120">The example in the next section demonstrates how to do this.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80195-121">Poniższy przykład pokazuje, jak używać delegata, która nie przyjmuje żadnych parametrów.</span><span class="sxs-lookup"><span data-stu-id="80195-121">The following example demonstrates how to use a delegate that takes no parameters.</span></span> <span data-ttu-id="80195-122">Ten kod tworzy klasę ogólną o nazwie `LazyValue` zawierający pola typu <xref:System.Func%601>.</span><span class="sxs-lookup"><span data-stu-id="80195-122">This code creates a generic class named `LazyValue` that has a field of type <xref:System.Func%601>.</span></span> <span data-ttu-id="80195-123">W tym polu delegata można przechowywać odwołanie do dowolnej funkcji, która zwraca wartość typu, który odnosi się do parametru typu `LazyValue` obiektu.</span><span class="sxs-lookup"><span data-stu-id="80195-123">This delegate field can store a reference to any function that returns a value of the type that corresponds to the type parameter of the `LazyValue` object.</span></span> <span data-ttu-id="80195-124">`LazyValue` Typ obejmuje także `Value` właściwość, która wykonuje funkcję (jeśli go nie już wykonano) i zwraca wartość wynikową.</span><span class="sxs-lookup"><span data-stu-id="80195-124">The `LazyValue` type also has a `Value` property that executes the function (if it has not already been executed) and returns the resulting value.</span></span>  
  
 <span data-ttu-id="80195-125">Przykład tworzy dwie metody i są tworzone wystąpienia dwóch `LazyValue` obiektów za pomocą wyrażenia lambda, które wywołują te metody.</span><span class="sxs-lookup"><span data-stu-id="80195-125">The example creates two methods and instantiates two `LazyValue` objects with lambda expressions that call these methods.</span></span> <span data-ttu-id="80195-126">Wyrażenia lambda nie przyjmują parametrów, gdyż wymagają one tylko do wywołania metody.</span><span class="sxs-lookup"><span data-stu-id="80195-126">The lambda expressions do not take parameters because they just need to call a method.</span></span> <span data-ttu-id="80195-127">Dane wyjściowe pokazują, te dwie metody są wykonywane tylko wtedy, gdy wartość każdego `LazyValue` pobrać obiektu.</span><span class="sxs-lookup"><span data-stu-id="80195-127">As the output shows, the two methods are executed only when the value of each `LazyValue` object is retrieved.</span></span>  
  
 [!code-csharp[System.Func~1#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Example.cs#5)]
 [!code-vb[System.Func~1#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md"><span data-ttu-id="80195-128">Wyrażenia lambda (Przewodnik programowania w języku C#)</span><span class="sxs-lookup"><span data-stu-id="80195-128">Lambda Expressions (C# Programming Guide)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md"><span data-ttu-id="80195-129">Wyrażenia lambda</span><span class="sxs-lookup"><span data-stu-id="80195-129">Lambda Expressions</span></span></related>
    <related type="Article" href="~/docs/csharp/programming-guide/delegates/index.md"><span data-ttu-id="80195-130">Delegaty (Przewodnik programowania w języku C#)</span><span class="sxs-lookup"><span data-stu-id="80195-130">Delegates (C# Programming Guide)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/delegates/index.md"><span data-ttu-id="80195-131">Delegatów w języku Visual Basic</span><span class="sxs-lookup"><span data-stu-id="80195-131">Delegates in Visual Basic</span></span></related>
  </Docs>
</Type>