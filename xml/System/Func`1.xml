<Type Name="Func&lt;TResult&gt;" FullName="System.Func&lt;TResult&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="251683eafe688466dee528fd0b4b16e5f27bf4bb" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39917254" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate TResult Func&lt;out TResult&gt;();" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`1&lt;+ TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of Out TResult)() As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA;public delegate TResult Func();" />
  <TypeSignature Language="F#" Value="type Func&lt;'Result&gt; = delegate of unit -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters />
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="TResult">Typ wartości zwracanej metody, która hermetyzuje tego delegata.</typeparam>
    <summary>Hermetyzuje metody, która nie ma parametrów i zwraca wartość typu określonego przez <typeparamref name="TResult" /> parametru.</summary>
    <returns>Wartość zwracaną przez metodę, która hermetyzuje tego delegata.</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten delegat służy do reprezentowania metody, która może być przekazywany jako parametr bez jawnego deklarowania niestandardową klasę delegatów. Metoda zhermetyzowany musi odpowiadać podpis metody, który jest definiowany przez ten delegat. Oznacza to, że metoda zhermetyzowany może mieć żadnych parametrów i musi zwracać wartość.  
  
> [!NOTE]
>  Metoda, która nie ma parametrów i zwraca odwołanie do `void` (lub w języku Visual Basic, który jest zadeklarowany jako `Sub` , a nie jako `Function`), użyj <xref:System.Action> delegowania, zamiast tego.  
  
 Kiedy używasz <xref:System.Func%601> delegata, nie trzeba jawnie zdefiniować delegata, która hermetyzuje metody bez parametrów. Na przykład, poniższy kod deklaruje jawnie delegat o nazwie `WriteMethod` i odwołanie do `OutputTarget.SendToFile` wystąpienia metodę, aby jego wystąpienie delegata.  
  
 [!code-csharp[System.Func~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Delegate.cs#1)]
 [!code-vb[System.Func~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Delegate.vb#1)]  
  
 Poniższy przykład upraszcza ten kod przez utworzenie wystąpienia <xref:System.Func%601> delegata zamiast jawnie nowe delegowanie definiowanie i przypisywanie metodę o nazwie.  
  
 [!code-csharp[System.Func~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Func1.cs#2)]
 [!code-vb[System.Func~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Func1.vb#2)]  
  
 Możesz użyć <xref:System.Func%601> delegowanie przy użyciu metod anonimowych w języku C#, tak jak pokazano w poniższym przykładzie. (Wprowadzenie do metod anonimowych, zobacz [anonimowymi](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)  
  
 [!code-csharp[System.Func~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Anon.cs#3)]  
  
 Można również przypisywać w wyrażeniu lambda <xref:System.Func%602> delegować, tak jak pokazano w poniższym przykładzie. (Wprowadzenie do wyrażenia lambda, zobacz [wyrażeń Lambda](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) i [wyrażeń Lambda](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)  
  
 [!code-csharp[System.Func~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Lambda.cs#4)]
 [!code-vb[System.Func~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Lambda.vb#4)]  
  
 Podstawowy typ wyrażenia lambda jest jednym z ogólnego `Func` delegatów. Dzięki temu można przekazać wyrażenia lambda jako parametr bez jawnie przypisywania do delegata. W szczególności ponieważ wiele metod typów w <xref:System.Linq> przestrzeń nazw ma `Func` parametrów można przekazywać te metody wyrażenia lambda bez jawnego wystąpienia `Func` delegować.  
  
 Jeśli masz kosztowne obliczenie, które chcesz wykonać tylko wtedy, gdy wynik będzie to wymagane, można przypisać kosztowna funkcja <xref:System.Func%601> delegować. Wykonywanie funkcji następnie może być opóźniony, dopóki nie właściwość, która uzyskuje dostęp do wartości zostanie użyta w wyrażeniu. W przykładzie w następnej sekcji pokazano, jak to zrobić.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać delegata, która nie przyjmuje żadnych parametrów. Ten kod tworzy klasę ogólną o nazwie `LazyValue` zawierający pola typu <xref:System.Func%601>. W tym polu delegata można przechowywać odwołanie do dowolnej funkcji, która zwraca wartość typu, który odnosi się do parametru typu `LazyValue` obiektu. `LazyValue` Typ obejmuje także `Value` właściwość, która wykonuje funkcję (jeśli go nie już wykonano) i zwraca wartość wynikową.  
  
 Przykład tworzy dwie metody i są tworzone wystąpienia dwóch `LazyValue` obiektów za pomocą wyrażenia lambda, które wywołują te metody. Wyrażenia lambda nie przyjmują parametrów, gdyż wymagają one tylko do wywołania metody. Dane wyjściowe pokazują, te dwie metody są wykonywane tylko wtedy, gdy wartość każdego `LazyValue` pobrać obiektu.  
  
 [!code-csharp[System.Func~1#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Example.cs#5)]
 [!code-vb[System.Func~1#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>