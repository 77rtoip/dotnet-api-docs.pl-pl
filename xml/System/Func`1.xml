<Type Name="Func&lt;TResult&gt;" FullName="System.Func&lt;TResult&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="12c19fab871127dad68688aaa249b48d82668c35" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69406313" /></Metadata><TypeSignature Language="C#" Value="public delegate TResult Func&lt;out TResult&gt;();" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`1&lt;+ TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of Out TResult)() As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA;public delegate TResult Func();" />
  <TypeSignature Language="F#" Value="type Func&lt;'Result&gt; = delegate of unit -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters />
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="TResult">Typ wartości zwracanej przez ten delegata.</typeparam>
    <summary>Hermetyzuje metodę, która nie ma parametrów i zwraca wartość typu określonego przez <typeparamref name="TResult" /> parametr.</summary>
    <returns>Wartość zwracana metody, która jest hermetyzowana przez ten delegat.</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tego delegata można użyć do reprezentowania metody, którą można przekazać jako parametru bez jawnego deklarowania niestandardowego delegata. Metoda hermetyzowana musi odpowiadać sygnaturze metody zdefiniowanej przez tego delegata. Oznacza to, że metoda hermetyzowana nie może mieć parametrów i musi zwracać wartość.  
  
> [!NOTE]
>  Aby odwołać się do metody, która nie ma `void` parametrów i zwraca (lub w Visual Basic, która jest `Sub` zadeklarowana jako, `Function`a nie jako) <xref:System.Action> , należy zamiast tego użyć delegata.  
  
 W przypadku korzystania z <xref:System.Func%601> delegata nie trzeba jawnie definiować delegata, który hermetyzuje metodę bez parametrów. Na przykład poniższy kod jawnie deklaruje delegata o nazwie `WriteMethod` i przypisuje odwołanie `OutputTarget.SendToFile` do metody wystąpienia do jego wystąpienia delegata.  
  
 [!code-csharp[System.Func~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Delegate.cs#1)]
 [!code-vb[System.Func~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Delegate.vb#1)]  
  
 Poniższy przykład upraszcza ten kod przez utworzenie wystąpienia <xref:System.Func%601> delegata zamiast jawnego definiowania nowego delegata i przypisanie do niego nazwanej metody.  
  
 [!code-csharp[System.Func~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Func1.cs#2)]
 [!code-vb[System.Func~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Func1.vb#2)]  
  
 Można użyć <xref:System.Func%601> delegata z metodami anonimowymi C#w, jak pokazano w poniższym przykładzie. (Aby uzyskać wprowadzenie do metod anonimowych, zobacz [metody anonimowe](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)).  
  
 [!code-csharp[System.Func~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Anon.cs#3)]  
  
 Można również przypisać wyrażenie lambda do <xref:System.Func%602> delegata, jak pokazano w poniższym przykładzie. (Aby uzyskać wprowadzenie do wyrażeń lambda, zobacz [wyrażenia lambda](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) i [wyrażenia lambda](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)  
  
 [!code-csharp[System.Func~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Lambda.cs#4)]
 [!code-vb[System.Func~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Lambda.vb#4)]  
  
 Typ podstawowy wyrażenia lambda jest jednym z delegatów ogólnych `Func` . Dzięki temu można przekazać wyrażenie lambda jako parametr bez jawnego przypisywania go do delegata. W szczególności, ponieważ wiele metod typów w <xref:System.Linq> przestrzeni nazw ma `Func` parametry, można przekazać te metody wyrażenie lambda `Func` bez bezpośredniego tworzenia wystąpienia delegata.  
  
 Jeśli masz kosztowne obliczenie, które chcesz wykonać tylko wtedy, gdy wynik jest rzeczywiście potrzebny, można przypisać kosztowną funkcję do <xref:System.Func%601> delegata. Wykonanie funkcji może następnie zostać opóźnione do momentu użycia właściwości, która uzyskuje dostęp do wartości w wyrażeniu. W przykładzie w następnej sekcji pokazano, jak to zrobić.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, jak używać delegata, który nie przyjmuje żadnych parametrów. Ten kod tworzy klasę generyczną o `LazyValue` nazwie, która ma pole typu <xref:System.Func%601>. To pole delegata może przechowywać odwołanie do dowolnej funkcji, która zwraca wartość typu, który odpowiada parametrowi `LazyValue` typu obiektu. `LazyValue` Typ marównieżwłaściwość,którawykonujefunkcję(jeśliniezostałajeszczewykonana)i`Value` zwraca wartość wynikową.  
  
 W przykładzie są tworzone dwie metody i tworzone są `LazyValue` dwa obiekty z wyrażeniami lambda, które wywołują te metody. Wyrażenia lambda nie pobierają parametrów, ponieważ tylko muszą wywołać metodę. Ponieważ dane wyjściowe są wyświetlane, dwie metody są wykonywane tylko wtedy, gdy jest pobierana wartość każdego `LazyValue` obiektu.  
  
 [!code-csharp[System.Func~1#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Example.cs#5)]
 [!code-vb[System.Func~1#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md">Wyrażenia lambda (Przewodnik programowania w języku C#)</related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md">Wyrażenia lambda</related>
    <related type="Article" href="~/docs/csharp/programming-guide/delegates/index.md">Delegaty (Przewodnik programowania w języku C#)</related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/delegates/index.md">Delegaty w Visual Basic</related>
  </Docs>
</Type>
