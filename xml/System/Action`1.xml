<Type Name="Action&lt;T&gt;" FullName="System.Action&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="dd092c3c61377edf68a48487d8fa19cd17b06d55" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36433890" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void Action&lt;in T&gt;(T obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`1&lt;- T&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of In T)(obj As T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate void Action(T obj);" />
  <TypeSignature Language="F#" Value="type Action&lt;'T&gt; = delegate of 'T -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="obj" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">Typ parametru metody, która hermetyzuje tego delegata.</typeparam>
    <param name="obj">Parametr metody, która hermetyzuje tego delegata.</param>
    <summary>Hermetyzuje metodę, która ma jeden parametr i zwracać wartości.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można użyć <xref:System.Action%601> pełnomocnika, aby przekazać metody jako parametr bez jawnie deklarowanie niestandardowego obiektu delegowanego. Metoda hermetyzowany musi odpowiadać podpis metody jest definiowana za pomocą tego delegata. Oznacza to, że metoda hermetyzowany musi mieć jeden parametr, który jest przekazywany do niej przez wartość i nie może zwracać wartości. (W języku C#, metoda musi zwracać `void`. W języku Visual Basic, musi być zdefiniowany przez `Sub`...`End Sub` konstrukcja. Może również być metodę, która zwraca wartość, która jest ignorowana.) Zazwyczaj taka metoda jest używany do wykonania operacji.  
  
> [!NOTE]
>  Aby odwołać się do metody, która ma jeden parametr i zwraca wartość używać ogólnych <xref:System.Func%602> zamiast tego delegata.  
  
 Jeśli używasz <xref:System.Action%601> delegata, nie trzeba jawnie definiować delegata, który hermetyzuje metody z pojedynczym parametrem. Na przykład następujący kod jawnie deklaruje delegata o nazwie `DisplayMessage` i odwołanie do każdego <xref:System.Console.WriteLine%2A> metody lub `ShowWindowsMessage` metodę, aby jego wystąpienie obiektu delegowanego.  
  
 [!code-cpp[System.Action~1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/delegate.cpp#1)]
 [!code-csharp[System.Action~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Delegate.cs#1)]
 [!code-vb[System.Action~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Delegate.vb#1)]  
  
 Poniższy przykład ułatwiają ten kod przy uruchamianiu <xref:System.Action%601> delegata zamiast jawnie nowe delegowanie definiowanie i przypisywanie metodę o nazwie.  
  
 [!code-cpp[System.Action~1#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/action`1.cpp#2)]
 [!code-csharp[System.Action~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Action1.cs#2)]
 [!code-vb[System.Action~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Action1.vb#2)]  
  
 Można również użyć <xref:System.Action%601> delegata z metody anonimowe w języku C#, jak pokazano w poniższym przykładzie. (Wprowadzenie do metod anonimowych, zobacz [metod anonimowych](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)  
  
 [!code-csharp[System.Action~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Anon.cs#3)]  
  
 Można także przypisać wyrażenia lambda do <xref:System.Action%601> delegować wystąpienia, jak pokazano w poniższym przykładzie. (Wprowadzenie do wyrażenia lambda, zobacz [wyrażenia Lambda](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)  
  
 [!code-csharp[System.Action~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Lambda.cs#4)]
 [!code-vb[System.Action~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/lambda.vb#4)]  
  
 <xref:System.Collections.Generic.List%601.ForEach%2A> i <xref:System.Array.ForEach%2A> każdej metody przyjmują <xref:System.Action%601> delegata jako parametr. Metody hermetyzowany na podstawie delegata służy do wykonywania akcji na każdy element tablicy lub z listy. W przykładzie użyto <xref:System.Collections.Generic.List%601.ForEach%2A> metodę w celu zapewnienia ilustracji.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano użycie <xref:System.Action%601> delegata do drukowania zawartości <xref:System.Collections.Generic.List%601> obiektu. W tym przykładzie `Print` metoda jest używana do wyświetlania zawartości listy do konsoli. Ponadto w C# przykładzie pokazano także korzystanie z metod anonimowych do wyświetlenia zawartości do konsoli. Należy pamiętać, że przykładzie nie jawnie deklarować <xref:System.Action%601> zmiennej. Zamiast tego przechodzą odniesienie do metody, która przyjmuje jeden parametr i nie zwraca wartości do <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType> metody, w których pojedynczy parametr jest <xref:System.Action%601> delegowanie. Podobnie, w przykładzie C# <xref:System.Action%601> delegata nie jest jawnie wystąpienia, ponieważ podpis metody anonimowej jest zgodna podpis <xref:System.Action%601> delegata, który jest oczekiwany przez <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType> metody.  
  
 [!code-csharp[System.Action_PrintExample#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action_PrintExample/cs/action.cs#01)]
 [!code-vb[System.Action_PrintExample#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action_PrintExample/vb/action.vb#01)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`2" />
  </Docs>
</Type>