<Type Name="Action&lt;T&gt;" FullName="System.Action&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8a2282810184f9346dadc33bd241406f3515f9fe" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69422067" /></Metadata><TypeSignature Language="C#" Value="public delegate void Action&lt;in T&gt;(T obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`1&lt;- T&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of In T)(obj As T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate void Action(T obj);" />
  <TypeSignature Language="F#" Value="type Action&lt;'T&gt; = delegate of 'T -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="obj" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">Typ parametru metody, który jest hermetyzowany przez ten delegat.</typeparam>
    <param name="obj">Parametr metody, która jest hermetyzowana przez ten delegat.</param>
    <summary>Hermetyzuje metodę, która ma jeden parametr i nie zwraca wartości.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można użyć <xref:System.Action%601> delegata, aby przekazać metodę jako parametr bez jawnego deklarowania niestandardowego delegata. Metoda hermetyzowana musi odpowiadać sygnaturze metody zdefiniowanej przez tego delegata. Oznacza to, że metoda hermetyzowana musi mieć jeden parametr, który jest przesyłany do niego przez wartość i nie może zwracać wartości. (W C#, metoda musi zwracać `void`. W Visual Basic musi być zdefiniowana przez `Sub`...`End Sub` Konstruuj. Może być również metodą zwracającą wartość, która jest ignorowana.) Zazwyczaj taka metoda jest używana do wykonywania operacji.  
  
> [!NOTE]
>  Aby odwołać się do metody, która ma jeden parametr i zwraca wartość, należy <xref:System.Func%602> zamiast tego użyć delegata generycznego.  
  
 Gdy używasz <xref:System.Action%601> delegata, nie musisz jawnie definiować delegata, który hermetyzuje metodę z pojedynczym parametrem. Na przykład poniższy kod jawnie deklaruje delegata o nazwie `DisplayMessage` i przypisuje odwołanie do <xref:System.Console.WriteLine%2A> metody lub `ShowWindowsMessage` metody do jego wystąpienia delegata.  
  
 [!code-cpp[System.Action~1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/delegate.cpp#1)]
 [!code-csharp[System.Action~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Delegate.cs#1)]
 [!code-vb[System.Action~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Delegate.vb#1)]  
  
 Poniższy przykład upraszcza ten kod przez utworzenie wystąpienia <xref:System.Action%601> delegata zamiast jawnego definiowania nowego delegata i przypisanie do niego nazwanej metody.  
  
 [!code-cpp[System.Action~1#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/action`1.cpp#2)]
 [!code-csharp[System.Action~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Action1.cs#2)]
 [!code-vb[System.Action~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Action1.vb#2)]  
  
 Można również użyć <xref:System.Action%601> delegata z metodami anonimowymi C#w, jak pokazano w poniższym przykładzie. (Aby uzyskać wprowadzenie do metod anonimowych, zobacz [metody anonimowe](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)).  
  
 [!code-csharp[System.Action~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Anon.cs#3)]  
  
 Można również przypisać wyrażenie lambda do <xref:System.Action%601> wystąpienia delegata, jak pokazano w poniższym przykładzie. (Aby uzyskać wprowadzenie do wyrażeń lambda, zobacz [lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)).  
  
 [!code-csharp[System.Action~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Lambda.cs#4)]
 [!code-vb[System.Action~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/lambda.vb#4)]  
  
 Metody <xref:System.Collections.Generic.List%601.ForEach%2A> i <xref:System.Array.ForEach%2A> każdego z nich przyjmują <xref:System.Action%601> delegata jako parametr. Metoda hermetyzowana przez delegata umożliwia wykonywanie akcji dla każdego elementu w tablicy lub liście. W przykładzie zastosowano <xref:System.Collections.Generic.List%601.ForEach%2A> metodę, aby dostarczyć ilustrację.  
  
   
  
## Examples  
 Poniższy przykład ilustruje użycie <xref:System.Action%601> delegata do drukowania zawartości <xref:System.Collections.Generic.List%601> obiektu. W tym przykładzie `Print` Metoda jest używana do wyświetlania zawartości listy w konsoli programu. Ponadto C# przykład ilustruje użycie anonimowych metod do wyświetlania zawartości w konsoli programu. Należy zauważyć, że przykład nie deklaruje <xref:System.Action%601> jawnie zmiennej. Zamiast tego przekazuje odwołanie do metody, która przyjmuje jeden parametr, która nie zwraca wartości do <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType> metody, której pojedynczy parametr <xref:System.Action%601> jest delegatem. Podobnie, C# w przykładzie <xref:System.Action%601> delegat nie jest jawnie skonkretyzowany, ponieważ podpis metody anonimowej pasuje <xref:System.Action%601> do podpisu delegata, który jest oczekiwany przez <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType> metodę.  
  
 [!code-csharp[System.Action_PrintExample#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action_PrintExample/cs/action.cs#01)]
 [!code-vb[System.Action_PrintExample#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action_PrintExample/vb/action.vb#01)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`2" />
  </Docs>
</Type>
