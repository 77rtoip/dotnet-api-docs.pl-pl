<Type Name="Action&lt;T&gt;" FullName="System.Action&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b667dcf79e5ae762a2e599fd337d51ceea34b2c7" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37482408" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void Action&lt;in T&gt;(T obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`1&lt;- T&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of In T)(obj As T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate void Action(T obj);" />
  <TypeSignature Language="F#" Value="type Action&lt;'T&gt; = delegate of 'T -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="obj" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">Typ parametru metody, która hermetyzuje tego delegata.</typeparam>
    <param name="obj">Parametr metody, która hermetyzuje tego delegata.</param>
    <summary>Hermetyzuje metody, która ma jeden parametr, a nie zwraca wartości.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć <xref:System.Action%601> delegata do przekazywania metod jako parametru bez jawnego deklarowania niestandardową klasę delegatów. Metoda zhermetyzowany musi odpowiadać podpis metody, który jest definiowany przez ten delegat. Oznacza to, że zhermetyzowany metoda musi mieć jeden parametr, który jest przekazywany do niego przez wartość i nie może zwracać wartości. (W języku C#, metoda musi zwracać `void`. W języku Visual Basic, musi być zdefiniowany przez `Sub`...`End Sub` konstrukcja. Może również być metodę, która zwraca wartość, która jest ignorowana.) Zazwyczaj taka metoda jest używana do wykonywania operacji.  
  
> [!NOTE]
>  Aby odwoływać się do metody, która ma jeden parametr i zwraca wartość, należy użyć ogólnego <xref:System.Func%602> delegowania, zamiast tego.  
  
 Kiedy używasz <xref:System.Action%601> delegata, nie trzeba jawnie zdefiniować delegata, która hermetyzuje metody z pojedynczym parametrem. Na przykład, poniższy kod deklaruje jawnie delegat o nazwie `DisplayMessage` i odwołanie do albo <xref:System.Console.WriteLine%2A> metody lub `ShowWindowsMessage` metodę, aby jego wystąpienie delegata.  
  
 [!code-cpp[System.Action~1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/delegate.cpp#1)]
 [!code-csharp[System.Action~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Delegate.cs#1)]
 [!code-vb[System.Action~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Delegate.vb#1)]  
  
 Poniższy przykład upraszcza ten kod przez utworzenie wystąpienia <xref:System.Action%601> delegata zamiast jawnie nowe delegowanie definiowanie i przypisywanie metodę o nazwie.  
  
 [!code-cpp[System.Action~1#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/action`1.cpp#2)]
 [!code-csharp[System.Action~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Action1.cs#2)]
 [!code-vb[System.Action~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Action1.vb#2)]  
  
 Można również użyć <xref:System.Action%601> delegowanie przy użyciu metod anonimowych w języku C#, tak jak pokazano w poniższym przykładzie. (Wprowadzenie do metod anonimowych, zobacz [anonimowymi](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)  
  
 [!code-csharp[System.Action~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Anon.cs#3)]  
  
 Można również przypisywać w wyrażeniu lambda <xref:System.Action%601> delegować wystąpienia, tak jak pokazano w poniższym przykładzie. (Wprowadzenie do wyrażenia lambda, zobacz [wyrażeń Lambda](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)  
  
 [!code-csharp[System.Action~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Lambda.cs#4)]
 [!code-vb[System.Action~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/lambda.vb#4)]  
  
 <xref:System.Collections.Generic.List%601.ForEach%2A> i <xref:System.Array.ForEach%2A> każdej metody przyjmują <xref:System.Action%601> delegować jako parametr. Metoda zamknięte przez delegata umożliwia wykonywanie akcji dla każdego elementu w tablicy lub listy. W przykładzie użyto <xref:System.Collections.Generic.List%601.ForEach%2A> metody w celu zapewnienia ilustrację.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano użycie <xref:System.Action%601> delegata do drukowania zawartości <xref:System.Collections.Generic.List%601> obiektu. W tym przykładzie `Print` metoda jest używana do wyświetlania zawartości listy do konsoli. Ponadto przykład C# ilustruje też użycie metod anonimowych, aby wyświetlić zawartość do konsoli. Należy zauważyć, że przykład jawnie deklaruj <xref:System.Action%601> zmiennej. Zamiast tego, przekazuje on odwołanie do metody, która przyjmuje jeden parametr i zwraca wartość, aby <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType> metody, w której jeden parametr jest <xref:System.Action%601> delegować. Podobnie, w języku C# przykład <xref:System.Action%601> delegata nie jest jawnie utworzona ponieważ podpis metody anonimowej pasuje do podpisu <xref:System.Action%601> delegata, który jest oczekiwany przez <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType> metody.  
  
 [!code-csharp[System.Action_PrintExample#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action_PrintExample/cs/action.cs#01)]
 [!code-vb[System.Action_PrintExample#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action_PrintExample/vb/action.vb#01)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`2" />
  </Docs>
</Type>