<Type Name="Action&lt;T1,T2,T3&gt;" FullName="System.Action&lt;T1,T2,T3&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="36d4fcf318fb44ecc0422ce215027fb8c19a005c" /><Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="09/22/2018" /><Meta Name="ms.locfileid" Value="46694645" /></Metadata><TypeSignature Language="C#" Value="public delegate void Action&lt;in T1,in T2,in T3&gt;(T1 arg1, T2 arg2, T3 arg3);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`3&lt;- T1, - T2, - T3&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action`3" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of In T1, In T2, In T3)(arg1 As T1, arg2 As T2, arg3 As T3)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3&gt;&#xA;public delegate void Action(T1 arg1, T2 arg2, T3 arg3);" />
  <TypeSignature Language="F#" Value="type Action&lt;'T1, 'T2, 'T3&gt; = delegate of 'T1 * 'T2 * 'T3 -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T3">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg1" Type="T1" />
    <Parameter Name="arg2" Type="T2" />
    <Parameter Name="arg3" Type="T3" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1">Typ pierwszego parametru metody, która hermetyzuje tego delegata.</typeparam>
    <typeparam name="T2">Typ drugiego parametru metody, która hermetyzuje tego delegata.</typeparam>
    <typeparam name="T3">Typ trzeciego parametru metody, która hermetyzuje tego delegata.</typeparam>
    <param name="arg1">Pierwszy parametr metody, która hermetyzuje tego delegata.</param>
    <param name="arg2">Drugi parametr metody, która hermetyzuje tego delegata.</param>
    <param name="arg3">Trzeci parametr metodę, która hermetyzuje tego delegata.</param>
    <summary>Hermetyzuje metody, która ma trzy parametry i zwracać wartości.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć <xref:System.Action%603> delegata do przekazywania metod jako parametru bez jawnego deklarowania niestandardową klasę delegatów. Metoda zhermetyzowany musi odpowiadać podpis metody, który jest definiowany przez ten delegat. Oznacza to, że zhermetyzowany metoda musi mieć trzy parametry, które są wszystkie przekazywane do niej przez wartość i nie może zwracać wartości. (W języku C#, metoda musi zwracać `void`. W języku Visual Basic, musi być zdefiniowany przez `Sub`...`End Sub` konstrukcja. Może również być metodę, która zwraca wartość, która jest ignorowana.) Zazwyczaj taka metoda jest używana do wykonywania operacji.  
  
> [!NOTE]
>  Aby odwoływać się do metody, która ma trzy parametry i zwraca wartość, należy użyć ogólnego <xref:System.Func%604> delegowania, zamiast tego.  
  
 Kiedy używasz <xref:System.Action%603> delegata, nie trzeba jawnie zdefiniować delegata, która hermetyzuje metody z trzech parametrów. Na przykład, poniższy kod deklaruje jawnie delegat o nazwie `StringCopy` i odwołanie do `CopyStrings` metodę, aby jego wystąpienie delegata.  
  
 [!code-csharp[System.Action~3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~3/cs/Delegate.cs#1)]
 [!code-vb[System.Action~3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~3/vb/Delegate.vb#1)]  
  
 Poniższy przykład upraszcza ten kod przez utworzenie wystąpienia <xref:System.Action%603> delegata zamiast jawnie nowe delegowanie definiowanie i przypisywanie metodę o nazwie.  
  
 [!code-csharp[System.Action~3#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~3/cs/Action3.cs#2)]
 [!code-vb[System.Action~3#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~3/vb/Action3.vb#2)]  
  
 Można również użyć <xref:System.Action%603> delegowanie przy użyciu metod anonimowych w języku C#, tak jak pokazano w poniższym przykładzie. (Wprowadzenie do metod anonimowych, zobacz [anonimowymi](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)  
  
 [!code-csharp[System.Action~3#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~3/cs/Anon.cs#3)]  
  
 Można również przypisywać w wyrażeniu lambda <xref:System.Action%603> delegować wystąpienia, tak jak pokazano w poniższym przykładzie. (Wprowadzenie do wyrażenia lambda, zobacz [wyrażeń Lambda](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)  
  
 [!code-csharp[System.Action~3#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~3/cs/Lambda.cs#4)]
 [!code-vb[System.Action~3#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~3/vb/lambda.vb#4)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`4" />
  </Docs>
</Type>