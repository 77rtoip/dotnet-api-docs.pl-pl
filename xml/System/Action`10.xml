<Type Name="Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10&gt;" FullName="System.Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="51e217d3b5160bb81f8c6cd12e55817e6fc1b7dd" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69439391" /></Metadata><TypeSignature Language="C#" Value="public delegate void Action&lt;in T1,in T2,in T3,in T4,in T5,in T6,in T7,in T8,in T9,in T10&gt;(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`10&lt;- T1, - T2, - T3, - T4, - T5, - T6, - T7, - T8, - T9, - T10&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action`10" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of In T1, In T2, In T3, In T4, In T5, In T6, In T7, In T8, In T9, In T10)(arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4, arg5 As T5, arg6 As T6, arg7 As T7, arg8 As T8, arg9 As T9, arg10 As T10)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10&gt;&#xA;public delegate void Action(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10);" />
  <TypeSignature Language="F#" Value="type Action&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10&gt; = delegate of 'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6 * 'T7 * 'T8 * 'T9 * 'T10 -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T3">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T4">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T5">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T6">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T7">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T8">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T9">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T10">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="arg1" Type="T1" />
    <Parameter Name="arg2" Type="T2" />
    <Parameter Name="arg3" Type="T3" />
    <Parameter Name="arg4" Type="T4" />
    <Parameter Name="arg5" Type="T5" />
    <Parameter Name="arg6" Type="T6" />
    <Parameter Name="arg7" Type="T7" />
    <Parameter Name="arg8" Type="T8" />
    <Parameter Name="arg9" Type="T9" />
    <Parameter Name="arg10" Type="T10" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1">Typ pierwszego parametru metody, który jest hermetyzowany przez ten delegat.</typeparam>
    <typeparam name="T2">Typ drugiego parametru metody, który jest hermetyzowany przez ten delegat.</typeparam>
    <typeparam name="T3">Typ trzeciego parametru metody, który jest hermetyzowany przez ten delegat.</typeparam>
    <typeparam name="T4">Typ czwartego parametru metody, który jest hermetyzowany przez ten delegat.</typeparam>
    <typeparam name="T5">Typ piątego parametru metody, który jest hermetyzowany przez ten delegat.</typeparam>
    <typeparam name="T6">Typ szóstego parametru metody, który jest hermetyzowany przez ten delegat.</typeparam>
    <typeparam name="T7">Typ siódmego parametru metody, która jest hermetyzowana przez ten delegat.</typeparam>
    <typeparam name="T8">Typ ósmego parametru metody, który jest hermetyzowany przez ten delegat.</typeparam>
    <typeparam name="T9">Typ dziewiątego parametru metody, która jest hermetyzowana przez ten delegat.</typeparam>
    <typeparam name="T10">Typ dziesiątego parametru metody, która jest hermetyzowana przez ten delegat.</typeparam>
    <param name="arg1">Pierwszy parametr metody, która jest hermetyzowana przez ten delegat.</param>
    <param name="arg2">Drugi parametr metody, która jest hermetyzowana przez ten delegat.</param>
    <param name="arg3">Trzeci parametr metody, która jest hermetyzowana przez ten delegat.</param>
    <param name="arg4">Czwarty parametr metody, która jest hermetyzowana przez ten delegat.</param>
    <param name="arg5">Piąty parametr metody, która jest hermetyzowana przez ten delegat.</param>
    <param name="arg6">Szósty parametr metody, która jest hermetyzowana przez ten delegat.</param>
    <param name="arg7">Siódmy parametr metody, która jest hermetyzowana przez ten delegat.</param>
    <param name="arg8">Ósmy parametr metody, która jest hermetyzowana przez ten delegat.</param>
    <param name="arg9">Dziewiąty parametr metody, która jest hermetyzowana przez ten delegat.</param>
    <param name="arg10">Dziesiąty parametr metody, która jest hermetyzowana przez ten delegat.</param>
    <summary>Hermetyzuje metodę, która ma 10 parametrów i nie zwraca wartości.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można użyć <xref:System.Action%6010> delegata, aby przekazać metodę jako parametr bez jawnego deklarowania niestandardowego delegata. Metoda hermetyzowana musi odpowiadać sygnaturze metody zdefiniowanej przez tego delegata. Oznacza to, że metoda hermetyzowana musi mieć 10 parametrów, które są wszystkie do nich przesyłane przez wartość i nie może zwracać wartości. (W C#, metoda musi zwracać `void`. W Visual Basic musi być zdefiniowana przez `Sub`...`End Sub` Konstruuj. Może być również metodą zwracającą wartość, która jest ignorowana.) Zazwyczaj taka metoda jest używana do wykonywania operacji.  
  
> [!NOTE]
>  Aby odwołać się do metody, która ma 10 parametrów i zwraca wartość, należy <xref:System.Func%6011> zamiast tego użyć delegata generycznego.  
  
 Można również użyć <xref:System.Action%6010> delegata z metodami anonimowymi i wyrażeniami lambda.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`11" />
  </Docs>
</Type>
