<Type Name="IndexOutOfRangeException" FullName="System.IndexOutOfRangeException">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e315de6e35568d212d8e084a6e58d809d1519f74" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69420218" /></Metadata><TypeSignature Language="C#" Value="public sealed class IndexOutOfRangeException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit IndexOutOfRangeException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.IndexOutOfRangeException" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class IndexOutOfRangeException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class IndexOutOfRangeException sealed : SystemException" />
  <TypeSignature Language="F#" Value="type IndexOutOfRangeException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Wyjątek, który jest generowany, gdy zostanie podjęta próba uzyskania dostępu do elementu tablicy lub kolekcji z indeksem, który znajduje się poza granicami.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IndexOutOfRangeException> Wyjątek jest zgłaszany, gdy nieprawidłowy indeks jest używany do uzyskiwania dostępu do elementu członkowskiego tablicy lub kolekcji lub do odczytu lub zapisu z określonej lokalizacji w buforze. Ten wyjątek dziedziczy z klasy <xref:System.Exception> , ale nie dodaje żadnych unikatowych elementów członkowskich.  
  
 <xref:System.IndexOutOfRangeException> Zazwyczaj wyjątek jest zgłaszany w wyniku błędu dewelopera. Zamiast obsłużyć wyjątek, należy zdiagnozować przyczynę błędu i poprawić kod. Najczęstszymi przyczynami tego błędu są:  
  
-   Zapomnieniu, że górna granica kolekcji lub tablica oparta na zero jest mniejsza niż liczba elementów członkowskich lub elementów, jak pokazano w poniższym przykładzie.  
  
     [!code-csharp[System.IndexOutOfRangeException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/length1.cs#3)]
     [!code-vb[System.IndexOutOfRangeException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/length1.vb#3)]  
  
     Aby poprawić błąd, można użyć kodu takiego jak poniższy.  
  
     [!code-csharp[System.IndexOutOfRangeException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/length2.cs#4)]
     [!code-vb[System.IndexOutOfRangeException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/length2.vb#4)]  
  
     Alternatywnie zamiast iterować wszystkie elementy w tablicy według ich indeksu, można użyć `foreach` instrukcji (in C#) lub `For Each` instrukcji (w Visual Basic).  
  
-   Podjęto próbę przypisania elementu tablicy do innej tablicy, która nie została odpowiednio zwymiarowana i która ma mniej elementów niż oryginalna tablica. Poniższy przykład próbuje przypisać ostatni element w `value1` tablicy do tego samego elementu `value2` w tablicy. Jednak tablica została `value2` niepoprawnie zwymiarowana w taki sposób, aby zawierała sześć zamiast siedmiu elementów. W związku z tym przypisanie zgłasza <xref:System.IndexOutOfRangeException> wyjątek.  
  
     [!code-csharp[System.IndexOutOfRangeException#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/Uninit1.cs#10)]
     [!code-vb[System.IndexOutOfRangeException#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/Uninit1.vb#10)]  
  
-   Użycie wartości zwracanej przez metodę wyszukiwania do iteracji części tablicy lub kolekcji, zaczynając od określonej pozycji indeksu. Jeśli zapomnisz sprawdzić, czy operacja wyszukiwania znalazła dopasowanie, środowisko uruchomieniowe zgłasza <xref:System.IndexOutOfRangeException> wyjątek, jak pokazano w tym przykładzie.  
  
     [!code-csharp[System.IndexOutOfRangeException#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/negative1.cs#5)]
     [!code-vb[System.IndexOutOfRangeException#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/negative1.vb#5)]  
  
     W tym przypadku <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType> Metoda zwraca wartość-1, która jest nieprawidłową wartością indeksu, gdy nie można znaleźć dopasowania. Aby naprawić ten błąd, sprawdź wartość zwracaną metody wyszukiwania przed iteracją tablicy, jak pokazano w tym przykładzie.  
  
     [!code-csharp[System.IndexOutOfRangeException#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/negative2.cs#6)]
     [!code-vb[System.IndexOutOfRangeException#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/negative2.vb#6)]  
  
-   Próba użycia lub wyliczenia zestawu wyników, kolekcji lub tablicy zwracanej przez zapytanie bez testowania, czy zwracany obiekt ma nieprawidłowe dane.  
  
-   Użycie wartości obliczanej w celu zdefiniowania indeksu początkowego, końcowego indeksu lub liczby elementów, które mają zostać powtórzone. Jeśli wynik obliczeń jest nieoczekiwany, może to spowodować <xref:System.IndexOutOfRangeException> wyjątek. Należy sprawdzić logikę programu w obliczaniu wartości indeksu i zweryfikować wartość przed iteracją tablicy lub kolekcji. Wszystkie następujące warunki muszą być spełnione; w przeciwnym razie jest zgłaszany wyjątek:<xref:System.IndexOutOfRangeException>  
  
    -   Indeks początkowy musi być większy lub równy <xref:System.Array.GetLowerBound%2A?displayProperty=nameWithType> wymiarowi tablicy, która ma zostać wykonana iteracja, lub nie może być równy 0 dla kolekcji.  
  
    -   Indeks końcowy nie może przekroczyć <xref:System.Array.GetUpperBound%2A?displayProperty=nameWithType> wymiaru tablicy, która ma zostać wykonana iteracja, lub nie może być większy ani równy `Count` właściwości kolekcji.  
  
    -   Poniższe równanie musi mieć wartość true dla wymiaru tablicy, która ma zostać wykonana iteracja:  
  
        ```  
        start_index >= lower_bound And start_index + items_to_iterate - 1 <= upper_bound  
        ```  
  
         W przypadku kolekcji następujące równanie musi być prawdziwe:  
  
        ```  
        start_index >= 0 And start_index + items_to_iterate <= Count  
        ```  
  
        > [!TIP]
        >  Początkowy indeks tablicy lub kolekcji nigdy nie może być liczbą ujemną.  
  
-   Przy założeniu, że tablica musi być liczona od zera. Tablice, które nie są oparte na zerach, mogą być <xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=nameWithType> tworzone przez metodę i mogą być zwracane przez międzyoperacyjność modelu COM, chociaż nie są zgodne ze specyfikacją CLS. Poniższy przykład ilustruje <xref:System.IndexOutOfRangeException> , że jest generowany podczas próby iteracji tablicy niezerowej utworzonej <xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=nameWithType> przez metodę.  
  
     [!code-csharp[System.IndexOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/nonzero1.cs#1)]
     [!code-vb[System.IndexOutOfRangeException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/nonzero1.vb#1)]  
  
     Aby poprawić błąd, jak w poniższym przykładzie, można wywołać <xref:System.Array.GetLowerBound%2A> metodę zamiast założeń dotyczących początkowego indeksu tablicy.  
  
     [!code-csharp[System.IndexOutOfRangeException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/nonzero2.cs#2)]
     [!code-vb[System.IndexOutOfRangeException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/nonzero2.vb#2)]  
  
     Należy pamiętać, że po wywołaniu <xref:System.Array.GetLowerBound%2A> metody, aby uzyskać początkowy indeks tablicy, należy również <xref:System.Array.GetUpperBound%28System.Int32%29?displayProperty=nameWithType> wywołać metodę w celu uzyskania końcowego indeksu.  
  
-   Myląco indeks i wartość w tym indeksie w tablicy lub kolekcji liczbowej. Ten problem występuje zwykle w przypadku używania `foreach` instrukcji (in C#) lub `For Each` instrukcji (w Visual Basic). Poniższy przykład ilustruje ten problem.  
  
     [!code-csharp[System.IndexOutOfRangeException#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/foreach1.cs#7)]
     [!code-vb[System.IndexOutOfRangeException#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/foreach1.vb#7)]  
  
     Konstrukcja iteracji zwraca każdą wartość w tablicy lub kolekcji, a nie jej indeks. Aby wyeliminować wyjątek, użyj tego kodu.  
  
     [!code-csharp[System.IndexOutOfRangeException#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/foreach2.cs#8)]
     [!code-vb[System.IndexOutOfRangeException#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/foreach2.vb#8)]  
  
-   Podanie nieprawidłowej nazwy kolumny dla <xref:System.Data.DataView.Sort%2A?displayProperty=nameWithType> właściwości.  
  
-   Naruszanie bezpieczeństwa wątków. Operacje, takie jak odczytywanie z <xref:System.IO.StreamReader> tego samego obiektu, zapisywanie w <xref:System.IO.StreamWriter> tym samym obiekcie z wielu wątków lub Wyliczanie obiektów w <xref:System.Collections.Hashtable> różnych wątkach, może zgłosić <xref:System.IndexOutOfRangeException> , jeśli obiekt nie jest dostępny w bezpieczny wątkowo. Ten wyjątek jest zwykle sporadyczny, ponieważ opiera się na warunku wyścigu.  
  
 Używanie zakodowanych wartości indeksu do manipulowania tablicą może zgłosić wyjątek, jeśli wartość indeksu jest nieprawidłowa lub nieprawidłowa lub jeśli rozmiar testowanej tablicy jest nieoczekiwany. Aby zapobiec zgłaszaniu <xref:System.IndexOutOfRangeException> wyjątku przez operację, można wykonać następujące czynności:  
  
-   Iteracja elementów tablicy przy użyciu instrukcji [foreach](https://msdn.microsoft.com/library/ttw7t8t6.aspx) (in C#) lub [for each... Następna](https://msdn.microsoft.com/library/5ebk1751.aspx) konstrukcja (w Visual Basic), a nie Iteracja elementów według indeksu.  
  
-   Wykonuje iterację elementów według indeksu, rozpoczynając od indeksu zwróconego <xref:System.Array.GetLowerBound%2A?displayProperty=nameWithType> przez metodę i kończąc na indeksie zwróconym <xref:System.Array.GetUpperBound%2A?displayProperty=nameWithType> przez metodę.  
  
-   Jeśli przypisujesz elementy w jednej tablicy do innej, upewnij się, że Tablica docelowa zawiera co najmniej tyle elementów jako tablicę źródłową <xref:System.Array.Length%2A?displayProperty=nameWithType> , porównując ich właściwości.  
  
 Aby uzyskać listę początkowe wartości właściwości wystąpienia <xref:System.IndexOutOfRangeException>, zobacz <xref:System.IndexOutOfRangeException> konstruktorów.  
  
 Następujące instrukcje języka pośredniego (IL) <xref:System.IndexOutOfRangeException>zwracają:  
  
-   ldelem. \<typ >  
  
-   ldelema  
  
-   stelem.\<type>  
  
 <xref:System.IndexOutOfRangeException>używa HRESULT COR_E_INDEXOUTOFRANGE o wartości 0x80131508.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
    <related type="Article" href="~/docs/standard/exceptions/index.md">Obsługa i zgłaszanie wyjątków na platformie .NET</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.IndexOutOfRangeException" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IndexOutOfRangeException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IndexOutOfRangeException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IndexOutOfRangeException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.IndexOutOfRangeException" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor inicjuje <xref:System.Exception.Message%2A> właściwość nowego wystąpienia do komunikatu dostarczonego przez system, który opisuje błąd, taki jak "indeks tablicy jest poza zakresem". Ten komunikat uwzględnia bieżącą kulturę systemu.  
  
 W poniższej tabeli przedstawiono początkowe wartości właściwości dla wystąpienia <xref:System.IndexOutOfRangeException>.  
  
|Właściwość|Wartość|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Odwołanie o wartości null (`Nothing` w języku Visual Basic).|  
|<xref:System.Exception.Message%2A>|Zlokalizowany ciąg komunikatu o błędzie.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IndexOutOfRangeException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IndexOutOfRangeException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IndexOutOfRangeException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new IndexOutOfRangeException : string -&gt; IndexOutOfRangeException" Usage="new System.IndexOutOfRangeException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Komunikat, który opisuje błąd.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.IndexOutOfRangeException" /> klasy przy użyciu określonego komunikatu o błędzie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor inicjuje <xref:System.Exception.Message%2A?displayProperty=nameWithType> właściwość nowego wyjątku `message` przy użyciu parametru. Zawartość `message` ma być zrozumiała dla ludzi. Obiekt wywołujący tego konstruktora jest wymagany w celu zagwarantowania, że ten ciąg został zlokalizowany w bieżącej kulturze systemu.  
  
 W poniższej tabeli przedstawiono początkowe wartości właściwości dla wystąpienia <xref:System.IndexOutOfRangeException>.  
  
|Właściwość|Wartość|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Odwołanie o wartości null (`Nothing` w języku Visual Basic).|  
|<xref:System.Exception.Message%2A>|Ciąg komunikatu o błędzie.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IndexOutOfRangeException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IndexOutOfRangeException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new IndexOutOfRangeException : string * Exception -&gt; IndexOutOfRangeException" Usage="new System.IndexOutOfRangeException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">Komunikat o błędzie wyjaśniający przyczynę wyjątku.</param>
        <param name="innerException">Wyjątek, który jest przyczyną bieżącego wyjątku. Jeśli parametr nie jest odwołaniem null (<see langword="Nothing" /> w Visual Basic), bieżący <see langword="catch" /> wyjątek jest wywoływany w bloku, który obsługuje wyjątek wewnętrzny. <paramref name="innerException" /></param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.IndexOutOfRangeException" /> klasy przy użyciu określonego komunikatu o błędzie i odwołania do wewnętrznego wyjątku, który jest przyczyną tego wyjątku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wyjątek generowany jako bezpośredni wynik poprzedniego wyjątku powinien zawierać odwołanie do poprzedniego wyjątku we <xref:System.Exception.InnerException%2A> właściwości. Właściwość zwraca tę samą wartość, która jest przenoszona do konstruktora lub odwołanie o wartości null (`Nothing` `InnerException` w Visual Basic), jeśli właściwość nie poda wewnętrznej wartości wyjątku do konstruktora. `InnerException`  
  
 W poniższej tabeli przedstawiono początkowe wartości właściwości dla wystąpienia <xref:System.IndexOutOfRangeException>.  
  
|Właściwość|Wartość|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Odwołanie do wewnętrznego wyjątku.|  
|<xref:System.Exception.Message%2A>|Ciąg komunikatu o błędzie.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
      </Docs>
    </Member>
  </Members>
</Type>
