<Type Name="IndexOutOfRangeException" FullName="System.IndexOutOfRangeException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8d682cfe7b52c931a13d9293d341bedadc228bc0" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36431059" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class IndexOutOfRangeException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit IndexOutOfRangeException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.IndexOutOfRangeException" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class IndexOutOfRangeException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class IndexOutOfRangeException sealed : SystemException" />
  <TypeSignature Language="F#" Value="type IndexOutOfRangeException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Wyjątek zgłaszany, gdy próby uzyskania dostępu do elementu tablicy lub kolekcji z indeksem, który znajduje się poza zakresem jej.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IndexOutOfRangeException> Wyjątek jest zgłaszany, gdy nieprawidłowy indeks jest używany do uzyskiwania dostępu elementu członkowskiego tablicy lub kolekcji, lub do odczytu lub zapisu z określonej lokalizacji w buforze. Ten wyjątek dziedziczy <xref:System.Exception> klasy, ale dodaje nie unikatowych elementów członkowskich.  
  
 Zazwyczaj <xref:System.IndexOutOfRangeException> wyniku developer błąd jest zgłaszany wyjątek. Zamiast obsługi wyjątku, należy zdiagnozować przyczynę błędu i poprawić kod. Najbardziej typowe przyczyny tego błędu to:  
  
-   Zapomniane, górna granica kolekcji lub tablicę wartości nieujemnych jest jednym mniejsza od jego liczby elementów członkowskich lub elementów, jak w poniższym przykładzie przedstawiono.  
  
     [!code-csharp[System.IndexOutOfRangeException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/length1.cs#3)]
     [!code-vb[System.IndexOutOfRangeException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/length1.vb#3)]  
  
     Aby naprawić błąd, można użyć kodu podobne do następujących.  
  
     [!code-csharp[System.IndexOutOfRangeException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/length2.cs#4)]
     [!code-vb[System.IndexOutOfRangeException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/length2.vb#4)]  
  
     Alternatywnie zamiast Iterowanie wszystkich elementów w tablicy według ich indeksu, możesz użyć `foreach` instrukcji (w języku C#) lub `For Each` instrukcji (w języku Visual Basic).  
  
-   Podjęto próbę przypisania elementu tablicy do innej tablicy nie ma który odpowiednio wymiarów i ma mniej elementów niż oryginalny tablicy. Poniższy przykład spróbuje przypisać ostatnim elementem w `value1` tablicy do tego samego elementu w `value2` tablicy. Jednak `value2` tablicy został niepoprawnie wymiarów można mieć sześć zamiast siedmiu elementów. W związku z tym zgłasza przypisania <xref:System.IndexOutOfRangeException> wyjątku.  
  
     [!code-csharp[System.IndexOutOfRangeException#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/Uninit1.cs#10)]
     [!code-vb[System.IndexOutOfRangeException#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/Uninit1.vb#10)]  
  
-   Przy użyciu wartości zwracany przez metodę wyszukiwania do wykonywania iteracji część tablicą lub kolekcją, zaczynając od pozycji określonego indeksu. Jeśli zapomnisz do sprawdzenia, czy operacja wyszukiwania znaleziono dopasowanie, zgłasza wyjątek środowiska uruchomieniowego <xref:System.IndexOutOfRangeException> wyjątek, jak pokazano w poniższym przykładzie.  
  
     [!code-csharp[System.IndexOutOfRangeException#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/negative1.cs#5)]
     [!code-vb[System.IndexOutOfRangeException#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/negative1.vb#5)]  
  
     W takim przypadku <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType> metoda zwraca wartość -1, która jest wartością nieprawidłowy indeks, gdy nie znaleziono dopasowania. Aby rozwiązać ten problem, sprawdź zwracana wartość metody wyszukiwania przed iteracja tablicy, jak pokazano w poniższym przykładzie.  
  
     [!code-csharp[System.IndexOutOfRangeException#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/negative2.cs#6)]
     [!code-vb[System.IndexOutOfRangeException#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/negative2.vb#6)]  
  
-   Próba użycia lub wyliczyć zestawu wyników, kolekcji lub tablicy zwracane przez zapytanie bez sprawdzenie, czy zwrócony obiekt zawiera wszystkie prawidłowe dane.  
  
-   Aby zdefiniować indeks początkowy, końcową indeksu lub liczba elementów, należy powtórzyć przy użyciu obliczoną wartość. Jeśli wynikiem obliczenia jest nieoczekiwane, może to spowodować <xref:System.IndexOutOfRangeException> wyjątku. Należy sprawdzić logiki programu do wyliczenia wartości indeksu i sprawdź wartość przed iteracja tablicą lub kolekcją. Poniższe warunki muszą być spełnione wszystkie; w przeciwnym razie <xref:System.IndexOutOfRangeException> wyjątku:  
  
    -   Indeks początkowy musi być większa lub równa <xref:System.Array.GetLowerBound%2A?displayProperty=nameWithType> wymiaru tablicy, która ma być iteracji, lub większa niż lub równa 0 dla kolekcji.  
  
    -   Końcową indeksu nie może przekraczać <xref:System.Array.GetUpperBound%2A?displayProperty=nameWithType> wymiaru tablicy, która ma być iteracji, nie może być większa niż lub równa `Count` właściwości kolekcji.  
  
    -   Następujące równanie musi mieć wartość true dla wymiaru tablicy, która ma być iteracji:  
  
        ```  
        start_index >= lower_bound And start_index + items_to_iterate – 1 <= upper_bound  
        ```  
  
         Dla kolekcji muszą być spełnione następujące równanie:  
  
        ```  
        start_index >= 0 And start_index + items_to_iterate <= Count  
        ```  
  
        > [!TIP]
        >  Indeks początkowy tablicą lub kolekcją nigdy nie może być liczbą ujemną.  
  
-   Przy założeniu, że tablicy musi być liczony od zera. Można tworzyć tablic, które nie są liczony od zera <xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=nameWithType> — metoda i może być zwracany przez współdziałanie z COM, chociaż nie są zgodne ze specyfikacją CLS. Poniższy przykład przedstawia <xref:System.IndexOutOfRangeException> zgłoszono podczas próby przejść na podstawie zero tablicę utworzone przez <xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=nameWithType> metody.  
  
     [!code-csharp[System.IndexOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/nonzero1.cs#1)]
     [!code-vb[System.IndexOutOfRangeException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/nonzero1.vb#1)]  
  
     Aby naprawić błąd, tak jak w poniższym przykładzie, wywołanie <xref:System.Array.GetLowerBound%2A> metody zamiast założenie o początkowego indeksu tablicy.  
  
     [!code-csharp[System.IndexOutOfRangeException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/nonzero2.cs#2)]
     [!code-vb[System.IndexOutOfRangeException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/nonzero2.vb#2)]  
  
     Należy pamiętać, że podczas wywoływania <xref:System.Array.GetLowerBound%2A> metodę, aby uzyskać indeks początkowy z tablicy, należy także wywołać <xref:System.Array.GetUpperBound%28System.Int32%29?displayProperty=nameWithType> metodę, aby pobrać jego końcową indeksu.  
  
-   Skomplikowana indeksu i wartość pod indeksem tablica numeryczna lub kolekcji. Ten problem występuje zazwyczaj, gdy za pomocą `foreach` instrukcji (w języku C#) lub `For Each` instrukcji (w języku Visual Basic). Poniższy przykład ilustruje ten problem.  
  
     [!code-csharp[System.IndexOutOfRangeException#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/foreach1.cs#7)]
     [!code-vb[System.IndexOutOfRangeException#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/foreach1.vb#7)]  
  
     Konstrukcja iteracji zwraca każdej wartości w tablicy lub kolekcji, nie jej indeks. Aby wyeliminować wyjątek, użyj tego kodu.  
  
     [!code-csharp[System.IndexOutOfRangeException#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/foreach2.cs#8)]
     [!code-vb[System.IndexOutOfRangeException#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/foreach2.vb#8)]  
  
-   Zapewnianie nieprawidłową nazwę kolumny do <xref:System.Data.DataView.Sort%2A?displayProperty=nameWithType> właściwości.  
  
-   Naruszenie bezpieczeństwa wątków. Operacje takie jak odczytu z tej samej <xref:System.IO.StreamReader> obiektu zapisu do tego samego <xref:System.IO.StreamWriter> obiektów z wielu wątków lub wyliczania obiektów w <xref:System.Collections.Hashtable> z różnych wątkach może zgłosić <xref:System.IndexOutOfRangeException> Jeśli obiekt nie jest dostępna w sposób zapewniający obsługę wielowątkowości. Ten wyjątek jest zwykle sporadyczne, ponieważ zależy od sytuacji wyścigu.  
  
 Za pomocą wartości indeksu ustalony do manipulowania tablicy prawdopodobnie zgłosić wyjątek, jeśli wartość indeksu jest nieprawidłowy lub nieprawidłowa lub rozmiar tablicy manipulowania jest nieoczekiwany. Aby zapobiec operacji wyrzucanie <xref:System.IndexOutOfRangeException> wyjątku, można wykonaj następujące czynności:  
  
-   Iterowanie elementów w tablicy przy użyciu [foreach](https://msdn.microsoft.com/library/ttw7t8t6.aspx) instrukcji (w języku C#) lub [For Each... Następny](https://msdn.microsoft.com/library/5ebk1751.aspx) skonstruować (w języku Visual Basic) zamiast iteracja elementów według indeksu.  
  
-   Przejść elementów według indeksu, począwszy od indeksu zwrócony przez <xref:System.Array.GetLowerBound%2A?displayProperty=nameWithType> — metoda i kończenie o indeksie zwrócony przez <xref:System.Array.GetUpperBound%2A?displayProperty=nameWithType> metody.  
  
-   W przypadku przypisywania elementów w tablicy do innej, upewnij się, Tablica docelowa ma co najmniej tyle elementów jako tablica źródłowa, porównując ich <xref:System.Array.Length%2A?displayProperty=nameWithType> właściwości.  
  
 Aby uzyskać listę początkowe wartości właściwości dla wystąpienia <xref:System.IndexOutOfRangeException>, zobacz <xref:System.IndexOutOfRangeException> konstruktorów.  
  
 Poniższe instrukcje języku pośrednim (IL) throw <xref:System.IndexOutOfRangeException>:  
  
-   ldelem. \<typ >  
  
-   ldelema  
  
-   stelem.\<type>  
  
 <xref:System.IndexOutOfRangeException> używa COR_E_INDEXOUTOFRANGE HRESULT, która ma wartość 0x80131508.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.IndexOutOfRangeException" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IndexOutOfRangeException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IndexOutOfRangeException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IndexOutOfRangeException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.IndexOutOfRangeException" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor inicjuje <xref:System.Exception.Message%2A> właściwość nowego wystąpienia dostarczony przez system komunikatu, opisem błędu, takie jak "indeks tablicy jest poza zakresem." Ten komunikat uwzględnia bieżącą kulturę systemu.  
  
 W poniższej tabeli przedstawiono początkowe wartości właściwości dla wystąpienia <xref:System.IndexOutOfRangeException>.  
  
|Właściwość|Wartość|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Odwołanie o wartości null (`Nothing` w języku Visual Basic).|  
|<xref:System.Exception.Message%2A>|Zlokalizowany ciąg komunikatu o błędzie.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IndexOutOfRangeException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IndexOutOfRangeException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IndexOutOfRangeException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new IndexOutOfRangeException : string -&gt; IndexOutOfRangeException" Usage="new System.IndexOutOfRangeException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Komunikat, który opisuje błąd.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.IndexOutOfRangeException" /> klasy z powodu określonego błędu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor inicjuje <xref:System.Exception.Message%2A?displayProperty=nameWithType> właściwość nowego przy użyciu wyjątek `message` parametru. Zawartość `message` ma na celu rozumiane przez człowieka. Obiekt wywołujący tego konstruktora jest wymagany w celu zagwarantowania, że ten ciąg został zlokalizowany w bieżącej kulturze systemu.  
  
 W poniższej tabeli przedstawiono początkowe wartości właściwości dla wystąpienia <xref:System.IndexOutOfRangeException>.  
  
|Właściwość|Wartość|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Odwołanie o wartości null (`Nothing` w języku Visual Basic).|  
|<xref:System.Exception.Message%2A>|Ciąg komunikatu o błędzie.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IndexOutOfRangeException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IndexOutOfRangeException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new IndexOutOfRangeException : string * Exception -&gt; IndexOutOfRangeException" Usage="new System.IndexOutOfRangeException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">Komunikat o błędzie wyjaśniający przyczynę wyjątku.</param>
        <param name="innerException">Wyjątek, który jest przyczyną bieżącego wyjątku. Jeśli <c>innerException</c> parametr nie jest odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic), bieżący wyjątek jest zgłaszany w <see langword="catch" /> bloku, który obsługuje wyjątek wewnętrzny.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.IndexOutOfRangeException" /> z określonego komunikatu o błędzie i odwołania do wyjątek wewnętrzny będący przyczyną tego wyjątku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wyjątek zgłaszany bezpośrednio w wyniku poprzedniego wyjątku powinien zawierać odwołanie do poprzedniego wyjątku we <xref:System.Exception.InnerException%2A> właściwości. `InnerException` Właściwość zwraca tę samą wartość, która została przekazana do konstruktora lub odwołanie o wartości null (`Nothing` w języku Visual Basic) Jeśli `InnerException` właściwości nie dostarcza do konstruktora wartości wyjątku wewnętrznego.  
  
 W poniższej tabeli przedstawiono początkowe wartości właściwości dla wystąpienia <xref:System.IndexOutOfRangeException>.  
  
|Właściwość|Wartość|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Odwołanie do wewnętrznego wyjątku.|  
|<xref:System.Exception.Message%2A>|Ciąg komunikatu o błędzie.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
      </Docs>
    </Member>
  </Members>
</Type>