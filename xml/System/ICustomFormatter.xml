<Type Name="ICustomFormatter" FullName="System.ICustomFormatter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f9905ea1b04870148d87d7b4065ef7e2d5ad1d34" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37728462" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ICustomFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomFormatter" />
  <TypeSignature Language="DocId" Value="T:System.ICustomFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomFormatter" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomFormatter" />
  <TypeSignature Language="F#" Value="type ICustomFormatter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="20b0b-101">Definiuje metodę, która obsługuje formatowanie niestandardowe wartości obiektu.</span>
      <span class="sxs-lookup">
        <span data-stu-id="20b0b-101">Defines a method that supports custom formatting of the value of an object.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20b0b-102"><xref:System.ICustomFormatter> Interfejs zawiera jedną metodę <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="20b0b-102">The <xref:System.ICustomFormatter> interface includes a single method, <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="20b0b-103">Gdy ten interfejs jest implementowany przez odwołanie lub wartość typu <xref:System.ICustomFormatter.Format%2A> metoda zwraca niestandardowo sformatowane ciąg reprezentujący wartość obiektu.</span><span class="sxs-lookup"><span data-stu-id="20b0b-103">When this interface is implemented by a reference or value type, the <xref:System.ICustomFormatter.Format%2A> method returns a custom-formatted string representation of an object's value.</span></span>  
  
 <span data-ttu-id="20b0b-104">Zazwyczaj <xref:System.ICustomFormatter> interfejs jest implementowany przy użyciu <xref:System.IFormatProvider> interfejsu, aby dostosować zachowanie dwóch metodach programu .NET Framework złożony ciąg formatowania, które zawierają <xref:System.IFormatProvider> parametru.</span><span class="sxs-lookup"><span data-stu-id="20b0b-104">Typically, the <xref:System.ICustomFormatter> interface is implemented with the <xref:System.IFormatProvider> interface to customize the behavior of two .NET Framework composite string formatting methods that include an <xref:System.IFormatProvider> parameter.</span></span> <span data-ttu-id="20b0b-105">W szczególności <xref:System.ICustomFormatter> interfejs może zapewnić niestandardowe formatowanie wartości przekazany obiekt <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> i <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="20b0b-105">Specifically, the <xref:System.ICustomFormatter> interface can provide custom formatting of the value of an object passed to the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> and <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="20b0b-106">Zapewnianie niestandardowych reprezentujący wartość obiektu wymaga, należy wykonać następujące czynności:</span><span class="sxs-lookup"><span data-stu-id="20b0b-106">Providing a custom representation of an object's value requires that you do the following:</span></span>  
  
1.  <span data-ttu-id="20b0b-107">Definiowanie klasy, która implementuje <xref:System.ICustomFormatter> interfejsu i jeden element członkowski <xref:System.ICustomFormatter.Format%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="20b0b-107">Define a class that implements the <xref:System.ICustomFormatter> interface and its single member, the <xref:System.ICustomFormatter.Format%2A> method.</span></span>  
  
2.  <span data-ttu-id="20b0b-108">Definiowanie klasy, która implementuje <xref:System.IFormatProvider> interfejsu i jeden element członkowski <xref:System.IFormatProvider.GetFormat%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="20b0b-108">Define a class that implements the <xref:System.IFormatProvider> interface and its single member, the <xref:System.IFormatProvider.GetFormat%2A> method.</span></span> <span data-ttu-id="20b0b-109"><xref:System.IFormatProvider.GetFormat%2A> Metoda zwraca wystąpienie usługi <xref:System.ICustomFormatter> implementacji.</span><span class="sxs-lookup"><span data-stu-id="20b0b-109">The <xref:System.IFormatProvider.GetFormat%2A> method returns an instance of your <xref:System.ICustomFormatter> implementation.</span></span> <span data-ttu-id="20b0b-110">Często pojedyncza klasa implementuje interfejsy <xref:System.ICustomFormatter> i <xref:System.IFormatProvider>.</span><span class="sxs-lookup"><span data-stu-id="20b0b-110">Often, a single class implements both <xref:System.ICustomFormatter> and <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="20b0b-111">W takim przypadku klasa firmy `GetFormat` implementacji jest po prostu zwraca instancję samego siebie.</span><span class="sxs-lookup"><span data-stu-id="20b0b-111">In that case, the class's `GetFormat` implementation just returns an instance of itself.</span></span>  
  
3.  <span data-ttu-id="20b0b-112">Przekaż <xref:System.IFormatProvider> implementacji jako `provider` argument <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> metody lub porównywalny.</span><span class="sxs-lookup"><span data-stu-id="20b0b-112">Pass the <xref:System.IFormatProvider> implementation as the `provider` argument of the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> method or a comparable method.</span></span>  
  
 <span data-ttu-id="20b0b-113">Metoda .NET Framework będzie używać niestandardowych odpowiadający ustawieniom lokalnym zamiast własnej.</span><span class="sxs-lookup"><span data-stu-id="20b0b-113">The .NET Framework method will then use your custom formatting instead of its own.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20b0b-114">Poniższy przykład implementuje <xref:System.ICustomFormatter> umożliwia binarne, ósemkowa i szesnastkowa formatowania wartości całkowitych.</span><span class="sxs-lookup"><span data-stu-id="20b0b-114">The following example implements <xref:System.ICustomFormatter> to allow binary, octal, and hexadecimal formatting of integral values.</span></span> <span data-ttu-id="20b0b-115">W tym przykładzie jedną klasę `IBinaryFormatter`, implementuje interfejsy <xref:System.ICustomFormatter> i <xref:System.IFormatProvider>.</span><span class="sxs-lookup"><span data-stu-id="20b0b-115">In this example, a single class, `IBinaryFormatter`, implements both <xref:System.ICustomFormatter> and <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="20b0b-116">Jego <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> Metoda określa, czy `formatType` parametr reprezentuje <xref:System.ICustomFormatter> typu.</span><span class="sxs-lookup"><span data-stu-id="20b0b-116">Its <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> method determines whether the `formatType` parameter represents an <xref:System.ICustomFormatter> type.</span></span> <span data-ttu-id="20b0b-117">Jeśli tak jest, `BinaryFormatter` Zwraca wystąpienie; w przeciwnym razie zwraca `null`.</span><span class="sxs-lookup"><span data-stu-id="20b0b-117">If it does, `BinaryFormatter` returns an instance of itself; otherwise, it returns `null`.</span></span> <span data-ttu-id="20b0b-118">Jego <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementacja Określa, czy parametr formatu jest jedną z trzech obsługiwanych ciągów formatu ("B" dla pliku binarnego, "O", aby uzyskać ósemkowym i "H", w przypadku wartości szesnastkowych) i formatuje `arg` parametru odpowiednio.</span><span class="sxs-lookup"><span data-stu-id="20b0b-118">Its <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementation determines whether the format parameter is one of the three supported format strings ("B" for binary, "O" for octal, and "H" for hexadecimal) and formats the `arg` parameter appropriately.</span></span> <span data-ttu-id="20b0b-119">W przeciwnym razie, jeśli `arg` nie `null`, wywoływanych przez nią `arg` parametru <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> wdrożenia, jeśli taki istnieje lub jego bez parametrów `ToString` metody, jeśli jeden nie jest.</span><span class="sxs-lookup"><span data-stu-id="20b0b-119">Otherwise, if `arg` is not `null`, it calls the `arg` parameter's <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementation, if one exists, or its parameterless `ToString` method, if one does not.</span></span> <span data-ttu-id="20b0b-120">Jeśli `arg` jest `null`, metoda zwraca <xref:System.String.Empty?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="20b0b-120">If `arg` is `null`, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 <span data-ttu-id="20b0b-121">`BinaryFormatter` następnie można zapewniać niestandardowe formatowanie, przekazując `BinaryFormatter` obiektu jako `provider` parametru <xref:System.String.Format%2A> metody, jak w poniższym przykładzie pokazano.</span><span class="sxs-lookup"><span data-stu-id="20b0b-121">`BinaryFormatter` can then be used to provide custom formatting by passing a `BinaryFormatter` object as the `provider` parameter of the <xref:System.String.Format%2A> method, as the following example shows.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <span data-ttu-id="20b0b-122">
        <para>Środowisko uruchomieniowe języka wspólnego próbuje użyć usługi <see cref="T:System.ICustomFormatter" /> wdrożenia dla każdego elementu formatu w ciągu formatu złożonego. Dlatego należy oczekiwać, że Twoje <see cref="T:System.ICustomFormatter" /> implementacji, zostanie wywołana w celu świadczenia usług formatowania do obiektów lub wartości, które nie jest przeznaczony do obsługi. W takich przypadkach Twoje <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> metody należy wywołać odpowiedniej metody formatowania dla tego obiektu lub wartość.  Istnieją dwa rodzaje z <see cref="T:System.ICustomFormatter" /> implementacje: wewnętrzne i rozszerzenia.  Wewnętrzne implementacje są implementacji, które zapewniają niestandardowe formatowanie dla obiektu zdefiniowanego przez aplikację. W tym przypadku implementacji powinien zawierać następujące czynności:-definicję ciągi formatu zdefiniować sposób formatowania obiektu. Ciągi formatu są opcjonalne. Zazwyczaj ciąg formatu "G" lub "g" definiuje format ogólny (lub najczęściej używane). Jesteś można zdefiniować wszystkie ciągi formatu, które postanowisz bezpłatnie. Możesz mogą także zdecydować, czy są one wielkość liter lub nie.  -Test, aby upewnić się, że typ obiektu jest przekazywane do usługi <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> metodą jest typu zdefiniowanego przez aplikację. Jeśli nie jest, należy wywołać obiektu <see cref="T:System.IFormattable" /> wdrożenia, jeśli istnieje, lub jego <see cref="M:System.Object.ToString" /> metody, jeśli nie jest. Należy być przygotowanym do obsługi tych wywołań metody wywołuje może zgłaszać wyjątki.  -Kod w celu obsługi ciąg formatu wartości null, jeśli Twoja implementacja obsługuje ciągi formatu. Najbardziej typowym podejściem jest aby zastąpić ciąg formatu wartości null przy użyciu specyfikatora formatu ogólnego.  -Kod służący do obsługi dowolnej ciągów formatu obsługiwanych przez wdrożenie.  -Kod służący do obsługi formatów ciągów, które nie obsługują. Najbardziej typowym podejściem jest throw <see cref="T:System.FormatException" />, chociaż można podać formatowanie domyślne.  Implementacje rozszerzenia są implementacji, które zapewniają niestandardowe formatowanie dla typu, który ma już obsługę formatowania. Na przykład można zdefiniować <c>CustomerNumberFormatter</c> , formatuje typem całkowitym, za pomocą łączników w określonych cyfr. W tym przypadku implementacji powinien zawierać następujące czynności:-definicji ciągów formatu, które rozszerzają formatowania obiektu. Te ciągi formatu są wymagane, ale nie może powodować konfliktu z ciągami formatu z istniejącego typu. Na przykład w przypadku rozszerzenia formatowania dla <see cref="T:System.Int32" /> typu, nie należy implementować specyfikatorów formatu "C", "D", "E", "F" i "G", między innymi.  -Test, który typ obiektu jest przekazywane do usługi <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> metody jest typem, której formatowanie rozszerzenie obsługuje. Jeśli nie jest, należy wywołać obiekt <see cref="T:System.IFormattable" /> wdrożenia, jeśli taki istnieje, lub obiekt użytkownika bez parametrów <see cref="M:System.Object.ToString" /> metody, jeśli nie jest. Należy być przygotowanym do obsługi tych wywołań metody wywołuje może zgłaszać wyjątki.  -Kod służący do obsługi dowolnej ciągi formatu, obsługiwane przez Twoje rozszerzenie.  -Kod służący do obsługi dowolnej ciągi formatu nie obsługuje rozszerzenia. Te powinny być przekazywane do typu <see cref="T:System.IFormattable" /> implementacji. Należy być przygotowanym do obsługi tych wywołań metody wywołuje może zgłaszać wyjątki.</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="20b0b-122">
          <para>The common language runtime attempts to use your <see cref="T:System.ICustomFormatter" /> implementation for every format item in a composite format string. As a result, you should expect that your <see cref="T:System.ICustomFormatter" /> implementation will be called to provide formatting services to objects or values that it is not designed to handle. In these cases, your <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> method must call the appropriate formatting method for that object or value.  There are two kinds of <see cref="T:System.ICustomFormatter" /> implementations: intrinsic and extension.  Intrinsic implementations are implementations that provide custom formatting for an application-defined object. In this case, your implementation should include the following:  -   A definition of format strings that define the formatting of the object. Format strings are optional. Typically, a "G" or "g" format string defines the general (or most commonly used) format. However, you are free to define any format strings that you choose. You are also free to decide whether they are case-sensitive or case-insensitive.  -   A test to ensure that the type of the object passed to your <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> method is your application-defined type. If it is not, you should call the object's <see cref="T:System.IFormattable" /> implementation, if one exists, or its <see cref="M:System.Object.ToString" /> method, if it does not. You should be prepared to handle any exceptions these method calls might throw.  -   Code to handle a null format string, if your implementation supports format strings. The most common approach is to replace a null format string with the general format specifier.  -   Code to handle any format strings that your implementation supports.  -   Code to handle format strings that you do not support. The most common approach is to throw a <see cref="T:System.FormatException" />, although you can provide default formatting.  Extension implementations are implementations that provide custom formatting for a type that already has formatting support. For example, you could define a <c>CustomerNumberFormatter</c> that formats an integral type with hyphens between specific digits. In this case, your implementation should include the following:  -   A definition of format strings that extend the formatting of the object. These format strings are required, but they must not conflict with the type's existing format strings. For example, if you are extending formatting for the <see cref="T:System.Int32" /> type, you should not implement the "C", "D", "E", "F", and "G" format specifiers, among others.  -   A test that the type of the object passed to your <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> method is a type whose formatting your extension supports. If it is not, call the object's <see cref="T:System.IFormattable" /> implementation, if one exists, or the object's parameterless <see cref="M:System.Object.ToString" /> method, if it does not. You should be prepared to handle any exceptions these method calls might throw.  -   Code to handle any format strings that your extension supports.  -   Code to handle any format strings that your extension does not support. These should be passed on to the type's <see cref="T:System.IFormattable" /> implementation. You should be prepared to handle any exceptions these method calls might throw.</para>
        </span>
      </span>
    </block>
    <altmember cref="T:System.IFormatProvider" />
  </Docs>
  <Members>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public string Format (string format, object arg, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Format(string format, object arg, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (format As String, arg As Object, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Format(System::String ^ format, System::Object ^ arg, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="abstract member Format : string * obj * IFormatProvider -&gt; string" Usage="iCustomFormatter.Format (format, arg, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">
          <span data-ttu-id="20b0b-123">Ciąg formatu, zawierający specyfikacje formatowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20b0b-123">A format string containing formatting specifications.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="20b0b-124">Obiekt do sformatowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20b0b-124">An object to format.</span>
          </span>
        </param>
        <param name="formatProvider">
          <span data-ttu-id="20b0b-125">Obiekt, że wyczerpania formatowania informacje o bieżącym wystąpieniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20b0b-125">An object that supplies format information about the current instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20b0b-126">Konwertuje wartość określonego obiektu na reprezentację ciągu równoważnego przy użyciu podanego formatu i informacje o formatowaniu specyficzne dla kultury.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20b0b-126">Converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20b0b-127">Ciąg reprezentujący wartość <paramref name="arg" />, sformatowany jako określony przez <paramref name="format" /> i <paramref name="formatProvider" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20b0b-127">The string representation of the value of <paramref name="arg" />, formatted as specified by <paramref name="format" /> and <paramref name="formatProvider" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20b0b-128"><xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> jest metodą wywołania zwrotnego.</span><span class="sxs-lookup"><span data-stu-id="20b0b-128"><xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> is a callback method.</span></span> <span data-ttu-id="20b0b-129">Jest ona wywoływana przez metodę, która obsługuje formatowanie niestandardowe, takie jak <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> lub <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="20b0b-129">It is called by a method that supports custom formatting, such as <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> or <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="20b0b-130">Implementacja jest wywoływana jeden raz dla każdego elementu formatu w [ciąg formatu złożonego](~/docs/standard/base-types/composite-formatting.md).</span><span class="sxs-lookup"><span data-stu-id="20b0b-130">The implementation is called once for each format item in a [composite format string](~/docs/standard/base-types/composite-formatting.md).</span></span> <span data-ttu-id="20b0b-131">Na przykład w następującej instrukcji <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> metoda jest wywoływana trzy razy.</span><span class="sxs-lookup"><span data-stu-id="20b0b-131">For example, in the following statement, the <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> method is called three times.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#4)]
 [!code-vb[System.ICustomFormatter.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#4)]  
  
 <span data-ttu-id="20b0b-132">`arg` Parametru jest obiektem, na liście obiektów, którego liczona od zera pozycja odpowiada indeks elementu formatu.</span><span class="sxs-lookup"><span data-stu-id="20b0b-132">The `arg` parameter is the object in the object list whose zero-based position corresponds to the index of a particular format item.</span></span>  
  
 <span data-ttu-id="20b0b-133">`format` Parametru zawiera ciąg formatu, który jest `formatString` składnika elementu formatu.</span><span class="sxs-lookup"><span data-stu-id="20b0b-133">The `format` parameter contains a format string, which is the `formatString` component of a format item.</span></span> <span data-ttu-id="20b0b-134">Jeśli nie ma element formatu `formatString` składnika, wartość `format` jest `null`.</span><span class="sxs-lookup"><span data-stu-id="20b0b-134">If the format item has no `formatString` component, the value of `format` is `null`.</span></span> <span data-ttu-id="20b0b-135">Jeśli `format` jest `null`, w zależności od typu `arg`, można użyć specyfikacji formatu domyślnego wybranych przez użytkownika.</span><span class="sxs-lookup"><span data-stu-id="20b0b-135">If `format` is `null`, depending on the type of `arg`, you may be able to use the default format specification of your choice.</span></span>  
  
 <span data-ttu-id="20b0b-136">`formatProvider` Parametr jest <xref:System.IFormatProvider> implementację, która zapewnia formatowanie `arg`.</span><span class="sxs-lookup"><span data-stu-id="20b0b-136">The `formatProvider` parameter is the <xref:System.IFormatProvider> implementation that provides formatting for `arg`.</span></span> <span data-ttu-id="20b0b-137">Typowo, jest wystąpienie usługi <xref:System.ICustomFormatter> implementacji.</span><span class="sxs-lookup"><span data-stu-id="20b0b-137">Typically, it is an instance of your <xref:System.ICustomFormatter> implementation.</span></span> <span data-ttu-id="20b0b-138">Jeśli `formatProvider` jest `null`, zignoruj ten parametr.</span><span class="sxs-lookup"><span data-stu-id="20b0b-138">If `formatProvider` is `null`, ignore that parameter.</span></span>  
  
 <span data-ttu-id="20b0b-139">Implementacja <xref:System.ICustomFormatter.Format%2A> metody musi zawierać następujące funkcje, więc .NET Framework może zapewnić formatowania, nie obsługują.</span><span class="sxs-lookup"><span data-stu-id="20b0b-139">Your implementation of the <xref:System.ICustomFormatter.Format%2A> method must include the following functionality so the .NET Framework can provide formatting you do not support.</span></span> <span data-ttu-id="20b0b-140">Jeśli format — metoda nie obsługuje formatu, ustal, czy obiekt formatowana implementuje <xref:System.IFormattable> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="20b0b-140">If your format method does not support a format, determine whether the object being formatted implements the <xref:System.IFormattable> interface.</span></span> <span data-ttu-id="20b0b-141">Jeśli go Wywołaj <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> metody tego interfejsu.</span><span class="sxs-lookup"><span data-stu-id="20b0b-141">If it does, invoke the <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> method of that interface.</span></span> <span data-ttu-id="20b0b-142">W przeciwnym razie Wywołaj domyślną <xref:System.Object.ToString%2A?displayProperty=nameWithType> metoda obiektu źródłowego.</span><span class="sxs-lookup"><span data-stu-id="20b0b-142">Otherwise, invoke the default <xref:System.Object.ToString%2A?displayProperty=nameWithType> method of the underlying object.</span></span> <span data-ttu-id="20b0b-143">Poniższy kod ilustruje ten wzorzec.</span><span class="sxs-lookup"><span data-stu-id="20b0b-143">The following code illustrates this pattern.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#3)]
 [!code-vb[System.ICustomFormatter.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="20b0b-144">Poniższy przykład implementuje <xref:System.ICustomFormatter> umożliwia binarne, ósemkowa i szesnastkowa formatowania wartości całkowitych.</span><span class="sxs-lookup"><span data-stu-id="20b0b-144">The following example implements <xref:System.ICustomFormatter> to allow binary, octal, and hexadecimal formatting of integral values.</span></span> <span data-ttu-id="20b0b-145">Jego <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementacja Określa, czy parametr formatu jest jedną z trzech obsługiwanych ciągów formatu ("B" dla pliku binarnego, "O", aby uzyskać ósemkowym i "H", w przypadku wartości szesnastkowych) i formatuje `arg` parametru odpowiednio.</span><span class="sxs-lookup"><span data-stu-id="20b0b-145">Its <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementation determines whether the format parameter is one of the three supported format strings ("B" for binary, "O" for octal, and "H" for hexadecimal) and formats the `arg` parameter appropriately.</span></span> <span data-ttu-id="20b0b-146">W przeciwnym razie, jeśli `arg` nie `null`, wywoływanych przez nią `arg` parametru <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> wdrożenia, jeśli taki istnieje lub jego bez parametrów `ToString` metody, jeśli jeden nie jest.</span><span class="sxs-lookup"><span data-stu-id="20b0b-146">Otherwise, if `arg` is not `null`, it calls the `arg` parameter's <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementation, if one exists, or its parameterless `ToString` method, if one does not.</span></span> <span data-ttu-id="20b0b-147">Jeśli `arg` jest `null`, metoda zwraca <xref:System.String.Empty?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="20b0b-147">If `arg` is `null`, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 <span data-ttu-id="20b0b-148">`BinaryFormatter` następnie można zapewniać niestandardowe formatowanie, przekazując `BinaryFormatter` obiektu jako `provider` parametru <xref:System.String.Format%2A> metody, jak w poniższym przykładzie pokazano.</span><span class="sxs-lookup"><span data-stu-id="20b0b-148">`BinaryFormatter` can then be used to provide custom formatting by passing a `BinaryFormatter` object as the `provider` parameter of the <xref:System.String.Format%2A> method, as the following example shows.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormattable" />
      </Docs>
    </Member>
  </Members>
</Type>