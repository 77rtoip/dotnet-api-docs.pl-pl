<Type Name="ICustomFormatter" FullName="System.ICustomFormatter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="440e566843bd8a6f7aa2849b29bdd2300c580fd1" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39853300" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ICustomFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomFormatter" />
  <TypeSignature Language="DocId" Value="T:System.ICustomFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomFormatter" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomFormatter" />
  <TypeSignature Language="F#" Value="type ICustomFormatter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Definiuje metodę, która obsługuje formatowanie niestandardowe wartości obiektu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ICustomFormatter> Interfejs zawiera jedną metodę <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>. Gdy ten interfejs jest implementowany przez odwołanie lub wartość typu <xref:System.ICustomFormatter.Format%2A> metoda zwraca niestandardowo sformatowane ciąg reprezentujący wartość obiektu.  
  
 Zazwyczaj <xref:System.ICustomFormatter> interfejs jest implementowany przy użyciu <xref:System.IFormatProvider> interfejsu, aby dostosować zachowanie dwóch metodach programu .NET Framework złożony ciąg formatowania, które zawierają <xref:System.IFormatProvider> parametru. W szczególności <xref:System.ICustomFormatter> interfejs może zapewnić niestandardowe formatowanie wartości przekazany obiekt <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> i <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> metody.  
  
 Zapewnianie niestandardowych reprezentujący wartość obiektu wymaga, należy wykonać następujące czynności:  
  
1.  Definiowanie klasy, która implementuje <xref:System.ICustomFormatter> interfejsu i jeden element członkowski <xref:System.ICustomFormatter.Format%2A> metody.  
  
2.  Definiowanie klasy, która implementuje <xref:System.IFormatProvider> interfejsu i jeden element członkowski <xref:System.IFormatProvider.GetFormat%2A> metody. <xref:System.IFormatProvider.GetFormat%2A> Metoda zwraca wystąpienie usługi <xref:System.ICustomFormatter> implementacji. Często pojedyncza klasa implementuje interfejsy <xref:System.ICustomFormatter> i <xref:System.IFormatProvider>. W takim przypadku klasa firmy `GetFormat` implementacji jest po prostu zwraca instancję samego siebie.  
  
3.  Przekaż <xref:System.IFormatProvider> implementacji jako `provider` argument <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> metody lub porównywalny.  
  
 Metoda .NET Framework będzie używać niestandardowych odpowiadający ustawieniom lokalnym zamiast własnej.  
  
   
  
## Examples  
 Poniższy przykład implementuje <xref:System.ICustomFormatter> umożliwia binarne, ósemkowa i szesnastkowa formatowania wartości całkowitych. W tym przykładzie jedną klasę `IBinaryFormatter`, implementuje interfejsy <xref:System.ICustomFormatter> i <xref:System.IFormatProvider>. Jego <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> Metoda określa, czy `formatType` parametr reprezentuje <xref:System.ICustomFormatter> typu. Jeśli tak jest, `BinaryFormatter` Zwraca wystąpienie; w przeciwnym razie zwraca `null`. Jego <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementacja Określa, czy parametr formatu jest jedną z trzech obsługiwanych ciągów formatu ("B" dla pliku binarnego, "O", aby uzyskać ósemkowym i "H", w przypadku wartości szesnastkowych) i formatuje `arg` parametru odpowiednio. W przeciwnym razie, jeśli `arg` nie `null`, wywoływanych przez nią `arg` parametru <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> wdrożenia, jeśli taki istnieje lub jego bez parametrów `ToString` metody, jeśli jeden nie jest. Jeśli `arg` jest `null`, metoda zwraca <xref:System.String.Empty?displayProperty=nameWithType>.  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 `BinaryFormatter` następnie można zapewniać niestandardowe formatowanie, przekazując `BinaryFormatter` obiektu jako `provider` parametru <xref:System.String.Format%2A> metody, jak w poniższym przykładzie pokazano.  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Środowisko uruchomieniowe języka wspólnego próbuje użyć usługi <see cref="T:System.ICustomFormatter" /> wdrożenia dla każdego elementu formatu w ciągu formatu złożonego. Dlatego należy oczekiwać, że Twoje <see cref="T:System.ICustomFormatter" /> implementacji, zostanie wywołana w celu świadczenia usług formatowania do obiektów lub wartości, które nie jest przeznaczony do obsługi. W takich przypadkach Twoje <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> metody należy wywołać odpowiedniej metody formatowania dla tego obiektu lub wartość.  Istnieją dwa rodzaje z <see cref="T:System.ICustomFormatter" /> implementacje: wewnętrzne i rozszerzenia.  Wewnętrzne implementacje są implementacji, które zapewniają niestandardowe formatowanie dla obiektu zdefiniowanego przez aplikację. W tym przypadku implementacji powinien zawierać następujące czynności:-definicję ciągi formatu zdefiniować sposób formatowania obiektu. Ciągi formatu są opcjonalne. Zazwyczaj ciąg formatu "G" lub "g" definiuje format ogólny (lub najczęściej używane). Jesteś można zdefiniować wszystkie ciągi formatu, które postanowisz bezpłatnie. Możesz mogą także zdecydować, czy są one wielkość liter lub nie.  -Test, aby upewnić się, że typ obiektu jest przekazywane do usługi <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> metodą jest typu zdefiniowanego przez aplikację. Jeśli nie jest, należy wywołać obiektu <see cref="T:System.IFormattable" /> wdrożenia, jeśli istnieje, lub jego <see cref="M:System.Object.ToString" /> metody, jeśli nie jest. Należy być przygotowanym do obsługi tych wywołań metody wywołuje może zgłaszać wyjątki.  -Kod w celu obsługi ciąg formatu wartości null, jeśli Twoja implementacja obsługuje ciągi formatu. Najbardziej typowym podejściem jest aby zastąpić ciąg formatu wartości null przy użyciu specyfikatora formatu ogólnego.  -Kod służący do obsługi dowolnej ciągów formatu obsługiwanych przez wdrożenie.  -Kod służący do obsługi formatów ciągów, które nie obsługują. Najbardziej typowym podejściem jest throw <see cref="T:System.FormatException" />, chociaż można podać formatowanie domyślne.  Implementacje rozszerzenia są implementacji, które zapewniają niestandardowe formatowanie dla typu, który ma już obsługę formatowania. Na przykład można zdefiniować <c>CustomerNumberFormatter</c> , formatuje typem całkowitym, za pomocą łączników w określonych cyfr. W tym przypadku implementacji powinien zawierać następujące czynności:-definicji ciągów formatu, które rozszerzają formatowania obiektu. Te ciągi formatu są wymagane, ale nie może powodować konfliktu z ciągami formatu z istniejącego typu. Na przykład w przypadku rozszerzenia formatowania dla <see cref="T:System.Int32" /> typu, nie należy implementować specyfikatorów formatu "C", "D", "E", "F" i "G", między innymi.  -Test, który typ obiektu jest przekazywane do usługi <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> metody jest typem, której formatowanie rozszerzenie obsługuje. Jeśli nie jest, należy wywołać obiekt <see cref="T:System.IFormattable" /> wdrożenia, jeśli taki istnieje, lub obiekt użytkownika bez parametrów <see cref="M:System.Object.ToString" /> metody, jeśli nie jest. Należy być przygotowanym do obsługi tych wywołań metody wywołuje może zgłaszać wyjątki.  -Kod służący do obsługi dowolnej ciągi formatu, obsługiwane przez Twoje rozszerzenie.  -Kod służący do obsługi dowolnej ciągi formatu nie obsługuje rozszerzenia. Te powinny być przekazywane do typu <see cref="T:System.IFormattable" /> implementacji. Należy być przygotowanym do obsługi tych wywołań metody wywołuje może zgłaszać wyjątki.</para>
    </block>
    <altmember cref="T:System.IFormatProvider" />
  </Docs>
  <Members>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public string Format (string format, object arg, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Format(string format, object arg, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (format As String, arg As Object, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Format(System::String ^ format, System::Object ^ arg, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="abstract member Format : string * obj * IFormatProvider -&gt; string" Usage="iCustomFormatter.Format (format, arg, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Ciąg formatu, zawierający specyfikacje formatowania.</param>
        <param name="arg">Obiekt do sformatowania.</param>
        <param name="formatProvider">Obiekt, że wyczerpania formatowania informacje o bieżącym wystąpieniu.</param>
        <summary>Konwertuje wartość określonego obiektu na reprezentację ciągu równoważnego przy użyciu podanego formatu i informacje o formatowaniu specyficzne dla kultury.</summary>
        <returns>Ciąg reprezentujący wartość <paramref name="arg" />, sformatowany jako określony przez <paramref name="format" /> i <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> jest metodą wywołania zwrotnego. Jest ona wywoływana przez metodę, która obsługuje formatowanie niestandardowe, takie jak <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> lub <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>. Implementacja jest wywoływana jeden raz dla każdego elementu formatu w [ciąg formatu złożonego](~/docs/standard/base-types/composite-formatting.md). Na przykład w następującej instrukcji <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> metoda jest wywoływana trzy razy.  
  
 [!code-csharp[System.ICustomFormatter.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#4)]
 [!code-vb[System.ICustomFormatter.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#4)]  
  
 `arg` Parametru jest obiektem, na liście obiektów, którego liczona od zera pozycja odpowiada indeks elementu formatu.  
  
 `format` Parametru zawiera ciąg formatu, który jest `formatString` składnika elementu formatu. Jeśli nie ma element formatu `formatString` składnika, wartość `format` jest `null`. Jeśli `format` jest `null`, w zależności od typu `arg`, można użyć specyfikacji formatu domyślnego wybranych przez użytkownika.  
  
 `formatProvider` Parametr jest <xref:System.IFormatProvider> implementację, która zapewnia formatowanie `arg`. Typowo, jest wystąpienie usługi <xref:System.ICustomFormatter> implementacji. Jeśli `formatProvider` jest `null`, zignoruj ten parametr.  
  
 Implementacja <xref:System.ICustomFormatter.Format%2A> metody musi zawierać następujące funkcje, więc .NET Framework może zapewnić formatowania, nie obsługują. Jeśli format — metoda nie obsługuje formatu, ustal, czy obiekt formatowana implementuje <xref:System.IFormattable> interfejsu. Jeśli go Wywołaj <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> metody tego interfejsu. W przeciwnym razie Wywołaj domyślną <xref:System.Object.ToString%2A?displayProperty=nameWithType> metoda obiektu źródłowego. Poniższy kod ilustruje ten wzorzec.  
  
 [!code-csharp[System.ICustomFormatter.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#3)]
 [!code-vb[System.ICustomFormatter.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#3)]  
  
   
  
## Examples  
 Poniższy przykład implementuje <xref:System.ICustomFormatter> umożliwia binarne, ósemkowa i szesnastkowa formatowania wartości całkowitych. Jego <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementacja Określa, czy parametr formatu jest jedną z trzech obsługiwanych ciągów formatu ("B" dla pliku binarnego, "O", aby uzyskać ósemkowym i "H", w przypadku wartości szesnastkowych) i formatuje `arg` parametru odpowiednio. W przeciwnym razie, jeśli `arg` nie `null`, wywoływanych przez nią `arg` parametru <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> wdrożenia, jeśli taki istnieje lub jego bez parametrów `ToString` metody, jeśli jeden nie jest. Jeśli `arg` jest `null`, metoda zwraca <xref:System.String.Empty?displayProperty=nameWithType>.  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 `BinaryFormatter` następnie można zapewniać niestandardowe formatowanie, przekazując `BinaryFormatter` obiektu jako `provider` parametru <xref:System.String.Format%2A> metody, jak w poniższym przykładzie pokazano.  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormattable" />
      </Docs>
    </Member>
  </Members>
</Type>