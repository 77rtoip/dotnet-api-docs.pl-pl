<Type Name="ICustomFormatter" FullName="System.ICustomFormatter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6002c7bffa27e626bfd04916c139d411974b86fc" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30744059" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ICustomFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomFormatter" />
  <TypeSignature Language="DocId" Value="T:System.ICustomFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomFormatter" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomFormatter" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Definiuje metodę, która obsługuje niestandardowe formatowanie wartości obiektu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ICustomFormatter> Interfejs zawiera jedną metodę <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>. Jeśli ten interfejs jest implementowany przez typu odwołanie lub wartość <xref:System.ICustomFormatter.Format%2A> metoda zwraca reprezentację ciągu niestandardowym formacie wartość obiektu.  
  
 Zazwyczaj <xref:System.ICustomFormatter> interfejs jest implementowany z <xref:System.IFormatProvider> interfejsu, aby dostosować zachowanie dwóch .NET Framework złożone ciągu formatowania metod obejmujących <xref:System.IFormatProvider> parametru. W szczególności <xref:System.ICustomFormatter> interfejsu zapewniają niestandardowe formatowanie wartości przekazany obiekt <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> i <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> metody.  
  
 Udostępnia reprezentację niestandardowe wartości obiektu wymaga, należy wykonać następujące czynności:  
  
1.  Definiowanie klasy, która implementuje <xref:System.ICustomFormatter> interfejsu i jej jednego członka, <xref:System.ICustomFormatter.Format%2A> metody.  
  
2.  Definiowanie klasy, która implementuje <xref:System.IFormatProvider> interfejsu i jej jednego członka, <xref:System.IFormatProvider.GetFormat%2A> metody. <xref:System.IFormatProvider.GetFormat%2A> Metoda zwraca wystąpienie klasy użytkownika <xref:System.ICustomFormatter> implementacji. Często pojedyncza klasa implementuje zarówno <xref:System.ICustomFormatter> i <xref:System.IFormatProvider>. W takim przypadku klasa w `GetFormat` implementacja zwraca tylko wystąpienia samej siebie.  
  
3.  Przekaż <xref:System.IFormatProvider> implementacji jako `provider` argument <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> metody lub porównywalny.  
  
 Metoda .NET Framework będzie używać zamiast własne niestandardowe formatowanie.  
  
   
  
## Examples  
 Poniższy przykład implementuje <xref:System.ICustomFormatter> umożliwia binarnego, ósemkowe i szesnastkowe formatowania wartości całkowite. W tym przykładzie jedną klasę `IBinaryFormatter`, zarówno implementuje <xref:System.ICustomFormatter> i <xref:System.IFormatProvider>. Jego <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> Metoda określa, czy `formatType` reprezentuje parametr <xref:System.ICustomFormatter> typu. Jeśli tak, `BinaryFormatter` zwraca moduł wystąpienia; w przeciwnym razie zwraca `null`. Jego <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementacji określa, czy parametr formatu jest jednym z trzech ciągów obsługiwanego formatu ("B" dla pliku binarnego, "O" dla ósemkowego i "H" w przypadku wartości szesnastkowych) i formatuje `arg` parametru odpowiednio. W przeciwnym razie, jeśli `arg` nie jest `null`, wywołuje `arg` parametru <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> wykonania, jeśli taki istnieje lub jego bezparametrowy `ToString` metody, jeśli jeden nie. Jeśli `arg` jest `null`, metoda zwraca <xref:System.String.Empty?displayProperty=nameWithType>.  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 `BinaryFormatter` następnie może służyć do zapewnienia niestandardowe formatowanie przez przekazanie `BinaryFormatter` obiekt jako `provider` parametr <xref:System.String.Format%2A> metody, jak przedstawiono na poniższym przykładzie.  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Środowisko uruchomieniowe języka wspólnego próbuje użyć Twojego <see cref="T:System.ICustomFormatter" /> implementacji dla każdej pozycji formatu ciągu formatu złożonego. W związku z tym użytkownik powinien oczekuje, że Twoje <see cref="T:System.ICustomFormatter" /> implementacji zostanie wywołana w celu świadczenia usług formatowania do obiektów lub wartości, które jest nie jest przeznaczone do obsługi. W takich przypadkach z <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> metody należy wywołać odpowiednią metodę formatowania dla tego obiektu lub wartości.  
  
 Istnieją dwa rodzaje z <see cref="T:System.ICustomFormatter" /> implementacje: wewnętrzne i rozszerzenia.  
  
 Implementacje wewnętrzne są implementacje, które zapewniają niestandardowe formatowanie dla obiekt zdefiniowanym przez aplikację. W takim przypadku implementacji powinien są następujące:  
  
-   Definicja ciągi formatów, które definiują formatowanie obiektu. Ciągi formatujące są opcjonalne. Zazwyczaj ciągu formatu "G" lub "g" definiuje format Ogólne (lub najczęściej używane). Jesteś zdefiniowanie dowolne ciągi formatu, które można wybrać. Możesz mogą także zdecydować, czy są one z uwzględnieniem wielkości liter lub bez uwzględniania wielkości liter.  
  
-   Test, aby upewnić się, że typ obiektu przekazanego z <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> metoda jest typu zdefiniowanym przez aplikację. Jeśli nie, należy wywołać obiektu <see cref="T:System.IFormattable" /> wykonania, jeśli istnieje, lub jego <see cref="M:System.Object.ToString" /> metody, jeśli jej nie ma. Należy przygotować do obsługi tych wywołań metody mogą zgłaszać wyjątków.  
  
-   Kod do obsługi ciąg formatu wartości null, jeśli wdrożenie obsługuje ciągi formatu. Najbardziej typowym podejściem jest należy zastąpić ciąg formatu pusty specyfikator formatu Ogólne.  
  
-   Kod wszelkie ciągi formatów obsługiwanych przez implementację programu obsługi.  
  
-   Kod obsługi ciągi formatów, które nie obsługują. Najbardziej typowym podejściem jest throw <see cref="T:System.FormatException" />, chociaż można podać formatowanie domyślne.  
  
 Implementacje rozszerzenia są implementacje, które zapewniają niestandardowe formatowanie dla typu, który ma już formatowanie pomocy technicznej. Na przykład można zdefiniować <c>CustomerNumberFormatter</c> które formatuje typem całkowitym z łączników w określonych cyfr. W takim przypadku implementacji powinien są następujące:  
  
-   Definicja ciągi formatów, które rozszerzają formatowanie obiektu. Te ciągi formatu są wymagane, ale nie może powodować konfliktu z ciągi formatów z istniejącego typu. Na przykład, jeśli rozszerzania formatowania dla <see cref="T:System.Int32" /> typu, nie powinny implementować specyfikatory formatu "C", "D", "E", "F" i "G", między innymi.  
  
-   Test, który typ obiektu przekazanego z <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> metody jest typem, którego formatowanie rozszerzenie obsługuje. Jeśli nie jest, wywołanie obiektu <see cref="T:System.IFormattable" /> wykonania, jeśli istnieje, lub obiekt użytkownika bez parametrów <see cref="M:System.Object.ToString" /> metody, jeśli jej nie ma. Należy przygotować do obsługi tych wywołań metody mogą zgłaszać wyjątków.  
  
-   Kod obsługujący dowolne ciągi formatu, które obsługuje rozszerzenie.  
  
-   Kod obsługujący rozszerzenia nie obsługuje wszystkie ciągi formatu. Te powinny być przekazywane na typ <see cref="T:System.IFormattable" /> implementacji. Należy przygotować do obsługi tych wywołań metody mogą zgłaszać wyjątków.</para>
    </block>
    <altmember cref="T:System.IFormatProvider" />
  </Docs>
  <Members>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public string Format (string format, object arg, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Format(string format, object arg, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (format As String, arg As Object, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Format(System::String ^ format, System::Object ^ arg, IFormatProvider ^ formatProvider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Ciąg formatu zawierający specyfikacje formatowania.</param>
        <param name="arg">Obiekt do formatu.</param>
        <param name="formatProvider">Czy dostaw format informacji na temat bieżącego wystąpienia obiektu.</param>
        <summary>Konwertuje wartość określonego obiektu na równoważne reprezentację przy użyciu określonego formatu i formatowania informacje specyficzne dla kultury.</summary>
        <returns>Reprezentacja ciągu wartości <paramref name="arg" />, podany w formacie określonym przez <paramref name="format" /> i <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> jest to metoda wywołania zwrotnego. Jest ona wywoływana przez metodę, która obsługuje formatowania niestandardowych, takich jak <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> lub <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>. Implementacja jest wywoływana raz dla każdego elementu formatu [ciąg formatu złożonego](~/docs/standard/base-types/composite-formatting.md). Na przykład w następująca instrukcja <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> metoda jest wywoływana trzy razy.  
  
 [!code-csharp[System.ICustomFormatter.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#4)]
 [!code-vb[System.ICustomFormatter.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#4)]  
  
 `arg` Parametr jest obiekt z listy obiektów, którego liczona od zera pozycja odpowiada indeks elementu określonego formatu.  
  
 `format` Parametru zawiera ciąg formatu, który jest `formatString` składnika elementu formatu. Jeśli nie ma elementu formatu `formatString` składnika, wartość `format` jest `null`. Jeśli `format` jest `null`w zależności od typu `arg`, można użyć domyślnego specyfikacji formatu wybranych przez użytkownika.  
  
 `formatProvider` Parametr jest <xref:System.IFormatProvider> implementację, która zawiera formatowanie `arg`. Zazwyczaj jest wystąpienie programu <xref:System.ICustomFormatter> implementacji. Jeśli `formatProvider` jest `null`, ignorowanie tego parametru.  
  
 Implementacji <xref:System.ICustomFormatter.Format%2A> metody musi zawierać następujące funkcje umożliwiające formatowanie nie obsługują podanie programu .NET Framework. Jeśli metodę formatu nie obsługuje formatu, należy określić, czy obiekt jest sformatowany implementuje <xref:System.IFormattable> interfejsu. Jeśli go Wywołaj <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> metody tego interfejsu. W przeciwnym razie Wywołaj domyślny <xref:System.Object.ToString%2A?displayProperty=nameWithType> metoda obiektu źródłowego. Poniższy kod ilustruje tego wzorca.  
  
 [!code-csharp[System.ICustomFormatter.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#3)]
 [!code-vb[System.ICustomFormatter.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#3)]  
  
   
  
## Examples  
 Poniższy przykład implementuje <xref:System.ICustomFormatter> umożliwia binarnego, ósemkowe i szesnastkowe formatowania wartości całkowite. Jego <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementacji określa, czy parametr formatu jest jednym z trzech ciągów obsługiwanego formatu ("B" dla pliku binarnego, "O" dla ósemkowego i "H" w przypadku wartości szesnastkowych) i formatuje `arg` parametru odpowiednio. W przeciwnym razie, jeśli `arg` nie jest `null`, wywołuje `arg` parametru <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> wykonania, jeśli taki istnieje lub jego bezparametrowy `ToString` metody, jeśli jeden nie. Jeśli `arg` jest `null`, metoda zwraca <xref:System.String.Empty?displayProperty=nameWithType>.  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 `BinaryFormatter` następnie może służyć do zapewnienia niestandardowe formatowanie przez przekazanie `BinaryFormatter` obiekt jako `provider` parametr <xref:System.String.Format%2A> metody, jak przedstawiono na poniższym przykładzie.  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormattable" />
      </Docs>
    </Member>
  </Members>
</Type>