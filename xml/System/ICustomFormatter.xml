<Type Name="ICustomFormatter" FullName="System.ICustomFormatter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e446f51bdbd0e5e4d0ecd465daedf974a1513386" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69420389" /></Metadata><TypeSignature Language="C#" Value="public interface ICustomFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomFormatter" />
  <TypeSignature Language="DocId" Value="T:System.ICustomFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomFormatter" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomFormatter" />
  <TypeSignature Language="F#" Value="type ICustomFormatter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Definiuje metodę, która obsługuje niestandardowe formatowanie wartości obiektu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Interfejs zawiera jedną metodę, <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>. <xref:System.ICustomFormatter> Gdy ten interfejs jest implementowany przez odwołanie lub typ wartości, <xref:System.ICustomFormatter.Format%2A> Metoda zwraca reprezentację w postaci ciągu niestandardowego dla wartości obiektu.  
  
 Zazwyczaj interfejs jest implementowany przy użyciu interfejsu <xref:System.IFormatProvider> , aby dostosować zachowanie dwóch .NET Framework metod <xref:System.IFormatProvider> formatowania ciągu złożonego, które zawierają parametr. <xref:System.ICustomFormatter> Interfejs może zapewnić niestandardowe formatowanie wartości obiektu przenoszonego <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> do metod i <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>. <xref:System.ICustomFormatter>  
  
 Dostarczenie niestandardowej reprezentacji wartości obiektu wymaga wykonania następujących czynności:  
  
1.  Zdefiniuj klasę, która implementuje <xref:System.ICustomFormatter> interfejs i jego pojedynczy element członkowski <xref:System.ICustomFormatter.Format%2A> , metodę.  
  
2.  Zdefiniuj klasę, która implementuje <xref:System.IFormatProvider> interfejs i jego pojedynczy element członkowski <xref:System.IFormatProvider.GetFormat%2A> , metodę. Metoda zwraca wystąpienie <xref:System.ICustomFormatter>implementacji. <xref:System.IFormatProvider.GetFormat%2A> Często jedna klasa implementuje zarówno <xref:System.ICustomFormatter> , jak i. <xref:System.IFormatProvider> W takim przypadku `GetFormat` implementacja klasy tylko zwraca wystąpienie samego siebie.  
  
3.  Przekazanie `provider` <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> implementacji jako argumentu metody lub porównywalnej metody. <xref:System.IFormatProvider>  
  
 Metoda .NET Framework będzie używać niestandardowego formatowania zamiast własnych.  
  
   
  
## Examples  
 Poniższy przykład implementuje <xref:System.ICustomFormatter> , aby zezwolić na formatowanie binarne, ósemkowe i szesnastkowe wartości całkowitych. W tym przykładzie jest to jedna Klasa `IBinaryFormatter`, implementująca obie <xref:System.ICustomFormatter> i. <xref:System.IFormatProvider> Metoda określa, `formatType` czy parametr reprezentuje <xref:System.ICustomFormatter> typ. <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> Jeśli tak, `BinaryFormatter` zwraca wystąpienie samego siebie; w przeciwnym razie zwraca `null`. Jego <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementacja określa, czy parametr formatu jest jednym z trzech obsługiwanych ciągów formatu ("B" dla plików binarnych, "o" dla wartości ósemkowej i "H" w przypadku wartości szesnastkowych) i odpowiednio `arg` formatuje parametr. W przeciwnym razie `arg` , jeśli `null`nie, wywołuje `arg` <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementację parametru, jeśli taka istnieje, lub jej `ToString` metodę bez parametrów, jeśli taka nie jest. Jeśli `arg` <xref:System.String.Empty?displayProperty=nameWithType>jest `null`, metoda zwraca.  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 `BinaryFormatter`można go następnie użyć do zapewnienia niestandardowego formatowania, przekazując `BinaryFormatter` obiekt `provider` jako parametr <xref:System.String.Format%2A> metody, jak pokazano w poniższym przykładzie.  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Środowisko uruchomieniowe języka wspólnego próbuje użyć <see cref="T:System.ICustomFormatter" /> implementacji dla każdego elementu formatu w ciągu formatu złożonego. W związku z tym należy się spodziewać, <see cref="T:System.ICustomFormatter" /> że implementacja zostanie wywołana w celu zapewnienia usług formatowania dla obiektów lub wartości, które nie są przeznaczone do obsługi. W takich przypadkach <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> Metoda musi wywoływać odpowiednią metodę formatowania dla tego obiektu lub wartości.  
  
Istnieją dwa rodzaje <see cref="T:System.ICustomFormatter" /> implementacji: wewnętrzne i rozszerzenie.  
  
Implementacje wewnętrzne to implementacje, które zapewniają niestandardowe formatowanie dla obiektu zdefiniowanego przez aplikację. W takim przypadku implementacja powinna obejmować następujące elementy: 
-Definicja ciągów formatu, które definiują formatowanie obiektu. Ciągi formatu są opcjonalne. Zazwyczaj ciąg formatu "G" lub "g" definiuje ogólny (lub najczęściej używany) format. Można jednak zdefiniować wszystkie wybrane ciągi formatu. Możesz również wybrać, czy są rozróżniane wielkości liter, czy nie jest rozróżniana wielkość liter.  
  
-A test, aby upewnić się, że typ obiektu, który <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> został przesłany do metody, jest typem zdefiniowanym przez aplikację. Jeśli tak nie jest, należy wywołać <see cref="T:System.IFormattable" /> implementację obiektu, jeśli taki istnieje, lub jego <see cref="M:System.Object.ToString" /> metodę, jeśli nie. Należy przygotować się do obsługi wszelkich wyjątków, które mogą zgłosić te wywołania metod.  
  
-Kod do obsługi ciągu formatu wartości null, jeśli implementacja obsługuje ciągi formatu. Najbardziej typowym podejściem jest zastąpienie ciągu formatu wartości null przy użyciu specyfikatora formatu ogólnego.  
  
-Kod obsługujący wszystkie ciągi formatu obsługiwane przez implementację.  
  
-Kod obsługujący ciągi formatowania, które nie są obsługiwane. Najbardziej typowym podejściem jest wygenerowanie <see cref="T:System.FormatException" />, chociaż można podać domyślne formatowanie.  
  
Implementacje rozszerzeń to implementacje, które zapewniają niestandardowe formatowanie dla typu, który ma już obsługę formatowania. Można na przykład zdefiniować <c>CustomerNumberFormatter</c> , który sformatuje typ całkowity z łącznikami między określonymi cyframi. W takim przypadku implementacja powinna obejmować następujące elementy: 
-Definicja ciągów formatowania, które poszerzają formatowanie obiektu. Te ciągi formatu są wymagane, ale nie mogą powodować konfliktu z istniejącymi ciągami formatu typu. Na przykład, jeśli rozszerzasz formatowanie dla <see cref="T:System.Int32" /> typu, nie należy implementować specyfikatorów formatu "C", "D", "E", "F" i "G", między innymi.  
  
-Test, że typ obiektu, który został przesłany do <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> metody, jest typem, którego format obsługuje rozszerzenie. Jeśli tak nie jest, wywołaj <see cref="T:System.IFormattable" /> implementację obiektu, jeśli istnieje, lub <see cref="M:System.Object.ToString" /> metodę bez parametrów obiektu, jeśli tak nie jest. Należy przygotować się do obsługi wszelkich wyjątków, które mogą zgłosić te wywołania metod.  
  
-Kod obsługujący wszystkie ciągi formatu obsługiwane przez rozszerzenie.  
  
-Kod obsługujący ciągi formatujące, których rozszerzenie nie obsługuje. Powinny one zostać przesłane do <see cref="T:System.IFormattable" /> implementacji typu. Należy przygotować się do obsługi wszelkich wyjątków, które mogą zgłosić te wywołania metod.</para></block>
    <altmember cref="T:System.IFormatProvider" />
  </Docs>
  <Members>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public string Format (string format, object arg, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Format(string format, object arg, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (format As String, arg As Object, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Format(System::String ^ format, System::Object ^ arg, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="abstract member Format : string * obj * IFormatProvider -&gt; string" Usage="iCustomFormatter.Format (format, arg, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Ciąg formatu zawierający specyfikacje formatowania.</param>
        <param name="arg">Obiekt do sformatowania.</param>
        <param name="formatProvider">Obiekt, który dostarcza informacje o formacie dla bieżącego wystąpienia.</param>
        <summary>Konwertuje wartość określonego obiektu na równoważną reprezentację ciągu przy użyciu określonego formatu i informacji o formatowaniu specyficznym dla kultury.</summary>
        <returns>Ciąg reprezentujący wartość <paramref name="arg" />, sformatowaną w określony przez <paramref name="format" /> i <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>jest metodą wywołania zwrotnego. Jest wywoływana przez metodę, która obsługuje niestandardowe formatowanie, takie jak <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> lub. <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> Implementacja jest wywoływana jednokrotnie dla każdego elementu formatu w [ciągu formatu złożonego](~/docs/standard/base-types/composite-formatting.md). Na przykład w poniższej instrukcji <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> Metoda jest wywoływana trzykrotnie.  
  
 [!code-csharp[System.ICustomFormatter.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#4)]
 [!code-vb[System.ICustomFormatter.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#4)]  
  
 `arg` Parametr jest obiektem na liście obiektów, którego pozycja od zera odpowiada indeksowi określonego formatu elementu.  
  
 Parametr zawiera ciąg formatu, który `formatString` jest składnikiem elementu formatu. `format` Jeśli element formatu nie `formatString` ma składnika, `format` wartość jest `null`. Jeśli `format` jest `null`, w`arg`zależności od typu, może być możliwe użycie domyślnej specyfikacji formatu.  
  
 Parametr jest implementacją, która zapewnia formatowanie dla `arg`. `formatProvider` <xref:System.IFormatProvider> Zwykle jest to wystąpienie <xref:System.ICustomFormatter> implementacji. Jeśli `formatProvider` jest`null`, Zignoruj ten parametr.  
  
 Implementacja <xref:System.ICustomFormatter.Format%2A> metody musi zawierać następujące funkcje, aby .NET Framework może zapewnić formatowanie, które nie jest obsługiwane. Jeśli metoda formatu nie obsługuje formatu, ustal, czy sformatowany obiekt implementuje <xref:System.IFormattable> interfejs. Jeśli tak, wywołaj <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> metodę tego interfejsu. W przeciwnym razie Wywołaj <xref:System.Object.ToString%2A?displayProperty=nameWithType> metodę domyślną obiektu źródłowego. Poniższy kod ilustruje ten wzorzec.  
  
 [!code-csharp[System.ICustomFormatter.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#3)]
 [!code-vb[System.ICustomFormatter.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#3)]  
  
   
  
## Examples  
 Poniższy przykład implementuje <xref:System.ICustomFormatter> , aby zezwolić na formatowanie binarne, ósemkowe i szesnastkowe wartości całkowitych. Jego <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementacja określa, czy parametr formatu jest jednym z trzech obsługiwanych ciągów formatu ("B" dla plików binarnych, "o" dla wartości ósemkowej i "H" w przypadku wartości szesnastkowych) i odpowiednio `arg` formatuje parametr. W przeciwnym razie `arg` , jeśli `null`nie, wywołuje `arg` <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementację parametru, jeśli taka istnieje, lub jej `ToString` metodę bez parametrów, jeśli taka nie jest. Jeśli `arg` <xref:System.String.Empty?displayProperty=nameWithType>jest `null`, metoda zwraca.  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 `BinaryFormatter`można go następnie użyć do zapewnienia niestandardowego formatowania, przekazując `BinaryFormatter` obiekt `provider` jako parametr <xref:System.String.Format%2A> metody, jak pokazano w poniższym przykładzie.  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormattable" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Formatowanie typów w programie .NET</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">Złożone formatowanie</related>
      </Docs>
    </Member>
  </Members>
</Type>
