<Type Name="Single" FullName="System.Single">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ecec70ed2da4f37801148d04a7c55305f82e37a8" /><Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="11/27/2018" /><Meta Name="ms.locfileid" Value="52385917" /></Metadata><TypeSignature Language="C#" Value="public struct Single : IComparable, IComparable&lt;float&gt;, IConvertible, IEquatable&lt;float&gt;, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit float32 extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;float32&gt;, class System.IConvertible, class System.IEquatable`1&lt;float32&gt;, class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.Single" />
  <TypeSignature Language="VB.NET" Value="Public Structure Single&#xA;Implements IComparable, IComparable(Of Single), IConvertible, IEquatable(Of Single), IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public value class Single : IComparable, IComparable&lt;float&gt;, IConvertible, IEquatable&lt;float&gt;, IFormattable" />
  <TypeSignature Language="F#" Value="type single = struct&#xA;    interface IFormattable&#xA;    interface IConvertible" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.Single&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Single&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje liczbę zmiennoprzecinkową pojedynczej precyzji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Single> Typ wartości reprezentuje liczby 32-bitowej pojedynczej precyzji z wartościami, począwszy od ujemna 3, 402823E38 do dodatnią 3, 402823E38, zero dodatnie lub ujemne, <xref:System.Single.PositiveInfinity>, <xref:System.Single.NegativeInfinity>i nie jest liczbą (<xref:System.Single.NaN>). Jest przeznaczony do reprezentowania wartości, które są bardzo duże (takie jak odległości między planety lub galaxies) lub bardzo małe (na przykład molekularne masa substancji w kg) i które często są nieprecyzyjną (na przykład odległość od ziemi w innym systemie słoneczny ). <xref:System.Single> Typ jest zgodny z 60559:1989 IEC (IEEE 754) standardem dla binarnego arytmetyki zmiennoprzecinkowej.  
  
 Ten temat zawiera następujące sekcje:  
  
-   [Reprezentacja liczb zmiennoprzecinkowych i precyzja](#Precision)  
  
-   [Testowanie pod kątem równości](#Equality)  
  
-   [Wartości zmiennoprzecinkowe i wyjątki](#Exceptions)  
  
-   [Konwersja typu i struktura Single](#Conversion)  
  
-   [Funkcje zmiennoprzecinkowe](#Functionality)  
  
 <xref:System.Single?displayProperty=nameWithType> udostępnia metody do porównywania wystąpień tego typu, można przekonwertować wartości wystąpienia na jego reprezentację ciągu, aby przekonwertować ciąg reprezentujący liczbę na wystąpienie tego typu. Aby dowiedzieć się, jak jak kody specyfikacji formatu kontrolować reprezentację ciągu typów wartości, zobacz [typy formatowania](~/docs/standard/base-types/formatting-types.md), [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md), i [niestandardowe liczbowe Ciągi formatujące](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
<a name="Precision"></a>   
## <a name="floating-point-representation-and-precision"></a>Reprezentacja liczb zmiennoprzecinkowych i precyzja  
 <xref:System.Single> — Typ danych przechowuje wartości zmiennoprzecinkowych pojedynczej precyzji w formacie binarnym w 32-bitowych, jak pokazano w poniższej tabeli:  
  
|Część|Bity|  
|----------|----------|  
|Mantysa i mantysy|0-22|  
|Wykładnik|23-30|  
|Znak (0 = wynik dodatni, 1 = ujemna)|31|  
  
 Tak samo jak ułamków dziesiętny są w stanie dokładnie reprezentują niektóre ułamkowe wartości (np. 1/3 lub <xref:System.Math.PI?displayProperty=nameWithType>), binarny ułamki nie są w stanie do reprezentowania niektórych ułamkowe wartości. Na przykład 2: 10, który jest reprezentowany przez dokładne.2 jako ułamek dziesiętny, jest reprezentowane przez.0011111001001100 jako ułamek binarne, przy użyciu wzorca "1100" powtarzające się poza zakresem. W tym przypadku wartość zmiennoprzecinkowa zawiera nieprecyzyjną reprezentacja numer, który reprezentuje. Wykonywanie dodatkowych operacji matematycznych w oryginalnej wartości zmiennoprzecinkowych często zwiększa jego braku dokładności. Na przykład jeśli możesz porównać wynik mnożenia kolumn.3 przez 10 i dodawanie.3 do.3 dziewięć razy, zostanie wyświetlony tego ciągu daje wynik mniej dokładne, ponieważ spowodowałoby to osiem więcej czynności niż mnożenia. Należy pamiętać, że tej różnicy widoczny tylko wtedy, gdy pokazująca dwa <xref:System.Single> wartości, korzystając z oznaczeniem "R" [ciąg standardowego formatu liczb](~/docs/standard/base-types/standard-numeric-format-strings.md), który, jeśli to konieczne, wyświetla wszystkie 9 cyfr precyzji, obsługiwane przez <xref:System.Single> typu.  
  
 [!code-csharp[System.Single.Structure#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/representation1.cs#3)]
 [!code-vb[System.Single.Structure#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/representation1.vb#3)]  
  
 Ponieważ niektóre numery nie może być reprezentowany dokładnie jako ułamkowe wartości binarnych, liczby zmiennoprzecinkowe mogą tylko przybliżony liczb rzeczywistych.  
  
 Wszystkie liczby zmiennoprzecinkowe mają ograniczoną liczbę cyfr znaczących, który określa również, jak dokładnie wartość zmiennoprzecinkowa przybliża liczbą rzeczywistą. A <xref:System.Single> wartość zawiera maksymalnie 7 cyfr dziesiętnych, dokładności, mimo że maksymalnie 9 cyfr są przechowywane wewnętrznie. Oznacza to, że niektóre operacji zmiennoprzecinkowych może nie dokładności, aby zmienić wartość zmiennoprzecinkową. Poniższy przykład definiuje dużą wartość zmiennoprzecinkowa pojedynczej precyzji, a następnie dodanie iloczyn <xref:System.Single.Epsilon?displayProperty=nameWithType> i biliard do niego. Jednak jest zbyt mała, aby modyfikować oryginalnej wartości zmiennoprzecinkowych. Jego najmniej znaczące cyfry jest tysięcznych, najbardziej znaczącą cyfrę w produkcie jest 10<sup>-30</sup>.  
  
 [!code-csharp[System.Single.Structure#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/representation2.cs#4)]
 [!code-vb[System.Single.Structure#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/representation2.vb#4)]  
  
 Dokładność ograniczona liczba zmiennoprzecinkowa ma kilka konsekwencje:  
  
-   Dwóch liczb zmiennoprzecinkowych, wyświetlanych w taki sam dla określonej dokładności nie może być sobie równe, ponieważ różnią się ich najmniej znaczącymi cyframi. W poniższym przykładzie seria liczb są sumowane, a ich suma jest porównywana z ich oczekiwana suma. Chociaż te dwie wartości są wyświetlane w taki sam, wywołanie `Equals` metoda wskazuje, że nie są one.  
  
     [!code-csharp[System.Single.Structure#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/precisionlist3.cs#6)]
     [!code-vb[System.Single.Structure#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/precisionlist3.vb#6)]  
  
     Jeśli zmienisz pozycje formatu w <xref:System.Console.WriteLine%28System.String%2CSystem.Object%2CSystem.Object%29?displayProperty=nameWithType> instrukcji z `{0}` i `{1}` do `{0:R}` i `{1:R}` do wyświetlenia wszystkich cyfr znaczących dla dwóch <xref:System.Single> wartości, jest oczywiste, że dwie wartości są nierówne ponieważ utraty precyzji podczas wykonywania operacji dodawania. W takim przypadku problem można rozwiązać przez wywołanie metody <xref:System.Math.Round%28System.Double%2CSystem.Int32%29?displayProperty=nameWithType> metodę, aby zaokrąglić <xref:System.Single> wartości z dokładnością odpowiednią przed przystąpieniem do wykonywania porównania.  
  
-   Operacji matematycznych lub porównywania, która korzysta z liczba zmiennoprzecinkowa może nie przynieść ten sam wynik Jeśli używany jest liczbą dziesiętną, ponieważ liczba zmiennoprzecinkowa binarny może nie być równa Liczba dziesiętna. Poprzedni przykład ilustruje ten, wyświetlając wynik mnożenia wartości.3 przez 10 i dodawanie.3 do.3 dziewięć razy.  
  
     Jeśli ważne jest, dokładności w operacji numerycznych z wartościami ułamkowymi, użyj <xref:System.Decimal> wpisz zamiast <xref:System.Single> typu. Gdy dokładności w operacji numerycznych z wartości całkowitych poza zakresem <xref:System.Int64> lub <xref:System.UInt64> typów jest ważne, użyj <xref:System.Numerics.BigInteger> typu.  
  
-   Wartość może nie Rundy, jeśli chodzi o liczbę zmiennoprzecinkową. Wartość jest nazywany przesyłania danych, jeśli operacja konwertuje oryginalna liczba zmiennoprzecinkowa innej formy, odwróconą operacją przekształca przekonwertowanego formularza do liczba zmiennoprzecinkowa i końcowego liczba zmiennoprzecinkowa jest taki sam, oryginalnej Liczba zmiennoprzecinkowa. Komunikację dwustronną może zakończyć się niepowodzeniem, ponieważ co najmniej jedną lub więcej cyfr znaczących zostały utracone lub zmienić podczas konwersji. W poniższym przykładzie trzy <xref:System.Single> wartości są konwertowane na ciągi i zapisywane w pliku. Dane wyjściowe pokazują, mimo że wartości wydaje się być taki sam, przywróconą wartościami nie są równe do oryginalnych wartości.  
  
     [!code-csharp[System.Single.Structure#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/precisionlist4a.cs#17)]
     [!code-vb[System.Single.Structure#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/PrecisionList4a.vb#17)]  
  
     W tym przypadku wartości mogą być pomyślnie zwrotnego za pomocą "G9" [standardowy Ciąg formatujący](~/docs/standard/base-types/standard-numeric-format-strings.md) zapewnienie pełnej dokładności <xref:System.Single> wartości, co ilustruje poniższy przykład.  
  
     [!code-csharp[System.Single.Structure#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/PrecisionList5a.cs#18)]
     [!code-vb[System.Single.Structure#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/PrecisionList5a.vb#18)]  
  
-   <xref:System.Single> wartości mają mniejszą dokładnością niż <xref:System.Double> wartości. A <xref:System.Single> wartość, która jest konwertowana na pozornie równoważne <xref:System.Double> często nie jest równa <xref:System.Double> wartość z powodu różnic w dokładności. W poniższym przykładzie, wynik operacji dzielenia identyczne jest przypisany do <xref:System.Double> wartość i <xref:System.Single> wartość. Po <xref:System.Single> wartość jest rzutowany na <xref:System.Double>, porównanie dwóch wartości wskazuje, że są nierówne.  
  
     [!code-csharp[System.Double.Structure#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/precisionlist1.cs#5)]
     [!code-vb[System.Double.Structure#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/precisionlist1.vb#5)]  
  
     Aby uniknąć tego problemu, albo użyć <xref:System.Double> typ danych zamiast <xref:System.Single> typu danych lub użyj <xref:System.Math.Round%2A> metody, aby obie wartości mają tej samej precyzji.  
  
<a name="Equality"></a>   
## <a name="testing-for-equality"></a>Testowanie pod kątem równości  
 Aby były uważane za równe, dwa <xref:System.Single> wartości musi reprezentować identycznych wartości. Jednak ze względu na różnice w precyzja wartości lub ze względu na utratę precyzji według jedną lub obie wartości, wartości zmiennoprzecinkowych, które powinny być identyczne często stają się nierówne z powodu różnic w ich najmniej znaczącymi cyframi. W wyniku wywołania <xref:System.Single.Equals%2A> metodę pozwala ustalić, czy dwie wartości są równe lub wywołania <xref:System.Single.CompareTo%2A> metodę pozwala ustalić relacji między dwiema <xref:System.Single> wartości, często spowodować uzyskanie nieoczekiwanych wyników. Jest to widoczne w poniższym przykładzie, gdzie dwa najwyraźniej równa <xref:System.Single> wartości stają się nierówne, ponieważ pierwsza wartość ma 7 cyfr, a druga wartość 9.  
  
 [!code-csharp[System.Single.Structure#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/comparison1.cs#9)]
 [!code-vb[System.Single.Structure#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/comparison1.vb#9)]  
  
 Obliczone wartości, które należy wykonać różne ścieżki i często, które są zmieniane na różne sposoby udowodnić, że będą traktowane jako różne. W poniższym przykładzie jeden <xref:System.Single> kwadrat jest wartość, a następnie oblicza się pierwiastek kwadratowy można przywrócić oryginalną wartość. Sekundy <xref:System.Single> jest mnożony przez 3.51 i kwadrat przed pierwiastek kwadratowy wynik jest dzielona przez 3.51, aby przywrócić oryginalną wartość. Mimo że te dwie wartości wydaje się być taki sam, wywołanie <xref:System.Single.Equals%28System.Single%29> metoda wskazuje, że nie są równe. Za pomocą ciągu formatu standardowego "G9" do zwrócenia ciąg wynikowy, który zawiera wszystkie znaczące cyfry każdego <xref:System.Single> wartość wskazuje, że druga wartość jest.0000000000001 mniej niż pierwszy.  
  
 [!code-csharp[System.Single.Structure#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/comparison2.cs#10)]
 [!code-vb[System.Single.Structure#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/comparison2.vb#10)]  
  
 W przypadku gdy utratę dokładności może mieć wpływ na wyniku porównania, można użyć następujących technik, zamiast wywoływać metodę <xref:System.Single.Equals%2A> lub <xref:System.Single.CompareTo%2A> metody:  
  
-   Wywołaj <xref:System.Math.Round%2A?displayProperty=nameWithType> metodę, aby upewnić się, że obie wartości mają tej samej precyzji. Poniższy przykład modyfikuje poprzedniego przykładu do tej metody należy użyć, aby dwa ułamkowe wartości są równoważne.  
  
     [!code-csharp[System.Single.Structure#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/comparison3.cs#11)]
     [!code-vb[System.Single.Structure#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/comparison3.vb#11)]  
  
     Należy pamiętać, że problem dokładności nadal mają zastosowanie zaokrąglania wartości punktu środkowego. Aby uzyskać więcej informacji, zobacz <xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29?displayProperty=nameWithType> metody.  
  
-   Testowanie przybliżony równości zamiast równości. Ta metoda wymaga zdefiniowania albo bezwzględnym wartość za pomocą którego dwie wartości mogą się różnić, ale nadal być taka sama lub definiujące względną ilość, za pomocą którego mniejszą wartość można rozdzielić z większą wartością.  
  
    > [!WARNING]
    >  <xref:System.Single.Epsilon?displayProperty=nameWithType> Czasami służy jako bezwzględne miary odległość między dwoma <xref:System.Single> wartości podczas testowania pod kątem równości.  Jednak <xref:System.Single.Epsilon?displayProperty=nameWithType> mierzy najmniejsza możliwa wartość, które mogą być dodawane do lub odjęte od, <xref:System.Single> którego wartość jest równa zero. Dla większości dodatnie i ujemne <xref:System.Single> wartości, wartość <xref:System.Single.Epsilon?displayProperty=nameWithType> jest za mały, aby zostało wykryte. W związku z tym z wyjątkiem wartości, które mają wartość zero, firma Microsoft nie zaleca się jego użycia w testach dla równości.  
  
     W poniższym przykładzie użyto drugie podejście do definiowania `IsApproximatelyEqual` metodę, która sprawdza względne różnicę między dwiema wartościami. Przeciwstawiono sobie także wynik wywołania `IsApproximatelyEqual` metody i <xref:System.Single.Equals%28System.Single%29> metody.  
  
     [!code-csharp[System.Single.Structure#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/comparison4.cs#12)]
     [!code-vb[System.Single.Structure#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/comparison4.vb#12)]  
  
<a name="Exceptions"></a>   
## <a name="floating-point-values-and-exceptions"></a>Wartości zmiennoprzecinkowe i wyjątki  
 Operacji przy użyciu wartości zmiennoprzecinkowe nie zgłaszają wyjątki, w przeciwieństwie do operacji przy użyciu typów całkowitych, które zgłaszają wyjątki w przypadkach niedozwolony operacje, takie jak dzielenie przez zero lub przepełnienie.  Zamiast tego w takich przypadkach wyniku operacji zmiennoprzecinkowej jest zero, nieskończoności dodatniej, minus nieskończonością lub nie jest liczbą (NaN):  
  
-   Jeśli wynik operacji zmiennoprzecinkowej jest zbyt mały dla formatu docelowego, wynik wynosi zero. Taka sytuacja może wystąpić, gdy dwa bardzo małej liczby zmiennoprzecinkowe są mnożone, co ilustruje poniższy przykład.  
  
     [!code-csharp[System.Single.Structure#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/exceptional1.cs#1)]
     [!code-vb[System.Single.Structure#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/exceptional1.vb#1)]  
  
-   Jeśli wielkość wyniku operacji zmiennoprzecinkowej wykracza poza zakres docelowy formatu, wynik operacji jest <xref:System.Single.PositiveInfinity> lub <xref:System.Single.NegativeInfinity>, odpowiednio dla znak wyniku. Wynik operacji, która przepełnienia <xref:System.Single.MaxValue?displayProperty=nameWithType> jest <xref:System.Single.PositiveInfinity>, a wynik operacji, która przepełnienia <xref:System.Single.MinValue?displayProperty=nameWithType> jest <xref:System.Single.NegativeInfinity>, jak pokazano w poniższym przykładzie.  
  
     [!code-csharp[System.Single.Structure#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/exceptional2.cs#2)]
     [!code-vb[System.Single.Structure#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/exceptional2.vb#2)]  
  
     <xref:System.Single.PositiveInfinity> powoduje również z dzielenia przez zero z dzielna dodatnią, i <xref:System.Single.NegativeInfinity> wynika z dzielenia przez zero, przy użyciu ujemnych dzielna.  
  
-   Jeśli operacji zmiennoprzecinkowej jest nieprawidłowa, wynik operacji jest <xref:System.Single.NaN>. Na przykład <xref:System.Single.NaN> wynika z następujących czynności:  
  
    -   Dzielenie przez zero, za pomocą dywidendy o wartości zero. Należy pamiętać, że inne przypadków dzielenia przez zero wynik albo <xref:System.Single.PositiveInfinity> lub <xref:System.Single.NegativeInfinity>.  
  
    -   Wszelkie operacji zmiennoprzecinkowej z nieprawidłowe dane wejściowe. Na przykład próby znalezienia, Zwraca pierwiastek kwadratowy wartości ujemnej <xref:System.Single.NaN>.  
  
    -   Wszelkie działania z nieprawidłowym argumentem, którego wartością jest <xref:System.Single.NaN?displayProperty=nameWithType>.  
  
<a name="Conversion"></a>   
## <a name="type-conversions-and-the-single-structure"></a>Konwersje i struktura Single  
 <xref:System.Single> Struktury nie definiuje żadnych operatorów jawnych lub niejawnych konwersji; zamiast tego konwersje są implementowane przez kompilator.  
  
 Poniższa tabela zawiera listę możliwych konwersji wartości innych pierwotnych typów liczbowych do <xref:System.Single> wartość wskazuje to także, czy konwersja jest zwężająca lub poszerzająca oraz czy wynikowy <xref:System.Single> może być mniejsza dokładność niż Oryginalna wartość.  
  
|Konwersja z|Rozszerzanie zawężanie|Możliwa utrata dokładności|  
|---------------------|-------------------------|--------------------------------|  
|<xref:System.Byte>|Widening|Nie|  
|<xref:System.Decimal>|Widening<br /><br /> Należy zauważyć, że język C# wymaga operatora rzutowania.|Tak. <xref:System.Decimal> obsługuje 29 cyfr dziesiętnych precyzji; <xref:System.Single> obsługuje 9.|  
|<xref:System.Double>|Zwężanie; wartości spoza zakresu są konwertowane na <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> lub <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>.|Tak. <xref:System.Double> obsługuje 17 cyfr dziesiętnych precyzji; <xref:System.Single> obsługuje 9.|  
|<xref:System.Int16>|Widening|Nie|  
|<xref:System.Int32>|Widening|Tak. <xref:System.Int32> obsługuje 10 cyfr dziesiętnych precyzji; <xref:System.Single> obsługuje 9.|  
|<xref:System.Int64>|Widening|Tak. <xref:System.Int64> obsługuje 19 cyfr dziesiętnych precyzji; <xref:System.Single> obsługuje 9.|  
|<xref:System.SByte>|Widening|Nie|  
|<xref:System.UInt16>|Widening|Nie|  
|<xref:System.UInt32>|Widening|Tak. <xref:System.UInt32> obsługuje 10 cyfr dziesiętnych precyzji; <xref:System.Single> obsługuje 9.|  
|<xref:System.UInt64>|Widening|Tak. <xref:System.Int64> obsługuje do 20 cyfr dziesiętnych precyzji; <xref:System.Single> obsługuje 9.|  
  
 Poniższy przykład konwertuje wartość minimalną lub maksymalną innych pierwotnych typów liczbowych do <xref:System.Single> wartości.  
  
 [!code-csharp[System.Single.Structure#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/convert1.cs#20)]
 [!code-vb[System.Single.Structure#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/convert1.vb#20)]  
  
 Ponadto <xref:System.Double> wartości <xref:System.Double.NaN?displayProperty=nameWithType>, <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, i <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> przekonwertować do <xref:System.Single.NaN?displayProperty=nameWithType>, <xref:System.Single.PositiveInfinity?displayProperty=nameWithType>, i <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>, odpowiednio.  
  
 Należy pamiętać, że konwersja wartości niektórych typów liczbowych do <xref:System.Single> wartość może pociągać za sobą utratę dokładności. Tak jak pokazano w przykładzie, utratę dokładności jest możliwe, podczas konwertowania <xref:System.Decimal>, <xref:System.Double>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.UInt32>, i <xref:System.UInt64> wartości <xref:System.Single> wartości.  
  
 Konwersja <xref:System.Single> wartość <xref:System.Double> konwersji rozszerzającej. Konwersja może spowodować utratę dokładności, jeśli <xref:System.Double> typ nie zawiera reprezentację dokładne <xref:System.Single> wartość.  
  
 Konwersja <xref:System.Single> innych niż wartość, która wartość dowolnego typu dane liczbowe pierwotnych <xref:System.Double> jest konwersją zawężającą i wymaga operatora rzutowania (w języku C#) lub metodę konwersji (w języku Visual Basic). Wartości, które wykraczają poza zakres docelowy typ danych, które są definiowane przez typ docelowy `MinValue` i `MaxValue` właściwości, zachowują się, jak pokazano w poniższej tabeli.  
  
|Typ docelowy|Wynik|  
|-----------------|------------|  
|Dowolnego typu całkowitoliczbowego|<xref:System.OverflowException> Wyjątek, jeśli Konwersja odbywa się w kontekście sprawdzanym.<br /><br /> W przypadku konwersji w kontekście niesprawdzanym (domyślnie w języku C#), konwersja powiedzie się, ale wartość przepełnienia.|  
|<xref:System.Decimal>|<xref:System.OverflowException> Wyjątku|  
  
 Ponadto <xref:System.Single.NaN?displayProperty=nameWithType>, <xref:System.Single.PositiveInfinity?displayProperty=nameWithType>, i <xref:System.Single.NegativeInfinity?displayProperty=nameWithType> throw <xref:System.OverflowException> podczas konwersji do liczb całkowitych w kontekście sprawdzanym, ale te przepełnienie wartości po przekonwertowaniu do liczb całkowitych w kontekście niesprawdzanym. Podczas konwersji na <xref:System.Decimal>, zawsze zgłaszał <xref:System.OverflowException>. Podczas konwersji na <xref:System.Double>, konwertują do <xref:System.Double.NaN?displayProperty=nameWithType>, <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, i <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, odpowiednio.  
  
 Należy pamiętać, że utratę dokładności mogą być wynikiem konwersji <xref:System.Single> wartość do innego typu liczbowego. W przypadku konwertowania niecałkowitoliczbowego <xref:System.Single> wartości, dane wyjściowe z przykładu pokazują, części ułamkowych jest utracone podczas <xref:System.Single> wartość jest zaokrąglana (tak jak w języku Visual Basic) lub obcięte (tak jak w języku C#). Podczas konwersji na <xref:System.Decimal> wartości <xref:System.Single> wartość nie może mieć dokładne reprezentacji w docelowy typ danych.  
  
 Poniższy przykład konwertuje liczbę <xref:System.Single> wartości do kilku typów liczbowych. Konwersje występują w kontekście sprawdzanym w języku Visual Basic (ustawienie domyślne), a w języku C# (z powodu [zaznaczone](~/docs/csharp/language-reference/keywords/checked.md) — słowo kluczowe). Dane wyjściowe z przykładu przedstawia wynik konwersji w obu wyewidencjonowany kontekście niesprawdzanym. Konwersje w kontekście niesprawdzanym w języku Visual Basic można przeprowadzać przy kompilacji z `/removeintchecks+` przełącznika kompilatora i języka C#, zakomentowując `checked` instrukcji.  
  
 [!code-csharp[System.Single.Structure#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/convert2.cs#21)]
 [!code-vb[System.Single.Structure#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/convert2.vb#21)]  
  
 Aby uzyskać więcej informacji dotyczących konwersji typów liczbowych, zobacz [Konwersja typów w programie .NET Framework](~/docs/standard/base-types/type-conversion.md) i [tabele konwersji typów](~/docs/standard/base-types/conversion-tables.md).  
  
<a name="Functionality"></a>   
## <a name="floating-point-functionality"></a>Funkcje zmiennoprzecinkowe  
 <xref:System.Single> Struktury i powiązanych typów udostępniają metody służące do wykonywania następujących kategorii operacje:  
  
-   **Porównanie wartości**. Możesz wywołać <xref:System.Single.Equals%2A> metodę, aby określić, czy dwa <xref:System.Single> wartości są równe, lub <xref:System.Single.CompareTo%2A> metodę pozwala ustalić relacji między dwiema wartościami.  
  
     <xref:System.Single> Struktury obsługuje również kompletny zestaw operatorów porównania. Można na przykład, testowanie dla równości i nierówności lub określić, czy jedna wartość jest większa lub równa wartości w innej. Jeśli jeden z operandów jest <xref:System.Double>, <xref:System.Single> wartość jest konwertowana na <xref:System.Double> przed przystąpieniem do wykonywania porównania. Jeśli jeden z operandów jest typu całkowitego, jest konwertowany na <xref:System.Single> przed przystąpieniem do wykonywania porównania. Mimo że są one poszerzeniem konwersji, mogą one spowodować utratę dokładności.  
  
    > [!WARNING]
    >  Z powodu różnic w dokładności dwa <xref:System.Single> wartości, które powinny być równe może okazać się, będą traktowane jako różne, co ma wpływ na wynik porównania. Zobacz [testowanie pod kątem równości](#Equality) sekcji, aby uzyskać więcej informacji na temat porównanie dwóch <xref:System.Single> wartości.  
  
     Można również wywołać <xref:System.Single.IsNaN%2A>, <xref:System.Single.IsInfinity%2A>, <xref:System.Single.IsPositiveInfinity%2A>, i <xref:System.Single.IsNegativeInfinity%2A> metody do testowania tych specjalnych wartości.  
  
-   **Operacje matematyczne**. Typowe operacje arytmetyczne, takie jak dodawanie, odejmowanie, mnożenie i dzielenie są implementowane przez Kompilatory języka i instrukcje wspólny język pośredni (CIL), a nie <xref:System.Single> metody. Jeśli jest to drugi operand w ramach operacji matematycznych <xref:System.Double>, <xref:System.Single> jest konwertowana na <xref:System.Double> przed wykonaniem operacji i wynik operacji jest również <xref:System.Double> wartość. Jeśli to drugi operand jest typem całkowitym, jest konwertowany na <xref:System.Single> przed wykonaniem operacji i wynik operacji jest również <xref:System.Single> wartość.  
  
     Mogą wykonywać inne operacje matematyczne, wywołując `static` (`Shared` w języku Visual Basic) metody <xref:System.Math?displayProperty=nameWithType> klasy. Obejmują one dodatkowe metody, które często używane dla operacji arytmetycznych (takich jak <xref:System.Math.Abs%2A?displayProperty=nameWithType>, <xref:System.Math.Sign%2A?displayProperty=nameWithType>, i <xref:System.Math.Sqrt%2A?displayProperty=nameWithType>), geometrii (takich jak <xref:System.Math.Cos%2A?displayProperty=nameWithType> i <xref:System.Math.Sin%2A?displayProperty=nameWithType>), a calculus (takie jak <xref:System.Math.Log%2A?displayProperty=nameWithType>).  We wszystkich przypadkach <xref:System.Single> wartość jest konwertowana na <xref:System.Double>.  
  
     Możesz też manipulować pojedynczych bitów w <xref:System.Single> wartość. <xref:System.BitConverter.GetBytes%28System.Single%29?displayProperty=nameWithType> Metoda zwróci jego wzorca bitowego w tablicy bajtów.  Przekazując Ta tablica bajtów do <xref:System.BitConverter.ToInt32%2A?displayProperty=nameWithType> metody, można też zachować <xref:System.Single> wartość jego bit wzorca w 32-bitową liczbę całkowitą.  
  
-   **Zaokrąglanie**. Zaokrąglanie jest często używana jako technika w celi zmniejszenia wpływu różnice między wartościami spowodowane przez problemy reprezentacja liczb zmiennoprzecinkowych i precyzja. Można zaokrąglić <xref:System.Single> wartość przez wywołanie metody <xref:System.Math.Round%2A?displayProperty=nameWithType> metody. Jednak należy pamiętać, że <xref:System.Single> wartość jest konwertowana na <xref:System.Double> zanim metoda jest wywoływana i konwersja może pociągać za sobą utratę dokładności.  
  
-   **Formatowanie**. Możesz przekonwertować <xref:System.Single> wartość na jego reprezentację ciągu, wywołując <xref:System.Single.ToString%2A> metody lub za pomocą [formatowania złożonego](~/docs/standard/base-types/composite-formatting.md) funkcji. Aby dowiedzieć się, jak jak ciągi formatu kontrolować reprezentację ciągu wartości zmiennoprzecinkowych, zobacz [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) i [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md) tematów.  
  
-   **Analiza składniowa ciągów**. Możesz przekonwertować ciąg reprezentujący wartość zmiennoprzecinkowa do <xref:System.Single> wartość przez wywołanie metody <xref:System.Single.Parse%2A> lub <xref:System.Single.TryParse%2A> metody. W przypadku niepowodzenia operacji analizy <xref:System.Single.Parse%2A> metoda zgłasza wyjątek, natomiast <xref:System.Single.TryParse%2A> metoda zwraca `false`.  
  
-   **Konwersja typu**. <xref:System.Single> Struktury dostarcza implementację interfejsu jawnego <xref:System.IConvertible> interfejs, który obsługuje konwersję między wszystkie dwa standardowe typy danych dla .NET Framework. Kompilatory języka obsługują także niejawną konwersję wartości dla wszystkich innych standardowych typów liczbowych z wyjątkiem konwersji <xref:System.Double> do <xref:System.Single> wartości. Konwersja wartości dowolnego typu liczbowego standardowe innych niż <xref:System.Double> do <xref:System.Single> jest konwersją rozszerzającą i nie wymaga użycia metody operatora lub konwersji rzutowania.  
  
     Jednak konwersja 32-bitowych i 64-bitowych liczb całkowitych może obejmować utratę dokładności. W poniższej tabeli przedstawiono różnice w dokładności dla 32-bitowy, 64-bitowych i <xref:System.Double> typów:  
  
    |Typ|Precyzja maksymalna (w cyfr dziesiętnych)|Precyzja wewnętrzne (w cyfr dziesiętnych)|  
    |----------|---------------------------------------------|----------------------------------------------|  
    |<xref:System.Double>|15|17|  
    |<xref:System.Int32> i <xref:System.UInt32>|10|10|  
    |<xref:System.Int64> i <xref:System.UInt64>|19|19|  
    |<xref:System.Single>|7|9|  
  
     Najczęściej wpływa na problem dokładności <xref:System.Single> wartości, które są konwertowane na <xref:System.Double> wartości. W poniższym przykładzie dwie wartości generowane przez identyczne podziału operacji są nierówne, ponieważ jedna z wartości pojedynczej precyzji wartość zmiennoprzecinkową, która jest konwertowana na <xref:System.Double>.  
  
     [!code-csharp[System.Single.Structure#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/precisionlist1.cs#5)]
     [!code-vb[System.Single.Structure#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/precisionlist1.vb#5)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Wszystkie elementy członkowskie tego typu są bezpieczne wątkowo. Elementy członkowskie, które na pierwszy rzut oka modyfikują stan wystąpienia, w rzeczywistości zwracają nowe wystąpienie zainicjowane z nową wartością. Podobnie jak w przypadku innych typów odczytywanie i zapisywanie w udostępnionej zmiennej, która zawiera wystąpienie tego typu, musi być chronione przez blokadę w celu zagwarantowania bezpieczeństwa wątków.</threadsafe>
    <altmember cref="T:System.Decimal" />
    <altmember cref="T:System.Double" />
  </Docs>
  <Members>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Porównuje to wystąpienie określonego obiektu lub do innego <see cref="T:System.Single" /> wystąpienie i zwraca liczbę całkowitą, która wskazuje, czy wartość tego wystąpienia jest mniejsza, równa lub większa niż wartość określonego obiektu lub innych <see cref="T:System.Single" /> wystąpienia.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="single.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt do porównania lub <see langword="null" />.</param>
        <summary>Porównuje to wystąpienie określonego obiektu i zwraca liczbę całkowitą, która wskazuje, czy wartość tego wystąpienia jest mniejsza, równa lub większa niż wartość określonego obiektu.</summary>
        <returns>Liczba ze znakiem wskazująca względne wartości tego wystąpienia i <paramref name="value" />.  
  
 <list type="table"><listheader><term> Wartość zwracana 
 </term><description> Opis 
 </description></listheader><item><term> Mniej niż zero 
 </term><description> To wystąpienie jest mniejsza niż <paramref name="value" />.  
  
—lub— 
To wystąpienie nie jest liczbą (<see cref="F:System.Single.NaN" />) i <paramref name="value" /> jest liczbą.  
  
 </description></item><item><term> Zero 
 </term><description> To wystąpienie jest równe <paramref name="value" />.  
  
—lub— 
Są to wystąpienie i jego wartość nie jest liczbą (<see cref="F:System.Single.NaN" />), <see cref="F:System.Single.PositiveInfinity" />, lub <see cref="F:System.Single.NegativeInfinity" />.  
  
 </description></item><item><term> Większe od zera 
 </term><description> To wystąpienie jest większa niż <paramref name="value" />.  
  
—lub— 
To wystąpienie jest liczbą i <paramref name="value" /> nie jest liczbą (<see cref="F:System.Single.NaN" />).  
  
—lub— 
 <paramref name="value" /> jest <see langword="null" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `value` Parametr musi być `null` lub wystąpienie <xref:System.Single>; w przeciwnym razie jest zgłaszany wyjątek. Dowolne wystąpienie <xref:System.Single>, niezależnie od jej wartość jest uznawany za większy niż `null`.  
  
 Wartości muszą być identyczne, aby były uważane za równe. Szczególnie w przypadku, gdy różne wartości zmiennoprzecinkowe są zależne od wiele operacji matematycznych, jest typowe dla utratę dokładności i ich wartości jako niemal identyczne, z wyjątkiem ich najmniej znaczącymi cyframi. W związku z tym wartość zwracaną przez <xref:System.Single.CompareTo%2A> metoda może wydawać się Zaskakujące w czasie. Na przykład mnożenie przez określoną wartość następuje dzielenie przez tę samą wartość powinno to dawać oryginalnej wartości, ale w poniższym przykładzie, obliczona wartość okaże się nim powinien być większy niż oryginalna wartość. Pokazywanie wszystkich cyfr znaczących dla dwóch wartości za pomocą "R" [standardowy Ciąg formatujący](~/docs/standard/base-types/standard-numeric-format-strings.md) wskazuje, że obliczona wartość różni się od oryginalnej wartości najmniej znaczącymi cyframi. Aby uzyskać informacje na temat obsługi takie porównania, zobacz sekcję Uwagi <xref:System.Single.Equals%28System.Single%29> metody.  
  
 [!code-csharp[System.Single.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.compareto/cs/compareto3.cs#2)]
 [!code-vb[System.Single.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.compareto/vb/compareto3.vb#2)]  
  
 Ta metoda jest implementowana w celu obsługi <xref:System.IComparable> interfejsu. Należy zauważyć, że, mimo że <xref:System.Single.NaN> nie jest uważany za równy innemu <xref:System.Single.NaN> (nawet sam), <xref:System.IComparable> wymaga interfejsu `A.CompareTo(A)` zwrócić zero.  
  
## <a name="precision-in-comparisons"></a>Precyzja w porównaniach  
 Dokładność liczb zmiennoprzecinkowych poza udokumentowaną dokładnością jest określona dla implementacji oraz wersji systemu .NET Framework. W związku z tym porównanie dwóch określonych liczb może ulec zmianie między wersji systemu .NET Framework, ponieważ precyzja przedstawienia numeracji wewnętrznej może ulec zmianie.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje <xref:System.Single.CompareTo%2A> metody.  
  
 [!code-cpp[System.Single#16](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#16)]
 [!code-csharp[System.Single#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#16)]
 [!code-vb[System.Single#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="value" /> nie jest <see cref="T:System.Single" />.</exception>
        <altmember cref="M:System.Single.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.CompareTo(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(float value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : single -&gt; int&#xA;override this.CompareTo : single -&gt; int" Usage="single.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">Liczba zmiennoprzecinkowa pojedynczej precyzji do porównania.</param>
        <summary>Porównuje to wystąpienie podanej liczbie zmiennoprzecinkowej pojedynczej precyzji i zwraca liczbę całkowitą, która wskazuje, czy wartość tego wystąpienia jest mniejsza, równa lub większa niż wartość określona liczba zmiennoprzecinkowa pojedynczej precyzji.</summary>
        <returns>Liczba ze znakiem wskazująca względne wartości tego wystąpienia i <paramref name="value" />.  
  
 <list type="table"><listheader><term> Wartość zwracana 
 </term><description> Opis 
 </description></listheader><item><term> Mniej niż zero 
 </term><description> To wystąpienie jest mniejsza niż <paramref name="value" />.  
  
—lub— 
To wystąpienie nie jest liczbą (<see cref="F:System.Single.NaN" />) i <paramref name="value" /> jest liczbą.  
  
 </description></item><item><term> Zero 
 </term><description> To wystąpienie jest równe <paramref name="value" />.  
  
—lub— 
Zarówno tego wystąpienia i <paramref name="value" /> niebędące liczbą (<see cref="F:System.Single.NaN" />), <see cref="F:System.Single.PositiveInfinity" />, lub <see cref="F:System.Single.NegativeInfinity" />.  
  
 </description></item><item><term> Większe od zera 
 </term><description> To wystąpienie jest większa niż <paramref name="value" />.  
  
—lub— 
To wystąpienie jest liczbą i <paramref name="value" /> nie jest liczbą (<see cref="F:System.Single.NaN" />).  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartości muszą być identyczne, aby były uważane za równe. To częsty problem w różne wartości zmiennoprzecinkowe tracić dokładność i stają się niemal identyczne, z wyjątkiem ich najmniej znaczącymi cyframi, szczególnie w przypadku, gdy wartości są zależne od wiele operacji matematycznych. W związku z tym wartość zwracaną przez <xref:System.Single.CompareTo%2A> metody czasami może wydawać się Zaskakujące. Na przykład mnożenie przez dowolną wartość następuje dzielenie przez tę samą wartość powinna dawać oryginalną wartość. Jednak w poniższym przykładzie, obliczona wartość okazuje się być większa niż oryginalna wartość. Pokazywanie wszystkich cyfr znaczących dla dwóch wartości za pomocą "R" [standardowy Ciąg formatujący](~/docs/standard/base-types/standard-numeric-format-strings.md) wskazuje, że obliczona wartość różni się od oryginalnej wartości najmniej znaczącymi cyframi. Aby uzyskać informacje na temat obsługi takie porównania, zobacz sekcję Uwagi <xref:System.Single.Equals%28System.Single%29> metody.  
  
 [!code-csharp[System.Single.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.compareto/cs/compareto2.cs#1)]
 [!code-vb[System.Single.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.compareto/vb/compareto2.vb#1)]  
  
 Ta metoda implementuje <xref:System.IComparable%601?displayProperty=nameWithType> interfejs i wykonuje nieco lepiej niż <xref:System.Single.CompareTo%2A?displayProperty=nameWithType> metody, ponieważ nie trzeba przekonwertować `value` parametr do obiektu.  
  
 Należy zauważyć, że chociaż obiekt, którego wartość jest <xref:System.Single.NaN> nie jest uważany za równy do innego obiektu, którego wartością jest <xref:System.Single.NaN> (nawet sam), <xref:System.IComparable%601> wymaga interfejsu `A.CompareTo(A)` zwrócić zero.  
  
## <a name="widening-conversions"></a>Poszerzenie konwersji  
 W zależności od języka programowania, może być możliwe do kodu <xref:System.Single.CompareTo%2A> metodę, której typ parametru ma mniejszą liczbę bitów (jest mniejsza) niż typ wystąpienia. To jest możliwe, ponieważ w niektórych językach programowania jest wykonywana niejawna konwersja poszerzająca, która powoduje reprezentowanie parametru jako typu z taką samą liczbą bitów jak liczba bitów wystąpienia.  
  
 Załóżmy, że typem wystąpienia jest <xref:System.Single> i typ parametru jest <xref:System.Int32>. Kompilator Microsoft C# generuje instrukcje do reprezentowania wartości jako parametr <xref:System.Single> obiektu, a następnie generuje <xref:System.Single.CompareTo%28System.Single%29?displayProperty=nameWithType> metody, która porównuje wartości wystąpienia i poszerzył reprezentacja parametru.  
  
 Sprawdź dokumentację języka programowania, aby określić, czy jego kompilator wykonuje niejawne poszerzenia konwersji dla typów liczbowych. Aby uzyskać więcej informacji, zobacz [tabele konwersji typów](~/docs/standard/base-types/conversion-tables.md) tematu.  
  
## <a name="precision-in-comparisons"></a>Precyzja w porównaniach  
 Dokładność liczb zmiennoprzecinkowych poza udokumentowaną dokładnością jest określona dla implementacji oraz wersji systemu .NET Framework. W związku z tym porównanie dwóch określonych liczb może ulec zmianie między wersji systemu .NET Framework, ponieważ precyzja przedstawienia numeracji wewnętrznej może ulec zmianie.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje rodzajowymi i nierodzajowymi wersje <xref:System.Single.CompareTo%2A> metody dla kilku typów wartości i odwołań.  
  
 [!code-cpp[T.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/T.CompareTo/CPP/cat.cpp#1)]
 [!code-csharp[T.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/T.CompareTo/CS/cat.cs#1)]
 [!code-vb[T.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/T.CompareTo/VB/cat.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Epsilon">
      <MemberSignature Language="C#" Value="public const float Epsilon = 1.401298E-45;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 Epsilon = float32(1.401298E-45)" />
      <MemberSignature Language="DocId" Value="F:System.Single.Epsilon" />
      <MemberSignature Language="VB.NET" Value="Public Const Epsilon As Single  = 1.401298E-45" />
      <MemberSignature Language="C++ CLI" Value="public: float Epsilon = 1.401298E-45;" />
      <MemberSignature Language="F#" Value="val mutable Epsilon : single" Usage="System.single.Epsilon" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>1.401298E-45</MemberValue>
      <Docs>
        <summary>Reprezentuje najmniejsza dodatnia <see cref="T:System.Single" /> wartość, która jest większa niż zero. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Single.Epsilon> właściwość odzwierciedla najmniejsza dodatnia <xref:System.Single> wartość, która ma istotne znaczenie w operacji numerycznych lub porównań po wartości <xref:System.Single> wystąpienia jest równa zero. Na przykład w poniższym kodzie, które zero i <xref:System.Single.Epsilon> są uznawane za nierówne wartości, natomiast zero i pół wartość <xref:System.Single.Epsilon> są uważane za równe.  
  
 [!code-csharp[System.Single.Epsilon#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Epsilon/cs/epsilon.cs#5)]
 [!code-vb[System.Single.Epsilon#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Epsilon/vb/epsilon.vb#5)]  
  
 Bardziej precyzyjne formacie zmiennoprzecinkowych pojedynczej precyzji składa się z logowania, mantysy 23-bitowe lub mantysę i wykładnik 8-bitowych. Jak pokazano na poniższym przykładzie, zero ma wykładnik-126 i mantysy 0. <xref:System.Single.Epsilon> ma wykładnik-126 i mantysy 1. Oznacza to, że <xref:System.Single.Epsilon?displayProperty=nameWithType> jest najmniejsza dodatnia <xref:System.Single> wartość, która jest większa od zera i reprezentuje najniższą możliwą wartość i najmniejsza możliwa przyrostu dla <xref:System.Single> którego wykładnik jest-126.  
  
 [!code-csharp[System.Single.Epsilon#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Epsilon/cs/epsilon1.cs#6)]
 [!code-vb[System.Single.Epsilon#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Epsilon/vb/epsilon1.vb#6)]  
  
 Jednak <xref:System.Single.Epsilon> właściwość nie jest miarą ogólne dokładność <xref:System.Single> wpisz; ma zastosowanie tylko do <xref:System.Single> wystąpień, które mają wartość zero.  
  
> [!NOTE]
>  Wartość <xref:System.Single.Epsilon> właściwość nie jest odpowiednikiem epsilon maszyny, co stanowi górną granicę względny błąd spowodowane zaokrąglanie w operacjach arytmetycznych zmiennoprzecinkowych.  
  
 Wartość tej stałej jest 1.4e-45.  
  
 Dwa najwyraźniej równoważne liczb zmiennoprzecinkowe mogą nie są sobie równe z powodu różnic w ich najmniej znaczącymi cyframi. Na przykład, wyrażenie języka C#, `(float)1/3 == (float)0.33333`, nie są sobie równe ponieważ operacji dzielenia po lewej stronie ma maksymalna dokładność, gdy stała po prawej stronie jest precyzyjna tylko do określonych cyfr. Jeśli utworzysz niestandardowego algorytmu, który określa, czy dwóch liczb zmiennoprzecinkowych może być uważane za równe, należy użyć wartości, która jest większa niż <xref:System.Single.Epsilon> stałą do ustalenia dopuszczalne marginesu bezwzględne różnicy dla dwóch wartości uważane za równe. (Zazwyczaj jest wielokrotnie większa niż margines różnicy <xref:System.Single.Epsilon>.)  
  
## <a name="platform-notes"></a>Uwagi dotyczące platformy  
 W przypadku systemów ARM, wartość <xref:System.Single.Epsilon> stałej jest zbyt mały, aby zostało wykryte, więc go jest równa zero. Możesz zdefiniować wartość epsilon alternatywne, która jest równa 1.175494351E-38 zamiast tego.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca wartość wskazującą, czy dwóch wystąpień z <see cref="T:System.Single" /> reprezentują tę samą wartość.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="single.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Obiekt, który ma zostać porównany z tym wystąpieniem.</param>
        <summary>Zwraca wartość wskazującą, czy to wystąpienie jest równe podanemu obiektowi.</summary>
        <returns><see langword="true" /> Jeśli <paramref name="obj" /> jest wystąpieniem <see cref="T:System.Single" /> i równości wartość tego wystąpienia; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Single.Equals%2A> Metoda powinna służyć ostrożnie, ponieważ dwie wartości najwyraźniej równoważne mogą być różne ze względu na zróżnicowane precyzja dwóch wartości. Poniższy przykład informuje, że <xref:System.Single> wartość.3333 i <xref:System.Single> zwrócone w wyniku dzielenia 1 przez 3 są nierówne.  
  
 [!code-csharp[System.Single.Epsilon#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Epsilon/cs/SingleEquals_25051.cs#3)]
 [!code-vb[System.Single.Epsilon#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Epsilon/vb/SingleEquals_25051.vb#3)]  
  
 Zamiast porównanie dla równości, jeden zalecana technika polega na definiowanie dopuszczalne margines różnicę między dwiema wartościami (np. jedna z wartości 01%). Jeśli wartość bezwzględna różnicę między dwiema wartościami jest mniejsza niż lub równe margines, różnica będzie prawdopodobnie z powodu różnic w dokładności i w związku z tym, wartości są mogą być równe. W poniższym przykładzie użyto tej techniki, aby porównać.33333 i 1/3, dwa <xref:System.Single> wartości, które zostały odnalezione w poprzednim przykładzie kodu, będą traktowane jako różne.  
  
 [!code-csharp[System.Single.Epsilon#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Epsilon/cs/SingleEquals_25051.cs#4)]
 [!code-vb[System.Single.Epsilon#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Epsilon/vb/SingleEquals_25051.vb#4)]  
  
 W tym przypadku wartości są równe.  
  
> [!NOTE]
>  Ponieważ <xref:System.Single.Epsilon> definiuje wyrażenie wartości minimalnej dodatnią wartość, której zakres jest bliski zero, musi być większa niż margines różnica <xref:System.Single.Epsilon>. Zazwyczaj jest wielokrotnie większa niż <xref:System.Single.Epsilon>.  
  
 Dokładność liczb zmiennoprzecinkowych poza udokumentowaną dokładnością jest określona dla implementacji oraz wersji systemu .NET Framework. W związku z tym porównanie dwóch określonych liczb może ulec zmianie między wersji systemu .NET Framework, ponieważ precyzja przedstawienia numeracji wewnętrznej może ulec zmianie.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje <xref:System.Single.Equals%2A> metody.  
  
 [!code-cpp[System.Single#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#17)]
 [!code-csharp[System.Single#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#17)]
 [!code-vb[System.Single#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#17)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>Przeciążeń z późnym może uwzględnić widocznej różnicy w zachowaniu dwóch <see cref="M:System.Single.Equals(System.Object)" /> przeciążenia metody. Jeśli niejawna konwersja między <paramref name="obj" /> argumentu i <see cref="T:System.Single" /> jest zdefiniowana i argument nie jest typu jako <see cref="T:System.Object" />, kompilatory mogą wykonać niejawnej konwersji i wywołanie <see cref="M:System.Single.Equals(System.Single)" /> metody. W przeciwnym razie wywołują <see cref="M:System.Single.Equals(System.Object)" /> metody, która zawsze zwraca <see langword="false" /> jeśli jego <paramref name="obj" /> argument nie jest <see cref="T:System.Single" /> wartość. Poniższy przykład ilustruje różnicy w zachowaniu przeciążenia dwie metody. W przypadku wszystkich pierwotnych typów liczbowych, z wyjątkiem <see cref="T:System.Double" /> w języku Visual Basic, jak i z wyjątkiem <see cref="T:System.Decimal" /> i <see cref="T:System.Double" /> w języku C#, funkcja zwraca pierwszy porównania <see langword="true" /> ponieważ kompilator automatycznie wykonuje konwersję rozszerzającą i wywołania <see cref="M:System.Single.Equals(System.Single)" /> metody, natomiast drugi porównania zwraca <see langword="false" /> ponieważ kompilator wywołuje <see cref="M:System.Single.Equals(System.Object)" /> metody.  
  
[! code-csharp[System.Single.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.equals/cs/equalsoverl.cs#2)] [! kodu vb[System.Single.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.equals/vb/equalsoverl.vb#2)]</para></block>
        <altmember cref="M:System.Single.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (float obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(float32 obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.Equals(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (obj As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(float obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : single -&gt; bool" Usage="single.Equals obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="obj">Obiekt, który ma zostać porównany z tym wystąpieniem.</param>
        <summary>Zwraca wartość wskazującą czy to wystąpienie i określonego <see cref="T:System.Single" /> obiektu reprezentują tę samą wartość.</summary>
        <returns><see langword="true" /> Jeśli <paramref name="obj" /> jest taki sam jak to wystąpienie w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda implementuje <xref:System.IEquatable%601?displayProperty=nameWithType> interfejs i wykonuje nieco lepiej niż <xref:System.Single.Equals%2A> , ponieważ nie trzeba przekonwertować `obj` parametr do obiektu.  
  
## <a name="widening-conversions"></a>Poszerzenie konwersji  
 W zależności od języka programowania, może być możliwe do kodu <xref:System.Single.Equals%2A> metodę, której typ parametru ma mniejszą liczbę bitów (jest mniejsza) niż typ wystąpienia. To jest możliwe, ponieważ w niektórych językach programowania jest wykonywana niejawna konwersja poszerzająca, która powoduje reprezentowanie parametru jako typu z taką samą liczbą bitów jak liczba bitów wystąpienia.  
  
 Załóżmy, że typem wystąpienia jest <xref:System.Single> i typ parametru jest <xref:System.Int32>. Kompilator Microsoft C# generuje instrukcje do reprezentowania wartości jako parametr <xref:System.Single> obiektu, a następnie generuje <xref:System.Single.Equals%28System.Single%29?displayProperty=nameWithType> metody, która porównuje wartości wystąpienia i poszerzył reprezentacja parametru.  
  
 Sprawdź dokumentację języka programowania, aby określić, czy jego kompilator wykonuje niejawne poszerzenia konwersji dla typów liczbowych. Aby uzyskać więcej informacji, zobacz [tabele konwersji typów](~/docs/standard/base-types/conversion-tables.md) tematu.  
  
## <a name="precision-in-comparisons"></a>Precyzja w porównaniach  
 <xref:System.Single.Equals%2A> Metoda powinna służyć ostrożnie, ponieważ dwie wartości najwyraźniej równoważne mogą być różne, ze względu na zróżnicowane precyzja dwóch wartości. Poniższy przykład informuje, że <xref:System.Single> wartość.3333 i <xref:System.Single> zwrócone w wyniku dzielenia 1 przez 3 są nierówne.  
  
 [!code-csharp[System.Single.Epsilon#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Epsilon/cs/SingleEquals_25051.cs#1)]
 [!code-vb[System.Single.Epsilon#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Epsilon/vb/SingleEquals_25051.vb#1)]  
  
 Technika jeden porównania, która pozwala uniknąć problemów związanych z porównania dla równości obejmuje zdefiniowanie dopuszczalne margines różnicę między dwiema wartościami (np. 01% jedna z wartości). Jeśli wartość bezwzględna różnicę między dwiema wartościami jest mniejsza niż lub równe margines, różnica polega na mogą być wynikiem różnice w dokładności i w związku z tym, wartości są mogą być równe. W poniższym przykładzie użyto tej techniki, aby porównać.33333 i 1/3, które są dwa <xref:System.Single> wartości, które zostały odnalezione w poprzednim przykładzie kodu, będą traktowane jako różne.  
  
 [!code-csharp[System.Single.Epsilon#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Epsilon/cs/SingleEquals_25051.cs#2)]
 [!code-vb[System.Single.Epsilon#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Epsilon/vb/SingleEquals_25051.vb#2)]  
  
 W tym przypadku wartości są równe.  
  
> [!NOTE]
>  Ponieważ <xref:System.Single.Epsilon> definiuje wyrażenie wartości minimalnej dodatnią wartość, której zakres jest bliski zero, musi być większa niż margines różnica <xref:System.Single.Epsilon>. Zazwyczaj jest wielokrotnie większa niż <xref:System.Single.Epsilon>. W związku z tym zaleca się, że nie używasz <xref:System.Double.Epsilon> podczas porównywania <xref:System.Double> wartości dla równości.  
  
 Drugi technika, która pozwala uniknąć problemów związanych z porównanie dla równości polega na porównanie różnicy dwóch liczb zmiennoprzecinkowych za pomocą niektórych wartości bezwzględnej. Jeśli różnica jest mniejsza niż lub równy tej wartości bezwzględne, liczby są równe. Jeśli jest on większy, liczby nie są równe. Jednym ze sposobów, w tym celu jest arbitralnie wybierz wartości bezwzględnej. Jest to jednak problematyczne, ponieważ dopuszczalne margines różnica zależy od wielkości <xref:System.Single> wartości. Druga metoda wykorzystuje funkcję projektowania w formacie zmiennoprzecinkowych: różnica między składnikami tego mantysy liczbami w postaci liczby całkowitej dwa różne wartości zmiennoprzecinkowe wskazuje liczba możliwych wartości zmiennoprzecinkowych, która oddziela dwie wartości. Na przykład różnica między 0,0 a <xref:System.Single.Epsilon> wynosi 1, ponieważ <xref:System.Single.Epsilon> jest najmniejszą wartość stałego podczas pracy z <xref:System.Single> którego wartość jest równa zero. W poniższym przykładzie użyto tej techniki, aby porównać.33333 i 1/3, które są dwa <xref:System.Double> wartości poprzednim przykładzie kodu za pomocą <xref:System.Single.Equals%28System.Single%29> znaleziono metody będą traktowane jako różne. Należy zauważyć, że w przykładzie użyto <xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType> i <xref:System.BitConverter.ToInt32%2A?displayProperty=nameWithType> metod można przekonwertować wartości zmiennoprzecinkowych pojedynczej precyzji na jego reprezentację liczby całkowitej.  
  
 [!code-csharp[System.Single.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.equals/cs/equalsabs1.cs#1)]
 [!code-vb[System.Single.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.equals/vb/equalsabs1.vb#1)]  
  
 Dokładność liczb zmiennoprzecinkowych poza udokumentowaną dokładnością jest określona dla implementacji oraz wersji systemu .NET Framework. W związku z tym porównanie dwóch liczb może wygenerować różne wyniki w zależności od wersji programu .NET Framework, ponieważ precyzja numeracji wewnętrznej może ulec zmianie.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>Przeciążeń z późnym może uwzględnić widocznej różnicy w zachowaniu dwóch <see cref="M:System.Single.Equals(System.Object)" /> przeciążenia metody. Jeśli niejawna konwersja między <paramref name="obj" /> argumentu i <see cref="T:System.Single" /> jest zdefiniowana i argument nie jest typu jako <see cref="T:System.Object" />, kompilatory mogą wykonać niejawnej konwersji i wywołanie <see cref="M:System.Single.Equals(System.Single)" /> metody. W przeciwnym razie wywołują <see cref="M:System.Single.Equals(System.Object)" /> metody, która zawsze zwraca <see langword="false" /> jeśli jego <paramref name="obj" /> argument nie jest <see cref="T:System.Single" /> wartość. Poniższy przykład ilustruje różnicy w zachowaniu przeciążenia dwie metody. W przypadku wszystkich pierwotnych typów liczbowych, z wyjątkiem <see cref="T:System.Double" /> w języku Visual Basic, jak i z wyjątkiem <see cref="T:System.Decimal" /> i <see cref="T:System.Double" /> w języku C#, funkcja zwraca pierwszy porównania <see langword="true" /> ponieważ kompilator automatycznie wykonuje konwersję rozszerzającą i wywołania <see cref="M:System.Single.Equals(System.Single)" /> metody, natomiast drugi porównania zwraca <see langword="false" /> ponieważ kompilator wywołuje <see cref="M:System.Single.Equals(System.Object)" /> metody.  
  
[! code-csharp[System.Single.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.equals/cs/equalsoverl.cs#2)] [! kodu vb[System.Single.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.equals/vb/equalsoverl.vb#2)]</para></block>
        <altmember cref="M:System.Single.Equals(System.Object)" />
        <altmember cref="Overload:System.Single.CompareTo" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="single.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca kod skrótu dla tego wystąpienia.</summary>
        <returns>Kod skrótu 32-bitowej liczby całkowitej ze znakiem.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberSignature Language="F#" Value="abstract member GetTypeCode : unit -&gt; TypeCode&#xA;override this.GetTypeCode : unit -&gt; TypeCode" Usage="single.GetTypeCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca <see cref="T:System.TypeCode" /> dla typu wartości <see cref="T:System.Single" />.</summary>
        <returns>Stała wyliczeniowa <see cref="F:System.TypeCode.Single" />.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.TypeCode" />
      </Docs>
    </Member>
    <Member MemberName="IsFinite">
      <MemberSignature Language="C#" Value="public static bool IsFinite (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsFinite(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsFinite(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsFinite (f As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsFinite(float f);" />
      <MemberSignature Language="F#" Value="static member IsFinite : single -&gt; bool" Usage="System.single.IsFinite f" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInfinity">
      <MemberSignature Language="C#" Value="public static bool IsInfinity (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsInfinity(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsInfinity(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsInfinity (f As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsInfinity(float f);" />
      <MemberSignature Language="F#" Value="static member IsInfinity : single -&gt; bool" Usage="System.single.IsInfinity f" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f">Liczba zmiennoprzecinkowa pojedynczej precyzji.</param>
        <summary>Zwraca wartość wskazującą, czy określona liczba jest dodatnia lub ujemna nieskończoność.</summary>
        <returns><see langword="true" /> Jeśli <paramref name="f" /> daje w wyniku <see cref="F:System.Single.PositiveInfinity" /> lub <see cref="F:System.Single.NegativeInfinity" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwróć operacji zmiennoprzecinkowych <xref:System.Single.PositiveInfinity> lub <xref:System.Single.NegativeInfinity> celu sygnalizowania, że warunek przepełnienia.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje <xref:System.Single.IsInfinity%2A> metody.  
  
 [!code-cpp[System.Single#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#11)]
 [!code-csharp[System.Single#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#11)]
 [!code-vb[System.Single#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.IsPositiveInfinity(System.Single)" />
        <altmember cref="M:System.Single.IsNegativeInfinity(System.Single)" />
        <altmember cref="F:System.Single.PositiveInfinity" />
        <altmember cref="F:System.Single.NegativeInfinity" />
      </Docs>
    </Member>
    <Member MemberName="IsNaN">
      <MemberSignature Language="C#" Value="public static bool IsNaN (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNaN(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsNaN(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNaN (f As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNaN(float f);" />
      <MemberSignature Language="F#" Value="static member IsNaN : single -&gt; bool" Usage="System.single.IsNaN f" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f">Liczba zmiennoprzecinkowa pojedynczej precyzji.</param>
        <summary>Zwraca wartość wskazującą, czy określona wartość nie jest liczbą (<see cref="F:System.Single.NaN" />).</summary>
        <returns><see langword="true" /> Jeśli <paramref name="f" /> daje w wyniku nie jest liczbą (<see cref="F:System.Single.NaN" />); w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwróć operacji zmiennoprzecinkowych <xref:System.Single.NaN> do sygnalizowania, że wynik operacji jest niezdefiniowana. Na przykład dzielenia 0.0, 0.0 skutkuje <xref:System.Single.NaN>.  
  
> [!NOTE]
>  <xref:System.Single.IsNaN%2A> Zwraca `false` Jeśli <xref:System.Single> wartość jest albo <xref:System.Single.PositiveInfinity> lub <xref:System.Single.NegativeInfinity>. Aby sprawdzić, czy te wartości, należy użyć <xref:System.Single.IsInfinity%2A>, <xref:System.Single.IsPositiveInfinity%2A>, i <xref:System.Single.IsNegativeInfinity%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje <xref:System.Single.IsNaN%2A> metody.  
  
 [!code-cpp[System.Single#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#8)]
 [!code-csharp[System.Single#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#8)]
 [!code-vb[System.Single#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Single.NaN" />
      </Docs>
    </Member>
    <Member MemberName="IsNegative">
      <MemberSignature Language="C#" Value="public static bool IsNegative (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNegative(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsNegative(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNegative (f As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNegative(float f);" />
      <MemberSignature Language="F#" Value="static member IsNegative : single -&gt; bool" Usage="System.single.IsNegative f" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNegativeInfinity">
      <MemberSignature Language="C#" Value="public static bool IsNegativeInfinity (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNegativeInfinity(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsNegativeInfinity(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNegativeInfinity (f As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNegativeInfinity(float f);" />
      <MemberSignature Language="F#" Value="static member IsNegativeInfinity : single -&gt; bool" Usage="System.single.IsNegativeInfinity f" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f">Liczba zmiennoprzecinkowa pojedynczej precyzji.</param>
        <summary>Zwraca wartość wskazującą, czy określona liczba jest ujemna nieskończoność.</summary>
        <returns><see langword="true" /> Jeśli <paramref name="f" /> daje w wyniku <see cref="F:System.Single.NegativeInfinity" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwróć operacji zmiennoprzecinkowych <xref:System.Single.NegativeInfinity> celu sygnalizowania, że warunek przepełnienia.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje <xref:System.Single.IsNegativeInfinity%2A> metody.  
  
 [!code-cpp[System.Single#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#13)]
 [!code-csharp[System.Single#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#13)]
 [!code-vb[System.Single#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#13)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.IsInfinity(System.Single)" />
        <altmember cref="M:System.Single.IsPositiveInfinity(System.Single)" />
        <altmember cref="F:System.Single.PositiveInfinity" />
        <altmember cref="F:System.Single.NegativeInfinity" />
      </Docs>
    </Member>
    <Member MemberName="IsNormal">
      <MemberSignature Language="C#" Value="public static bool IsNormal (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNormal(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsNormal(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNormal (f As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNormal(float f);" />
      <MemberSignature Language="F#" Value="static member IsNormal : single -&gt; bool" Usage="System.single.IsNormal f" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPositiveInfinity">
      <MemberSignature Language="C#" Value="public static bool IsPositiveInfinity (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPositiveInfinity(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsPositiveInfinity(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPositiveInfinity (f As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPositiveInfinity(float f);" />
      <MemberSignature Language="F#" Value="static member IsPositiveInfinity : single -&gt; bool" Usage="System.single.IsPositiveInfinity f" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f">Liczba zmiennoprzecinkowa pojedynczej precyzji.</param>
        <summary>Zwraca wartość wskazującą, czy określona liczba daje w wyniku nieskończoności dodatniej.</summary>
        <returns><see langword="true" /> Jeśli <paramref name="f" /> daje w wyniku <see cref="F:System.Single.PositiveInfinity" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwróć operacji zmiennoprzecinkowych <xref:System.Single.PositiveInfinity> celu sygnalizowania, że warunek przepełnienia.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje <xref:System.Single.IsPositiveInfinity%2A> metody.  
  
 [!code-cpp[System.Single#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#12)]
 [!code-csharp[System.Single#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#12)]
 [!code-vb[System.Single#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.IsInfinity(System.Single)" />
        <altmember cref="M:System.Single.IsNegativeInfinity(System.Single)" />
        <altmember cref="F:System.Single.PositiveInfinity" />
        <altmember cref="F:System.Single.NegativeInfinity" />
      </Docs>
    </Member>
    <Member MemberName="IsSubnormal">
      <MemberSignature Language="C#" Value="public static bool IsSubnormal (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSubnormal(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsSubnormal(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSubnormal (f As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSubnormal(float f);" />
      <MemberSignature Language="F#" Value="static member IsSubnormal : single -&gt; bool" Usage="System.single.IsSubnormal f" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public const float MaxValue = 3.402823E+38;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 MaxValue = float32(3.402823E+38)" />
      <MemberSignature Language="DocId" Value="F:System.Single.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Const MaxValue As Single  = 3.402823E+38" />
      <MemberSignature Language="C++ CLI" Value="public: float MaxValue = 3.402823E+38;" />
      <MemberSignature Language="F#" Value="val mutable MaxValue : single" Usage="System.single.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>3.402823E+38</MemberValue>
      <Docs>
        <summary>Reprezentuje największa możliwa wartość z <see cref="T:System.Single" />. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość tej stałej jest dodatnia 3.40282347e + 38.  
  
 Wynik operacji, która przekracza <xref:System.Single.MaxValue?displayProperty=nameWithType> jest <xref:System.Single.PositiveInfinity?displayProperty=nameWithType>. W poniższym przykładzie <xref:System.Single.PositiveInfinity?displayProperty=nameWithType> wynika z operacji dodawania, mnożenie i potęgowania, gdy wynik przekracza rozmiar <xref:System.Single.MaxValue?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Single.MaxValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.maxvalue/cs/maxvalueex.cs#1)]
 [!code-vb[System.Single.MaxValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.maxvalue/vb/maxvalueex.vb#1)]  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje <xref:System.Single.MaxValue> stałej.  
  
 [!code-cpp[System.Single#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#4)]
 [!code-csharp[System.Single#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#4)]
 [!code-vb[System.Single#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Single.MinValue" />
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public const float MinValue = -3.402823E+38;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 MinValue = float32(-3.402823E+38)" />
      <MemberSignature Language="DocId" Value="F:System.Single.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Const MinValue As Single  = -3.402823E+38" />
      <MemberSignature Language="C++ CLI" Value="public: float MinValue = -3.402823E+38;" />
      <MemberSignature Language="F#" Value="val mutable MinValue : single" Usage="System.single.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>-3.402823E+38</MemberValue>
      <Docs>
        <summary>Reprezentuje najniższą możliwą wartość elementu <see cref="T:System.Single" />. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość tej stałej jest 3, 402823E38 ujemna.  
  
 Wynik operacji, która jest mniejsza niż <xref:System.Single.MinValue?displayProperty=nameWithType> jest <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>. W poniższym przykładzie <xref:System.Single.NegativeInfinity?displayProperty=nameWithType> wynika z operacji odejmowania i mnożenia, gdy wynik jest mniejsza niż <xref:System.Single.MinValue?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Single.MinValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.minvalue/cs/minvalueex.cs#1)]
 [!code-vb[System.Single.MinValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.minvalue/vb/minvalueex.vb#1)]  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje <xref:System.Single.MinValue> stałej.  
  
 [!code-cpp[System.Single#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#5)]
 [!code-csharp[System.Single#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#5)]
 [!code-vb[System.Single#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Single.MaxValue" />
      </Docs>
    </Member>
    <Member MemberName="NaN">
      <MemberSignature Language="C#" Value="public const float NaN = NaN;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 NaN = float32(NaN)" />
      <MemberSignature Language="DocId" Value="F:System.Single.NaN" />
      <MemberSignature Language="VB.NET" Value="Public Const NaN As Single  = NaN" />
      <MemberSignature Language="C++ CLI" Value="public: float NaN = NaN;" />
      <MemberSignature Language="F#" Value="val mutable NaN : single" Usage="System.single.NaN" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>NaN</MemberValue>
      <Docs>
        <summary>Reprezentuje nie jest liczbą (<see langword="NaN" />). To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda lub operator zwraca <xref:System.Single.NaN> gdy wynik operacji jest niezdefiniowany. Na przykład jest wynik dzielenia 0 przez zero <xref:System.Single.NaN>, jak pokazano w poniższym przykładzie. (Ale należy pamiętać, że dzielenia liczby różna od zera przez zero zwraca albo <xref:System.Single.PositiveInfinity> lub <xref:System.Single.NegativeInfinity>, w zależności od jej znaku dzielnik.)  
  
 [!code-csharp[System.Single.NaN#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.nan/cs/nan1.cs#1)]
 [!code-vb[System.Single.NaN#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.nan/vb/nan1.vb#1)]  
  
 Ponadto, wywołanie metody z <xref:System.Single.NaN> wartość lub operacji na <xref:System.Single.NaN> zwraca wartość <xref:System.Single.NaN>, jak pokazano w poniższym przykładzie.  
  
 [!code-csharp[System.Single.NaN#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.nan/cs/nan1.cs#2)]
 [!code-vb[System.Single.NaN#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.nan/vb/nan1.vb#2)]  
  
 Użyj <xref:System.Single.IsNaN%2A> metodę pozwala ustalić, czy wartość nie jest liczbą. Ogólnie rzecz biorąc <xref:System.Single> operatory nie mogą służyć do porównywania <xref:System.Single.NaN?displayProperty=nameWithType> z innymi <xref:System.Single> wartości, mimo że metody porównania (takie jak <xref:System.Single.Equals%2A> i <xref:System.Single.CompareTo%2A>) może. Poniższy przykład ilustruje różnice w zachowaniu między <xref:System.Single> operatorów porównania i metody.  
  
 [!code-csharp[System.Single.NaN#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.nan/cs/single.nan4.cs#4)]
 [!code-vb[System.Single.NaN#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.nan/vb/single.nan4.vb#4)]  
  
   
  
## Examples  
 W poniższym przykładzie pokazano <xref:System.Single.NaN> stałej.  
  
 [!code-cpp[System.Single#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#7)]
 [!code-csharp[System.Single#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#7)]
 [!code-vb[System.Single#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.IsNaN(System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="NegativeInfinity">
      <MemberSignature Language="C#" Value="public const float NegativeInfinity = -Infinity;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 NegativeInfinity = float32(-Infinity)" />
      <MemberSignature Language="DocId" Value="F:System.Single.NegativeInfinity" />
      <MemberSignature Language="VB.NET" Value="Public Const NegativeInfinity As Single  = -Infinity" />
      <MemberSignature Language="C++ CLI" Value="public: float NegativeInfinity = -Infinity;" />
      <MemberSignature Language="F#" Value="val mutable NegativeInfinity : single" Usage="System.single.NegativeInfinity" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>-Infinity</MemberValue>
      <Docs>
        <summary>Reprezentuje minus nieskończoność. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość tej stałej jest wynik dzielenia na liczbę ujemną przez zero.  
  
 Tej stałej jest zwracany, jeśli wynikiem operacji jest mniejszy niż <xref:System.Single.MinValue>.  
  
 Użyj <xref:System.Single.IsNegativeInfinity%2A> do określenia, czy wartość jest ujemna nieskończoność.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje <xref:System.Single.NegativeInfinity> stałej.  
  
 [!code-cpp[System.Single#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#9)]
 [!code-csharp[System.Single#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#9)]
 [!code-vb[System.Single#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.IsNegativeInfinity(System.Single)" />
        <altmember cref="M:System.Single.IsInfinity(System.Single)" />
        <altmember cref="F:System.Single.PositiveInfinity" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (float left, float right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(float32 left, float32 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.op_Equality(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As Single, right As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(float left, float right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : single * single -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="left">Pierwsza wartość do porównania.</param>
        <param name="right">Druga wartość do porównania.</param>
        <summary>Zwraca wartość wskazującą, czy dwa określone <see cref="T:System.Single" /> wartości są równe.</summary>
        <returns><see langword="true" /> Jeśli <paramref name="left" /> i <paramref name="right" /> są równe; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Single.op_Equality%2A> Metoda definiuje operator równości dla <xref:System.Single> wartości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (float left, float right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(float32 left, float32 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.op_GreaterThan(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As Single, right As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(float left, float right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : single * single -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="left">Pierwsza wartość do porównania.</param>
        <param name="right">Druga wartość do porównania.</param>
        <summary>Zwraca wartość wskazującą, czy określony <see cref="T:System.Single" /> wartość jest większa niż inny określony <see cref="T:System.Single" /> wartość.</summary>
        <returns><see langword="true" /> Jeśli <paramref name="left" /> jest większa niż <paramref name="right" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Single.op_GreaterThan%2A> Metoda definiuje działania większą-niż operator dla <xref:System.Single> wartości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (float left, float right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(float32 left, float32 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.op_GreaterThanOrEqual(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As Single, right As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(float left, float right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : single * single -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="left">Pierwsza wartość do porównania.</param>
        <param name="right">Druga wartość do porównania.</param>
        <summary>Zwraca wartość wskazującą, czy określony <see cref="T:System.Single" /> wartość jest większa niż lub równy innemu określony <see cref="T:System.Single" /> wartość.</summary>
        <returns><see langword="true" /> Jeśli <paramref name="left" /> jest większa niż lub równa <paramref name="right" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Single.op_GreaterThanOrEqual%2A> Metoda definiuje operacji operator większe niż — lub równości dla <xref:System.Single> wartości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (float left, float right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(float32 left, float32 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.op_Inequality(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As Single, right As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(float left, float right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : single * single -&gt; bool" Usage="System.single.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="left">Pierwsza wartość do porównania.</param>
        <param name="right">Druga wartość do porównania.</param>
        <summary>Zwraca wartość wskazującą, czy dwa określone <see cref="T:System.Single" /> wartości nie są równe.</summary>
        <returns><see langword="true" /> Jeśli <paramref name="left" /> i <paramref name="right" /> nie są równe; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Single.op_Inequality%2A> Metoda definiuje operator nierówności dla <xref:System.Single> wartości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (float left, float right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(float32 left, float32 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.op_LessThan(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As Single, right As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(float left, float right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : single * single -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="left">Pierwsza wartość do porównania.</param>
        <param name="right">Druga wartość do porównania.</param>
        <summary>Zwraca wartość wskazującą, czy określony <see cref="T:System.Single" /> wartość jest mniejszy niż inny określony <see cref="T:System.Single" /> wartość.</summary>
        <returns><see langword="true" /> Jeśli <paramref name="left" /> jest mniejsza niż <paramref name="right" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Single.op_LessThan%2A> Metoda definiuje operacji mniej-niż operator dla <xref:System.Single> wartości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (float left, float right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(float32 left, float32 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.op_LessThanOrEqual(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As Single, right As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(float left, float right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : single * single -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="left">Pierwsza wartość do porównania.</param>
        <param name="right">Druga wartość do porównania.</param>
        <summary>Zwraca wartość wskazującą, czy określony <see cref="T:System.Single" /> wartość jest mniejsza niż lub równe na inny określony <see cref="T:System.Single" /> wartość.</summary>
        <returns><see langword="true" /> Jeśli <paramref name="left" /> jest mniejsza niż lub równa <paramref name="right" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Single.op_LessThanOrEqual%2A> Metoda definiuje operacji operator mniej niż — lub równości dla <xref:System.Single> wartości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje ciąg reprezentujący liczbę na odpowiadającą mu liczbę zmiennoprzecinkową pojedynczej precyzji.</summary>
        <altmember cref="Overload:System.Single.TryParse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static float Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Parse(System::String ^ s);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; single" Usage="System.single.Parse s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg zawierający liczbę, którą należy przekształcić.</param>
        <summary>Konwertuje ciąg reprezentujący liczbę na odpowiadającą mu liczbę zmiennoprzecinkową pojedynczej precyzji.</summary>
        <returns>Liczba zmiennoprzecinkowa pojedynczej precyzji odpowiednikiem wartości liczbowej lub symbolowi określonemu w parametrze <paramref name="s" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `s` Parametru może zawierać bieżącej kultury <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, lub ciąg w postaci:  
  
 [*ws*] [*logowania*] [*cyfry całkowite*[*,*]]*cyfry całkowite*[*.* [*cyfr ułamkowych, jaka*]] [e [*logowania*]*wykładniczego cyfr*] [*ws*]  
  
 Elementy w nawiasach kwadratowych ([ i ]) są opcjonalne. W tabeli poniżej opisano każdy element.  
  
|Element|Opis|  
|-------------|-----------------|  
|*ws*|Ciąg znaków odstępu.|  
|*sign*|Symbol znaku ujemnego lub symbol znaku dodatniego. Prawidłowe są określane przez <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType> i <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType> właściwości bieżącej kultury. Wiodący znak może służyć.|  
|*cyfry całkowite*|Ciąg cyfr od 0 do 9, które określają jej część całkowitą. Działa z *cyfry całkowite* można podzielić na partycje przy użyciu symbolu separatora grup. Na przykład w niektórych kulturach przecinek (,) oddziela grupy wartości tysięcznych. *Cyfry całkowite* element może być nieobecny, jeśli ciąg zawiera *cyfr ułamkowych, jaka* elementu.|  
|*,*|Symbol separatora tysięcy specyficzny dla kultury.|  
|*.*|Symbol dziesiętny specyficzny dla kultury.|  
|*cyfry ułamkowe*|Ciąg cyfr od 0 do 9, które określają część ułamkową liczby.|  
|E|Znak „e” lub „E”, który wskazuje, że wartość jest reprezentowana w zapisie wykładniczym (naukowym).|  
|*wykładniczy cyfr*|Ciąg cyfr od 0 do 9, które określają wykładnik potęgi.|  
  
 `s` Parametr jest interpretowany przy użyciu kombinacji <xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType> i <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flag. Oznacza to, że biały znak i separatory tysięczne są dozwolone, ale symbole walut nie. Umożliwia jawne zdefiniowanie elementów (np. symbole walut, tysięcy separatory i biały znak), mogą być obecne w `s`, użyj <xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> przeciążenie metody.  
  
 `s` Parametru jest analizowany przy użyciu informacje o formatowaniu w <xref:System.Globalization.NumberFormatInfo> inicjowanym dla bieżącej kultury systemu. Aby uzyskać więcej informacji, zobacz <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>. Aby przeanalizować ciąg przy użyciu informacje o formatowaniu określonej kultury, należy użyć <xref:System.Single.Parse%28System.String%2CSystem.IFormatProvider%29> lub <xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> metody.  
  
 Normalnie Jeśli przekażesz <xref:System.Single.Parse%2A> typu ciąg, który jest tworzony przez wywołanie metody <xref:System.Single.ToString%2A> metody, oryginalnym <xref:System.Single> zwracana jest wartość. Jednak ze względu na utratę precyzji wartości mogą być różne.  
  
 Jeśli separator w `s` parametru podczas operacji analizowania i odpowiednia Waluta lub liczba dziesiętna oraz separatory grupy są takie same, operacja analizy zakłada, że separator jest separator dziesiętny, a nie grupą separator. Aby uzyskać więcej informacji dotyczących separatorów, zobacz <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, i <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Single.Parse%28System.String%29> metodę, aby przekonwertować tablicę ciągów odpowiednik <xref:System.Single> wartości.  
  
 [!code-csharp[System.Single.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Parse/CS/parse1.cs#2)]
 [!code-vb[System.Single.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Parse/VB/parse1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException"><paramref name="s" /> reprezentuje liczby w prawidłowym formacie.</exception>
        <exception cref="T:System.OverflowException"><paramref name="s" /> reprezentuje liczbę mniej niż <see cref="F:System.Single.MinValue" /> lub większa niż <see cref="F:System.Single.MaxValue" />.</exception>
        <altmember cref="M:System.Single.ToString" />
        <related type="Article" href="~/docs/standard/base-types/parsing-numeric.md">Analizowanie ciągów liczbowych na platformie .NET</related>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static float Parse (string s, System.Globalization.NumberStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Parse(string s, valuetype System.Globalization.NumberStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.Parse(System.String,System.Globalization.NumberStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, style As NumberStyles) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Parse(System::String ^ s, System::Globalization::NumberStyles style);" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Globalization.NumberStyles -&gt; single" Usage="System.single.Parse (s, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg zawierający liczbę, którą należy przekształcić.</param>
        <param name="style">Bitowa kombinacja wartości wyliczenia wskazująca elementy stylu, które mogą być obecne w <paramref name="s" />. To typowa wartość do określenia <see cref="F:System.Globalization.NumberStyles.Float" /> w połączeniu z <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
        <summary>Konwertuje ciąg reprezentujący numer w stylu określonego na odpowiadającą mu pojedynczej precyzji liczbę zmiennoprzecinkową.</summary>
        <returns>Liczba zmiennoprzecinkowa pojedynczej precyzji, która odpowiada wartości liczbowej lub symbolowi określonemu w parametrze <paramref name="s" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `style` Parametru definiuje elementy stylu (takie jak białe znaki, tysięcy separatory i symbole walut) dozwolone w `s` parametr jako warunek powodzenia operacji analizy. Musi być kombinacją flag bitowych z <xref:System.Globalization.NumberStyles> wyliczenia. Następujące <xref:System.Globalization.NumberStyles> elementy członkowskie nie są obsługiwane:  
  
-   <xref:System.Globalization.NumberStyles.AllowHexSpecifier>  
  
-   <xref:System.Globalization.NumberStyles.HexNumber>  
  
 `s` Parametru może zawierać bieżącej kultury <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>. W zależności od wartości `style`, może to również przybrać formę:  
  
 [*ws*] [*$*] [*logowania*] [*cyfry całkowite*[*,*]] *cyfry całkowite*[*.* [*cyfr ułamkowych, jaka*]] [E [*logowania*]*wykładniczego cyfr*] [*ws*]  
  
 Elementy w nawiasach kwadratowych ([ i ]) są opcjonalne. W tabeli poniżej opisano każdy element.  
  
 *ws*  
 Ciąg znaków spacji. Odstęp może występować na początku `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flagę która może znajdować się na końcu `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flagi.  
  
 $  
 Symbol waluty specyficzny dla kultury. Jego pozycja w ciągu jest definiowana przez <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> i <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> właściwości bieżącej kultury. Symbol waluty bieżącej kultury może znajdować się w `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flagi.  
  
 *sign*  
 Symbol znaku minus (-) lub znaku dodatniego (+). Znak może występować na początku `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flagę która może znajdować się na końcu `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flagi. Nawiasy mogą być używane w `s` do wskazania wartości ujemnej, jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flagi.  
  
 *cyfry całkowite*  
 Ciąg cyfr od 0 do 9, które określają jej część całkowitą. *Cyfry całkowite* element może być nieobecny, jeśli ciąg zawiera *cyfr ułamkowych, jaka* elementu.  
  
 ,  
 Separator grupy specyficzny dla kultury. Symbol separatora grupy bieżącej kultury może znajdować się w `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flagi  
  
 .  
 Symbol dziesiętny specyficzny dla kultury. Symbol separatora dziesiętnego bieżącej kultury może znajdować się w `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flagi.  
  
 *cyfry ułamkowe*  
 Ciąg cyfr od 0 do 9, które określają część ułamkową liczby. Cyfry ułamkowe mogą pojawiać się w `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flagi.  
  
 E  
 Znak „e” lub „E”, który wskazuje, że wartość jest reprezentowana w zapisie wykładniczym (naukowym). `value` Parametr może reprezentować liczbę w zapisie wykładniczym, jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flagi.  
  
 *wykładniczy cyfr*  
 Ciąg cyfr od 0 do 9, które określają wykładnik potęgi.  
  
> [!NOTE]
> Wszystkie znaki (U + 0000) NUL kończącego w `s` są ignorowane przez operacji analizowania, bez względu na wartość `style` argumentu.

 Ciąg zawierający tylko cyfry (co odpowiada <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> styl) zawsze przeanalizowany pomyślnie. Pozostałe <xref:System.Globalization.NumberStyles?displayProperty=nameWithType> składowych kontroluje elementy, które mogą być obecne, ale nie muszą być obecne w ciągu wejściowym. Poniższa tabela wskazuje, jak poszczególne <xref:System.Globalization.NumberStyles> flagi wpływają na elementy, które mogą być obecne w `s`.  
  
|Wartość wyliczenia NumberStyles|Elementy dozwolone w parametrze `s` poza cyframi|  
|------------------------|-----------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|*Cyfry całkowite* tylko element.|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|Punkt dziesiętny (*.*) i *cyfr ułamkowych, jaka* elementów.|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|Znak „e” lub znak „E”, co oznacza zapis wykładniczy. Ta flaga samodzielnie obsługuje wartości w postaci *cyfr*E*cyfr*; dodatkowe flagi są potrzebne, aby pomyślnie przeanalizować ciągi zawierające takie elementy jak dodatnie lub ujemne znaki i symbole przecinka dziesiętnego.|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|*Ws* element na początku `s`.|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|*Ws* element na końcu `s`.|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|*Logowania* element na początku `s`.|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|*Logowania* element na końcu `s`.|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|*Logowania* elementu w postaci nawiasów obejmujących wartość liczbową.|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|Element separatora tysięcznego (,).|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|Element określający walutę ($).|  
|<xref:System.Globalization.NumberStyles.Currency>|Wszystkie elementy. Jednak `s` nie może reprezentować liczby szesnastkowej ani liczby w zapisie wykładniczym.|  
|<xref:System.Globalization.NumberStyles.Float>|*Ws* element na początku lub końcu `s`, *logowania* na początku `s`oraz symbol separatora dziesiętnego (.). `s` Parametru można również użyć notacji wykładniczej.|  
|<xref:System.Globalization.NumberStyles.Number>|`ws`, `sign`, Tysięcy separatora (,) i elementy przecinka dziesiętnego (.).|  
|<xref:System.Globalization.NumberStyles.Any>|Wszystkie elementy. Jednak `s` nie może reprezentować liczby szesnastkowej.|  
  
 Niektóre przykłady `s` są "100", "-123,456,789", "123.45e + 6", "+ 500", "5e2", "3.1416", "600", "-. 123" i "-nieskończoności".  
  
 `s` Parametru jest analizowany przy użyciu informacje o formatowaniu w <xref:System.Globalization.NumberFormatInfo> inicjowanym dla bieżącej kultury systemu. Aby określić kulturę, której informacje o formatowaniu jest używany dla udanej operacji, należy wywołać <xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> przeciążenia.  
  
 Normalnie Jeśli przekażesz <xref:System.Single.Parse%2A> typu ciąg, który jest tworzony przez wywołanie metody <xref:System.Single.ToString%2A> metody, oryginalnym <xref:System.Single> zwracana jest wartość. Jednak ze względu na utratę precyzji wartości mogą być różne.  
  
 Jeśli separator w `s` parametru podczas operacji analizowania i odpowiednia Waluta lub liczba dziesiętna oraz separatory grupy są takie same, operacja analizy zakłada, że separator jest separator dziesiętny, a nie grupą separator. Aby uzyskać więcej informacji dotyczących separatorów, zobacz <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, i <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> metodę, aby przeanalizować ciągów reprezentujących <xref:System.Single> wartości. W przykładzie użyto informacje o formatowaniu dla kultury en US.  
  
 [!code-csharp[System.Single.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Parse/CS/parse2.cs#3)]
 [!code-vb[System.Single.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Parse/VB/parse2.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException"><paramref name="s" /> nie jest liczbą w prawidłowym formacie.</exception>
        <exception cref="T:System.OverflowException"><paramref name="s" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Single.MinValue" /> lub większa niż <see cref="F:System.Single.MaxValue" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="style" /> nie jest <see cref="T:System.Globalization.NumberStyles" /> wartość.  
  
—lub— 
 <paramref name="style" /> obejmuje <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> wartość.</exception>
        <altmember cref="M:System.Single.ToString" />
        <altmember cref="Overload:System.Single.TryParse" />
        <related type="Article" href="~/docs/standard/base-types/parsing-numeric.md">Analizowanie ciągów liczbowych na platformie .NET</related>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static float Parse (string s, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Parse(string s, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Parse(System::String ^ s, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; single" Usage="System.single.Parse (s, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg zawierający liczbę, którą należy przekształcić.</param>
        <param name="provider">Obiekt, który dostarcza specyficzne dla kultury informacje o formatowaniu <paramref name="s" />.</param>
        <summary>Konwertuje ciąg reprezentujący numer w określonym formacie specyficzne dla kultury na odpowiadającą mu pojedynczej precyzji liczbę zmiennoprzecinkową.</summary>
        <returns>Liczba zmiennoprzecinkowa pojedynczej precyzji odpowiednikiem wartości liczbowej lub symbolowi określonemu w parametrze <paramref name="s" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To przeciążenie zazwyczaj służy do konwertowania tekstu, które może być sformatowane na różne sposoby <xref:System.Single> wartość. Może na przykład służyć do skonwertowania tekstu wprowadzanego przez użytkownika w polu tekstowym HTML na wartość liczbową.  
  
 `s` Parametr jest interpretowany przy użyciu kombinacji <xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType> i <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flag. `s` Parametru może zawierać <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType>, lub <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType> dla kultury określonej parametrem `provider`, lub może zawierać ciąg w postaci:  
  
 [*ws*] [*logowania*]*cyfry całkowite*[*.* [*cyfr ułamkowych, jaka*]] [E [*logowania*]*wykładniczego cyfr*] [*ws*]  
  
 Elementy opcjonalne są obramowane nawiasami kwadratowymi ([ i ]). Elementy, które zawierają „cyfry”, składają się z serii cyfr od 0 do 9.  
  
|Element|Opis|  
|-------------|-----------------|  
|*ws*|Ciąg znaków spacji.|  
|*sign*|Symbol znaku minus (-) lub znaku dodatniego (+).|  
|*cyfry całkowite*|Ciąg cyfr od 0 do 9, które określają jej część całkowitą. Działa z *cyfry całkowite* można podzielić na partycje przy użyciu symbolu separatora grup. Na przykład w niektórych kulturach przecinek (,) oddziela grupy wartości tysięcznych. *Cyfry całkowite* element może być nieobecny, jeśli ciąg zawiera *cyfr ułamkowych, jaka* elementu.|  
|.|Symbol dziesiętny specyficzny dla kultury.|  
|*cyfry ułamkowe*|Ciąg cyfr od 0 do 9, które określają część ułamkową liczby.|  
|E|Znak „e” lub „E”, który wskazuje, że wartość jest reprezentowana w zapisie wykładniczym (naukowym).|  
|*wykładniczy cyfr*|Ciąg cyfr od 0 do 9, które określają wykładnik potęgi.|  
  
 Aby uzyskać więcej informacji na temat formatów liczbowych, zobacz [typy formatowania](~/docs/standard/base-types/formatting-types.md) tematu.  
  
 `provider` Parametr jest <xref:System.IFormatProvider> implementacji którego <xref:System.IFormatProvider.GetFormat%2A> metoda zwraca <xref:System.Globalization.NumberFormatInfo> obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury. Gdy <xref:System.Single.Parse%28System.String%2CSystem.IFormatProvider%29> metoda jest wywoływana, wywołuje `provider` parametru <xref:System.IFormatProvider.GetFormat%2A> metody i przekazuje je <xref:System.Type> obiekt, który reprezentuje <xref:System.Globalization.NumberFormatInfo> typu. <xref:System.IFormatProvider.GetFormat%2A> Następnie metoda zwraca <xref:System.Globalization.NumberFormatInfo> obiekt, który zawiera informacje o formacie parametru `s` parametru. Istnieją trzy sposoby na wykorzystanie `provider` parametru jako źródła informacji o niestandardowym formatowaniu do operacji analizy:  
  
-   Możesz przekazać <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje kulturę dostarczającą informacje o formatowaniu. Jego <xref:System.Globalization.CultureInfo.GetFormat%2A> metoda zwraca <xref:System.Globalization.NumberFormatInfo> obiektu, który dostarcza informacje o formatowaniu liczb dla tej kultury.  
  
-   Można przekazać faktyczny <xref:System.Globalization.NumberFormatInfo> obiektu, który dostarcza informacje o formatowaniu liczb. (Jego implementacja obiektu <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> zwraca samą siebie.)  
  
-   Można przekazać niestandardowy obiekt, który implementuje <xref:System.IFormatProvider>. Jego <xref:System.IFormatProvider.GetFormat%2A> metoda tworzy i zwraca <xref:System.Globalization.NumberFormatInfo> obiekt, który dostarcza informacje o formatowaniu.  
  
 Jeśli `provider` jest `null` lub <xref:System.Globalization.NumberFormatInfo> nie można uzyskać, informacje o formatowaniu dla bieżącej kultury systemu.  
  
 Jeśli separator w `s` parametru podczas operacji analizowania i odpowiednia Waluta lub liczba dziesiętna oraz separatory grupy są takie same, operacja analizy zakłada, że separator jest separator dziesiętny, a nie grupą separator. Aby uzyskać więcej informacji dotyczących separatorów, zobacz <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, i <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.  
  
 Niektóre przykłady `s` są "100", "-123,456,789", "123.45e + 6", "+ 500", "5e2", "3.1416", "600", "-. 123" i "-nieskończoności".  
  
   
  
## Examples  
 W poniższym przykładzie występuje program obsługi zdarzeń kliknięcia przycisku w formularzu sieci Web. Używa ona tablica zwrócona przez <xref:System.Web.HttpRequest.UserLanguages%2A?displayProperty=nameWithType> własność, aby określić ustawienia regionalne użytkownika. Następnie tworzy <xref:System.Globalization.CultureInfo> obiekt, który odpowiada tym ustawieniom regionalnym. <xref:System.Globalization.NumberFormatInfo> Obiektu, który należy do tego <xref:System.Globalization.CultureInfo> obiekt jest następnie przekazywany do <xref:System.Single.Parse%28System.String%2CSystem.IFormatProvider%29> wejściowych metodę, aby przekonwertować użytkownika do <xref:System.Single> wartości.  
  
 [!code-csharp[ParseMethod#1](~/samples/snippets/csharp/VS_Snippets_CLR/ParseMethod/cs/Default.aspx.cs#1)]
 [!code-vb[ParseMethod#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ParseMethod/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException"><paramref name="s" /> reprezentuje liczby w prawidłowym formacie.</exception>
        <exception cref="T:System.OverflowException"><paramref name="s" /> reprezentuje liczbę mniej niż <see cref="F:System.Single.MinValue" /> lub większa niż <see cref="F:System.Single.MaxValue" />.</exception>
        <altmember cref="M:System.Single.ToString" />
        <altmember cref="Overload:System.Single.TryParse" />
        <related type="Article" href="~/docs/standard/base-types/parsing-numeric.md">Analizowanie ciągów liczbowych na platformie .NET</related>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static float Parse (ReadOnlySpan&lt;char&gt; s, System.Globalization.NumberStyles style = System.Globalization.NumberStyles.AllowDecimalPoint | System.Globalization.NumberStyles.AllowExponent | System.Globalization.NumberStyles.AllowLeadingSign | System.Globalization.NumberStyles.AllowLeadingWhite | System.Globalization.NumberStyles.AllowThousands | System.Globalization.NumberStyles.AllowTrailingWhite | System.Globalization.NumberStyles.Float | System.Globalization.NumberStyles.Integer, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As ReadOnlySpan(Of Char), Optional style As NumberStyles = System.Globalization.NumberStyles.AllowDecimalPoint | System.Globalization.NumberStyles.AllowExponent | System.Globalization.NumberStyles.AllowLeadingSign | System.Globalization.NumberStyles.AllowLeadingWhite | System.Globalization.NumberStyles.AllowThousands | System.Globalization.NumberStyles.AllowTrailingWhite | System.Globalization.NumberStyles.Float | System.Globalization.NumberStyles.Integer, Optional provider As IFormatProvider = null) As Single" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * System.Globalization.NumberStyles * IFormatProvider -&gt; single" Usage="System.single.Parse (s, style, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="style">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static float Parse (string s, System.Globalization.NumberStyles style, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Parse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, style As NumberStyles, provider As IFormatProvider) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Parse(System::String ^ s, System::Globalization::NumberStyles style, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Globalization.NumberStyles * IFormatProvider -&gt; single" Usage="System.single.Parse (s, style, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg zawierający liczbę, którą należy przekształcić.</param>
        <param name="style">Bitowa kombinacja wartości wyliczenia wskazująca elementy stylu, które mogą być obecne w <paramref name="s" />. To typowa wartość do określenia <see cref="F:System.Globalization.NumberStyles.Float" /> w połączeniu z <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
        <param name="provider">Obiekt, który dostarcza specyficzne dla kultury informacje o formatowaniu <paramref name="s" />.</param>
        <summary>Konwertuje ciąg reprezentujący liczbę na określony styl i formatowanie specyficzne dla kultury na odpowiadającą mu pojedynczej precyzji liczbę zmiennoprzecinkową.</summary>
        <returns>Liczba zmiennoprzecinkowa pojedynczej precyzji odpowiednikiem wartości liczbowej lub symbolowi określonemu w parametrze <paramref name="s" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `style` Parametru definiuje elementy stylu (takie jak białe znaki, tysięcy separatory i symbole walut) dozwolone w `s` parametr jako warunek powodzenia operacji analizy. Musi być kombinacją flag bitowych z <xref:System.Globalization.NumberStyles> wyliczenia. Następujące <xref:System.Globalization.NumberStyles> elementy członkowskie nie są obsługiwane:  
  
-   <xref:System.Globalization.NumberStyles.AllowHexSpecifier>  
  
-   <xref:System.Globalization.NumberStyles.HexNumber>  
  
 `s` Parametru może zawierać <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType>, lub <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType> dla kultury określonej parametrem `provider`. W zależności od wartości `style`, może to również przybrać formę:  
  
 [*ws*] [*$*] [*logowania*] [*cyfry całkowite*,]*cyfry całkowite*[. [ *cyfr ułamkowych, jaka*]] [E [*logowania*]*wykładniczego cyfr*] [*ws*]  
  
 Elementy w nawiasach kwadratowych ([i]) są opcjonalne w ramce. W tabeli poniżej opisano każdy element.  
  
|Element|Opis|  
|-------------|-----------------|  
|*ws*|Ciąg znaków spacji. Odstęp może występować na początku `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flagę która może znajdować się na końcu `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flagi.|  
|$|Symbol waluty specyficzny dla kultury. Jego pozycja w ciągu jest definiowana przez <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> i <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> właściwości bieżącej kultury. Symbol waluty bieżącej kultury może znajdować się w `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flagi.|  
|*sign*|Symbol znaku minus (-) lub znaku dodatniego (+). Znak może występować na początku `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flagę która może znajdować się na końcu `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flagi. Nawiasy mogą być używane w `s` do wskazania wartości ujemnej, jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flagi.|  
|*cyfry całkowite*|Ciąg cyfr od 0 do 9, które określają jej część całkowitą. *Cyfry całkowite* element może być nieobecny, jeśli ciąg zawiera *cyfr ułamkowych, jaka* elementu.|  
|,|Separator grupy specyficzny dla kultury. Symbol separatora grupy bieżącej kultury może znajdować się w `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flagi|  
|.|Symbol dziesiętny specyficzny dla kultury. Symbol separatora dziesiętnego bieżącej kultury może znajdować się w `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flagi.|  
|*cyfry ułamkowe*|Ciąg cyfr od 0 do 9, które określają część ułamkową liczby. Cyfry ułamkowe mogą pojawiać się w `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flagi.|  
|E|Znak „e” lub „E”, który wskazuje, że wartość jest reprezentowana w zapisie wykładniczym (naukowym). `s` Parametr może reprezentować liczbę w zapisie wykładniczym, jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flagi.|  
|*wykładniczy cyfr*|Ciąg cyfr od 0 do 9, które określają wykładnik potęgi.|  
  
> [!NOTE]
> Wszystkie znaki (U + 0000) NUL kończącego w `s` są ignorowane przez operacji analizowania, bez względu na wartość `style` argumentu.

 Ciąg zawierający tylko cyfry (co odpowiada <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> styl) zawsze przeanalizowany pomyślnie. Pozostałe <xref:System.Globalization.NumberStyles?displayProperty=nameWithType> składowych kontroluje elementy, które mogą być obecne, ale nie muszą być obecne w ciągu wejściowym. Poniższa tabela wskazuje, jak poszczególne <xref:System.Globalization.NumberStyles> flagi wpływają na elementy, które mogą być obecne w `s`.  
  
|Wartość wyliczenia NumberStyles|Elementy dozwolone w parametrze `s` poza cyframi|  
|------------------------|-----------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|*Cyfry całkowite* tylko element.|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|Punkt dziesiętny (*.*) i *cyfr ułamkowych, jaka* elementów.|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|Znak „e” lub znak „E”, co oznacza zapis wykładniczy. Ta flaga samodzielnie obsługuje wartości w postaci *cyfr*E*cyfr*; dodatkowe flagi są potrzebne, aby pomyślnie przeanalizować ciągi zawierające takie elementy jak dodatnie lub ujemne znaki i symbole przecinka dziesiętnego.|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|*Ws* element na początku `s`.|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|*Ws* element na końcu `s`.|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|*Logowania* element na początku `s`.|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|*Logowania* element na końcu `s`.|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|*Logowania* elementu w postaci nawiasów obejmujących wartość liczbową.|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|Element separatora tysięcznego (,).|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|Element określający walutę ($).|  
|<xref:System.Globalization.NumberStyles.Currency>|Wszystkie elementy. Jednak `s` nie może reprezentować liczby szesnastkowej ani liczby w zapisie wykładniczym.|  
|<xref:System.Globalization.NumberStyles.Float>|*Ws* element na początku lub końcu `s`, *logowania* na początku `s`oraz symbol separatora dziesiętnego (.). `s` Parametru można również użyć notacji wykładniczej.|  
|<xref:System.Globalization.NumberStyles.Number>|`ws`, `sign`, Tysięcy separatora (,) i elementy przecinka dziesiętnego (.).|  
|<xref:System.Globalization.NumberStyles.Any>|Wszystkie elementy. Jednak `s` nie może reprezentować liczby szesnastkowej.|  
  
 `provider` Parametr <xref:System.IFormatProvider> implementacji. Jego <xref:System.IFormatProvider.GetFormat%2A> metoda zwraca <xref:System.Globalization.NumberFormatInfo> obiektu, który dostarcza informacje specyficzne dla kultury o formacie parametru `value`. Zazwyczaj `provider` może być jednym z następujących czynności:  
  
-   Element <xref:System.Globalization.CultureInfo> obiektu, który reprezentuje kulturę, która zapewnia informacje o formatowaniu liczb. Jego <xref:System.Globalization.CultureInfo.GetFormat%2A> metoda zwraca <xref:System.Globalization.NumberFormatInfo> obiektu, który dostarcza informacje o formatowaniu liczb.  
  
-   Element <xref:System.Globalization.NumberFormatInfo> obiektu, który dostarcza informacje o formatowaniu. (Jego implementacja obiektu <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> zwraca samą siebie.)  
  
-   Niestandardowy obiekt, który implementuje <xref:System.IFormatProvider> i używa <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> metodę, aby tworzyć wystąpienie i zwracać <xref:System.Globalization.NumberFormatInfo> obiekt, który dostarcza informacje o formatowaniu.  
  
 Jeśli `provider` jest `null`, <xref:System.Globalization.NumberFormatInfo> obiekt bieżącej kultury jest używane.  
  
 Jeśli separator w `s` parametru podczas operacji analizowania i odpowiednia Waluta lub liczba dziesiętna oraz separatory grupy są takie same, operacja analizy zakłada, że separator jest separator dziesiętny, a nie grupą separator. Aby uzyskać więcej informacji dotyczących separatorów, zobacz <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, i <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.  
  
   
  
## Examples  
 Poniższy przykład kodu wykorzystuje <xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> metodę, aby przeanalizować ciągów reprezentujących <xref:System.Single> wartości. Każdego ciągu w tablicy jest analizowany przy użyciu konwencji formatowania en US, nl-NL i kultury niestandardowej. Kultury niestandardowej Określa symbol separatora grupy jako znaku podkreślenia ("_") i jego rozmiar grupy jako dwa.  
  
 [!code-csharp[System.Single.Parse#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Parse/CS/parse3.cs#4)]
 [!code-vb[System.Single.Parse#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Parse/VB/parse3.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException"><paramref name="s" /> reprezentuje wartość numeryczną.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="style" /> nie jest <see cref="T:System.Globalization.NumberStyles" /> wartość.  
  
—lub— 
 <paramref name="style" /> jest <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> wartość.</exception>
        <exception cref="T:System.OverflowException"><paramref name="s" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Single.MinValue" /> lub większa niż <see cref="F:System.Single.MaxValue" />.</exception>
        <altmember cref="M:System.Single.ToString" />
        <related type="Article" href="~/docs/standard/base-types/parsing-numeric.md">Analizowanie ciągów liczbowych na platformie .NET</related>
      </Docs>
    </Member>
    <Member MemberName="PositiveInfinity">
      <MemberSignature Language="C#" Value="public const float PositiveInfinity = Infinity;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 PositiveInfinity = float32(Infinity)" />
      <MemberSignature Language="DocId" Value="F:System.Single.PositiveInfinity" />
      <MemberSignature Language="VB.NET" Value="Public Const PositiveInfinity As Single  = Infinity" />
      <MemberSignature Language="C++ CLI" Value="public: float PositiveInfinity = Infinity;" />
      <MemberSignature Language="F#" Value="val mutable PositiveInfinity : single" Usage="System.single.PositiveInfinity" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>Infinity</MemberValue>
      <Docs>
        <summary>Reprezentuje nieskończoności dodatniej. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość tej stałej jest wynik dzielenia dodatnia przez zero.  
  
 Tej stałej jest zwracana, gdy wynik operacji jest większy niż <xref:System.Single.MaxValue>.  
  
 Użyj <xref:System.Single.IsPositiveInfinity%2A> do określenia, czy wartości daje w wyniku nieskończoności dodatniej.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje <xref:System.Single.PositiveInfinity> stałej.  
  
 [!code-cpp[System.Single#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#10)]
 [!code-csharp[System.Single#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#10)]
 [!code-vb[System.Single#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.IsPositiveInfinity(System.Single)" />
        <altmember cref="M:System.Single.IsInfinity(System.Single)" />
        <altmember cref="F:System.Single.NegativeInfinity" />
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (value As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ value) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ten parametr jest ignorowany.</param>
        <summary>Aby uzyskać opis tego elementu członkowskiego, zobacz <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</summary>
        <returns><see langword="true" /> Jeśli wartość bieżącego wystąpienia nie jest równa zeru; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Mogą być używane tylko wtedy, gdy <xref:System.Single> wystąpienia jest rzutowany na <xref:System.IConvertible> interfejsu. Zalecaną alternatywą jest wywołanie <xref:System.Convert.ToBoolean%28System.Single%29?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ten parametr jest ignorowany.</param>
        <summary>Aby uzyskać opis tego elementu członkowskiego, zobacz <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</summary>
        <returns>Wartość bieżącego wystąpienia przekształcona na typ <see cref="T:System.Byte" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Mogą być używane tylko wtedy, gdy <xref:System.Single> wystąpienia jest rzutowany na <xref:System.IConvertible> interfejsu. Zalecaną alternatywą jest wywołanie <xref:System.Convert.ToByte%28System.Single%29?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ten parametr jest ignorowany.</param>
        <summary>Ta konwersja nie jest obsługiwana. Podjęto próbę użycia Ta metoda wyrzuca <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Ta konwersja nie jest obsługiwana. Nie jest zwracana żadna wartość.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">We wszystkich przypadkach.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ten parametr jest ignorowany.</param>
        <summary>Ta konwersja nie jest obsługiwana. Podjęto próbę użycia Ta metoda wyrzuca <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Ta konwersja nie jest obsługiwana. Nie jest zwracana żadna wartość.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">We wszystkich przypadkach.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ten parametr jest ignorowany.</param>
        <summary>Aby uzyskać opis tego elementu członkowskiego, zobacz <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</summary>
        <returns>Wartość bieżącego wystąpienia przekształcona na typ <see cref="T:System.Decimal" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Mogą być używane tylko wtedy, gdy <xref:System.Single> wystąpienia jest rzutowany na <xref:System.IConvertible> interfejsu. Zalecaną alternatywą jest wywołanie <xref:System.Convert.ToDecimal%28System.Single%29?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ten parametr jest ignorowany.</param>
        <summary>Aby uzyskać opis tego elementu członkowskiego, zobacz <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</summary>
        <returns>Wartość bieżącego wystąpienia przekształcona na typ <see cref="T:System.Double" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Mogą być używane tylko wtedy, gdy <xref:System.Single> wystąpienia jest rzutowany na <xref:System.IConvertible> interfejsu. Zalecaną alternatywą jest wywołanie <xref:System.Convert.ToDouble%28System.Single%29?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ten parametr jest ignorowany.</param>
        <summary>Aby uzyskać opis tego elementu członkowskiego, zobacz <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</summary>
        <returns>Wartość bieżącego wystąpienia przekształcona na typ <see cref="T:System.Int16" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Mogą być używane tylko wtedy, gdy <xref:System.Single> wystąpienia jest rzutowany na <xref:System.IConvertible> interfejsu. Zalecaną alternatywą jest wywołanie <xref:System.Convert.ToInt16%28System.Single%29?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ten parametr jest ignorowany.</param>
        <summary>Aby uzyskać opis tego elementu członkowskiego, zobacz <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
        <returns>Wartość bieżącego wystąpienia przekształcona na typ <see cref="T:System.Int32" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Mogą być używane tylko wtedy, gdy <xref:System.Single> wystąpienia jest rzutowany na <xref:System.IConvertible> interfejsu. Zalecaną alternatywą jest wywołanie <xref:System.Convert.ToInt32%28System.Single%29?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ten parametr jest ignorowany.</param>
        <summary>Aby uzyskać opis tego elementu członkowskiego, zobacz <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
        <returns>Wartość bieżącego wystąpienia przekształcona na typ <see cref="T:System.Int64" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Mogą być używane tylko wtedy, gdy <xref:System.Single> wystąpienia jest rzutowany na <xref:System.IConvertible> interfejsu. Zalecaną alternatywą jest wywołanie <xref:System.Convert.ToInt64%28System.Single%29?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ten parametr jest ignorowany.</param>
        <summary>Aby uzyskać opis tego elementu członkowskiego, zobacz <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</summary>
        <returns>Wartość bieżącego wystąpienia przekształcona na typ <see cref="T:System.SByte" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Mogą być używane tylko wtedy, gdy <xref:System.Single> wystąpienia jest rzutowany na <xref:System.IConvertible> interfejsu. Zalecaną alternatywą jest wywołanie <xref:System.Convert.ToSByte%28System.Single%29?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ten parametr jest ignorowany.</param>
        <summary>Aby uzyskać opis tego elementu członkowskiego, zobacz <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</summary>
        <returns>Wartość bieżącego wystąpienia, bez zmian.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Mogą być używane tylko wtedy, gdy <xref:System.Single> wystąpienia jest rzutowany na <xref:System.IConvertible> interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="type">Typ, do którego ma zostać skonwertuje ją <see cref="T:System.Single" /> wartość.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formacie zwróconej wartości.</param>
        <summary>Aby uzyskać opis tego elementu członkowskiego, zobacz <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</summary>
        <returns>Wartość bieżącego wystąpienia przekształcona na typ <paramref name="type" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Mogą być używane tylko wtedy, gdy <xref:System.Single> wystąpienia jest rzutowany na <xref:System.IConvertible> interfejsu. Zalecaną alternatywą jest wywołanie `static` (`Shared` w języku Visual Basic) <xref:System.Convert.ChangeType%2A?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ten parametr jest ignorowany.</param>
        <summary>Aby uzyskać opis tego elementu członkowskiego, zobacz <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
        <returns>Wartość bieżącego wystąpienia przekształcona na typ <see cref="T:System.UInt16" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Mogą być używane tylko wtedy, gdy <xref:System.Single> wystąpienia jest rzutowany na <xref:System.IConvertible> interfejsu. Zalecaną alternatywą jest wywołanie <xref:System.Convert.ToUInt16%28System.Single%29?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ten parametr jest ignorowany.</param>
        <summary>Aby uzyskać opis tego elementu członkowskiego, zobacz <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</summary>
        <returns>Wartość bieżącego wystąpienia przekształcona na typ <see cref="T:System.UInt32" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Mogą być używane tylko wtedy, gdy <xref:System.Single> wystąpienia jest rzutowany na <xref:System.IConvertible> interfejsu. Zalecaną alternatywą jest wywołanie <xref:System.Convert.ToUInt32%28System.Single%29?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ten parametr jest ignorowany.</param>
        <summary>Aby uzyskać opis tego elementu członkowskiego, zobacz <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</summary>
        <returns>Wartość bieżącego wystąpienia przekształcona na typ <see cref="T:System.UInt64" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Mogą być używane tylko wtedy, gdy <xref:System.Single> wystąpienia jest rzutowany na <xref:System.IConvertible> interfejsu. Zalecaną alternatywą jest wywołanie <xref:System.Convert.ToUInt64%28System.Single%29?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje wartość liczbową tego wystąpienia na równoważną reprezentację w postaci ciągu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="single.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konwertuje wartość liczbową tego wystąpienia na równoważną reprezentację w postaci ciągu.</summary>
        <returns>Ciąg reprezentujący wartość tego wystąpienia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Single.ToString> Formaty metoda <xref:System.Single> wartości domyślnej ("G" lub ogólne) formacie bieżącej kultury. Jeśli chcesz określić inny format lub kultury, należy używać innych przeciążeń <xref:System.Single.ToString%2A> metody w następujący sposób:  
  
|Aby użyć formatu|Dla kultury|Użyj przeciążenia|  
|-------------------|-----------------|----------------------|  
|Format domyślny ("G")|Określonej kultury|<xref:System.Single.ToString%28System.IFormatProvider%29>|  
|Określony format|(Domyślne bieżącej) kultury|<xref:System.Single.ToString%28System.String%29>|  
|Określony format|Określonej kultury|<xref:System.Single.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 Zwracana wartość może być <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, lub ciąg w postaci:  
  
 [znak]cyfry-całkowite[.[cyfry-ułamkowe]][e[znak]cyfry-wykładnicze]  
  
 Elementy opcjonalne są obramowane nawiasami kwadratowymi ([ i ]). Elementy, które zawierają „cyfry”, składają się z serii cyfr od 0 do 9. W poniższej tabeli wymieniono każdy element:  
  
|Element|Opis|  
|-------------|-----------------|  
|*sign*|Znak ujemny lub symbol znaku dodatniego.|  
|*cyfry całkowite*|Ciąg cyfr określający część całkowitą liczby. Cyfry całkowite mogą być nieobecne w przypadku cyfr ułamkowych.|  
|'.'|Symbol dziesiętny specyficzny dla kultury.|  
|*cyfry ułamkowe*|Ciąg cyfr określający część ułamkową liczby.|  
|"e"|Mała litera „e”, wskazująca zapis wykładniczy (naukowy).|  
|*wykładniczy cyfr*|Ciąg cyfr określające wykładnik potęgi.|  
  
 Oto kilka przykładów zwracanej wartości: „100”, „-123,456,789”, „123.45e + 6”, „500”, „3.1416”, „600”, „-0.123” i „-nieskończoność”.  
  
 Środowisko .NET Framework zapewnia rozbudowaną obsługę formatowania. Opisano to szczegółowo w następujących tematach poświęconych formatowaniu:  
  
-   Aby uzyskać więcej informacji na temat specyfikatorów formatu liczbowego, zobacz [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) i [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Aby uzyskać więcej informacji na temat formatowania, zobacz [typy formatowania](~/docs/standard/base-types/formatting-types.md).  
  
   
  
## Examples  
 W poniższym przykładzie użyto domyślnie <xref:System.Single.ToString%2A?displayProperty=nameWithType> metodę w celu wyświetlenia ciągów reprezentujących liczbę <xref:System.Single> wartości.  
  
 [!code-csharp[System.Single.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.ToString/CS/ToString1.cs#1)]
 [!code-vb[System.Single.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.ToString/VB/ToString1.vb#1)]  
  
 Poniższy przykład kodu ilustruje użycie <xref:System.Single.Parse%28System.String%29> metoda wraz z <xref:System.Single.ToString> metody.  
  
 [!code-cpp[System.Single#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#3)]
 [!code-csharp[System.Single#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#3)]
 [!code-vb[System.Single#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.Parse(System.String)" />
        <altmember cref="T:System.String" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Typy formatowania na platformie .NET</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="single.ToString provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje wartość liczbową tego wystąpienia na równoważną reprezentację w postaci ciągu przy użyciu podanych danych formatowania specyficznych dla kultury.</summary>
        <returns>Ciąg reprezentujący wartość tego wystąpienia określony przez <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Single.ToString%28System.IFormatProvider%29> Formaty metoda <xref:System.Single> wartości domyślnej ("G" lub ogólne) format określonej kultury. Jeśli chcesz określić inny format lub bieżącej kultury, należy używać innych przeciążeń <xref:System.Single.ToString%2A> metody w następujący sposób:  
  
|Aby użyć formatu|Dla kultury|Użyj przeciążenia|  
|-------------------|-----------------|----------------------|  
|Format domyślny ("G")|(Domyślne bieżącej) kultury|<xref:System.Single.ToString>|  
|Określony format|(Domyślne bieżącej) kultury|<xref:System.Single.ToString%28System.String%29>|  
|Określony format|Określonej kultury|<xref:System.Single.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 Zwracana wartość może być <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, lub ciąg w postaci:  
  
 [znak]cyfry-całkowite[.[cyfry-ułamkowe]][e[znak]cyfry-wykładnicze]  
  
 Elementy opcjonalne są obramowane nawiasami kwadratowymi ([ i ]). Elementy zawierające termin "cyfry" składają się z serii cyfr od 0 do 9. W poniższej tabeli wymieniono każdy element.  
  
|Element|Opis|  
|-------------|-----------------|  
|znak|Znak ujemny lub symbol znaku dodatniego.|  
|cyfry-całkowite|Ciąg cyfr określający część całkowitą liczby. Cyfry całkowite mogą być nieobecne w przypadku cyfr ułamkowych.|  
|'.'|Symbol dziesiętny specyficzny dla kultury.|  
|cyfry-ułamkowe|Ciąg cyfr określający część ułamkową liczby.|  
|"e"|Mała litera „e”, wskazująca zapis wykładniczy (naukowy).|  
|cyfry-wykładnicze|Ciąg cyfr określające wykładnik potęgi.|  
  
 Oto kilka przykładów zwracanej wartości: „100”, „-123,456,789”, „123.45e + 6”, „500”, „3.1416”, „600”, „-0.123” i „-nieskończoność”.  
  
 Środowisko .NET Framework zapewnia rozbudowaną obsługę formatowania. Opisano to szczegółowo w następujących tematach poświęconych formatowaniu:  
  
-   Aby uzyskać więcej informacji na temat specyfikatorów formatu liczbowego, zobacz [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) i [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Aby uzyskać więcej informacji na temat formatowania, zobacz [typy formatowania](~/docs/standard/base-types/formatting-types.md).  
  
 `provider` Parametr jest <xref:System.IFormatProvider> implementacji którego <xref:System.IFormatProvider.GetFormat%2A> metoda zwraca <xref:System.Globalization.NumberFormatInfo> obiektu. Zazwyczaj `provider` jest <xref:System.Globalization.CultureInfo> obiektu lub <xref:System.Globalization.NumberFormatInfo> obiektu. `provider` Parametr dostarcza informacje specyficzne dla kultury, używane do formatowania. Jeśli `provider` jest `null`, wartość zwracana jest formatowana przy użyciu <xref:System.Globalization.NumberFormatInfo> danych dla bieżącej kultury.  
  
 Aby przekonwertować <xref:System.Single> wartość na jego reprezentację ciągu przy użyciu określonej kultury i ciągu określonego formatu, wywołanie <xref:System.Single.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> metody.  
  
   
  
## Examples  
 Poniższy przykład wyświetla ciąg reprezentujący dwóch <xref:System.Single> wartości przy użyciu <xref:System.Globalization.CultureInfo> obiektami, które reprezentują kilka różnych kultur.  
  
 [!code-csharp[System.Single.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.ToString/CS/ToString1.cs#2)]
 [!code-vb[System.Single.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.ToString/VB/ToString1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.Parse(System.String)" />
        <altmember cref="T:System.String" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Typy formatowania na platformie .NET</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="single.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Ciąg formatu liczbowego.</param>
        <summary>Konwertuje wartość liczbową tego wystąpienia na równoważną reprezentację w postaci ciągu przy użyciu podanego formatu.</summary>
        <returns>Ciąg reprezentujący wartość tego wystąpienia określony przez <paramref name="format" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Single.ToString%28System.String%29> Formaty metoda <xref:System.Single> wartości w określonym formacie przy użyciu konwencji bieżącej kultury. Jeśli chcesz użyć domyślnej ("G" lub ogólne) format lub określić inną kulturę, używać innych przeciążeń <xref:System.Single.ToString%2A> metody w następujący sposób:  
  
|Aby użyć formatu|Dla kultury|Użyj przeciążenia|  
|-------------------|-----------------|----------------------|  
|Format domyślny ("G")|(Domyślne bieżącej) kultury|<xref:System.Single.ToString>|  
|Format domyślny ("G")|Określonej kultury|<xref:System.Single.ToString%28System.IFormatProvider%29>|  
|Określony format|Określonej kultury|<xref:System.Single.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 Zwracana wartość może być <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, lub ciąg reprezentujący wartość bieżącego wystąpienia określoną przez `format`.  
  
 `format` Parametr może być dowolnym prawidłowy standardowy specyfikator formatu liczbowego, z wyjątkiem D i X, a także dowolna kombinacja niestandardowych specyfikatorów formatu liczbowego. Jeśli jest w formacie `null` lub pustym ciągiem, wartość zwracana jest sformatowany za pomocą ogólnego specyfikatora formatu liczbowego ("G").  
  
 Środowisko .NET Framework zapewnia rozbudowaną obsługę formatowania. Opisano to szczegółowo w następujących tematach poświęconych formatowaniu:  
  
-   Aby uzyskać więcej informacji na temat specyfikatorów formatu liczbowego, zobacz [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) i [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Aby uzyskać więcej informacji na temat formatowania, zobacz [typy formatowania](~/docs/standard/base-types/formatting-types.md).  
  
 Domyślnie wartość zwracana zawiera tylko 7 cyfr, mimo że maksymalnie 9 cyfr są przechowywane wewnętrznie. Jeśli wartość tego wystąpienia jest większy niż 7 cyfr <xref:System.Single.ToString%28System.String%29> zwraca <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A> lub <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A> zamiast oczekiwana liczba. Jeśli potrzebujesz bardziej precyzyjnie, określ `format` przy użyciu specyfikacji formatu "G9", która zawsze zwraca 9 cyfr precyzji lub oznaczeniem "R", która zwraca 7 cyfr, jeśli liczba może być reprezentowana z tym dokładność lub 9 cyfr, jeśli liczba tylko mogą być reprezentowane z maksymalną dokładnością.  
  
   
  
## Examples  
 Poniższy przykład definiuje wartość numeryczną i formatuje ją jako wartość waluty przy użyciu ciągu standardowego formatu liczb "C" i jako wartość liczbową do trzech miejsc dziesiętnych przy użyciu ciągu "N" w standardowym formacie liczbowym. Ciągi wynikowe są formatowane przy użyciu konwencji kultury en US. Aby uzyskać więcej informacji na temat ciągów formatu liczbowego, zobacz [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) i [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
 [!code-csharp[System.Single.ToString#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.ToString/CS/ToString7.cs#7)]
 [!code-vb[System.Single.ToString#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.ToString/VB/ToString7.vb#7)]  
  
 W poniższym przykładzie pokazano kilka <xref:System.Single> wartości przy użyciu specyfikatorów standardowego formatu liczb obsługiwanych wraz z dwa ciągi niestandardowego formatu liczb. Jedną z tych ciągów formatów niestandardowych pokazano, jak do wypełnienia <xref:System.Single> wartość z zerami. W celu przeliczenia wartości liczbowych na ciągi w przykładzie użyto konwencji formatowania kultury en-US.  
  
 [!code-csharp[System.Single.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.ToString/CS/ToString1.cs#3)]
 [!code-vb[System.Single.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.ToString/VB/ToString1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><paramref name="format" /> jest nieprawidłowy.</exception>
        <altmember cref="M:System.Single.Parse(System.String)" />
        <altmember cref="T:System.String" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Typy formatowania na platformie .NET</related>
        <related type="Article" href="~/docs/standard/base-types/how-to-pad-a-number-with-leading-zeros.md">Porady: uzupełnianie liczby zerami prowadzącymi</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="single.ToString (format, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Ciąg formatu liczbowego.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje wartość liczbową tego wystąpienia na równoważną reprezentację w postaci ciągu przy użyciu podanego formatu i informacji specyficznych dla kultury.</summary>
        <returns>Ciąg reprezentujący wartość tego wystąpienia określony przez <paramref name="format" /> i <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Single.ToString%28System.String%2CSystem.IFormatProvider%29> Formaty metoda <xref:System.Single> wartości w określonym formacie określonej kultury. Jeśli chcesz użyć ustawień domyślnych formatu lub kultury, należy używać innych przeciążeń <xref:System.Single.ToString%2A> metody w następujący sposób:  
  
|Aby użyć formatu|Dla kultury|Użyj przeciążenia|  
|-------------------|-----------------|----------------------|  
|Format domyślny ("G")|(Domyślne bieżącej) kultury|<xref:System.Single.ToString>|  
|Format domyślny ("G")|Określonej kultury|<xref:System.Single.ToString%28System.IFormatProvider%29>|  
|Określony format|(Domyślne bieżącej) kultury|<xref:System.Single.ToString%28System.String%29>|  
  
 Zwracana wartość może być <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, lub ciąg reprezentujący wartość bieżącego wystąpienia określoną przez `format`.  
  
 `format` Parametr może być dowolnym prawidłowy standardowy specyfikator formatu liczbowego, z wyjątkiem D i X, a także dowolna kombinacja niestandardowych specyfikatorów formatu liczbowego. Jeśli `format` jest `null` lub pusty ciąg wartość zwracana przez to wystąpienie jest sformatowana za pomocą ogólnego specyfikatora formatu liczbowego ("G").  
  
 Środowisko .NET Framework zapewnia rozbudowaną obsługę formatowania. Opisano to szczegółowo w następujących tematach poświęconych formatowaniu:  
  
-   Aby uzyskać więcej informacji na temat specyfikatorów formatu liczbowego, zobacz [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) i [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Aby uzyskać więcej informacji na temat formatowania, zobacz [typy formatowania](~/docs/standard/base-types/formatting-types.md).  
  
 `provider` Parametr jest <xref:System.IFormatProvider> implementacji którego <xref:System.IFormatProvider.GetFormat%2A> metoda zwraca <xref:System.Globalization.NumberFormatInfo> obiektu. Zazwyczaj `provider` jest <xref:System.Globalization.CultureInfo> obiektu lub <xref:System.Globalization.NumberFormatInfo> obiektu. `provider` Parametr dostarcza informacje specyficzne dla kultury, używane do formatowania. Jeśli `provider` jest `null`, wartość zwracana jest formatowana przy użyciu <xref:System.Globalization.NumberFormatInfo> obiektu dla bieżącej kultury.  
  
 Domyślnie wartość zwracana zawiera tylko 7 cyfr, mimo że maksymalnie 9 cyfr są przechowywane wewnętrznie. Jeśli wartość tego wystąpienia jest większy niż 7 cyfr <xref:System.Single.ToString%2A> zwraca <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A> lub <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A> zamiast oczekiwana liczba. Jeśli potrzebujesz bardziej precyzyjnie, określ `format` przy użyciu specyfikacji formatu "G9", która zawsze zwraca 9 cyfr precyzji lub oznaczeniem "R", która zwraca 7 cyfr, jeśli liczba może być reprezentowana z tym dokładność lub 9 cyfr, jeśli liczba tylko mogą być reprezentowane z maksymalną dokładnością.  
  
   
  
## Examples  
 Poniższy przykład wyświetla <xref:System.Single> wartość przy użyciu wszystkich specyfikatorów standardowego formatu liczb obsługiwanych dla kilku różnych kultur.  
  
 [!code-csharp[System.Single.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.ToString/CS/ToString1.cs#4)]
 [!code-vb[System.Single.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.ToString/VB/ToString1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.Parse(System.String)" />
        <altmember cref="T:System.String" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Typy formatowania na platformie .NET</related>
        <related type="Article" href="~/docs/standard/base-types/how-to-pad-a-number-with-leading-zeros.md">Porady: uzupełnianie liczby zerami prowadzącymi</related>
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = null, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional provider As IFormatProvider = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; *  * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="single.TryFormat (destination, charsWritten, format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje ciąg reprezentujący liczbę na odpowiadającą mu liczbę zmiennoprzecinkową pojedynczej precyzji. Zwracana wartość wskazuje, czy konwersja powiodła się czy nie.</summary>
        <altmember cref="Overload:System.Single.Parse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, out float result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, [out] float32&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.TryParse(System.ReadOnlySpan{System.Char},System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), ByRef result As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, [Runtime::InteropServices::Out] float % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; *  -&gt; bool" Usage="System.single.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="result" Type="System.Single" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out float result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] float32&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.TryParse(System.String,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, ByRef result As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, [Runtime::InteropServices::Out] float % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string *  -&gt; bool" Usage="System.single.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="result" Type="System.Single" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg reprezentujący liczbę do przekonwertowania.</param>
        <param name="result">Po powrocie z tej metody zawiera odpowiadające wartości liczbowej lub zawarte w symbolu liczba zmiennoprzecinkowa pojedynczej precyzji <paramref name="s" />, jeśli konwersja powiodła się lub zero, jeśli konwersja nie powiodła się. Jeśli konwersja nie powiedzie się <paramref name="s" /> parametr jest <see langword="null" /> lub <see cref="F:System.String.Empty" />, nie jest liczbą w prawidłowym formacie lub reprezentuje liczbę mniej niż <see cref="F:System.Single.MinValue" /> lub większa niż <see cref="F:System.Single.MaxValue" />. Ten parametr jest przekazywany jako niezainicjowany; dowolna wartość pierwotnie podane w <paramref name="result" /> zostaną zastąpione.</param>
        <summary>Konwertuje ciąg reprezentujący liczbę na odpowiadającą mu liczbę zmiennoprzecinkową pojedynczej precyzji. Zwracana wartość wskazuje, czy konwersja powiodła się czy nie.</summary>
        <returns><see langword="true" /> Jeśli <paramref name="s" /> został przekonwertowany pomyślnie; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To przeciążenie różni się od <xref:System.Single.Parse%28System.String%29?displayProperty=nameWithType> metody, zwracając wartość logiczną, wskazującą, czy operacja analizy powiodło się. zamiast zwracać przeanalizowana wartość liczbową. Eliminuje to potrzebę używania wyjątków do testowania <xref:System.FormatException> w przypadku gdy `s` jest nieprawidłowy i nie można pomyślnie przeanalizować.  
  
 `s` Parametru może zawierać <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A> (porównywania ciągów jest rozróżniana wielkość liter) lub ciąg w postaci:  
  
 [ws] [znak] [-całkowite,]-całkowite [. [ cyfry ułamkowe]] [e [znak] wykładniczego cyfry-] [ws]  
  
 Elementy w nawiasach kwadratowych są opcjonalne. W tabeli poniżej opisano każdy element.  
  
|Element|Opis|  
|-------------|-----------------|  
|*ws*|Ciąg znaków spacji.|  
|*sign*|Znak ujemny lub symbol znaku dodatniego.|  
|*cyfry całkowite*|Ciąg cyfr od 0 do 9, które określają część całkowitą liczby. Cyfry całkowite mogą być nieobecne w przypadku cyfr ułamkowych.|  
|*,*|Symbol separatora grupy specyficzny dla kultury.|  
|*.*|Symbol dziesiętny specyficzny dla kultury.|  
|*cyfry ułamkowe*|Ciąg cyfr od 0 do 9, które określają część ułamkową liczby.|  
|*E*|Wielkimi lub małymi literami znak "e", który oznacza zapis wykładniczy (naukowy).|  
|*wykładniczy cyfr*|Ciąg cyfr od 0 do 9, które określają wykładnik potęgi.|  
  
 `s` Parametr jest interpretowany przy użyciu kombinacji <xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType> i <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flag. Oznacza to, że biały znak i separatory tysięczne są dozwolone, ale symbole walut nie. Umożliwia jawne zdefiniowanie elementów (np. symbole walut, tysięcy separatory i biały znak), mogą być obecne w `s`, użyj <xref:System.Single.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Single%40%29> przeciążenie metody.  
  
 `s` Parametru jest analizowany przy użyciu informacje o formatowaniu w <xref:System.Globalization.NumberFormatInfo> inicjowanym dla bieżącej kultury systemu. Aby uzyskać więcej informacji, zobacz <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>. Aby przeanalizować ciąg za pomocą informacje o formatowaniu niektórych innych określonych kultury, należy użyć <xref:System.Single.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Single%40%29> przeciążenie metody.  
  
 Normalnie Jeśli przekażesz <xref:System.Single.TryParse%2A?displayProperty=nameWithType> typu ciąg, który jest tworzony przez wywołanie metody <xref:System.Single.ToString%2A?displayProperty=nameWithType> metody, oryginalnym <xref:System.Single> zwracana jest wartość. Jednak ze względu na utratę precyzji wartości mogą być różne.  
  
 Jeśli separator w `s` parametru podczas operacji analizowania i odpowiednia Waluta lub liczba dziesiętna oraz separatory grupy są takie same, operacja analizy zakłada, że separator jest separator dziesiętny, a nie grupą separator. Aby uzyskać więcej informacji dotyczących separatorów, zobacz <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, i <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Single.TryParse%28System.String%2CSystem.Single%40%29> metod konwertowania ciągów reprezentujących wartości liczbowe <xref:System.Single> wartości. Zakłada się, że bieżąca kultura en US.  
  
 [!code-csharp[System.Single.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.tryparse/cs/tryparse1.cs#1)]
 [!code-vb[System.Single.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.tryparse/vb/tryparse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.Parse(System.String)" />
        <altmember cref="M:System.Single.ToString" />
        <related type="Article" href="~/docs/standard/base-types/parsing-numeric.md">Analizowanie ciągów liczbowych na platformie .NET</related>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, System.Globalization.NumberStyles style, IFormatProvider provider, out float result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] float32&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), style As NumberStyles, provider As IFormatProvider, ByRef result As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, System::Globalization::NumberStyles style, IFormatProvider ^ provider, [Runtime::InteropServices::Out] float % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * System.Globalization.NumberStyles * IFormatProvider *  -&gt; bool" Usage="System.single.TryParse (s, style, provider, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.Single" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="style">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, System.Globalization.NumberStyles style, IFormatProvider provider, out float result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] float32&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, style As NumberStyles, provider As IFormatProvider, ByRef result As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, System::Globalization::NumberStyles style, IFormatProvider ^ provider, [Runtime::InteropServices::Out] float % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * System.Globalization.NumberStyles * IFormatProvider *  -&gt; bool" Usage="System.single.TryParse (s, style, provider, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.Single" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg reprezentujący liczbę do przekonwertowania.</param>
        <param name="style">Bitowa kombinacja wartości wyliczenia wskazująca dozwolony format parametru <paramref name="s" />. To typowa wartość do określenia <see cref="F:System.Globalization.NumberStyles.Float" /> w połączeniu z <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
        <param name="provider">Obiekt, który dostarcza specyficzne dla kultury informacje o formatowaniu <paramref name="s" />.</param>
        <param name="result">Po powrocie z tej metody zawiera odpowiadające wartości liczbowej lub zawarte w symbolu liczba zmiennoprzecinkowa pojedynczej precyzji <paramref name="s" />, jeśli konwersja powiodła się lub zero, jeśli konwersja nie powiodła się. Jeśli konwersja nie powiedzie się <paramref name="s" /> parametr jest <see langword="null" /> lub <see cref="F:System.String.Empty" />, nie jest w formacie, które są zgodne z <paramref name="style" />, reprezentuje liczbę mniej niż <see cref="F:System.Single.MinValue" /> lub większa niż <see cref="F:System.Single.MaxValue" />, lub jeśli <paramref name="style" /> nie jest prawidłowym kombinacja <see cref="T:System.Globalization.NumberStyles" /> wyliczone stałe. Ten parametr jest przekazywany jako niezainicjowany; dowolna wartość pierwotnie podane w <paramref name="result" /> zostaną zastąpione.</param>
        <summary>Konwertuje ciąg reprezentujący liczbę na określony styl i formatowanie specyficzne dla kultury na odpowiadającą mu pojedynczej precyzji liczbę zmiennoprzecinkową. Zwracana wartość wskazuje, czy konwersja powiodła się czy nie.</summary>
        <returns><see langword="true" /> Jeśli <paramref name="s" /> został przekonwertowany pomyślnie; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To przeciążenie różni się od <xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> metody, zwracając wartość logiczną, wskazującą, czy operacja analizy powiodło się. zamiast zwracać przeanalizowana wartość liczbową. Eliminuje to potrzebę używania wyjątków do testowania <xref:System.FormatException> w przypadku gdy `s` jest nieprawidłowy i nie można pomyślnie przeanalizować.  
  
 `style` Parametr definiuje dozwolony format parametru `s` parametr jako warunek powodzenia operacji analizy. Musi być kombinacją flag bitowych z <xref:System.Globalization.NumberStyles> wyliczenia. Następujące <xref:System.Globalization.NumberStyles> elementy członkowskie nie są obsługiwane:  
  
-   <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>  
  
-   <xref:System.Globalization.NumberStyles.HexNumber?displayProperty=nameWithType>  
  
 `s` Parametru może zawierać <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A> dla kultury, wskazywanym przez `provider`. Ponadto, w zależności od wartości `style`, `s` parametru może zawierać następujące elementy:  
  
 [ws] [$] [znak] [-całkowite,] całkowite [.fractional cyfr] [e [znak] wykładniczego cyfry-] [ws]  
  
 Elementy w nawiasach kwadratowych ([ i ]) są opcjonalne. W tabeli poniżej opisano każdy element.  
  
|Element|Opis|  
|-------------|-----------------|  
|*ws*|Opcjonalny odstęp. Odstęp może występować na początku `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flagi. Może wystąpić na końcu `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flagi.|  
|*$*|Symbol waluty specyficzny dla kultury. Jego pozycja w ciągu jest definiowana przez <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> lub <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> właściwości <xref:System.Globalization.NumberFormatInfo> obiektu zwróconego przez <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> metody `provider` parametru. Symbol waluty może znajdować się w `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flagi.|  
|*sign*|Opcjonalny znak. Znak może występować na początku `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flagę która może znajdować się na końcu `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flagi. Nawiasy mogą być używane w `s` do wskazania wartości ujemnej, jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flagi.|  
|*cyfry całkowite*|Ciąg cyfr od 0 do 9, które określają jej część całkowitą. Cyfry całkowite mogą być nieobecne w przypadku cyfr ułamkowych.|  
|*,*|Symbol separatora tysięcy specyficzny dla kultury. Tysięcznego bieżącej kultury symbol separatora może znajdować się w `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flagi.|  
|*.*|Symbol dziesiętny specyficzny dla kultury. Symbol separatora dziesiętnego bieżącej kultury może znajdować się w `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flagi.|  
|*cyfry ułamkowe*|Ciąg cyfr od 0 do 9, które określają część ułamkową liczby. Cyfry ułamkowe mogą pojawiać się w `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flagi.|  
|*e*|E lub znak E, co oznacza, że `s` może reprezentować liczbę za pomocą notacji wykładniczej. `s` Parametr może reprezentować liczbę w zapisie wykładniczym, jeśli zawiera style <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flagi.|  
|*wykładniczy cyfr*|Ciąg cyfr od 0 do 9, które określają wykładnik potęgi.|  
  
> [!NOTE]
> Wszystkie znaki (U + 0000) NUL kończącego w `s` są ignorowane przez operacji analizowania, bez względu na wartość `style` argumentu.

 Ciąg zawierający tylko cyfry (co odpowiada <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> styl) zawsze przeanalizowany pomyślnie. Pozostałe <xref:System.Globalization.NumberStyles?displayProperty=nameWithType> składowych kontroluje elementy, które mogą być, ale nie muszą być obecne w ciągu wejściowym. Poniższa tabela wskazuje, jak poszczególne <xref:System.Globalization.NumberStyles> flagi wpływają na elementy, które mogą być obecne w `s`.  
  
|Wartość wyliczenia NumberStyles|Dodatkowe (poza cyframi) elementy dozwolone w parametrze s|  
|------------------------|---------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|*Cyfry całkowite* tylko element.|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|*.* i *cyfr ułamkowych, jaka* elementów.|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|`s` Parametru można również użyć notacji wykładniczej. Ta flaga samodzielnie obsługuje wartości w postaci *cyfry całkowite*E*wykładniczego cyfr*; dodatkowe flagi są potrzebne, aby pomyślnie przeanalizować ciągi w zapisie wykładniczym za pomocą elementów takich, jak dodatnie lub ujemne znaki i symbole przecinka dziesiętnego.|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|*Ws* element na początku `s`.|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|*Ws* element na końcu `s`.|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|*Logowania* element na początku `s`.|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|*Logowania* element na końcu `s`.|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|*Logowania* elementu w postaci nawiasów obejmujących wartość liczbową.|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|*,* Elementu.|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|*$* Elementu.|  
|<xref:System.Globalization.NumberStyles.Currency>|Wszystkie. `s` Parametru nie może reprezentować liczby szesnastkowej ani liczby w zapisie wykładniczym.|  
|<xref:System.Globalization.NumberStyles.Float>|*Ws* element na początku lub końcu `s`, *logowania* na początku `s`i *.* symbol. `s` Parametru można również użyć notacji wykładniczej.|  
|<xref:System.Globalization.NumberStyles.Number>|`ws`, `sign`, Tysięcy separatora (*,),* i separator dziesiętny (*.*) elementów.|  
|<xref:System.Globalization.NumberStyles.Any>|Wszystkie style, z wyjątkiem `s` nie może reprezentować liczby szesnastkowej.|  
  
 `provider` Parametr jest <xref:System.IFormatProvider> implementacji którego <xref:System.IFormatProvider.GetFormat%2A> metoda zwraca <xref:System.Globalization.NumberFormatInfo> obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury. Gdy <xref:System.Single.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Single%40%29> metoda jest wywoływana, wywołuje `provider` parametru <xref:System.IFormatProvider.GetFormat%2A> metody i przekazuje je <xref:System.Type> obiekt, który reprezentuje <xref:System.Globalization.NumberFormatInfo> typu. <xref:System.IFormatProvider.GetFormat%2A> Następnie metoda zwraca <xref:System.Globalization.NumberFormatInfo> obiekt, który zawiera informacje o formacie parametru `s` parametru. Istnieją trzy sposoby na wykorzystanie `provider` parametru jako źródła informacji o niestandardowym formatowaniu do operacji analizy:  
  
-   Możesz przekazać <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje kulturę dostarczającą informacje o formatowaniu. Jego <xref:System.Globalization.CultureInfo.GetFormat%2A> metoda zwraca <xref:System.Globalization.NumberFormatInfo> obiektu, który dostarcza informacje o formatowaniu liczb dla tej kultury.  
  
-   Można przekazać faktyczny <xref:System.Globalization.NumberFormatInfo> obiektu, który dostarcza informacje o formatowaniu liczb. (Jego implementacja obiektu <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> zwraca samą siebie.)  
  
-   Można przekazać niestandardowy obiekt, który implementuje <xref:System.IFormatProvider>. Jego <xref:System.IFormatProvider.GetFormat%2A> metoda tworzy i zwraca <xref:System.Globalization.NumberFormatInfo> obiekt, który dostarcza informacje o formatowaniu.  
  
 Jeśli `provider` jest `null`, formatowanie `s` jest interpretowany na podstawie <xref:System.Globalization.NumberFormatInfo> obiekt bieżącej kultury.  
  
 Jeśli separator w `s` parametru podczas operacji analizowania i odpowiednia Waluta lub liczba dziesiętna oraz separatory grupy są takie same, operacja analizy zakłada, że separator jest separator dziesiętny, a nie grupą separator. Aby uzyskać więcej informacji dotyczących separatorów, zobacz <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, i <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano użycie <xref:System.Single.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Single%40%29?displayProperty=nameWithType> metodę, aby przeanalizować ciąg reprezentujący konkretnego stylu, który są formatowane przy użyciu konwencji kultury określonej liczby.  
  
 [!code-csharp[System.Single.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.tryparse/cs/tryparse1.cs#2)]
 [!code-vb[System.Single.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.tryparse/vb/tryparse1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="style" /> nie jest <see cref="T:System.Globalization.NumberStyles" /> wartość.  
  
—lub— 
 <paramref name="style" /> jest <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> wartość.</exception>
        <altmember cref="M:System.Single.Parse(System.String)" />
        <altmember cref="M:System.Single.ToString" />
        <related type="Article" href="~/docs/standard/base-types/parsing-numeric.md">Analizowanie ciągów liczbowych na platformie .NET</related>
      </Docs>
    </Member>
  </Members>
</Type>