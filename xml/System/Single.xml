<Type Name="Single" FullName="System.Single">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9f007d292930e5a2ba386c8f1b0546f60463ecec" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34452407" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct Single : IComparable, IComparable&lt;float&gt;, IConvertible, IEquatable&lt;float&gt;, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit float32 extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;float32&gt;, class System.IConvertible, class System.IEquatable`1&lt;float32&gt;, class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.Single" />
  <TypeSignature Language="VB.NET" Value="Public Structure Single&#xA;Implements IComparable, IComparable(Of Single), IConvertible, IEquatable(Of Single), IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public value class Single : IComparable, IComparable&lt;float&gt;, IConvertible, IEquatable&lt;float&gt;, IFormattable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.Single&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Single&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje liczbie zmiennoprzecinkowej pojedynczej precyzji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Single> Typu wartość reprezentuje liczbę 32-bitowych pojedynczej precyzji z wartościami, począwszy od ujemna 3, 402823E38 do dodatnią 3, 402823E38, zero dodatnie lub ujemne, <xref:System.Single.PositiveInfinity>, <xref:System.Single.NegativeInfinity>, a nie liczba (<xref:System.Single.NaN>). Jest on przeznaczony do reprezentują wartości, które są bardzo duże (na przykład odległości między planety lub galaxies) lub bardzo małych (na przykład masa cząsteczkowa substancji w kg) i do których często nieprecyzyjne (na przykład odległość od ziemi do innego systemu słoneczny ). <xref:System.Single> Typ jest zgodny z 60559:1989 IEC (IEEE-754) standard binarny arytmetyczne zmiennoprzecinkowych.  
  
 Ten temat składa się z następujących sekcji:  
  
-   [Odwzorowanie liczby zmiennoprzecinkowej i dokładność](#Precision)  
  
-   [Testowanie pod kątem równości](#Equality)  
  
-   [Wartości zmiennoprzecinkowych i wyjątków](#Exceptions)  
  
-   [Konwersja typów i struktura Single](#Conversion)  
  
-   [Funkcje liczb zmiennoprzecinkowych](#Functionality)  
  
 <xref:System.Single?displayProperty=nameWithType> udostępnia metody do porównania wystąpień tego typu, aby przekonwertować wartość wystąpienia reprezentacji ciągu, aby przekonwertować reprezentację liczby wystąpienia tego typu. Uzyskać informacji na temat sposobu kody specyfikacji formatu kontrolowania reprezentację ciągu typów wartości, zobacz [typy formatowania](~/docs/standard/base-types/formatting-types.md), [standardowe ciągi formatu liczbowego](~/docs/standard/base-types/standard-numeric-format-strings.md), i [niestandardowe numeryczne Ciągi formatujące](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
<a name="Precision"></a>   
## <a name="floating-point-representation-and-precision"></a>Reprezentacja liczb zmiennoprzecinkowych i precyzja  
 <xref:System.Single> — Typ danych przechowuje wartości zmiennoprzecinkowych pojedynczej precyzji w 32-bitowy format binarny, jak pokazano w poniższej tabeli:  
  
|Część|Bity|  
|----------|----------|  
|Mantysy lub mantysy|0-22|  
|Wykładnik|23-30|  
|Znak (0 = dodatnie, 1 = ujemna)|31|  
  
 Podobnie jak ułamków dziesiętnych występują problemy dotyczące dokładnie reprezentować niektórych ułamkowa (takich jak 1/3 lub <xref:System.Math.PI?displayProperty=nameWithType>), binarne ułamków są w stanie reprezentować niektórych ułamkowych wartości. Na przykład 2: 10, która jest reprezentowana przez dokładne.2 jako ułamek dziesiętny, jest reprezentowana przez.0011111001001100 jako ułamek binarnego, z wzorca "1100" powtarzające się poza zakresem. W takim przypadku wartość zmiennoprzecinkowa zawiera nieprecyzyjną reprezentację liczba, która reprezentuje. Wykonywanie dodatkowych operacji matematycznych w oryginalnej wartości zmiennoprzecinkowych często zwiększa jego brak dokładności. Na przykład jeśli Porównaj wyniki mnożąc.3 przez 10 i dodawanie.3 do.3 dziewięciokrotnie, zobaczysz tego ciągu tworzy mniej dokładne wyniku, ponieważ obejmuje ona osiem więcej czynności niż mnożenia. Należy pamiętać, że tej różnicy widoczne tylko, jeśli wyświetlanie dwa <xref:System.Single> wartości za pomocą "R" [ciągu standardowego formatu liczbowego](~/docs/standard/base-types/standard-numeric-format-strings.md), która jeśli to konieczne, wyświetla wszystkie 9 cyfr precyzji obsługiwane przez <xref:System.Single> typu.  
  
 [!code-csharp[System.Single.Structure#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/representation1.cs#3)]
 [!code-vb[System.Single.Structure#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/representation1.vb#3)]  
  
 Ponieważ niektóre liczby nie może być reprezentowany dokładnie ułamkowych wartości binarne, liczby zmiennoprzecinkowe mogą tylko przybliżonej liczb rzeczywistych.  
  
 Liczby zmiennoprzecinkowe wszystkie mają ograniczoną liczbę cyfr znaczących, który określa również sposób dokładnie wartość zmiennoprzecinkowa przybliża liczba rzeczywista. A <xref:System.Single> wartość ma maksymalnie 7 cyfr dziesiętnych precyzji, mimo że maksymalnie 9 cyfr jest obsługiwany wewnętrznie. Oznacza to, że niektóre operacje zmiennoprzecinkowe może nie dokładność, aby zmienić wartość zmiennoprzecinkową. Poniższy przykład definiuje duża wartość zmiennoprzecinkową o pojedynczej dokładności, a następnie dodanie iloczyn <xref:System.Single.Epsilon?displayProperty=nameWithType> i biliard do niego. Jednak produkt jest za mały, aby zmodyfikować oryginalne wartości zmiennoprzecinkowych. Jej najmniej znaczący cyfrowego jest tysięcznych, 1 jest najbardziej znaczących cyfr w produkcie<sup>-312</sup>.  
  
 [!code-csharp[System.Single.Structure#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/representation2.cs#4)]
 [!code-vb[System.Single.Structure#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/representation2.vb#4)]  
  
 Dokładność ograniczona liczba zmiennoprzecinkowa ma kilka konsekwencje:  
  
-   Dwie liczb zmiennoprzecinkowych, które są wyświetlane takie same dla określonej dokładności nie może porównać taki sam, ponieważ ich co najmniej cyfr znaczących są różne. W poniższym przykładzie sumowane szereg numerów, a ich razem jest porównywana z ich oczekiwana suma. Mimo że te dwie wartości wydają się być takie same, wywołanie `Equals` metoda wskazuje, że nie są one.  
  
     [!code-csharp[System.Single.Structure#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/precisionlist3.cs#6)]
     [!code-vb[System.Single.Structure#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/precisionlist3.vb#6)]  
  
     W przypadku zmiany elementów format <xref:System.Console.WriteLine%28System.String%2CSystem.Object%2CSystem.Object%29?displayProperty=nameWithType> instrukcji z `{0}` i `{1}` do `{0:R}` i `{1:R}` do wyświetlenia wszystkich cyfr znaczących dwóch <xref:System.Single> wartości, jest jasne, czy dwie wartości nie są równe ponieważ utraty dokładności podczas operacji dodawania. W takim wypadku problem można rozwiązać przez wywołanie metody <xref:System.Math.Round%28System.Double%2CSystem.Int32%29?displayProperty=nameWithType> metody zostać zaokrąglona <xref:System.Single> wartości do żądanego dokładności przed wykonaniem porównania.  
  
-   Operacji matematycznych i porównania, która korzysta liczba zmiennoprzecinkowa może nie uzyskanie takiego samego wyniku Jeśli używana jest liczbą dziesiętną, ponieważ binarne liczbie zmiennoprzecinkowej może nie być równa liczbę dziesiętną. Poprzednim przykładzie pokazano to wyświetlania wyniku pomnożenie.3 przez 10 i dodawanie.3 do.3 dziewięciokrotnie.  
  
     Gdy dokładność w operacjach numerycznych wartości ułamkowych jest ważne, użyj <xref:System.Decimal> wpisz zamiast <xref:System.Single> typu. Gdy dokładność w operacjach numerycznych wartości całkowite poza zakres <xref:System.Int64> lub <xref:System.UInt64> typów jest ważne, użyj <xref:System.Numerics.BigInteger> typu.  
  
-   Wartość może nie obustronne, jeśli liczba zmiennoprzecinkowa. Jeśli operacja konwertuje oryginalna liczba zmiennoprzecinkowa na innej formy, odwrotność operacji przekształca przekonwertowanego formularza do liczba zmiennoprzecinkowa i końcowego liczba zmiennoprzecinkowa jest taki sam, jak oryginalna wartość przedstawiono przesyłania danych Liczba zmiennoprzecinkowa. Obie strony może się nie powieść, ponieważ co najmniej jeden lub więcej cyfr znaczących zostały utracone lub zmienione w konwersji. W poniższym przykładzie trzy <xref:System.Single> wartości są konwertowane na ciągi i zapisywane w pliku. Jako dane wyjściowe zawierają, mimo że wartości wydają się być taki sam, przywrócone wartości nie są równe oryginalnych wartości.  
  
     [!code-csharp[System.Single.Structure#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/precisionlist4a.cs#17)]
     [!code-vb[System.Single.Structure#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/PrecisionList4a.vb#17)]  
  
     W tym przypadku wartości mogą być pomyślnie zwrotnego za pomocą "G9" [ciągu standardowego formatu liczbowego](~/docs/standard/base-types/standard-numeric-format-strings.md) zachować pełną dokładność <xref:System.Single> wartości, jak przedstawiono w następującym przykładzie.  
  
     [!code-csharp[System.Single.Structure#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/PrecisionList5a.cs#18)]
     [!code-vb[System.Single.Structure#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/PrecisionList5a.vb#18)]  
  
-   <xref:System.Single> wartości mają dokładności mniejszej niż <xref:System.Double> wartości. A <xref:System.Single> wartość, która jest konwertowana na pozornie równoważne <xref:System.Double> często nie jest równa <xref:System.Double> wartość z powodu różnic w dokładności. W poniższym przykładzie, wynik operacji dzielenia identyczne jest przypisany do <xref:System.Double> wartość i <xref:System.Single> wartość. Po <xref:System.Single> wartość jest rzutowane na <xref:System.Double>, porównanie dwóch wartości pokazuje, że są one nierówne.  
  
     [!code-csharp[System.Double.Structure#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/precisionlist1.cs#5)]
     [!code-vb[System.Double.Structure#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/precisionlist1.vb#5)]  
  
     Aby uniknąć tego problemu, albo użyć <xref:System.Double> zamiast typów danych <xref:System.Single> — typ danych lub użyj <xref:System.Math.Round%2A> metody, aby obie wartości mają tej samej precyzji.  
  
<a name="Equality"></a>   
## <a name="testing-for-equality"></a>Testowanie pod kątem równości  
 Wziąć pod uwagę taki sam, dwa <xref:System.Single> wartości musi reprezentować identyczne wartości. Jednak z powodu różnic w dokładności wartości lub z powodu utraty dokładności przez jeden lub oba wartości zmiennoprzecinkowych wartości, które powinny być identyczne często stają się nierówne z powodu różnic w ich co najmniej cyfr znaczących. W związku z tym wywołań <xref:System.Single.Equals%2A> metodę, aby sprawdzić, czy dwie wartości są równe lub wywołań <xref:System.Single.CompareTo%2A> metodę, aby określić relacji między dwiema <xref:System.Single> wartości, często dać nieoczekiwane wyniki. Jest to widoczne w poniższym przykładzie, gdy dwa najwyraźniej równa <xref:System.Single> wartości stają się nierówne, ponieważ pierwsza wartość ma 7 cyfr precyzji, podczas gdy druga wartość ma 9.  
  
 [!code-csharp[System.Single.Structure#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/comparison1.cs#9)]
 [!code-vb[System.Single.Structure#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/comparison1.vb#9)]  
  
 Obliczone wartości, które należy wykonać różne ścieżki i często, które są przetwarzane w różnych sposobów udowodnić, będą traktowane jako różne. W poniższym przykładzie jeden <xref:System.Single> kwadrat jest wartość i obliczany jako pierwiastek kwadratowy przywrócić oryginalną wartość. Drugi <xref:System.Single> jest mnożona przez 3.51 i kwadrat przed pierwiastek kwadratowy wyniku jest podzielona przez 3.51, aby przywrócić oryginalną wartość. Mimo że te dwie wartości mogą być identyczne, wywołanie <xref:System.Single.Equals%28System.Single%29> metoda wskazuje, że nie są takie same. Przy użyciu ciągu standardowym formatem "G9" do zwrócenia wyniku ciąg, który wyświetla cyfr znaczących każdego <xref:System.Single> wartość wskazuje, że druga wartość jest.0000000000001 mniej niż pierwszy.  
  
 [!code-csharp[System.Single.Structure#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/comparison2.cs#10)]
 [!code-vb[System.Single.Structure#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/comparison2.vb#10)]  
  
 W przypadku utraty dokładności może mieć wpływ na wynik porównania, można użyć poniższych zamiast wywoływać metodę <xref:System.Single.Equals%2A> lub <xref:System.Single.CompareTo%2A> metody:  
  
-   Wywołanie <xref:System.Math.Round%2A?displayProperty=nameWithType> metody upewnij się, że obie wartości mają tej samej precyzji. Poniższy przykład modyfikuje poprzedniego przykładu do tej metody należy użyć, aby dwie wartości ułamkowych są równoważne.  
  
     [!code-csharp[System.Single.Structure#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/comparison3.cs#11)]
     [!code-vb[System.Single.Structure#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/comparison3.vb#11)]  
  
     Należy pamiętać, że problem dokładności nadal mają zastosowanie zaokrąglanie wartości środkową. Aby uzyskać więcej informacji, zobacz <xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29?displayProperty=nameWithType> metody.  
  
-   Testowanie równości przybliżonej zamiast równości. Ta metoda wymaga zdefiniowania albo bezwzględnym kwota za pomocą którego można nadal ale różnią się dwie wartości, lub zdefiniuj względną ilość za pomocą którego mniejszą wartość można różnią się od wyższej wartości.  
  
    > [!WARNING]
    >  <xref:System.Single.Epsilon?displayProperty=nameWithType> Czasami jest używany jako środek bezwzględną odległość między dwoma <xref:System.Single> wartości podczas testowania pod kątem równości.  Jednak <xref:System.Single.Epsilon?displayProperty=nameWithType> mierzy najmniejsza możliwa wartość, która może być dodany do lub odjęcia od, <xref:System.Single> którego wartość wynosi zero. Dla większości dodatnie i ujemne <xref:System.Single> wartości, wartość <xref:System.Single.Epsilon?displayProperty=nameWithType> jest za mały, aby zostało wykryte. W związku z tym z wyjątkiem wartości zero, zaleca się jego użycia w testach pod kątem równości.  
  
     W poniższym przykładzie użyto drugie podejście do definiowania `IsApproximatelyEqual` metodę, która sprawdza względną różnicę między dwiema wartościami. Również uwidocznia wynik wywołania `IsApproximatelyEqual` — metoda i <xref:System.Single.Equals%28System.Single%29> metody.  
  
     [!code-csharp[System.Single.Structure#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/comparison4.cs#12)]
     [!code-vb[System.Single.Structure#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/comparison4.vb#12)]  
  
<a name="Exceptions"></a>   
## <a name="floating-point-values-and-exceptions"></a>Wartości zmiennoprzecinkowe i wyjątki  
 Operacje przy użyciu wartości zmiennoprzecinkowych nie zgłaszają wyjątki, w przeciwieństwie do operacji z typów całkowitych, które zgłaszają wyjątki w przypadku niedozwolony operacji, takich jak dzielenie przez zero lub przepełnienie.  Zamiast tego w takich przypadkach wynik operacji zmiennoprzecinkowej jest zero, nieskończoności dodatniej, nieskończoności ujemnej lub niebędące liczbą (NaN):  
  
-   Jeśli wynik operacji zmiennoprzecinkowej jest za mała dla wartości docelowej format, wynik wynosi zero. Taka sytuacja może wystąpić, gdy dwie liczb zmiennoprzecinkowych bardzo małych są mnożone, jak przedstawiono na poniższym przykładzie.  
  
     [!code-csharp[System.Single.Structure#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/exceptional1.cs#1)]
     [!code-vb[System.Single.Structure#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/exceptional1.vb#1)]  
  
-   Jeśli wielkość wynik operacji zmiennoprzecinkowej przekracza zakres format docelowy, wynik operacji jest <xref:System.Single.PositiveInfinity> lub <xref:System.Single.NegativeInfinity>odpowiednio symbolu wyniku. Wynik operacji przepełnienia <xref:System.Single.MaxValue?displayProperty=nameWithType> jest <xref:System.Single.PositiveInfinity>i wynik operacji przepełnienia <xref:System.Single.MinValue?displayProperty=nameWithType> jest <xref:System.Single.NegativeInfinity>, jak pokazano na poniższym przykładzie.  
  
     [!code-csharp[System.Single.Structure#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/exceptional2.cs#2)]
     [!code-vb[System.Single.Structure#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/exceptional2.vb#2)]  
  
     <xref:System.Single.PositiveInfinity> powoduje również z dzielenia przez zero z dzielna dodatnią, i <xref:System.Single.NegativeInfinity> wynikiem dzielenia przez zero z ujemną dzielna.  
  
-   Jeśli operacji zmiennoprzecinkowej jest nieprawidłowa, wynik operacji jest <xref:System.Single.NaN>. Na przykład <xref:System.Single.NaN> wyniki z następujących czynności:  
  
    -   Dzielenie przez zero z dzielna zero. Należy pamiętać, że inne przypadków dzielenia przez zero wynik albo <xref:System.Single.PositiveInfinity> lub <xref:System.Single.NegativeInfinity>.  
  
    -   Żadnych operacji zmiennoprzecinkowej z nieprawidłowe dane wejściowe. Na przykład próby znalezienia, Zwraca pierwiastek kwadratowy wartości ujemnej <xref:System.Single.NaN>.  
  
    -   Wszelkie operacje z argumentem, którego wartość jest <xref:System.Single.NaN?displayProperty=nameWithType>.  
  
<a name="Conversion"></a>   
## <a name="type-conversions-and-the-single-structure"></a>Konwersje i struktura Single  
 <xref:System.Single> Struktury nie definiuje żadnych operatory konwersji jawnych ani niejawnych; zamiast tego konwersje są implementowane przez kompilator.  
  
 W poniższej tabeli wymieniono możliwości konwersji wartości innych pierwotne typy liczbowe do <xref:System.Single> wartość wskazuje ona także, czy rozszerzanie lub zawężanie konwersji oraz czy powstałe w ten sposób <xref:System.Single> może być mniejsza dokładność niż Oryginalna wartość.  
  
|Konwersja z|Rozszerzanie zawężanie|Możliwa utrata dokładności|  
|---------------------|-------------------------|--------------------------------|  
|<xref:System.Byte>|Widening|Nie|  
|<xref:System.Decimal>|Widening<br /><br /> Należy pamiętać, że C# wymaga operatora rzutowania.|Tak. <xref:System.Decimal> obsługuje 29 cyfr dziesiętnych precyzji; <xref:System.Single> obsługuje 9.|  
|<xref:System.Double>|Zawężanie; wartości spoza zakresu są konwertowane na <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> lub <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>.|Tak. <xref:System.Double> obsługuje 17 cyfr dziesiętnych precyzji; <xref:System.Single> obsługuje 9.|  
|<xref:System.Int16>|Widening|Nie|  
|<xref:System.Int32>|Widening|Tak. <xref:System.Int32> obsługuje 10 cyfr dziesiętnych precyzji; <xref:System.Single> obsługuje 9.|  
|<xref:System.Int64>|Widening|Tak. <xref:System.Int64> obsługuje 19 cyfr dziesiętnych precyzji; <xref:System.Single> obsługuje 9.|  
|<xref:System.SByte>|Widening|Nie|  
|<xref:System.UInt16>|Widening|Nie|  
|<xref:System.UInt32>|Widening|Tak. <xref:System.UInt32> obsługuje 10 cyfr dziesiętnych precyzji; <xref:System.Single> obsługuje 9.|  
|<xref:System.UInt64>|Widening|Tak. <xref:System.Int64> obsługuje 20 cyfr dziesiętnych precyzji; <xref:System.Single> obsługuje 9.|  
  
 Poniższy przykład konwertuje wartości minimalnej lub maksymalnej innych typów numerycznych pierwotnych do <xref:System.Single> wartości.  
  
 [!code-csharp[System.Single.Structure#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/convert1.cs#20)]
 [!code-vb[System.Single.Structure#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/convert1.vb#20)]  
  
 Ponadto <xref:System.Double> wartości <xref:System.Double.NaN?displayProperty=nameWithType>, <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, i <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> do konwertowania <xref:System.Single.NaN?displayProperty=nameWithType>, <xref:System.Single.PositiveInfinity?displayProperty=nameWithType>, i <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>odpowiednio.  
  
 Należy pamiętać, że konwersji wartości niektóre typy liczbowe do <xref:System.Single> wartość może pociągać za sobą zmniejszenie precyzji. Jak pokazano w przykładzie podczas konwertowania możliwe jest zmniejszenie precyzji <xref:System.Decimal>, <xref:System.Double>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.UInt32>, i <xref:System.UInt64> wartości do <xref:System.Single> wartości.  
  
 Konwersja typu <xref:System.Single> do wartości <xref:System.Double> jest konwersję rozszerzającą. Konwersja może spowodować utratę dokładności, jeśli <xref:System.Double> typ nie ma reprezentacji dokładne <xref:System.Single> wartość.  
  
 Konwersja typu <xref:System.Single> wartości innych niż wartość wszystkie pierwotne dane typu liczbowego <xref:System.Double> jest konwersji zawężającej i wymaga operatora rzutowania (w języku C#) lub metody konwersji (w języku Visual Basic). Wartości, które są poza zakresem typu danych docelowych, zdefiniowane w typie docelowym `MinValue` i `MaxValue` właściwości, zachowują się, jak pokazano w poniższej tabeli.  
  
|Typ docelowy|Wynik|  
|-----------------|------------|  
|Dowolnego typu całkowitego|<xref:System.OverflowException> Wyjątków w przypadku konwersji w kontekście zaznaczenia.<br /><br /> W przypadku konwersji w kontekście unchecked (ustawienie domyślne w języku C#), operacji konwersji zakończy się pomyślnie, ale wartość przepełnienia.|  
|<xref:System.Decimal>|<xref:System.OverflowException> Wyjątku,|  
  
 Ponadto <xref:System.Single.NaN?displayProperty=nameWithType>, <xref:System.Single.PositiveInfinity?displayProperty=nameWithType>, i <xref:System.Single.NegativeInfinity?displayProperty=nameWithType> throw <xref:System.OverflowException> podczas konwersji na liczby całkowite w kontekście zaznaczone, ale te przepełnienie wartości po konwersji na liczby całkowite w kontekście niezaznaczone. Podczas konwersji do <xref:System.Decimal>, zawsze zgłaszał <xref:System.OverflowException>. Podczas konwersji do <xref:System.Double>, konwertują do <xref:System.Double.NaN?displayProperty=nameWithType>, <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, i <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>odpowiednio.  
  
 Należy pamiętać, że zmniejszenie precyzji mogą być wynikiem konwersji <xref:System.Single> wartość do innego typu liczbowego. W przypadku konwertowania niecałkowity <xref:System.Single> wartości, jak pokazano na dane wyjściowe z przykładu, ułamkowych części jest utracone podczas <xref:System.Single> wartość jest zaokrąglana (tak jak w języku Visual Basic) lub obcięta (jak C#). Podczas konwersji do <xref:System.Decimal> wartości, <xref:System.Single> wartość nie może mieć dokładne reprezentacja w docelowy typ danych.  
  
 Poniższy przykład konwertuje wiele <xref:System.Single> wartości do kilku typów liczbowych. Konwersje występuje w kontekście zaznaczone w języku Visual Basic (ustawienie domyślne), a w języku C# (z powodu [zaznaczone](~/docs/csharp/language-reference/keywords/checked.md) — słowo kluczowe). Dane wyjściowe z przykładu przedstawia wynik konwersji w obu wyewidencjonowany kontekst niezaznaczone. W kontekście niezaznaczone w języku Visual Basic można wykonać konwersji przy kompilacji z `/removeintchecks+` przełącznika kompilatora i języka C#, przez dodawanie komentarza limit `checked` instrukcji.  
  
 [!code-csharp[System.Single.Structure#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/convert2.cs#21)]
 [!code-vb[System.Single.Structure#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/convert2.vb#21)]  
  
 Aby uzyskać więcej informacji o konwersji liczbowych typów, zobacz [typ konwersji w programie .NET Framework](~/docs/standard/base-types/type-conversion.md) i [tabele konwersji typów](~/docs/standard/base-types/conversion-tables.md).  
  
<a name="Functionality"></a>   
## <a name="floating-point-functionality"></a>Funkcje zmiennoprzecinkowe  
 <xref:System.Single> Struktury i powiązanych typów udostępniają metody służące do wykonywania następujących kategorii działań:  
  
-   **Porównanie wartości**. Możesz wywołać <xref:System.Single.Equals%2A> metodę, aby określić, czy dwa <xref:System.Single> wartości są równe, lub <xref:System.Single.CompareTo%2A> metodę, aby określić relacji między dwiema wartościami.  
  
     <xref:System.Single> Struktury obsługuje również kompletny zestaw operatory porównania. Można na przykład testu równości i nierówności lub określić, czy jedną wartość jest większa niż lub równa wartości innego. Jeśli jeden z argumentów jest <xref:System.Double>, <xref:System.Single> wartość jest konwertowana na <xref:System.Double> przed wykonaniem operacji porównania. Jeśli jeden z argumentów jest typem całkowitym, jest konwertowana na <xref:System.Single> przed wykonaniem operacji porównania. Chociaż są one rozszerzanie konwersji, mogą one spowodować utratę dokładności.  
  
    > [!WARNING]
    >  Z powodu różnic w dokładność dwa <xref:System.Single> wartości, które mają być równe może stają się nierówne, co ma wpływ na wynik porównania. Zobacz [testowanie pod kątem równości](#Equality) sekcji, aby uzyskać więcej informacji na temat porównanie dwóch <xref:System.Single> wartości.  
  
     Możesz także wywołać <xref:System.Single.IsNaN%2A>, <xref:System.Single.IsInfinity%2A>, <xref:System.Single.IsPositiveInfinity%2A>, i <xref:System.Single.IsNegativeInfinity%2A> metody do testowania dla tych wartości specjalnych.  
  
-   **Operacji matematycznych**. Typowe operacje arytmetyczne, takie jak dodawanie, odejmowanie mnożenia i dzielenia są implementowane przez Kompilatory języka i instrukcje wspólnego języka pośredniego (CIL), a nie przez <xref:System.Single> metody. Jeśli argument operacji w ramach operacji matematycznych jest <xref:System.Double>, <xref:System.Single> jest konwertowana na <xref:System.Double> przed wykonywania operacji, a wynik operacji jest również <xref:System.Double> wartość. Jeśli argument operacji jest typem całkowitym, jest konwertowana na <xref:System.Single> przed wykonywania operacji, a wynik operacji jest również <xref:System.Single> wartość.  
  
     Można wykonać innych operacji matematycznych, wywołując `static` (`Shared` w języku Visual Basic) metod w <xref:System.Math?displayProperty=nameWithType> klasy. Obejmują one dodatkowe metody powszechnie używane dla arytmetyczne (takie jak <xref:System.Math.Abs%2A?displayProperty=nameWithType>, <xref:System.Math.Sign%2A?displayProperty=nameWithType>, i <xref:System.Math.Sqrt%2A?displayProperty=nameWithType>), geometrii (takich jak <xref:System.Math.Cos%2A?displayProperty=nameWithType> i <xref:System.Math.Sin%2A?displayProperty=nameWithType>) i calculus (takie jak <xref:System.Math.Log%2A?displayProperty=nameWithType>).  We wszystkich przypadkach <xref:System.Single> wartość jest konwertowana na <xref:System.Double>.  
  
     Można również manipulować wszystkie bity w <xref:System.Single> wartość. <xref:System.BitConverter.GetBytes%28System.Single%29?displayProperty=nameWithType> Metoda zwraca jego wzorca bitowego w tablicy bajtów.  Przez przekazanie tablicy bajtów do <xref:System.BitConverter.ToInt32%2A?displayProperty=nameWithType> metody, można także zachować <xref:System.Single> wartość elementu wzorzec bitów w 32-bitową liczbę całkowitą.  
  
-   **Zaokrąglanie**. Zaokrąglanie jest często używana jako technika zmniejszenia wpływu różnice między wartościami spowodowane przez problemy odwzorowanie liczby zmiennoprzecinkowej i dokładności. Można zaokrąglona <xref:System.Single> wartości przez wywołanie metody <xref:System.Math.Round%2A?displayProperty=nameWithType> metody. Jednak należy pamiętać, że <xref:System.Single> wartość jest konwertowana na <xref:System.Double> przed wywołania metody, a konwersja może pociągać za sobą zmniejszenie precyzji.  
  
-   **Formatowanie**. Można przekonwertować <xref:System.Single> wartość do reprezentacji ciągu wywołując <xref:System.Single.ToString%2A> metody lub za pomocą [złożone formatowanie](~/docs/standard/base-types/composite-formatting.md) funkcji. Uzyskać informacji na temat sposobu ciągi formatujące kontrolowania reprezentację ciągu wartości zmiennoprzecinkowych, zobacz [standardowe ciągi formatu liczbowego](~/docs/standard/base-types/standard-numeric-format-strings.md) i [niestandardowe ciągi formatów liczbowych](~/docs/standard/base-types/custom-numeric-format-strings.md) tematów.  
  
-   **Analizowanie ciągów**. Można przekonwertować wartości zmiennoprzecinkowej na reprezentację ciągu <xref:System.Single> wartość wywołując <xref:System.Single.Parse%2A> lub <xref:System.Single.TryParse%2A> metody. W przypadku niepowodzenia operacji analizowania <xref:System.Single.Parse%2A> metoda zgłasza wyjątek, podczas gdy <xref:System.Single.TryParse%2A> metoda zwraca `false`.  
  
-   **Konwersja typu**. <xref:System.Single> Struktura zapewnia jawnej implementacji interfejsu dla <xref:System.IConvertible> interfejs, który obsługuje konwersję między żadnych dwa standardowe typy danych dla .NET Framework. Kompilatory języka obsługują także niejawna konwersja wartości dla wszystkich innych standardowych liczbowych typów z wyjątkiem konwersji <xref:System.Double> do <xref:System.Single> wartości. Konwersja wartości dowolnego typu liczbowego standardowego innych niż <xref:System.Double> do <xref:System.Single> jest konwersję rozszerzającą i nie wymaga użycia metody rzutowanie operatora lub konwersji.  
  
     Jednak konwersji 32-bitowe i 64-bitowe liczby całkowite może obejmować utratę dokładności. W poniższej tabeli wymieniono różnice w dokładności dla 32-bitowej, 64-bitowe i <xref:System.Double> typy:  
  
    |Typ|Precyzja maksymalna (w cyfr dziesiętnych)|Dokładność wewnętrznych (w cyfr dziesiętnych)|  
    |----------|---------------------------------------------|----------------------------------------------|  
    |<xref:System.Double>|15|17|  
    |<xref:System.Int32> I <xref:System.UInt32>|10|10|  
    |<xref:System.Int64> I <xref:System.UInt64>|19|19|  
    |<xref:System.Single>|7|9|  
  
     Najczęściej dotyczy problem dokładności <xref:System.Single> wartości, które są konwertowane na <xref:System.Double> wartości. W poniższym przykładzie nierówne, są dwie wartości produkowane przez operacje dzielenia identyczne, ponieważ jedna z wartości jest pojedynczej precyzji wartość zmiennoprzecinkową o który jest konwertowany na <xref:System.Double>.  
  
     [!code-csharp[System.Single.Structure#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/precisionlist1.cs#5)]
     [!code-vb[System.Single.Structure#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/precisionlist1.vb#5)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Wszystkie elementy członkowskie tego typu są bezpieczne wątkowo. Elementy członkowskie, które na pierwszy rzut oka modyfikują stan wystąpienia, w rzeczywistości zwracają nowe wystąpienie zainicjowane z nową wartością. Podobnie jak w przypadku innych typów odczytywanie i zapisywanie w udostępnionej zmiennej, która zawiera wystąpienie tego typu, musi być chronione przez blokadę w celu zagwarantowania bezpieczeństwa wątków.</threadsafe>
    <altmember cref="T:System.Decimal" />
    <altmember cref="T:System.Double" />
  </Docs>
  <Members>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Porównuje to wystąpienie określonego obiektu lub do innego <see cref="T:System.Single" /> wystąpienia i zwraca liczbę całkowitą, która wskazuje, czy wartość tego wystąpienia jest mniejszy, równy lub większy niż wartość określonego obiektu lub innych <see cref="T:System.Single" /> wystąpienia.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt do porównania, lub <see langword="null" />.</param>
        <summary>Porównuje tego wystąpienia określonego obiektu i zwraca liczbę całkowitą, która wskazuje, czy wartość tego wystąpienia jest mniejszy, równa lub większa niż wartość określonego obiektu.</summary>
        <returns>Podpisem liczbę określającą względne wartości tego wystąpienia i <paramref name="value" />.  
  
 <list type="table"><listheader><term> Wartość zwracana </term><description> opis </description></listheader><item><term> mniejsza od zera </term><description> to wystąpienie jest mniejsza niż <paramref name="value" />.  To wystąpienie nie jest liczbą - lub - (<see cref="F:System.Single.NaN" />) i <paramref name="value" /> jest liczbą.  </description></item><item><term> Zero </term><description> to wystąpienie jest równe <paramref name="value" />.  - lub - są to wystąpienie i jego wartość nie liczba (<see cref="F:System.Single.NaN" />), <see cref="F:System.Single.PositiveInfinity" />, lub <see cref="F:System.Single.NegativeInfinity" />.  </description></item><item><term> Większa od zera </term><description> to wystąpienie jest większa niż <paramref name="value" />.  - lub - tego wystąpienia jest liczbą i <paramref name="value" /> nie jest liczbą (<see cref="F:System.Single.NaN" />).  - lub - <paramref name="value" /> jest <see langword="null" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `value` Parametr musi być `null` lub wystąpienie <xref:System.Single>; w przeciwnym razie jest zwracany wyjątek. Wszystkie wystąpienia <xref:System.Single>, niezależnie od jego wartość jest uznawany za większy niż `null`.  
  
 Wartości muszą być identyczne, aby były uważane za równe. Szczególnie, gdy wartości zmiennoprzecinkowych zależą od wielu operacji matematycznych, jest typowe dla utratę dokładności i ich wartości były niemal identyczne, z wyjątkiem ich co najmniej cyfr znaczących. W związku z tym wartość zwracaną <xref:System.Single.CompareTo%2A> metody może wydawać zaskakująco w czasie. Na przykład mnożenia przez konkretną wartość następuje dzielenia przez tę samą wartość powinna zostać oryginalnej wartości, ale w poniższym przykładzie, obliczona wartość okaże się większa niż oryginalna wartość. Wyświetlanie wszystkich cyfr znaczących dwóch wartości za pomocą "R" [ciągu standardowego formatu liczbowego](~/docs/standard/base-types/standard-numeric-format-strings.md) wskazuje, że obliczona wartość różni się od oryginalnej wartości w jego co najmniej cyfr znaczących. Aby uzyskać informacje na temat obsługi tych porównań, zobacz sekcję uwag <xref:System.Single.Equals%28System.Single%29> metody.  
  
 [!code-csharp[System.Single.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.compareto/cs/compareto3.cs#2)]
 [!code-vb[System.Single.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.compareto/vb/compareto3.vb#2)]  
  
 Ta metoda jest zaimplementowana do obsługi <xref:System.IComparable> interfejsu. Należy zauważyć, że chociaż <xref:System.Single.NaN> nie jest uważany za równa innej <xref:System.Single.NaN> (nawet sam), <xref:System.IComparable> interfejsu wymaga, aby `A.CompareTo(A)` zwracać zera.  
  
## <a name="precision-in-comparisons"></a>Precyzja w porównaniach  
 Dokładność liczb zmiennoprzecinkowych poza udokumentowaną dokładnością jest określona dla implementacji oraz wersji systemu .NET Framework. W związku z tym porównanie dwóch określonych liczb może ulec zmianie między wersji systemu .NET Framework, ponieważ precyzja przedstawienia numeracji wewnętrznej może ulec zmianie.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje <xref:System.Single.CompareTo%2A> metody.  
  
 [!code-cpp[System.Single#16](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#16)]
 [!code-csharp[System.Single#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#16)]
 [!code-vb[System.Single#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> nie jest <see cref="T:System.Single" />.</exception>
        <altmember cref="M:System.Single.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.CompareTo(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(float value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">Liczba zmiennoprzecinkowa pojedynczej precyzji do porównania.</param>
        <summary>Porównuje wystąpieniu określonej liczby zmiennoprzecinkowej pojedynczej precyzji i zwraca liczbę całkowitą, która wskazuje, czy wartość tego wystąpienia jest mniejsza niż, równa lub większa niż wartość podanej liczbie zmiennoprzecinkowej pojedynczej precyzji.</summary>
        <returns>Podpisem liczbę określającą względne wartości tego wystąpienia i <paramref name="value" />.  
  
 <list type="table"><listheader><term> Wartość zwracana </term><description> opis </description></listheader><item><term> mniejsza od zera </term><description> to wystąpienie jest mniejsza niż <paramref name="value" />.  To wystąpienie nie jest liczbą - lub - (<see cref="F:System.Single.NaN" />) i <paramref name="value" /> jest liczbą.  </description></item><item><term> Zero </term><description> to wystąpienie jest równe <paramref name="value" />.  - lub - zarówno to wystąpienie i <paramref name="value" /> niebędące liczbą (<see cref="F:System.Single.NaN" />), <see cref="F:System.Single.PositiveInfinity" />, lub <see cref="F:System.Single.NegativeInfinity" />.  </description></item><item><term> Większa od zera </term><description> to wystąpienie jest większa niż <paramref name="value" />.  - lub - tego wystąpienia jest liczbą i <paramref name="value" /> nie jest liczbą (<see cref="F:System.Single.NaN" />).  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartości muszą być identyczne, aby były uważane za równe. Bardzo często wartości zmiennoprzecinkowych tracić dokładność i stają się niemal identyczna z wyjątkiem ich co najmniej cyfr znaczących, szczególnie w przypadku wartości są zależne od wielu operacji matematycznych. W związku z tym wartość zwracaną <xref:System.Single.CompareTo%2A> metody może wydawać w czasie zaskakująco. Na przykład mnożenia przez dowolną wartość następuje dzielenia przez tę samą wartość powinna dawać oryginalnej wartości. Jednak w poniższym przykładzie, obliczona wartość okaże się większa niż oryginalna wartość. Wyświetlanie wszystkich cyfr znaczących dwóch wartości za pomocą "R" [ciągu standardowego formatu liczbowego](~/docs/standard/base-types/standard-numeric-format-strings.md) wskazuje, że obliczona wartość różni się od oryginalnej wartości w jego co najmniej cyfr znaczących. Aby uzyskać informacje na temat obsługi tych porównań, zobacz sekcję uwag <xref:System.Single.Equals%28System.Single%29> metody.  
  
 [!code-csharp[System.Single.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.compareto/cs/compareto2.cs#1)]
 [!code-vb[System.Single.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.compareto/vb/compareto2.vb#1)]  
  
 Ta metoda implementuje <xref:System.IComparable%601?displayProperty=nameWithType> interfejsu i wykonuje nieco lepsza niż <xref:System.Single.CompareTo%2A?displayProperty=nameWithType> — metoda, ponieważ nie muszą być konwertowane `value` parametru do obiektu.  
  
 Należy zauważyć, że chociaż obiektu, którego wartość jest <xref:System.Single.NaN> nie jest uznawany za taki sam, jak inny obiekt, którego wartość jest <xref:System.Single.NaN> (nawet sam), <xref:System.IComparable%601> interfejsu wymaga, aby `A.CompareTo(A)` zwracać zera.  
  
## <a name="widening-conversions"></a>Poszerzenie konwersji  
 W zależności od języka programowania, może być możliwe do kodu <xref:System.Single.CompareTo%2A> metody, których typ parametru ma mniejszą liczbę bitów (mniejszą niż jest) niż typ wystąpienia. To jest możliwe, ponieważ w niektórych językach programowania jest wykonywana niejawna konwersja poszerzająca, która powoduje reprezentowanie parametru jako typu z taką samą liczbą bitów jak liczba bitów wystąpienia.  
  
 Na przykład, załóżmy, że typ wystąpienia <xref:System.Single> i typ parametru jest <xref:System.Int32>. Kompilator języka Microsoft C# generuje instrukcje do reprezentowania wartości parametru jako <xref:System.Single> obiekt, a następnie generuje <xref:System.Single.CompareTo%28System.Single%29?displayProperty=nameWithType> metodę, która porównuje wartości wystąpienia i poszerzył reprezentację parametru.  
  
 Sprawdź dokumentację języka programowania, aby określić, czy jego kompilator wykonuje niejawne poszerzenia konwersji dla typów liczbowych. Aby uzyskać więcej informacji, zobacz [tabele konwersji typów](~/docs/standard/base-types/conversion-tables.md) tematu.  
  
## <a name="precision-in-comparisons"></a>Precyzja w porównaniach  
 Dokładność liczb zmiennoprzecinkowych poza udokumentowaną dokładnością jest określona dla implementacji oraz wersji systemu .NET Framework. W związku z tym porównanie dwóch określonych liczb może ulec zmianie między wersji systemu .NET Framework, ponieważ precyzja przedstawienia numeracji wewnętrznej może ulec zmianie.  
  
   
  
## Examples  
 W poniższym przykładzie kodu pokazano wersje ogólnego i nierodzajowe <xref:System.Single.CompareTo%2A> metody dla kilku typów wartości i odwołania.  
  
 [!code-cpp[T.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/T.CompareTo/CPP/cat.cpp#1)]
 [!code-csharp[T.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/T.CompareTo/CS/cat.cs#1)]
 [!code-vb[T.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/T.CompareTo/VB/cat.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Epsilon">
      <MemberSignature Language="C#" Value="public const float Epsilon = 1.401298E-45;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 Epsilon = float32(1.401298E-45)" />
      <MemberSignature Language="DocId" Value="F:System.Single.Epsilon" />
      <MemberSignature Language="VB.NET" Value="Public Const Epsilon As Single  = 1.401298E-45" />
      <MemberSignature Language="C++ CLI" Value="public: float Epsilon = 1.401298E-45;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>1.401298E-45</MemberValue>
      <Docs>
        <summary>Reprezentuje najmniejsza dodatnia <see cref="T:System.Single" /> wartość, która jest większa od zera. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Single.Epsilon> właściwość odzwierciedla najmniejsza dodatnia <xref:System.Single> wartość, która jest ważna w operacjach numerycznych lub porównania podczas wartość <xref:System.Single> wystąpienia wynosi zero. Na przykład w poniższym kodzie które zero i <xref:System.Single.Epsilon> są traktowane jako wartości nierówne, podczas gdy zero i połowy wartości <xref:System.Single.Epsilon> są traktowane jako równe.  
  
 [!code-csharp[System.Single.Epsilon#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Epsilon/cs/epsilon.cs#5)]
 [!code-vb[System.Single.Epsilon#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Epsilon/vb/epsilon.vb#5)]  
  
 Mówiąc ściślej format liczb zmiennoprzecinkowych pojedynczej precyzji składa się z znak, mantysa 23-bitowych lub mantysy i wykładnik 8-bitową. Jak w poniższym przykładzie pokazano, zero ma wykładnik-126 i mantysy 0. <xref:System.Single.Epsilon> ma wykładnik-126 i mantysy 1. Oznacza to, że <xref:System.Single.Epsilon?displayProperty=nameWithType> jest najmniejsza dodatnia <xref:System.Single> wartość, która jest większa od zera i reprezentuje najniższą możliwą wartość i najmniejsza możliwa przyrost dla <xref:System.Single> których wykładnik jest-126.  
  
 [!code-csharp[System.Single.Epsilon#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Epsilon/cs/epsilon1.cs#6)]
 [!code-vb[System.Single.Epsilon#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Epsilon/vb/epsilon1.vb#6)]  
  
 Jednak <xref:System.Single.Epsilon> właściwość nie jest miarą ogólne dokładność <xref:System.Single> wpisz; ma zastosowanie tylko do <xref:System.Single> wystąpień, które mają wartość zero.  
  
> [!NOTE]
>  Wartość <xref:System.Single.Epsilon> właściwość nie jest odpowiednikiem epsilon maszyny, reprezentujący górna granica względny błąd z powodu zaokrąglania w arytmetyczne zmiennoprzecinkowych.  
  
 Wartość tej stałej jest 1.4e-45.  
  
 Dwie liczby zmiennoprzecinkowe pozornie równoważne nie może porównać równy z powodu różnic w ich co najmniej cyfr znaczących. Na przykład C# wyrażenie, `(float)1/3 == (float)0.33333`, porównuje taki sam, ponieważ operacji dzielenia po lewej stronie ma maksymalna dokładność, podczas gdy stała po prawej stronie jest dokładny tylko do określonych cyfr. Jeśli tworzysz niestandardowy algorytm, który określa, czy dwie liczb zmiennoprzecinkowych można uznać za taki sam, należy użyć wartości, która jest większa niż <xref:System.Single.Epsilon> stała ustanowienie dopuszczalne marginesu bezwzględną różnicę dwóch wartości były traktowane jako równe. (Zazwyczaj ten margines różnica jest wiele razy większa niż <xref:System.Single.Epsilon>.)  
  
## <a name="platform-notes"></a>Uwagi dotyczące platformy  
 W systemach ARM wartość <xref:System.Single.Epsilon> stała jest za mały, aby zostało wykryte, więc jego jest równa zero. Można zdefiniować alternatywny epsilon wartość, która jest równe 1.175494351E-38 zamiast tego.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca wartość wskazującą, czy dwa wystąpienia elementu <see cref="T:System.Single" /> reprezentują tę samą wartość.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Obiekt, który ma zostać porównany z tym wystąpieniem.</param>
        <summary>Zwraca wartość wskazującą, czy to wystąpienie jest równe podanemu obiektowi.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="obj" /> jest wystąpieniem <see cref="T:System.Single" /> i wartość tego wystąpienia; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Single.Equals%2A> Metody należy użyć ostrożnie, ponieważ dwie wartości najwyraźniej równoważne mogą być nierówne ze względu na zróżnicowane dokładność dwóch wartości. Poniższy przykład zgłasza, że <xref:System.Single> wartość.3333 i <xref:System.Single> zwrócone w wyniku dzielenia 1 przez 3 nie są równe.  
  
 [!code-csharp[System.Single.Epsilon#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Epsilon/cs/SingleEquals_25051.cs#3)]
 [!code-vb[System.Single.Epsilon#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Epsilon/vb/SingleEquals_25051.vb#3)]  
  
 Zamiast porównywanie równości, jeden zalecana metoda polega na definiowanie dopuszczalne margines różnicę między dwiema wartościami (np. jedna z wartości % 01). Jeśli wartość bezwzględna różnicy między dwiema wartościami jest mniejsza niż lub równa tej margines, różnica jest prawdopodobnie z powodu różnic w dokładność i w związku z tym wartości są mogą być takie same. W poniższym przykładzie użyto ta technika pozwala na porównanie.33333 i 1/3, dwa <xref:System.Single> wartości, które można nierówne w poprzednim przykładzie kodu.  
  
 [!code-csharp[System.Single.Epsilon#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Epsilon/cs/SingleEquals_25051.cs#4)]
 [!code-vb[System.Single.Epsilon#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Epsilon/vb/SingleEquals_25051.vb#4)]  
  
 W tym przypadku wartości są równe.  
  
> [!NOTE]
>  Ponieważ <xref:System.Single.Epsilon> definiuje wyrażenie minimalne z wartość dodatnią, której zakres znajduje się w pobliżu zero, musi być większa niż margines różnica <xref:System.Single.Epsilon>. Zazwyczaj jest wiele razy większa niż <xref:System.Single.Epsilon>.  
  
 Dokładność liczb zmiennoprzecinkowych poza udokumentowaną dokładnością jest określona dla implementacji oraz wersji systemu .NET Framework. W związku z tym porównanie dwóch określonych liczb może ulec zmianie między wersji systemu .NET Framework, ponieważ precyzja przedstawienia numeracji wewnętrznej może ulec zmianie.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje <xref:System.Single.Equals%2A> metody.  
  
 [!code-cpp[System.Single#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#17)]
 [!code-csharp[System.Single#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#17)]
 [!code-vb[System.Single#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#17)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Rozpoznanie przeciążenia kompilator może konto do widocznej różnicy zachowanie dwóch <see cref="M:System.Single.Equals(System.Object)" /> przeciążenia metody. Jeśli niejawna konwersja między <paramref name="obj" /> argumentu i <see cref="T:System.Single" /> jest zdefiniowana i nie jest typu argumentu <see cref="T:System.Object" />, kompilatory mogą wykonać niejawnej konwersji i wywołanie <see cref="M:System.Single.Equals(System.Single)" /> — metoda. W przeciwnym razie wywołać <see cref="M:System.Single.Equals(System.Object)" /> metody, która zawsze zwraca <see langword="false" /> jeśli jego <paramref name="obj" /> argument nie jest <see cref="T:System.Single" /> wartość. Poniższy przykład przedstawia różnicy w zachowaniu przeciążenia dwie metody. W przypadku wszystkich pierwotne typy liczbowe, z wyjątkiem <see cref="T:System.Double" /> w języku Visual Basic i z wyjątkiem <see cref="T:System.Decimal" /> i <see cref="T:System.Double" /> w języku C#, zwraca pierwszy porównanie <see langword="true" /> ponieważ kompilator automatycznie wykonuje konwersję rozszerzającą i wywołania <see cref="M:System.Single.Equals(System.Single)" /> metody, natomiast drugi porównania zwraca <see langword="false" /> ponieważ wywołuje kompilator <see cref="M:System.Single.Equals(System.Object)" /> metody.  [! code-csharp[System.Single.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.equals/cs/equalsoverl.cs#2)] [! code-vb[System.Single.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.equals/vb/equalsoverl.vb#2)]</para>
        </block>
        <altmember cref="M:System.Single.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (float obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(float32 obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.Equals(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (obj As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(float obj);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="obj">Obiekt, który ma zostać porównany z tym wystąpieniem.</param>
        <summary>Zwraca wartość wskazującą czy to wystąpienie i określonej <see cref="T:System.Single" /> obiektu reprezentują tę samą wartość.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="obj" /> jest taki sam, jak to wystąpienie w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda implementuje <xref:System.IEquatable%601?displayProperty=nameWithType> interfejsu i wykonuje nieco większą niż <xref:System.Single.Equals%2A> , ponieważ nie muszą być konwertowane `obj` parametru do obiektu.  
  
## <a name="widening-conversions"></a>Poszerzenie konwersji  
 W zależności od języka programowania, może być możliwe do kodu <xref:System.Single.Equals%2A> metody, których typ parametru ma mniejszą liczbę bitów (mniejszą niż jest) niż typ wystąpienia. To jest możliwe, ponieważ w niektórych językach programowania jest wykonywana niejawna konwersja poszerzająca, która powoduje reprezentowanie parametru jako typu z taką samą liczbą bitów jak liczba bitów wystąpienia.  
  
 Na przykład, załóżmy, że typ wystąpienia <xref:System.Single> i typ parametru jest <xref:System.Int32>. Kompilator języka Microsoft C# generuje instrukcje do reprezentowania wartości parametru jako <xref:System.Single> obiekt, a następnie generuje <xref:System.Single.Equals%28System.Single%29?displayProperty=nameWithType> metodę, która porównuje wartości wystąpienia i poszerzył reprezentację parametru.  
  
 Sprawdź dokumentację języka programowania, aby określić, czy jego kompilator wykonuje niejawne poszerzenia konwersji dla typów liczbowych. Aby uzyskać więcej informacji, zobacz [tabele konwersji typów](~/docs/standard/base-types/conversion-tables.md) tematu.  
  
## <a name="precision-in-comparisons"></a>Precyzja w porównaniach  
 <xref:System.Single.Equals%2A> Metody należy użyć ostrożnie, ponieważ dwie wartości najwyraźniej równoważne mogą być nierówne ze względu na zróżnicowane dokładność dwóch wartości. Poniższy przykład zgłasza, że <xref:System.Single> wartość.3333 i <xref:System.Single> zwrócone w wyniku dzielenia 1 przez 3 nie są równe.  
  
 [!code-csharp[System.Single.Epsilon#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Epsilon/cs/SingleEquals_25051.cs#1)]
 [!code-vb[System.Single.Epsilon#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Epsilon/vb/SingleEquals_25051.vb#1)]  
  
 Porównanie jedną metodę, która pozwala uniknąć problemów związanych z porównanie na równość zawiera definiowanie dopuszczalne margines różnicę między dwiema wartościami (np. 01% jedna z wartości). Jeśli wartość bezwzględna różnicy między dwiema wartościami jest mniejsza niż lub równa tej margines, różnica jest prawdopodobnie wynik różnice w dokładność i w związku z tym są mogą być takie same wartości. W poniższym przykładzie użyto ta technika pozwala na porównanie.33333 i 1/3, które są dwa <xref:System.Single> wartości, które można nierówne w poprzednim przykładzie kodu.  
  
 [!code-csharp[System.Single.Epsilon#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Epsilon/cs/SingleEquals_25051.cs#2)]
 [!code-vb[System.Single.Epsilon#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Epsilon/vb/SingleEquals_25051.vb#2)]  
  
 W tym przypadku wartości są równe.  
  
> [!NOTE]
>  Ponieważ <xref:System.Single.Epsilon> definiuje wyrażenie minimalne z wartość dodatnią, której zakres znajduje się w pobliżu zero, musi być większa niż margines różnica <xref:System.Single.Epsilon>. Zazwyczaj jest wiele razy większa niż <xref:System.Single.Epsilon>. W związku z tym zaleca się, że nie używasz <xref:System.Double.Epsilon> podczas porównywania <xref:System.Double> wartości pod kątem równości.  
  
 Druga metoda, która pozwala uniknąć problemów związanych z porównywanie równości obejmuje porównanie różnicy między dwie liczb zmiennoprzecinkowych z niektórych wartości bezwzględnej. Jeśli różnica jest mniejsza niż lub równa tej wartości bezwzględne, numery są takie same. Jeśli jest większy, liczby nie są takie same. Jednym ze sposobów jest arbitralnie wybierz wartości bezwzględnej. Jest to jednak powodować problemów, ponieważ dopuszczalne margines różnicy zależy od wielkości <xref:System.Single> wartości. Druga metoda korzysta z funkcji projektowania w formacie liczb zmiennoprzecinkowych: różnica między składnikami mantysa w reprezentacji całkowitą dwie liczb zmiennoprzecinkowych wartości wskazuje liczbę możliwych wartości zmiennoprzecinkowych oddzielający dwie wartości. Na przykład różnica między 0,0 a <xref:System.Single.Epsilon> ma wartość 1, ponieważ <xref:System.Single.Epsilon> jest najmniejszą wartość można przedstawić podczas pracy z <xref:System.Single> którego wartość wynosi zero. W poniższym przykładzie użyto ta technika pozwala na porównanie.33333 i 1/3, które są dwa <xref:System.Double> wartości z poprzedniego przykładu kodu <xref:System.Single.Equals%28System.Single%29> znaleziono metody będą traktowane jako różne. Należy pamiętać, że w przykładzie użyto <xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType> i <xref:System.BitConverter.ToInt32%2A?displayProperty=nameWithType> metod do konwertowania wartości zmiennoprzecinkowej pojedynczej precyzji na jej reprezentację liczby całkowitej.  
  
 [!code-csharp[System.Single.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.equals/cs/equalsabs1.cs#1)]
 [!code-vb[System.Single.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.equals/vb/equalsabs1.vb#1)]  
  
 Dokładność liczb zmiennoprzecinkowych poza udokumentowaną dokładnością jest określona dla implementacji oraz wersji systemu .NET Framework. W rezultacie porównanie dwóch liczb może utworzyć różne wyniki, w zależności od wersji programu .NET Framework, ponieważ dokładność reprezentacji wewnętrznej numery mogą ulec zmianie.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Rozpoznanie przeciążenia kompilator może konto do widocznej różnicy zachowanie dwóch <see cref="M:System.Single.Equals(System.Object)" /> przeciążenia metody. Jeśli niejawna konwersja między <paramref name="obj" /> argumentu i <see cref="T:System.Single" /> jest zdefiniowana i nie jest typu argumentu <see cref="T:System.Object" />, kompilatory mogą wykonać niejawnej konwersji i wywołanie <see cref="M:System.Single.Equals(System.Single)" /> — metoda. W przeciwnym razie wywołać <see cref="M:System.Single.Equals(System.Object)" /> metody, która zawsze zwraca <see langword="false" /> jeśli jego <paramref name="obj" /> argument nie jest <see cref="T:System.Single" /> wartość. Poniższy przykład przedstawia różnicy w zachowaniu przeciążenia dwie metody. W przypadku wszystkich pierwotne typy liczbowe, z wyjątkiem <see cref="T:System.Double" /> w języku Visual Basic i z wyjątkiem <see cref="T:System.Decimal" /> i <see cref="T:System.Double" /> w języku C#, zwraca pierwszy porównanie <see langword="true" /> ponieważ kompilator automatycznie wykonuje konwersję rozszerzającą i wywołania <see cref="M:System.Single.Equals(System.Single)" /> metody, natomiast drugi porównania zwraca <see langword="false" /> ponieważ wywołuje kompilator <see cref="M:System.Single.Equals(System.Object)" /> metody.  [! code-csharp[System.Single.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.equals/cs/equalsoverl.cs#2)] [! code-vb[System.Single.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.equals/vb/equalsoverl.vb#2)]</para>
        </block>
        <altmember cref="M:System.Single.Equals(System.Object)" />
        <altmember cref="Overload:System.Single.CompareTo" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca kod skrótu dla tego wystąpienia.</summary>
        <returns>Kod skrótu 32-bitowej liczby całkowitej ze znakiem.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca <see cref="T:System.TypeCode" /> dla typu wartości <see cref="T:System.Single" />.</summary>
        <returns>Stała wyliczeniowa <see cref="F:System.TypeCode.Single" />.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.TypeCode" />
      </Docs>
    </Member>
    <Member MemberName="IsFinite">
      <MemberSignature Language="C#" Value="public static bool IsFinite (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsFinite(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsFinite(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsFinite (f As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsFinite(float f);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInfinity">
      <MemberSignature Language="C#" Value="public static bool IsInfinity (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsInfinity(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsInfinity(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsInfinity (f As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsInfinity(float f);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f">Liczba zmiennoprzecinkowa pojedynczej precyzji.</param>
        <summary>Zwraca wartość wskazującą, czy określona liczba daje w wyniku infinity ujemna lub dodatnia.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="f" /> daje w wyniku <see cref="F:System.Single.PositiveInfinity" /> lub <see cref="F:System.Single.NegativeInfinity" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwraca operacji zmiennoprzecinkowych <xref:System.Single.PositiveInfinity> lub <xref:System.Single.NegativeInfinity> sygnalizują nastąpiło przepełnienie.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje <xref:System.Single.IsInfinity%2A> metody.  
  
 [!code-cpp[System.Single#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#11)]
 [!code-csharp[System.Single#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#11)]
 [!code-vb[System.Single#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.IsPositiveInfinity(System.Single)" />
        <altmember cref="M:System.Single.IsNegativeInfinity(System.Single)" />
        <altmember cref="F:System.Single.PositiveInfinity" />
        <altmember cref="F:System.Single.NegativeInfinity" />
      </Docs>
    </Member>
    <Member MemberName="IsNaN">
      <MemberSignature Language="C#" Value="public static bool IsNaN (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNaN(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsNaN(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNaN (f As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNaN(float f);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f">Liczba zmiennoprzecinkowa pojedynczej precyzji.</param>
        <summary>Zwraca wartość wskazującą, czy określona wartość nie jest liczbą (<see cref="F:System.Single.NaN" />).</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="f" /> daje w wyniku nie liczba (<see cref="F:System.Single.NaN" />); w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwraca operacji zmiennoprzecinkowych <xref:System.Single.NaN> sygnalizują, że wynik operacji jest niezdefiniowany. Na przykład dzielenia 0,0 przez 0,0 powoduje <xref:System.Single.NaN>.  
  
> [!NOTE]
>  <xref:System.Single.IsNaN%2A> Zwraca `false` Jeśli <xref:System.Single> wartość to <xref:System.Single.PositiveInfinity> lub <xref:System.Single.NegativeInfinity>. Aby sprawdzić, czy te wartości, należy użyć <xref:System.Single.IsInfinity%2A>, <xref:System.Single.IsPositiveInfinity%2A>, i <xref:System.Single.IsNegativeInfinity%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje <xref:System.Single.IsNaN%2A> metody.  
  
 [!code-cpp[System.Single#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#8)]
 [!code-csharp[System.Single#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#8)]
 [!code-vb[System.Single#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Single.NaN" />
      </Docs>
    </Member>
    <Member MemberName="IsNegative">
      <MemberSignature Language="C#" Value="public static bool IsNegative (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNegative(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsNegative(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNegative (f As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNegative(float f);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNegativeInfinity">
      <MemberSignature Language="C#" Value="public static bool IsNegativeInfinity (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNegativeInfinity(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsNegativeInfinity(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNegativeInfinity (f As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNegativeInfinity(float f);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f">Liczba zmiennoprzecinkowa pojedynczej precyzji.</param>
        <summary>Zwraca wartość wskazującą, czy określona liczba daje w wyniku nieskończoności ujemnej.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="f" /> daje w wyniku <see cref="F:System.Single.NegativeInfinity" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwraca operacji zmiennoprzecinkowych <xref:System.Single.NegativeInfinity> sygnalizują nastąpiło przepełnienie.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje <xref:System.Single.IsNegativeInfinity%2A> metody.  
  
 [!code-cpp[System.Single#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#13)]
 [!code-csharp[System.Single#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#13)]
 [!code-vb[System.Single#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#13)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.IsInfinity(System.Single)" />
        <altmember cref="M:System.Single.IsPositiveInfinity(System.Single)" />
        <altmember cref="F:System.Single.PositiveInfinity" />
        <altmember cref="F:System.Single.NegativeInfinity" />
      </Docs>
    </Member>
    <Member MemberName="IsNormal">
      <MemberSignature Language="C#" Value="public static bool IsNormal (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNormal(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsNormal(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNormal (f As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNormal(float f);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPositiveInfinity">
      <MemberSignature Language="C#" Value="public static bool IsPositiveInfinity (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPositiveInfinity(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsPositiveInfinity(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPositiveInfinity (f As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPositiveInfinity(float f);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f">Liczba zmiennoprzecinkowa pojedynczej precyzji.</param>
        <summary>Zwraca wartość wskazującą, czy określona liczba daje w wyniku nieskończoności dodatniej.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="f" /> daje w wyniku <see cref="F:System.Single.PositiveInfinity" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwraca operacji zmiennoprzecinkowych <xref:System.Single.PositiveInfinity> sygnalizują nastąpiło przepełnienie.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje <xref:System.Single.IsPositiveInfinity%2A> metody.  
  
 [!code-cpp[System.Single#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#12)]
 [!code-csharp[System.Single#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#12)]
 [!code-vb[System.Single#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.IsInfinity(System.Single)" />
        <altmember cref="M:System.Single.IsNegativeInfinity(System.Single)" />
        <altmember cref="F:System.Single.PositiveInfinity" />
        <altmember cref="F:System.Single.NegativeInfinity" />
      </Docs>
    </Member>
    <Member MemberName="IsSubnormal">
      <MemberSignature Language="C#" Value="public static bool IsSubnormal (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSubnormal(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsSubnormal(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSubnormal (f As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSubnormal(float f);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public const float MaxValue = 3.402823E+38;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 MaxValue = float32(3.402823E+38)" />
      <MemberSignature Language="DocId" Value="F:System.Single.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Const MaxValue As Single  = 3.402823E+38" />
      <MemberSignature Language="C++ CLI" Value="public: float MaxValue = 3.402823E+38;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>3.402823E+38</MemberValue>
      <Docs>
        <summary>Reprezentuje największa możliwa wartość z <see cref="T:System.Single" />. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość tej stałej jest dodatnią 3.40282347E + 38.  
  
 Wynik operacji przekraczającą <xref:System.Single.MaxValue?displayProperty=nameWithType> jest <xref:System.Single.PositiveInfinity?displayProperty=nameWithType>. W poniższym przykładzie <xref:System.Single.PositiveInfinity?displayProperty=nameWithType> wynikiem operacje dodawania, mnożenia i potęgowania, gdy wynik przekracza <xref:System.Single.MaxValue?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Single.MaxValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.maxvalue/cs/maxvalueex.cs#1)]
 [!code-vb[System.Single.MaxValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.maxvalue/vb/maxvalueex.vb#1)]  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje <xref:System.Single.MaxValue> stałej.  
  
 [!code-cpp[System.Single#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#4)]
 [!code-csharp[System.Single#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#4)]
 [!code-vb[System.Single#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Single.MinValue" />
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public const float MinValue = -3.402823E+38;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 MinValue = float32(-3.402823E+38)" />
      <MemberSignature Language="DocId" Value="F:System.Single.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Const MinValue As Single  = -3.402823E+38" />
      <MemberSignature Language="C++ CLI" Value="public: float MinValue = -3.402823E+38;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>-3.402823E+38</MemberValue>
      <Docs>
        <summary>Reprezentuje najniższą możliwą wartość elementu <see cref="T:System.Single" />. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość tej stałej jest ujemny 3, 402823E38.  
  
 Wynik operacji, która jest mniejsza niż <xref:System.Single.MinValue?displayProperty=nameWithType> jest <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>. W poniższym przykładzie <xref:System.Single.NegativeInfinity?displayProperty=nameWithType> wynikiem odejmowania i mnożenia, gdy wynik jest mniejsza niż <xref:System.Single.MinValue?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Single.MinValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.minvalue/cs/minvalueex.cs#1)]
 [!code-vb[System.Single.MinValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.minvalue/vb/minvalueex.vb#1)]  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje <xref:System.Single.MinValue> stałej.  
  
 [!code-cpp[System.Single#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#5)]
 [!code-csharp[System.Single#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#5)]
 [!code-vb[System.Single#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Single.MaxValue" />
      </Docs>
    </Member>
    <Member MemberName="NaN">
      <MemberSignature Language="C#" Value="public const float NaN = NaN;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 NaN = float32(NaN)" />
      <MemberSignature Language="DocId" Value="F:System.Single.NaN" />
      <MemberSignature Language="VB.NET" Value="Public Const NaN As Single  = NaN" />
      <MemberSignature Language="C++ CLI" Value="public: float NaN = NaN;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>NaN</MemberValue>
      <Docs>
        <summary>Reprezentuje nie liczba (<see langword="NaN" />). To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda lub operator nie zwraca <xref:System.Single.NaN> gdy wynik operacji jest niezdefiniowany. Na przykład wynik dzielenia 0 przez 0 jest <xref:System.Single.NaN>, jak pokazano na poniższym przykładzie. (Jednak pamiętaj, że dzielenia przez zero liczbę inną niż zero albo zwraca <xref:System.Single.PositiveInfinity> lub <xref:System.Single.NegativeInfinity>, w zależności od znak dzielnik.)  
  
 [!code-csharp[System.Single.NaN#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.nan/cs/nan1.cs#1)]
 [!code-vb[System.Single.NaN#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.nan/vb/nan1.vb#1)]  
  
 Ponadto, wywołaj metodę z <xref:System.Single.NaN> wartość lub operacji na <xref:System.Single.NaN> zwraca wartość <xref:System.Single.NaN>, jak pokazano na poniższym przykładzie.  
  
 [!code-csharp[System.Single.NaN#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.nan/cs/nan1.cs#2)]
 [!code-vb[System.Single.NaN#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.nan/vb/nan1.vb#2)]  
  
 Użyj <xref:System.Single.IsNaN%2A> metodę, aby określić, czy wartość nie jest liczbą. Ogólnie rzecz biorąc <xref:System.Single> operatory nie może być użyty do porównania <xref:System.Single.NaN?displayProperty=nameWithType> z innymi <xref:System.Single> wartości, mimo że porównanie metod (takich jak <xref:System.Single.Equals%2A> i <xref:System.Single.CompareTo%2A>) może. Poniższy przykład przedstawia różnice w zachowaniu między <xref:System.Single> operatory porównania i metody.  
  
 [!code-csharp[System.Single.NaN#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.nan/cs/single.nan4.cs#4)]
 [!code-vb[System.Single.NaN#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.nan/vb/single.nan4.vb#4)]  
  
   
  
## Examples  
 W poniższym przykładzie pokazano <xref:System.Single.NaN> stałej.  
  
 [!code-cpp[System.Single#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#7)]
 [!code-csharp[System.Single#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#7)]
 [!code-vb[System.Single#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.IsNaN(System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="NegativeInfinity">
      <MemberSignature Language="C#" Value="public const float NegativeInfinity = -Infinity;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 NegativeInfinity = float32(-Infinity)" />
      <MemberSignature Language="DocId" Value="F:System.Single.NegativeInfinity" />
      <MemberSignature Language="VB.NET" Value="Public Const NegativeInfinity As Single  = -Infinity" />
      <MemberSignature Language="C++ CLI" Value="public: float NegativeInfinity = -Infinity;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>-Infinity</MemberValue>
      <Docs>
        <summary>Reprezentuje minus nieskończoność. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość tej stałej jest wynik dzielenia przez zero liczbą ujemną.  
  
 To stała jest zwracany, jeśli wynikiem operacji jest mniejsza niż <xref:System.Single.MinValue>.  
  
 Użyj <xref:System.Single.IsNegativeInfinity%2A> ustalenie, czy wartości daje w wyniku nieskończoności ujemnej.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje <xref:System.Single.NegativeInfinity> stałej.  
  
 [!code-cpp[System.Single#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#9)]
 [!code-csharp[System.Single#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#9)]
 [!code-vb[System.Single#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.IsNegativeInfinity(System.Single)" />
        <altmember cref="M:System.Single.IsInfinity(System.Single)" />
        <altmember cref="F:System.Single.PositiveInfinity" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (float left, float right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(float32 left, float32 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.op_Equality(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As Single, right As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(float left, float right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="left">Pierwsza wartość do porównania.</param>
        <param name="right">Druga wartość do porównania.</param>
        <summary>Zwraca wartość wskazującą, czy dwa określone <see cref="T:System.Single" /> wartości są równe.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="left" /> i <paramref name="right" /> są równe; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Single.op_Equality%2A> Metoda definiuje operator równości dla <xref:System.Single> wartości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (float left, float right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(float32 left, float32 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.op_GreaterThan(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As Single, right As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(float left, float right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="left">Pierwsza wartość do porównania.</param>
        <param name="right">Druga wartość do porównania.</param>
        <summary>Zwraca wartość wskazującą, czy określonej <see cref="T:System.Single" /> wartość jest większa niż innego określony <see cref="T:System.Single" /> wartość.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="left" /> jest większa niż <paramref name="right" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Single.op_GreaterThan%2A> Metoda definiuje działania większa-niż operator dla <xref:System.Single> wartości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (float left, float right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(float32 left, float32 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.op_GreaterThanOrEqual(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As Single, right As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(float left, float right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="left">Pierwsza wartość do porównania.</param>
        <param name="right">Druga wartość do porównania.</param>
        <summary>Zwraca wartość wskazującą, czy określonej <see cref="T:System.Single" /> wartość jest większa lub równa innej określony <see cref="T:System.Single" /> wartość.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="left" /> jest większa niż lub równa <paramref name="right" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Single.op_GreaterThanOrEqual%2A> Metoda definiuje operacji operatora większą niż lub równości dla <xref:System.Single> wartości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (float left, float right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(float32 left, float32 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.op_Inequality(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As Single, right As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(float left, float right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="left">Pierwsza wartość do porównania.</param>
        <param name="right">Druga wartość do porównania.</param>
        <summary>Zwraca wartość wskazującą, czy dwa określone <see cref="T:System.Single" /> wartości nie są takie same.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="left" /> i <paramref name="right" /> nie są równe; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Single.op_Inequality%2A> Metoda definiuje operator nierówności <xref:System.Single> wartości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (float left, float right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(float32 left, float32 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.op_LessThan(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As Single, right As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(float left, float right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="left">Pierwsza wartość do porównania.</param>
        <param name="right">Druga wartość do porównania.</param>
        <summary>Zwraca wartość wskazującą, czy określonej <see cref="T:System.Single" /> wartość jest mniejsza niż innego określony <see cref="T:System.Single" /> wartość.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="left" /> jest mniejsza niż <paramref name="right" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Single.op_LessThan%2A> Metoda definiuje operacji less-niż operator dla <xref:System.Single> wartości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (float left, float right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(float32 left, float32 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.op_LessThanOrEqual(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As Single, right As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(float left, float right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="left">Pierwsza wartość do porównania.</param>
        <param name="right">Druga wartość do porównania.</param>
        <summary>Zwraca wartość wskazującą, czy określonej <see cref="T:System.Single" /> wartość jest mniejsza niż lub równa do innego określony <see cref="T:System.Single" /> wartość.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="left" /> jest mniejsza niż lub równa <paramref name="right" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Single.op_LessThanOrEqual%2A> Metoda definiuje operacji operatora mniej niż — lub równości dla <xref:System.Single> wartości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje ciąg reprezentujący liczbę na odpowiadającą mu liczbę zmiennoprzecinkową pojedynczej precyzji.</summary>
        <altmember cref="Overload:System.Single.TryParse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static float Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Parse(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg zawierający liczbę, którą należy przekształcić.</param>
        <summary>Konwertuje ciąg reprezentujący liczbę na odpowiadającą mu liczbę zmiennoprzecinkową pojedynczej precyzji.</summary>
        <returns>Liczba zmiennoprzecinkowa pojedynczej precyzji odpowiednikiem wartość numeryczną lub symbol określony w <paramref name="s" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `s` Parametr może zawierać bieżącej kultury <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, lub ciągiem w postaci:  
  
 [*ws*] [*znak*] [*cyfr całkowitym*[*,*]]*cyfr całkowitym*[*.* [*cyfr ułamkowych*]] [e [*znak*]*wykładniczej cyfr*] [*ws*]  
  
 Elementy w nawiasach kwadratowych ([ i ]) są opcjonalne. W tabeli poniżej opisano każdy element.  
  
|Element|Opis|  
|-------------|-----------------|  
|*ws*|Ciąg znaków odstępu.|  
|*sign*|Symbolu wartości ujemnej lub symbol dodatnią logowania. Nieprawidłowy znak znaki są określane przez <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType> i <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType> właściwości bieżącej kultury. Wiodący znak można użyć.|  
|*typy całkowite cyfr*|Ciąg cyfr od 0 do 9, które określają jej część całkowitą. Działa z *cyfr całkowitym* symbol separatora grupy można podzielić na partycje. Na przykład w niektórych kulturach przecinek (,) oddziela grupy wartości tysięcznych. *Cyfr całkowitym* element może być nieobecne w przypadku ciągu zawiera *cyfr ułamkowych* elementu.|  
|*,*|Symbol separatora tysięcy specyficzny dla kultury.|  
|*.*|Symbol dziesiętny specyficzny dla kultury.|  
|*cyfr ułamkowych*|Ciąg cyfr od 0 do 9, które określają część ułamkową liczby.|  
|E|Znak „e” lub „E”, który wskazuje, że wartość jest reprezentowana w zapisie wykładniczym (naukowym).|  
|*wykładniczej cyfr*|Ciąg cyfr od 0 do 9, które określają wykładnik potęgi.|  
  
 `s` Parametr jest interpretowany za pomocą kombinacji <xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType> i <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flagi. Oznacza to, że biały znak i separatory tysięczne są dozwolone, ale symbole walut nie. Aby oznaczyć elementy (takie jak symbolu waluty, tysięcy separatorów i białe) które mogą być obecne w `s`, użyj <xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> przeciążenie metody.  
  
 `s` Parametru jest analizowana, korzystając z informacji formatowania w <xref:System.Globalization.NumberFormatInfo> obiekt, który został zainicjowany dla bieżącego ustawienia kulturowego systemu. Aby uzyskać więcej informacji, zobacz <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>. Aby przeanalizować ciągu przy użyciu formatowania informacji określoną kulturę, użyj <xref:System.Single.Parse%28System.String%2CSystem.IFormatProvider%29> lub <xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> metody.  
  
 Zwykle w przypadku przekazania <xref:System.Single.Parse%2A> metody typu ciąg, który jest tworzony przez wywołanie metody <xref:System.Single.ToString%2A> metoda, oryginalny <xref:System.Single> jest zwracana wartość. Jednak ze względu na utratę precyzji wartości mogą być różne.  
  
 Jeśli okaże się separatorem w `s` parametr podczas operacji analizowania i odpowiedniej walucie lub liczbę dziesiętną i separatorów grup są takie same, operacji analizowania zakłada, że separator separator dziesiętny, a nie grupą separator. Aby uzyskać więcej informacji na temat separatorów, zobacz <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, i <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Single.Parse%28System.String%29> do przekonwertowania na tablicę ciągów na odpowiednik <xref:System.Single> wartości.  
  
 [!code-csharp[System.Single.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Parse/CS/parse1.cs#2)]
 [!code-vb[System.Single.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Parse/VB/parse1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> reprezentuje numer w nieprawidłowym formacie.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> reprezentuje liczbę mniej niż <see cref="F:System.Single.MinValue" /> lub większa niż <see cref="F:System.Single.MaxValue" />.</exception>
        <altmember cref="M:System.Single.ToString" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static float Parse (string s, System.Globalization.NumberStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Parse(string s, valuetype System.Globalization.NumberStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.Parse(System.String,System.Globalization.NumberStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, style As NumberStyles) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Parse(System::String ^ s, System::Globalization::NumberStyles style);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg zawierający liczbę, którą należy przekształcić.</param>
        <param name="style">Bitowe połączenie wartości wyliczenia wskazująca elementy style, które mogą być obecne w <c>s</c>. Jest Typowa wartość do określenia <see cref="F:System.Globalization.NumberStyles.Float" /> połączone z <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
        <summary>Konwertuje reprezentacja ciągu liczb w stylu określony numer zmiennoprzecinkowych pojedynczej precyzji równoważne.</summary>
        <returns>Liczbie zmiennoprzecinkowej pojedynczej precyzji odpowiada wartość liczbowa lub symbol określony w <paramref name="s" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `style` Parametru definiuje elementy style (takich jak biały znak, tysięcy separatorów i symboli walut) mogą w `s` parametr powodzenie operacji analizy. Musi być kombinacją flag bitowych z <xref:System.Globalization.NumberStyles> wyliczenia. Następujące <xref:System.Globalization.NumberStyles> elementy członkowskie nie są obsługiwane:  
  
-   <xref:System.Globalization.NumberStyles.AllowHexSpecifier>  
  
-   <xref:System.Globalization.NumberStyles.HexNumber>  
  
 `s` Parametr może zawierać bieżącej kultury <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>. W zależności od wartości `style`, również może mieć postać:  
  
 [*ws*] [*$*] [*znak*] [*cyfr całkowitym*[*,*]]* typy całkowite cyfr*[*.* [*cyfr ułamkowych*]] [E [*znak*]*wykładniczej cyfr*] [*ws*]  
  
 Elementy w nawiasach kwadratowych ([ i ]) są opcjonalne. W tabeli poniżej opisano każdy element.  
  
 *ws*  
 Ciąg znaków spacji. Biały znak, może występować na początku `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flagę która może występować na końcu `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flagi.  
  
 $  
 Symbol waluty specyficzny dla kultury. Jej położenie w ciągu jest definiowana za pomocą <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> i <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> właściwości bieżącej kultury. Symbol waluty bieżącej kultury może występować w `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flagi.  
  
 *sign*  
 Symbol znaku minus (-) lub znaku dodatniego (+). Logowania może wystąpić na początku `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flagę która może występować na końcu `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flagi. Użycie nawiasów w `s` wskaż wartość ujemną, jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flagi.  
  
 *typy całkowite cyfr*  
 Ciąg cyfr od 0 do 9, które określają jej część całkowitą. *Cyfr całkowitym* element może być nieobecne w przypadku ciągu zawiera *cyfr ułamkowych* elementu.  
  
 ,  
 Separator grupy specyficzny dla kultury. Symbol separatora grupy bieżącej kultury może występować w `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flagi  
  
 .  
 Symbol dziesiętny specyficzny dla kultury. Symbol punktu dziesiętnego bieżącej kultury może występować w `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flagi.  
  
 *cyfr ułamkowych*  
 Ciąg cyfr od 0 do 9, które określają część ułamkową liczby. Cyfr ułamkowych może występować w `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flagi.  
  
 E  
 Znak „e” lub „E”, który wskazuje, że wartość jest reprezentowana w zapisie wykładniczym (naukowym). `value` Parametr może reprezentować liczbę w notacji wykładniczej, jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flagi.  
  
 *wykładniczej cyfr*  
 Ciąg cyfr od 0 do 9, które określają wykładnik potęgi.  
  
 Ciąg zawierający tylko cyfry (które odpowiada <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> styl) zawsze przeanalizowany pomyślnie. Pozostałe <xref:System.Globalization.NumberStyles?displayProperty=nameWithType> członkowie sterować elementy, które mogą być obecne, ale nie muszą znajdować się w ciągu wejściowym. W poniższej tabeli przedstawiono poszczególne <xref:System.Globalization.NumberStyles> flagi mają wpływ na elementy, które mogą być obecne w `s`.  
  
|Wartość wyliczenia NumberStyles|Elementy dozwolone w `s` oprócz cyfr|  
|------------------------|-----------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|*Cyfr całkowitym* tylko element.|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|Dziesiętnego (*.*) i *cyfr ułamkowych* elementów.|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|Znak „e” lub znak „E”, co oznacza zapis wykładniczy. Ta flaga samodzielnie obsługuje wartości w postaci *cyfr*E*cyfr*; dodatkowe flagi są niezbędne do pomyślnie analizowanie ciągów z takich elementów jak dodatnią lub ujemną znaki oraz symbole dziesiętnego.|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|*Ws* element na początku `s`.|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|*Ws* element na końcu `s`.|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|*Znak* element na początku `s`.|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|*Znak* element na końcu `s`.|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|*Znak* elementu w postaci nawiasów otaczającej wartość liczbową.|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|Element separatora tysięcznego (,).|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|Element określający walutę ($).|  
|<xref:System.Globalization.NumberStyles.Currency>|Wszystkie elementy. Jednak `s` nie może reprezentować liczbę szesnastkową lub numer w notacji wykładniczej.|  
|<xref:System.Globalization.NumberStyles.Float>|*Ws* element na początku lub na końcu `s`, *znak* na początku `s`oraz symbol punktu dziesiętnego (.). `s` Parametr można również użyć notacji wykładniczej.|  
|<xref:System.Globalization.NumberStyles.Number>|`ws`, `sign`, Tysięcy separatora (,) i elementy dziesiętnym (.).|  
|<xref:System.Globalization.NumberStyles.Any>|Wszystkie elementy. Jednak `s` nie może reprezentować liczbę szesnastkową.|  
  
 Przykłady `s` są "100", "-123,456,789", "123.45e + 6", "+500", "5e2", "3.1416", "600", "-. 123" i "-Infinity".  
  
 `s` Parametru jest analizować przy użyciu formatowania informacji w <xref:System.Globalization.NumberFormatInfo> obiekt, który został zainicjowany dla bieżącego ustawienia kulturowego systemu. Aby określić kulturę, którego formatowania informacje są używane dla operacji analizy, należy wywołać <xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> przeciążenia.  
  
 Zwykle w przypadku przekazania <xref:System.Single.Parse%2A> metody typu ciąg, który jest tworzony przez wywołanie metody <xref:System.Single.ToString%2A> metoda, oryginalny <xref:System.Single> jest zwracana wartość. Jednak ze względu na utratę precyzji wartości mogą być różne.  
  
 Jeśli okaże się separatorem w `s` parametr podczas operacji analizowania i odpowiedniej walucie lub liczbę dziesiętną i separatorów grup są takie same, operacji analizowania zakłada, że separator separator dziesiętny, a nie grupą separator. Aby uzyskać więcej informacji na temat separatorów, zobacz <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, i <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> metodę, aby przeanalizować reprezentacji ciągu <xref:System.Single> wartości. W przykładzie użyto informacje dotyczące formatowania dla kultury en US.  
  
 [!code-csharp[System.Single.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Parse/CS/parse2.cs#3)]
 [!code-vb[System.Single.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Parse/VB/parse2.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> nie jest liczbą w nieprawidłowym formacie.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Single.MinValue" /> lub większa niż <see cref="F:System.Single.MaxValue" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> nie jest <see cref="T:System.Globalization.NumberStyles" /> wartość.  - lub - <paramref name="style" /> obejmuje <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> wartość.</exception>
        <altmember cref="M:System.Single.ToString" />
        <altmember cref="Overload:System.Single.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static float Parse (string s, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Parse(string s, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Parse(System::String ^ s, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg zawierający liczbę, którą należy przekształcić.</param>
        <param name="provider">Obiekt, który dostarcza specyficzne dla kultury formatowania informacji na temat <c>s</c>.</param>
        <summary>Konwertuje reprezentację liczby w określonym formacie specyficzne dla kultury równoważne numer zmiennoprzecinkowych pojedynczej precyzji.</summary>
        <returns>Liczba zmiennoprzecinkowa pojedynczej precyzji odpowiednikiem wartość numeryczną lub symbol określony w <paramref name="s" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To przeciążenie jest zwykle używana do konwersji tekstu, które mogą być sformatowane na różne sposoby <xref:System.Single> wartość. Może na przykład służyć do skonwertowania tekstu wprowadzanego przez użytkownika w polu tekstowym HTML na wartość liczbową.  
  
 `s` Parametr jest interpretowany za pomocą kombinacji <xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType> i <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flagi. `s` Może zawierać parametru <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType>, lub <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType> dla kultury określonej przez `provider`, lub mogą zawierać ciąg w formie:  
  
 [*ws*] [*znak*]*cyfr całkowitym*[*.* [*cyfr ułamkowych*]] [E [*znak*]*wykładniczej cyfr*] [*ws*]  
  
 Elementy opcjonalne są obramowane nawiasami kwadratowymi ([ i ]). Elementy, które zawierają „cyfry”, składają się z serii cyfr od 0 do 9.  
  
|Element|Opis|  
|-------------|-----------------|  
|*ws*|Ciąg znaków spacji.|  
|*sign*|Symbol znaku minus (-) lub znaku dodatniego (+).|  
|*typy całkowite cyfr*|Ciąg cyfr od 0 do 9, które określają jej część całkowitą. Działa z *cyfr całkowitym* symbol separatora grupy można podzielić na partycje. Na przykład w niektórych kulturach przecinek (,) oddziela grupy wartości tysięcznych. *Cyfr całkowitym* element może być nieobecne w przypadku ciągu zawiera *cyfr ułamkowych* elementu.|  
|.|Symbol dziesiętny specyficzny dla kultury.|  
|*cyfr ułamkowych*|Ciąg cyfr od 0 do 9, które określają część ułamkową liczby.|  
|E|Znak „e” lub „E”, który wskazuje, że wartość jest reprezentowana w zapisie wykładniczym (naukowym).|  
|*wykładniczej cyfr*|Ciąg cyfr od 0 do 9, które określają wykładnik potęgi.|  
  
 Aby uzyskać więcej informacji na temat formaty liczbowe, zobacz [typy formatowania](~/docs/standard/base-types/formatting-types.md) tematu.  
  
 `provider` Parametr jest <xref:System.IFormatProvider> implementacji których <xref:System.IFormatProvider.GetFormat%2A> metoda zwraca <xref:System.Globalization.NumberFormatInfo> obiekt, który zawiera informacje dotyczące formatowania specyficzne dla kultury. Gdy <xref:System.Single.Parse%28System.String%2CSystem.IFormatProvider%29> wywołania metody, wywołuje `provider` parametru <xref:System.IFormatProvider.GetFormat%2A> — metoda i przekazuje je <xref:System.Type> obiekt, który reprezentuje <xref:System.Globalization.NumberFormatInfo> typu. <xref:System.IFormatProvider.GetFormat%2A> Następnie metoda zwraca <xref:System.Globalization.NumberFormatInfo> obiektu, który zawiera informacje o formacie `s` parametru. Istnieją trzy sposoby używania `provider` parametr, aby podać informacje dotyczące formatowania niestandardowych operacji analizy:  
  
-   Można przekazać <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje kultury, który dostarcza informacje dotyczące formatowania. Jego <xref:System.Globalization.CultureInfo.GetFormat%2A> metoda zwraca <xref:System.Globalization.NumberFormatInfo> obiekt, który zawiera informacje numeryczne formatowania dla tej kultury.  
  
-   Można przekazać rzeczywiste <xref:System.Globalization.NumberFormatInfo> obiekt, który zawiera informacje numeryczne formatowania. (Jej implementacja <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> zwraca siebie, po prostu.)  
  
-   Można przekazać niestandardowego obiektu, który implementuje <xref:System.IFormatProvider>. Jego <xref:System.IFormatProvider.GetFormat%2A> metoda tworzy i zwraca <xref:System.Globalization.NumberFormatInfo> obiekt, który zawiera informacje dotyczące formatowania.  
  
 Jeśli `provider` jest `null` lub <xref:System.Globalization.NumberFormatInfo> nie można uzyskać, informacje dotyczące formatowania dla bieżącego ustawienia kulturowego systemu.  
  
 Jeśli okaże się separatorem w `s` parametr podczas operacji analizowania i odpowiedniej walucie lub liczbę dziesiętną i separatorów grup są takie same, operacji analizowania zakłada, że separator separator dziesiętny, a nie grupą separator. Aby uzyskać więcej informacji na temat separatorów, zobacz <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, i <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.  
  
 Przykłady `s` są "100", "-123,456,789", "123.45e + 6", "+500", "5e2", "3.1416", "600", "-. 123" i "-Infinity".  
  
   
  
## Examples  
 W poniższym przykładzie występuje program obsługi zdarzeń kliknięcia przycisku w formularzu sieci Web. Używa tablicy zwracanej przez <xref:System.Web.HttpRequest.UserLanguages%2A?displayProperty=nameWithType> właściwości w celu określenia ustawień regionalnych użytkownika. Następnie tworzy <xref:System.Globalization.CultureInfo> obiekt, który odpowiada ustawień regionalnych. <xref:System.Globalization.NumberFormatInfo> Obiektu, który należy do tego <xref:System.Globalization.CultureInfo> obiektu są następnie przekazywane do <xref:System.Single.Parse%28System.String%2CSystem.IFormatProvider%29> wejściowych metodę, aby przekonwertować użytkownika do <xref:System.Single> wartości.  
  
 [!code-csharp[ParseMethod#1](~/samples/snippets/csharp/VS_Snippets_CLR/ParseMethod/cs/Default.aspx.cs#1)]
 [!code-vb[ParseMethod#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ParseMethod/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> reprezentuje numer w nieprawidłowym formacie.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> reprezentuje liczbę mniej niż <see cref="F:System.Single.MinValue" /> lub większa niż <see cref="F:System.Single.MaxValue" />.</exception>
        <altmember cref="M:System.Single.ToString" />
        <altmember cref="Overload:System.Single.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static float Parse (ReadOnlySpan&lt;char&gt; s, System.Globalization.NumberStyles style = System.Globalization.NumberStyles.AllowDecimalPoint | System.Globalization.NumberStyles.AllowExponent | System.Globalization.NumberStyles.AllowLeadingSign | System.Globalization.NumberStyles.AllowLeadingWhite | System.Globalization.NumberStyles.AllowThousands | System.Globalization.NumberStyles.AllowTrailingWhite | System.Globalization.NumberStyles.Float | System.Globalization.NumberStyles.Integer, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As ReadOnlySpan(Of Char), Optional style As NumberStyles = System.Globalization.NumberStyles.AllowDecimalPoint | System.Globalization.NumberStyles.AllowExponent | System.Globalization.NumberStyles.AllowLeadingSign | System.Globalization.NumberStyles.AllowLeadingWhite | System.Globalization.NumberStyles.AllowThousands | System.Globalization.NumberStyles.AllowTrailingWhite | System.Globalization.NumberStyles.Float | System.Globalization.NumberStyles.Integer, Optional provider As IFormatProvider = null) As Single" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="style">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static float Parse (string s, System.Globalization.NumberStyles style, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Parse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, style As NumberStyles, provider As IFormatProvider) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Parse(System::String ^ s, System::Globalization::NumberStyles style, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg zawierający liczbę, którą należy przekształcić.</param>
        <param name="style">Bitowe połączenie wartości wyliczenia wskazująca elementy style, które mogą być obecne w <c>s</c>. Jest Typowa wartość do określenia <see cref="F:System.Globalization.NumberStyles.Float" /> połączone z <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
        <param name="provider">Obiekt, który dostarcza specyficzne dla kultury formatowania informacji na temat <c>s</c>.</param>
        <summary>Konwertuje reprezentację liczby w określonym styl i format specyficzne dla kultury równoważne numer zmiennoprzecinkowych pojedynczej precyzji.</summary>
        <returns>Liczba zmiennoprzecinkowa pojedynczej precyzji odpowiednikiem wartość numeryczną lub symbol określony w <paramref name="s" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `style` Parametru definiuje elementy style (takich jak biały znak, tysięcy separatorów i symboli walut) mogą w `s` parametr powodzenie operacji analizy. Musi być kombinacją flag bitowych z <xref:System.Globalization.NumberStyles> wyliczenia. Następujące <xref:System.Globalization.NumberStyles> elementy członkowskie nie są obsługiwane:  
  
-   <xref:System.Globalization.NumberStyles.AllowHexSpecifier>  
  
-   <xref:System.Globalization.NumberStyles.HexNumber>  
  
 `s` Może zawierać parametru <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType>, lub <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType> dla kultury określonej przez `provider`. W zależności od wartości `style`, również może mieć postać:  
  
 [*ws*] [*$*] [*znak*] [*całkowite cyfr*,]*cyfr całkowitym*[. [ *cyfr ułamkowych*]] [E [*znak*]*wykładniczej cyfr*] [*ws*]  
  
 Elementy w ramce w nawiasy kwadratowe ([i]) są opcjonalne. W tabeli poniżej opisano każdy element.  
  
|Element|Opis|  
|-------------|-----------------|  
|*ws*|Ciąg znaków spacji. Biały znak, może występować na początku `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flagę która może występować na końcu `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flagi.|  
|$|Symbol waluty specyficzny dla kultury. Jej położenie w ciągu jest definiowana za pomocą <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> i <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> właściwości bieżącej kultury. Symbol waluty bieżącej kultury może występować w `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flagi.|  
|*sign*|Symbol znaku minus (-) lub znaku dodatniego (+). Logowania może wystąpić na początku `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flagę która może występować na końcu `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flagi. Użycie nawiasów w `s` wskaż wartość ujemną, jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flagi.|  
|*typy całkowite cyfr*|Ciąg cyfr od 0 do 9, które określają jej część całkowitą. *Cyfr całkowitym* element może być nieobecne w przypadku ciągu zawiera *cyfr ułamkowych* elementu.|  
|,|Separator grupy specyficzny dla kultury. Symbol separatora grupy bieżącej kultury może występować w `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flagi|  
|.|Symbol dziesiętny specyficzny dla kultury. Symbol punktu dziesiętnego bieżącej kultury może występować w `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flagi.|  
|*cyfr ułamkowych*|Ciąg cyfr od 0 do 9, które określają część ułamkową liczby. Cyfr ułamkowych może występować w `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flagi.|  
|E|Znak „e” lub „E”, który wskazuje, że wartość jest reprezentowana w zapisie wykładniczym (naukowym). `s` Parametr może reprezentować liczbę w notacji wykładniczej, jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flagi.|  
|*wykładniczej cyfr*|Ciąg cyfr od 0 do 9, które określają wykładnik potęgi.|  
  
 Ciąg zawierający tylko cyfry (które odpowiada <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> styl) zawsze przeanalizowany pomyślnie. Pozostałe <xref:System.Globalization.NumberStyles?displayProperty=nameWithType> członkowie sterować elementy, które mogą być obecne, ale nie muszą znajdować się w ciągu wejściowym. W poniższej tabeli przedstawiono poszczególne <xref:System.Globalization.NumberStyles> flagi mają wpływ na elementy, które mogą być obecne w `s`.  
  
|Wartość wyliczenia NumberStyles|Elementy dozwolone w `s` oprócz cyfr|  
|------------------------|-----------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|*Cyfr całkowitym* tylko element.|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|Dziesiętnego (*.*) i *cyfr ułamkowych* elementów.|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|Znak „e” lub znak „E”, co oznacza zapis wykładniczy. Ta flaga samodzielnie obsługuje wartości w postaci *cyfr*E*cyfr*; dodatkowe flagi są niezbędne do pomyślnie analizowanie ciągów z takich elementów jak dodatnią lub ujemną znaki oraz symbole dziesiętnego.|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|*Ws* element na początku `s`.|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|*Ws* element na końcu `s`.|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|*Znak* element na początku `s`.|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|*Znak* element na końcu `s`.|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|*Znak* elementu w postaci nawiasów otaczającej wartość liczbową.|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|Element separatora tysięcznego (,).|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|Element określający walutę ($).|  
|<xref:System.Globalization.NumberStyles.Currency>|Wszystkie elementy. Jednak `s` nie może reprezentować liczbę szesnastkową lub numer w notacji wykładniczej.|  
|<xref:System.Globalization.NumberStyles.Float>|*Ws* element na początku lub na końcu `s`, *znak* na początku `s`oraz symbol punktu dziesiętnego (.). `s` Parametr można również użyć notacji wykładniczej.|  
|<xref:System.Globalization.NumberStyles.Number>|`ws`, `sign`, Tysięcy separatora (,) i elementy dziesiętnym (.).|  
|<xref:System.Globalization.NumberStyles.Any>|Wszystkie elementy. Jednak `s` nie może reprezentować liczbę szesnastkową.|  
  
 `provider` Parametr jest <xref:System.IFormatProvider> implementacji. Jego <xref:System.IFormatProvider.GetFormat%2A> metoda zwraca <xref:System.Globalization.NumberFormatInfo> obiektu, który zawiera informacje specyficzne dla kultury o format `value`. Zazwyczaj `provider` może być jednym z następujących czynności:  
  
-   A <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje kultura, która zawiera dane liczbowe formatowania. Jego <xref:System.Globalization.CultureInfo.GetFormat%2A> metoda zwraca <xref:System.Globalization.NumberFormatInfo> obiekt, który zawiera informacje numeryczne formatowania.  
  
-   A <xref:System.Globalization.NumberFormatInfo> obiekt, który zawiera informacje dotyczące formatowania. (Jej implementacja <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> zwraca siebie, po prostu.)  
  
-   Niestandardowy obiekt, który implementuje <xref:System.IFormatProvider> i używa <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> metody w celu utworzenia wystąpienia i zwracać <xref:System.Globalization.NumberFormatInfo> obiekt, który zawiera informacje dotyczące formatowania.  
  
 Jeśli `provider` jest `null`, <xref:System.Globalization.NumberFormatInfo> obiektu dla bieżącej kultury jest używany.  
  
 Jeśli okaże się separatorem w `s` parametr podczas operacji analizowania i odpowiedniej walucie lub liczbę dziesiętną i separatorów grup są takie same, operacji analizowania zakłada, że separator separator dziesiętny, a nie grupą separator. Aby uzyskać więcej informacji na temat separatorów, zobacz <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, i <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.  
  
   
  
## Examples  
 Poniższy przykład kodu wykorzystuje <xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> metodę, aby przeanalizować reprezentacji ciągu <xref:System.Single> wartości. Każdy ciąg w tablicy jest analizowana przy użyciu konwencji formatowania en US, nl-NL i kulturą niestandardową. Kultura niestandardowa definiuje symbol separatora grupy jako znak podkreślenia ("_") i jego rozmiar grupy jako dwa.  
  
 [!code-csharp[System.Single.Parse#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Parse/CS/parse3.cs#4)]
 [!code-vb[System.Single.Parse#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Parse/VB/parse3.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> reprezentuje wartość numeryczną.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> nie jest <see cref="T:System.Globalization.NumberStyles" /> wartość.  - lub - <paramref name="style" /> jest <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> wartość.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Single.MinValue" /> lub większa niż <see cref="F:System.Single.MaxValue" />.</exception>
        <altmember cref="M:System.Single.ToString" />
      </Docs>
    </Member>
    <Member MemberName="PositiveInfinity">
      <MemberSignature Language="C#" Value="public const float PositiveInfinity = Infinity;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 PositiveInfinity = float32(Infinity)" />
      <MemberSignature Language="DocId" Value="F:System.Single.PositiveInfinity" />
      <MemberSignature Language="VB.NET" Value="Public Const PositiveInfinity As Single  = Infinity" />
      <MemberSignature Language="C++ CLI" Value="public: float PositiveInfinity = Infinity;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>Infinity</MemberValue>
      <Docs>
        <summary>Reprezentuje nieskończoności dodatniej. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość tej stałej jest wynik dzielenia przez zero liczbą dodatnią.  
  
 To stała jest zwracany, jeśli wynikiem operacji jest większa niż <xref:System.Single.MaxValue>.  
  
 Użyj <xref:System.Single.IsPositiveInfinity%2A> ustalenie, czy wartości daje w wyniku nieskończoności dodatniej.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje <xref:System.Single.PositiveInfinity> stałej.  
  
 [!code-cpp[System.Single#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#10)]
 [!code-csharp[System.Single#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#10)]
 [!code-vb[System.Single#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.IsPositiveInfinity(System.Single)" />
        <altmember cref="M:System.Single.IsInfinity(System.Single)" />
        <altmember cref="F:System.Single.NegativeInfinity" />
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (value As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ value) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ten parametr jest ignorowany.</param>
        <summary>Opis tego elementu członkowskiego, zobacz <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</summary>
        <returns>
          <see langword="true" /> Jeśli wartość bieżącego wystąpienia nie jest 0; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Single> wystąpienia jest rzutowane na <xref:System.IConvertible> interfejsu. Zalecaną alternatywą jest wywołanie <xref:System.Convert.ToBoolean%28System.Single%29?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ten parametr jest ignorowany.</param>
        <summary>Opis tego elementu członkowskiego, zobacz <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</summary>
        <returns>Wartość bieżącego wystąpienia przekonwertować <see cref="T:System.Byte" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Single> wystąpienia jest rzutowane na <xref:System.IConvertible> interfejsu. Zalecaną alternatywą jest wywołanie <xref:System.Convert.ToByte%28System.Single%29?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ten parametr jest ignorowany.</param>
        <summary>Ta konwersja nie jest obsługiwana. Podjęto próbę użycia Ta metoda zgłasza <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Ta konwersja nie jest obsługiwana. Nie jest zwracana żadna wartość.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">We wszystkich przypadkach.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ten parametr jest ignorowany.</param>
        <summary>Ta konwersja nie jest obsługiwana. Podjęto próbę użycia Ta metoda zgłasza <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Ta konwersja nie jest obsługiwana. Nie jest zwracana żadna wartość.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">We wszystkich przypadkach.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ten parametr jest ignorowany.</param>
        <summary>Opis tego elementu członkowskiego, zobacz <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</summary>
        <returns>Wartość bieżącego wystąpienia przekonwertować <see cref="T:System.Decimal" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Single> wystąpienia jest rzutowane na <xref:System.IConvertible> interfejsu. Zalecaną alternatywą jest wywołanie <xref:System.Convert.ToDecimal%28System.Single%29?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ten parametr jest ignorowany.</param>
        <summary>Opis tego elementu członkowskiego, zobacz <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</summary>
        <returns>Wartość bieżącego wystąpienia przekonwertować <see cref="T:System.Double" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Single> wystąpienia jest rzutowane na <xref:System.IConvertible> interfejsu. Zalecaną alternatywą jest wywołanie <xref:System.Convert.ToDouble%28System.Single%29?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ten parametr jest ignorowany.</param>
        <summary>Opis tego elementu członkowskiego, zobacz <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</summary>
        <returns>Wartość bieżącego wystąpienia przekonwertować <see cref="T:System.Int16" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Single> wystąpienia jest rzutowane na <xref:System.IConvertible> interfejsu. Zalecaną alternatywą jest wywołanie <xref:System.Convert.ToInt16%28System.Single%29?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ten parametr jest ignorowany.</param>
        <summary>Opis tego elementu członkowskiego, zobacz <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
        <returns>Wartość bieżącego wystąpienia przekonwertować <see cref="T:System.Int32" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Single> wystąpienia jest rzutowane na <xref:System.IConvertible> interfejsu. Zalecaną alternatywą jest wywołanie <xref:System.Convert.ToInt32%28System.Single%29?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ten parametr jest ignorowany.</param>
        <summary>Opis tego elementu członkowskiego, zobacz <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
        <returns>Wartość bieżącego wystąpienia przekonwertować <see cref="T:System.Int64" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Single> wystąpienia jest rzutowane na <xref:System.IConvertible> interfejsu. Zalecaną alternatywą jest wywołanie <xref:System.Convert.ToInt64%28System.Single%29?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ten parametr jest ignorowany.</param>
        <summary>Opis tego elementu członkowskiego, zobacz <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</summary>
        <returns>Wartość bieżącego wystąpienia przekonwertować <see cref="T:System.SByte" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Single> wystąpienia jest rzutowane na <xref:System.IConvertible> interfejsu. Zalecaną alternatywą jest wywołanie <xref:System.Convert.ToSByte%28System.Single%29?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ten parametr jest ignorowany.</param>
        <summary>Opis tego elementu członkowskiego, zobacz <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</summary>
        <returns>Wartość bieżącego wystąpienia, bez zmian.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Single> wystąpienia jest rzutowane na <xref:System.IConvertible> interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="type">Typ, do którego można przekonwertować to <see cref="T:System.Single" /> wartość.</param>
        <param name="provider">Obiekt, który dostarcza informacji na temat formatu zwracanej wartości.</param>
        <summary>Opis tego elementu członkowskiego, zobacz <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</summary>
        <returns>Wartość bieżącego wystąpienia przekonwertować <paramref name="type" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Single> wystąpienia jest rzutowane na <xref:System.IConvertible> interfejsu. Zalecaną alternatywą jest wywołanie `static` (`Shared` w języku Visual Basic) <xref:System.Convert.ChangeType%2A?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ten parametr jest ignorowany.</param>
        <summary>Opis tego elementu członkowskiego, zobacz <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
        <returns>Wartość bieżącego wystąpienia przekonwertować <see cref="T:System.UInt16" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Single> wystąpienia jest rzutowane na <xref:System.IConvertible> interfejsu. Zalecaną alternatywą jest wywołanie <xref:System.Convert.ToUInt16%28System.Single%29?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ten parametr jest ignorowany.</param>
        <summary>Opis tego elementu członkowskiego, zobacz <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</summary>
        <returns>Wartość bieżącego wystąpienia przekonwertować <see cref="T:System.UInt32" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Single> wystąpienia jest rzutowane na <xref:System.IConvertible> interfejsu. Zalecaną alternatywą jest wywołanie <xref:System.Convert.ToUInt32%28System.Single%29?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ten parametr jest ignorowany.</param>
        <summary>Opis tego elementu członkowskiego, zobacz <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</summary>
        <returns>Wartość bieżącego wystąpienia przekonwertować <see cref="T:System.UInt64" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Single> wystąpienia jest rzutowane na <xref:System.IConvertible> interfejsu. Zalecaną alternatywą jest wywołanie <xref:System.Convert.ToUInt64%28System.Single%29?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje wartość liczbową tego wystąpienia na równoważną reprezentację w postaci ciągu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konwertuje wartość liczbową tego wystąpienia na równoważną reprezentację w postaci ciągu.</summary>
        <returns>Ciąg reprezentujący wartość tego wystąpienia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Single.ToString> Formatów metody <xref:System.Single> wartości domyślnej ("G" lub ogólny) formacie bieżącej kultury. Jeśli chcesz określić inny format lub kultury, użyj innego przeciążenia metody <xref:System.Single.ToString%2A> metody, w następujący sposób:  
  
|Aby użyć formatu|Dla kultury|Użyj przeciążenia|  
|-------------------|-----------------|----------------------|  
|Format domyślny ("G")|Określoną kulturę|<xref:System.Single.ToString%28System.IFormatProvider%29>|  
|Określony format|Domyślną kulturę (bieżącego)|<xref:System.Single.ToString%28System.String%29>|  
|Określony format|Określoną kulturę|<xref:System.Single.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 Zwracana wartość może być <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, lub ciągiem w postaci:  
  
 [znak]cyfry-całkowite[.[cyfry-ułamkowe]][e[znak]cyfry-wykładnicze]  
  
 Elementy opcjonalne są obramowane nawiasami kwadratowymi ([ i ]). Elementy, które zawierają „cyfry”, składają się z serii cyfr od 0 do 9. W poniższej tabeli wymieniono każdego elementu:  
  
|Element|Opis|  
|-------------|-----------------|  
|*sign*|Znak ujemny lub symbol znaku dodatniego.|  
|*typy całkowite cyfr*|Ciąg cyfr określający część całkowitą liczby. Cyfry całkowite mogą być nieobecne w przypadku cyfr ułamkowych.|  
|'.'|Symbol dziesiętny specyficzny dla kultury.|  
|*cyfr ułamkowych*|Ciąg cyfr określający część ułamkową liczby.|  
|"e"|Mała litera „e”, wskazująca zapis wykładniczy (naukowy).|  
|*wykładniczej cyfr*|Ciąg cyfr określające wykładnik potęgi.|  
  
 Oto kilka przykładów zwracanej wartości: „100”, „-123,456,789”, „123.45e + 6”, „500”, „3.1416”, „600”, „-0.123” i „-nieskończoność”.  
  
 Środowisko .NET Framework zapewnia rozbudowaną obsługę formatowania. Opisano to szczegółowo w następujących tematach poświęconych formatowaniu:  
  
-   Aby uzyskać więcej informacji na temat specyfikatorów formatu liczbowego, zobacz [standardowe ciągi formatu liczbowego](~/docs/standard/base-types/standard-numeric-format-strings.md) i [niestandardowe ciągi formatów liczbowych](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Aby uzyskać więcej informacji na temat formatowania, zobacz [typy formatowania](~/docs/standard/base-types/formatting-types.md).  
  
   
  
## Examples  
 W poniższym przykładzie użyto domyślnie <xref:System.Single.ToString%2A?displayProperty=nameWithType> metodę w celu wyświetlenia reprezentacji ciągu liczby <xref:System.Single> wartości.  
  
 [!code-csharp[System.Single.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.ToString/CS/ToString1.cs#1)]
 [!code-vb[System.Single.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.ToString/VB/ToString1.vb#1)]  
  
 W poniższym przykładzie przedstawiono użycie <xref:System.Single.Parse%28System.String%29> metody wraz z programem <xref:System.Single.ToString> metody.  
  
 [!code-cpp[System.Single#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#3)]
 [!code-csharp[System.Single#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#3)]
 [!code-vb[System.Single#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje wartość liczbową tego wystąpienia na równoważną reprezentację w postaci ciągu przy użyciu podanych danych formatowania specyficznych dla kultury.</summary>
        <returns>Reprezentacja ciągu wartość tego wystąpienia, określony przez <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Single.ToString%28System.IFormatProvider%29> Formatów metody <xref:System.Single> wartości domyślnej ("G" lub ogólny) format określonej kultury. Jeśli chcesz określić inny format lub bieżącej kultury, użyj innego przeciążenia metody <xref:System.Single.ToString%2A> metody, w następujący sposób:  
  
|Aby użyć formatu|Dla kultury|Użyj przeciążenia|  
|-------------------|-----------------|----------------------|  
|Format domyślny ("G")|Domyślną kulturę (bieżącego)|<xref:System.Single.ToString>|  
|Określony format|Domyślną kulturę (bieżącego)|<xref:System.Single.ToString%28System.String%29>|  
|Określony format|Określoną kulturę|<xref:System.Single.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 Zwracana wartość może być <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, lub ciągiem w postaci:  
  
 [znak]cyfry-całkowite[.[cyfry-ułamkowe]][e[znak]cyfry-wykładnicze]  
  
 Elementy opcjonalne są obramowane nawiasami kwadratowymi ([ i ]). Elementy zawierające "cyfr" składają się z szeregu cyfry od 0 do 9. W poniższej tabeli wymieniono każdego elementu.  
  
|Element|Opis|  
|-------------|-----------------|  
|znak|Znak ujemny lub symbol znaku dodatniego.|  
|cyfry-całkowite|Ciąg cyfr określający część całkowitą liczby. Cyfry całkowite mogą być nieobecne w przypadku cyfr ułamkowych.|  
|'.'|Symbol dziesiętny specyficzny dla kultury.|  
|cyfry-ułamkowe|Ciąg cyfr określający część ułamkową liczby.|  
|"e"|Mała litera „e”, wskazująca zapis wykładniczy (naukowy).|  
|cyfry-wykładnicze|Ciąg cyfr określające wykładnik potęgi.|  
  
 Oto kilka przykładów zwracanej wartości: „100”, „-123,456,789”, „123.45e + 6”, „500”, „3.1416”, „600”, „-0.123” i „-nieskończoność”.  
  
 Środowisko .NET Framework zapewnia rozbudowaną obsługę formatowania. Opisano to szczegółowo w następujących tematach poświęconych formatowaniu:  
  
-   Aby uzyskać więcej informacji na temat specyfikatorów formatu liczbowego, zobacz [standardowe ciągi formatu liczbowego](~/docs/standard/base-types/standard-numeric-format-strings.md) i [niestandardowe ciągi formatów liczbowych](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Aby uzyskać więcej informacji na temat formatowania, zobacz [typy formatowania](~/docs/standard/base-types/formatting-types.md).  
  
 `provider` Parametr jest <xref:System.IFormatProvider> implementacji których <xref:System.IFormatProvider.GetFormat%2A> metoda zwraca <xref:System.Globalization.NumberFormatInfo> obiektu. Zazwyczaj `provider` jest <xref:System.Globalization.CultureInfo> obiektu lub <xref:System.Globalization.NumberFormatInfo> obiektu. `provider` Parametru zapewnia informacje specyficzne dla kultury używaną w formatowaniu. Jeśli `provider` jest `null`, wartość zwracana jest sformatowany przy użyciu <xref:System.Globalization.NumberFormatInfo> danych dla bieżącej kultury.  
  
 Aby przekonwertować <xref:System.Single> wartość do reprezentacji ciągu przy użyciu określonej kultury i ciągu określonego formatu, wywołanie <xref:System.Single.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> metody.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono reprezentację dwa <xref:System.Single> wartości przy użyciu <xref:System.Globalization.CultureInfo> obiektów, które reprezentują kilka innych kultur.  
  
 [!code-csharp[System.Single.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.ToString/CS/ToString1.cs#2)]
 [!code-vb[System.Single.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.ToString/VB/ToString1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Ciąg formatu liczbowego.</param>
        <summary>Konwertuje wartość liczbową tego wystąpienia na równoważną reprezentację w postaci ciągu przy użyciu podanego formatu.</summary>
        <returns>Reprezentacja ciągu wartość tego wystąpienia, określony przez <paramref name="format" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Single.ToString%28System.String%29> Formatów metody <xref:System.Single> wartości w określonym formacie przy użyciu konwencji bieżącej kultury. Jeśli chcesz użyć domyślnej ("G" lub ogólny) format lub określ inną kulturę, użyj innego przeciążenia metody <xref:System.Single.ToString%2A> metody, w następujący sposób:  
  
|Aby użyć formatu|Dla kultury|Użyj przeciążenia|  
|-------------------|-----------------|----------------------|  
|Format domyślny ("G")|Domyślną kulturę (bieżącego)|<xref:System.Single.ToString>|  
|Format domyślny ("G")|Określoną kulturę|<xref:System.Single.ToString%28System.IFormatProvider%29>|  
|Określony format|Określoną kulturę|<xref:System.Single.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 Zwracana wartość może być <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, lub reprezentację ciągu bieżącego wystąpienia określoną przez wartość `format`.  
  
 `format` Parametr może mieć żadnych specyfikator prawidłowy standardowego formatu liczbowego, z wyjątkiem D i X, a także dowolną kombinację specyfikatory niestandardowego formatu liczbowego. Jeśli format jest `null` lub pusty ciąg, wartość zwracana jest sformatowany w systemie specyfikator formatu liczbowego ogólne ("G").  
  
 Środowisko .NET Framework zapewnia rozbudowaną obsługę formatowania. Opisano to szczegółowo w następujących tematach poświęconych formatowaniu:  
  
-   Aby uzyskać więcej informacji na temat specyfikatorów formatu liczbowego, zobacz [standardowe ciągi formatu liczbowego](~/docs/standard/base-types/standard-numeric-format-strings.md) i [niestandardowe ciągi formatów liczbowych](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Aby uzyskać więcej informacji na temat formatowania, zobacz [typy formatowania](~/docs/standard/base-types/formatting-types.md).  
  
 Domyślnie zwracana wartość zawiera tylko 7 cyfr precyzji chociaż maksymalnie 9 cyfr jest obsługiwany wewnętrznie. Jeśli wartość tego wystąpienia jest większa niż 7 cyfr <xref:System.Single.ToString%28System.String%29> zwraca <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A> lub <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A> zamiast oczekiwanej liczby. Jeśli potrzebujesz bardziej precyzyjnie określić `format` ze specyfikacją formatu "G9" zawsze zwraca 9 cyfr precyzji lub "R", która zwraca 7 cyfr, jeśli liczba może być reprezentowany z tym dokładności lub 9 cyfr, jeśli numer tylko może być reprezentowany z precyzja maksymalna.  
  
   
  
## Examples  
 W poniższym przykładzie określa wartość liczbową i formatuje je jako wartość walutową przy użyciu ciągu standardowego formatu liczbowego "C" i jako wartość liczbowa do trzech miejsc dziesiętnych przy użyciu ciągu standardowego formatu liczbowego "N". Ciągi wynik są sformatowane przy użyciu konwencji kultury en US. Aby uzyskać więcej informacji na ciągi formatujące liczb, zobacz [standardowe ciągi formatu liczbowego](~/docs/standard/base-types/standard-numeric-format-strings.md) i [niestandardowe ciągi formatów liczbowych](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
 [!code-csharp[System.Single.ToString#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.ToString/CS/ToString7.cs#7)]
 [!code-vb[System.Single.ToString#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.ToString/VB/ToString7.vb#7)]  
  
 W poniższym przykładzie przedstawiono kilka <xref:System.Single> wartości przy użyciu specyfikatory obsługiwanego formatu liczbowego standardowe wraz z dwóch niestandardowe ciągi formatujące liczby. Jeden z tych niestandardowych ciągów formatu ilustruje sposób konsoli <xref:System.Single> wartości z zerami. W celu przeliczenia wartości liczbowych na ciągi w przykładzie użyto konwencji formatowania kultury en-US.  
  
 [!code-csharp[System.Single.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.ToString/CS/ToString1.cs#3)]
 [!code-vb[System.Single.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.ToString/VB/ToString1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> jest nieprawidłowy.</exception>
        <altmember cref="M:System.Single.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Ciąg formatu liczbowego.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje wartość liczbową tego wystąpienia na równoważną reprezentację w postaci ciągu przy użyciu podanego formatu i informacji specyficznych dla kultury.</summary>
        <returns>Reprezentacja ciągu wartość tego wystąpienia, określony przez <paramref name="format" /> i <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Single.ToString%28System.String%2CSystem.IFormatProvider%29> Formatów metody <xref:System.Single> wartości w określonym formacie określonej kultury. Jeśli chcesz użyć formatu lub kultury ustawień domyślnych, użyj innego przeciążenia metody <xref:System.Single.ToString%2A> metody, w następujący sposób:  
  
|Aby użyć formatu|Dla kultury|Użyj przeciążenia|  
|-------------------|-----------------|----------------------|  
|Format domyślny ("G")|Domyślną kulturę (bieżącego)|<xref:System.Single.ToString>|  
|Format domyślny ("G")|Określoną kulturę|<xref:System.Single.ToString%28System.IFormatProvider%29>|  
|Określony format|Domyślną kulturę (bieżącego)|<xref:System.Single.ToString%28System.String%29>|  
  
 Zwracana wartość może być <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, lub reprezentację ciągu bieżącego wystąpienia określoną przez wartość `format`.  
  
 `format` Parametr może mieć żadnych specyfikator prawidłowy standardowego formatu liczbowego, z wyjątkiem D i X, a także dowolną kombinację specyfikatory niestandardowego formatu liczbowego. Jeśli `format` jest `null` lub pusty ciąg, wartość zwracana dla tego wystąpienia jest sformatowany w systemie specyfikator formatu liczbowego ogólne ("G").  
  
 Środowisko .NET Framework zapewnia rozbudowaną obsługę formatowania. Opisano to szczegółowo w następujących tematach poświęconych formatowaniu:  
  
-   Aby uzyskać więcej informacji na temat specyfikatorów formatu liczbowego, zobacz [standardowe ciągi formatu liczbowego](~/docs/standard/base-types/standard-numeric-format-strings.md) i [niestandardowe ciągi formatów liczbowych](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Aby uzyskać więcej informacji na temat formatowania, zobacz [typy formatowania](~/docs/standard/base-types/formatting-types.md).  
  
 `provider` Parametr jest <xref:System.IFormatProvider> implementacji których <xref:System.IFormatProvider.GetFormat%2A> metoda zwraca <xref:System.Globalization.NumberFormatInfo> obiektu. Zazwyczaj `provider` jest <xref:System.Globalization.CultureInfo> obiektu lub <xref:System.Globalization.NumberFormatInfo> obiektu. `provider` Parametru zapewnia informacje specyficzne dla kultury używaną w formatowaniu. Jeśli `provider` jest `null`, wartość zwracana jest sformatowany w systemie <xref:System.Globalization.NumberFormatInfo> obiektu dla bieżącej kultury.  
  
 Domyślnie zwracana wartość zawiera tylko 7 cyfr precyzji chociaż maksymalnie 9 cyfr jest obsługiwany wewnętrznie. Jeśli wartość tego wystąpienia jest większa niż 7 cyfr <xref:System.Single.ToString%2A> zwraca <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A> lub <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A> zamiast oczekiwanej liczby. Jeśli potrzebujesz bardziej precyzyjnie określić `format` ze specyfikacją formatu "G9" zawsze zwraca 9 cyfr precyzji lub "R", która zwraca 7 cyfr, jeśli liczba może być reprezentowany z tym dokładności lub 9 cyfr, jeśli numer tylko może być reprezentowany z precyzja maksymalna.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono <xref:System.Single> wartość przy użyciu specyfikatory obsługiwanego formatu liczbowego standardowe dla kilku różnych kultur.  
  
 [!code-csharp[System.Single.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.ToString/CS/ToString1.cs#4)]
 [!code-vb[System.Single.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.ToString/VB/ToString1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = null, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional provider As IFormatProvider = null) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje ciąg reprezentujący liczbę na odpowiadającą mu liczbę zmiennoprzecinkową pojedynczej precyzji. Zwracana wartość wskazuje, czy konwersja powiodła się czy nie.</summary>
        <altmember cref="Overload:System.Single.Parse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, out float result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, [out] float32&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.TryParse(System.ReadOnlySpan{System.Char},System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), ByRef result As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, [Runtime::InteropServices::Out] float % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="result" Type="System.Single&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out float result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] float32&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.TryParse(System.String,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, ByRef result As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, [Runtime::InteropServices::Out] float % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="result" Type="System.Single&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg reprezentujący liczbę do przekonwertowania.</param>
        <param name="result">Po powrocie z tej metody zawiera wartość liczbowa lub symbol zawarte w liczbie zmiennoprzecinkowej pojedynczej precyzji <c>s</c>, jeśli konwersja powiodła się lub zero, jeśli konwersja nie powiodła się. Konwersja nie powiedzie się, jeśli <c>s</c> parametr jest <see langword="null" /> lub <see cref="F:System.String.Empty" />, nie jest liczbą ma nieprawidłowy format lub reprezentuje liczbę mniej niż <see cref="F:System.Single.MinValue" /> lub większa niż <see cref="F:System.Single.MaxValue" />. Ten parametr jest przekazywany jako niezainicjowany; dowolna wartość pierwotnie podane w <c>wynik</c> zostaną zastąpione.</param>
        <summary>Konwertuje ciąg reprezentujący liczbę na odpowiadającą mu liczbę zmiennoprzecinkową pojedynczej precyzji. Zwracana wartość wskazuje, czy konwersja powiodła się czy nie.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="s" /> został przekonwertowany pomyślnie; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To przeciążenie różni się od <xref:System.Single.Parse%28System.String%29?displayProperty=nameWithType> metody, zwracając wartość logiczną wskazującą, czy operacja analizy zakończyła się pomyślnie zamiast zwracać przeanalizowana wartość liczbową. Eliminuje konieczność użycia obsługi wyjątków do testowania <xref:System.FormatException> w przypadku gdy `s` jest nieprawidłowy i nie może zostać przeanalizowany pomyślnie.  
  
 `s` Może zawierać parametru <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A> (porównania ciągów jest rozróżniana wielkość liter), lub ciągiem w postaci:  
  
 [ws] [znak] [całkowite cyfry,] cyfr typy całkowite [. [ cyfr ułamkowych]] [e [znak] wykładniczej cyfry] [ws]  
  
 Elementy w nawiasach kwadratowych są opcjonalne. W tabeli poniżej opisano każdy element.  
  
|Element|Opis|  
|-------------|-----------------|  
|*ws*|Ciąg znaków spacji.|  
|*sign*|Znak ujemny lub symbol znaku dodatniego.|  
|*typy całkowite cyfr*|Seria cyfr od 0 do 9, określające integralną część liczby. Cyfry całkowite mogą być nieobecne w przypadku cyfr ułamkowych.|  
|*,*|Symbol separatora grupy specyficzny dla kultury.|  
|*.*|Symbol dziesiętny specyficzny dla kultury.|  
|*cyfr ułamkowych*|Seria cyfr od 0 do 9, która określa ułamkową część liczby.|  
|*E*|Wielkie i małe znak "e" wskazującą notacji wykładniczej (naukowych).|  
|*wykładniczej cyfr*|Seria cyfr od 0 do 9, który Określ wykładnik.|  
  
 `s` Parametr jest interpretowany za pomocą kombinacji <xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType> i <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flagi. Oznacza to, że biały znak i separatory tysięczne są dozwolone, ale symbole walut nie. Aby oznaczyć elementy (takie jak symbolu waluty, tysięcy separatorów i białe) które mogą być obecne w `s`, użyj <xref:System.Single.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Single%40%29> przeciążenie metody.  
  
 `s` Parametru jest analizować przy użyciu formatowania informacji w <xref:System.Globalization.NumberFormatInfo> obiekt, który został zainicjowany dla bieżącego ustawienia kulturowego systemu. Aby uzyskać więcej informacji, zobacz <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>. Można przeanalizować ciągu przy użyciu formatowania informacji z innymi określonej kultury, użyj <xref:System.Single.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Single%40%29> przeciążenie metody.  
  
 Zwykle w przypadku przekazania <xref:System.Single.TryParse%2A?displayProperty=nameWithType> metody typu ciąg, który jest tworzony przez wywołanie metody <xref:System.Single.ToString%2A?displayProperty=nameWithType> metoda, oryginalny <xref:System.Single> jest zwracana wartość. Jednak ze względu na utratę precyzji wartości mogą być różne.  
  
 Jeśli okaże się separatorem w `s` parametr podczas operacji analizowania i odpowiedniej walucie lub liczbę dziesiętną i separatorów grup są takie same, operacji analizowania zakłada, że separator separator dziesiętny, a nie grupą separator. Aby uzyskać więcej informacji na temat separatorów, zobacz <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, i <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Single.TryParse%28System.String%2CSystem.Single%40%29> metodę, aby przekonwertować z reprezentacji ciągu wartości numerycznych <xref:System.Single> wartości. Zakłada się, że en US jest bieżącej kultury.  
  
 [!code-csharp[System.Single.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.tryparse/cs/tryparse1.cs#1)]
 [!code-vb[System.Single.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.tryparse/vb/tryparse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.Parse(System.String)" />
        <altmember cref="M:System.Single.ToString" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, System.Globalization.NumberStyles style, IFormatProvider provider, out float result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] float32&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), style As NumberStyles, provider As IFormatProvider, ByRef result As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, System::Globalization::NumberStyles style, IFormatProvider ^ provider, [Runtime::InteropServices::Out] float % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.Single&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="style">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, System.Globalization.NumberStyles style, IFormatProvider provider, out float result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] float32&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, style As NumberStyles, provider As IFormatProvider, ByRef result As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, System::Globalization::NumberStyles style, IFormatProvider ^ provider, [Runtime::InteropServices::Out] float % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.Single&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg reprezentujący liczbę do przekonwertowania.</param>
        <param name="style">Bitowe połączenie wartości wyliczenia wskazujących format dozwolonych <c>s</c>. Jest Typowa wartość do określenia <see cref="F:System.Globalization.NumberStyles.Float" /> połączone z <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
        <param name="provider">Obiekt, który dostarcza specyficzne dla kultury formatowania informacji na temat <c>s</c>.</param>
        <param name="result">Po powrocie z tej metody zawiera wartość liczbowa lub symbol zawarte w liczbie zmiennoprzecinkowej pojedynczej precyzji <c>s</c>, jeśli konwersja powiodła się lub zero, jeśli konwersja nie powiodła się. Konwersja nie powiedzie się, jeśli <c>s</c> parametr jest <see langword="null" /> lub <see cref="F:System.String.Empty" />, nie jest w formacie zgodne z <c>styl</c>, reprezentuje liczbę mniej niż <see cref="F:System.Single.MinValue" /> lub większa niż <see cref="F:System.Single.MaxValue" />, lub jeśli <c>styl</c> nie jest prawidłową kombinacją <see cref="T:System.Globalization.NumberStyles" /> wyliczone stałe. Ten parametr jest przekazywany jako niezainicjowany; dowolna wartość pierwotnie podane w <c>wynik</c> zostaną zastąpione.</param>
        <summary>Konwertuje reprezentację liczby w określonym styl i format specyficzne dla kultury równoważne numer zmiennoprzecinkowych pojedynczej precyzji. Zwracana wartość wskazuje, czy konwersja powiodła się czy nie.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="s" /> został przekonwertowany pomyślnie; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To przeciążenie różni się od <xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> metody, zwracając wartość logiczną wskazującą, czy operacja analizy zakończyła się pomyślnie zamiast zwracać przeanalizowana wartość liczbową. Eliminuje konieczność użycia obsługi wyjątków do testowania <xref:System.FormatException> w przypadku gdy `s` jest nieprawidłowy i nie może zostać przeanalizowany pomyślnie.  
  
 `style` Parametr określa format dopuszczalny `s` parametr powodzenie operacji analizy. Musi być kombinacją flag bitowych z <xref:System.Globalization.NumberStyles> wyliczenia. Następujące <xref:System.Globalization.NumberStyles> elementy członkowskie nie są obsługiwane:  
  
-   <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>  
  
-   <xref:System.Globalization.NumberStyles.HexNumber?displayProperty=nameWithType>  
  
 `s` Może zawierać parametru <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A> dla kultury wskazywanym przez `provider`. Ponadto, w zależności od wartości `style`, `s` parametr może zawierać następujące elementy:  
  
 [ws] [$] [znak] [całkowite cyfry,] typu całkowitego cyfry [.fractional cyfry] [e [znak] wykładniczej cyfry] [ws]  
  
 Elementy w nawiasach kwadratowych ([ i ]) są opcjonalne. W tabeli poniżej opisano każdy element.  
  
|Element|Opis|  
|-------------|-----------------|  
|*ws*|Opcjonalny odstęp. Biały znak, może występować na początku `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flagi. Może występować na końcu `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flagi.|  
|*$*|Symbol waluty specyficzny dla kultury. Jej położenie w ciągu jest definiowana za pomocą <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> lub <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> właściwości <xref:System.Globalization.NumberFormatInfo> obiektu zwróconego przez <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> metody `provider` parametru. Symbol waluty może występować w `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flagi.|  
|*sign*|Opcjonalny znak. Logowania może wystąpić na początku `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flagę która może występować na końcu `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flagi. Użycie nawiasów w `s` wskaż wartość ujemną, jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flagi.|  
|*typy całkowite cyfr*|Ciąg cyfr od 0 do 9, które określają jej część całkowitą. Cyfry całkowite mogą być nieobecne w przypadku cyfr ułamkowych.|  
|*,*|Symbol separatora tysięcy specyficzny dla kultury. Tysięcy bieżącej kultury symbol separatora może występować w `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flagi.|  
|*.*|Symbol dziesiętny specyficzny dla kultury. Symbol punktu dziesiętnego bieżącej kultury może występować w `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flagi.|  
|*cyfr ułamkowych*|Ciąg cyfr od 0 do 9, które określają część ułamkową liczby. Cyfr ułamkowych może występować w `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flagi.|  
|*e*|E lub litery E, która wskazuje, że `s` może reprezentować liczbę przy użyciu notacji wykładniczej. `s` Parametr może reprezentować liczbę w notacji wykładniczej, jeżeli styl zawiera <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flagi.|  
|*wykładniczej cyfr*|Ciąg cyfr od 0 do 9, które określają wykładnik potęgi.|  
  
 Ciąg zawierający tylko cyfry (które odpowiada <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> styl) zawsze przeanalizowany pomyślnie. Pozostałe <xref:System.Globalization.NumberStyles?displayProperty=nameWithType> członkowie sterować elementów, które mogą być, ale nie muszą znajdować się w ciągu wejściowym. W poniższej tabeli przedstawiono poszczególne <xref:System.Globalization.NumberStyles> flagi mają wpływ na elementy, które mogą być obecne w `s`.  
  
|Wartość wyliczenia NumberStyles|Dodatkowe (poza cyframi) elementy dozwolone w parametrze s|  
|------------------------|---------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|*Cyfr całkowitym* tylko element.|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|*.* i *cyfr ułamkowych* elementów.|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|`s` Parametr można również użyć notacji wykładniczej. Ta flaga samodzielnie obsługuje wartości w postaci *cyfr całkowitym*E*wykładniczej cyfr*; dodatkowe flagi są niezbędne do pomyślnie analizowanie ciągów w notacji wykładniczej z takich elementów jak dodatnie lub ujemne znaki i symbole separatorem dziesiętnym.|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|*Ws* element na początku `s`.|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|*Ws* element na końcu `s`.|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|*Znak* element na początku `s`.|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|*Znak* element na końcu `s`.|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|*Znak* elementu w postaci nawiasów otaczającej wartość liczbową.|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|*,* Elementu.|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|* $ * Elementu.|  
|<xref:System.Globalization.NumberStyles.Currency>|Wszystkie. `s` Parametr nie może reprezentować liczbę szesnastkową lub numer w notacji wykładniczej.|  
|<xref:System.Globalization.NumberStyles.Float>|*Ws* element na początku lub na końcu `s`, *znak* na początku `s`i *.* symbol. `s` Parametr można również użyć notacji wykładniczej.|  
|<xref:System.Globalization.NumberStyles.Number>|`ws`, `sign`, Tysięcy separatora (*,),* i dziesiętnym (*.*) elementów.|  
|<xref:System.Globalization.NumberStyles.Any>|Wszystkie style, z wyjątkiem `s` nie może reprezentować liczbę szesnastkową.|  
  
 `provider` Parametr jest <xref:System.IFormatProvider> implementacji których <xref:System.IFormatProvider.GetFormat%2A> metoda zwraca <xref:System.Globalization.NumberFormatInfo> obiekt, który zawiera informacje dotyczące formatowania specyficzne dla kultury. Gdy <xref:System.Single.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Single%40%29> wywołania metody, wywołuje `provider` parametru <xref:System.IFormatProvider.GetFormat%2A> — metoda i przekazuje je <xref:System.Type> obiekt, który reprezentuje <xref:System.Globalization.NumberFormatInfo> typu. <xref:System.IFormatProvider.GetFormat%2A> Następnie metoda zwraca <xref:System.Globalization.NumberFormatInfo> obiektu, który zawiera informacje o formacie `s` parametru. Istnieją trzy sposoby używania `provider` parametr, aby podać informacje dotyczące formatowania niestandardowych operacji analizy:  
  
-   Można przekazać <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje kultury, który dostarcza informacje dotyczące formatowania. Jego <xref:System.Globalization.CultureInfo.GetFormat%2A> metoda zwraca <xref:System.Globalization.NumberFormatInfo> obiekt, który zawiera informacje numeryczne formatowania dla tej kultury.  
  
-   Można przekazać rzeczywiste <xref:System.Globalization.NumberFormatInfo> obiekt, który zawiera informacje numeryczne formatowania. (Jej implementacja <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> zwraca siebie, po prostu.)  
  
-   Można przekazać niestandardowego obiektu, który implementuje <xref:System.IFormatProvider>. Jego <xref:System.IFormatProvider.GetFormat%2A> metoda tworzy i zwraca <xref:System.Globalization.NumberFormatInfo> obiekt, który zawiera informacje dotyczące formatowania.  
  
 Jeśli `provider` jest `null`, formatowanie `s` jest interpretowana w oparciu o <xref:System.Globalization.NumberFormatInfo> obiektu bieżącej kultury.  
  
 Jeśli okaże się separatorem w `s` parametr podczas operacji analizowania i odpowiedniej walucie lub liczbę dziesiętną i separatorów grup są takie same, operacji analizowania zakłada, że separator separator dziesiętny, a nie grupą separator. Aby uzyskać więcej informacji na temat separatorów, zobacz <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, i <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano użycie <xref:System.Single.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Single%40%29?displayProperty=nameWithType> metodę, aby przeanalizować reprezentację liczby styl, który jest sformatowany przy użyciu Konwencji określonej kultury.  
  
 [!code-csharp[System.Single.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.tryparse/cs/tryparse1.cs#2)]
 [!code-vb[System.Single.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.tryparse/vb/tryparse1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> nie jest <see cref="T:System.Globalization.NumberStyles" /> wartość.  - lub - <paramref name="style" /> jest <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> wartość.</exception>
        <altmember cref="M:System.Single.Parse(System.String)" />
        <altmember cref="M:System.Single.ToString" />
      </Docs>
    </Member>
  </Members>
</Type>