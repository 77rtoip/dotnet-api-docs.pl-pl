<Type Name="TimeZoneInfo+AdjustmentRule" FullName="System.TimeZoneInfo+AdjustmentRule">
  <Metadata><Meta Name="ms.openlocfilehash" Value="60aa1a92b5a9671711627567f414736543c68195" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69419234" /></Metadata><TypeSignature Language="C#" Value="public sealed class TimeZoneInfo.AdjustmentRule : IEquatable&lt;TimeZoneInfo.AdjustmentRule&gt;, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi serializable sealed beforefieldinit TimeZoneInfo/AdjustmentRule extends System.Object implements class System.IEquatable`1&lt;class System.TimeZoneInfo/AdjustmentRule&gt;, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.TimeZoneInfo.AdjustmentRule" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TimeZoneInfo.AdjustmentRule&#xA;Implements IDeserializationCallback, IEquatable(Of TimeZoneInfo.AdjustmentRule), ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public: ref class TimeZoneInfo::AdjustmentRule sealed : IEquatable&lt;TimeZoneInfo::AdjustmentRule ^&gt;, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type TimeZoneInfo.AdjustmentRule = class&#xA;    interface IEquatable&lt;TimeZoneInfo.AdjustmentRule&gt;&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.TimeZoneInfo+AdjustmentRule&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5;xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Zawiera informacje o dostosowaniu strefy czasowej, na przykład o przejściu do i od czasu letniego.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.AdjustmentRule> Klasa definiuje obowiązującą datę początkową i końcową określonego czasu, odpowiednio do i od czasu letniego, a także jego Delta (dokładna ilość, przez którą korekta powoduje zmianę czasu standardowego strefy czasowej). Dodatkowo dwie właściwości zwracają <xref:System.TimeZoneInfo.TransitionTime> obiekty, które definiują podczas każdego przejścia do i z czasu standardowego.  
  
> [!NOTE]
>  Wystąpienie <xref:System.TimeZoneInfo.AdjustmentRule> klasy jest niezmienne. Po utworzeniu obiektu nie można zmodyfikować jego wartości.  
  
 Aby utworzyć <xref:System.TimeZoneInfo.AdjustmentRule> obiekt, `static` Wywołaj metodę (`Shared` w Visual Basic) <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A?displayProperty=nameWithType> . Następnie można dostarczyć tablicę <xref:System.TimeZoneInfo.AdjustmentRule> obiektów do dwóch przeciążeń <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> metody. Aby pobrać reguły dostosowania określonej strefy czasowej, należy wywołać <xref:System.TimeZoneInfo.GetAdjustmentRules%2A?displayProperty=nameWithType> metodę, która zwraca <xref:System.TimeZoneInfo.AdjustmentRule> tablicę obiektów.  
  
   
  
## Examples  
 Poniższy przykład pobiera wszystkie strefy czasowe zdefiniowane w systemie lokalnym i wyświetla pełne informacje o ich regułach korekty.  
  
 [!code-csharp[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#3)]
 [!code-vb[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#3)]  
  
 Poniżej znajduje się niewielka część danych wyjściowych, która jest generowana przez przykład. Dokładne dane wyjściowe będą się różnić w zależności od systemu operacyjnego i daty uruchomienia przykładu.  
  
```  
Morocco Standard Time Adjustment rules  
   Adjustment rule #1  
      Start Date: Tuesday, January 01, 2008  
      End Date: Wednesday, December 31, 2008  
      Time Change: 1:00 hours  
      Annual Start: The Last Saturday of May at 11:59 PM  
      Annual End: The Last Sunday of August at 11:59 PM  
   Adjustment rule #2  
      Start Date: Thursday, January 01, 2009  
      End Date: Thursday, December 31, 2009  
      Time Change: 1:00 hours  
      Annual Start: The Last Sunday of May at 11:59 PM  
      Annual End: The Third Thursday of August at 11:59 PM  
  
Coordinated Universal Time has no adjustment rules  
  
GMT Standard Time Adjustment rules  
   Start Date: Monday, January 01, 0001  
   End Date: Friday, December 31, 9999  
   Time Change: 1:00 hours  
   Annual Start: The Last Sunday of March at 1:00 AM  
   Annual End: The Last Sunday of October at 2:00 AM  
  
Greenwich Standard Time has no adjustment rules  
  
W. Europe Standard Time Adjustment rules  
   Start Date: Monday, January 01, 0001  
   End Date: Friday, December 31, 9999  
   Time Change: 1:00 hours  
   Annual Start: The Last Sunday of March at 2:00 AM  
   Annual End: The Last Sunday of October at 3:00 AM  
  
Central Europe Standard Time Adjustment rules  
   Start Date: Monday, January 01, 0001  
   End Date: Friday, December 31, 9999  
   Time Change: 1:00 hours  
   Annual Start: The Last Sunday of March at 2:00 AM  
   Annual End: The Last Sunday of October at 3:00 AM  
  
Romance Standard Time Adjustment rules  
   Start Date: Monday, January 01, 0001  
   End Date: Friday, December 31, 9999  
   Time Change: 1:00 hours  
   Annual Start: The Last Sunday of March at 2:00 AM  
   Annual End: The Last Sunday of October at 3:00 AM  
  
Central European Standard Time Adjustment rules  
   Start Date: Monday, January 01, 0001  
   End Date: Friday, December 31, 9999  
   Time Change: 1:00 hours  
   Annual Start: The Last Sunday of March at 2:00 AM  
   Annual End: The Last Sunday of October at 3:00 AM  
  
W. Central Africa Standard Time has no adjustment rules  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.TimeZoneInfo" />
  </Docs>
  <Members>
    <Member MemberName="CreateAdjustmentRule">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo.AdjustmentRule CreateAdjustmentRule (DateTime dateStart, DateTime dateEnd, TimeSpan daylightDelta, TimeZoneInfo.TransitionTime daylightTransitionStart, TimeZoneInfo.TransitionTime daylightTransitionEnd);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo/AdjustmentRule CreateAdjustmentRule(valuetype System.DateTime dateStart, valuetype System.DateTime dateEnd, valuetype System.TimeSpan daylightDelta, valuetype System.TimeZoneInfo/TransitionTime daylightTransitionStart, valuetype System.TimeZoneInfo/TransitionTime daylightTransitionEnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(System.DateTime,System.DateTime,System.TimeSpan,System.TimeZoneInfo.TransitionTime,System.TimeZoneInfo.TransitionTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateAdjustmentRule (dateStart As DateTime, dateEnd As DateTime, daylightDelta As TimeSpan, daylightTransitionStart As TimeZoneInfo.TransitionTime, daylightTransitionEnd As TimeZoneInfo.TransitionTime) As TimeZoneInfo.AdjustmentRule" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo::AdjustmentRule ^ CreateAdjustmentRule(DateTime dateStart, DateTime dateEnd, TimeSpan daylightDelta, TimeZoneInfo::TransitionTime daylightTransitionStart, TimeZoneInfo::TransitionTime daylightTransitionEnd);" />
      <MemberSignature Language="F#" Value="static member CreateAdjustmentRule : DateTime * DateTime * TimeSpan * TimeZoneInfo.TransitionTime * TimeZoneInfo.TransitionTime -&gt; TimeZoneInfo.AdjustmentRule" Usage="System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule (dateStart, dateEnd, daylightDelta, daylightTransitionStart, daylightTransitionEnd)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo+AdjustmentRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateStart" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="dateEnd" Type="System.DateTime" Index="1" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="daylightDelta" Type="System.TimeSpan" Index="2" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="daylightTransitionStart" Type="System.TimeZoneInfo+TransitionTime" Index="3" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="daylightTransitionEnd" Type="System.TimeZoneInfo+TransitionTime" Index="4" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateStart">Data wprowadzenia reguły korekty. Jeśli wartością <paramref name="dateStart" /> parametru jest <see langword="DateTime.MinValue.Date" />, jest to pierwsza reguła korygowania obowiązująca dla strefy czasowej.</param>
        <param name="dateEnd">Ostatnia data obowiązywania reguły korekty. Jeśli wartość <paramref name="dateEnd" /> parametru to <see langword="DateTime.MaxValue.Date" />, reguła korekty nie ma daty zakończenia.</param>
        <param name="daylightDelta">Zmiana czasu w wyniku korekty. Ta wartość jest dodawana do <see cref="P:System.TimeZoneInfo.BaseUtcOffset" /> właściwości strefy czasowej w celu uzyskania poprawnego przesunięcia w dół od skoordynowanego czasu uniwersalnego (UTC). Ta wartość może być z zakresu od-14 do 14.</param>
        <param name="daylightTransitionStart">Obiekt definiujący początek czasu letniego.</param>
        <param name="daylightTransitionEnd">Obiekt, który definiuje koniec czasu letniego.</param>
        <summary>Tworzy nową regułę korekty dla określonej strefy czasowej.</summary>
        <returns>Obiekt, który reprezentuje nową regułę korekty.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Za pomocą tej metody można utworzyć co najmniej jedną regułę korekty dla niestandardowej strefy czasowej. Tablica <xref:System.TimeZoneInfo.AdjustmentRule> obiektów zwracanych przez wywołania tej metody może być następnie przekazana `adjustmentRules` jako parametr <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> do dwóch przeciążeń metody. Przykład ilustruje tę procedurę.  
  
> [!NOTE]
>  <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> Metody można użyć tylko do zdefiniowania reguły korekty dla nowej strefy czasowej. nie można jej użyć do zmodyfikowania reguły korekty dla istniejącej strefy czasowej.  
  
 Parametry `dateStart` <xref:System.ArgumentException> i `dateEnd` muszą być wartościami daty bez składnika czasu lub jest zgłaszany. Składnik czasu można usunąć przez pobranie <xref:System.DateTime> wartości z <xref:System.DateTime.Date%2A> właściwości data i godzina, jak pokazano w następujących instrukcjach:  
  
```  
DateTime.MinValue.Date  
DateTime.MaxValue.Date  
DateTime.Now.Date   
dateVariable.Date  
```  
  
 Właściwość i parametrów musi być<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>również. `dateEnd` `dateStart` <xref:System.DateTime.Kind%2A>  
  
 Wartość `daylightDelta` parametru może być z zakresu od-14 do 14. Suma `daylightDelta` parametru <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> i parametru użytego w wywołaniu metody musi również należeć do <xref:System.InvalidTimeZoneException> zakresu od-14 do 14 lub jest zgłaszany. `baseUtcOffset`  
  
> [!NOTE]
>  `daylightDelta` Parametr określa różnicę między czasem standardowym i czas letnim strefy czasowej. Nie jest przeznaczone do definiowania czasu standardowego przesunięcia strefy czasowej od skoordynowanego czasu uniwersalnego (UTC). W <xref:System.TimeZoneInfo> klasie przyjęto, że przesunięcie od czasu UTC jest stałe przez cały czas życia strefy czasowej. Aby odzwierciedlić zmianę przesunięcia strefy czasowej od czasu UTC, która nie jest spowodowana przez aplikację reguły korekty, należy użyć <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metody do utworzenia nowej niestandardowej strefy czasowej.  
  
   
  
## Examples  
 Poniższy przykład tworzy alternatywną centralną strefę czasową i definiuje trzy reguły dostosowawcze dla okresów 1976-1986, 1987-2006 i 2007. Te reguły są dodawane do obiektu generycznego <xref:System.Collections.Generic.List%601> , którego elementy są następnie kopiowane <xref:System.TimeZoneInfo.AdjustmentRule> do tablicy. Ta tablica jest następnie używana w wywołaniu <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%2CSystem.String%2CSystem.TimeZoneInfo.AdjustmentRule%5B%5D%29?displayProperty=nameWithType> metody.  
  
 [!code-csharp[System.TimeZone2.AdjustmentRule.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#1)]
 [!code-vb[System.TimeZone2.AdjustmentRule.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see cref="P:System.DateTime.Kind" /> Właściwość <see cref="F:System.DateTimeKind.Unspecified" />parametru lub nie<paramref name="dateEnd" /> jest równa. <paramref name="dateStart" />  
  
—lub— 
Parametr jest równy <paramref name="daylightTransitionEnd" />parametrowi. <paramref name="daylightTransitionStart" />  
  
—lub— 
Parametr <paramref name="dateStart" /> or<paramref name="dateEnd" /> zawiera wartość czasu dnia.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dateEnd" />jest wcześniejsza <paramref name="dateStart" />niż.  
  
—lub— 
 <paramref name="daylightDelta" />jest mniejsza niż-14 lub większa niż 14.  
  
—lub— 
<see cref="P:System.TimeSpan.Milliseconds" /> Właściwość<paramref name="daylightDelta" /> parametru nie jest równa 0.  
  
—lub— 
<see cref="P:System.TimeSpan.Ticks" /> Właściwość<paramref name="daylightDelta" /> parametru nie jest równa całkowitej liczbie sekund.</exception>
      </Docs>
    </Member>
    <Member MemberName="DateEnd">
      <MemberSignature Language="C#" Value="public DateTime DateEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime DateEnd" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.AdjustmentRule.DateEnd" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DateEnd As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime DateEnd { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.DateEnd : DateTime" Usage="System.TimeZoneInfo.AdjustmentRule.DateEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera datę zaprzestania obowiązywania reguły korekty.</summary>
        <value><see cref="T:System.DateTime" /> Wartość, która wskazuje datę końcową reguły korekty.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.TimeZoneInfo.AdjustmentRule.DateEnd%2A> właściwości jest wartością daty bez składnika czasu.  
  
 Ponieważ data zakończenia bieżącej reguły korygowania jest zwykle nieznana, można przypisać `DateTime.MaxValue.Date` <xref:System.TimeZoneInfo.AdjustmentRule.DateEnd%2A> do właściwości podczas tworzenia niestandardowej reguły dostosowywania.  
  
> [!IMPORTANT]
>  O ile nie istnieje istotny powód, aby to zrobić, należy zdefiniować datę końcową reguły korekty, która ma być wykonywana w przedziale czasu, w którym strefa czasowa obserwuje czas standardowy. O ile nie istnieje uzasadniony powód, nie należy określać daty zakończenia reguły korekty w przedziale czasowym, w którym strefa czasowa obserwuje czas letni. Na przykład jeśli zmiana strefy czasowej z czasu letniego przypada na trzecią niedzielę z marca i przejście do czasu letniego następuje w pierwszej niedzielę października, obowiązująca Data końcowa reguły dostosowania nie powinna być 31 grudnia określonego rok, ponieważ ta data wypada w okresie czasu letniego.  
  
 Domyślnie rejestr w systemie Windows XP definiuje pojedynczą regułę korekty, której Data końcowa to piątek, 31 grudnia 9999 (wartość `DateTime.MaxValue.Date`), dla każdej strefy czasowej. W przypadku stref czasowych w Stany Zjednoczone rejestr w systemie Windows Vista definiuje dwa reguły dostosowania:  
  
-   Poniedziałek, 01, 0,001, do niedziela, 31 grudnia 2006.  
  
-   Poniedziałek, 01, 2007, do piątku, 31 grudnia 9999.  
  
 Oznacza to, że mimo że reguły dostosowania strefy czasowej przechowywane w rejestrze są przydatne do wykonywania bieżących operacji związanych z strefą czasową, nie mogą być niezawodnie używane do pobierania informacji o strefie czasowej. Aby uzyskać informacje dotyczące definiowania niestandardowej strefy czasowej z wieloma regułami korygowania, które mogą być używane w historycznej aplikacji obsługującej [strefy czasowe, zobacz How to: Utwórz strefy czasowe z regułami](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md)korekty.  
  
   
  
## Examples  
 Poniższy przykład wyświetla informacje o wszystkich strefach czasowych zdefiniowanych w rejestrze systemowym komputera lokalnego, włącznie z datą początkową i końcową ich reguł korekty.  
  
 [!code-csharp[System.TimeZoneInfo.AdjustmentRule.DateStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TimeZoneInfo.AdjustmentRule.DateStart/cs/DateStart1.cs#1)]
 [!code-vb[System.TimeZoneInfo.AdjustmentRule.DateStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TimeZoneInfo.AdjustmentRule.DateStart/vb/DateStart1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DateStart">
      <MemberSignature Language="C#" Value="public DateTime DateStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime DateStart" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.AdjustmentRule.DateStart" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DateStart As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime DateStart { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.DateStart : DateTime" Usage="System.TimeZoneInfo.AdjustmentRule.DateStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera datę obowiązywania reguły dostosowania.</summary>
        <value><see cref="T:System.DateTime" /> Wartość wskazująca, kiedy reguła dostosowania zacznie obowiązywać.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.TimeZoneInfo.AdjustmentRule.DateStart%2A> właściwości jest wartością daty bez składnika czasu. Definiuje datę, z której zacznie obowiązywać konkretna Reguła korekty.  Jest to data, w której zestaw przejść (który zwykle jest definiowany przez jedno przejście do czasu letniego i przejście z powrotem do czasu standardowego). Na przykład Reguła korekty może wejść w życie 1 stycznia 2017, która umożliwia przejście do czasu letniego w drugiej niedzielę marca i przejście z powrotem do czasu standardowego w pierwszej niedzielę listopada. Należy zauważyć, że data początkowa reguły dostosowania nie jest powiązana z datą pierwszego przejścia.  
  
 Można przypisać `DateTime.MinValue.Date` <xref:System.TimeZoneInfo.AdjustmentRule.DateEnd%2A> do właściwości podczas tworzenia niestandardowej reguły korekty do użycia w aplikacji opartej na strefie czasowej, która nie musi współpracować z informacjami o strefie czasowej historycznej.  
  
> [!IMPORTANT]
>  O ile nie istnieje istotny powód, aby to zrobić, należy zdefiniować datę początkową reguły korekty w przedziale czasu, w którym strefa czasowa obserwuje czas standardowy. O ile nie istnieje uzasadniony powód, nie należy określać daty rozpoczęcia reguły korekty w przedziale czasowym, w którym strefa czasowa obserwuje czas letni. Na przykład jeśli zmiana strefy czasowej z czasu letniego przypada na trzecią niedzielę z marca i przejście do czasu letniego następuje w pierwszej niedzielę października, obowiązująca Data rozpoczęcia reguły dostosowania nie powinna być 1 stycznia dla określonego rok, ponieważ ta data wypada w okresie czasu letniego.  
  
 Domyślnie rejestr w systemie Windows XP definiuje pojedynczą regułę korekty, której Data rozpoczęcia to poniedziałek, styczeń 01, 0,001 (wartość `DateTime.MinValue.Date`), dla każdej strefy czasowej. W przypadku stref czasowych w Stany Zjednoczone rejestr w systemie Windows Vista definiuje dwa reguły dostosowania:  
  
-   Poniedziałek, 01, 0,001, do niedziela, 31 grudnia 2006.  
  
-   Poniedziałek, 01, 2007, do piątku, 31 grudnia 9999.  
  
 Oznacza to, że mimo że reguły dostosowania strefy czasowej przechowywane w rejestrze są przydatne do wykonywania bieżących operacji związanych z strefą czasową, nie mogą być niezawodnie używane do pobierania informacji o strefie czasowej. Aby uzyskać informacje dotyczące definiowania niestandardowej strefy czasowej z wieloma regułami korygowania, które mogą być używane w historycznej aplikacji obsługującej [strefy czasowe, zobacz How to: Utwórz strefy czasowe z regułami](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md)korekty.  
  
   
  
## Examples  
 Poniższy przykład wyświetla informacje o wszystkich strefach czasowych zdefiniowanych w rejestrze systemowym komputera lokalnego, włącznie z datą początkową i końcową ich reguł korekty.  
  
 [!code-csharp[System.TimeZoneInfo.AdjustmentRule.DateStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TimeZoneInfo.AdjustmentRule.DateStart/cs/DateStart1.cs#1)]
 [!code-vb[System.TimeZoneInfo.AdjustmentRule.DateStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TimeZoneInfo.AdjustmentRule.DateStart/vb/DateStart1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DaylightDelta">
      <MemberSignature Language="C#" Value="public TimeSpan DaylightDelta { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan DaylightDelta" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DaylightDelta As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan DaylightDelta { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.DaylightDelta : TimeSpan" Usage="System.TimeZoneInfo.AdjustmentRule.DaylightDelta" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera czas wymagany do utworzenia czasu letniego strefy czasowej. Ta ilość czasu jest dodawana do przesunięcia strefy czasowej od skoordynowanego czasu uniwersalnego (UTC).</summary>
        <value><see cref="T:System.TimeSpan" /> Obiekt, który wskazuje ilość czasu, który ma zostać dodany do zmian czasu standardowego w wyniku reguły korekty.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poniższa formuła definiuje czas letni strefy czasowej:  
  
```  
TimeZoneTime = BaseUtcOffset + DaylightDelta + UtcTime  
```  
  
 Wartość <xref:System.TimeZoneInfo.AdjustmentRule.DaylightDelta%2A> właściwości może nawiązać się z zakresu od 14 do 14 godzin.  
  
> [!NOTE]
>  <xref:System.TimeZoneInfo.AdjustmentRule.DaylightDelta%2A> Właściwość mierzy różnicę między czasem standardowym i czasu letniego strefy czasowej. Nie dotyczy zmian w standardowym przesunięciu strefy czasowej od uniwersalnego czasu koordynowanego (UTC). Aby reprezentować strefę czasową, która zmieniła przesunięcie czasu standardowego od czasu UTC, <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> należy wywołać metodę, aby utworzyć nową strefę czasową.  
  
 Najbardziej typowa wartość <xref:System.TimeZoneInfo.AdjustmentRule.DaylightDelta%2A> właściwości to 1,0 godzin. Zastosowanie reguły dostosowania czasu letniego zwiększa przesunięcie strefy czasowej od skoordynowanego czasu uniwersalnego (UTC) o godzinę.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DaylightTransitionEnd">
      <MemberSignature Language="C#" Value="public TimeZoneInfo.TransitionTime DaylightTransitionEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeZoneInfo/TransitionTime DaylightTransitionEnd" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DaylightTransitionEnd As TimeZoneInfo.TransitionTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeZoneInfo::TransitionTime DaylightTransitionEnd { TimeZoneInfo::TransitionTime get(); };" />
      <MemberSignature Language="F#" Value="member this.DaylightTransitionEnd : TimeZoneInfo.TransitionTime" Usage="System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo+TransitionTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera informacje o rocznym przejściu z czasu letniego z tyłu do czasu standardowego.</summary>
        <value><see cref="T:System.TimeZoneInfo.TransitionTime" /> Obiekt, który definiuje roczne przejście od czasu letniego z powrotem do czasu standardowego strefy czasowej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.TransitionTime> Obiekt zwrócony<xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd%2A> przez właściwość definiuje regułę ustalonej daty lub regułę zmiennoprzecinkową dla powrotu do czasu standardowego. Reguła o stałej dacie zawiera miesiąc, dzień i dzień, w którym następuje przejście. Reguła daty zmiennoprzecinkowej zawiera miesiąc, tydzień, dzień tygodnia i godzinę wystąpienia przejścia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DaylightTransitionStart">
      <MemberSignature Language="C#" Value="public TimeZoneInfo.TransitionTime DaylightTransitionStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeZoneInfo/TransitionTime DaylightTransitionStart" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DaylightTransitionStart As TimeZoneInfo.TransitionTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeZoneInfo::TransitionTime DaylightTransitionStart { TimeZoneInfo::TransitionTime get(); };" />
      <MemberSignature Language="F#" Value="member this.DaylightTransitionStart : TimeZoneInfo.TransitionTime" Usage="System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo+TransitionTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera informacje o rocznym przejściu od czasu standardowego do czasu letniego.</summary>
        <value><see cref="T:System.TimeZoneInfo.TransitionTime" /> Obiekt, który definiuje roczne przejście od czasu standardowego strefy czasowej do czasu letniego.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.TransitionTime> Obiekt zwrócony<xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart%2A> przez właściwość definiuje regułę ustalonej daty lub regułę zmiennoprzecinkową dla przejścia do czasu letniego. Reguła o stałej dacie zawiera miesiąc, dzień i dzień, w którym następuje przejście. Reguła daty zmiennoprzecinkowej zawiera miesiąc, tydzień, dzień tygodnia i godzinę, o której następuje przejście.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (TimeZoneInfo.AdjustmentRule other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.TimeZoneInfo/AdjustmentRule other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.AdjustmentRule.Equals(System.TimeZoneInfo.AdjustmentRule)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As TimeZoneInfo.AdjustmentRule) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(TimeZoneInfo::AdjustmentRule ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : TimeZoneInfo.AdjustmentRule -&gt; bool" Usage="adjustmentRule.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo+AdjustmentRule" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="other">Obiekt do porównania z bieżącym obiektem.</param>
        <summary>Określa, czy bieżący <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> obiekt jest równy drugiemu <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> obiektowi.</summary>
        <returns><see langword="true" />Jeśli oba <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> obiekty mają równe wartości; <see langword="false" />w przeciwnym razie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby określić <xref:System.TimeZoneInfo.AdjustmentRule> <xref:System.TimeZoneInfo.AdjustmentRule.Equals%28System.TimeZoneInfo.AdjustmentRule%29> , czy dwa obiekty są równe, Metoda porównuje wartości elementów członkowskich każdego obiektu. Dwie reguły korekty są równe, jeśli mają te same daty obowiązywania, te same różnice i identyczne wartości dla <xref:System.TimeZoneInfo.TransitionTime> obiektów zwracanych przez ich <xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart%2A> i <xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład wywołuje <xref:System.TimeZoneInfo.AdjustmentRule.Equals%28System.TimeZoneInfo.AdjustmentRule%29?displayProperty=nameWithType> metodę w celu porównania reguł korekty dla środkowego czasu standardowego z tymi w przypadku Kanady czasu standardowego i Meksyk czasu standardowego.  
  
 [!code-csharp[System.TimeZone2.AdjustmentRule.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#2)]
 [!code-vb[System.TimeZone2.AdjustmentRule.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#2)]  
  
 Ten kod wyświetla następujące dane wyjściowe w konsoli programu:  
  
```  
Comparing Central Standard Time rule for 1/1/0001 to 12/31/9999 with:  
   Canada Central Standard Time has no adjustment rules.  
   Mexican CST for 1/1/0001 to 12/31/9999: Equal  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.AdjustmentRule.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="adjustmentRule.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Służy jako funkcja skrótu dla algorytmów wyznaczania wartości skrótu i struktur danych, takich jak tabele skrótów.</summary>
        <returns>32-bitowa liczba całkowita ze znakiem, która służy jako kod skrótu dla <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> bieżącego obiektu.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="sender">Obiekt, który zainicjował wywołanie zwrotne. Funkcje tego parametru nie są obecnie implementowane.</param>
        <summary>Uruchamiany po zakończeniu deserializacji <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> obiektu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="info">Obiekt używany do wypełniania danymi.</param>
        <param name="context">Miejsce docelowe dla tej serializacji (zobacz <see cref="T:System.Runtime.Serialization.StreamingContext" />).</param>
        <summary><see cref="T:System.Runtime.Serialization.SerializationInfo" /> Wypełnia obiekt danymi, które są wymagane do serializacji tego obiektu.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego. Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</permission>
      </Docs>
    </Member>
  </Members>
</Type>
