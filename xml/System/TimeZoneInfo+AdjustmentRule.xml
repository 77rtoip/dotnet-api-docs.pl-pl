<Type Name="TimeZoneInfo+AdjustmentRule" FullName="System.TimeZoneInfo+AdjustmentRule">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b1eeea4982e62144e434859e5e89eb964936bd1a" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36428027" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class TimeZoneInfo.AdjustmentRule : IEquatable&lt;TimeZoneInfo.AdjustmentRule&gt;, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi serializable sealed beforefieldinit TimeZoneInfo/AdjustmentRule extends System.Object implements class System.IEquatable`1&lt;class System.TimeZoneInfo/AdjustmentRule&gt;, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.TimeZoneInfo.AdjustmentRule" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TimeZoneInfo.AdjustmentRule&#xA;Implements IDeserializationCallback, IEquatable(Of TimeZoneInfo.AdjustmentRule), ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public: ref class TimeZoneInfo::AdjustmentRule sealed : IEquatable&lt;TimeZoneInfo::AdjustmentRule ^&gt;, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type TimeZoneInfo.AdjustmentRule = class&#xA;    interface IEquatable&lt;TimeZoneInfo.AdjustmentRule&gt;&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.TimeZoneInfo+AdjustmentRule&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Zawiera informacje o korekty strefy czasowej, takich jak przejścia do i z czasu letniego.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.AdjustmentRule> Klasa definiuje skuteczne daty rozpoczęcia i zakończenia określonego czasu zmiany do i z czasu letniego, odpowiednio, oraz jego delta (dokładna kwota za pomocą którego dostosowania powoduje, że zmienić strefę czasową (czas standardowy)). Ponadto dwie właściwości zwracają <xref:System.TimeZoneInfo.TransitionTime> obiekty, które określają, kiedy występuje każdego przejścia do i z (czas standardowy).  
  
> [!NOTE]
>  Wystąpienie <xref:System.TimeZoneInfo.AdjustmentRule> klasy nie można modyfikować. Po utworzeniu obiektu, nie można modyfikować jej wartości.  
  
 Aby utworzyć <xref:System.TimeZoneInfo.AdjustmentRule> obiekt, należy wywołać `static` (`Shared` w języku Visual Basic) <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A?displayProperty=nameWithType> metody. Następnie możesz podać tablicę <xref:System.TimeZoneInfo.AdjustmentRule> obiekty do dwóch przeciążeń <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> — metoda. Aby pobrać reguły korekty daną strefę czasową, należy wywołać jej <xref:System.TimeZoneInfo.GetAdjustmentRules%2A?displayProperty=nameWithType> metodę, która zwraca tablicę <xref:System.TimeZoneInfo.AdjustmentRule> obiektów.  
  
   
  
## Examples  
 Poniższy przykład pobiera wszystkich stref czasowych zdefiniowanych w systemie lokalnym i wyświetla pełne informacje na temat reguł ich korygowania.  
  
 [!code-csharp[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#3)]
 [!code-vb[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#3)]  
  
 Poniżej znajduje się niewielką część generowany na przykładzie danych wyjściowych. Dokładne dane wyjściowe będą się różnić w zależności od systemu operacyjnego i daty, na którym jest uruchomiona przykładzie.  
  
```  
Morocco Standard Time Adjustment rules  
   Adjustment rule #1  
      Start Date: Tuesday, January 01, 2008  
      End Date: Wednesday, December 31, 2008  
      Time Change: 1:00 hours  
      Annual Start: The Last Saturday of May at 11:59 PM  
      Annual End: The Last Sunday of August at 11:59 PM  
   Adjustment rule #2  
      Start Date: Thursday, January 01, 2009  
      End Date: Thursday, December 31, 2009  
      Time Change: 1:00 hours  
      Annual Start: The Last Sunday of May at 11:59 PM  
      Annual End: The Third Thursday of August at 11:59 PM  
  
Coordinated Universal Time has no adjustment rules  
  
GMT Standard Time Adjustment rules  
   Start Date: Monday, January 01, 0001  
   End Date: Friday, December 31, 9999  
   Time Change: 1:00 hours  
   Annual Start: The Last Sunday of March at 1:00 AM  
   Annual End: The Last Sunday of October at 2:00 AM  
  
Greenwich Standard Time has no adjustment rules  
  
W. Europe Standard Time Adjustment rules  
   Start Date: Monday, January 01, 0001  
   End Date: Friday, December 31, 9999  
   Time Change: 1:00 hours  
   Annual Start: The Last Sunday of March at 2:00 AM  
   Annual End: The Last Sunday of October at 3:00 AM  
  
Central Europe Standard Time Adjustment rules  
   Start Date: Monday, January 01, 0001  
   End Date: Friday, December 31, 9999  
   Time Change: 1:00 hours  
   Annual Start: The Last Sunday of March at 2:00 AM  
   Annual End: The Last Sunday of October at 3:00 AM  
  
Romance Standard Time Adjustment rules  
   Start Date: Monday, January 01, 0001  
   End Date: Friday, December 31, 9999  
   Time Change: 1:00 hours  
   Annual Start: The Last Sunday of March at 2:00 AM  
   Annual End: The Last Sunday of October at 3:00 AM  
  
Central European Standard Time Adjustment rules  
   Start Date: Monday, January 01, 0001  
   End Date: Friday, December 31, 9999  
   Time Change: 1:00 hours  
   Annual Start: The Last Sunday of March at 2:00 AM  
   Annual End: The Last Sunday of October at 3:00 AM  
  
W. Central Africa Standard Time has no adjustment rules  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.TimeZoneInfo" />
  </Docs>
  <Members>
    <Member MemberName="CreateAdjustmentRule">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo.AdjustmentRule CreateAdjustmentRule (DateTime dateStart, DateTime dateEnd, TimeSpan daylightDelta, TimeZoneInfo.TransitionTime daylightTransitionStart, TimeZoneInfo.TransitionTime daylightTransitionEnd);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo/AdjustmentRule CreateAdjustmentRule(valuetype System.DateTime dateStart, valuetype System.DateTime dateEnd, valuetype System.TimeSpan daylightDelta, valuetype System.TimeZoneInfo/TransitionTime daylightTransitionStart, valuetype System.TimeZoneInfo/TransitionTime daylightTransitionEnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(System.DateTime,System.DateTime,System.TimeSpan,System.TimeZoneInfo.TransitionTime,System.TimeZoneInfo.TransitionTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateAdjustmentRule (dateStart As DateTime, dateEnd As DateTime, daylightDelta As TimeSpan, daylightTransitionStart As TimeZoneInfo.TransitionTime, daylightTransitionEnd As TimeZoneInfo.TransitionTime) As TimeZoneInfo.AdjustmentRule" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo::AdjustmentRule ^ CreateAdjustmentRule(DateTime dateStart, DateTime dateEnd, TimeSpan daylightDelta, TimeZoneInfo::TransitionTime daylightTransitionStart, TimeZoneInfo::TransitionTime daylightTransitionEnd);" />
      <MemberSignature Language="F#" Value="static member CreateAdjustmentRule : DateTime * DateTime * TimeSpan * TimeZoneInfo.TransitionTime * TimeZoneInfo.TransitionTime -&gt; TimeZoneInfo.AdjustmentRule" Usage="System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule (dateStart, dateEnd, daylightDelta, daylightTransitionStart, daylightTransitionEnd)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo+AdjustmentRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateStart" Type="System.DateTime" />
        <Parameter Name="dateEnd" Type="System.DateTime" />
        <Parameter Name="daylightDelta" Type="System.TimeSpan" />
        <Parameter Name="daylightTransitionStart" Type="System.TimeZoneInfo+TransitionTime" />
        <Parameter Name="daylightTransitionEnd" Type="System.TimeZoneInfo+TransitionTime" />
      </Parameters>
      <Docs>
        <param name="dateStart">Data wprowadzenia reguła korekty. Jeśli wartość <c>dateStart</c> parametr jest <see langword="DateTime.MinValue.Date" />, jest to pierwsza reguła korekty dotyczące strefy czasowej.</param>
        <param name="dateEnd">Data ostatniego obowiązuje reguła korekty. Jeśli wartość <c>dateEnd</c> parametr jest <see langword="DateTime.MaxValue.Date" />, reguła korekty nie ma daty końcowej.</param>
        <param name="daylightDelta">Czas zmienić wynikającą z korekty. Ta wartość jest dodawana do strefy czasowej <see cref="P:System.TimeZoneInfo.BaseUtcOffset" /> właściwości uzyskanie przesunięcie czasu letniego poprawne z uniwersalnego czasu koordynowanego (UTC). Ta wartość może należeć do zakresu od -14-14.</param>
        <param name="daylightTransitionStart">Obiekt definiujący początek okresu obowiązywania czasu letniego.</param>
        <param name="daylightTransitionEnd">Obiekt definiujący koniec okresu obowiązywania czasu letniego.</param>
        <summary>Tworzy nową regułę dopasowania dla określonej strefy czasowej.</summary>
        <returns>Obiekt, który reprezentuje nowej reguły korekty.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda umożliwia utworzenie co najmniej jednej reguły korekty dla niestandardowych strefy czasowej. Tablica <xref:System.TimeZoneInfo.AdjustmentRule> obiekty zwrócone przez wywołania tej metody można następnie przekazać jako `adjustmentRules` parametr dwa przeciążenia <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metody. W tej procedurze pokazano w przykładzie.  
  
> [!NOTE]
>  <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> Metody można użyć tylko, aby zdefiniować regułę dopasowania dla nowej strefy czasowej; nie może służyć do modyfikowania reguła korekty dla istniejących strefy czasowej.  
  
 `dateStart` i `dateEnd` parametry muszą być wartościami daty bez składnika lub <xref:System.ArgumentException> jest generowany. Składnik czasu może zostać usunięty przez pobieranie <xref:System.DateTime> wartość daty i czasu <xref:System.DateTime.Date%2A> właściwości, jak pokazano w poniższych instrukcjach:  
  
```  
DateTime.MinValue.Date  
DateTime.MaxValue.Date  
DateTime.Now.Date   
dateVariable.Date  
```  
  
 <xref:System.DateTime.Kind%2A> Właściwość `dateStart` i `dateEnd` parametrów musi być również <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.  
  
 Wartość `daylightDelta` parametru może należeć do zakresu od -14-14. Suma `daylightDelta` parametru i `baseUtcOffset` parametru użytego w wywołaniu <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> metody musi również należeć do zakresu od -14-14 lub <xref:System.InvalidTimeZoneException> jest generowany.  
  
> [!NOTE]
>  `daylightDelta` Parametr określa różnicę strefy czasowej (czas standardowy) i jego czasu letniego. Nie jest on przeznaczony do definiowania przesunięcie (czas standardowy) strefy czasowej z uniwersalnego czasu koordynowanego (UTC). <xref:System.TimeZoneInfo> Klasy zakłada, że to przesunięcie od czasu UTC stałej cały czas życia strefę czasową. W celu uwzględnienia zmian w przesunięcie strefy czasowej od czasu UTC, który nie jest spowodowany przez aplikację reguła korekty, należy użyć <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metodę w celu utworzenia nowej niestandardowej strefy czasowej.  
  
   
  
## Examples  
 Poniższy przykład tworzy alternatywny centralnej standardowa strefy czasowej i definiuje reguł korygowania trzy kropki 1976-1986, 1987-2006 i 2007 i później. Te reguły są dodawane do ogólnego <xref:System.Collections.Generic.List%601> obiektu, którego elementy są następnie kopiowane do <xref:System.TimeZoneInfo.AdjustmentRule> tablicy. Ta tablica jest następnie używany w wywołaniu <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%2CSystem.String%2CSystem.TimeZoneInfo.AdjustmentRule%5B%5D%29?displayProperty=nameWithType> metody.  
  
 [!code-csharp[System.TimeZone2.AdjustmentRule.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#1)]
 [!code-vb[System.TimeZone2.AdjustmentRule.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.DateTime.Kind" /> Właściwość <paramref name="dateStart" /> lub <paramref name="dateEnd" /> parametru nie jest równa <see cref="F:System.DateTimeKind.Unspecified" />.  - lub - <paramref name="daylightTransitionStart" /> parametr jest równy <paramref name="daylightTransitionEnd" /> parametru.  - lub - <paramref name="dateStart" /> lub <paramref name="dateEnd" /> parametr zawiera czas wartość dnia.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dateEnd" /> jest starsza niż <paramref name="dateStart" />.  - lub - <paramref name="daylightDelta" /> jest mniejsza niż -14 lub większa niż 14.  - lub - <see cref="P:System.TimeSpan.Milliseconds" /> właściwość <paramref name="daylightDelta" /> parametru nie jest równa 0.  - lub - <see cref="P:System.TimeSpan.Ticks" /> właściwość <paramref name="daylightDelta" /> parametru nie jest równa całkowitą liczbę sekund.</exception>
      </Docs>
    </Member>
    <Member MemberName="DateEnd">
      <MemberSignature Language="C#" Value="public DateTime DateEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime DateEnd" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.AdjustmentRule.DateEnd" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DateEnd As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime DateEnd { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.DateEnd : DateTime" Usage="System.TimeZoneInfo.AdjustmentRule.DateEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera datę, gdy reguła korekty przestaje obowiązywać.</summary>
        <value>A <see cref="T:System.DateTime" /> wartość, która wskazuje datę końcową reguła korekty.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.TimeZoneInfo.AdjustmentRule.DateEnd%2A> właściwość ma wartość typu date bez składnika.  
  
 Ponieważ data zakończenia bieżącego reguła korekty zwykle nie jest znany, można przypisać `DateTime.MaxValue.Date` do <xref:System.TimeZoneInfo.AdjustmentRule.DateEnd%2A> właściwości podczas tworzenia reguły niestandardowej korekty.  
  
> [!IMPORTANT]
>  Jeśli jest przekonujący powód nie, należy zdefiniować Data końcowa reguła korekty nastąpić w przedziale czasu, w którym strefę czasową przestrzega (czas standardowy). Jeśli jest przekonujący powód, aby to zrobić, nie powinna definiować Data końcowa reguła korekty nastąpić w przedziale czasu, w którym strefie czasowej obowiązuje czas letni. Na przykład w trzecia niedziela marca następuje przejście strefy czasowej z czasu letniego, jego przejścia do czasu letniego występuje na pierwszą niedzielę października Data zakończenia obowiązywania reguła korekty nie należy 31 grudnia danego rok, ponieważ data występuje w określonym przedziale czasu.  
  
 Domyślnie rejestr w systemie Windows XP definiuje reguła korekty pojedynczego, których data zakończenia jest piątek, 31 grudnia 9999 (wartość `DateTime.MaxValue.Date`), w każdej strefie czasowej. Dla stref czasowych w Stanach Zjednoczonych rejestru w systemie Windows Vista definiuje dwie reguły korekty:  
  
-   Poniedziałek, stycznia 01, 0001 do niedziela 31 grudnia 2006.  
  
-   Poniedziałek, 01 stycznia 2007, aby piątek, 31 grudnia 9999 r.  
  
 Oznacza to, że chociaż reguł korygowania strefy czasowej przechowywane w rejestrze są przydatne w przypadku wykonywania bieżącej operacji związanych z strefy czasowej, nie można ich niezawodnie używać do pobierania informacji o strefie czasowej historycznych. Aby informacji na temat definiowania niestandardowych strefy czasowej z wielu reguł korygowania, które mogą być używane w historyczne aplikacji obsługujących strefę czasową, zobacz [porady: tworzenie stref czasowych przy użyciu reguł korygowania](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md).  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono informacje na temat wszystkich stref czasowych zdefiniowanych w rejestrze systemu na komputerze lokalnym, w tym początkowa i końcowa ich reguł korygowania.  
  
 [!code-csharp[System.TimeZoneInfo.AdjustmentRule.DateStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TimeZoneInfo.AdjustmentRule.DateStart/cs/DateStart1.cs#1)]
 [!code-vb[System.TimeZoneInfo.AdjustmentRule.DateStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TimeZoneInfo.AdjustmentRule.DateStart/vb/DateStart1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DateStart">
      <MemberSignature Language="C#" Value="public DateTime DateStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime DateStart" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.AdjustmentRule.DateStart" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DateStart As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime DateStart { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.DateStart : DateTime" Usage="System.TimeZoneInfo.AdjustmentRule.DateStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera datę, gdy obowiązuje reguła korekty.</summary>
        <value>A <see cref="T:System.DateTime" /> wartość, która wskazuje, kiedy reguła korekty zostanie uwzględniona.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.TimeZoneInfo.AdjustmentRule.DateStart%2A> właściwość ma wartość typu date bez składnika. Definiuje datę, na którym reguła szczególne dostosowanie obowiązywania.  Jest to data, w którym zestawu przejść (które zwykle są definiowane przez jedno przejście do czasu letniego i jedno przejście wstecz na czas standardowy) zaczynają obowiązywać. Na przykład reguła korekty mogą obowiązywać na 1 stycznia 2017 zapewnia przejścia do czasu letniego na drugi niedziela marca i przejścia do (czas standardowy) na pierwszą niedzielę listopad. Należy pamiętać, że reguła korekty Data początkowa nie jest związana z Data pierwszego przejścia.  
  
 Można przypisać `DateTime.MinValue.Date` do <xref:System.TimeZoneInfo.AdjustmentRule.DateEnd%2A> właściwości po utworzeniu reguły niestandardowe dopasowania do użycia w aplikacji obsługujących strefę czasową który nie ma do pracy z informacji o strefie czasowej historycznych.  
  
> [!IMPORTANT]
>  Jeśli jest przekonujący powód nie, należy zdefiniować datę rozpoczęcia reguła korekty nastąpić w przedziale czasu, w którym strefę czasową przestrzega (czas standardowy). Jeśli jest przekonujący powód, aby to zrobić, nie powinna definiować Data rozpoczęcia reguła korekty nastąpić w przedziale czasu, w którym strefie czasowej obowiązuje czas letni. Na przykład w trzecia niedziela marca następuje przejście strefy czasowej z czasu letniego, jego przejścia do czasu letniego występuje na pierwszą niedzielę października obowiązująca Data reguły korekty nie należy 1 stycznia określonego rok, ponieważ data występuje w określonym przedziale czasu.  
  
 Domyślnie rejestr w systemie Windows XP definiuje reguły korekty pojedynczego, których data rozpoczęcia jest poniedziałek, stycznia 01, 0001 (wartość `DateTime.MinValue.Date`), w każdej strefie czasowej. Dla stref czasowych w Stanach Zjednoczonych rejestru w systemie Windows Vista definiuje dwie reguły korekty:  
  
-   Poniedziałek, stycznia 01, 0001 do niedziela 31 grudnia 2006.  
  
-   Poniedziałek, 01 stycznia 2007, aby piątek, 31 grudnia 9999 r.  
  
 Oznacza to, że chociaż reguł korygowania strefy czasowej przechowywane w rejestrze są przydatne w przypadku wykonywania bieżącej operacji związanych z strefy czasowej, nie można ich niezawodnie używać do pobierania informacji o strefie czasowej historycznych. Aby informacji na temat definiowania niestandardowych strefy czasowej z wielu reguł korygowania, które mogą być używane w historyczne aplikacji obsługujących strefę czasową, zobacz [porady: tworzenie stref czasowych przy użyciu reguł korygowania](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md).  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono informacje na temat wszystkich stref czasowych zdefiniowanych w rejestrze systemu na komputerze lokalnym, w tym początkowa i końcowa ich reguł korygowania.  
  
 [!code-csharp[System.TimeZoneInfo.AdjustmentRule.DateStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TimeZoneInfo.AdjustmentRule.DateStart/cs/DateStart1.cs#1)]
 [!code-vb[System.TimeZoneInfo.AdjustmentRule.DateStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TimeZoneInfo.AdjustmentRule.DateStart/vb/DateStart1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DaylightDelta">
      <MemberSignature Language="C#" Value="public TimeSpan DaylightDelta { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan DaylightDelta" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DaylightDelta As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan DaylightDelta { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.DaylightDelta : TimeSpan" Usage="System.TimeZoneInfo.AdjustmentRule.DaylightDelta" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera ilość czasu wymagane do utworzenia strefy czasowej czasu letniego. Ta ilość czasu jest dodawany do przesunięcia strefy czasowej z uniwersalnego czasu koordynowanego (UTC).</summary>
        <value>A <see cref="T:System.TimeSpan" /> obiekt, który wskazuje ilość czasu, aby dodać do zmiany (czas standardowy) wyniku reguła korekty.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Następująca formuła definiuje strefę czasową czasu:  
  
```  
TimeZoneTime = BaseUtcOffset + DaylightDelta + UtcTime  
```  
  
 Wartość <xref:System.TimeZoneInfo.AdjustmentRule.DaylightDelta%2A> właściwości mogą należeć do zakresu od 14 godzin-14 godzin.  
  
> [!NOTE]
>  <xref:System.TimeZoneInfo.AdjustmentRule.DaylightDelta%2A> Właściwość mierzy różnicę strefy czasowej (czas standardowy) i jego czasu letniego. Nie dotyczy ona na zmiany w standardowe przesunięcie strefy czasowej z uniwersalnego czasu koordynowanego (UTC). Do reprezentowania strefy czasowej, który zmienił jego przesunięcie (czas standardowy) od czasu UTC, należy wywołać <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metodę w celu utworzenia nowej strefy czasowej.  
  
 Najbardziej typowe wartości <xref:System.TimeZoneInfo.AdjustmentRule.DaylightDelta%2A> właściwość jest 1.0 godzin. Stosowania czasu letniego reguła korekty zwiększa przesunięcie strefy czasowej z uniwersalnego czasu koordynowanego (UTC) przez jedną godzinę.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DaylightTransitionEnd">
      <MemberSignature Language="C#" Value="public TimeZoneInfo.TransitionTime DaylightTransitionEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeZoneInfo/TransitionTime DaylightTransitionEnd" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DaylightTransitionEnd As TimeZoneInfo.TransitionTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeZoneInfo::TransitionTime DaylightTransitionEnd { TimeZoneInfo::TransitionTime get(); };" />
      <MemberSignature Language="F#" Value="member this.DaylightTransitionEnd : TimeZoneInfo.TransitionTime" Usage="System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo+TransitionTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera ponownie informacje o roczne przejście od czasu na czas standardowy.</summary>
        <value>A <see cref="T:System.TimeZoneInfo.TransitionTime" /> obiektu, który definiuje roczne przejścia od czasu do strefy czasowej (czas standardowy).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.TransitionTime> Obiektu zwróconego przez <xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd%2A> właściwość definiuje reguły stałych lub regułę daty zmiennoprzecinkowych na powrót do (czas standardowy). Reguła stałych zapewnia dzień, miesiąc i porę dnia, w którym następuje przejście. Reguła zmiennoprzecinkową Data stanowi miesiąc, tydzień, dzień tygodnia i godzinę dnia, w którym następuje przejście.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DaylightTransitionStart">
      <MemberSignature Language="C#" Value="public TimeZoneInfo.TransitionTime DaylightTransitionStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeZoneInfo/TransitionTime DaylightTransitionStart" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DaylightTransitionStart As TimeZoneInfo.TransitionTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeZoneInfo::TransitionTime DaylightTransitionStart { TimeZoneInfo::TransitionTime get(); };" />
      <MemberSignature Language="F#" Value="member this.DaylightTransitionStart : TimeZoneInfo.TransitionTime" Usage="System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo+TransitionTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera informacje o roczne przejście od czasu standardowego do czasu letniego.</summary>
        <value>A <see cref="T:System.TimeZoneInfo.TransitionTime" /> obiektu, który definiuje roczne przejście ze strefy czasowej (czas standardowy) do czasu letniego.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.TransitionTime> Obiektu zwróconego przez <xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart%2A> właściwość definiuje reguły stałych lub regułę daty zmiennoprzecinkową przejścia do czasu letniego. Reguła stałych zapewnia dzień, miesiąc i porę dnia, w którym następuje przejście. Reguła zmiennoprzecinkową Data stanowi miesiąc, tydzień i dzień tygodnia i godzinę dnia, w którym następuje przejście.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (TimeZoneInfo.AdjustmentRule other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.TimeZoneInfo/AdjustmentRule other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.AdjustmentRule.Equals(System.TimeZoneInfo.AdjustmentRule)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As TimeZoneInfo.AdjustmentRule) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(TimeZoneInfo::AdjustmentRule ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : TimeZoneInfo.AdjustmentRule -&gt; bool" Usage="adjustmentRule.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo+AdjustmentRule" />
      </Parameters>
      <Docs>
        <param name="other">Obiekt do porównania z bieżącym obiektem.</param>
        <summary>Określa, czy bieżący <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> obiekt jest taki sam, jak drugi <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> obiektu.</summary>
        <returns>
          <see langword="true" /> Jeśli oba <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> obiekty mają takie same wartości; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby określić, czy dwa <xref:System.TimeZoneInfo.AdjustmentRule> obiekty są takie same, <xref:System.TimeZoneInfo.AdjustmentRule.Equals%28System.TimeZoneInfo.AdjustmentRule%29> metoda porównuje wartości elementu członkowskiego każdego obiektu. Dwie reguły korekty są takie same, gdy mają te same daty wprowadzenia, zmian w tym samym oraz identyczne wartości <xref:System.TimeZoneInfo.TransitionTime> obiekty zwrócone przez ich <xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart%2A> i <xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd%2A> właściwości.  
  
   
  
## Examples  
 Następujące przykładowe wywołania <xref:System.TimeZoneInfo.AdjustmentRule.Equals%28System.TimeZoneInfo.AdjustmentRule%29?displayProperty=nameWithType> metody do porównania reguł korygowania dla Środkowa (czas standardowy) z centralnego Kanada (czas standardowy) i Meksyk (czas standardowy).  
  
 [!code-csharp[System.TimeZone2.AdjustmentRule.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#2)]
 [!code-vb[System.TimeZone2.AdjustmentRule.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#2)]  
  
 Ten kod wyświetla następujące dane wyjściowe do konsoli:  
  
```  
Comparing Central Standard Time rule for 1/1/0001 to 12/31/9999 with:  
   Canada Central Standard Time has no adjustment rules.  
   Mexican CST for 1/1/0001 to 12/31/9999: Equal  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.AdjustmentRule.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="adjustmentRule.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pełni rolę funkcji skrótu do tworzenia skrótów algorytmów i struktury danych, takich jak tabele hash.</summary>
        <returns>32-bitowe liczby całkowite ze znakiem służy jako wartość skrótu dla bieżącego <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> obiektu.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">Obiekt, który zainicjował wywołanie zwrotne. Funkcje tego parametru nie są obecnie implementowane.</param>
        <summary>Uruchamiany podczas deserializacji obiektu <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> obiektu zostało zakończone.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">Obiekt używany do wypełniania danymi.</param>
        <param name="context">Lokalizacja docelowa tej serializacji (zobacz <see cref="T:System.Runtime.Serialization.StreamingContext" />).</param>
        <summary>Wypełnia <see cref="T:System.Runtime.Serialization.SerializationInfo" /> obiektu przy użyciu danych wymaganych do zserializowania tego obiektu.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego. Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</permission>
      </Docs>
    </Member>
  </Members>
</Type>