<Type Name="TimeZoneInfo+AdjustmentRule" FullName="System.TimeZoneInfo+AdjustmentRule">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b6b554fcbd83868b1a6830032cbb7fbbd7cfab54" />
    <Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="11/27/2018" />
    <Meta Name="ms.locfileid" Value="52345172" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class TimeZoneInfo.AdjustmentRule : IEquatable&lt;TimeZoneInfo.AdjustmentRule&gt;, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi sealed beforefieldinit TimeZoneInfo/AdjustmentRule extends System.Object implements class System.IEquatable`1&lt;class System.TimeZoneInfo/AdjustmentRule&gt;, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.TimeZoneInfo.AdjustmentRule" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TimeZoneInfo.AdjustmentRule&#xA;Implements IDeserializationCallback, IEquatable(Of TimeZoneInfo.AdjustmentRule), ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public: ref class TimeZoneInfo::AdjustmentRule sealed : IEquatable&lt;TimeZoneInfo::AdjustmentRule ^&gt;, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type TimeZoneInfo.AdjustmentRule = class&#xA;    interface IEquatable&lt;TimeZoneInfo.AdjustmentRule&gt;&#xA;    interface IDeserializationCallback&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.TimeZoneInfo+AdjustmentRule&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5;xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Zawiera informacje dotyczące dostosowanie strefy czasowej, na przykład przejścia do i z czasu letniego.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.AdjustmentRule> Klasa definiuje od daty rozpoczęcia i zakończenia zmiany w danym momencie i z czasu letniego, odpowiednio, oraz jego różnicowej (dokładną za pomocą którego dostosowania powoduje, że strefy czasowej (czas standardowy) zmienić ilość). Ponadto Zwróć dwie właściwości <xref:System.TimeZoneInfo.TransitionTime> obiekty, które określają, kiedy występuje każdego przejścia do i z (czas standardowy).  
  
> [!NOTE]
>  Wystąpienie <xref:System.TimeZoneInfo.AdjustmentRule> klasy jest niezmienny. Po utworzeniu obiektu nie można modyfikować jego wartości.  
  
 Aby utworzyć <xref:System.TimeZoneInfo.AdjustmentRule> obiektu, wywołaj `static` (`Shared` w języku Visual Basic) <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A?displayProperty=nameWithType> metody. Możesz następnie podać tablicę <xref:System.TimeZoneInfo.AdjustmentRule> obiektów dwa przeciążenia <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> metody. Aby pobrać reguł dopasowania daną strefę czasową, należy wywołać jej <xref:System.TimeZoneInfo.GetAdjustmentRules%2A?displayProperty=nameWithType> metody, która zwraca tablicę <xref:System.TimeZoneInfo.AdjustmentRule> obiektów.  
  
   
  
## Examples  
 Poniższy przykład pobiera wszystkich stref czasowych zdefiniowanych w systemie lokalnym i wyświetla pełne informacje na temat ich reguł dopasowania.  
  
 [!code-csharp[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#3)]
 [!code-vb[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#3)]  
  
 Poniżej przedstawiono niewielką część danych wyjściowych, który jest generowany na przykładzie. Dokładne dane wyjściowe różnią się w zależności od tego, czy system operacyjny i daty, na którym ten przykład zostanie uruchomiony.  
  
```  
Morocco Standard Time Adjustment rules  
   Adjustment rule #1  
      Start Date: Tuesday, January 01, 2008  
      End Date: Wednesday, December 31, 2008  
      Time Change: 1:00 hours  
      Annual Start: The Last Saturday of May at 11:59 PM  
      Annual End: The Last Sunday of August at 11:59 PM  
   Adjustment rule #2  
      Start Date: Thursday, January 01, 2009  
      End Date: Thursday, December 31, 2009  
      Time Change: 1:00 hours  
      Annual Start: The Last Sunday of May at 11:59 PM  
      Annual End: The Third Thursday of August at 11:59 PM  
  
Coordinated Universal Time has no adjustment rules  
  
GMT Standard Time Adjustment rules  
   Start Date: Monday, January 01, 0001  
   End Date: Friday, December 31, 9999  
   Time Change: 1:00 hours  
   Annual Start: The Last Sunday of March at 1:00 AM  
   Annual End: The Last Sunday of October at 2:00 AM  
  
Greenwich Standard Time has no adjustment rules  
  
W. Europe Standard Time Adjustment rules  
   Start Date: Monday, January 01, 0001  
   End Date: Friday, December 31, 9999  
   Time Change: 1:00 hours  
   Annual Start: The Last Sunday of March at 2:00 AM  
   Annual End: The Last Sunday of October at 3:00 AM  
  
Central Europe Standard Time Adjustment rules  
   Start Date: Monday, January 01, 0001  
   End Date: Friday, December 31, 9999  
   Time Change: 1:00 hours  
   Annual Start: The Last Sunday of March at 2:00 AM  
   Annual End: The Last Sunday of October at 3:00 AM  
  
Romance Standard Time Adjustment rules  
   Start Date: Monday, January 01, 0001  
   End Date: Friday, December 31, 9999  
   Time Change: 1:00 hours  
   Annual Start: The Last Sunday of March at 2:00 AM  
   Annual End: The Last Sunday of October at 3:00 AM  
  
Central European Standard Time Adjustment rules  
   Start Date: Monday, January 01, 0001  
   End Date: Friday, December 31, 9999  
   Time Change: 1:00 hours  
   Annual Start: The Last Sunday of March at 2:00 AM  
   Annual End: The Last Sunday of October at 3:00 AM  
  
W. Central Africa Standard Time has no adjustment rules  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.TimeZoneInfo" />
  </Docs>
  <Members>
    <Member MemberName="CreateAdjustmentRule">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo.AdjustmentRule CreateAdjustmentRule (DateTime dateStart, DateTime dateEnd, TimeSpan daylightDelta, TimeZoneInfo.TransitionTime daylightTransitionStart, TimeZoneInfo.TransitionTime daylightTransitionEnd);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo/AdjustmentRule CreateAdjustmentRule(valuetype System.DateTime dateStart, valuetype System.DateTime dateEnd, valuetype System.TimeSpan daylightDelta, valuetype System.TimeZoneInfo/TransitionTime daylightTransitionStart, valuetype System.TimeZoneInfo/TransitionTime daylightTransitionEnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(System.DateTime,System.DateTime,System.TimeSpan,System.TimeZoneInfo.TransitionTime,System.TimeZoneInfo.TransitionTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateAdjustmentRule (dateStart As DateTime, dateEnd As DateTime, daylightDelta As TimeSpan, daylightTransitionStart As TimeZoneInfo.TransitionTime, daylightTransitionEnd As TimeZoneInfo.TransitionTime) As TimeZoneInfo.AdjustmentRule" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo::AdjustmentRule ^ CreateAdjustmentRule(DateTime dateStart, DateTime dateEnd, TimeSpan daylightDelta, TimeZoneInfo::TransitionTime daylightTransitionStart, TimeZoneInfo::TransitionTime daylightTransitionEnd);" />
      <MemberSignature Language="F#" Value="static member CreateAdjustmentRule : DateTime * DateTime * TimeSpan * TimeZoneInfo.TransitionTime * TimeZoneInfo.TransitionTime -&gt; TimeZoneInfo.AdjustmentRule" Usage="System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule (dateStart, dateEnd, daylightDelta, daylightTransitionStart, daylightTransitionEnd)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo+AdjustmentRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateStart" Type="System.DateTime" />
        <Parameter Name="dateEnd" Type="System.DateTime" />
        <Parameter Name="daylightDelta" Type="System.TimeSpan" />
        <Parameter Name="daylightTransitionStart" Type="System.TimeZoneInfo+TransitionTime" />
        <Parameter Name="daylightTransitionEnd" Type="System.TimeZoneInfo+TransitionTime" />
      </Parameters>
      <Docs>
        <param name="dateStart">Data wprowadzenia reguły dopasowania. Jeśli wartość <paramref name="dateStart" /> parametr jest <see langword="DateTime.MinValue.Date" />, jest to pierwsza reguła korekty dotyczące strefy czasowej.</param>
        <param name="dateEnd">Data ostatniego reguła korekty znajduje się w życie. Jeśli wartość <paramref name="dateEnd" /> parametr jest <see langword="DateTime.MaxValue.Date" />, reguła korekty nie ma daty końcowej.</param>
        <param name="daylightDelta">Czas zmienić wynikającym z korekty. Ta wartość jest dodawana do strefy czasowej <see cref="P:System.TimeZoneInfo.BaseUtcOffset" /> właściwości, aby uzyskać przesunięcie czasu letniego poprawne z uniwersalnego czasu koordynowanego (UTC). Wartość ta może wynosić od -14-14.</param>
        <param name="daylightTransitionStart">Obiekt, który określa początek okresu obowiązywania czasu letniego.</param>
        <param name="daylightTransitionEnd">Obiekt definiujący koniec okresu obowiązywania czasu letniego.</param>
        <summary>Tworzy nową regułę dopasowania dla określonej strefy czasowej.</summary>
        <returns>Obiekt, który reprezentuje nową regułę dopasowania.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda umożliwia tworzenie co najmniej jedną regułę dopasowania dla niestandardowej strefy czasowej. Tablica <xref:System.TimeZoneInfo.AdjustmentRule> obiektów zwróconych przez wywołania tej metody może być następnie przekazywany jako `adjustmentRules` parametru, aby dwa przeciążenia metody <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metody. W przykładzie pokazano tej procedury.  
  
> [!NOTE]
>  <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> Metody można używać tylko po to, aby zdefiniować regułę dopasowania dla nowej strefy czasowej; nie może służyć do modyfikowania regułę dopasowania w istniejącej strefy czasowej.  
  
 `dateStart` i `dateEnd` parametry muszą być wartościami daty bez składnika lub <xref:System.ArgumentException> zgłaszany. Składnik czasu może zostać usunięty przez pobieranie <xref:System.DateTime> wartość daty i czasu <xref:System.DateTime.Date%2A> właściwości, jak pokazano w poniższej instrukcji:  
  
```  
DateTime.MinValue.Date  
DateTime.MaxValue.Date  
DateTime.Now.Date   
dateVariable.Date  
```  
  
 <xref:System.DateTime.Kind%2A> Właściwość `dateStart` i `dateEnd` parametry muszą również być <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.  
  
 Wartość `daylightDelta` parametr może wynosić od -14-14. Suma `daylightDelta` parametru i `baseUtcOffset` parametru użytego w wywołaniu <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> metody musi również należeć do zakresu od -14-14 lub <xref:System.InvalidTimeZoneException> zgłaszany.  
  
> [!NOTE]
>  `daylightDelta` Parametr określa różnicę strefy czasowej (czas standardowy) i jego czasu letniego. Nie jest on przeznaczony do definiowania strefy czasowej (czas standardowy) przesunięcie względem uniwersalnego czasu koordynowanego (UTC). <xref:System.TimeZoneInfo> Klasy zakłada, że to przesunięcie względem czasu UTC jest stałe w całym cyklu życia strefy czasowej. W celu odzwierciedlenia zmiany w przesunięcie strefy czasowej względem czasu UTC, który nie jest spowodowany przez zastosowanie reguła korekty, należy użyć <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metodę w celu utworzenia nowej niestandardowej strefy czasowej.  
  
   
  
## Examples  
 Poniższy przykład tworzy alternatywny centralnej standardowa strefy czasowej i definiuje trzy reguły dopasowania dla okresów 1976-1986, 1987 2006 i 2007 i nie tylko. Te reguły są dodawane do ogólnego <xref:System.Collections.Generic.List%601> obiektu, w której elementy są kopiowane do <xref:System.TimeZoneInfo.AdjustmentRule> tablicy. Ta tablica jest następnie używany w wywołaniu <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%2CSystem.String%2CSystem.TimeZoneInfo.AdjustmentRule%5B%5D%29?displayProperty=nameWithType> metody.  
  
 [!code-csharp[System.TimeZone2.AdjustmentRule.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#1)]
 [!code-vb[System.TimeZone2.AdjustmentRule.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.DateTime.Kind" /> Właściwość <paramref name="dateStart" /> lub <paramref name="dateEnd" /> parametr nie jest równa <see cref="F:System.DateTimeKind.Unspecified" />.  
  
—lub— 
<paramref name="daylightTransitionStart" /> Parametr jest równy <paramref name="daylightTransitionEnd" /> parametru.  
  
—lub— 
<paramref name="dateStart" /> Lub <paramref name="dateEnd" /> parametr zawiera ich wartość dnia.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dateEnd" /> jest starsza niż <paramref name="dateStart" />.  
  
—lub— 
 <paramref name="daylightDelta" /> jest mniejsza niż -14 lub większy niż 14.  
  
—lub— 
<see cref="P:System.TimeSpan.Milliseconds" /> Właściwość <paramref name="daylightDelta" /> parametr nie jest równa 0.  
  
—lub— 
<see cref="P:System.TimeSpan.Ticks" /> Właściwość <paramref name="daylightDelta" /> parametr nie jest równa całkowitą liczbę sekund.</exception>
      </Docs>
    </Member>
    <Member MemberName="DateEnd">
      <MemberSignature Language="C#" Value="public DateTime DateEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime DateEnd" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.AdjustmentRule.DateEnd" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DateEnd As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime DateEnd { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.DateEnd : DateTime" Usage="System.TimeZoneInfo.AdjustmentRule.DateEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera datę, kiedy reguła korekty przestaje obowiązywać.</summary>
        <value>A <see cref="T:System.DateTime" /> wartość, która wskazuje Data końcowa reguła korekty.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.TimeZoneInfo.AdjustmentRule.DateEnd%2A> właściwość ma wartość typu date bez składnika godziny.  
  
 Ponieważ końcowej daty bieżącej reguły korekty zwykle nie jest znany, można przypisać `DateTime.MaxValue.Date` do <xref:System.TimeZoneInfo.AdjustmentRule.DateEnd%2A> właściwości podczas tworzenia reguły niestandardowej dopasowania.  
  
> [!IMPORTANT]
>  Chyba że istnieje istotny powód, aby robić, należy zdefiniować Data końcowa reguła korekty występuje w przedziale czasu, przez który strefy czasowej przestrzega (czas standardowy). Chyba że istnieje istotny powód, aby to zrobić, nie powinna definiować Data końcowa reguła korekty występuje w przedziale czasu, przez który strefy czasowej obowiązuje czas letni. Na przykład jeśli w trzecim niedzielę marca następuje przejście na strefę czasową od czasu, w pierwszej niedzieli października następuje jego przejście do czasu letniego Data zakończenia reguły dopasowania nie należy 31 grudnia danego rok, ponieważ ten data wypada przed upływem okresu obowiązywania czasu letniego.  
  
 Domyślnie Rejestr Windows XP definiuje reguły pojedynczego dopasowania, których data końcowa jest piątek, 31 grudnia 9999 r (wartość `DateTime.MaxValue.Date`), w każdej strefie czasowej. Dla stref czasowych w Stanach Zjednoczonych rejestru w Windows Vista definiuje dwie reguły dopasowania:  
  
-   Poniedziałek, styczeń 01, 0001 do niedziela, 31 grudnia 2006.  
  
-   Poniedziałek, 01 styczeń 2007, do piątku, 31 grudnia 9999 r.  
  
 Oznacza to, że chociaż reguły dopasowania stref czasowych przechowywanych w rejestrze są przydatne w przypadku wykonywania bieżących operacji związanych z strefy czasowej, nie można ich niezawodny sposób będą używać do odzyskiwania informacji o strefie czasowej historycznych. Aby uzyskać informacji na temat definiowania niestandardowa strefa czasowa przy użyciu wielu reguł korygowania, które mogą być używane w historycznych aplikacji uwzględniających strefy czasowe, zobacz [porady: tworzenie stref czasowych przy użyciu reguł korygowania](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md).  
  
   
  
## Examples  
 Poniższy przykład wyświetla informacje o wszystkich stref czasowych zdefiniowanych w rejestrze systemowym na komputerze lokalnym, w tym początkowej i końcowej daty ich reguł korygowania.  
  
 [!code-csharp[System.TimeZoneInfo.AdjustmentRule.DateStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TimeZoneInfo.AdjustmentRule.DateStart/cs/DateStart1.cs#1)]
 [!code-vb[System.TimeZoneInfo.AdjustmentRule.DateStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TimeZoneInfo.AdjustmentRule.DateStart/vb/DateStart1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DateStart">
      <MemberSignature Language="C#" Value="public DateTime DateStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime DateStart" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.AdjustmentRule.DateStart" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DateStart As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime DateStart { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.DateStart : DateTime" Usage="System.TimeZoneInfo.AdjustmentRule.DateStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera datę, kiedy reguła korekty staje się skuteczny.</summary>
        <value>A <see cref="T:System.DateTime" /> wartość, która wskazuje, kiedy reguła korekty staje się skuteczny.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.TimeZoneInfo.AdjustmentRule.DateStart%2A> właściwość ma wartość typu date bez składnika godziny. Definiuje daty, która reguła szczególne dostosowanie zacznie obowiązywać.  Jest to data, w którym zestaw przejść, (które zwykle są definiowane przez jedno przejście do czasu letniego i jednego przejścia z powrotem do czas standardowy) zaczną obowiązywać. Na przykład reguła korekty mogą obowiązywać od 1 stycznia 2017 r. zapewniający przejścia do czasu letniego w drugą niedzielę marca i przejścia z powrotem do (czas standardowy) od pierwszej niedzieli listopada. Należy pamiętać, że data początkowa reguła korekty nie jest związany z dniem pierwszego przejścia.  
  
 Możesz przypisać `DateTime.MinValue.Date` do <xref:System.TimeZoneInfo.AdjustmentRule.DateEnd%2A> właściwość po utworzeniu reguły niestandardowe dopasowania do użycia w aplikacji uwzględniających strefy czasowe, nie ma do pracy z informacji o strefie czasowej historycznych.  
  
> [!IMPORTANT]
>  Chyba że istnieje istotny powód, aby robić, należy zdefiniować datę rozpoczęcia reguła korekty występuje w przedziale czasu, przez który strefy czasowej przestrzega (czas standardowy). Chyba że istnieje istotny powód, aby to zrobić, nie powinna definiować Data rozpoczęcia reguła korekty występuje w przedziale czasu, przez który strefy czasowej obowiązuje czas letni. Na przykład jeśli w trzecim niedzielę marca następuje przejście na strefę czasową od czasu, w pierwszej niedzieli października następuje jego przejście do czasu letniego obowiązująca Data reguły dopasowania nie należy 1 stycznia określonego rok, ponieważ ten data wypada przed upływem okresu obowiązywania czasu letniego.  
  
 Domyślnie Rejestr Windows XP definiuje reguły pojedynczego dopasowania, w których data rozpoczęcia jest poniedziałek, styczeń 01, 0001 (wartość `DateTime.MinValue.Date`), w każdej strefie czasowej. Dla stref czasowych w Stanach Zjednoczonych rejestru w Windows Vista definiuje dwie reguły dopasowania:  
  
-   Poniedziałek, styczeń 01, 0001 do niedziela, 31 grudnia 2006.  
  
-   Poniedziałek, 01 styczeń 2007, do piątku, 31 grudnia 9999 r.  
  
 Oznacza to, że chociaż reguły dopasowania stref czasowych przechowywanych w rejestrze są przydatne w przypadku wykonywania bieżących operacji związanych z strefy czasowej, nie można ich niezawodny sposób będą używać do odzyskiwania informacji o strefie czasowej historycznych. Aby uzyskać informacji na temat definiowania niestandardowa strefa czasowa przy użyciu wielu reguł korygowania, które mogą być używane w historycznych aplikacji uwzględniających strefy czasowe, zobacz [porady: tworzenie stref czasowych przy użyciu reguł korygowania](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md).  
  
   
  
## Examples  
 Poniższy przykład wyświetla informacje o wszystkich stref czasowych zdefiniowanych w rejestrze systemowym na komputerze lokalnym, w tym początkowej i końcowej daty ich reguł korygowania.  
  
 [!code-csharp[System.TimeZoneInfo.AdjustmentRule.DateStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TimeZoneInfo.AdjustmentRule.DateStart/cs/DateStart1.cs#1)]
 [!code-vb[System.TimeZoneInfo.AdjustmentRule.DateStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TimeZoneInfo.AdjustmentRule.DateStart/vb/DateStart1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DaylightDelta">
      <MemberSignature Language="C#" Value="public TimeSpan DaylightDelta { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan DaylightDelta" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DaylightDelta As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan DaylightDelta { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.DaylightDelta : TimeSpan" Usage="System.TimeZoneInfo.AdjustmentRule.DaylightDelta" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera ilość czasu, który jest wymagany w celu utworzenia strefy czasowej czasu letniego. Ta ilość czasu, jest dodawany do przesunięcia strefy czasowej z uniwersalnego czasu koordynowanego (UTC).</summary>
        <value>A <see cref="T:System.TimeSpan" /> obiekt, który wskazuje ilość czasu do dodania do zmiany (czas standardowy), w wyniku reguła korekty.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Następująca formuła definiuje strefę czasową czasu:  
  
```  
TimeZoneTime = BaseUtcOffset + DaylightDelta + UtcTime  
```  
  
 Wartość <xref:System.TimeZoneInfo.AdjustmentRule.DaylightDelta%2A> właściwości do zakresu od 14 godzin do-14 godzin.  
  
> [!NOTE]
>  <xref:System.TimeZoneInfo.AdjustmentRule.DaylightDelta%2A> Właściwość miary różnicę strefy czasowej (czas standardowy) i jego czasu letniego. Natomiast nie odnoszą się do zmian w standardowych przesunięcie strefy czasowej z uniwersalnego czasu koordynowanego (UTC). Do reprezentowania strefy czasowej, które uległy zmianie (czas standardowy) przesunięcie względem czasu UTC, należy wywołać <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metodę w celu utworzenia nowej strefy czasowej.  
  
 Najbardziej typowe wartości <xref:System.TimeZoneInfo.AdjustmentRule.DaylightDelta%2A> właściwość jest 1.0 godzin. Zastosowanie reguła korekty czasu letniego zwiększa przesunięcie strefy czasowej z uniwersalnego czasu koordynowanego (UTC) o jedną godzinę.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DaylightTransitionEnd">
      <MemberSignature Language="C#" Value="public TimeZoneInfo.TransitionTime DaylightTransitionEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeZoneInfo/TransitionTime DaylightTransitionEnd" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DaylightTransitionEnd As TimeZoneInfo.TransitionTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeZoneInfo::TransitionTime DaylightTransitionEnd { TimeZoneInfo::TransitionTime get(); };" />
      <MemberSignature Language="F#" Value="member this.DaylightTransitionEnd : TimeZoneInfo.TransitionTime" Usage="System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo+TransitionTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Otrzymuje informacje o rocznej przejście od czasu do (czas standardowy).</summary>
        <value>A <see cref="T:System.TimeZoneInfo.TransitionTime" /> obiekt, który definiuje roczne przejścia od czasu do strefy czasowej (czas standardowy).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.TransitionTime> Obiektu zwróconego przez <xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd%2A> właściwość definiuje reguły ustalona data lub regułę daty liczb zmiennoprzecinkowych na powrót do (czas standardowy). Ustalona data reguły udostępnia miesiąca, dnia i godziny, dnia, w którym następuje przejście. Reguła liczb zmiennoprzecinkowych Data stanowi miesiąc, tydzień, dzień tygodnia i porę dnia, w którym następuje przejście.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DaylightTransitionStart">
      <MemberSignature Language="C#" Value="public TimeZoneInfo.TransitionTime DaylightTransitionStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeZoneInfo/TransitionTime DaylightTransitionStart" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DaylightTransitionStart As TimeZoneInfo.TransitionTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeZoneInfo::TransitionTime DaylightTransitionStart { TimeZoneInfo::TransitionTime get(); };" />
      <MemberSignature Language="F#" Value="member this.DaylightTransitionStart : TimeZoneInfo.TransitionTime" Usage="System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo+TransitionTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera informacje o rocznej przejście od czasu standardowego do czasu letniego.</summary>
        <value>A <see cref="T:System.TimeZoneInfo.TransitionTime" /> obiekt, który definiuje roczne przejście od strefy czasowej (czas standardowy) do czasu letniego.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.TransitionTime> Obiektu zwróconego przez <xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart%2A> właściwość definiuje reguły ustalona data lub regułę daty liczb zmiennoprzecinkowych przejścia do czasu letniego. Ustalona data reguły udostępnia miesiąca, dnia i godziny, dnia, w którym następuje przejście. Reguła liczb zmiennoprzecinkowych Data stanowi miesiąc, tydzień, dzień tygodnia oraz porę dnia, w którym następuje przejście.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (TimeZoneInfo.AdjustmentRule other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.TimeZoneInfo/AdjustmentRule other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.AdjustmentRule.Equals(System.TimeZoneInfo.AdjustmentRule)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As TimeZoneInfo.AdjustmentRule) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(TimeZoneInfo::AdjustmentRule ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : TimeZoneInfo.AdjustmentRule -&gt; bool" Usage="adjustmentRule.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo+AdjustmentRule" />
      </Parameters>
      <Docs>
        <param name="other">Obiekt do porównania z bieżącym obiektem.</param>
        <summary>Określa, czy bieżący <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> obiekt jest taki sam do drugiej <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> obiektu.</summary>
        <returns>
          <see langword="true" /> Jeśli oba <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> obiekty mają równe wartości; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby określić, czy dwa <xref:System.TimeZoneInfo.AdjustmentRule> obiekty są równe, <xref:System.TimeZoneInfo.AdjustmentRule.Equals%28System.TimeZoneInfo.AdjustmentRule%29> metoda porównuje wartości elementów członkowskich każdego obiektu. Dwie reguły dopasowania są takie same, jeśli mają tej samej daty obowiązywania, tego samego różnicowych i identyczne wartości <xref:System.TimeZoneInfo.TransitionTime> obiektów zwróconych przez ich <xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart%2A> i <xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład wywołuje <xref:System.TimeZoneInfo.AdjustmentRule.Equals%28System.TimeZoneInfo.AdjustmentRule%29?displayProperty=nameWithType> metody do porównywania reguł korygowania Środkowa (czas standardowy) z tymi, Kanada Środkowa (czas standardowy) i Meksyk (czas standardowy).  
  
 [!code-csharp[System.TimeZone2.AdjustmentRule.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#2)]
 [!code-vb[System.TimeZone2.AdjustmentRule.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#2)]  
  
 Ten kod wyświetla następujące dane wyjściowe do konsoli:  
  
```  
Comparing Central Standard Time rule for 1/1/0001 to 12/31/9999 with:  
   Canada Central Standard Time has no adjustment rules.  
   Mexican CST for 1/1/0001 to 12/31/9999: Equal  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.AdjustmentRule.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="adjustmentRule.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pełni rolę funkcji skrótu do tworzenia skrótów algorytmów i struktur danych, takich jak tabele zbędnych danych.</summary>
        <returns>32-bitowa liczba całkowita ze znakiem służy jako wartość skrótu dla bieżącego <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> obiektu.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">Obiekt, który zainicjował wywołanie zwrotne. Funkcje tego parametru nie są obecnie implementowane.</param>
        <summary>Zostaje uruchomiony po deserializacji <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> obiektu zostało zakończone.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">Obiekt używany do wypełniania danymi.</param>
        <param name="context">Lokalizacja docelowa tej serializacji (zobacz <see cref="T:System.Runtime.Serialization.StreamingContext" />).</param>
        <summary>Wypełnia <see cref="T:System.Runtime.Serialization.SerializationInfo" /> obiektu z danymi, które jest wymagane do serializacji obiektu.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego. Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</permission>
      </Docs>
    </Member>
  </Members>
</Type>