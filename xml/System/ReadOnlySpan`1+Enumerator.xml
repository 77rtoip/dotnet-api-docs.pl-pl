<Type Name="ReadOnlySpan&lt;T&gt;+Enumerator" FullName="System.ReadOnlySpan&lt;T&gt;+Enumerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0385ad9b2121b51248da126abd92d108ef2e8643" />
    <Meta Name="ms.sourcegitcommit" Value="c902e847cd05ac37d93eca981b0fb009aae0a790" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="11/28/2018" />
    <Meta Name="ms.locfileid" Value="52454587" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct ReadOnlySpan&lt;T&gt;.Enumerator" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi sealed beforefieldinit ReadOnlySpan`1/Enumerator&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.ReadOnlySpan`1.Enumerator" />
  <TypeSignature Language="VB.NET" Value="Public Structure ReadOnlySpan(Of T).Enumerator" />
  <TypeSignature Language="C++ CLI" Value="public: value class ReadOnlySpan&lt;T&gt;::Enumerator" />
  <TypeSignature Language="F#" Value="type ReadOnlySpan&lt;'T&gt;.Enumerator = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2">
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Dostarcza moduł wyliczający dla elementów <see cref="T:System.ReadOnlySpan`1" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[C# [foreach](~/docs/csharp/language-reference/keywords/foreach-in.md) języka C# i [For Each... Następny](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) konstrukcja w języku Visual Basic powoduje ukrycie złożoności modułów wyliczających. Zamiast bezpośredniego wykonywania operacji modułu wyliczającego, za pomocą `foreach` lub `For Each...Next` jest zalecane. 

Początkowo moduł wyliczający jest umieszczony przed pierwszym elementem w <xref:System.ReadOnlySpan`1>. W tym miejscu <xref:System.ReadOnlySpan`1.Enumerator.Current> jest niezdefiniowana. Należy wywołać <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> do wyprzedzeniem modułu wyliczającego do pierwszego elementu w <xref:System.ReadOnlySpan`1> przed odczytaniem wartości właściwości <xref:System.ReadOnlySpan`1.Enumerator.Current>.

<xref:System.ReadOnlySpan`1.Enumerator.Current> zwraca taką samą wartość, dopóki <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> jest wywoływana. <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> Ustawia <xref:System.ReadOnlySpan`1.Enumerator.Current> do następnego elementu w <xref:System.ReadOnlySpan`1>.

Jeśli <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> przekazuje koniec <xref:System.ReadOnlySpan`1>, <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> zwraca `false`. Gdy moduł wyliczający jest w tym stanie, kolejne wywołania <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> również zwracać `false` i <xref:System.ReadOnlySpan`1.Enumerator.Current> jest niezdefiniowana. Nie można ustawić <xref:System.ReadOnlySpan`1.Enumerator.Current> do pierwszego elementu w <xref:System.ReadOnlySpan`1> ponownie; zamiast tego należy utworzyć nowe wystąpienie modułu wyliczającego. 

Chociaż <xref:System.ReadOnlySpan`1> jest przydzielony na stosie danych bazowych, na którym <xref:System.ReadOnlySpan`1> punkty, może się różnić. W związku z tym, wyliczanie <xref:System.ReadOnlySpan`1> nie jest wewnętrznie procedurą odporną. Aby zagwarantować bezpieczeństwo wątków podczas wyliczania, należy zaimplementować własny mechanizm synchronizacji.

W odróżnieniu od niektórych innych struktur moduł wyliczający na platformie .NET <xref:System.ReadOnlySpan`1.Enumerator>:

- Nie implementuje <xref:System.Collections.IEnumerator> lub <xref:System.Collections.Generic.IEnumerator`1> interfejsu. Jest to spowodowane <xref:System.ReadOnlySpan`1.Enumerator> jest [ref struct](~/docs/csharp/language-reference/keywords/ref.md#ref-struct-types) i nie może zostać opakowany.

- Nie obejmuje `Reset` metody, które można ustawić modułu wyliczającego początkową przed pierwszym elementem w zakresie. ( <xref:System.Collections.IEnumerator.Reset?displayProperty=nameWithType> Metoda musi zostać wdrożony jako część interfejsu, ale większość implementors zgłoszą wyjątek lub nie implementacji.)]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public T&amp; Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance T&amp; modreq(System.Runtime.InteropServices.InAttribute) Current" />
      <MemberSignature Language="DocId" Value="P:System.ReadOnlySpan`1.Enumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As T&amp;" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T&amp; ^ Current { T&amp; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : T&amp;" Usage="System.ReadOnlySpan&lt;'T&gt;.Enumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2">
          <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T&amp;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera odwołanie do elementu w bieżącym położeniu modułu wyliczającego.</summary>
        <value>Element w <see cref="T:System.ReadOnlySpan`1" /> w bieżącym położeniu modułu wyliczającego.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[`Current` jest niezdefiniowana w ramach jednej z następujących warunków: 

- Natychmiast, po utworzeniu modułu wyliczającego moduł wyliczający jest umieszczony przed pierwszym elementem w zakresie. <xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> musi zostać wywołana w celu wyprzedzeniem modułu wyliczającego do pierwszego elementu zakresu przed odczytaniem wartości właściwości `Current`.

- Ostatnie wywołanie elementu <xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> zwrócił `false`, która wskazuje koniec zakresu. 

`Current` zwraca taką samą wartość, dopóki <xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> jest wywoływana. <xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> Ustawia `Current` do następnego elementu w zakresie.]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.Enumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext();" />
      <MemberSignature Language="F#" Value="member this.MoveNext : unit -&gt; bool" Usage="enumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Przesuwa modułu wyliczającego do następnego elementu <see cref="System.ReadOnlySpan`1" />.</summary>
        <returns>`true` Jeśli moduł wyliczający pomyślnie zaawansowane do następnego elementu; `false` koniec zakresu została przekazana.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[Po utworzeniu moduł wyliczający jest umieszczony przed pierwszym elementem w zakresu, a pierwsze wywołanie `MoveNext` prowadzi modułu wyliczającego do pierwszego elementu w zakresie. 

Jeśli `MoveNext` przekazuje na końcu zakresu, `MoveNext` zwraca `false`. Gdy moduł wyliczający jest w tym stanie, kolejne wywołania `MoveNext` również zwracać `false`.]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>