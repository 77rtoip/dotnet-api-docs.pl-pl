<Type Name="ReadOnlySpan&lt;T&gt;+Enumerator" FullName="System.ReadOnlySpan&lt;T&gt;+Enumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="305e67376bcf182225249c0d781fb20dffa4b445" /><Meta Name="ms.sourcegitcommit" Value="634678f7ccd2928c6b2cf792a301b079b63639af" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="07/26/2019" /><Meta Name="ms.locfileid" Value="68543177" /></Metadata><TypeSignature Language="C#" Value="public struct ReadOnlySpan&lt;T&gt;.Enumerator" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi sealed beforefieldinit ReadOnlySpan`1/Enumerator&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.ReadOnlySpan`1.Enumerator" />
  <TypeSignature Language="VB.NET" Value="Public Structure ReadOnlySpan(Of T).Enumerator" />
  <TypeSignature Language="C++ CLI" Value="public: value class ReadOnlySpan&lt;T&gt;::Enumerator" />
  <TypeSignature Language="F#" Value="type ReadOnlySpan&lt;'T&gt;.Enumerator = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1">
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Dostarcza moduł wyliczający dla elementów <see cref="T:System.ReadOnlySpan`1" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

C# Instrukcja [foreach](~/docs/csharp/language-reference/keywords/foreach-in.md) C# języka i [dla każdego... Następna](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) konstrukcja w Visual Basic ukrywa złożoność modułów wyliczających. Zamiast bezpośrednio manipulowania modułem wyliczania, `foreach` należy `For Each...Next` użyć lub jest zalecane. 

Początkowo moduł wyliczający jest umieszczony przed pierwszym elementem w <xref:System.ReadOnlySpan`1>. W tym miejscu <xref:System.ReadOnlySpan`1.Enumerator.Current> nie jest zdefiniowane. Przed odczytaniem wartości parametru należy wywołać metodę <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> przechodzenia do poziomu modułu wyliczającego do pierwszego elementu welemencie.<xref:System.ReadOnlySpan`1.Enumerator.Current> <xref:System.ReadOnlySpan`1>

<xref:System.ReadOnlySpan`1.Enumerator.Current>zwraca tę samą wartość, <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> dopóki nie zostanie wywołana. <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A>ustawia <xref:System.ReadOnlySpan`1.Enumerator.Current> następną pozycję <xref:System.ReadOnlySpan`1>w.

Jeśli <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> kończy koniec <xref:System.ReadOnlySpan`1>, <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> zwraca. `false` Gdy moduł wyliczający jest w tym stanie, kolejne wywołania <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> również zwracają `false` i <xref:System.ReadOnlySpan`1.Enumerator.Current> są niezdefiniowane. Nie można ustawić <xref:System.ReadOnlySpan`1.Enumerator.Current> jako pierwszego elementu w tym <xref:System.ReadOnlySpan`1> przypadku, należy zamiast tego utworzyć nowe wystąpienie modułu wyliczającego. 

Mimo że <xref:System.ReadOnlySpan`1> jest przydzielono na stosie, dane bazowe, do <xref:System.ReadOnlySpan`1> których wskazują punkty, mogą nie być. W związku z tym wyliczanie <xref:System.ReadOnlySpan`1> za pomocą elementu nie jest w sposób wewnętrznie bezpieczny dla wątków. Aby zagwarantować bezpieczeństwo wątków podczas wyliczania, należy zaimplementować własną synchronizację.

W przeciwieństwie do innych struktur modułu wyliczającego <xref:System.ReadOnlySpan`1.Enumerator>w programie .NET:

- Nie implementuje <xref:System.Collections.IEnumerator> interfejsu lub <xref:System.Collections.Generic.IEnumerator`1> . Jest to spowodowane <xref:System.ReadOnlySpan`1.Enumerator> tym, że jest [strukturą ref](~/docs/csharp/language-reference/keywords/ref.md#ref-struct-types) i nie może być opakowany.

- Nie zawiera `Reset` metody, która może ustawić moduł wyliczający na jego początkową pozycję przed pierwszym elementem w zakresie. <xref:System.Collections.IEnumerator.Reset?displayProperty=nameWithType> (Metoda musi być zaimplementowana jako część interfejsu, ale większość realizatorów zgłasza wyjątek lub nie zapewnia implementacji).

]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public T&amp; Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance T&amp; modreq(System.Runtime.InteropServices.InAttribute) Current" />
      <MemberSignature Language="DocId" Value="P:System.ReadOnlySpan`1.Enumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As T&amp;" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T&amp; ^ Current { T&amp; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : T&amp;" Usage="System.ReadOnlySpan&lt;'T&gt;.Enumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1">
          <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue RefType="Ref">
        <ReturnType>T&amp;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera odwołanie do elementu w bieżącej pozycji modułu wyliczającego.</summary>
        <value>Element w <see cref="T:System.ReadOnlySpan`1" /> bieżącej pozycji modułu wyliczającego.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

`Current`nie jest zdefiniowany w żadnym z następujących warunków: 

- Natychmiast po utworzeniu modułu wyliczającego moduł wyliczający jest umieszczony przed pierwszym elementem w zakresie. <xref:System.ReadOnlySpan`1.Enumerator.MoveNext*>musi zostać wywołana, aby przemieścić moduł wyliczający do pierwszego elementu zakresu przed odczytem wartości `Current`.

- Ostatnie wywołanie <xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> zwrócone `false`, które wskazuje koniec zakresu. 

`Current`zwraca tę samą wartość, <xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> dopóki nie zostanie wywołana. <xref:System.ReadOnlySpan`1.Enumerator.MoveNext*>ustawia `Current` następną pozycję w zakresie.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.Enumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext();" />
      <MemberSignature Language="F#" Value="member this.MoveNext : unit -&gt; bool" Usage="enumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Przesuwa moduł wyliczający do następnego elementu <see cref="System.ReadOnlySpan`1" />.</summary>
        <returns><see langword="true" />Jeśli moduł wyliczający został pomyślnie zaawansowani do następnego elementu; <see langword="false" /> Jeśli koniec zakresu został zakończony.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Po utworzeniu modułu wyliczającego jest on umieszczany przed pierwszym elementem w zakresie, a pierwsze wywołanie `MoveNext` postępuje do pierwszego elementu w zakresie. 

Jeśli `MoveNext` kończy koniec zakresu, `MoveNext` zwraca `false`. Gdy moduł wyliczający jest w tym stanie, kolejne wywołania `MoveNext` również zwracają `false`.

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
