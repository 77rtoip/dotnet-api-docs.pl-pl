<Type Name="EntityConnection" FullName="System.Data.EntityClient.EntityConnection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="72250b8a24bce1ee969b09e5ea8a9de7d9f3680c" /><Meta Name="ms.sourcegitcommit" Value="e7974886b08aa83a8fb461e8550f31a7d4331ee3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="07/23/2019" /><Meta Name="ms.locfileid" Value="68395802" /></Metadata><TypeSignature Language="C#" Value="public sealed class EntityConnection : System.Data.Common.DbConnection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EntityConnection extends System.Data.Common.DbConnection" />
  <TypeSignature Language="DocId" Value="T:System.Data.EntityClient.EntityConnection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EntityConnection&#xA;Inherits DbConnection" />
  <TypeSignature Language="C++ CLI" Value="public ref class EntityConnection sealed : System::Data::Common::DbConnection" />
  <TypeSignature Language="F#" Value="type EntityConnection = class&#xA;    inherit DbConnection" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DbConnection</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zawiera odwołanie do modelu koncepcyjnego i połączenia ze źródłem danych. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uniknąć przypadkowego umieszczenia obiektów, takich <xref:System.Data.Common.CommandTrees> jak <xref:System.Data.Objects.ObjectContext> i niezsynchronizowanych ze swoimi metadanymi <xref:System.Data.EntityClient.EntityConnection> , należy zablokować swoje metadane. Po zablokowaniu metadanych nie są dozwolone żadne zmiany w parametrach połączenia. Poniżej przedstawiono dwa scenariusze, w których zablokowaniu metadanych:  
  
-   Wystąpienie jest zbudowane za pomocą konstruktora bez parametrów lub <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> konstruktora, który akceptuje parametry połączenia. <xref:System.Data.EntityClient.EntityConnection> W obu przypadkach parametry połączenia mogą być zmieniane wielokrotnie przed otwarciem połączenia. Wywołanie <xref:System.Data.EntityClient.EntityConnection.Open%2A> lub<xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> zablokowanie metadanych.  
  
-   Wystąpienie jest zbudowane <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> za pomocą <xref:System.Data.Metadata.Edm.MetadataWorkspace> konstruktora, <xref:System.Data.Common.DbConnection>który akceptuje i. <xref:System.Data.EntityClient.EntityConnection> W takim przypadku metadane są blokowane w czasie konstruowania. Nie wprowadzono żadnych zmian w parametrach połączenia.  
  
 Po załadowaniu <xref:System.Data.EntityClient.EntityConnection> metadanych sprawdzane są wszystkie modele koncepcyjne, model magazynu i plik mapowania.  
  
 Aby zapoznać się z przykładami kodu, zobacz [Praca z EntityClient](https://msdn.microsoft.com/library/dec4728c-8dff-4e30-abe0-0f78fb5d5af5).  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/8c5db787-78e6-4a34-8dc1-188bca0aca5e">Dostawca EntityClient dla Entity Framework</related>
    <related type="Article" href="https://msdn.microsoft.com/library/dec4728c-8dff-4e30-abe0-0f78fb5d5af5">Praca z EntityClient</related>
    <related type="Article" href="https://msdn.microsoft.com/library/78d516bc-c99f-4865-8ff1-d856bc1a01c0">Parametry połączenia</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.EntityClient.EntityConnection" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uniknąć przypadkowego umieszczenia obiektów, takich <xref:System.Data.Common.CommandTrees> jak <xref:System.Data.Objects.ObjectContext> i niezsynchronizowanych ze swoimi metadanymi <xref:System.Data.EntityClient.EntityConnection> , należy zablokować swoje metadane. Po zablokowaniu metadanych nie są dozwolone żadne zmiany w parametrach połączenia. Poniżej przedstawiono dwa scenariusze, w których zablokowaniu metadanych:  
  
-   Wystąpienie jest zbudowane za pomocą konstruktora bez parametrów lub <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> konstruktora, który akceptuje parametry połączenia. <xref:System.Data.EntityClient.EntityConnection> W obu przypadkach parametry połączenia mogą być zmieniane wielokrotnie przed otwarciem połączenia. Wywołanie <xref:System.Data.EntityClient.EntityConnection.Open%2A> lub<xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> zablokowanie metadanych.  
  
-   Wystąpienie jest zbudowane <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> za pomocą <xref:System.Data.Metadata.Edm.MetadataWorkspace> konstruktora, <xref:System.Data.Common.DbConnection>który akceptuje i. <xref:System.Data.EntityClient.EntityConnection> W takim przypadku metadane są blokowane w czasie konstruowania. Nie wprowadzono żadnych zmian w parametrach połączenia.  
  
 Po załadowaniu <xref:System.Data.EntityClient.EntityConnection> metadanych sprawdzane są wszystkie modele koncepcyjne, model magazynu i plik mapowania.  
  
 Aby zapoznać się z przykładami kodu, zobacz [Praca z EntityClient](https://msdn.microsoft.com/library/dec4728c-8dff-4e30-abe0-0f78fb5d5af5).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityConnection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EntityConnection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.EntityClient.EntityConnection" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uniknąć przypadkowego umieszczenia obiektów, takich <xref:System.Data.Common.CommandTrees> jak <xref:System.Data.Objects.ObjectContext> i niezsynchronizowanych ze swoimi metadanymi <xref:System.Data.EntityClient.EntityConnection> , należy zablokować swoje metadane. Po zablokowaniu metadanych nie są dozwolone żadne zmiany w parametrach połączenia. Poniżej przedstawiono dwa scenariusze, w których zablokowaniu metadanych:  
  
-   Wystąpienie jest zbudowane za pomocą konstruktora bez parametrów lub <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> konstruktora, który akceptuje parametry połączenia. <xref:System.Data.EntityClient.EntityConnection> W obu przypadkach parametry połączenia mogą być zmieniane wielokrotnie przed otwarciem połączenia. Wywołanie <xref:System.Data.EntityClient.EntityConnection.Open%2A> lub<xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> zablokowanie metadanych.  
  
-   Wystąpienie jest zbudowane <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> za pomocą <xref:System.Data.Metadata.Edm.MetadataWorkspace> konstruktora, <xref:System.Data.Common.DbConnection>który akceptuje i. <xref:System.Data.EntityClient.EntityConnection> W takim przypadku metadane są blokowane w czasie konstruowania. Nie wprowadzono żadnych zmian w parametrach połączenia.  
  
 Po załadowaniu <xref:System.Data.EntityClient.EntityConnection> metadanych sprawdzane są wszystkie modele koncepcyjne, model magazynu i plik mapowania.  
  
 Aby zapoznać się z przykładami kodu, zobacz [Praca z EntityClient](https://msdn.microsoft.com/library/dec4728c-8dff-4e30-abe0-0f78fb5d5af5).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityConnection (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EntityConnection(System::String ^ connectionString);" />
      <MemberSignature Language="F#" Value="new System.Data.EntityClient.EntityConnection : string -&gt; System.Data.EntityClient.EntityConnection" Usage="new System.Data.EntityClient.EntityConnection connectionString" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">Parametry połączenia specyficzne dla dostawcy.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Data.EntityClient.EntityConnection" /> klasy na podstawie parametrów połączenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Generuj nazwane parametry połączenia, które są przechowywane w pliku konfiguracyjnym aplikacji. Te nazwane parametry połączenia można podać zamiast `connectionString` parametru podczas tworzenia <xref:System.Data.EntityClient.EntityConnection> wystąpienia klasy.  
  
 Aby uniknąć przypadkowego umieszczania <xref:System.Data.Common.CommandTrees> obiektów <xref:System.Data.Objects.ObjectContext> i niezsynchronizowanych z ich metadanymi <xref:System.Data.EntityClient.EntityConnection> , należy zablokować swoje metadane. Po zablokowaniu metadanych nie są dozwolone żadne zmiany w parametrach połączenia. Poniżej przedstawiono dwa scenariusze, w których zablokowaniu metadanych:  
  
-   Wystąpienie jest zbudowane za pomocą konstruktora bez parametrów lub przez ten Konstruktor (<xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29>), który akceptuje parametry połączenia. <xref:System.Data.EntityClient.EntityConnection> W obu przypadkach parametry połączenia mogą być zmieniane wielokrotnie przed otwarciem połączenia. Wywołanie <xref:System.Data.EntityClient.EntityConnection.Open%2A> lub<xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> zablokowanie metadanych.  
  
-   Wystąpienie jest zbudowane <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> za pomocą <xref:System.Data.Metadata.Edm.MetadataWorkspace> konstruktora, <xref:System.Data.Common.DbConnection>który akceptuje i. <xref:System.Data.EntityClient.EntityConnection> W takim przypadku metadane są blokowane w czasie konstruowania. Nie wprowadzono żadnych zmian w parametrach połączenia.  
  
 Po załadowaniu <xref:System.Data.EntityClient.EntityConnection> metadanych sprawdzane są wszystkie modele koncepcyjne, model magazynu i plik mapowania.  
  
 Aby zapoznać się z przykładami kodu, zobacz [Praca z EntityClient](https://msdn.microsoft.com/library/dec4728c-8dff-4e30-abe0-0f78fb5d5af5).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Podano nieprawidłowe słowo kluczowe parametrów połączenia lub nie podano wymaganego słowa kluczowego parametrów połączenia.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityConnection (System.Data.Metadata.Edm.MetadataWorkspace workspace, System.Data.Common.DbConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.Metadata.Edm.MetadataWorkspace workspace, class System.Data.Common.DbConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.#ctor(System.Data.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (workspace As MetadataWorkspace, connection As DbConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EntityConnection(System::Data::Metadata::Edm::MetadataWorkspace ^ workspace, System::Data::Common::DbConnection ^ connection);" />
      <MemberSignature Language="F#" Value="new System.Data.EntityClient.EntityConnection : System.Data.Metadata.Edm.MetadataWorkspace * System.Data.Common.DbConnection -&gt; System.Data.EntityClient.EntityConnection" Usage="new System.Data.EntityClient.EntityConnection (workspace, connection)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workspace" Type="System.Data.Metadata.Edm.MetadataWorkspace" />
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
      </Parameters>
      <Docs>
        <param name="workspace">A <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> do skojarzenia z tym <see cref="T:System.Data.EntityClient.EntityConnection" />.</param>
        <param name="connection">Powiązane połączenie ze źródłem danych dla tego <see cref="T:System.Data.EntityClient.EntityConnection" /> obiektu.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Data.EntityClient.EntityConnection" /> klasy z określonym <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> i <see cref="T:System.Data.Common.DbConnection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor umożliwia utworzenie <xref:System.Data.EntityClient.EntityConnection> z metadanych, które nie pochodzą z pliku na dysku lub z osadzonego zasobu w zestawie.  
  
 Aby uniknąć przypadkowego umieszczenia obiektów, takich <xref:System.Data.Common.CommandTrees> jak <xref:System.Data.Objects.ObjectContext> i niezsynchronizowanych <xref:System.Data.EntityClient.EntityConnection> ze swoimi metadanymi, należy zablokować swoje metadane. Po zablokowaniu metadanych nie są dozwolone żadne zmiany w parametrach połączenia. Poniżej przedstawiono dwa scenariusze, w których zablokowaniu metadanych:  
  
-   Wystąpienie jest zbudowane za pomocą konstruktora bez parametrów lub <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> konstruktora, który akceptuje parametry połączenia. <xref:System.Data.EntityClient.EntityConnection> W obu przypadkach parametry połączenia mogą być zmieniane wielokrotnie przed otwarciem połączenia. Wywołanie <xref:System.Data.EntityClient.EntityConnection.Open%2A> lub<xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> zablokowanie metadanych.  
  
-   Wystąpienie jest tworzone za pomocą tego konstruktora (<xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> <xref:System.Data.Metadata.Edm.MetadataWorkspace> ), <xref:System.Data.Common.DbConnection>które akceptuje i. <xref:System.Data.EntityClient.EntityConnection> W takim przypadku metadane są blokowane w czasie konstruowania. Nie wprowadzono żadnych zmian w parametrach połączenia.  
  
 Po załadowaniu <xref:System.Data.EntityClient.EntityConnection> metadanych sprawdzane są wszystkie modele koncepcyjne, model magazynu i plik mapowania.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Parametr <paramref name="workspace" /> lub <paramref name="connection" /> jest .<see langword="null" /></exception>
        <exception cref="T:System.ArgumentException">Brak modelu koncepcyjnego w obszarze roboczym.  
  
—lub— 
Brak pliku mapowania w obszarze roboczym.  
  
—lub— 
Brak modelu magazynu w obszarze roboczym.  
  
—lub— 
Nie <paramref name="connection" /> jest w stanie zamkniętym.</exception>
        <exception cref="T:System.Data.ProviderIncompatibleException"><paramref name="connection" /> Nie pochodzi od ADO.NET dostawcy zgodnego z Entity Framework.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginDbTransaction">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbTransaction BeginDbTransaction (System.Data.IsolationLevel isolationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbTransaction BeginDbTransaction(valuetype System.Data.IsolationLevel isolationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.BeginDbTransaction(System.Data.IsolationLevel)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::Common::DbTransaction ^ BeginDbTransaction(System::Data::IsolationLevel isolationLevel);" />
      <MemberSignature Language="F#" Value="override this.BeginDbTransaction : System.Data.IsolationLevel -&gt; System.Data.Common.DbTransaction" Usage="entityConnection.BeginDbTransaction isolationLevel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
      </Parameters>
      <Docs>
        <param name="isolationLevel">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginTransaction">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rozpoczyna transakcję bazy danych.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="public System.Data.EntityClient.EntityTransaction BeginTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.EntityClient.EntityTransaction BeginTransaction() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.BeginTransaction" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTransaction () As EntityTransaction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::EntityClient::EntityTransaction ^ BeginTransaction();" />
      <MemberSignature Language="F#" Value="override this.BeginTransaction : unit -&gt; System.Data.EntityClient.EntityTransaction" Usage="entityConnection.BeginTransaction " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.EntityClient.EntityTransaction</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rozpoczyna transakcję przy użyciu podstawowego dostawcy.</summary>
        <returns>Nowy <see cref="T:System.Data.EntityClient.EntityTransaction" />. Zwrócone <see cref="T:System.Data.EntityClient.EntityTransaction" /> wystąpienie można później skojarzyć z, <see cref="T:System.Data.EntityClient.EntityCommand" /> aby wykonać polecenie w ramach tej transakcji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda używa poziomu izolacji transakcji. <xref:System.Data.IsolationLevel.Unspecified> <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A> Aby określić inny poziom izolacji, wywołaj <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A>. Ta wartość może być interpretowana inaczej przez różnych dostawców. Jeśli chcesz, aby aplikacja była przenośna przez wielu dostawców, należy jawnie określić poziom izolacji transakcji, wywołując <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A>metodę.  
  
 W konkretnym momencie nie może istnieć więcej niż jedna aktywna transakcja, która została utworzona przez <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A>. Próba wywołania dowolnego <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A> przeciążenia <xref:System.Data.EntityClient.EntityConnection> dla, który ma już bieżącą transakcję, spowoduje wystąpienie elementu <xref:System.InvalidOperationException>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Źródłowy dostawca nie jest znany.  
  
—lub— 
Wywołanie <see cref="M:System.Data.EntityClient.EntityConnection.BeginTransaction" /> zostało wykonane w przypadku <see cref="T:System.Data.EntityClient.EntityConnection" /> , gdy ma już bieżącą transakcję.  
  
—lub— 
Stan <see cref="T:System.Data.EntityClient.EntityConnection" /> nie<see cref="F:System.Data.ConnectionState.Open" />jest.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="public System.Data.EntityClient.EntityTransaction BeginTransaction (System.Data.IsolationLevel isolationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.EntityClient.EntityTransaction BeginTransaction(valuetype System.Data.IsolationLevel isolationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.BeginTransaction(System.Data.IsolationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::EntityClient::EntityTransaction ^ BeginTransaction(System::Data::IsolationLevel isolationLevel);" />
      <MemberSignature Language="F#" Value="override this.BeginTransaction : System.Data.IsolationLevel -&gt; System.Data.EntityClient.EntityTransaction" Usage="entityConnection.BeginTransaction isolationLevel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.EntityClient.EntityTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
      </Parameters>
      <Docs>
        <param name="isolationLevel">Poziom izolacji transakcji.</param>
        <summary>Rozpoczyna transakcję o określonym poziomie izolacji przy użyciu podstawowego dostawcy.</summary>
        <returns>Nowy <see cref="T:System.Data.EntityClient.EntityTransaction" />. Zwrócone <see cref="T:System.Data.EntityClient.EntityTransaction" /> wystąpienie można później skojarzyć z, <see cref="T:System.Data.EntityClient.EntityCommand" /> aby wykonać polecenie w ramach tej transakcji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W konkretnym momencie nie może istnieć więcej niż jedna aktywna transakcja, która została utworzona przez <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A>. Próba wywołania dowolnego <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A> przeciążenia <xref:System.Data.EntityClient.EntityConnection> dla, który ma już bieżącą transakcję, spowoduje wystąpienie elementu <xref:System.InvalidOperationException>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Źródłowy dostawca nie jest znany.  
  
—lub— 
Wywołanie <see cref="M:System.Data.EntityClient.EntityConnection.BeginTransaction" /> zostało wykonane w przypadku <see cref="T:System.Data.EntityClient.EntityConnection" /> , gdy ma już bieżącą transakcję.  
  
—lub— 
Stan <see cref="T:System.Data.EntityClient.EntityConnection" /> nie<see cref="F:System.Data.ConnectionState.Open" />jest.</exception>
      </Docs>
    </Member>
    <Member MemberName="ChangeDatabase">
      <MemberSignature Language="C#" Value="public override void ChangeDatabase (string databaseName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ChangeDatabase(string databaseName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.ChangeDatabase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ChangeDatabase (databaseName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ChangeDatabase(System::String ^ databaseName);" />
      <MemberSignature Language="F#" Value="override this.ChangeDatabase : string -&gt; unit" Usage="entityConnection.ChangeDatabase databaseName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="databaseName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="databaseName">Nieobsługiwane.</param>
        <summary>Nieobsługiwane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda jest wymagana podczas wyprowadzania z <xref:System.Data.Common.DbConnection>. <xref:System.Data.EntityClient.EntityConnection.ChangeDatabase%2A> Ta metoda nie jest obsługiwana i spowoduje wystąpienie <xref:System.NotSupportedException>metody.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Gdy metoda jest wywoływana.</exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="entityConnection.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zamyka połączenie z bazą danych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli źródłowy dostawca danych jest nieznany, wywołanie <xref:System.Data.EntityClient.EntityConnection.Close%2A> nie robi nic.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wystąpił błąd podczas zamykania połączenia.</exception>
      </Docs>
    </Member>
    <Member MemberName="ConnectionString">
      <MemberSignature Language="C#" Value="public override string ConnectionString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConnectionString" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.ConnectionString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ConnectionString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ConnectionString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConnectionString : string with get, set" Usage="System.Data.EntityClient.EntityConnection.ConnectionString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Data.EntityClient.EntityConnection" /> parametry połączenia.</summary>
        <value>Parametry połączenia wymagane do nawiązania początkowego połączenia ze źródłem danych. Wartością domyślną jest ciąg pusty. W przypadku połączenia zamkniętego aktualnie ustawiona wartość jest zwracana. Jeśli wartość nie została ustawiona, zwracany jest pusty ciąg.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parametry `EntityClient` połączenia składają się z sekwencji par parametrów słowo kluczowe/wartość oddzielonych średnikami. Znak równości (=) łączy każde słowo kluczowe i jego wartość. Poniższa tabela zawiera listę prawidłowych nazw wartości słów kluczowych w <xref:System.Data.EntityClient.EntityConnection.ConnectionString%2A>.  
  
|Słowo kluczowe|Opis|  
|-------------|-----------------|  
|`Provider`|Wymagane, `Name` Jeśli słowo kluczowe nie jest określone. Nazwa dostawcy, która jest używana do pobierania <xref:System.Data.Common.DbProviderFactory> obiektu dla podstawowego dostawcy. Ta wartość jest stała.<br /><br /> Gdy słowo kluczowe nie jest zawarte w parametrach połączenia, wymagana jest niepusta wartość `Provider` dla słowa kluczowego. `Name` To słowo kluczowe jest wzajemnie wykluczane za pomocą `Name` słowa kluczowego.|  
|`Provider Connection String`|Opcjonalny. Określa parametry połączenia specyficzne dla dostawcy, które są przesyłane do bazowego źródła danych. Te parametry połączenia są wyrażane przy użyciu prawidłowych par słowo kluczowe/wartość dla dostawcy danych. Nieprawidłowa `Provider Connection String` wartość spowoduje wystąpienie błędu czasu wykonywania, gdy zostanie on oceniony przez źródło danych.<br /><br /> To słowo kluczowe jest wzajemnie wykluczane za pomocą `Name` słowa kluczowego.<br /><br /> Wartość `Provider Connection String` musi być ujęta w cudzysłów. Oto przykład:<br /><br /> `Provider Connection String ="Server=serverName; User ID = userID";`<br /><br /> Następujący przykład nie będzie działał:<br /><br /> `Provider Connection String =Server=serverName; User ID = userID`|  
|`Metadata`|Wymagane, `Name` Jeśli słowo kluczowe nie jest określone. Rozdzielana potokami lista katalogów, plików i lokalizacji zasobów, w których mają być wyszukiwane informacje o modelu i mapowaniu. Oto przykład:<br /><br /> `Metadata=`<br /><br /> `c:\model &#124; c:\model\sql\mapping.msl;`<br /><br /> Spacje po każdej stronie separatora potoku są ignorowane.<br /><br /> To słowo kluczowe jest wzajemnie wykluczane za pomocą `Name` słowa kluczowego.|  
|`Name`|Aplikacja może opcjonalnie określić nazwę połączenia w pliku konfiguracyjnym aplikacji, który zawiera wymagane wartości parametrów połączenia słowo kluczowe/wartość. W takim przypadku nie można podawać ich bezpośrednio w parametrach połączenia. `Name` Słowo kluczowe jest niedozwolone w pliku konfiguracji.<br /><br /> `Name` Gdy słowo kluczowe nie jest zawarte w parametrach połączenia, wymagane są niepuste wartości dla słowa kluczowego dostawcy.<br /><br /> To słowo kluczowe wykluczają się wzajemnie poza wszystkimi innymi słowami kluczowymi parametrów połączenia.|  
  
 Aplikacja może podawać słowo kluczowe/wartości bezpośrednio we <xref:System.Data.EntityClient.EntityConnection.ConnectionString%2A> właściwości lub może określić wartość `Name` słowa kluczowego. `Name` Jeśli słowo kluczowe jest określone, słowo kluczowe/wartości parametrów połączenia są pobierane z pliku konfiguracyjnego aplikacji w następujący sposób:  
  
 `Name=AdventureWorksEntities;`  
  
 Jeśli słowo kluczowe jest używane <xref:System.Data.EntityClient.EntityConnection.ConnectionString%2A> we właściwości, inne słowa kluczowe są niedozwolone. `Name` Słowo kluczowe odwołuje się do nazwanych parametrów połączenia, które są `connectionStrings` przechowywane w sekcji w pliku konfiguracyjnym aplikacji, jak pokazano w poniższym przykładzie. `Name` Wartości `Provider`, `Metadata` i`Provider Connection String` są pobierane z pliku konfiguracji w czasie wykonywania.  
  
  
  
 Pary słowo kluczowe/wartość można także dostarczyć bezpośrednio we <xref:System.Data.EntityClient.EntityConnection.ConnectionString%2A> właściwości, jak pokazano w poniższym przykładzie. W takim przypadku `Name` słowo kluczowe nie jest używane.  
  
```  
"Provider=System.Data.SqlClient;  
Metadata=c:\metadata|c:\Metadata\Sql;  
Provider Connection String= 'Data Source=localhost;  
    Initial Catalog=AdventureWorks;Integrated Security=True;Connection Timeout=60' "  
```  
  
 Aby uniknąć przypadkowego umieszczenia obiektów, takich <xref:System.Data.Common.CommandTrees> jak <xref:System.Data.Objects.ObjectContext> i niezsynchronizowanych ze swoimi metadanymi <xref:System.Data.EntityClient.EntityConnection> , należy zablokować swoje metadane. Po zablokowaniu metadanych nie są dozwolone żadne zmiany w parametrach połączenia. Poniżej przedstawiono dwa scenariusze, w których zablokowaniu metadanych:  
  
-   Wystąpienie jest zbudowane za pomocą konstruktora bez parametrów lub <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> konstruktora, który akceptuje parametry połączenia. <xref:System.Data.EntityClient.EntityConnection> W obu przypadkach parametry połączenia mogą być zmieniane wielokrotnie przed otwarciem połączenia. Wywołanie <xref:System.Data.EntityClient.EntityConnection.Open%2A> lub<xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> zablokowanie metadanych.  
  
-   Wystąpienie jest zbudowane <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> za pomocą <xref:System.Data.Metadata.Edm.MetadataWorkspace> konstruktora, <xref:System.Data.Common.DbConnection>który akceptuje i. <xref:System.Data.EntityClient.EntityConnection> W takim przypadku metadane są blokowane w czasie konstruowania. Nie wprowadzono żadnych zmian w parametrach połączenia.  
  
 Po załadowaniu <xref:System.Data.EntityClient.EntityConnection> metadanych sprawdzane są wszystkie modele koncepcyjne, model magazynu i plik mapowania.  
  
   
  
## Examples  
 Poniższy przykład ilustruje, <xref:System.Data.EntityClient.EntityConnectionStringBuilder> jak używać w połączeniu <xref:System.Data.SqlClient.SqlConnectionStringBuilder>z. Kod ustawia właściwości `SqlConnectionStringBuilder` w, aby <xref:System.Data.SqlClient.SqlConnection> utworzyć ciąg, który dostarcza część podstawowych parametrów połączenia dostawcy. Należy pamiętać, `Provider` że nazwy nie można ustawić przy `SqlConnectionStringBuilder`użyciu, ponieważ nie używa prawidłowej `SqlConnection` składni. Kod tworzy <xref:System.Data.EntityClient.EntityConnection> ciąg przez ustawienie `EntityConnectionStringBuilder` właściwości.  
  
 [!code-csharp[eSQLBasicExamples#BuildingConnectionStringWithEntityCommand](~/samples/snippets/csharp/VS_Snippets_Data/eSQLBasicExamples/CS/Program.cs#buildingconnectionstringwithentitycommand)]
 [!code-vb[eSQLBasicExamples#BuildingConnectionStringWithEntityCommand](~/samples/snippets/visualbasic/VS_Snippets_Data/eSQLBasicExamples/VB/Program.vb#buildingconnectionstringwithentitycommand)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Podjęto próbę ustawienia <see cref="P:System.Data.EntityClient.EntityConnection.ConnectionString" /> właściwości <see cref="T:System.Data.EntityClient.EntityConnection" />po <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> zainicjowaniu. Element jest inicjowany w <see cref="T:System.Data.EntityClient.EntityConnection" /> przypadku konstruowania wystąpienia przez Przeciążenie, które przyjmuje <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> jako parametr lub gdy <see cref="T:System.Data.EntityClient.EntityConnection" /> wystąpienie zostało otwarte. <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /></exception>
        <exception cref="T:System.ArgumentException">Podano nieprawidłowe słowo kluczowe parametrów połączenia lub nie podano wymaganego słowa kluczowego parametrów połączenia.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/745c5f95-2f02-4674-b378-6d51a7ec2490">Parametry połączeń</related>
        <related type="Article" href="https://msdn.microsoft.com/library/78d516bc-c99f-4865-8ff1-d856bc1a01c0">Parametry połączenia (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="ConnectionTimeout">
      <MemberSignature Language="C#" Value="public override int ConnectionTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ConnectionTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.ConnectionTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ConnectionTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ConnectionTimeout { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ConnectionTimeout : int" Usage="System.Data.EntityClient.EntityConnection.ConnectionTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę sekund oczekiwania podczas próby nawiązania połączenia przed zakończeniem próby i wygenerowaniem błędu.</summary>
        <value>Czas (w sekundach) oczekiwania na otwarcie połączenia. Wartość domyślna to domyślny limit czasu dostawcy danych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwraca zero, Jeśli źródłowy dostawca danych jest nieznany.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ustawiona wartość jest mniejsza niż 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateCommand">
      <MemberSignature Language="C#" Value="public System.Data.EntityClient.EntityCommand CreateCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.EntityClient.EntityCommand CreateCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.CreateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateCommand () As EntityCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::EntityClient::EntityCommand ^ CreateCommand();" />
      <MemberSignature Language="F#" Value="override this.CreateCommand : unit -&gt; System.Data.EntityClient.EntityCommand" Usage="entityConnection.CreateCommand " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.EntityClient.EntityCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy nowe wystąpienie obiektu <see cref="T:System.Data.EntityClient.EntityCommand" />, <see cref="P:System.Data.EntityClient.EntityCommand.Connection" /> z zestawem <see cref="T:System.Data.EntityClient.EntityConnection" />.</summary>
        <returns><see cref="T:System.Data.EntityClient.EntityCommand" /> Obiekt.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Nazwa podstawowego dostawcy danych jest nieznana.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDbCommand">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbCommand CreateDbCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbCommand CreateDbCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.CreateDbCommand" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateDbCommand () As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::Common::DbCommand ^ CreateDbCommand();" />
      <MemberSignature Language="F#" Value="override this.CreateDbCommand : unit -&gt; System.Data.Common.DbCommand" Usage="entityConnection.CreateDbCommand " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Database">
      <MemberSignature Language="C#" Value="public override string Database { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Database" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.Database" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Database As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Database { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Database : string" Usage="System.Data.EntityClient.EntityConnection.Database" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę bieżącej bazy danych lub bazę danych, która będzie używana po otwarciu połączenia.</summary>
        <value>Wartość <see langword="Database" /> właściwości dostawcy danych źródłowych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dla określonej wartości słowa kluczowego, `Database`na przykład, która jest <xref:System.Data.EntityClient.EntityConnection.Database%2A> mapowana na właściwość, zobacz dokumentację dla dostawcy bazowego danych. Aby uzyskać SQL Server odpowiedników słów kluczowych, zapoznaj <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A?displayProperty=nameWithType> się z dokumentacją właściwości.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Źródłowy dostawca danych jest nieznany.</exception>
      </Docs>
    </Member>
    <Member MemberName="DataSource">
      <MemberSignature Language="C#" Value="public override string DataSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataSource" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.DataSource" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DataSource As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DataSource { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DataSource : string" Usage="System.Data.EntityClient.EntityConnection.DataSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę lub adres sieciowy źródła danych, z którym ma zostać nawiązane połączenie.</summary>
        <value>Nazwa źródła danych. Wartością domyślną jest ciąg pusty.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dla określonej wartości słowa kluczowego, `DataSource`na przykład, która jest <xref:System.Data.EntityClient.EntityConnection.DataSource%2A> mapowana na właściwość, zobacz dokumentację dla dostawcy bazowego danych. Aby uzyskać SQL Server odpowiedników słów kluczowych, zapoznaj <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A?displayProperty=nameWithType> się z dokumentacją właściwości.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Źródłowy dostawca danych jest nieznany.</exception>
      </Docs>
    </Member>
    <Member MemberName="DbProviderFactory">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbProviderFactory DbProviderFactory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbProviderFactory DbProviderFactory" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.DbProviderFactory" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property DbProviderFactory As DbProviderFactory" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Data::Common::DbProviderFactory ^ DbProviderFactory { System::Data::Common::DbProviderFactory ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DbProviderFactory : System.Data.Common.DbProviderFactory" Usage="System.Data.EntityClient.EntityConnection.DbProviderFactory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbProviderFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="entityConnection.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnlistTransaction">
      <MemberSignature Language="C#" Value="public override void EnlistTransaction (System.Transactions.Transaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EnlistTransaction(class System.Transactions.Transaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.EnlistTransaction(System.Transactions.Transaction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void EnlistTransaction(System::Transactions::Transaction ^ transaction);" />
      <MemberSignature Language="F#" Value="override this.EnlistTransaction : System.Transactions.Transaction -&gt; unit" Usage="entityConnection.EnlistTransaction transaction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Transactions.Transaction" />
      </Parameters>
      <Docs>
        <param name="transaction">Obiekt transakcji do zarejestrowania.</param>
        <summary><see cref="T:System.Data.EntityClient.EntityConnection" /> Rejestrowana w określonej transakcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda przekazuje wywołanie do połączenia ze źródłem danych, aby jawnie zarejestrować się w zajściu <xref:System.Transactions.Transaction>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Stan <see cref="T:System.Data.EntityClient.EntityConnection" /> nie<see cref="F:System.Data.ConnectionState.Open" />jest.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetMetadataWorkspace">
      <MemberSignature Language="C#" Value="public System.Data.Metadata.Edm.MetadataWorkspace GetMetadataWorkspace ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Metadata.Edm.MetadataWorkspace GetMetadataWorkspace() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMetadataWorkspace () As MetadataWorkspace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Metadata::Edm::MetadataWorkspace ^ GetMetadataWorkspace();" />
      <MemberSignature Language="F#" Value="member this.GetMetadataWorkspace : unit -&gt; System.Data.Metadata.Edm.MetadataWorkspace" Usage="entityConnection.GetMetadataWorkspace " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Metadata.Edm.MetadataWorkspace</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca skojarzoną z tym <see cref="T:System.Data.EntityClient.EntityConnection" />elementem. <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /></summary>
        <returns>Skojarzone z tym <see cref="T:System.Data.EntityClient.EntityConnection" />elementem. <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest tworzony automatycznie <xref:System.Data.EntityClient.EntityConnection> podczas tworzenia klasy. <xref:System.Data.Metadata.Edm.MetadataWorkspace> Proces tworzenia może zgłosić wyjątki specyficzne dla metadanych. Metadane są ładowane do pamięci, a aplikacja Entity Data Model (EDM) używa tych metadanych do uzyskiwania dostępu do informacji na temat bazowego źródła danych. Aby uzyskać więcej informacji, zobacz [ADO.NET Metadata](https://msdn.microsoft.com/library/196097a5-a791-4ac4-9e6a-805685d481d5).  
  
 Aby uniknąć przypadkowego umieszczenia obiektów, takich <xref:System.Data.Common.CommandTrees> jak <xref:System.Data.Objects.ObjectContext> i niezsynchronizowanych ze swoimi metadanymi <xref:System.Data.EntityClient.EntityConnection> , należy zablokować swoje metadane. Po zablokowaniu metadanych nie są dozwolone żadne zmiany w parametrach połączenia. Poniżej przedstawiono dwa scenariusze, w których zablokowaniu metadanych:  
  
-   Wystąpienie jest zbudowane za pomocą konstruktora bez parametrów lub <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> konstruktora, który akceptuje parametry połączenia. <xref:System.Data.EntityClient.EntityConnection> W każdym przypadku parametry połączenia można zmienić wiele razy przed otwarciem połączenia. <xref:System.Data.EntityClient.EntityConnection.Open%2A>lub <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> blokuje metadane.  
  
-   Wystąpienie jest zbudowane <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> za pomocą <xref:System.Data.Metadata.Edm.MetadataWorkspace> konstruktora, <xref:System.Data.Common.DbConnection>który akceptuje i. <xref:System.Data.EntityClient.EntityConnection> W takim przypadku metadane są blokowane w czasie konstruowania. Nie wprowadzono żadnych zmian w parametrach połączenia.  
  
 Po załadowaniu <xref:System.Data.EntityClient.EntityConnection> metadanych sprawdzane są wszystkie modele koncepcyjne, model magazynu i plik mapowania.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.MetadataException">Wbudowane parametry połączenia zawierają nieprawidłową <see langword="Metadata" /> wartość słowa kluczowego.</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public override void Open ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Open() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.Open" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Open ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Open();" />
      <MemberSignature Language="F#" Value="override this.Open : unit -&gt; unit" Usage="entityConnection.Open " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Nawiązuje połączenie ze źródłem danych, wywołując <see langword="Open" /> metodę podstawowego dostawcy danych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uniknąć przypadkowego umieszczenia obiektów, takich <xref:System.Data.Common.CommandTrees> jak <xref:System.Data.Objects.ObjectContext> i niezsynchronizowanych ze swoimi metadanymi <xref:System.Data.EntityClient.EntityConnection> , należy zablokować swoje metadane. Po zablokowaniu metadanych nie są dozwolone żadne zmiany w parametrach połączenia. Poniżej przedstawiono dwa scenariusze, w których zablokowaniu metadanych:  
  
-   Wystąpienie jest zbudowane za pomocą konstruktora bez parametrów lub <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> konstruktora, który akceptuje parametry połączenia. <xref:System.Data.EntityClient.EntityConnection> W obu przypadkach parametry połączenia mogą być zmieniane wielokrotnie przed otwarciem połączenia. Wywołanie <xref:System.Data.EntityClient.EntityConnection.Open%2A> lub<xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> zablokowanie metadanych.  
  
-   Wystąpienie jest tworzone <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> za pomocą konstruktora <xref:System.Data.Metadata.Edm.MetadataWorkspace> , który akceptuje i <xref:System.Data.Common.DbConnection>. <xref:System.Data.EntityClient.EntityConnection> W takim przypadku metadane są blokowane w czasie konstruowania. Nie wprowadzono żadnych zmian w parametrach połączenia.  
  
 Po załadowaniu <xref:System.Data.EntityClient.EntityConnection> metadanych sprawdzane są wszystkie modele koncepcyjne, model magazynu i plik mapowania.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wystąpił błąd podczas otwierania połączenia lub nazwa podstawowego dostawcy danych jest nieznana.</exception>
        <exception cref="T:System.Data.MetadataException">Wbudowane parametry połączenia zawierają nieprawidłową <see langword="Metadata" /> wartość słowa kluczowego.</exception>
      </Docs>
    </Member>
    <Member MemberName="ServerVersion">
      <MemberSignature Language="C#" Value="public override string ServerVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServerVersion" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.ServerVersion" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ServerVersion As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ServerVersion { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ServerVersion : string" Usage="System.Data.EntityClient.EntityConnection.ServerVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera ciąg zawierający wersję źródła danych, do którego jest podłączony klient.</summary>
        <value>Wersja źródła danych, która jest zawarta w parametrach połączenia dostawcy.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Połączenie jest zamknięte.</exception>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public override System.Data.ConnectionState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.ConnectionState State" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.State" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property State As ConnectionState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::ConnectionState State { System::Data::ConnectionState get(); };" />
      <MemberSignature Language="F#" Value="member this.State : System.Data.ConnectionState" Usage="System.Data.EntityClient.EntityConnection.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.ConnectionState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera właściwość podstawowego dostawcy, <see cref="T:System.Data.EntityClient.EntityConnection" /> jeśli jest otwarty. <see cref="T:System.Data.ConnectionState" /> W przeciwnym razie <see cref="F:System.Data.ConnectionState.Closed" />zwraca.</summary>
        <value><see cref="F:System.Data.ConnectionState.Open" />, jeśli i tylko wtedy, gdy <see cref="T:System.Data.EntityClient.EntityConnection" /> <see cref="T:System.Data.ConnectionState" /> jest otwarty zarówno stan wewnętrzny, jak i źródłowy dostawca. Jeśli stan jest otwarty, ale <see cref="T:System.Data.ConnectionState" /> dostawca jest zamknięty, ta właściwość zwraca wartość <see cref="F:System.Data.ConnectionState.Broken" />. <see cref="T:System.Data.EntityClient.EntityConnection" /> W przeciwnym razie zwraca <see cref="F:System.Data.ConnectionState.Closed" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StoreConnection">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbConnection StoreConnection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbConnection StoreConnection" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.StoreConnection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StoreConnection As DbConnection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbConnection ^ StoreConnection { System::Data::Common::DbConnection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StoreConnection : System.Data.Common.DbConnection" Usage="System.Data.EntityClient.EntityConnection.StoreConnection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zapewnia dostęp do podstawowego połączenia źródła danych, które jest używane przez <see cref="T:System.Data.EntityClient.EntityConnection" /> obiekt.</summary>
        <value><see cref="T:System.Data.Common.DbConnection" /> Dla połączenia ze źródłem danych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.EntityClient.EntityConnection> Jeśli obiekt jest zamknięty, zwrócone połączenie ze źródłem danych zostanie zamknięte. Jeśli jest otwarty, zostanie zwrócone połączenie z otwartym źródłem danych. Jeśli skonfigurowano informacje o połączeniu ze źródłem danych, zwrócona wartość jest zawsze inna niż null. Jeśli nie ma informacji o połączeniu ze źródłem danych (na przykład jeśli użyto konstruktora bez parametrów, a następnie nie ustawiono parametrów połączenia), zwracane jest odwołanie o wartości null.  
  
 To samo połączenie źródła danych używane przez Entity Framework może być współużytkowane z innymi częściami aplikacji. Połączenie ze źródłem danych jest zwracane jako <xref:System.Data.Common.DbConnection> obiekt <xref:System.Data.Objects.ObjectContext.Connection%2A> z właściwości <xref:System.Data.Objects.ObjectContext>lub z <xref:System.Data.EntityClient.EntityConnection.StoreConnection%2A> właściwości <xref:System.Data.EntityClient.EntityConnection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>