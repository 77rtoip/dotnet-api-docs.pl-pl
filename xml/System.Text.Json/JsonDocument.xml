<Type Name="JsonDocument" FullName="System.Text.Json.JsonDocument">
  <Metadata><Meta Name="ms.openlocfilehash" Value="566969ba2db5041c9d56cebb01cc6e39d671de31" /><Meta Name="ms.sourcegitcommit" Value="ef1f0c8985003a14413f66c3de381b8f3b6e4436" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="05/30/2019" /><Meta Name="ms.locfileid" Value="66381203" /></Metadata><TypeSignature Language="C#" Value="public sealed class JsonDocument : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit JsonDocument extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonDocument" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class JsonDocument&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class JsonDocument sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type JsonDocument = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Udostępnia mechanizm badanie strukturalnych zawartość wartości JSON bez automatyczne utworzenie wystąpienia wartości danych.</summary>
    <remarks>
      <format><![CDATA[
      
Ta klasa korzysta z zasobów z puli pamięci, aby zminimalizować wpływ wyrzucanie elementów bezużytecznych (GC) w scenariuszach silnie obciążony. Pamięci nie są zwracane do puli, co zwiększy wpływ GC między różnymi składnikami ramach spowoduje niepowodzenie prawidłowo usunięciu tego obiektu.
              
      ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="jsonDocument.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Text.Json.JsonDocument Parse (System.Buffers.ReadOnlySequence&lt;byte&gt; utf8Json, System.Text.Json.JsonReaderOptions readerOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Json.JsonDocument Parse(valuetype System.Buffers.ReadOnlySequence`1&lt;unsigned int8&gt; utf8Json, valuetype System.Text.Json.JsonReaderOptions readerOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (utf8Json As ReadOnlySequence(Of Byte), Optional readerOptions As JsonReaderOptions = null) As JsonDocument" />
      <MemberSignature Language="F#" Value="static member Parse : System.Buffers.ReadOnlySequence&lt;byte&gt; * System.Text.Json.JsonReaderOptions -&gt; System.Text.Json.JsonDocument" Usage="System.Text.Json.JsonDocument.Parse (utf8Json, readerOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.Buffers.ReadOnlySequence&lt;System.Byte&gt;" />
        <Parameter Name="readerOptions" Type="System.Text.Json.JsonReaderOptions" />
      </Parameters>
      <Docs>
        <param name="utf8Json">Tekst JSON, które można przeanalizować.</param>
        <param name="readerOptions">Opcje służące do sterowania zachowaniem czytnika podczas analizowania.</param>
        <summary>Analizuje sekwencję jako tekst z algorytmem UTF-8 reprezentującą pojedynczą wartość bajtu JSON do JsonDocument.</summary>
        <returns>JsonDocument reprezentacja wartości JSON.</returns>
        <remarks>
          <format><![CDATA[
          
<xref:T:System.Buffers.ReadOnlySequence`1> Mogą być używane przez cały okres istnienia obiektu JsonDocument i wywołujący musi zapewnić, że dane tam nie zmienia się w okresie istnienia obiektu.
               
Ponieważ przyjęto, że dane wejściowe to tekst, UTF-8 znacznika kolejności bajtów (BOM) nie mogą być obecne.

          ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException"><paramref name="utf8Json" /> nie reprezentują prawidłowej wartości pojedynczej JSON.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="readerOptions" /> zawiera opcje nieobsługiwane.</exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Text.Json.JsonDocument Parse (System.IO.Stream utf8Json, System.Text.Json.JsonReaderOptions readerOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Json.JsonDocument Parse(class System.IO.Stream utf8Json, valuetype System.Text.Json.JsonReaderOptions readerOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.Parse(System.IO.Stream,System.Text.Json.JsonReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (utf8Json As Stream, Optional readerOptions As JsonReaderOptions = null) As JsonDocument" />
      <MemberSignature Language="F#" Value="static member Parse : System.IO.Stream * System.Text.Json.JsonReaderOptions -&gt; System.Text.Json.JsonDocument" Usage="System.Text.Json.JsonDocument.Parse (utf8Json, readerOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="readerOptions" Type="System.Text.Json.JsonReaderOptions" />
      </Parameters>
      <Docs>
        <param name="utf8Json">Dane JSON, które można przeanalizować.</param>
        <param name="readerOptions">Opcje służące do sterowania zachowaniem czytnika podczas analizowania.</param>
        <summary>Analizuje <see cref="T:System.IO.Stream" /> jako dane zakodowane UTF-8, reprezentującą pojedynczą wartość JSON do JsonDocument. Strumień jest do odczytu do zakończenia.</summary>
        <returns>JsonDocument reprezentacja wartości JSON.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.Json.JsonException"><paramref name="utf8Json" /> nie reprezentują prawidłowej wartości pojedynczej JSON.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="readerOptions" /> zawiera opcje nieobsługiwane.</exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Text.Json.JsonDocument Parse (ReadOnlyMemory&lt;byte&gt; utf8Json, System.Text.Json.JsonReaderOptions readerOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Json.JsonDocument Parse(valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt; utf8Json, valuetype System.Text.Json.JsonReaderOptions readerOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (utf8Json As ReadOnlyMemory(Of Byte), Optional readerOptions As JsonReaderOptions = null) As JsonDocument" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlyMemory&lt;byte&gt; * System.Text.Json.JsonReaderOptions -&gt; System.Text.Json.JsonDocument" Usage="System.Text.Json.JsonDocument.Parse (utf8Json, readerOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.ReadOnlyMemory&lt;System.Byte&gt;" />
        <Parameter Name="readerOptions" Type="System.Text.Json.JsonReaderOptions" />
      </Parameters>
      <Docs>
        <param name="utf8Json">Tekst JSON, które można przeanalizować.</param>
        <param name="readerOptions">Opcje służące do sterowania zachowaniem czytnika podczas analizowania.</param>
        <summary>Analizuje pamięci jako zakodowane UTF-8 tekstu reprezentującą pojedynczą wartość bajtu JSON do JsonDocument.</summary>
        <returns>JsonDocument reprezentacja wartości JSON.</returns>
        <remarks>
          <format><![CDATA[

<xref:T:System.ReadOnlyMemory`1> Przez cały okres istnienia obiektu JsonDocument zostanie użyta wartość, a obiekt wywołujący należy upewnić się, że dane tam nie zmienia się w okresie istnienia obiektu.

Ponieważ przyjęto, że dane wejściowe to tekst, UTF-8 znacznika kolejności bajtów (BOM) nie mogą być obecne.
                 
          ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException"><paramref name="utf8Json" /> nie reprezentują prawidłowej wartości pojedynczej JSON.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="readerOptions" /> zawiera opcje nieobsługiwane.</exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Text.Json.JsonDocument Parse (ReadOnlyMemory&lt;char&gt; json, System.Text.Json.JsonReaderOptions readerOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Json.JsonDocument Parse(valuetype System.ReadOnlyMemory`1&lt;char&gt; json, valuetype System.Text.Json.JsonReaderOptions readerOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (json As ReadOnlyMemory(Of Char), Optional readerOptions As JsonReaderOptions = null) As JsonDocument" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlyMemory&lt;char&gt; * System.Text.Json.JsonReaderOptions -&gt; System.Text.Json.JsonDocument" Usage="System.Text.Json.JsonDocument.Parse (json, readerOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="json" Type="System.ReadOnlyMemory&lt;System.Char&gt;" />
        <Parameter Name="readerOptions" Type="System.Text.Json.JsonReaderOptions" />
      </Parameters>
      <Docs>
        <param name="json">Tekst JSON, które można przeanalizować.</param>
        <param name="readerOptions">Opcje służące do sterowania zachowaniem czytnika podczas analizowania.</param>
        <summary>Analizuje tekst reprezentujący wartość pojedynczy znak JSON do JsonDocument.</summary>
        <returns>JsonDocument reprezentacja wartości JSON.</returns>
        <remarks>
          <format><![CDATA[
          
<xref:T:System.ReadOnlyMemory`1> Wartość może być używany przez cały okres istnienia obiektu JsonDocument, i wywołujący musi zapewnić, że dane tam nie zmienia się w okresie istnienia obiektu.

          ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException"><paramref name="json" /> nie reprezentują prawidłowej wartości pojedynczej JSON.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="readerOptions" /> zawiera opcje nieobsługiwane.</exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Text.Json.JsonDocument Parse (string json, System.Text.Json.JsonReaderOptions readerOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Json.JsonDocument Parse(string json, valuetype System.Text.Json.JsonReaderOptions readerOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.Parse(System.String,System.Text.Json.JsonReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (json As String, Optional readerOptions As JsonReaderOptions = null) As JsonDocument" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Text.Json.JsonReaderOptions -&gt; System.Text.Json.JsonDocument" Usage="System.Text.Json.JsonDocument.Parse (json, readerOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="json" Type="System.String" />
        <Parameter Name="readerOptions" Type="System.Text.Json.JsonReaderOptions" />
      </Parameters>
      <Docs>
        <param name="json">Tekst JSON, które można przeanalizować.</param>
        <param name="readerOptions">Opcje służące do sterowania zachowaniem czytnika podczas analizowania.</param>
        <summary>Analizuje tekst reprezentujący pojedynczą wartość ciągu JSON do JsonDocument.</summary>
        <returns>JsonDocument reprezentacja wartości JSON.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.Json.JsonException"><paramref name="json" /> nie reprezentują prawidłowej wartości pojedynczej JSON.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="readerOptions" /> zawiera opcje nieobsługiwane.</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Text.Json.JsonDocument&gt; ParseAsync (System.IO.Stream utf8Json, System.Text.Json.JsonReaderOptions readerOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Text.Json.JsonDocument&gt; ParseAsync(class System.IO.Stream utf8Json, valuetype System.Text.Json.JsonReaderOptions readerOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.ParseAsync(System.IO.Stream,System.Text.Json.JsonReaderOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member ParseAsync : System.IO.Stream * System.Text.Json.JsonReaderOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Text.Json.JsonDocument&gt;" Usage="System.Text.Json.JsonDocument.ParseAsync (utf8Json, readerOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Text.Json.JsonDocument&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="readerOptions" Type="System.Text.Json.JsonReaderOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="utf8Json">Dane JSON, które można przeanalizować.</param>
        <param name="readerOptions">Opcje służące do sterowania zachowaniem czytnika podczas analizowania.</param>
        <param name="cancellationToken">Token do monitorowania żądań anulowania.</param>
        <summary>Analizuje <see cref="T:System.IO.Stream" /> jako dane zakodowane UTF-8, reprezentującą pojedynczą wartość JSON do JsonDocument. Strumień jest do odczytu do zakończenia.</summary>
        <returns>Zadanie, aby wygenerować JsonDocument reprezentacja wartości JSON.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.Json.JsonException"><paramref name="utf8Json" /> nie reprezentują prawidłowej wartości pojedynczej JSON.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="readerOptions" /> zawiera opcje nieobsługiwane.</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseValue">
      <MemberSignature Language="C#" Value="public static System.Text.Json.JsonDocument ParseValue (ref System.Text.Json.Utf8JsonReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Json.JsonDocument ParseValue(valuetype System.Text.Json.Utf8JsonReader&amp; reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.ParseValue(System.Text.Json.Utf8JsonReader@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseValue (ByRef reader As Utf8JsonReader) As JsonDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::Json::JsonDocument ^ ParseValue(System::Text::Json::Utf8JsonReader % reader);" />
      <MemberSignature Language="F#" Value="static member ParseValue :  -&gt; System.Text.Json.JsonDocument" Usage="System.Text.Json.JsonDocument.ParseValue reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="reader">Czytnik do odczytu.</param>
        <summary>Analizuje jedną wartość JSON (w tym obiekty i tablice) z podanego czytnika.</summary>
        <returns>JsonDocument, reprezentujący wartość (i zagnieżdżone wartości) odczytu z czytnika.</returns>
        <remarks>
          <format><![CDATA[

Jeśli <xref:System.Text.Json.Utf8JsonReader.TokenType> właściwość `reader` jest <xref:System.Text.Json.JsonTokenType.PropertyName> lub <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, czytnik będzie przejdź przez jedno wywołanie <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> do określenia początku wartości.
               
Po ukończeniu tej metody `reader` znajduje się w końcowym tokenu w wartości JSON. Jeśli wyjątek jest zgłaszany, proces czytający jest resetowany do stanu, w jakim był po wywołaniu metody.
               
Ta metoda sprawia, że kopii danych czytnika zrealizowany, więc nie jest wymagane w celu zachowania integralności danych poza zwracany przez tę metodę obiektu wywołującego.

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="reader" /> zawiera opcje nieobsługiwane.</exception>
        <exception cref="T:System.Text.Json.JsonException">Nie można odczytać wartości z czytnika.</exception>
      </Docs>
    </Member>
    <Member MemberName="RootElement">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonElement RootElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonElement RootElement" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonDocument.RootElement" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RootElement As JsonElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonElement RootElement { System::Text::Json::JsonElement get(); };" />
      <MemberSignature Language="F#" Value="member this.RootElement : System.Text.Json.JsonElement" Usage="System.Text.Json.JsonDocument.RootElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera element główny dokument JSON.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseValue">
      <MemberSignature Language="C#" Value="public static bool TryParseValue (ref System.Text.Json.Utf8JsonReader reader, out System.Text.Json.JsonDocument document);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseValue(valuetype System.Text.Json.Utf8JsonReader&amp; reader, [out] class System.Text.Json.JsonDocument&amp; document) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.TryParseValue(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonDocument@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseValue (ByRef reader As Utf8JsonReader, ByRef document As JsonDocument) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseValue(System::Text::Json::Utf8JsonReader % reader, [Runtime::InteropServices::Out] System::Text::Json::JsonDocument ^ % document);" />
      <MemberSignature Language="F#" Value="static member TryParseValue :  *  -&gt; bool" Usage="System.Text.Json.JsonDocument.TryParseValue (reader, document)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
        <Parameter Name="document" Type="System.Text.Json.JsonDocument" RefType="out" />
      </Parameters>
      <Docs>
        <param name="reader">Czytnik do odczytu.</param>
        <param name="document">Gdy metoda zwróci wartość, zawiera przeanalizowany dokumentu.</param>
        <summary>Próbuje przeanalizować jedną wartość JSON (w tym obiekty i tablice) z podanego czytnika.</summary>
        <returns><see langword="true" /> Jeśli wartość została odczytu i przeanalizowany w JsonDocument; <see langword="false" /> Jeśli czytnik za mało danych podczas analizowania. Innych sytuacjach powoduje wyjątek.</returns>
        <remarks>
          <format><![CDATA[
          
Jeśli <xref:System.Text.Json.Utf8JsonReader.TokenType> właściwość `reader` jest <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> lub <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, czytnik będzie przejdź przez jedno wywołanie <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> do określenia początku wartości.
               
Po ukończeniu tej metody `reader` znajduje się w końcowym tokenu w wartości JSON. Jeśli wyjątek jest zgłaszany lub `false` zwróceniem czytnik jest resetowany do stanu, w momencie wywołania tej metody.
               
Ta metoda sprawia, że kopii danych czytnika zrealizowany, więc nie jest wymagane w celu zachowania integralności danych poza zwracany przez tę metodę obiektu wywołującego.
                 
               ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="reader" /> zawiera opcje nieobsługiwane.</exception>
        <exception cref="T:System.Text.Json.JsonException">Nie można odczytać wartości z czytnika.</exception>
      </Docs>
    </Member>
  </Members>
</Type>