<Type Name="JsonReaderState" FullName="System.Text.Json.JsonReaderState">
  <Metadata><Meta Name="ms.openlocfilehash" Value="62a0cf74d99495feb18860cc8597af7d51d6831d" /><Meta Name="ms.sourcegitcommit" Value="74239f3977d28923e5020663db2c4e91601bea79" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="07/24/2019" /><Meta Name="ms.locfileid" Value="68435022" /></Metadata><TypeSignature Language="C#" Value="public struct JsonReaderState" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit JsonReaderState extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonReaderState" />
  <TypeSignature Language="VB.NET" Value="Public Structure JsonReaderState" />
  <TypeSignature Language="C++ CLI" Value="public value class JsonReaderState" />
  <TypeSignature Language="F#" Value="type JsonReaderState = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Definiuje nieprzezroczysty typ, który przechowuje i zapisuje wszystkie odpowiednie informacje o stanie, które muszą zostać przekazane <see cref="T:System.Text.Json.Utf8JsonReader" /> do dalszego odczytu po przetworzeniu niepełnych danych.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

`JsonReaderState`jest wymagany do obsługi współużytkowania wątkowości podczas odczytywania niepełnych danych i dalszego odczytywania, gdy więcej danych jest dostępnych. W przeciwieństwie <xref:System.Text.Json.Utf8JsonReader> do struktury, która jest strukturą ref, ten typ może być przechodzący przez granice asynchroniczne/oczekujące i dlatego jest wymagany do zapewnienia obsługi odczytywania większej ilości danych asynchronicznie przed kontynuowaniem <xref:System.Text.Json.Utf8JsonReader>nowego wystąpienia.

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JsonReaderState (System.Text.Json.JsonReaderOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Text.Json.JsonReaderOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonReaderState.#ctor(System.Text.Json.JsonReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Optional options As JsonReaderOptions = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.JsonReaderState : System.Text.Json.JsonReaderOptions -&gt; System.Text.Json.JsonReaderState" Usage="new System.Text.Json.JsonReaderState options" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="options" Type="System.Text.Json.JsonReaderOptions" />
      </Parameters>
      <Docs>
        <param name="options">Definiuje dostosowane zachowanie <see cref="T:System.Text.Json.Utf8JsonReader" /> , które różni się od specyfikacji RFC JSON (na przykład jak obsługiwać komentarze lub maksymalną głębokość dopuszczalną podczas czytania). Domyślnie <see cref="T:System.Text.Json.Utf8JsonReader" /> zgodnie ze specyfikacją JSON RFC (Komentarze w formacie JSON są nieprawidłowe) i odczytuje do maksymalnej głębokości 64.</param>
        <summary>Tworzy nowe <see cref="T:System.Text.Json.JsonReaderState" /> wystąpienie.</summary>
        <remarks>
          <format><![CDATA[
          
Wystąpienie tego stanu musi zostać przesłane do <xref:System.Text.Json.Utf8JsonReader> konstruktora z danymi JSON. W przeciwieństwie <xref:System.Text.Json.Utf8JsonReader>do, który jest strukturą ref, stan może przetrwać w granicach asynchronicznych/oczekujących, dlatego ten typ jest wymagany w celu zapewnienia obsługi odczytywania danych w większej liczbie asynchronicznych przed <xref:System.Text.Json.Utf8JsonReader>kontynuowaniem pracy z nowym wystąpieniem.
            
            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Maksymalna głębokość jest ustawiona na wartość niedodatnią (&lt; 0).</exception>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonReaderOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonReaderOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonReaderState.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As JsonReaderOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonReaderOptions Options { System::Text::Json::JsonReaderOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Text.Json.JsonReaderOptions" Usage="System.Text.Json.JsonReaderState.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonReaderOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera niestandardowe zachowanie, które ma być używane podczas odczytywania danych <see cref="T:System.Text.Json.Utf8JsonReader" /> json przy użyciu struktury, która może odbiegać od ścisłego przestrzegania specyfikacji JSON, która jest zachowaniem domyślnym.</summary>
        <value>Niestandardowe zachowanie, które ma być używane podczas odczytywania danych JSON.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>