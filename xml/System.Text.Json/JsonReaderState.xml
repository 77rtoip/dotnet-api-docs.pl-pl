<Type Name="JsonReaderState" FullName="System.Text.Json.JsonReaderState">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6225284e1ba227a6a73f861d5fdaba59c0849938" /><Meta Name="ms.sourcegitcommit" Value="e28b7b371ead27d99e20387b8243f09b0cdb9fb3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="04/12/2019" /><Meta Name="ms.locfileid" Value="59541479" /></Metadata><TypeSignature Language="C#" Value="public struct JsonReaderState" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit JsonReaderState extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonReaderState" />
  <TypeSignature Language="VB.NET" Value="Public Structure JsonReaderState" />
  <TypeSignature Language="C++ CLI" Value="public value class JsonReaderState" />
  <TypeSignature Language="F#" Value="type JsonReaderState = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Definiuje typ nieprzezroczyste, która przechowuje i zapisuje wszystkie istotne informacje o stanie, który należy podać w celu <see cref="T:System.Text.Json.Utf8JsonReader" /> kontynuować odczytywanie po przetworzeniu niepełne dane.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

`JsonReaderState` jest wymagany do obsługi współużytkowania wątkowości, odczytując niekompletne dane i Czytaj dalej, gdy dostępnych jest więcej danych. W odróżnieniu od <xref:System.Text.Json.Utf8JsonReader> struktury, która jest strukturą ref tego typu mogą przetrwać w granicach async/await i dlatego są wymagane, aby zapewnić obsługę dla asynchronicznego odczytywania większej ilości danych, przed kontynuowaniem nowe wystąpienie klasy <xref:System.Text.Json.Utf8JsonReader>.

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JsonReaderState (int maxDepth = 64, System.Text.Json.JsonReaderOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 maxDepth, valuetype System.Text.Json.JsonReaderOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonReaderState.#ctor(System.Int32,System.Text.Json.JsonReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Optional maxDepth As Integer = 64, Optional options As JsonReaderOptions = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.JsonReaderState : int * System.Text.Json.JsonReaderOptions -&gt; System.Text.Json.JsonReaderState" Usage="new System.Text.Json.JsonReaderState (maxDepth, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="maxDepth" Type="System.Int32" />
        <Parameter Name="options" Type="System.Text.Json.JsonReaderOptions" />
      </Parameters>
      <Docs>
        <param name="maxDepth">Maksymalna głębokość dozwolona podczas odczytu formatu JSON. Jest to parametr opcjonalny, a jego wartość domyślna to 64. Zgłasza odczytu poza tym głębokości <see cref="T:System.Text.Json.JsonReaderException" /></param>
        <param name="options">Niestandardowe zachowanie <see cref="T:System.Text.Json.Utf8JsonReader" /> różni się od RFC JSON (na przykład, jak obsługiwać komentarzy).
Jest to parametr opcjonalny i domyślnie <see cref="T:System.Text.Json.Utf8JsonReader" /> struktury następuje bezwzględnie JSON RFC (oznacza to, komentarze w kodzie JSON jest nieprawidłowy).</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Text.Json.JsonReaderState" /> struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

A <xref:System.Text.Json.JsonReaderState> wystąpienia muszą zostać przekazane do <xref:System.Text.Json.Utf8JsonReader> konstruktora z danych JSON.
W odróżnieniu od <xref:System.Text.Json.Utf8JsonReader>, która jest strukturą ref, stan mogą przetrwać w granicach async/await i dlatego ten typ jest wymagany do obsługi do asynchronicznego odczytywania większej ilości danych, przed kontynuowaniem nowe wystąpienie klasy <xref:System.Text.Json.Utf8JsonReader> klasy.

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="maxDepth" /> jest mniejsza niż lub równa 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="BytesConsumed">
      <MemberSignature Language="C#" Value="public long BytesConsumed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesConsumed" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonReaderState.BytesConsumed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesConsumed As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesConsumed { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesConsumed : int64" Usage="System.Text.Json.JsonReaderState.BytesConsumed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczba bajtów, używane przez <see cref="T:System.Text.Json.Utf8JsonReader" /> do tej pory dla danego UTF-8 kodowany tekst wejściowy.</summary>
        <value>Całkowita liczba bajtów, używane przez <see cref="T:System.Text.Json.Utf8JsonReader" /> do tej pory.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxDepth">
      <MemberSignature Language="C#" Value="public int MaxDepth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxDepth" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonReaderState.MaxDepth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaxDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxDepth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MaxDepth : int" Usage="System.Text.Json.JsonReaderState.MaxDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera maksymalną głębokość dozwoloną podczas odczytu formatu JSON.</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks
        
Odczytywanie ostatnich `MaxDepth` zgłasza <xref:System.Text.Json.JsonReaderException>.

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonReaderOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonReaderOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonReaderState.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As JsonReaderOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonReaderOptions Options { System::Text::Json::JsonReaderOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Text.Json.JsonReaderOptions" Usage="System.Text.Json.JsonReaderState.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonReaderOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera zachowanie niestandardowe do użycia podczas odczytywania danych JSON przy użyciu <see cref="T:System.Text.Json.Utf8JsonReader" /> struktury, która może różnić się od postępowania zgodnie ze specyfikacją formatu JSON, który jest zachowaniem domyślnym.</summary>
        <value>Niestandardowe zachowanie do użycia podczas odczytywania danych JSON.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public SequencePosition Position { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.SequencePosition Position" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonReaderState.Position" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Position As SequencePosition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property SequencePosition Position { SequencePosition get(); };" />
      <MemberSignature Language="F#" Value="member this.Position : SequencePosition" Usage="System.Text.Json.JsonReaderState.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SequencePosition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera bieżący <see cref="T:System.SequencePosition" /> w podanej UTF-8 zakodowany w danych wejściowych ReadOnlySequence&lt;bajt&gt;. Jeśli <see cref="T:System.Text.Json.Utf8JsonReader" /> struktury został skonstruowany przy użyciu ReadOnlySpan&lt;bajtów&gt; zamiast tego należy zawsze spowoduje zwrócenie domyślny <see cref="T:System.SequencePosition" />.</summary>
        <value>Bieżący <see cref="T:System.SequencePosition" /> w podanej UTF-8 zakodowany w danych wejściowych ReadOnlySequence&lt;bajt&gt;.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
