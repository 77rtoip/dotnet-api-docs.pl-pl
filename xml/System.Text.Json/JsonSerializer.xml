<Type Name="JsonSerializer" FullName="System.Text.Json.JsonSerializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="55efe259c3954694d75aef7b8fdde8fe9e9d2cf0" /><Meta Name="ms.sourcegitcommit" Value="8544f14c8194a55eb22d46721b0bbe46f345c063" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/21/2019" /><Meta Name="ms.locfileid" Value="69669160" /></Metadata><TypeSignature Language="C#" Value="public static class JsonSerializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit JsonSerializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonSerializer" />
  <TypeSignature Language="VB.NET" Value="Public Class JsonSerializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class JsonSerializer abstract sealed" />
  <TypeSignature Language="F#" Value="type JsonSerializer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Oferuje funkcje do serializacji obiektów lub typów wartości do formatu JSON oraz do deserializacji notacji JSON do obiektów lub typów wartości.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (ReadOnlySpan&lt;byte&gt; utf8Json, Type returnType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.ReadOnlySpan{System.Byte},System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (utf8Json As ReadOnlySpan(Of Byte), returnType As Type, Optional options As JsonSerializerOptions = null) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize : ReadOnlySpan&lt;byte&gt; * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (utf8Json, returnType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="utf8Json">Tekst JSON do przeanalizowania.</param>
        <param name="returnType">Typ obiektu do przekonwertowania i zwrócenia.</param>
        <param name="options">Opcje sterujące zachowaniem podczas analizy.</param>
        <summary>Analizuje zakodowany tekst UTF-8 reprezentujący pojedynczą wartość JSON w wystąpieniu określonego typu.</summary>
        <returns><paramref name="returnType" /> Reprezentacja wartości JSON.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="returnType" />jest <see langword="null" />.</exception>
        <exception cref="T:System.Text.Json.JsonException">Kod JSON jest nieprawidłowy, <paramref name="returnType" /> nie jest zgodny z formatem JSON lub gdy w strumieniu znajdują się pozostałe dane.</exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (string json, Type returnType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(string json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.String,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (json As String, returnType As Type, Optional options As JsonSerializerOptions = null) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize : string * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (json, returnType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="json" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="json">Tekst JSON do przeanalizowania.</param>
        <param name="returnType">Typ obiektu do przekonwertowania i zwrócenia.</param>
        <param name="options">Opcje sterujące zachowaniem podczas analizy.</param>
        <summary>Analizuje tekst reprezentujący pojedynczą wartość JSON w wystąpieniu określonego typu.</summary>
        <returns><paramref name="returnType" /> Reprezentacja wartości JSON.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Korzystanie z nie jest tak wydajne jak przy użyciu metod UTF-8, ponieważ implementacja natywnie używa kodowania UTF-8. <xref:System.String>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="json" />lub <paramref name="returnType" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.Text.Json.JsonException">Kod JSON jest nieprawidłowy, <paramref name="returnType" /> nie jest zgodny z kodem JSON lub gdy w strumieniu znajdują się pozostałe dane.</exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (ref System.Text.Json.Utf8JsonReader reader, Type returnType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(valuetype System.Text.Json.Utf8JsonReader&amp; reader, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (ByRef reader As Utf8JsonReader, returnType As Type, Optional options As JsonSerializerOptions = null) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize :  * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (reader, returnType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="reader">Odczytywanie z czytnika.</param>
        <param name="returnType">Typ obiektu do przekonwertowania i zwrócenia.</param>
        <param name="options">Opcje sterujące zachowaniem serializatora podczas odczytu.</param>
        <summary>Odczytuje jedną wartość JSON (łącznie z obiektami lub tablicami) z podanego czytnika i konwertuje ją na wystąpienie określonego typu.</summary>
        <returns><paramref name="returnType" /> Reprezentacja wartości JSON.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<xref:System.Text.Json.Utf8JsonReader.TokenType> Jeśli <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> właściwość jest lub<xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>,czytnik będzie zaawansowany przez jedno wywołanie do określenia początku wartości. <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> `reader`

Po zakończeniu tej metody, `reader` zostanie ona umieszczona w końcowym tokenie w wartości JSON.  Jeśli wystąpi wyjątek, czytnik zostanie zresetowany do stanu, w którym był on wywoływany podczas wywoływania metody.

Ta metoda wykonuje kopię danych, na której działa czytelnik, dlatego nie istnieje wymóg wywołujący, aby zachować integralność danych poza przywróceniem tej metody.

Służy do tworzenia wystąpienia pierwszeństwa <xref:System.Text.Json.JsonSerializerOptions> w <xref:System.Text.Json.Utf8JsonReader> przypadku, gdy powodują konflikt. <xref:System.Text.Json.JsonReaderOptions> W związku <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType>z <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>tym, <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType> , i są używane podczas odczytywania.
               
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="returnType" />jest <see langword="null" />.</exception>
        <exception cref="T:System.Text.Json.JsonException">Kod JSON jest nieprawidłowy, <paramref name="returnType" /> nie jest zgodny z formatem JSON lub nie można odczytać wartości z czytnika.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="reader" />używa nieobsługiwanych opcji.</exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (ReadOnlySpan&lt;byte&gt; utf8Json, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Json, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (utf8Json As ReadOnlySpan(Of Byte), Optional options As JsonSerializerOptions = null) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize : ReadOnlySpan&lt;byte&gt; * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (utf8Json, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue">Typ docelowy tekstu zakodowanego w formacie UTF-8.</typeparam>
        <param name="utf8Json">Tekst JSON do przeanalizowania.</param>
        <param name="options">Opcje sterujące zachowaniem podczas analizy.</param>
        <summary>Analizuje zakodowany tekst UTF-8 reprezentujący pojedynczą wartość JSON w wystąpieniu typu określonego przez parametr typu ogólnego.</summary>
        <returns><typeparamref name="TValue" /> Reprezentacja wartości JSON.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.Json.JsonException">KOD JSON jest nieprawidłowy.
          
—lub—

<typeparamref name="TValue" />nie jest zgodny z formatem JSON.

—lub—

W strumieniu znajdują się pozostałe dane.</exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (string json, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(string json, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (json As String, Optional options As JsonSerializerOptions = null) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize : string * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (json, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="json" Type="System.String" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue">Typ docelowy wartości JSON.</typeparam>
        <param name="json">Tekst JSON do przeanalizowania.</param>
        <param name="options">Opcje sterujące zachowaniem podczas analizy.</param>
        <summary>Analizuje tekst reprezentujący pojedynczą wartość JSON w wystąpieniu typu określonego przez parametr typu ogólnego.</summary>
        <returns><typeparamref name="TValue" /> Reprezentacja wartości JSON.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Korzystanie z nie jest tak wydajne jak przy użyciu metod UTF-8, ponieważ implementacja natywnie używa kodowania UTF-8. <xref:System.String>
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="json" />jest <see langword="null" />.</exception>
        <exception cref="T:System.Text.Json.JsonException">KOD JSON jest nieprawidłowy.
          
—lub—

<typeparamref name="TValue" />nie jest zgodny z formatem JSON.

—lub—

W strumieniu znajdują się pozostałe dane.</exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (ref System.Text.Json.Utf8JsonReader reader, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(valuetype System.Text.Json.Utf8JsonReader&amp; reader, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (ByRef reader As Utf8JsonReader, Optional options As JsonSerializerOptions = null) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize :  * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (reader, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue">Typ docelowy wartości JSON.</typeparam>
        <param name="reader">Odczytywanie z czytnika.</param>
        <param name="options">Opcje sterujące zachowaniem serializatora podczas odczytu.</param>
        <summary>Odczytuje jedną wartość JSON (łącznie z obiektami lub tablicami) z podanego czytnika do wystąpienia typu określonego przez parametr typu ogólnego.</summary>
        <returns><typeparamref name="TValue" /> Reprezentacja wartości JSON.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<xref:System.Text.Json.Utf8JsonReader.TokenType> Jeśli <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> właściwość jest lub<xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>,czytnik będzie zaawansowany przez jedno wywołanie do określenia początku wartości. <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> `reader`
               
Po zakończeniu tej metody, `reader` zostanie ona umieszczona w końcowym tokenie w wartości JSON. Jeśli wystąpi wyjątek, czytnik zostanie zresetowany do stanu, w którym był on wywoływany podczas wywoływania metody.
               
Ta metoda wykonuje kopię danych, na której działa czytelnik, dlatego nie istnieje wymóg wywołujący, aby zachować integralność danych poza przywróceniem tej metody.
               
Służy do tworzenia wystąpienia pierwszeństwa <xref:System.Text.Json.JsonSerializerOptions> w <xref:System.Text.Json.Utf8JsonReader> przypadku, gdy powodują konflikt. <xref:System.Text.Json.JsonReaderOptions> W związku <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType>z <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>tym, <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType> , i są używane podczas odczytywania.
               
          ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException">KOD JSON jest nieprawidłowy.
          
—lub—

<typeparamref name="TValue" />nie jest zgodny z formatem JSON.

—lub—

W strumieniu znajdują się pozostałe dane.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="reader" />używa nieobsługiwanych opcji.</exception>
      </Docs>
    </Member>
    <Member MemberName="DeserializeAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;object&gt; DeserializeAsync (System.IO.Stream utf8Json, Type returnType, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;object&gt; DeserializeAsync(class System.IO.Stream utf8Json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.DeserializeAsync(System.IO.Stream,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member DeserializeAsync : System.IO.Stream * Type * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;obj&gt;" Usage="System.Text.Json.JsonSerializer.DeserializeAsync (utf8Json, returnType, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="utf8Json">Dane JSON do analizy.</param>
        <param name="returnType">Typ obiektu do przekonwertowania i zwrócenia.</param>
        <param name="options">Opcje sterujące zachowaniem podczas odczytu.</param>
        <param name="cancellationToken">Token anulowania, który może służyć do anulowania operacji odczytu.</param>
        <summary>Asynchronicznie odczytuje zakodowany tekst UTF-8 reprezentujący pojedynczą wartość JSON do wystąpienia określonego typu. Strumień zostanie odczytany do ukończenia.</summary>
        <returns><paramref name="returnType" /> Reprezentacja wartości JSON.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="utf8Json" />lub <paramref name="returnType" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.Text.Json.JsonException">KOD JSON jest nieprawidłowy.
          
—lub—

<typeparamref name="TValue" />nie jest zgodny z formatem JSON.

—lub—

W strumieniu znajdują się pozostałe dane.</exception>
      </Docs>
    </Member>
    <Member MemberName="DeserializeAsync&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TValue&gt; DeserializeAsync&lt;TValue&gt; (System.IO.Stream utf8Json, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TValue&gt; DeserializeAsync&lt;TValue&gt;(class System.IO.Stream utf8Json, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.DeserializeAsync``1(System.IO.Stream,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member DeserializeAsync : System.IO.Stream * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Value&gt;" Usage="System.Text.Json.JsonSerializer.DeserializeAsync (utf8Json, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TValue">Typ docelowy wartości JSON.</typeparam>
        <param name="utf8Json">Dane JSON do analizy.</param>
        <param name="options">Opcje sterujące zachowaniem podczas odczytu.</param>
        <param name="cancellationToken">Token, który może służyć do anulowania operacji odczytu.</param>
        <summary>Asynchronicznie odczytuje zakodowany tekst UTF-8 reprezentujący pojedynczą wartość JSON do wystąpienia typu określonego przez parametr typu ogólnego. Strumień zostanie odczytany do ukończenia.</summary>
        <returns><typeparamref name="TValue" /> Reprezentacja wartości JSON.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.Json.JsonException">KOD JSON jest nieprawidłowy.
          
—lub—

<typeparamref name="TValue" />nie jest zgodny z formatem JSON.

—lub—

W strumieniu znajdują się pozostałe dane.</exception>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public static string Serialize (object value, Type type, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Serialize(object value, class System.Type type, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Serialize (value As Object, inputType As Type, Optional options As JsonSerializerOptions = null) As String" />
      <MemberSignature Language="F#" Value="static member Serialize : obj * Type * System.Text.Json.JsonSerializerOptions -&gt; string" Usage="System.Text.Json.JsonSerializer.Serialize (value, type, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="value">Wartość do konwersji.</param>
        <param name="type">Typ <paramref name="value" /> do przekonwertowania.</param>
        <param name="options">Opcje sterujące zachowaniem konwersji.</param>
        <summary>Konwertuje wartość określonego typu na <see cref="T:System.String" />.</summary>
        <returns>Ciąg reprezentujący wartość.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Korzystanie z <xref:System.String> programu jest niezgodne z kodowaniem UTF-8, ponieważ implementacja wewnętrznie używa kodowania UTF-8. Zobacz również <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> i <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public static void Serialize (System.Text.Json.Utf8JsonWriter writer, object value, Type type, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Serialize(class System.Text.Json.Utf8JsonWriter writer, object value, class System.Type type, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize(System.Text.Json.Utf8JsonWriter,System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Serialize (writer As Utf8JsonWriter, value As Object, inputType As Type, Optional options As JsonSerializerOptions = null)" />
      <MemberSignature Language="F#" Value="static member Serialize : System.Text.Json.Utf8JsonWriter * obj * Type * System.Text.Json.JsonSerializerOptions -&gt; unit" Usage="System.Text.Json.JsonSerializer.Serialize (writer, value, type, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="writer">Składnik zapisywania JSON.</param>
        <param name="value">Wartość do przekonwertowania i zapisu.</param>
        <param name="type">Typ <paramref name="value" /> do przekonwertowania.</param>
        <param name="options">Opcje sterujące zachowaniem serializacji.</param>
        <summary>Zapisuje jedną wartość JSON (łącznie z obiektami lub tablicami) określonego typu dla podanego składnika zapisywania.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static string Serialize&lt;TValue&gt; (TValue value, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Serialize&lt;TValue&gt;(!!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize``1(``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Serialize(Of TValue) (value As TValue, Optional options As JsonSerializerOptions = null) As String" />
      <MemberSignature Language="F#" Value="static member Serialize : 'Value * System.Text.Json.JsonSerializerOptions -&gt; string" Usage="System.Text.Json.JsonSerializer.Serialize (value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue">Typ wartości do serializacji.</typeparam>
        <param name="value">Wartość do konwersji.</param>
        <param name="options">Opcje sterujące zachowaniem serializacji.</param>
        <summary>Konwertuje wartość typu określonego przez parametr typu generycznego na <see cref="T:System.String" />.</summary>
        <returns>Ciąg reprezentujący wartość.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Korzystanie z <xref:System.String> programu jest niezgodne z kodowaniem UTF-8, ponieważ implementacja wewnętrznie używa kodowania UTF-8. Zobacz również <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> i <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static void Serialize&lt;TValue&gt; (System.Text.Json.Utf8JsonWriter writer, TValue value, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Serialize&lt;TValue&gt;(class System.Text.Json.Utf8JsonWriter writer, !!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize``1(System.Text.Json.Utf8JsonWriter,``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Serialize(Of TValue) (writer As Utf8JsonWriter, value As TValue, Optional options As JsonSerializerOptions = null)" />
      <MemberSignature Language="F#" Value="static member Serialize : System.Text.Json.Utf8JsonWriter * 'Value * System.Text.Json.JsonSerializerOptions -&gt; unit" Usage="System.Text.Json.JsonSerializer.Serialize (writer, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" />
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue">Typ wartości do serializacji.</typeparam>
        <param name="writer">Składnik zapisywania JSON.</param>
        <param name="value">Wartość do przekonwertowania i zapisu.</param>
        <param name="options">Opcje sterujące zachowaniem serializacji.</param>
        <summary>Zapisuje jedną wartość JSON (łącznie z obiektami lub tablicami) typu określonego przez parametr typu ogólnego do podanego składnika zapisywania.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SerializeAsync (System.IO.Stream utf8Json, object value, Type type, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SerializeAsync(class System.IO.Stream utf8Json, object value, class System.Type type, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SerializeAsync : System.IO.Stream * obj * Type * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Text.Json.JsonSerializer.SerializeAsync (utf8Json, value, type, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="utf8Json">Strumień UTF-8 do zapisu.</param>
        <param name="value">Wartość do konwersji.</param>
        <param name="type">Typ <paramref name="value" /> do przekonwertowania.</param>
        <param name="options">Opcje sterujące zachowaniem serializacji.</param>
        <param name="cancellationToken">Token, który może służyć do anulowania operacji zapisu.</param>
        <summary>Asynchronicznie konwertuje wartość określonego typu na tekst JSON zakodowany w formacie UTF-8 i zapisuje go w określonym strumieniu.</summary>
        <returns>Zadanie, które reprezentuje asynchroniczny zapis operacji.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeAsync&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SerializeAsync&lt;TValue&gt; (System.IO.Stream utf8Json, TValue value, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SerializeAsync&lt;TValue&gt;(class System.IO.Stream utf8Json, !!TValue value, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SerializeAsync : System.IO.Stream * 'Value * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Text.Json.JsonSerializer.SerializeAsync (utf8Json, value, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TValue">Typ wartości do serializacji.</typeparam>
        <param name="utf8Json">Strumień UTF-8 do zapisu.</param>
        <param name="value">Wartość do konwersji.</param>
        <param name="options">Opcje sterujące zachowaniem serializacji.</param>
        <param name="cancellationToken">Token, który może służyć do anulowania operacji zapisu.</param>
        <summary>Asynchronicznie konwertuje wartość typu określonego przez typ ogólny parametaer na tekst JSON zakodowany w formacie UTF-8 i zapisuje go w strumieniu.</summary>
        <returns>Zadanie, które reprezentuje asynchroniczny zapis operacji.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeToUtf8Bytes">
      <MemberSignature Language="C#" Value="public static byte[] SerializeToUtf8Bytes (object value, Type type, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] SerializeToUtf8Bytes(object value, class System.Type type, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SerializeToUtf8Bytes (value As Object, inputType As Type, Optional options As JsonSerializerOptions = null) As Byte()" />
      <MemberSignature Language="F#" Value="static member SerializeToUtf8Bytes : obj * Type * System.Text.Json.JsonSerializerOptions -&gt; byte[]" Usage="System.Text.Json.JsonSerializer.SerializeToUtf8Bytes (value, type, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="value">Wartość do konwersji.</param>
        <param name="type">Typ <paramref name="value" /> do przekonwertowania.</param>
        <param name="options">Opcje sterujące zachowaniem konwersji.</param>
        <summary>Konwertuje wartość określonego typu w tablicę bajtową zakodowaną w formacie UTF8.</summary>
        <returns>Reprezentacja wartości w formacie UTF-8.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeToUtf8Bytes&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static byte[] SerializeToUtf8Bytes&lt;TValue&gt; (TValue value, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] SerializeToUtf8Bytes&lt;TValue&gt;(!!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes``1(``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SerializeToUtf8Bytes(Of TValue) (value As TValue, Optional options As JsonSerializerOptions = null) As Byte()" />
      <MemberSignature Language="F#" Value="static member SerializeToUtf8Bytes : 'Value * System.Text.Json.JsonSerializerOptions -&gt; byte[]" Usage="System.Text.Json.JsonSerializer.SerializeToUtf8Bytes (value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue">Typ wartości.</typeparam>
        <param name="value">Wartość do konwersji.</param>
        <param name="options">Opcje sterujące zachowaniem konwersji.</param>
        <summary>Konwertuje wartość typu określonego przez parametr typu ogólnego do tablicy bajtowej zakodowanej w formacie UTF8.</summary>
        <returns>Reprezentacja wartości w formacie UTF-8.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
