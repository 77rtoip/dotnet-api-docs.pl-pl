<Type Name="JsonSerializer" FullName="System.Text.Json.JsonSerializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b5c5ec205f196053376414cccddd23bba0eed5a3" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69099944" /></Metadata><TypeSignature Language="C#" Value="public static class JsonSerializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit JsonSerializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonSerializer" />
  <TypeSignature Language="VB.NET" Value="Public Class JsonSerializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class JsonSerializer abstract sealed" />
  <TypeSignature Language="F#" Value="type JsonSerializer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="0cbb8-101">Oferuje funkcje do serializacji obiektów lub typów wartości do formatu JSON oraz do deserializacji notacji JSON do obiektów lub typów wartości.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-101">Provides functionality to serialize objects or value types to JSON and to deserialize JSON into objects or value types.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (ReadOnlySpan&lt;byte&gt; utf8Json, Type returnType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.ReadOnlySpan{System.Byte},System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (utf8Json As ReadOnlySpan(Of Byte), returnType As Type, Optional options As JsonSerializerOptions = null) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize : ReadOnlySpan&lt;byte&gt; * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (utf8Json, returnType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="0cbb8-102">Tekst JSON do przeanalizowania.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-102">The JSON text to parse.</span></span></param>
        <param name="returnType"><span data-ttu-id="0cbb8-103">Typ obiektu do przekonwertowania i zwrócenia.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-103">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="0cbb8-104">Opcje sterujące zachowaniem podczas analizy.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-104">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="0cbb8-105">Analizuje zakodowany tekst UTF-8 reprezentujący pojedynczą wartość JSON w wystąpieniu określonego typu.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-105">Parses the UTF-8 encoded text representing a single JSON value into an instance of a specified type.</span></span></summary>
        <returns><span data-ttu-id="0cbb8-106"><paramref name="returnType" /> Reprezentacja wartości JSON.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-106">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0cbb8-107"><paramref name="returnType" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-107"><paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="0cbb8-108">Kod JSON jest nieprawidłowy, <paramref name="returnType" /> nie jest zgodny z formatem JSON lub gdy w strumieniu znajdują się pozostałe dane.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-108">The JSON is invalid, <paramref name="returnType" /> is not compatible with the JSON, or when there is remaining data in the Stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (string json, Type returnType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(string json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.String,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (json As String, returnType As Type, Optional options As JsonSerializerOptions = null) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize : string * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (json, returnType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="json" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="json"><span data-ttu-id="0cbb8-109">Tekst JSON do przeanalizowania.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-109">The JSON text to parse.</span></span></param>
        <param name="returnType"><span data-ttu-id="0cbb8-110">Typ obiektu do przekonwertowania i zwrócenia.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-110">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="0cbb8-111">Opcje sterujące zachowaniem podczas analizy.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-111">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="0cbb8-112">Analizuje tekst reprezentujący pojedynczą wartość JSON w wystąpieniu określonego typu.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-112">Parses the text representing a single JSON value into an instance of a specified type.</span></span></summary>
        <returns><span data-ttu-id="0cbb8-113"><paramref name="returnType" /> Reprezentacja wartości JSON.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-113">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="0cbb8-114">Korzystanie z nie jest tak wydajne jak przy użyciu metod UTF-8, ponieważ implementacja natywnie używa kodowania UTF-8. <xref:System.String></span><span class="sxs-lookup"><span data-stu-id="0cbb8-114">Using a <xref:System.String> is not as efficient as using the UTF-8 methods since the implementation natively uses UTF-8.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0cbb8-115"><paramref name="json" />lub <paramref name="returnType" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-115"><paramref name="json" /> or <paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="0cbb8-116">Kod JSON jest nieprawidłowy, <paramref name="returnType" /> nie jest zgodny z kodem JSON lub gdy w strumieniu znajdują się pozostałe dane.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-116">The JSON is invalid, the <paramref name="returnType" /> is not compatible with the JSON, or when there is remaining data in the Stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (ref System.Text.Json.Utf8JsonReader reader, Type returnType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(valuetype System.Text.Json.Utf8JsonReader&amp; reader, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (ByRef reader As Utf8JsonReader, returnType As Type, Optional options As JsonSerializerOptions = null) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize :  * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (reader, returnType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="0cbb8-117">Odczytywanie z czytnika.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-117">The reader to read.</span></span></param>
        <param name="returnType"><span data-ttu-id="0cbb8-118">Typ obiektu do przekonwertowania i zwrócenia.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-118">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="0cbb8-119">Opcje sterujące zachowaniem serializatora podczas odczytu.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-119">Options to control the serializer behavior during reading.</span></span></param>
        <summary><span data-ttu-id="0cbb8-120">Odczytuje jedną wartość JSON (łącznie z obiektami lub tablicami) z podanego czytnika i konwertuje ją na wystąpienie określonego typu.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-120">Reads one JSON value (including objects or arrays) from the provided reader and converts it into an instance of  a specified type.</span></span></summary>
        <returns><span data-ttu-id="0cbb8-121"><paramref name="returnType" /> Reprezentacja wartości JSON.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-121">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="0cbb8-122"><xref:System.Text.Json.Utf8JsonReader.TokenType> Jeśli <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> właściwość jest lub<xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>,czytnik będzie zaawansowany przez jedno wywołanie do określenia początku wartości. <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> `reader`</span><span class="sxs-lookup"><span data-stu-id="0cbb8-122">If the <xref:System.Text.Json.Utf8JsonReader.TokenType> property of `reader` is <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> or <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, the reader will be advanced by one call to <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> to determine the start of the value.</span></span>

<span data-ttu-id="0cbb8-123">Po zakończeniu tej metody, `reader` zostanie ona umieszczona w końcowym tokenie w wartości JSON.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-123">Upon completion of this method, `reader` will be positioned at the final token in the JSON value.</span></span>  <span data-ttu-id="0cbb8-124">Jeśli wystąpi wyjątek, czytnik zostanie zresetowany do stanu, w którym był on wywoływany podczas wywoływania metody.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-124">If an exception is thrown, the reader is reset to the state it was in when the method was called.</span></span>

<span data-ttu-id="0cbb8-125">Ta metoda wykonuje kopię danych, na której działa czytelnik, dlatego nie istnieje wymóg wywołujący, aby zachować integralność danych poza przywróceniem tej metody.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-125">This method makes a copy of the data the reader acted on, so there is no caller requirement to maintain data integrity beyond the return of this method.</span></span>

<span data-ttu-id="0cbb8-126">Służy do tworzenia wystąpienia pierwszeństwa <xref:System.Text.Json.JsonSerializerOptions> w <xref:System.Text.Json.Utf8JsonReader> przypadku, gdy powodują konflikt. <xref:System.Text.Json.JsonReaderOptions></span><span class="sxs-lookup"><span data-stu-id="0cbb8-126">The <xref:System.Text.Json.JsonReaderOptions> used to create the instance of the <xref:System.Text.Json.Utf8JsonReader> take precedence over the <xref:System.Text.Json.JsonSerializerOptions> when they conflict.</span></span> <span data-ttu-id="0cbb8-127">W związku <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType>z <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>tym, <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType> , i są używane podczas odczytywania.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-127">Hence, <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType>, <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>, and <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType> are used while reading.</span></span>
               
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0cbb8-128"><paramref name="returnType" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-128"><paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="0cbb8-129">Kod JSON jest nieprawidłowy, <paramref name="returnType" /> nie jest zgodny z formatem JSON lub nie można odczytać wartości z czytnika.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-129">The JSON is invalid, <paramref name="returnType" /> is not compatible with the JSON, or a value could not be read from the reader.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (ReadOnlySpan&lt;byte&gt; utf8Json, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Json, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (utf8Json As ReadOnlySpan(Of Byte), Optional options As JsonSerializerOptions = null) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize : ReadOnlySpan&lt;byte&gt; * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (utf8Json, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="0cbb8-130">Typ docelowy tekstu zakodowanego w formacie UTF-8.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-130">The target type of the UTF-8 encoded text.</span></span></typeparam>
        <param name="utf8Json"><span data-ttu-id="0cbb8-131">Tekst JSON do przeanalizowania.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-131">The JSON text to parse.</span></span></param>
        <param name="options"><span data-ttu-id="0cbb8-132">Opcje sterujące zachowaniem podczas analizy.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-132">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="0cbb8-133">Analizuje zakodowany tekst UTF-8 reprezentujący pojedynczą wartość JSON w wystąpieniu typu określonego przez parametr typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-133">Parses the UTF-8 encoded text representing a single JSON value into an instance of the type specified by a generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="0cbb8-134"><typeparamref name="TValue" /> Reprezentacja wartości JSON.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-134">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="0cbb8-135">KOD JSON jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-135">The JSON is invalid.</span></span>
          
<span data-ttu-id="0cbb8-136">—lub—</span><span class="sxs-lookup"><span data-stu-id="0cbb8-136">-or-</span></span>

<span data-ttu-id="0cbb8-137"><typeparamref name="TValue" />nie jest zgodny z formatem JSON.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-137"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="0cbb8-138">—lub—</span><span class="sxs-lookup"><span data-stu-id="0cbb8-138">-or-</span></span>

<span data-ttu-id="0cbb8-139">W strumieniu znajdują się pozostałe dane.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-139">There is remaining data in the stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (string json, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(string json, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (json As String, Optional options As JsonSerializerOptions = null) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize : string * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (json, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="json" Type="System.String" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="0cbb8-140">Typ docelowy wartości JSON.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-140">The target type of the JSON value.</span></span></typeparam>
        <param name="json"><span data-ttu-id="0cbb8-141">Tekst JSON do przeanalizowania.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-141">The JSON text to parse.</span></span></param>
        <param name="options"><span data-ttu-id="0cbb8-142">Opcje sterujące zachowaniem podczas analizy.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-142">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="0cbb8-143">Analizuje tekst reprezentujący pojedynczą wartość JSON w wystąpieniu typu określonego przez parametr typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-143">Parses the text representing a single JSON value into an instance of the type specified by a generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="0cbb8-144"><typeparamref name="TValue" /> Reprezentacja wartości JSON.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-144">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="0cbb8-145">Korzystanie z nie jest tak wydajne jak przy użyciu metod UTF-8, ponieważ implementacja natywnie używa kodowania UTF-8. <xref:System.String></span><span class="sxs-lookup"><span data-stu-id="0cbb8-145">Using a <xref:System.String> is not as efficient as using the UTF-8 methods since the implementation natively uses UTF-8.</span></span>
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0cbb8-146"><paramref name="json" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-146"><paramref name="json" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="0cbb8-147">KOD JSON jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-147">The JSON is invalid.</span></span>
          
<span data-ttu-id="0cbb8-148">—lub—</span><span class="sxs-lookup"><span data-stu-id="0cbb8-148">-or-</span></span>

<span data-ttu-id="0cbb8-149"><typeparamref name="TValue" />nie jest zgodny z formatem JSON.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-149"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="0cbb8-150">—lub—</span><span class="sxs-lookup"><span data-stu-id="0cbb8-150">-or-</span></span>

<span data-ttu-id="0cbb8-151">W strumieniu znajdują się pozostałe dane.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-151">There is remaining data in the stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (ref System.Text.Json.Utf8JsonReader reader, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(valuetype System.Text.Json.Utf8JsonReader&amp; reader, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (ByRef reader As Utf8JsonReader, Optional options As JsonSerializerOptions = null) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize :  * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (reader, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="0cbb8-152">Typ docelowy wartości JSON.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-152">The target type of the JSON value.</span></span></typeparam>
        <param name="reader"><span data-ttu-id="0cbb8-153">Odczytywanie z czytnika.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-153">The reader to read.</span></span></param>
        <param name="options"><span data-ttu-id="0cbb8-154">Opcje sterujące zachowaniem serializatora podczas odczytu.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-154">Options to control serializer behavior during reading.</span></span></param>
        <summary><span data-ttu-id="0cbb8-155">Odczytuje jedną wartość JSON (łącznie z obiektami lub tablicami) z podanego czytnika do wystąpienia typu określonego przez parametr typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-155">Reads one JSON value (including objects or arrays) from the provided reader into an instance of the type specified by a generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="0cbb8-156"><typeparamref name="TValue" /> Reprezentacja wartości JSON.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-156">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="0cbb8-157"><xref:System.Text.Json.Utf8JsonReader.TokenType> Jeśli <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> właściwość jest lub<xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>,czytnik będzie zaawansowany przez jedno wywołanie do określenia początku wartości. <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> `reader`</span><span class="sxs-lookup"><span data-stu-id="0cbb8-157">If the <xref:System.Text.Json.Utf8JsonReader.TokenType> property of `reader` is <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> or <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, the reader will be advanced by one call to <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> to determine the start of the value.</span></span>
               
<span data-ttu-id="0cbb8-158">Po zakończeniu tej metody, `reader` zostanie ona umieszczona w końcowym tokenie w wartości JSON.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-158">Upon completion of this method, `reader` will be positioned at the final token in the JSON value.</span></span> <span data-ttu-id="0cbb8-159">Jeśli wystąpi wyjątek, czytnik zostanie zresetowany do stanu, w którym był on wywoływany podczas wywoływania metody.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-159">If an exception is thrown, the reader is reset to the state it was in when the method was called.</span></span>
               
<span data-ttu-id="0cbb8-160">Ta metoda wykonuje kopię danych, na której działa czytelnik, dlatego nie istnieje wymóg wywołujący, aby zachować integralność danych poza przywróceniem tej metody.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-160">This method makes a copy of the data the reader acted on, so there is no caller requirement to maintain data integrity beyond the return of this method.</span></span>
               
<span data-ttu-id="0cbb8-161">Służy do tworzenia wystąpienia pierwszeństwa <xref:System.Text.Json.JsonSerializerOptions> w <xref:System.Text.Json.Utf8JsonReader> przypadku, gdy powodują konflikt. <xref:System.Text.Json.JsonReaderOptions></span><span class="sxs-lookup"><span data-stu-id="0cbb8-161">The <xref:System.Text.Json.JsonReaderOptions> used to create the instance of the <xref:System.Text.Json.Utf8JsonReader> take precedence over the <xref:System.Text.Json.JsonSerializerOptions> when they conflict.</span></span> <span data-ttu-id="0cbb8-162">W związku <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType>z <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>tym, <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType> , i są używane podczas odczytywania.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-162">Hence, <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType>, <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>, and <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType> are used while reading.</span></span>
               
          ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="0cbb8-163">KOD JSON jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-163">The JSON is invalid.</span></span>
          
<span data-ttu-id="0cbb8-164">—lub—</span><span class="sxs-lookup"><span data-stu-id="0cbb8-164">-or-</span></span>

<span data-ttu-id="0cbb8-165"><typeparamref name="TValue" />nie jest zgodny z formatem JSON.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-165"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="0cbb8-166">—lub—</span><span class="sxs-lookup"><span data-stu-id="0cbb8-166">-or-</span></span>

<span data-ttu-id="0cbb8-167">W strumieniu znajdują się pozostałe dane.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-167">There is remaining data in the stream.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0cbb8-168"><paramref name="reader" />używa nieobsługiwanych opcji.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-168"><paramref name="reader" /> uses unsupported options.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeserializeAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;object&gt; DeserializeAsync (System.IO.Stream utf8Json, Type returnType, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;object&gt; DeserializeAsync(class System.IO.Stream utf8Json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.DeserializeAsync(System.IO.Stream,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member DeserializeAsync : System.IO.Stream * Type * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;obj&gt;" Usage="System.Text.Json.JsonSerializer.DeserializeAsync (utf8Json, returnType, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="0cbb8-169">Dane JSON do analizy.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-169">The JSON data to parse.</span></span></param>
        <param name="returnType"><span data-ttu-id="0cbb8-170">Typ obiektu do przekonwertowania i zwrócenia.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-170">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="0cbb8-171">Opcje sterujące zachowaniem podczas odczytu.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-171">Options to control the behavior during reading.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="0cbb8-172">Token anulowania, który może służyć do anulowania operacji odczytu.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-172">A cancellation token that may be used to cancel the read operation.</span></span></param>
        <summary><span data-ttu-id="0cbb8-173">Asynchronicznie odczytuje zakodowany tekst UTF-8 reprezentujący pojedynczą wartość JSON do wystąpienia określonego typu.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-173">Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a specified type.</span></span> <span data-ttu-id="0cbb8-174">Strumień zostanie odczytany do ukończenia.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-174">The stream will be read to completion.</span></span></summary>
        <returns><span data-ttu-id="0cbb8-175"><paramref name="returnType" /> Reprezentacja wartości JSON.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-175">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0cbb8-176"><paramref name="utf8Json" />lub <paramref name="returnType" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-176"><paramref name="utf8Json" /> or <paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="0cbb8-177">KOD JSON jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-177">The JSON is invalid.</span></span>
          
<span data-ttu-id="0cbb8-178">—lub—</span><span class="sxs-lookup"><span data-stu-id="0cbb8-178">-or-</span></span>

<span data-ttu-id="0cbb8-179"><typeparamref name="TValue" />nie jest zgodny z formatem JSON.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-179"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="0cbb8-180">—lub—</span><span class="sxs-lookup"><span data-stu-id="0cbb8-180">-or-</span></span>

<span data-ttu-id="0cbb8-181">W strumieniu znajdują się pozostałe dane.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-181">There is remaining data in the stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeserializeAsync&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TValue&gt; DeserializeAsync&lt;TValue&gt; (System.IO.Stream utf8Json, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TValue&gt; DeserializeAsync&lt;TValue&gt;(class System.IO.Stream utf8Json, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.DeserializeAsync``1(System.IO.Stream,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member DeserializeAsync : System.IO.Stream * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Value&gt;" Usage="System.Text.Json.JsonSerializer.DeserializeAsync (utf8Json, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="0cbb8-182">Typ docelowy wartości JSON.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-182">The target type of the JSON value.</span></span></typeparam>
        <param name="utf8Json"><span data-ttu-id="0cbb8-183">Dane JSON do analizy.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-183">The JSON data to parse.</span></span></param>
        <param name="options"><span data-ttu-id="0cbb8-184">Opcje sterujące zachowaniem podczas odczytu.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-184">Options to control the behavior during reading.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="0cbb8-185">Token, który może służyć do anulowania operacji odczytu.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-185">A token that may be used to cancel the read operation.</span></span></param>
        <summary><span data-ttu-id="0cbb8-186">Asynchronicznie odczytuje zakodowany tekst UTF-8 reprezentujący pojedynczą wartość JSON do wystąpienia typu określonego przez parametr typu ogólnego.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-186">Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a type specified by a generic type parameter.</span></span> <span data-ttu-id="0cbb8-187">Strumień zostanie odczytany do ukończenia.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-187">The stream will be read to completion.</span></span></summary>
        <returns><span data-ttu-id="0cbb8-188"><typeparamref name="TValue" /> Reprezentacja wartości JSON.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-188">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="0cbb8-189">KOD JSON jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-189">The JSON is invalid.</span></span>
          
<span data-ttu-id="0cbb8-190">—lub—</span><span class="sxs-lookup"><span data-stu-id="0cbb8-190">-or-</span></span>

<span data-ttu-id="0cbb8-191"><typeparamref name="TValue" />nie jest zgodny z formatem JSON.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-191"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="0cbb8-192">—lub—</span><span class="sxs-lookup"><span data-stu-id="0cbb8-192">-or-</span></span>

<span data-ttu-id="0cbb8-193">W strumieniu znajdują się pozostałe dane.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-193">There is remaining data in the stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public static string Serialize (object value, Type type, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Serialize(object value, class System.Type type, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Serialize (value As Object, inputType As Type, Optional options As JsonSerializerOptions = null) As String" />
      <MemberSignature Language="F#" Value="static member Serialize : obj * Type * System.Text.Json.JsonSerializerOptions -&gt; string" Usage="System.Text.Json.JsonSerializer.Serialize (value, type, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="0cbb8-194">Wartość do konwersji.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-194">The value to convert.</span></span></param>
        <param name="type">To be added.</param>
        <param name="options"><span data-ttu-id="0cbb8-195">Opcje sterujące zachowaniem konwersji.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-195">Options to control the conversion behavior.</span></span></param>
        <summary><span data-ttu-id="0cbb8-196">Konwertuje wartość określonego typu na <see cref="T:System.String" />.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-196">Converts the value of a specified type into a <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="0cbb8-197">Ciąg reprezentujący wartość.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-197">The string representation of the value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="0cbb8-198">Korzystanie z <xref:System.String> programu jest niezgodne z kodowaniem UTF-8, ponieważ implementacja wewnętrznie używa kodowania UTF-8.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-198">Using a <xref:System.String> is not as efficient as using UTF-8 encoding since the implementation internally uses UTF-8.</span></span> <span data-ttu-id="0cbb8-199">Zobacz również <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> i <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-199">See also <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> and <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public static void Serialize (System.Text.Json.Utf8JsonWriter writer, object value, Type type, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Serialize(class System.Text.Json.Utf8JsonWriter writer, object value, class System.Type type, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize(System.Text.Json.Utf8JsonWriter,System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Serialize (writer As Utf8JsonWriter, value As Object, inputType As Type, Optional options As JsonSerializerOptions = null)" />
      <MemberSignature Language="F#" Value="static member Serialize : System.Text.Json.Utf8JsonWriter * obj * Type * System.Text.Json.JsonSerializerOptions -&gt; unit" Usage="System.Text.Json.JsonSerializer.Serialize (writer, value, type, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="0cbb8-200">Składnik zapisywania JSON.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-200">The JSON writer.</span></span></param>
        <param name="value"><span data-ttu-id="0cbb8-201">Wartość do przekonwertowania i zapisu.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-201">The value to convert and write.</span></span></param>
        <param name="type">To be added.</param>
        <param name="options"><span data-ttu-id="0cbb8-202">Opcje sterujące zachowaniem serializacji.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-202">Options to control serialization behavior.</span></span></param>
        <summary><span data-ttu-id="0cbb8-203">Zapisuje jedną wartość JSON (łącznie z obiektami lub tablicami) określonego typu dla podanego składnika zapisywania.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-203">Writes one JSON value (including objects or arrays) of a specified type to the provided writer.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static string Serialize&lt;TValue&gt; (TValue value, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Serialize&lt;TValue&gt;(!!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize``1(``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Serialize(Of TValue) (value As TValue, Optional options As JsonSerializerOptions = null) As String" />
      <MemberSignature Language="F#" Value="static member Serialize : 'Value * System.Text.Json.JsonSerializerOptions -&gt; string" Usage="System.Text.Json.JsonSerializer.Serialize (value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="0cbb8-204">Typ wartości do serializacji.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-204">The type of the value to serialize.</span></span></typeparam>
        <param name="value"><span data-ttu-id="0cbb8-205">Wartość do konwersji.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-205">The value to convert.</span></span></param>
        <param name="options"><span data-ttu-id="0cbb8-206">Opcje sterujące zachowaniem serializacji.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-206">Options to control serialization behavior.</span></span></param>
        <summary><span data-ttu-id="0cbb8-207">Konwertuje wartość typu określonego przez parametr typu generycznego na <see cref="T:System.String" />.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-207">Converts the value of a type specified by a generic type parameter into a <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="0cbb8-208">Ciąg reprezentujący wartość.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-208">A string representation of the value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="0cbb8-209">Korzystanie z <xref:System.String> programu jest niezgodne z kodowaniem UTF-8, ponieważ implementacja wewnętrznie używa kodowania UTF-8.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-209">Using a <xref:System.String> is not as efficient as using UTF-8 encoding since the implementation internally uses UTF-8.</span></span> <span data-ttu-id="0cbb8-210">Zobacz również <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> i <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-210">See also <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> and <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static void Serialize&lt;TValue&gt; (System.Text.Json.Utf8JsonWriter writer, TValue value, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Serialize&lt;TValue&gt;(class System.Text.Json.Utf8JsonWriter writer, !!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize``1(System.Text.Json.Utf8JsonWriter,``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Serialize(Of TValue) (writer As Utf8JsonWriter, value As TValue, Optional options As JsonSerializerOptions = null)" />
      <MemberSignature Language="F#" Value="static member Serialize : System.Text.Json.Utf8JsonWriter * 'Value * System.Text.Json.JsonSerializerOptions -&gt; unit" Usage="System.Text.Json.JsonSerializer.Serialize (writer, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" />
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="0cbb8-211">Typ wartości do serializacji.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-211">The type of the value to serialize.</span></span></typeparam>
        <param name="writer"><span data-ttu-id="0cbb8-212">Składnik zapisywania JSON.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-212">A JSON writer.</span></span></param>
        <param name="value"><span data-ttu-id="0cbb8-213">Wartość do przekonwertowania i zapisu.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-213">The value to convert and write.</span></span></param>
        <param name="options"><span data-ttu-id="0cbb8-214">Opcje sterujące zachowaniem serializacji.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-214">Options to control serialization behavior.</span></span></param>
        <summary><span data-ttu-id="0cbb8-215">Zapisuje jedną wartość JSON (łącznie z obiektami lub tablicami) typu określonego przez parametr typu ogólnego do podanego składnika zapisywania.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-215">Writes one JSON value (including objects or arrays) of a type specified by a generic type parameter to the provided writer.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SerializeAsync (System.IO.Stream utf8Json, object value, Type type, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SerializeAsync(class System.IO.Stream utf8Json, object value, class System.Type type, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SerializeAsync : System.IO.Stream * obj * Type * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Text.Json.JsonSerializer.SerializeAsync (utf8Json, value, type, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="0cbb8-216">Strumień UTF-8 do zapisu.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-216">The UTF-8 stream to write to.</span></span></param>
        <param name="value"><span data-ttu-id="0cbb8-217">Wartość do konwersji.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-217">The value to convert.</span></span></param>
        <param name="type">To be added.</param>
        <param name="options"><span data-ttu-id="0cbb8-218">Opcje sterujące zachowaniem serializacji.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-218">Options to control serialization behavior.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="0cbb8-219">Token, który może służyć do anulowania operacji zapisu.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-219">A token that may be used to cancel the write operation.</span></span></param>
        <summary><span data-ttu-id="0cbb8-220">Asynchronicznie konwertuje wartość określonego typu na tekst JSON zakodowany w formacie UTF-8 i zapisuje go w określonym strumieniu.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-220">Asynchronously converts the value of a specified type to UTF-8 encoded JSON text and writes it to the specified stream.</span></span></summary>
        <returns><span data-ttu-id="0cbb8-221">Zadanie, które reprezentuje asynchroniczny zapis operacji.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-221">A task that represents the asynchronous write operation.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeAsync&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SerializeAsync&lt;TValue&gt; (System.IO.Stream utf8Json, TValue value, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SerializeAsync&lt;TValue&gt;(class System.IO.Stream utf8Json, !!TValue value, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SerializeAsync : System.IO.Stream * 'Value * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Text.Json.JsonSerializer.SerializeAsync (utf8Json, value, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="0cbb8-222">Typ wartości do serializacji.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-222">The type of the value to serialize.</span></span></typeparam>
        <param name="utf8Json"><span data-ttu-id="0cbb8-223">Strumień UTF-8 do zapisu.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-223">The UTF-8 stream to write to.</span></span></param>
        <param name="value"><span data-ttu-id="0cbb8-224">Wartość do konwersji.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-224">The value to convert.</span></span></param>
        <param name="options"><span data-ttu-id="0cbb8-225">Opcje sterujące zachowaniem serializacji.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-225">Options to control serialization behavior.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="0cbb8-226">Token, który może służyć do anulowania operacji zapisu.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-226">A token that may be used to cancel the write operation.</span></span></param>
        <summary><span data-ttu-id="0cbb8-227">Asynchronicznie konwertuje wartość typu określonego przez typ ogólny parametaer na tekst JSON zakodowany w formacie UTF-8 i zapisuje go w strumieniu.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-227">Asynchronously converts a value of a type specified by a generic type parametaer to UTF-8 encoded JSON text and writes it to a stream.</span></span></summary>
        <returns><span data-ttu-id="0cbb8-228">Zadanie, które reprezentuje asynchroniczny zapis operacji.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-228">A task that represents the asynchronous write operation.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeToUtf8Bytes">
      <MemberSignature Language="C#" Value="public static byte[] SerializeToUtf8Bytes (object value, Type type, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] SerializeToUtf8Bytes(object value, class System.Type type, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SerializeToUtf8Bytes (value As Object, inputType As Type, Optional options As JsonSerializerOptions = null) As Byte()" />
      <MemberSignature Language="F#" Value="static member SerializeToUtf8Bytes : obj * Type * System.Text.Json.JsonSerializerOptions -&gt; byte[]" Usage="System.Text.Json.JsonSerializer.SerializeToUtf8Bytes (value, type, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="0cbb8-229">Wartość do konwersji.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-229">The value to convert.</span></span></param>
        <param name="type">To be added.</param>
        <param name="options"><span data-ttu-id="0cbb8-230">Opcje sterujące zachowaniem konwersji.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-230">Options to control the conversion behavior.</span></span></param>
        <summary><span data-ttu-id="0cbb8-231">Konwertuje wartość określonego typu w tablicę bajtową zakodowaną w formacie UTF8.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-231">Converts a value of the specified type into a UTF8-encoded byte array.</span></span></summary>
        <returns><span data-ttu-id="0cbb8-232">Reprezentacja wartości w formacie UTF-8.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-232">A UTF-8 representation of the value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeToUtf8Bytes&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static byte[] SerializeToUtf8Bytes&lt;TValue&gt; (TValue value, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] SerializeToUtf8Bytes&lt;TValue&gt;(!!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes``1(``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SerializeToUtf8Bytes(Of TValue) (value As TValue, Optional options As JsonSerializerOptions = null) As Byte()" />
      <MemberSignature Language="F#" Value="static member SerializeToUtf8Bytes : 'Value * System.Text.Json.JsonSerializerOptions -&gt; byte[]" Usage="System.Text.Json.JsonSerializer.SerializeToUtf8Bytes (value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="0cbb8-233">Typ wartości.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-233">The type of the value.</span></span></typeparam>
        <param name="value"><span data-ttu-id="0cbb8-234">Wartość do konwersji.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-234">The value to convert.</span></span></param>
        <param name="options"><span data-ttu-id="0cbb8-235">Opcje sterujące zachowaniem konwersji.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-235">Options to control the conversion behavior.</span></span></param>
        <summary><span data-ttu-id="0cbb8-236">Konwertuje wartość typu określonego przez parametr typu ogólnego do tablicy bajtowej zakodowanej w formacie UTF8.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-236">Converts the value of a type specifed by a generic type parameter into a UTF8-encoded byte array.</span></span></summary>
        <returns><span data-ttu-id="0cbb8-237">Reprezentacja wartości w formacie UTF-8.</span><span class="sxs-lookup"><span data-stu-id="0cbb8-237">A UTF-8 representation of the value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
