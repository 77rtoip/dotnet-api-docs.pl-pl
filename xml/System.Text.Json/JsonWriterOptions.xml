<Type Name="JsonWriterOptions" FullName="System.Text.Json.JsonWriterOptions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2a42cef2526fc677211341806ce1c177bc4ca2b4" /><Meta Name="ms.sourcegitcommit" Value="cb4d218ffd5a459a5f921fe1d945c682d1e09aca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/16/2019" /><Meta Name="ms.locfileid" Value="69540591" /></Metadata><TypeSignature Language="C#" Value="public struct JsonWriterOptions" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit JsonWriterOptions extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonWriterOptions" />
  <TypeSignature Language="VB.NET" Value="Public Structure JsonWriterOptions" />
  <TypeSignature Language="C++ CLI" Value="public value class JsonWriterOptions" />
  <TypeSignature Language="F#" Value="type JsonWriterOptions = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="01f72-101">Zezwala użytkownikowi na definiowanie zachowania niestandardowego podczas pisania JSON przy użyciu <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span><span class="sxs-lookup"><span data-stu-id="01f72-101">Allows the user to define custom behavior when writing JSON using the <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="01f72-102">Domyślnie kod JSON jest zapisywana bez wcięcia lub dodatkowego odstępu.</span><span class="sxs-lookup"><span data-stu-id="01f72-102">By default, the JSON is written without any indentation or extra white space.</span></span> <span data-ttu-id="01f72-103">Ponadto zgłasza <xref:System.Text.Json.Utf8JsonWriter> wyjątek, jeśli użytkownik próbuje napisać strukturalnie nieprawidłowy kod JSON.</span><span class="sxs-lookup"><span data-stu-id="01f72-103">Also, <xref:System.Text.Json.Utf8JsonWriter> throws an exception if the user attempts to write structurally invalid JSON.</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Encoder">
      <MemberSignature Language="C#" Value="public System.Text.Encodings.Web.JavaScriptEncoder Encoder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encodings.Web.JavaScriptEncoder Encoder" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonWriterOptions.Encoder" />
      <MemberSignature Language="VB.NET" Value="Public Property Encoder As JavaScriptEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encodings::Web::JavaScriptEncoder ^ Encoder { System::Text::Encodings::Web::JavaScriptEncoder ^ get(); void set(System::Text::Encodings::Web::JavaScriptEncoder ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Encoder : System.Text.Encodings.Web.JavaScriptEncoder with get, set" Usage="System.Text.Json.JsonWriterOptions.Encoder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encodings.Web.JavaScriptEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="01f72-104">Pobiera lub ustawia koder, który będzie używany podczas ucieczki ciągów lub <see langword="null" /> do użycia domyślnego kodera.</span><span class="sxs-lookup"><span data-stu-id="01f72-104">Gets or sets the encoder to use when escaping strings, or <see langword="null" /> to use the default encoder.</span></span></summary>
        <value><span data-ttu-id="01f72-105">Kodowanie znaków JavaScript.</span><span class="sxs-lookup"><span data-stu-id="01f72-105">The JavaScript character encoding.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Indented">
      <MemberSignature Language="C#" Value="public bool Indented { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Indented" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonWriterOptions.Indented" />
      <MemberSignature Language="VB.NET" Value="Public Property Indented As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Indented { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Indented : bool with get, set" Usage="System.Text.Json.JsonWriterOptions.Indented" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="01f72-106">Pobiera lub ustawia wartość wskazującą, czy <see cref="T:System.Text.Json.Utf8JsonWriter" /> powinien formatować dane wyjściowe JSON, które obejmują wcięcia zagnieżdżonych tokenów JSON, dodawanie nowych wierszy i Dodawanie odstępów między nazwami właściwości i wartościami.</span><span class="sxs-lookup"><span data-stu-id="01f72-106">Gets or sets a value that indicates whether the <see cref="T:System.Text.Json.Utf8JsonWriter" /> should format the JSON output, which includes indenting nested JSON tokens, adding new lines, and adding white space between property names and values.</span></span></summary>
        <value><span data-ttu-id="01f72-107"><see langword="true" />Aby sformatować dane wyjściowe JSON; <see langword="false" /> do zapisu bez dodatkowego odstępu.</span><span class="sxs-lookup"><span data-stu-id="01f72-107"><see langword="true" /> to format the JSON output; <see langword="false" /> to write without any extra white space.</span></span> <span data-ttu-id="01f72-108">Wartość domyślna to <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="01f72-108">The default is <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipValidation">
      <MemberSignature Language="C#" Value="public bool SkipValidation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SkipValidation" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonWriterOptions.SkipValidation" />
      <MemberSignature Language="VB.NET" Value="Public Property SkipValidation As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SkipValidation { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SkipValidation : bool with get, set" Usage="System.Text.Json.JsonWriterOptions.SkipValidation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="01f72-109">Pobiera lub ustawia wartość wskazującą, czy <see cref="T:System.Text.Json.Utf8JsonWriter" /> należy pominąć walidację strukturalną i zezwolić użytkownikowi na zapisanie nieprawidłowego pliku JSON.</span><span class="sxs-lookup"><span data-stu-id="01f72-109">Gets or sets a value that indicates whether the <see cref="T:System.Text.Json.Utf8JsonWriter" /> should skip structural validation and allow the user to write invalid JSON.</span></span></summary>
        <value><span data-ttu-id="01f72-110"><see langword="true" />Aby pominąć sprawdzanie poprawności strukturalnej i zezwolić na nieprawidłowy kod JSON; <see langword="false" /> Aby<see cref="T:System.InvalidOperationException" /> zgłosić przy każdej próbie zapisu nieprawidłowy kod JSON.</span><span class="sxs-lookup"><span data-stu-id="01f72-110"><see langword="true" /> to skip structural validation and allow invalid JSON; <see langword="false" /> to throw an <see cref="T:System.InvalidOperationException" /> on any attempt to write invalid JSON.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="01f72-111">Jeśli wpisany kod JSON jest prawidłowy, a następnie pomijanie walidacji (przez ustawienie tej właściwości na `true`) może zwiększyć wydajność.</span><span class="sxs-lookup"><span data-stu-id="01f72-111">If the JSON being written is known to be correct, then skipping validation (by setting this property to `true`) could improve performance.</span></span>
<span data-ttu-id="01f72-112">Przykład nieprawidłowego kodu JSON, w którym zostanie zgłoszony składnik `SkipValidation` zapisywania (gdy `false`jest ustawiony na), ma miejsce podczas pisania wartości w obiekcie JSON bez nazwy właściwości.</span><span class="sxs-lookup"><span data-stu-id="01f72-112">An example of invalid JSON where the writer will throw (when `SkipValidation` is set to `false`) is when you write a value within a JSON object without a property name.</span></span> 

 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
