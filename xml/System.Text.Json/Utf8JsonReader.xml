<Type Name="Utf8JsonReader" FullName="System.Text.Json.Utf8JsonReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6a451999ec7e4d837eb22652c047781c5decd940" /><Meta Name="ms.sourcegitcommit" Value="cb4d218ffd5a459a5f921fe1d945c682d1e09aca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/16/2019" /><Meta Name="ms.locfileid" Value="69540539" /></Metadata><TypeSignature Language="C#" Value="public struct Utf8JsonReader" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Utf8JsonReader extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Utf8JsonReader" />
  <TypeSignature Language="VB.NET" Value="Public Structure Utf8JsonReader" />
  <TypeSignature Language="C++ CLI" Value="public value class Utf8JsonReader" />
  <TypeSignature Language="F#" Value="type Utf8JsonReader = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Zapewnia interfejs API o wysokiej wydajności tylko do odczytu w przypadku tekstu JSON zakodowanego w formacie UTF-8.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

`Utf8JsonReader`przetwarza tekst sekwencyjnie bez buforowania i domyślnie jest zgodny ze [specyfikacją RFC JSON](https://tools.ietf.org/html/rfc8259).

Gdy `Utf8JsonReader` napotka nieprawidłowy kod JSON, <xref:System.Text.Json.JsonException> generuje on podstawowe informacje o błędzie, np. numer wiersza i położenie bajtów w wierszu.

Ponieważ ten typ jest strukturą ref, nie obsługuje bezpośrednio asynchronicznej. Jednak zapewnia obsługę współużytkowania wątkowości, aby odczytywać niekompletne dane i kontynuować odczytywanie po przedstawieniu większej ilości danych.

Aby można było ustawić maksymalną głębokość podczas odczytywania lub zezwalania na pomijanie komentarzy, Utwórz wystąpienie <xref:System.Text.Json.JsonReaderState> i przekaż je do czytnika.

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonReader (System.Buffers.ReadOnlySequence&lt;byte&gt; jsonData, System.Text.Json.JsonReaderOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Buffers.ReadOnlySequence`1&lt;unsigned int8&gt; jsonData, valuetype System.Text.Json.JsonReaderOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (jsonData As ReadOnlySequence(Of Byte), Optional options As JsonReaderOptions = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonReader : System.Buffers.ReadOnlySequence&lt;byte&gt; * System.Text.Json.JsonReaderOptions -&gt; System.Text.Json.Utf8JsonReader" Usage="new System.Text.Json.Utf8JsonReader (jsonData, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="jsonData" Type="System.Buffers.ReadOnlySequence&lt;System.Byte&gt;" />
        <Parameter Name="options" Type="System.Text.Json.JsonReaderOptions" />
      </Parameters>
      <Docs>
        <param name="jsonData">Zakodowany tekst JSON w formacie UTF-8.</param>
        <param name="options">Obiekt, który definiuje dostosowane zachowanie <see cref="T:System.Text.Json.Utf8JsonReader" /> , które różni się od specyfikacji RFC JSON (na przykład jak obsługiwać komentarze lub maksymalną głębokość dozwoloną podczas czytania). Domyślnie <see cref="T:System.Text.Json.Utf8JsonReader" /> następujące komentarze w formacie JSON RFC są prawidłowe, a maksymalna głębokość to 64.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Text.Json.Utf8JsonReader" /> struktury, które przetwarza sekwencję tekstu zakodowanego w formacie UTF-8 przy użyciu określonych opcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Ponieważ ten typ jest strukturą ref, jest to typ tylko stosu, a wszystkie ograniczenia dotyczące struktur ref mają zastosowanie.

W tym konstruktorze przyjęto założenie, że cały `jsonData`ładunek JSON jest zawarty w <xref:System.Text.Json.Utf8JsonReader.IsFinalBlock?displayProperty=nameWithType> `true`. jest to  = odpowiednik.
              
          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonReader (ReadOnlySpan&lt;byte&gt; jsonData, System.Text.Json.JsonReaderOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; jsonData, valuetype System.Text.Json.JsonReaderOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (jsonData As ReadOnlySpan(Of Byte), Optional options As JsonReaderOptions = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonReader : ReadOnlySpan&lt;byte&gt; * System.Text.Json.JsonReaderOptions -&gt; System.Text.Json.Utf8JsonReader" Usage="new System.Text.Json.Utf8JsonReader (jsonData, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="jsonData" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="options" Type="System.Text.Json.JsonReaderOptions" />
      </Parameters>
      <Docs>
        <param name="jsonData">Zakodowany tekst JSON w formacie UTF-8.</param>
        <param name="options">Obiekt, który definiuje dostosowane zachowanie <see cref="T:System.Text.Json.Utf8JsonReader" /> , które różni się od specyfikacji RFC JSON (na przykład jak obsługiwać komentarze lub maksymalną głębokość dozwoloną podczas czytania). Domyślnie <see cref="T:System.Text.Json.Utf8JsonReader" /> następujące komentarze w formacie JSON RFC są prawidłowe, a maksymalna głębokość to 64.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Text.Json.Utf8JsonReader" /> struktury, które przetwarza w trybie tylko do odczytu tekst zakodowany UTF-8 przy użyciu określonych opcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Ponieważ ten typ jest strukturą ref, jest to typ tylko stosu, a wszystkie ograniczenia dotyczące struktur ref mają zastosowanie.

W tym konstruktorze przyjęto założenie, że cały `jsonData`ładunek JSON jest zawarty w <xref:System.Text.Json.Utf8JsonReader.IsFinalBlock?displayProperty=nameWithType> `true`. jest to  = odpowiednik.
              
          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonReader (System.Buffers.ReadOnlySequence&lt;byte&gt; jsonData, bool isFinalBlock, System.Text.Json.JsonReaderState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Buffers.ReadOnlySequence`1&lt;unsigned int8&gt; jsonData, bool isFinalBlock, valuetype System.Text.Json.JsonReaderState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (jsonData As ReadOnlySequence(Of Byte), isFinalBlock As Boolean, state As JsonReaderState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Utf8JsonReader(System::Buffers::ReadOnlySequence&lt;System::Byte&gt; jsonData, bool isFinalBlock, System::Text::Json::JsonReaderState state);" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonReader : System.Buffers.ReadOnlySequence&lt;byte&gt; * bool * System.Text.Json.JsonReaderState -&gt; System.Text.Json.Utf8JsonReader" Usage="new System.Text.Json.Utf8JsonReader (jsonData, isFinalBlock, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="jsonData" Type="System.Buffers.ReadOnlySequence&lt;System.Byte&gt;" />
        <Parameter Name="isFinalBlock" Type="System.Boolean" />
        <Parameter Name="state" Type="System.Text.Json.JsonReaderState" />
      </Parameters>
      <Docs>
        <param name="jsonData">Zakodowany tekst JSON w formacie UTF-8.</param>
        <param name="isFinalBlock"><see langword="true" />Jeśli sekwencja wejściowa zawiera wszystkie dane do przetworzenia; <see langword="false" /> tylko zakres wejściowy zawiera dane częściowe zawierające więcej danych do wykonania.</param>
        <param name="state">Obiekt, który zawiera stan czytnika. Jeśli jest to pierwsze wywołanie konstruktora, należy przekazać stan domyślny. W przeciwnym razie Przechwyć stan z poprzedniego wystąpienia <see cref="T:System.Text.Json.Utf8JsonReader" /> i przekaż go ponownie.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Text.Json.Utf8JsonReader" /> struktury, które przetwarza sekwencję tylko do odczytu zakodowanego tekstu UTF-8 i wskazuje, czy dane wejściowe zawierają cały tekst do przetworzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Ponieważ ten typ jest strukturą ref, jest to typ tylko stosu, a wszystkie ograniczenia dotyczące struktur ref mają zastosowanie.
Jest to powód, dla którego Konstruktor akceptuje <xref:System.Text.Json.JsonReaderState>.

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonReader (ReadOnlySpan&lt;byte&gt; jsonData, bool isFinalBlock, System.Text.Json.JsonReaderState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; jsonData, bool isFinalBlock, valuetype System.Text.Json.JsonReaderState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (jsonData As ReadOnlySpan(Of Byte), isFinalBlock As Boolean, state As JsonReaderState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Utf8JsonReader(ReadOnlySpan&lt;System::Byte&gt; jsonData, bool isFinalBlock, System::Text::Json::JsonReaderState state);" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonReader : ReadOnlySpan&lt;byte&gt; * bool * System.Text.Json.JsonReaderState -&gt; System.Text.Json.Utf8JsonReader" Usage="new System.Text.Json.Utf8JsonReader (jsonData, isFinalBlock, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="jsonData" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="isFinalBlock" Type="System.Boolean" />
        <Parameter Name="state" Type="System.Text.Json.JsonReaderState" />
      </Parameters>
      <Docs>
        <param name="jsonData">Zakodowany tekst JSON w formacie UTF-8.</param>
        <param name="isFinalBlock"><see langword="true" />Jeśli sekwencja wejściowa zawiera wszystkie dane do przetworzenia; <see langword="false" /> Jeśli zakres wejściowy zawiera dane częściowe zawierające więcej danych do wykonania.</param>
        <param name="state">Obiekt, który zawiera stan czytnika. Jeśli jest to pierwsze wywołanie konstruktora, powinno ono odzwierciedlać stan domyślny; w przeciwnym razie należy przechwycić stan z poprzedniego wystąpienia <see cref="T:System.Text.Json.Utf8JsonReader" /> wystąpienia i przekazać go ponownie.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Text.Json.Utf8JsonReader" /> struktury, które przetwarza zakres danych szyfrowanych tylko do odczytu w formacie UTF-8 i wskazuje, czy dane wejściowe zawierają cały tekst do przetworzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Ponieważ ten typ jest strukturą ref, jest to typ tylko stosu, a wszystkie ograniczenia dotyczące struktur ref mają zastosowanie.
Jest to powód, dla którego Konstruktor akceptuje <xref:System.Text.Json.JsonReaderState>.

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BytesConsumed">
      <MemberSignature Language="C#" Value="public long BytesConsumed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesConsumed" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.BytesConsumed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesConsumed As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesConsumed { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesConsumed : int64" Usage="System.Text.Json.Utf8JsonReader.BytesConsumed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera łączną liczbę bajtów zużytych do tej pory dla tego wystąpienia <see cref="T:System.Text.Json.Utf8JsonReader" />.</summary>
        <value>Całkowita liczba bajtów zużytych do tej pory.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentDepth">
      <MemberSignature Language="C#" Value="public int CurrentDepth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentDepth" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.CurrentDepth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentDepth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDepth : int" Usage="System.Text.Json.Utf8JsonReader.CurrentDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera głębokość bieżącego tokenu.</summary>
        <value>Głębokość bieżącego tokenu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

`CurrentDepth` Właściwość śledzi głębokość rekursywną zagnieżdżonych obiektów lub tablic w ramach przetworzonej do tej pory tekstu JSON.

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentState">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonReaderState CurrentState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonReaderState CurrentState" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.CurrentState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentState As JsonReaderState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonReaderState CurrentState { System::Text::Json::JsonReaderState get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentState : System.Text.Json.JsonReaderState" Usage="System.Text.Json.Utf8JsonReader.CurrentState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonReaderState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera bieżący <see cref="T:System.Text.Json.Utf8JsonReader" /> stan do przekazania <see cref="T:System.Text.Json.Utf8JsonReader" /> do konstruktora o większej ilości danych.</summary>
        <value>Bieżący stan czytnika.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

W przeciwieństwie <xref:System.Text.Json.Utf8JsonReader>do, który jest strukturą ref, stan może być przechodzący przez granice asynchroniczne/oczekujące. Ten typ jest wymagany w celu zapewnienia obsługi odczytywania więcej danych asynchronicznie przed kontynuowaniem nowego wystąpienia <xref:System.Text.Json.Utf8JsonReader>.

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBoolean">
      <MemberSignature Language="C#" Value="public bool GetBoolean ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetBoolean() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetBoolean" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBoolean () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetBoolean();" />
      <MemberSignature Language="F#" Value="member this.GetBoolean : unit -&gt; bool" Usage="utf8JsonReader.GetBoolean " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Odczytuje następną wartość tokenu JSON ze źródła jako <see cref="T:System.Boolean" />.</summary>
        <returns><see langword="true" /><see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> jeśli jest ;<see cref="F:System.Text.Json.JsonTokenType.True" /> <see langword="false" /> Jeśli jest.<see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> <see cref="F:System.Text.Json.JsonTokenType.False" /></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Wartość tokenu JSON nie jest wartością logiczną ( <see cref="F:System.Text.Json.JsonTokenType.True" /> czyli lub <see cref="F:System.Text.Json.JsonTokenType.False" />).</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetByte">
      <MemberSignature Language="C#" Value="public byte GetByte ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8 GetByte() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetByte" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByte () As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Byte GetByte();" />
      <MemberSignature Language="F#" Value="member this.GetByte : unit -&gt; byte" Usage="utf8JsonReader.GetByte " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Analizuje bieżącą wartość tokenu JSON ze źródła jako <see cref="T:System.Byte" />.</summary>
        <returns>Wartość zakodowanego tokenu UTF-8.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Wartość tokenu JSON nie <see cref="F:System.Text.Json.JsonTokenType.Number" />jest.</exception>
        <exception cref="T:System.FormatException">Format liczbowy wartości tokenu JSON jest niepoprawny (na przykład zawiera wartość ułamkową lub jest zapisywana w notacji wykładniczej).
          
—lub—

Wartość tokenu JSON reprezentuje liczbę mniejszą <see cref="F:System.Byte.MinValue" /> lub większą od. <see cref="F:System.Byte.MaxValue" /></exception>
      </Docs>
    </Member>
    <Member MemberName="GetBytesFromBase64">
      <MemberSignature Language="C#" Value="public byte[] GetBytesFromBase64 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] GetBytesFromBase64() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetBytesFromBase64" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBytesFromBase64 () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ GetBytesFromBase64();" />
      <MemberSignature Language="F#" Value="member this.GetBytesFromBase64 : unit -&gt; byte[]" Usage="utf8JsonReader.GetBytesFromBase64 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Analizuje bieżącą wartość tokenu JSON ze źródła i Dekoduje ciąg JSON zakodowany w formacie base64 jako tablicę bajtów.</summary>
        <returns>Tablica bajtów reprezentująca bieżącą wartość tokenu JSON.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Typ tokenu JSON nie <see cref="F:System.Text.Json.JsonTokenType.String" />jest.</exception>
        <exception cref="T:System.FormatException">Wartość nie jest zakodowana jako tekst Base64, dlatego nie można zdekodować jej do bajtów.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetComment">
      <MemberSignature Language="C#" Value="public string GetComment ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetComment() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetComment" />
      <MemberSignature Language="VB.NET" Value="Public Function GetComment () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetComment();" />
      <MemberSignature Language="F#" Value="member this.GetComment : unit -&gt; string" Usage="utf8JsonReader.GetComment " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Analizuje bieżącą wartość tokenu JSON ze źródła jako komentarz, transkodowanego jako <see cref="T:System.String" />.</summary>
        <returns>Komentarz reprezentujący bieżącą wartość tokenu JSON.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Token JSON nie jest komentarzem.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDateTime">
      <MemberSignature Language="C#" Value="public DateTime GetDateTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime GetDateTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetDateTime" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime GetDateTime();" />
      <MemberSignature Language="F#" Value="member this.GetDateTime : unit -&gt; DateTime" Usage="utf8JsonReader.GetDateTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Odczytuje następną wartość tokenu JSON ze źródła i analizuje ją w <see cref="T:System.DateTime" />.</summary>
        <returns>Data i godzina, jeśli cała wartość tokenu zakodowanego w formacie UTF-8 może zostać pomyślnie przeanalizowana.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Wartość tokenu JSON nie jest <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
        <exception cref="T:System.FormatException">Wartość tokenu JSON ma nieobsługiwany format. Obsługiwane są tylko podzbiór formatów ISO 8601.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeOffset">
      <MemberSignature Language="C#" Value="public DateTimeOffset GetDateTimeOffset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset GetDateTimeOffset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetDateTimeOffset" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeOffset () As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset GetDateTimeOffset();" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeOffset : unit -&gt; DateTimeOffset" Usage="utf8JsonReader.GetDateTimeOffset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Odczytuje następną wartość tokenu JSON ze źródła i analizuje ją w <see cref="T:System.DateTimeOffset" />.</summary>
        <returns>Wartość daty i godziny, jeśli cała wartość tokenu zakodowanego w formacie UTF-8 może zostać pomyślnie przeanalizowana.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Wartość tokenu JSON nie jest <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
        <exception cref="T:System.FormatException">Wartość tokenu JSON ma nieobsługiwany format. Obsługiwane są tylko podzbiór formatów ISO 8601.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDecimal">
      <MemberSignature Language="C#" Value="public decimal GetDecimal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Decimal GetDecimal() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetDecimal" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDecimal () As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Decimal GetDecimal();" />
      <MemberSignature Language="F#" Value="member this.GetDecimal : unit -&gt; decimal" Usage="utf8JsonReader.GetDecimal " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Odczytuje następną wartość tokenu JSON ze źródła i analizuje ją w <see cref="T:System.Decimal" />.</summary>
        <returns>Wartość tokenu zakodowanego UTF-8 przeanalizowana na <see cref="T:System.Decimal" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Metoda zgłasza wyjątek, jeśli cała nie można wartość tokenu zakodowana w formacie UTF-8 zostanie przeanalizowana <xref:System.Decimal> na wartość. `GetDecimal`

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wartość tokenu JSON nie jest <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
        <exception cref="T:System.FormatException">Wartość tokenu JSON reprezentuje liczbę mniejszą <see cref="F:System.Decimal.MinValue" /> lub większą od. <see cref="F:System.Decimal.MaxValue" /></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetDouble">
      <MemberSignature Language="C#" Value="public double GetDouble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 GetDouble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetDouble" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDouble () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GetDouble();" />
      <MemberSignature Language="F#" Value="member this.GetDouble : unit -&gt; double" Usage="utf8JsonReader.GetDouble " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Odczytuje następną wartość tokenu JSON ze źródła i analizuje ją w <see cref="T:System.Double" />.</summary>
        <returns>Wartość tokenu zakodowanego UTF-8 przeanalizowana na <see cref="T:System.Double" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Metoda zgłasza wyjątek, jeśli cała nie można wartość tokenu zakodowana w formacie UTF-8 zostanie przeanalizowana <xref:System.Double> na wartość. `GetDouble`

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wartość tokenu JSON nie jest <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
        <exception cref="T:System.FormatException">Wartość tokenu JSON reprezentuje liczbę mniejszą <see cref="F:System.Double.MinValue" /> lub większą od. <see cref="F:System.Double.MaxValue" /></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetGuid">
      <MemberSignature Language="C#" Value="public Guid GetGuid ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Guid GetGuid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetGuid" />
      <MemberSignature Language="VB.NET" Value="Public Function GetGuid () As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Guid GetGuid();" />
      <MemberSignature Language="F#" Value="member this.GetGuid : unit -&gt; Guid" Usage="utf8JsonReader.GetGuid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Odczytuje następną wartość tokenu JSON ze źródła i analizuje ją w <see cref="T:System.Guid" />.</summary>
        <returns>Wartość identyfikatora GUID, jeśli cała wartość tokenu zakodowanego w formacie UTF-8 może zostać pomyślnie przeanalizowana.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Wartość tokenu JSON nie jest <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
        <exception cref="T:System.FormatException">Wartość tokenu JSON ma nieobsługiwany format dla identyfikatora GUID.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetInt16">
      <MemberSignature Language="C#" Value="public short GetInt16 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int16 GetInt16() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetInt16" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInt16 () As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; short GetInt16();" />
      <MemberSignature Language="F#" Value="member this.GetInt16 : unit -&gt; int16" Usage="utf8JsonReader.GetInt16 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Analizuje bieżącą wartość tokenu JSON ze źródła jako <see cref="T:System.Int16" />.</summary>
        <returns>Wartość tokenu zakodowanego UTF-8 przeanalizowana na <see cref="T:System.Int16" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Wartość tokenu JSON nie <see cref="F:System.Text.Json.JsonTokenType.Number" />jest.</exception>
        <exception cref="T:System.FormatException">Format liczbowy wartości tokenu JSON jest niepoprawny (na przykład zawiera wartość ułamkową lub jest zapisywana w notacji wykładniczej).
          
—lub—

Wartość tokenu JSON reprezentuje liczbę mniejszą <see cref="F:System.Int16.MinValue" /> lub większą od. <see cref="F:System.Int16.MaxValue" /></exception>
      </Docs>
    </Member>
    <Member MemberName="GetInt32">
      <MemberSignature Language="C#" Value="public int GetInt32 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetInt32() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetInt32" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInt32 () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetInt32();" />
      <MemberSignature Language="F#" Value="member this.GetInt32 : unit -&gt; int" Usage="utf8JsonReader.GetInt32 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Odczytuje następną wartość tokenu JSON ze źródła i analizuje ją do <see cref="T:System.Int32" />.</summary>
        <returns>Wartość tokenu zakodowanego UTF-8 przeanalizowana na <see cref="T:System.Int32" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Metoda zgłasza wyjątek, jeśli cała nie można wartość tokenu zakodowana w formacie UTF-8 zostanie przeanalizowana <xref:System.Int32> na wartość. `GetInt32`

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wartość tokenu JSON nie jest <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
        <exception cref="T:System.FormatException">Wartość tokenu JSON jest w nieprawidłowym formacie liczbowym. Na przykład zawiera wartość dziesiętną lub jest zapisywana w notacji wykładniczej.
            
—lub—

Wartość tokenu JSON reprezentuje liczbę mniejszą <see cref="F:System.Int32.MinValue" /> lub większą od. <see cref="F:System.Int32.MaxValue" /></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetInt64">
      <MemberSignature Language="C#" Value="public long GetInt64 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 GetInt64() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetInt64" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInt64 () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long GetInt64();" />
      <MemberSignature Language="F#" Value="member this.GetInt64 : unit -&gt; int64" Usage="utf8JsonReader.GetInt64 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Odczytuje następną wartość tokenu JSON ze źródła i analizuje ją do <see cref="T:System.Int64" />.</summary>
        <returns>Wartość tokenu zakodowanego UTF-8 przeanalizowana na <see cref="T:System.Int64" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Metoda zgłasza wyjątek, jeśli cała nie można wartość tokenu zakodowana w formacie UTF-8 zostanie przeanalizowana <xref:System.Int64> na wartość. `GetInt64`

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wartość tokenu JSON nie jest <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
        <exception cref="T:System.FormatException">Wartość tokenu JSON jest w nieprawidłowym formacie liczbowym. Na przykład zawiera wartość dziesiętną lub jest zapisywana w notacji wykładniczej.
            
—lub—

Wartość tokenu JSON reprezentuje liczbę mniejszą <see cref="F:System.Int64.MinValue" /> lub większą od. <see cref="F:System.Int64.MaxValue" /></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetSByte">
      <MemberSignature Language="C#" Value="public sbyte GetSByte ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int8 GetSByte() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetSByte" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSByte () As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::SByte GetSByte();" />
      <MemberSignature Language="F#" Value="member this.GetSByte : unit -&gt; sbyte" Usage="utf8JsonReader.GetSByte " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Analizuje bieżącą wartość tokenu JSON ze źródła jako <see cref="T:System.SByte" />.</summary>
        <returns>Wartość tokenu zakodowanego UTF-8 przeanalizowana na <see cref="T:System.SByte" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Wartość tokenu JSON nie <see cref="F:System.Text.Json.JsonTokenType.Number" />jest.</exception>
        <exception cref="T:System.FormatException">Format liczbowy wartości tokenu JSON jest niepoprawny (na przykład zawiera wartość ułamkową lub jest zapisywana w notacji wykładniczej).
          
—lub—

Wartość tokenu JSON reprezentuje liczbę mniejszą <see cref="F:System.SByte.MinValue" /> lub większą od. <see cref="F:System.SByte.MaxValue" /></exception>
      </Docs>
    </Member>
    <Member MemberName="GetSingle">
      <MemberSignature Language="C#" Value="public float GetSingle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float32 GetSingle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetSingle" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSingle () As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; float GetSingle();" />
      <MemberSignature Language="F#" Value="member this.GetSingle : unit -&gt; single" Usage="utf8JsonReader.GetSingle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Odczytuje następną wartość tokenu JSON ze źródła i analizuje ją w <see cref="T:System.Single" />.</summary>
        <returns>Wartość tokenu zakodowanego UTF-8 przeanalizowana na <see cref="T:System.Single" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Metoda zgłasza wyjątek, jeśli cała nie można wartość tokenu zakodowana w formacie UTF-8 zostanie przeanalizowana <xref:System.Single> na wartość. `GetSingle`

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wartość tokenu JSON nie jest <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
        <exception cref="T:System.FormatException">Wartość tokenu JSON reprezentuje liczbę mniejszą <see cref="F:System.Single.MinValue" /> lub większą od. <see cref="F:System.Single.MaxValue" /></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public string GetString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetString" />
      <MemberSignature Language="VB.NET" Value="Public Function GetString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetString();" />
      <MemberSignature Language="F#" Value="member this.GetString : unit -&gt; string" Usage="utf8JsonReader.GetString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Odczytuje następną wartość tokenu JSON ze źródła, w niezmienionym kodzie i poddanej kodowi jako ciąg.</summary>
        <returns>Wartość tokenu przeanalizowana na ciąg lub <see langword="null" /> Jeśli <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> jest <see cref="F:System.Text.Json.JsonTokenType.Null" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Wartość tokenu JSON nie jest ciągiem (to nie <see cref="F:System.Text.Json.JsonTokenType.String" /> jest ani lub <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).

—lub—

Ciąg JSON zawiera nieprawidłowe bajty UTF-8 lub nieprawidłowe surogaty UTF-16.</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetUInt16">
      <MemberSignature Language="C#" Value="public ushort GetUInt16 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int16 GetUInt16() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetUInt16" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUInt16 () As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::UInt16 GetUInt16();" />
      <MemberSignature Language="F#" Value="member this.GetUInt16 : unit -&gt; uint16" Usage="utf8JsonReader.GetUInt16 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Analizuje bieżącą wartość tokenu JSON ze źródła jako <see cref="T:System.UInt16" />.</summary>
        <returns>Wartość tokenu zakodowanego UTF-8 przeanalizowana na <see cref="T:System.UInt16" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Wartość tokenu JSON nie <see cref="F:System.Text.Json.JsonTokenType.Number" />jest.</exception>
        <exception cref="T:System.FormatException">Format liczbowy wartości tokenu JSON jest niepoprawny (na przykład zawiera wartość ułamkową lub jest zapisywana w notacji wykładniczej).
          
—lub—

Wartość tokenu JSON reprezentuje liczbę mniejszą <see cref="F:System.UInt16.MinValue" /> lub większą od. <see cref="F:System.UInt16.MaxValue" /></exception>
      </Docs>
    </Member>
    <Member MemberName="GetUInt32">
      <MemberSignature Language="C#" Value="public uint GetUInt32 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int32 GetUInt32() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetUInt32" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUInt32 () As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::UInt32 GetUInt32();" />
      <MemberSignature Language="F#" Value="member this.GetUInt32 : unit -&gt; uint32" Usage="utf8JsonReader.GetUInt32 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Odczytuje następną wartość tokenu JSON ze źródła i analizuje ją w <see cref="T:System.UInt32" />.</summary>
        <returns>Wartość tokenu zakodowanego UTF-8 przeanalizowana na <see cref="T:System.UInt32" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Wartość tokenu JSON nie jest <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
        <exception cref="T:System.FormatException">Wartość tokenu JSON jest w nieprawidłowym formacie liczbowym. Na przykład zawiera wartość dziesiętną lub jest zapisywana w notacji wykładniczej.

—lub—

Wartość tokenu JSON reprezentuje liczbę mniejszą <see cref="F:System.UInt32.MinValue" /> lub większą od. <see cref="F:System.UInt32.MaxValue" /></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetUInt64">
      <MemberSignature Language="C#" Value="public ulong GetUInt64 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int64 GetUInt64() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetUInt64" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUInt64 () As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::UInt64 GetUInt64();" />
      <MemberSignature Language="F#" Value="member this.GetUInt64 : unit -&gt; uint64" Usage="utf8JsonReader.GetUInt64 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Odczytuje następną wartość tokenu JSON ze źródła i analizuje ją w <see cref="T:System.UInt64" />.</summary>
        <returns>Wartość tokenu zakodowanego UTF-8 przeanalizowana na <see cref="T:System.UInt64" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Wartość tokenu JSON nie jest <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
        <exception cref="T:System.FormatException">Wartość tokenu JSON jest w nieprawidłowym formacie liczbowym. Na przykład zawiera wartość dziesiętną lub jest zapisywana w notacji wykładniczej.
            
—lub—

Wartość tokenu JSON reprezentuje liczbę mniejszą <see cref="F:System.UInt64.MinValue" /> lub większą od. <see cref="F:System.UInt64.MaxValue" /></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="HasValueSequence">
      <MemberSignature Language="C#" Value="public bool HasValueSequence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasValueSequence" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.HasValueSequence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasValueSequence As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasValueSequence { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasValueSequence : bool" Usage="System.Text.Json.Utf8JsonReader.HasValueSequence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą Właściwość <c>Value</c> , która ma zostać użyta do pobrania wartości tokenu.</summary>
        <value><see langword="true" />Jeśli <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> należy użyć, aby uzyskać wartość tokenu; <see langword="false" /> Jeśli<see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> zamiast tego należy użyć.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Jeśli `HasValueSequence` jest `false` ,<xref:System.Text.Json.Utf8JsonReader.ValueSequence> jest puste. W związku z tym należy odczytać wartość tokenu <xref:System.Text.Json.Utf8JsonReader.ValueSpan> przy użyciu właściwości.

W przypadku danych wejściowych w `ReadOnlySpan<byte>`, to zawsze zwraca `false`. W przypadku danych wejściowych w `ReadOnlySequence<byte>`ramach, to zwraca `true` tylko wtedy, gdy wartość tokenu mieści się w przedziale więcej niż jeden segment i dlatego nie może być reprezentowana jako zakres.

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFinalBlock">
      <MemberSignature Language="C#" Value="public bool IsFinalBlock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFinalBlock" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.IsFinalBlock" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFinalBlock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFinalBlock { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFinalBlock : bool" Usage="System.Text.Json.Utf8JsonReader.IsFinalBlock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera tryb tego wystąpienia, <see cref="T:System.Text.Json.Utf8JsonReader" /> który wskazuje, czy zostały dostarczone wszystkie dane JSON, czy też jest więcej danych.</summary>
        <value><see langword="true" />Jeśli czytelnik został skonstruowany z zakresem wejściowym lub sekwencją zawierającą całe dane JSON do przetworzenia; <see langword="false" /> jeśli czytelnik został skonstruowany z zakresem wejściowym lub sekwencją, która może zawierać częściowe dane JSON zawierające więcej danych do wykonania.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public SequencePosition Position { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.SequencePosition Position" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.Position" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Position As SequencePosition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property SequencePosition Position { SequencePosition get(); };" />
      <MemberSignature Language="F#" Value="member this.Position : SequencePosition" Usage="System.Text.Json.Utf8JsonReader.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SequencePosition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera bieżącą <see cref="T:System.SequencePosition" /> wartość w ramach dostarczonego bajtu&gt; ReadOnlySequence&lt;wejściowego UTF-8 lub <see cref="T:System.SequencePosition" /> wartość domyślną <see cref="T:System.Text.Json.Utf8JsonReader" /> , jeśli struktura została skonstruowana przy użyciu bajtu ReadOnlySpan&lt;&gt;.</summary>
        <value><see cref="T:System.SequencePosition" /> Bieżący w ramach dostarczonego bajtu <see cref="T:System.Text.Json.Utf8JsonReader" /> <see cref="T:System.SequencePosition" /> &gt; ReadOnlySequence&lt;wejściowego UTF-8 lub wartość domyślna, jeśli struktura została skonstruowana przy&lt;użyciu&gt;bajtu ReadOnlySpan.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.Read" />
      <MemberSignature Language="VB.NET" Value="Public Function Read () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Read();" />
      <MemberSignature Language="F#" Value="member this.Read : unit -&gt; bool" Usage="utf8JsonReader.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Odczytuje następny token JSON ze źródła danych wejściowych.</summary>
        <returns><see langword="true" />Jeśli token został odczytany pomyślnie; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.Json.JsonException">Napotkano nieprawidłowy token JSON zgodnie ze specyfikacją RFC JSON.
        
—lub—

Bieżąca głębokość przekracza limit cykliczny określony przez maksymalną głębokość.</exception>
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public void Skip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Skip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.Skip" />
      <MemberSignature Language="VB.NET" Value="Public Sub Skip ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Skip();" />
      <MemberSignature Language="F#" Value="member this.Skip : unit -&gt; unit" Usage="utf8JsonReader.Skip " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pomija elementy podrzędne bieżącego tokenu JSON.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Gdy <xref:System.Text.Json.Utf8JsonReader.TokenType> jest<xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType>, czytnik najpierw przenosi do wartości właściwości.

Gdy <xref:System.Text.Json.Utf8JsonReader.TokenType> (pierwotnie lub po przejściu) to <xref:System.Text.Json.JsonTokenType.StartObject?displayProperty=nameWithtype> lub <xref:System.Text.Json.JsonTokenType.StartArray?displayProperty=nameWithType>, czytnik postępuje do dopasowania <xref:System.Text.Json.JsonTokenType.EndObject?displayProperty=nameWithType> lub <xref:System.Text.Json.JsonTokenType.EndArray?displayProperty=nameWithType>.
            
Dla wszystkich innych typów tokenów czytnik nie jest przenoszony. Po następnym wywołaniu <xref:System.Text.Json.Utf8JsonReader.Read>, czytnik będzie miał następną wartość (gdy w tablicy), następną nazwę właściwości (w obiekcie) lub końcowym tokenem tablicy/obiektu.

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Czytelnik otrzymał dane częściowe z większą ilością danych, które należy wykonać (oznacza <see cref="P:System.Text.Json.Utf8JsonReader.IsFinalBlock" /> to <see langword="false" />, czy).</exception>
        <exception cref="T:System.Text.Json.JsonException">Podczas pomijania napotkano nieprawidłowy token JSON, zgodnie z dokumentem RFC JSON.

—lub—

Bieżąca głębokość przekracza limit cykliczny określony przez maksymalną głębokość.</exception>
      </Docs>
    </Member>
    <Member MemberName="TokenStartIndex">
      <MemberSignature Language="C#" Value="public long TokenStartIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 TokenStartIndex" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.TokenStartIndex" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TokenStartIndex As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long TokenStartIndex { long get(); };" />
      <MemberSignature Language="F#" Value="member this.TokenStartIndex : int64" Usage="System.Text.Json.Utf8JsonReader.TokenStartIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera indeks, który zaczyna się od ostatniego przetworzonego tokenu JSON (w ramach danego tekstu wejściowego w formacie UTF-8), pomijając wszystkie białe znaki.</summary>
        <value>Początkowy indeks ostatniego przetworzonego tokenu JSON w ramach danego tekstu wejściowego w formacie UTF-8.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

W przypadku ciągów JSON (w tym nazw właściwości) ta wartość wskazuje przed cudzysłowem początkowym.

W przypadku komentarzy ta wartość wskazuje przed pierwszym ogranicznikiem komentarza (czyli "/").

            ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenType">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonTokenType TokenType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonTokenType TokenType" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.TokenType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TokenType As JsonTokenType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonTokenType TokenType { System::Text::Json::JsonTokenType get(); };" />
      <MemberSignature Language="F#" Value="member this.TokenType : System.Text.Json.JsonTokenType" Usage="System.Text.Json.Utf8JsonReader.TokenType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonTokenType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera typ ostatniego przetworzonego tokenu JSON w zakodowanym tekście JSON w formacie UTF-8.</summary>
        <value>Typ ostatniego przetworzonego tokenu JSON.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetByte">
      <MemberSignature Language="C#" Value="public bool TryGetByte (out byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetByte([out] unsigned int8&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetByte(System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetByte (ByRef value As Byte) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetByte([Runtime::InteropServices::Out] System::Byte % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetByte :  -&gt; bool" Usage="utf8JsonReader.TryGetByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">Gdy ta metoda zwraca, zawiera przeanalizowana wartość.</param>
        <summary>Próbuje przeanalizować bieżącą wartość tokenu JSON ze źródła jako <see cref="T:System.Byte" /> a i zwraca wartość wskazującą, czy operacja zakończyła się pomyślnie.</summary>
        <returns><see langword="true" />Jeśli cała wartość tokenu zakodowanego w formacie UTF-8 może zostać pomyślnie przeanalizowana <see cref="T:System.Byte" /> na wartość; <see langword="false" />w przeciwnym razie.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Wartość tokenu JSON nie jest <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetBytesFromBase64">
      <MemberSignature Language="C#" Value="public bool TryGetBytesFromBase64 (out byte[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetBytesFromBase64([out] unsigned int8[]&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetBytesFromBase64(System.Byte[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetBytesFromBase64 (ByRef value As Byte()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetBytesFromBase64([Runtime::InteropServices::Out] cli::array &lt;System::Byte&gt; ^ % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetBytesFromBase64 :  -&gt; bool" Usage="utf8JsonReader.TryGetBytesFromBase64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">Gdy ta metoda zwraca, zawiera zdekodowaną reprezentację binarnego tekstu Base64.</param>
        <summary>Próbuje analizować bieżącą wartość tokenu JSON ze źródła i Dekoduje ciąg JSON zakodowany w formacie base64 jako tablicę bajtową i zwraca wartość wskazującą, czy operacja zakończyła się pomyślnie.</summary>
        <returns><see langword="true" />Jeśli cała wartość tokenu jest zakodowana jako prawidłowy tekst base64 i można ją pomyślnie zdekodować do bajtów; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Token JSON nie <see cref="F:System.Text.Json.JsonTokenType.String" />jest.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetDateTime">
      <MemberSignature Language="C#" Value="public bool TryGetDateTime (out DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetDateTime([out] valuetype System.DateTime&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetDateTime(System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetDateTime (ByRef value As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetDateTime([Runtime::InteropServices::Out] DateTime % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetDateTime :  -&gt; bool" Usage="utf8JsonReader.TryGetDateTime value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">Gdy ta metoda zwraca, zawiera przeanalizowana wartość.</param>
        <summary>Próbuje przeanalizować bieżącą wartość tokenu JSON ze źródła jako <see cref="T:System.DateTime" /> a i zwraca wartość wskazującą, czy operacja zakończyła się pomyślnie.</summary>
        <returns><see langword="true" />Jeśli cała wartość tokenu zakodowanego w formacie UTF-8 może zostać pomyślnie przeanalizowana <see cref="T:System.DateTime" /> na wartość; <see langword="false" />w przeciwnym razie.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Wartość tokenu JSON nie jest <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetDateTimeOffset">
      <MemberSignature Language="C#" Value="public bool TryGetDateTimeOffset (out DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetDateTimeOffset([out] valuetype System.DateTimeOffset&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetDateTimeOffset(System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetDateTimeOffset (ByRef value As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetDateTimeOffset([Runtime::InteropServices::Out] DateTimeOffset % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetDateTimeOffset :  -&gt; bool" Usage="utf8JsonReader.TryGetDateTimeOffset value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">Gdy ta metoda zwraca, zawiera przeanalizowana wartość.</param>
        <summary>Próbuje przeanalizować bieżącą wartość tokenu JSON ze źródła jako <see cref="T:System.DateTimeOffset" /> a i zwraca wartość wskazującą, czy operacja zakończyła się pomyślnie.</summary>
        <returns><see langword="true" />Jeśli cała wartość tokenu zakodowanego w formacie UTF-8 może zostać pomyślnie przeanalizowana <see cref="T:System.DateTimeOffset" /> na wartość; <see langword="false" />w przeciwnym razie.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Wartość tokenu JSON nie jest <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetDecimal">
      <MemberSignature Language="C#" Value="public bool TryGetDecimal (out decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetDecimal([out] valuetype System.Decimal&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetDecimal(System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetDecimal (ByRef value As Decimal) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetDecimal([Runtime::InteropServices::Out] System::Decimal % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetDecimal :  -&gt; bool" Usage="utf8JsonReader.TryGetDecimal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">Gdy ta metoda zwraca, zawiera przeanalizowana wartość.</param>
        <summary>Próbuje przeanalizować bieżącą wartość tokenu JSON ze źródła jako <see cref="T:System.Decimal" /> a i zwraca wartość wskazującą, czy operacja zakończyła się pomyślnie.</summary>
        <returns><see langword="true" />Jeśli cała wartość tokenu zakodowanego w formacie UTF-8 może zostać pomyślnie przeanalizowana <see cref="T:System.Decimal" /> na wartość; <see langword="false" />w przeciwnym razie.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Wartość tokenu JSON nie jest <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetDouble">
      <MemberSignature Language="C#" Value="public bool TryGetDouble (out double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetDouble([out] float64&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetDouble(System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetDouble (ByRef value As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetDouble([Runtime::InteropServices::Out] double % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetDouble :  -&gt; bool" Usage="utf8JsonReader.TryGetDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">Gdy ta metoda zwraca, zawiera przeanalizowana wartość.</param>
        <summary>Próbuje przeanalizować bieżącą wartość tokenu JSON ze źródła jako <see cref="T:System.Double" /> a i zwraca wartość wskazującą, czy operacja zakończyła się pomyślnie.</summary>
        <returns><see langword="true" />Jeśli cała wartość tokenu zakodowanego w formacie UTF-8 może zostać pomyślnie przeanalizowana <see cref="T:System.Double" /> na wartość; <see langword="false" />w przeciwnym razie.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Wartość tokenu JSON nie jest <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetGuid">
      <MemberSignature Language="C#" Value="public bool TryGetGuid (out Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetGuid([out] valuetype System.Guid&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetGuid(System.Guid@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetGuid (ByRef value As Guid) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetGuid([Runtime::InteropServices::Out] Guid % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetGuid :  -&gt; bool" Usage="utf8JsonReader.TryGetGuid value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Guid" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">Gdy ta metoda zwraca, zawiera przeanalizowana wartość.</param>
        <summary>Próbuje przeanalizować bieżącą wartość tokenu JSON ze źródła jako <see cref="T:System.Guid" /> a i zwraca wartość wskazującą, czy operacja zakończyła się pomyślnie.</summary>
        <returns><see langword="true" />Jeśli cała wartość tokenu zakodowanego w formacie UTF-8 może zostać pomyślnie przeanalizowana <see cref="T:System.Guid" /> na wartość; <see langword="false" />w przeciwnym razie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Ta metoda analizuje <xref:System.Guid> tylko wartości z łącznikami i bez otaczających ich Dekoracj. 

         ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wartość tokenu JSON nie jest <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetInt16">
      <MemberSignature Language="C#" Value="public bool TryGetInt16 (out short value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetInt16([out] int16&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetInt16(System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetInt16 (ByRef value As Short) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetInt16([Runtime::InteropServices::Out] short % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetInt16 :  -&gt; bool" Usage="utf8JsonReader.TryGetInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">Gdy ta metoda zwraca, zawiera przeanalizowana wartość.</param>
        <summary>Próbuje przeanalizować bieżącą wartość tokenu JSON ze źródła jako <see cref="T:System.Int16" /> i zwraca wartość wskazującą, czy operacja zakończyła się pomyślnie.</summary>
        <returns><see langword="true" />Jeśli cała wartość tokenu zakodowanego w formacie UTF-8 może zostać pomyślnie przeanalizowana <see cref="T:System.Int16" /> na wartość; <see langword="false" />w przeciwnym razie.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Wartość tokenu JSON nie jest <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetInt32">
      <MemberSignature Language="C#" Value="public bool TryGetInt32 (out int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetInt32([out] int32&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetInt32(System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetInt32 (ByRef value As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetInt32([Runtime::InteropServices::Out] int % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetInt32 :  -&gt; bool" Usage="utf8JsonReader.TryGetInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">Gdy ta metoda zwraca, zawiera przeanalizowana wartość.</param>
        <summary>Próbuje przeanalizować bieżącą wartość tokenu JSON ze źródła jako <see cref="T:System.Int32" /> i zwraca wartość wskazującą, czy operacja zakończyła się pomyślnie.</summary>
        <returns><see langword="true" />Jeśli cała wartość tokenu zakodowanego w formacie UTF-8 może zostać pomyślnie przeanalizowana <see cref="T:System.Int32" /> na wartość; <see langword="false" />w przeciwnym razie.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Wartość tokenu JSON nie jest <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetInt64">
      <MemberSignature Language="C#" Value="public bool TryGetInt64 (out long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetInt64([out] int64&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetInt64(System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetInt64 (ByRef value As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetInt64([Runtime::InteropServices::Out] long % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetInt64 :  -&gt; bool" Usage="utf8JsonReader.TryGetInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">Gdy ta metoda zwraca, zawiera przeanalizowana wartość.</param>
        <summary>Próbuje przeanalizować bieżącą wartość tokenu JSON ze źródła jako <see cref="T:System.Int64" /> i zwraca wartość wskazującą, czy operacja zakończyła się pomyślnie.</summary>
        <returns><see langword="true" />Jeśli cała wartość tokenu zakodowanego w formacie UTF-8 może zostać pomyślnie przeanalizowana <see cref="T:System.Int64" /> na wartość; <see langword="false" />w przeciwnym razie.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Wartość tokenu JSON nie jest <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetSByte">
      <MemberSignature Language="C#" Value="public bool TryGetSByte (out sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetSByte([out] int8&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetSByte(System.SByte@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetSByte (ByRef value As SByte) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetSByte([Runtime::InteropServices::Out] System::SByte % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetSByte :  -&gt; bool" Usage="utf8JsonReader.TryGetSByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">Gdy ta metoda zwraca, zawiera przeanalizowana wartość.</param>
        <summary>Próbuje przeanalizować bieżącą wartość tokenu JSON ze źródła jako <see cref="T:System.SByte" /> i zwraca wartość wskazującą, czy operacja zakończyła się pomyślnie.</summary>
        <returns><see langword="true" />Jeśli cała wartość tokenu zakodowanego w formacie UTF-8 może zostać pomyślnie przeanalizowana <see cref="T:System.SByte" /> na wartość; <see langword="false" />w przeciwnym razie.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Wartość tokenu JSON nie jest <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetSingle">
      <MemberSignature Language="C#" Value="public bool TryGetSingle (out float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetSingle([out] float32&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetSingle(System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetSingle (ByRef value As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetSingle([Runtime::InteropServices::Out] float % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetSingle :  -&gt; bool" Usage="utf8JsonReader.TryGetSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">Gdy ta metoda zwraca, zawiera przeanalizowana wartość.</param>
        <summary>Próbuje przeanalizować bieżącą wartość tokenu JSON ze źródła jako <see cref="T:System.Single" /> a i zwraca wartość wskazującą, czy operacja zakończyła się pomyślnie.</summary>
        <returns><see langword="true" />Jeśli cała wartość tokenu zakodowanego w formacie UTF-8 może zostać pomyślnie przeanalizowana <see cref="T:System.Single" /> na wartość; <see langword="false" />w przeciwnym razie.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Wartość tokenu JSON nie jest <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetUInt16">
      <MemberSignature Language="C#" Value="public bool TryGetUInt16 (out ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetUInt16([out] unsigned int16&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetUInt16(System.UInt16@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetUInt16 (ByRef value As UShort) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetUInt16([Runtime::InteropServices::Out] System::UInt16 % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetUInt16 :  -&gt; bool" Usage="utf8JsonReader.TryGetUInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">Gdy ta metoda zwraca, zawiera przeanalizowana wartość.</param>
        <summary>Próbuje przeanalizować bieżącą wartość tokenu JSON ze źródła jako <see cref="T:System.UInt16" /> a i zwraca wartość wskazującą, czy operacja zakończyła się pomyślnie.</summary>
        <returns><see langword="true" />Jeśli cała wartość tokenu zakodowanego w formacie UTF-8 może zostać pomyślnie przeanalizowana <see cref="T:System.UInt16" /> na wartość; <see langword="false" />w przeciwnym razie.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Wartość tokenu JSON nie jest <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetUInt32">
      <MemberSignature Language="C#" Value="public bool TryGetUInt32 (out uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetUInt32([out] unsigned int32&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetUInt32(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetUInt32 (ByRef value As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetUInt32([Runtime::InteropServices::Out] System::UInt32 % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetUInt32 :  -&gt; bool" Usage="utf8JsonReader.TryGetUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">Gdy ta metoda zwraca, zawiera przeanalizowana wartość.</param>
        <summary>Próbuje przeanalizować bieżącą wartość tokenu JSON ze źródła jako <see cref="T:System.UInt32" /> a i zwraca wartość wskazującą, czy operacja zakończyła się pomyślnie.</summary>
        <returns><see langword="true" />Jeśli cała wartość tokenu zakodowanego w formacie UTF-8 może zostać pomyślnie przeanalizowana <see cref="T:System.UInt32" /> na wartość; <see langword="false" />w przeciwnym razie.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Wartość tokenu JSON nie jest <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetUInt64">
      <MemberSignature Language="C#" Value="public bool TryGetUInt64 (out ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetUInt64([out] unsigned int64&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetUInt64(System.UInt64@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetUInt64 (ByRef value As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetUInt64([Runtime::InteropServices::Out] System::UInt64 % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetUInt64 :  -&gt; bool" Usage="utf8JsonReader.TryGetUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">Gdy ta metoda zwraca, zawiera przeanalizowana wartość.</param>
        <summary>Próbuje przeanalizować bieżącą wartość tokenu JSON ze źródła jako <see cref="T:System.UInt64" /> a i zwraca wartość wskazującą, czy operacja zakończyła się pomyślnie.</summary>
        <returns><see langword="true" />Jeśli cała wartość tokenu zakodowanego w formacie UTF-8 może zostać pomyślnie przeanalizowana <see cref="T:System.UInt64" /> na wartość; <see langword="false" />w przeciwnym razie.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Wartość tokenu JSON nie jest <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TrySkip">
      <MemberSignature Language="C#" Value="public bool TrySkip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TrySkip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TrySkip" />
      <MemberSignature Language="VB.NET" Value="Public Function TrySkip () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TrySkip();" />
      <MemberSignature Language="F#" Value="member this.TrySkip : unit -&gt; bool" Usage="utf8JsonReader.TrySkip " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Próbuje pominąć elementy podrzędne bieżącego tokenu JSON.</summary>
        <returns><see langword="true" />Jeśli wystąpiły wystarczające dane dla elementów podrzędnych, które mają zostać pominięte pomyślnie; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Jeśli czytnik nie ma wystarczającej ilości danych, aby całkowicie pominąć elementy podrzędne bieżącego tokenu, zostanie zresetowany do stanu, w którym był on przed wywołaniem metody.
              
Gdy <xref:System.Text.Json.Utf8JsonReader.TokenType> jest<xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType>, czytnik najpierw przenosi do wartości właściwości.

Gdy <xref:System.Text.Json.Utf8JsonReader.TokenType> (pierwotnie lub po przejściu) to <xref:System.Text.Json.JsonTokenType.StartObject?displayProperty=nameWithType> lub <xref:System.Text.Json.JsonTokenType.StartArray?displayProperty=nameWithType>, czytnik postępuje do dopasowania <xref:System.Text.Json.JsonTokenType.EndObject?displayProperty=nameWithType> lub <xref:System.Text.Json.JsonTokenType.EndArray?displayProperty=nameWithType>.
            
Dla wszystkich innych typów tokenów czytnik nie jest przenoszony. Po następnym wywołaniu <xref:System.Text.Json.Utf8JsonReader.Read>, czytnik będzie miał następną wartość (gdy w tablicy), następną nazwę właściwości (w obiekcie) lub końcowym tokenem tablicy/obiektu.

          ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException">Podczas pomijania napotkano nieprawidłowy token JSON, zgodnie z dokumentem RFC JSON.
          
oraz

Bieżąca głębokość przekracza limit cykliczny określony przez maksymalną głębokość.</exception>
      </Docs>
    </Member>
    <Member MemberName="ValueSequence">
      <MemberSignature Language="C#" Value="public System.Buffers.ReadOnlySequence&lt;byte&gt; ValueSequence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Buffers.ReadOnlySequence`1&lt;unsigned int8&gt; ValueSequence" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.ValueSequence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValueSequence As ReadOnlySequence(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Buffers::ReadOnlySequence&lt;System::Byte&gt; ValueSequence { System::Buffers::ReadOnlySequence&lt;System::Byte&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.ValueSequence : System.Buffers.ReadOnlySequence&lt;byte&gt;" Usage="System.Text.Json.Utf8JsonReader.ValueSequence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Buffers.ReadOnlySequence&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość ostatniego przetworzonego tokenu jako <see cref="T:System.ReadOnlySpan`1" /> wycinka wejściowego ładunku. Jeśli kod JSON znajduje się w obrębie <see cref="T:System.Buffers.ReadOnlySequence`1" /> i wycinek reprezentujący wartość tokenu mieści się w pojedynczym segmencie, a <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> następnie zawiera wartość z wycinka, ponieważ może być reprezentowana jako zakres. W przeciwnym razie zawiera wartość tokenu. <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /></summary>
        <value>Sekwencja bajtów tylko do odczytu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks


Jeśli <xref:System.Text.Json.Utf8JsonReader.HasValueSequence> jest `false` ,`ValueSequence` jest puste. W związku z tym `ValueSequence` tylko <xref:System.Text.Json.Utf8JsonReader.HasValueSequence> dostęp `true`, jeśli jest.
W przeciwnym razie do wartości tokenu należy uzyskać dostęp <xref:System.Text.Json.Utf8JsonReader.ValueSpan>z.

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueSpan">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;byte&gt; ValueSpan { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; ValueSpan" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.ValueSpan" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValueSpan As ReadOnlySpan(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property ReadOnlySpan&lt;System::Byte&gt; ValueSpan { ReadOnlySpan&lt;System::Byte&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.ValueSpan : ReadOnlySpan&lt;byte&gt;" Usage="System.Text.Json.Utf8JsonReader.ValueSpan" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość ostatniego przetworzonego tokenu jako wycinek ReadOnlySpan&lt;bajtowego&gt; ładunku wejściowego. Jeśli kod JSON jest dostarczany w ReadOnlySequence&lt;bajcie&gt; , a plasterek reprezentujący wartość tokenu mieści się w pojedynczym segmencie, a następnie <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> zawiera wartość z wycinka, ponieważ może być reprezentowana jako zakres. W przeciwnym razie zawiera wartość tokenu. <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /></summary>
        <value>Zakres tylko do odczytu bajtów.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Jeśli <xref:System.Text.Json.Utf8JsonReader.HasValueSequence> jest `true` ,<xref:System.Text.Json.Utf8JsonReader.ValueSpan> jest puste. W związku z tym `ValueSpan` tylko <xref:System.Text.Json.Utf8JsonReader.HasValueSequence> dostęp `false`, jeśli jest.
W przeciwnym razie do wartości tokenu należy uzyskać dostęp <xref:System.Text.Json.Utf8JsonReader.ValueSequence>z.

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ValueTextEquals">
      <Docs>
        <summary>Porównuje określony tekst do niezmienionej wartości tokenu JSON w źródle i zwraca wartość wskazującą, czy są one zgodne.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

Jeśli tekst wyszukiwania jest nieprawidłowym tekstem UTF-8, metoda zwraca `false` , ponieważ nie można było wykonać nieprawidłowego kodowania UTF-8 w ładunku JSON.

Porównanie wartości tokenu JSON w źródle i tekstu odnośnika jest wykonywane przez pierwsze anulowanie ucieczki wartości JSON w źródle, jeśli jest to wymagane. Tekst wyszukiwania jest dopasowywany w postaci, w jakiej jest, bez żadnych modyfikacji.

         ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ValueTextEquals">
      <MemberSignature Language="C#" Value="public bool ValueTextEquals (ReadOnlySpan&lt;byte&gt; utf8Text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ValueTextEquals(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Function ValueTextEquals (utf8Text As ReadOnlySpan(Of Byte)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ValueTextEquals(ReadOnlySpan&lt;System::Byte&gt; utf8Text);" />
      <MemberSignature Language="F#" Value="member this.ValueTextEquals : ReadOnlySpan&lt;byte&gt; -&gt; bool" Usage="utf8JsonReader.ValueTextEquals utf8Text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Text" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8Text">Tekst zakodowany w formacie UTF-8 do porównania.</param>
        <summary>Porównuje tekst zakodowany w formacie UTF-8 w zakresie bajtów tylko do odczytu do niezmienionej wartości tokenu JSON w źródle i zwraca wartość wskazującą, czy są one zgodne.</summary>
        <returns><see langword="true" />Jeśli wartość tokenu JSON w źródle jest zgodna z zakodowanym tekstem wyszukiwania w formacie UTF-8; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Jeśli tekst odnośnika jest nieprawidłowym tekstem UTF-8, Metoda `false` zwraca, ponieważ nie można było mieć nieprawidłowego UTF-8 w ładunku JSON.
              
Porównanie wartości tokenu JSON w źródle i tekstu odnośnika jest wykonywane przez pierwsze anulowanie ucieczki wartości JSON w źródle, jeśli jest to wymagane. Tekst wyszukiwania jest dopasowywany w postaci, w jakiej jest, bez żadnych modyfikacji.
              
          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Token JSON, który nie jest ciągiem (oznacza to, że nie <see cref="F:System.Text.Json.JsonTokenType.String" /> jest lub <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</exception>
      </Docs>
    </Member>
    <Member MemberName="ValueTextEquals">
      <MemberSignature Language="C#" Value="public bool ValueTextEquals (ReadOnlySpan&lt;char&gt; text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ValueTextEquals(valuetype System.ReadOnlySpan`1&lt;char&gt; text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Function ValueTextEquals (text As ReadOnlySpan(Of Char)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ValueTextEquals(ReadOnlySpan&lt;char&gt; text);" />
      <MemberSignature Language="F#" Value="member this.ValueTextEquals : ReadOnlySpan&lt;char&gt; -&gt; bool" Usage="utf8JsonReader.ValueTextEquals text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="text">Tekst zakodowany w formacie UTF-8 do porównania.</param>
        <summary>Porównuje tekst zakodowany w formacie UTF-8 w znakach tylko do odczytu do niezmienionej wartości tokenu JSON w źródle i zwraca wartość wskazującą, czy są one zgodne.</summary>
        <returns><see langword="true" />Jeśli wartość tokenu JSON w źródle jest zgodna z zakodowanym tekstem wyszukiwania w formacie UTF-8; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

W przypadku nieprawidłowego lub niekompletnego tekstu w formacie UTF-16 (czyli niesparowanych surogatów) Metoda zwraca `false` , ponieważ nie można było wykonać nieprawidłowego kodowania UTF-16 w ramach ładunku JSON.
              
Porównanie wartości tokenu JSON w źródle i tekstu odnośnika jest wykonywane przez pierwsze anulowanie ucieczki wartości JSON w źródle, jeśli jest to wymagane. Tekst wyszukiwania jest dopasowywany w postaci, w jakiej jest, bez żadnych modyfikacji.
              
          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Token JSON, który nie jest ciągiem (oznacza to, że nie <see cref="F:System.Text.Json.JsonTokenType.String" /> jest lub <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</exception>
      </Docs>
    </Member>
    <Member MemberName="ValueTextEquals">
      <MemberSignature Language="C#" Value="public bool ValueTextEquals (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ValueTextEquals(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ValueTextEquals (text As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ValueTextEquals(System::String ^ text);" />
      <MemberSignature Language="F#" Value="member this.ValueTextEquals : string -&gt; bool" Usage="utf8JsonReader.ValueTextEquals text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Tekst do porównania.</param>
        <summary>Porównuje tekst w zakresie znaku z niezmienionym tokenem JSON w źródle i zwraca wartość wskazującą, czy są one zgodne.</summary>
        <returns><see langword="true" />Jeśli wartość tokenu JSON w źródle pasuje do tekstu odnośnika; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Jeśli tekst odnośnika jest nieprawidłowym tekstem UTF-8, Metoda `false` zwraca, ponieważ nie można było mieć nieprawidłowego UTF-8 w ładunku JSON.
              
Porównanie wartości tokenu JSON w źródle i tekstu odnośnika jest wykonywane przez pierwsze anulowanie ucieczki wartości JSON w źródle, jeśli jest to wymagane. Tekst wyszukiwania jest dopasowywany w postaci, w jakiej jest, bez żadnych modyfikacji.
              
          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Token JSON, który nie jest ciągiem (oznacza to, że nie <see cref="F:System.Text.Json.JsonTokenType.String" /> jest lub <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</exception>
      </Docs>
    </Member>
  </Members>
</Type>
