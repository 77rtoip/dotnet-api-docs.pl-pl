<Type Name="JsonSerializerOptions" FullName="System.Text.Json.JsonSerializerOptions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ac41a34e52b7c6979515f2f5bf9ac981682f8519" /><Meta Name="ms.sourcegitcommit" Value="cb4d218ffd5a459a5f921fe1d945c682d1e09aca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/16/2019" /><Meta Name="ms.locfileid" Value="69540727" /></Metadata><TypeSignature Language="C#" Value="public sealed class JsonSerializerOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit JsonSerializerOptions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonSerializerOptions" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class JsonSerializerOptions" />
  <TypeSignature Language="C++ CLI" Value="public ref class JsonSerializerOptions sealed" />
  <TypeSignature Language="F#" Value="type JsonSerializerOptions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="fe9ab-101">Zawiera opcje, które mają być <see cref="T:System.Text.Json.JsonSerializer" />używane z programem.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-101">Provides options to be used with <see cref="T:System.Text.Json.JsonSerializer" />.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JsonSerializerOptions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializerOptions.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; JsonSerializerOptions();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fe9ab-102">Inicjuje nowe wystąpienie klasy <see cref="T:System.Text.Json.JsonSerializerOptions" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-102">Initializes a new instance of the <see cref="T:System.Text.Json.JsonSerializerOptions" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowTrailingCommas">
      <MemberSignature Language="C#" Value="public bool AllowTrailingCommas { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowTrailingCommas" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.AllowTrailingCommas" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowTrailingCommas As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowTrailingCommas { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowTrailingCommas : bool with get, set" Usage="System.Text.Json.JsonSerializerOptions.AllowTrailingCommas" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fe9ab-103">Pobiera lub ustawia wartość wskazującą, czy dodatkowy przecinek na końcu listy wartości JSON w obiekcie lub tablicy jest dozwolony (i ignorowany) w ramach deserializacji ładunku JSON.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-103">Get or sets a value that indicates whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being deserialized.</span></span></summary>
        <value><span data-ttu-id="fe9ab-104"><see langword="true" />Jeśli dodatkowy przecinek na końcu listy wartości JSON w obiekcie lub tablicy jest dozwolony (i ignorowany); <see langword="false" /> w przeciwnym razie.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-104"><see langword="true" /> if an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored); <see langword="false" /> otherwise.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="fe9ab-105">Domyślnie `AllowTrailingCommas` jest ustawiona na `false`, a < wyjątek cref = "T:System.Text.JSON.JsonException > jest generowany, gdy zostanie wykryty końcowy przecinek.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-105">By default, `AllowTrailingCommas` is set to `false`, and a <exception cref="T:System.Text.Json.JsonException> is thrown if a trailing comma is encountered.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fe9ab-106">Ta właściwość została ustawiona po wykonaniu serializacji lub deserializacji.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-106">This property was set after serialization or deserialization has occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Converters">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Text.Json.Serialization.JsonConverter&gt; Converters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Text.Json.Serialization.JsonConverter&gt; Converters" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.Converters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Converters As IList(Of JsonConverter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::Text::Json::Serialization::JsonConverter ^&gt; ^ Converters { System::Collections::Generic::IList&lt;System::Text::Json::Serialization::JsonConverter ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Converters : System.Collections.Generic.IList&lt;System.Text.Json.Serialization.JsonConverter&gt;" Usage="System.Text.Json.JsonSerializerOptions.Converters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Text.Json.Serialization.JsonConverter&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fe9ab-107">Pobiera listę zarejestrowanych konwerterów zdefiniowanych przez użytkownika.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-107">Gets the list of user-defined converters that were registered.</span></span></summary>
        <value><span data-ttu-id="fe9ab-108">Lista konwerterów niestandardowych.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-108">The list of custom converters.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="fe9ab-109">Po serializacji lub deserializacji występuje lista nie może być modyfikowana.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-109">Once serialization or deserialization occurs, the list cannot be modified.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultBufferSize">
      <MemberSignature Language="C#" Value="public int DefaultBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DefaultBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.DefaultBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DefaultBufferSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultBufferSize : int with get, set" Usage="System.Text.Json.JsonSerializerOptions.DefaultBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fe9ab-110">Pobiera lub ustawia domyślny rozmiar buforu (w bajtach), który będzie używany podczas tworzenia buforów tymczasowych.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-110">Gets or sets the default buffer size, in bytes, to use when creating temporary buffers.</span></span></summary>
        <value><span data-ttu-id="fe9ab-111">Domyślny rozmiar buforu w bajtach.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-111">The default buffer size in bytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="fe9ab-112">Domyślny rozmiar buforu (w bajtach) to 16384.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-112">The default buffer size, in bytes, is 16384.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fe9ab-113">Rozmiar buforu jest mniejszy niż 1.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-113">The buffer size is less than 1.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fe9ab-114">Ta właściwość została ustawiona po wykonaniu serializacji lub deserializacji.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-114">This property was set after serialization or deserialization has occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DictionaryKeyPolicy">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonNamingPolicy DictionaryKeyPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Json.JsonNamingPolicy DictionaryKeyPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.DictionaryKeyPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Property DictionaryKeyPolicy As JsonNamingPolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonNamingPolicy ^ DictionaryKeyPolicy { System::Text::Json::JsonNamingPolicy ^ get(); void set(System::Text::Json::JsonNamingPolicy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DictionaryKeyPolicy : System.Text.Json.JsonNamingPolicy with get, set" Usage="System.Text.Json.JsonSerializerOptions.DictionaryKeyPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonNamingPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fe9ab-115">Pobiera lub ustawia zasady służące do konwertowania <see cref="T:System.Collections.IDictionary" /> nazwy klucza na inny format, na przykład notacji CamelCase-wielkość liter.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-115">Gets or sets the policy used to convert a <see cref="T:System.Collections.IDictionary" /> key's name to another format, such as camel-casing.</span></span></summary>
        <value><span data-ttu-id="fe9ab-116">Zasady służące do konwertowania <see cref="T:System.Collections.IDictionary" /> nazwy klucza na inny format.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-116">The policy used to convert a <see cref="T:System.Collections.IDictionary" /> key's name to another format.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="fe9ab-117">Tę właściwość można ustawić <xref:System.Text.Json.JsonNamingPolicy.CamelCase?displayProperty=nameWithType> , aby określić zasady notacji CamelCase.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-117">This property can be set to <xref:System.Text.Json.JsonNamingPolicy.CamelCase?displayProperty=nameWithType> to specify a camel-casing policy.</span></span>

<span data-ttu-id="fe9ab-118">Tę właściwość można ustawić <xref:System.Text.Json.JsonNamingPolicy.CamelCase> , aby określić zasady notacji CamelCase.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-118">This property can be set to <xref:System.Text.Json.JsonNamingPolicy.CamelCase> to specify a camel-casing policy.</span></span>

<span data-ttu-id="fe9ab-119">Nie jest używana podczas deserializacji.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-119">It is not used when deserializing.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Encoder">
      <MemberSignature Language="C#" Value="public System.Text.Encodings.Web.JavaScriptEncoder Encoder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encodings.Web.JavaScriptEncoder Encoder" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.Encoder" />
      <MemberSignature Language="VB.NET" Value="Public Property Encoder As JavaScriptEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encodings::Web::JavaScriptEncoder ^ Encoder { System::Text::Encodings::Web::JavaScriptEncoder ^ get(); void set(System::Text::Encodings::Web::JavaScriptEncoder ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Encoder : System.Text.Encodings.Web.JavaScriptEncoder with get, set" Usage="System.Text.Json.JsonSerializerOptions.Encoder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encodings.Web.JavaScriptEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fe9ab-120">Pobiera lub ustawia koder, który będzie używany podczas ucieczki ciągów lub <see langword="null" /> do użycia domyślnego kodera.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-120">Gets or sets the encoder to use when escaping strings, or <see langword="null" /> to use the default encoder.</span></span></summary>
        <value><span data-ttu-id="fe9ab-121">Kodowanie znaków JavaScript.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-121">The JavaScript character encoding.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConverter">
      <MemberSignature Language="C#" Value="public System.Text.Json.Serialization.JsonConverter GetConverter (Type typeToConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.Json.Serialization.JsonConverter GetConverter(class System.Type typeToConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializerOptions.GetConverter(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConverter (typeToConvert As Type) As JsonConverter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::Json::Serialization::JsonConverter ^ GetConverter(Type ^ typeToConvert);" />
      <MemberSignature Language="F#" Value="member this.GetConverter : Type -&gt; System.Text.Json.Serialization.JsonConverter" Usage="jsonSerializerOptions.GetConverter typeToConvert" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.Serialization.JsonConverter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeToConvert" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="typeToConvert"><span data-ttu-id="fe9ab-122">Typ, dla którego ma zostać zwrócony konwerter.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-122">The type to return a converter for.</span></span></param>
        <summary><span data-ttu-id="fe9ab-123">Zwraca konwerter dla określonego typu.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-123">Returns the converter for the specified type.</span></span></summary>
        <returns><span data-ttu-id="fe9ab-124">Pierwszy konwerter, który obsługuje dany typ, lub <see langword="null" /> Jeśli nie ma konwertera.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-124">The first converter that supports the given type, or <see langword="null" /> if there is no converter.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnoreNullValues">
      <MemberSignature Language="C#" Value="public bool IgnoreNullValues { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreNullValues" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreNullValues As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreNullValues { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreNullValues : bool with get, set" Usage="System.Text.Json.JsonSerializerOptions.IgnoreNullValues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fe9ab-125">Pobiera lub ustawia wartość określającą, czy <see langword="null" /> wartości są ignorowane podczas serializacji i deserializacji.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-125">Gets or sets a value that determines whether <see langword="null" /> values are ignored during serialization and deserialization.</span></span> <span data-ttu-id="fe9ab-126">Wartość domyślna to <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-126">The default value is <see langword="false" />.</span></span></summary>
        <value><span data-ttu-id="fe9ab-127"><see langword="true" />ignorowanie wartości null podczas serializacji i deserializacji; w przeciwnym razie Zobacz langword = "false"&gt;/.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-127"><see langword="true" /> to ignore null values during serialization and deserialization; otherwise, see langword="false" /&gt;.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fe9ab-128">Ta właściwość została ustawiona po wykonaniu serializacji lub deserializacji.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-128">This property was set after serialization or deserialization has occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IgnoreReadOnlyProperties">
      <MemberSignature Language="C#" Value="public bool IgnoreReadOnlyProperties { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreReadOnlyProperties" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.IgnoreReadOnlyProperties" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreReadOnlyProperties As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreReadOnlyProperties { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreReadOnlyProperties : bool with get, set" Usage="System.Text.Json.JsonSerializerOptions.IgnoreReadOnlyProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fe9ab-129">Pobiera wartość określającą, czy właściwości tylko do odczytu są ignorowane podczas serializacji.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-129">Gets a value that determines whether read-only properties are ignored during serialization.</span></span> <span data-ttu-id="fe9ab-130">Wartość domyślna to <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-130">The default value is <see langword="false" />.</span></span></summary>
        <value><span data-ttu-id="fe9ab-131"><see langword="true" />ignorowanie właściwości tylko do odczytu podczas serializacji; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="fe9ab-131"><see langword="true" /> to ignore read-only properties during serialization; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="fe9ab-132">Właściwość jest tylko do odczytu, jeśli zawiera publiczną metodę pobierającą, ale nie do publicznej metody ustawiającej.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-132">A property is read-only if it contains a public getter but not a public setter.</span></span> 

<span data-ttu-id="fe9ab-133">Właściwości tylko do odczytu nie są deserializowane niezależnie od tego ustawienia.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-133">Read-only properties are not deserialized regardless of this setting.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fe9ab-134">Ta właściwość została ustawiona po wykonaniu serializacji lub deserializacji.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-134">This property was set after serialization or deserialization has occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MaxDepth">
      <MemberSignature Language="C#" Value="public int MaxDepth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxDepth" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.MaxDepth" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxDepth { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxDepth : int with get, set" Usage="System.Text.Json.JsonSerializerOptions.MaxDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fe9ab-135">Pobiera lub ustawia maksymalną głębokość dozwoloną podczas serializacji lub deserializacji JSON, z wartością domyślną 0 wskazującą maksymalną głębokość wynoszącą 64.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-135">Gets or sets the maximum depth allowed when serializing or deserializing JSON, with the default value of 0 indicating a maximum depth of 64.</span></span></summary>
        <value><span data-ttu-id="fe9ab-136">Maksymalna głębokość dozwolona podczas serializacji lub deserializacji JSON.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-136">The maximum depth allowed when serializing or deserializing JSON.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="fe9ab-137">Przechodzenie do tej głębokości spowoduje zgłoszenie wyjątku < cref = "T:System.Text.Json.JsonException >.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-137">Going past this depth will throw a <exception cref="T:System.Text.Json.JsonException>.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fe9ab-138">Ta właściwość została ustawiona po wykonaniu serializacji lub deserializacji.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-138">This property was set after serialization or deserialization has occurred.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fe9ab-139">Maksymalna głębokość jest ustawiona na wartość ujemną.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-139">The max depth is set to a negative value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PropertyNameCaseInsensitive">
      <MemberSignature Language="C#" Value="public bool PropertyNameCaseInsensitive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PropertyNameCaseInsensitive" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.PropertyNameCaseInsensitive" />
      <MemberSignature Language="VB.NET" Value="Public Property PropertyNameCaseInsensitive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PropertyNameCaseInsensitive { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.PropertyNameCaseInsensitive : bool with get, set" Usage="System.Text.Json.JsonSerializerOptions.PropertyNameCaseInsensitive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fe9ab-140">Pobiera lub ustawia wartość określającą, czy nazwa właściwości używa porównania bez uwzględniania wielkości liter podczas deserializacji.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-140">Gets or sets a value that determines whether a property's name uses a case-insensitive comparison during deserialization.</span></span> <span data-ttu-id="fe9ab-141">Wartość domyślna to <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-141">The default value is <see langword="false" />.</span></span></summary>
        <value><span data-ttu-id="fe9ab-142"><see langword="true" />Porównywanie nazw właściwości przy użyciu porównania bez uwzględniania wielkości liter; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="fe9ab-142"><see langword="true" /> to compare property names using case-insensitive comparison; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="fe9ab-143">Istnieje koszt wydajności związany z porównaniem przypadków insensitie (to jest, gdy `PropertyNameCaseInsensitive` jest `true`).</span><span class="sxs-lookup"><span data-stu-id="fe9ab-143">There is a performance cost associated with case-insensitie comparison (that is, when `PropertyNameCaseInsensitive` is `true`).</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyNamingPolicy">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonNamingPolicy PropertyNamingPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Json.JsonNamingPolicy PropertyNamingPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.PropertyNamingPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Property PropertyNamingPolicy As JsonNamingPolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonNamingPolicy ^ PropertyNamingPolicy { System::Text::Json::JsonNamingPolicy ^ get(); void set(System::Text::Json::JsonNamingPolicy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PropertyNamingPolicy : System.Text.Json.JsonNamingPolicy with get, set" Usage="System.Text.Json.JsonSerializerOptions.PropertyNamingPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonNamingPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fe9ab-144">Pobiera lub ustawia wartość określającą zasady użyte do przekonwertowania nazwy właściwości na obiekt na inny format, taki jak notacji CamelCase-wielkość liter.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-144">Gets or sets a value that specifies the policy used to convert a property's name on an object to another format, such as camel-casing.</span></span></summary>
        <value><span data-ttu-id="fe9ab-145">Jedna z wartości wyliczenia z <see cref="T:System.Text.Json.JsonNamingPolicy" />.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-145">One of the enum values from <see cref="T:System.Text.Json.JsonNamingPolicy" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="fe9ab-146">Oczekiwana nazwa właściwości jest zgodna z ładunkiem JSON podczas deserializacji i zostanie użyta podczas zapisywania nazwy właściwości podczas serializacji.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-146">The resulting property name is expected to match the JSON payload during deserialization, and will be used when writing the property name during serialization.</span></span>

<span data-ttu-id="fe9ab-147">Zasady nie są używane dla właściwości, które mają <xref:System.Text.Json.Serialization.JsonPropertyNameAttribute> zastosowanie.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-147">The policy is not used for properties that have a <xref:System.Text.Json.Serialization.JsonPropertyNameAttribute> applied.</span></span>

<span data-ttu-id="fe9ab-148">Tę właściwość można ustawić <xref:System.Text.Json.JsonNamingPolicy.CamelCase?displayProperty=nameWithType> , aby określić zasady notacji CamelCase.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-148">This property can be set to <xref:System.Text.Json.JsonNamingPolicy.CamelCase?displayProperty=nameWithType> to specify a camel-casing policy.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadCommentHandling">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonCommentHandling ReadCommentHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonCommentHandling ReadCommentHandling" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.ReadCommentHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property ReadCommentHandling As JsonCommentHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonCommentHandling ReadCommentHandling { System::Text::Json::JsonCommentHandling get(); void set(System::Text::Json::JsonCommentHandling value); };" />
      <MemberSignature Language="F#" Value="member this.ReadCommentHandling : System.Text.Json.JsonCommentHandling with get, set" Usage="System.Text.Json.JsonSerializerOptions.ReadCommentHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonCommentHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fe9ab-149">Pobiera lub ustawia wartość określającą sposób obsługi komentarzy podczas deserializacji.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-149">Gets or sets a value that defines how comments are handled during deserialization.</span></span></summary>
        <value><span data-ttu-id="fe9ab-150">Wartość wskazująca, czy komentarze są dozwolone, niedozwolone, czy pominięte.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-150">A value that indicates whether comments are allowed, disallowed, or skipped.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="fe9ab-151">Domyślnie w przypadku napotkania komentarza jest generowany < wyjątek cref = "T:System.Text.Json.JsonException >.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-151">By default, a <exception cref="T:System.Text.Json.JsonException> is thrown if a comment is encountered.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fe9ab-152">Ta właściwość została ustawiona po wykonaniu serializacji lub deserializacji.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-152">This property was set after serialization or deserialization has occurred.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fe9ab-153">Element Enum obsługujący komentarz ma ustawioną wartość, która nie jest obsługiwana (lub nie znajduje <see cref="T:System.Text.Json.JsonCommentHandling" /> się w zakresie wyliczenia).</span><span class="sxs-lookup"><span data-stu-id="fe9ab-153">The comment handling enum is set to a value that is not supported (or not within the <see cref="T:System.Text.Json.JsonCommentHandling" /> enum range).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteIndented">
      <MemberSignature Language="C#" Value="public bool WriteIndented { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WriteIndented" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.WriteIndented" />
      <MemberSignature Language="VB.NET" Value="Public Property WriteIndented As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool WriteIndented { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.WriteIndented : bool with get, set" Usage="System.Text.Json.JsonSerializerOptions.WriteIndented" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fe9ab-154">Pobiera lub ustawia wartość określającą, czy w formacie JSON ma być używane całkiem drukowanie.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-154">Gets or sets a value that defines whether JSON should use pretty printing.</span></span> <span data-ttu-id="fe9ab-155">Domyślnie kod JSON jest serializowany bez dodatkowego odstępu.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-155">By default, JSON is serialized without any extra white space.</span></span></summary>
        <value><span data-ttu-id="fe9ab-156"><see langword="true" />Jeśli kod JSON powinien się na przykład drukować podczas serializacji; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="fe9ab-156"><see langword="true" /> if JSON should pretty print on serialization; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="fe9ab-157">Wartość domyślna to <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-157">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="fe9ab-158">Drukowanie w postaci strukturalnej obejmuje:</span><span class="sxs-lookup"><span data-stu-id="fe9ab-158">Pretty printing includes:</span></span> 

- <span data-ttu-id="fe9ab-159">Wcięcia zagnieżdżonych tokenów JSON.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-159">Indenting nested JSON tokens.</span></span>
- <span data-ttu-id="fe9ab-160">Dodawanie nowych wierszy</span><span class="sxs-lookup"><span data-stu-id="fe9ab-160">Adding new lines</span></span>
- <span data-ttu-id="fe9ab-161">Dodawanie odstępów między nazwami właściwości i wartościami.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-161">Adding white space between property names and values.</span></span> 

         ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fe9ab-162">Ta właściwość została ustawiona po wykonaniu serializacji lub deserializacji.</span><span class="sxs-lookup"><span data-stu-id="fe9ab-162">This property was set after serialization or deserialization has occurred.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
