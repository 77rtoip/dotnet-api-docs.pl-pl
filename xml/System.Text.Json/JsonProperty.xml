<Type Name="JsonProperty" FullName="System.Text.Json.JsonProperty">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0e06a1b8f9b5f73b704fafb4d6492546b0940957" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69145136" /></Metadata><TypeSignature Language="C#" Value="public struct JsonProperty" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit JsonProperty extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonProperty" />
  <TypeSignature Language="VB.NET" Value="Public Structure JsonProperty" />
  <TypeSignature Language="C++ CLI" Value="public value class JsonProperty" />
  <TypeSignature Language="F#" Value="type JsonProperty = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="2c317-101">Reprezentuje pojedynczą właściwość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="2c317-101">Represents a single property for a JSON object.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonProperty.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Text.Json.JsonProperty.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2c317-102">Pobiera nazwę tej właściwości.</span><span class="sxs-lookup"><span data-stu-id="2c317-102">Gets the name of this property.</span></span></summary>
        <value><span data-ttu-id="2c317-103">Nazwa tej właściwości.</span><span class="sxs-lookup"><span data-stu-id="2c317-103">The name of this property.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NameEquals">
      <MemberSignature Language="C#" Value="public bool NameEquals (ReadOnlySpan&lt;byte&gt; utf8Text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool NameEquals(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Function NameEquals (utf8Text As ReadOnlySpan(Of Byte)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool NameEquals(ReadOnlySpan&lt;System::Byte&gt; utf8Text);" />
      <MemberSignature Language="F#" Value="member this.NameEquals : ReadOnlySpan&lt;byte&gt; -&gt; bool" Usage="jsonProperty.NameEquals utf8Text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Text" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8Text"><span data-ttu-id="2c317-104">Tekst zakodowany w formacie UTF-8 do porównania.</span><span class="sxs-lookup"><span data-stu-id="2c317-104">The UTF-8 encoded text to compare against.</span></span></param>
        <summary><span data-ttu-id="2c317-105">Porównuje określony tekst zakodowany w formacie UTF-8 z nazwą tej właściwości.</span><span class="sxs-lookup"><span data-stu-id="2c317-105">Compares the specified UTF-8 encoded text to the name of this property.</span></span></summary>
        <returns><span data-ttu-id="2c317-106"><see langword="true" />Jeśli nazwa tej właściwości ma takie samo kodowanie UTF-8, <paramref name="utf8Text" /> <see langword="false" />co; w przeciwnym razie.</span><span class="sxs-lookup"><span data-stu-id="2c317-106"><see langword="true" /> if the name of this property has the same UTF-8 encoding as <paramref name="utf8Text" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2c317-107">Ta metoda jest funkcjonalnie równa liczbie porządkowej `utf8Text` i <xref:System.Text.Json.JsonProperty.Name>, ale może uniknąć tworzenia wystąpienia ciągu.</span><span class="sxs-lookup"><span data-stu-id="2c317-107">This method is functionally equal to doing an ordinal comparison of `utf8Text` and <xref:System.Text.Json.JsonProperty.Name>, but it can avoid creating the string instance.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2c317-108">Ta wartość <see cref="T:System.Type" /> nie <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />jest.</span><span class="sxs-lookup"><span data-stu-id="2c317-108">This value's <see cref="T:System.Type" /> is not <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="NameEquals">
      <MemberSignature Language="C#" Value="public bool NameEquals (ReadOnlySpan&lt;char&gt; text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool NameEquals(valuetype System.ReadOnlySpan`1&lt;char&gt; text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Function NameEquals (text As ReadOnlySpan(Of Char)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool NameEquals(ReadOnlySpan&lt;char&gt; text);" />
      <MemberSignature Language="F#" Value="member this.NameEquals : ReadOnlySpan&lt;char&gt; -&gt; bool" Usage="jsonProperty.NameEquals text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="2c317-109">Tekst do porównania.</span><span class="sxs-lookup"><span data-stu-id="2c317-109">The text to compare against.</span></span></param>
        <summary><span data-ttu-id="2c317-110">Porównuje określony tekst jako zakres znaków z nazwą tej właściwości.</span><span class="sxs-lookup"><span data-stu-id="2c317-110">Compares the specified text as a character span to the name of this property.</span></span></summary>
        <returns><span data-ttu-id="2c317-111"><see langword="true" />Jeśli nazwa tej właściwości pasuje <paramref name="text" />; w przeciwnym razie,. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="2c317-111"><see langword="true" /> if the name of this property matches <paramref name="text" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2c317-112">Ta metoda jest funkcjonalnie równa liczbie porządkowej `text` i <xref:System.Text.Json.JsonProperty.Name>, ale może uniknąć tworzenia wystąpienia ciągu.</span><span class="sxs-lookup"><span data-stu-id="2c317-112">This method is functionally equal to doing an ordinal comparison of `text` and <xref:System.Text.Json.JsonProperty.Name>, but it can avoid creating the string instance.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2c317-113">Ta wartość <see cref="T:System.Type" /> nie <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />jest.</span><span class="sxs-lookup"><span data-stu-id="2c317-113">This value's <see cref="T:System.Type" /> is not <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="NameEquals">
      <MemberSignature Language="C#" Value="public bool NameEquals (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool NameEquals(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonProperty.NameEquals(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function NameEquals (text As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool NameEquals(System::String ^ text);" />
      <MemberSignature Language="F#" Value="member this.NameEquals : string -&gt; bool" Usage="jsonProperty.NameEquals text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="2c317-114">Tekst do porównania.</span><span class="sxs-lookup"><span data-stu-id="2c317-114">The text to compare against.</span></span></param>
        <summary><span data-ttu-id="2c317-115">Porównuje określony ciąg z nazwą tej właściwości.</span><span class="sxs-lookup"><span data-stu-id="2c317-115">Compares the specified string to the name of this property.</span></span></summary>
        <returns><span data-ttu-id="2c317-116"><see langword="true" />Jeśli nazwa tej właściwości pasuje <paramref name="text" />; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="2c317-116"><see langword="true" /> if the name of this property matches <paramref name="text" />; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="2c317-117">Ta metoda jest funkcjonalnie równa liczbie porządkowej `text` i. <xref:System.Text.Json.JsonProperty.Name></span><span class="sxs-lookup"><span data-stu-id="2c317-117">This method is functionally equal to doing an ordinal comparison of `text` and <xref:System.Text.Json.JsonProperty.Name>.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2c317-118">Ta wartość <see cref="T:System.Type" /> nie <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />jest.</span><span class="sxs-lookup"><span data-stu-id="2c317-118">This value's <see cref="T:System.Type" /> is not <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonProperty.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="jsonProperty.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2c317-119">Udostępnia ciąg reprezentujący właściwość do celów debugowania.</span><span class="sxs-lookup"><span data-stu-id="2c317-119">Provides a string representation of the property for debugging purposes.</span></span></summary>
        <returns><span data-ttu-id="2c317-120">Ciąg zawierający nieinterpretowaną wartość właściwości, zaczynając od deklarującego cudzysłowu i kończąc na ostatnim znaku, który jest częścią wartości.</span><span class="sxs-lookup"><span data-stu-id="2c317-120">A string containing the uninterpreted value of the property, beginning at the declaring open-quote and ending at the last character that is part of the value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonElement Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonElement Value" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonProperty.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As JsonElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonElement Value { System::Text::Json::JsonElement get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : System.Text.Json.JsonElement" Usage="System.Text.Json.JsonProperty.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2c317-121">Pobiera wartość tej właściwości.</span><span class="sxs-lookup"><span data-stu-id="2c317-121">Gets the value of this property.</span></span></summary>
        <value><span data-ttu-id="2c317-122">Wartość tej właściwości.</span><span class="sxs-lookup"><span data-stu-id="2c317-122">The value of this property.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteTo">
      <MemberSignature Language="C#" Value="public void WriteTo (System.Text.Json.Utf8JsonWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteTo(class System.Text.Json.Utf8JsonWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonProperty.WriteTo(System.Text.Json.Utf8JsonWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteTo (writer As Utf8JsonWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteTo(System::Text::Json::Utf8JsonWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.WriteTo : System.Text.Json.Utf8JsonWriter -&gt; unit" Usage="jsonProperty.WriteTo writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
