<Type Name="Utf8JsonWriter" FullName="System.Text.Json.Utf8JsonWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="20820b1a1bf9dbfbc76534ca3ea4c8cd4c53e196" /><Meta Name="ms.sourcegitcommit" Value="406d23aba879fbb482c6da0f64c8ef9494f6a944" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="07/31/2019" /><Meta Name="ms.locfileid" Value="68686083" /></Metadata><TypeSignature Language="C#" Value="public sealed class Utf8JsonWriter : IAsyncDisposable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Utf8JsonWriter extends System.Object implements class System.IAsyncDisposable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Utf8JsonWriter" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Utf8JsonWriter&#xA;Implements IAsyncDisposable, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Utf8JsonWriter sealed : IAsyncDisposable, IDisposable" />
  <TypeSignature Language="F#" Value="type Utf8JsonWriter = class&#xA;    interface IAsyncDisposable&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netcore-3.0">System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IAsyncDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="89f87-101">Zapewnia wysoką wydajność interfejsu API do przesyłania w niebuforowanej postaci tekstu JSON zakodowanego w formacie UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-101">Provides a high-performance API for forward-only, non-cached writing of UTF-8 encoded JSON text.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="89f87-102">`Utf8JsonWriter`zapisuje tekst sekwencyjnie bez buforowania i domyślnie stosuje [kod RFC JSON](https://tools.ietf.org/html/rfc8259), z wyjątkiem pisania komentarzy.</span><span class="sxs-lookup"><span data-stu-id="89f87-102">`Utf8JsonWriter` writes the text sequentially with no caching and by default adheres to the [JSON RFC](https://tools.ietf.org/html/rfc8259), with the exception of writing comments.</span></span>

<span data-ttu-id="89f87-103">Metoda, która próbuje zapisać nieprawidłowy kod JSON, gdy Walidacja jest <xref:System.InvalidOperationException> włączona, zgłasza komunikat o błędzie związany z kontekstem.</span><span class="sxs-lookup"><span data-stu-id="89f87-103">A method that attempts to write invalid JSON when validation is enabled throws a <xref:System.InvalidOperationException> with a context-specific error message.</span></span>

<span data-ttu-id="89f87-104">Aby można było sformatować dane wyjściowe z wcięciem i białym znakiem lub pominąć walidację, Utwórz wystąpienie <xref:System.Text.Json.JsonWriterOptions> i przekaż je do składnika zapisywania.</span><span class="sxs-lookup"><span data-stu-id="89f87-104">To be able to format the output with indentation and white space OR to skip validation, create an instance of <xref:System.Text.Json.JsonWriterOptions> and pass it in to the writer.</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonWriter (System.Buffers.IBufferWriter&lt;byte&gt; bufferWriter, System.Text.Json.JsonWriterOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; bufferWriter, valuetype System.Text.Json.JsonWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bufferWriter As IBufferWriter(Of Byte), Optional options As JsonWriterOptions = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonWriter : System.Buffers.IBufferWriter&lt;byte&gt; * System.Text.Json.JsonWriterOptions -&gt; System.Text.Json.Utf8JsonWriter" Usage="new System.Text.Json.Utf8JsonWriter (bufferWriter, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bufferWriter" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
        <Parameter Name="options" Type="System.Text.Json.JsonWriterOptions" />
      </Parameters>
      <Docs>
        <param name="bufferWriter"><span data-ttu-id="89f87-105">Miejsce docelowe zapisywania tekstu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-105">The destination for writing JSON text.</span></span></param>
        <param name="options"><span data-ttu-id="89f87-106">Definiuje dostosowane zachowanie <see cref="T:System.Text.Json.Utf8JsonWriter" /> domyślnie, zapisuje zminimalizowany kod JSON (bez dodatkowych odstępów) i sprawdza, czy zapisany kod JSON jest strukturalnie ważny zgodnie z dokumentem RFC JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-106">Defines the customized behavior of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> By default, it writes minimized JSON (with no extra whitespace) and validates that the JSON being written is structurally valid according to the JSON RFC.</span></span></param>
        <summary><span data-ttu-id="89f87-107">Tworzy nowe <see cref="T:System.Text.Json.Utf8JsonWriter" /> wystąpienie o określonym <see langword="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />.</span><span class="sxs-lookup"><span data-stu-id="89f87-107">Constructs a new <see cref="T:System.Text.Json.Utf8JsonWriter" /> instance with a specified <see langword="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="89f87-108"><paramref name="bufferWriter" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="89f87-108"><paramref name="bufferWriter" />  is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonWriter (System.IO.Stream utf8Json, System.Text.Json.JsonWriterOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream utf8Json, valuetype System.Text.Json.JsonWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.#ctor(System.IO.Stream,System.Text.Json.JsonWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (utf8Json As Stream, Optional options As JsonWriterOptions = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonWriter : System.IO.Stream * System.Text.Json.JsonWriterOptions -&gt; System.Text.Json.Utf8JsonWriter" Usage="new System.Text.Json.Utf8JsonWriter (utf8Json, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Text.Json.JsonWriterOptions" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="89f87-109">Miejsce docelowe zapisywania tekstu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-109">The destination for writing JSON text.</span></span></param>
        <param name="options"><span data-ttu-id="89f87-110">Definiuje dostosowane zachowanie <see cref="T:System.Text.Json.Utf8JsonWriter" /> domyślnie, zapisuje zminimalizowany kod JSON (bez dodatkowych odstępów) i sprawdza, czy zapisany kod JSON jest strukturalnie ważny zgodnie z dokumentem RFC JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-110">Defines the customized behavior of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> By default, it writes minimized JSON (with no extra whitespace) and validates that the JSON being written is structurally valid according to the JSON RFC.</span></span></param>
        <summary><span data-ttu-id="89f87-111">Tworzy nowe <see cref="T:System.Text.Json.Utf8JsonWriter" /> wystąpienie o określonym <paramref name="utf8Json" />.</span><span class="sxs-lookup"><span data-stu-id="89f87-111">Constructs a new <see cref="T:System.Text.Json.Utf8JsonWriter" /> instance with a specified <paramref name="utf8Json" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="89f87-112"><paramref name="utf8Json" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="89f87-112"><paramref name="utf8Json" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BytesCommitted">
      <MemberSignature Language="C#" Value="public long BytesCommitted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesCommitted" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesCommitted As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesCommitted { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesCommitted : int64" Usage="System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="89f87-113">Pobiera łączną liczbę bajtów przekazanych do danych wyjściowych przez bieżące wystąpienie do tej pory.</span><span class="sxs-lookup"><span data-stu-id="89f87-113">Gets the total number of bytes committed to the output by the current instance so far.</span></span></summary>
        <value><span data-ttu-id="89f87-114">Całkowita liczba bajtów przekazanych do danych wyjściowych przez te <see cref="T:System.Text.Json.Utf8JsonWriter" /> pory.</span><span class="sxs-lookup"><span data-stu-id="89f87-114">The total number of bytes committed to the output by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far.</span></span></value>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="89f87-115">W przypadku <xref:System.Buffers.IBufferWriter%601>, ta właściwość wskazuje, jak dużo IBufferWriter ma zaawansowaną.</span><span class="sxs-lookup"><span data-stu-id="89f87-115">In the case of an <xref:System.Buffers.IBufferWriter%601>, this property indicates how much the IBufferWriter has advanced.</span></span>

<span data-ttu-id="89f87-116">W przypadku <xref:System.IO.Stream>, ta właściwość wskazuje, ile danych Zapisano w strumieniu.</span><span class="sxs-lookup"><span data-stu-id="89f87-116">In the case of a <xref:System.IO.Stream>, this property indicates how much data has been written to the stream.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BytesPending">
      <MemberSignature Language="C#" Value="public int BytesPending { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BytesPending" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesPending" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesPending As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BytesPending { int get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesPending : int" Usage="System.Text.Json.Utf8JsonWriter.BytesPending" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="89f87-117">Pobiera liczbę bajtów zapisanych <see cref="T:System.Text.Json.Utf8JsonWriter" /> do tej pory, które nie zostały jeszcze opróżnione do danych wyjściowych i zostały zatwierdzone.</span><span class="sxs-lookup"><span data-stu-id="89f87-117">Gets the number of bytes written by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far that have not yet been flushed to the output and committed.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentDepth">
      <MemberSignature Language="C#" Value="public int CurrentDepth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentDepth" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentDepth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDepth : int" Usage="System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="89f87-118">Pobiera głębokość bieżącego tokenu.</span><span class="sxs-lookup"><span data-stu-id="89f87-118">Gets the depth of the current token.</span></span></summary>
        <value><span data-ttu-id="89f87-119">Głębokość bieżącego tokenu.</span><span class="sxs-lookup"><span data-stu-id="89f87-119">The depth of the current token.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="89f87-120">`CurrentDepth` Właściwość śledzi głębokość rekursywną zagnieżdżonych obiektów/tablic w tekście JSON, który został przez siebie zapisany.</span><span class="sxs-lookup"><span data-stu-id="89f87-120">The `CurrentDepth` property tracks the recursive depth of the nested objects / arrays within the JSON text written so far.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="utf8JsonWriter.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="89f87-121">Zatwierdza wszystkie pozostałości tekstu JSON, które nie zostały jeszcze opróżnione i zwalnia wszystkie zasoby używane przez bieżące wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="89f87-121">Commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="89f87-122">W przypadku IBufferWriter jest to zasunięte w <xref:System.Buffers.IBufferWriter`1> zależności od tego, co zostało wcześniej zrobione.</span><span class="sxs-lookup"><span data-stu-id="89f87-122">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>

<span data-ttu-id="89f87-123">W przypadku strumienia zapisuje dane w strumieniu i opróżnia je.</span><span class="sxs-lookup"><span data-stu-id="89f87-123">In the case of Stream, this writes the data to the stream and flushes it.</span></span>

<span data-ttu-id="89f87-124">Nie można ponownie użyć wystąpieniapousunięciu.<xref:System.Text.Json.Utf8JsonWriter></span><span class="sxs-lookup"><span data-stu-id="89f87-124">The <xref:System.Text.Json.Utf8JsonWriter> instance cannot be reused after disposing.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask&#xA;override this.DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="utf8JsonWriter.DisposeAsync " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IAsyncDisposable.DisposeAsync</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="89f87-125">Asynchronicznie zatwierdza wszystkie pozostałości tekstu JSON, które nie zostały jeszcze opróżnione i zwalnia wszystkie zasoby używane przez bieżące wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="89f87-125">Asynchronously commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="89f87-126">W przypadku IBufferWriter jest to zasunięte w <xref:System.Buffers.IBufferWriter`1> zależności od tego, co zostało wcześniej zrobione.</span><span class="sxs-lookup"><span data-stu-id="89f87-126">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>
          
<span data-ttu-id="89f87-127">W przypadku strumienia zapisuje dane w strumieniu i opróżnia je.</span><span class="sxs-lookup"><span data-stu-id="89f87-127">In the case of Stream, this writes the data to the stream and flushes it.</span></span>

<span data-ttu-id="89f87-128">Nie można ponownie użyć wystąpieniapousunięciu.<xref:System.Text.Json.Utf8JsonWriter></span><span class="sxs-lookup"><span data-stu-id="89f87-128">The <xref:System.Text.Json.Utf8JsonWriter> instance cannot be reused after disposing.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flush();" />
      <MemberSignature Language="F#" Value="member this.Flush : unit -&gt; unit" Usage="utf8JsonWriter.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="89f87-129">Zatwierdza do tej pory tekst JSON, który umożliwia wyświetlanie danych wyjściowych.</span><span class="sxs-lookup"><span data-stu-id="89f87-129">Commits the JSON text written so far, which makes it visible to the output destination.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="89f87-130">W przypadku IBufferWriter jest to zasunięte w <xref:System.Buffers.IBufferWriter`1> zależności od tego, co zostało wcześniej zrobione.</span><span class="sxs-lookup"><span data-stu-id="89f87-130">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>

<span data-ttu-id="89f87-131">W przypadku <xref:System.IO.Stream>, spowoduje to zapisanie danych do strumienia i opróżnienie go.</span><span class="sxs-lookup"><span data-stu-id="89f87-131">In the case of <xref:System.IO.Stream>, this writes the data to the stream and flushes it.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="89f87-132">To wystąpienie zostało usunięte.</span><span class="sxs-lookup"><span data-stu-id="89f87-132">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FlushAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.FlushAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.FlushAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="utf8JsonWriter.FlushAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <summary><span data-ttu-id="89f87-133">Asynchronicznie zatwierdza tekst JSON, który został przez siebie zapisany, co sprawia, że jest on widoczny dla wyjściowej lokalizacji docelowej.</span><span class="sxs-lookup"><span data-stu-id="89f87-133">Asynchronously commits the JSON text written so far, which makes it visible to the output destination.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="89f87-134">W przypadku IBufferWriter jest to zasunięte w <xref:System.Buffers.IBufferWriter`1> zależności od tego, co zostało wcześniej zrobione.</span><span class="sxs-lookup"><span data-stu-id="89f87-134">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>

<span data-ttu-id="89f87-135">W przypadku <xref:System.IO.Stream>, zapisuje dane do strumienia i opróżnia je asynchronicznie, jednocześnie monitorując żądania anulowania.</span><span class="sxs-lookup"><span data-stu-id="89f87-135">In the case of <xref:System.IO.Stream>, this writes the data to the stream and flushes it asynchronously, while monitoring cancellation requests.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="89f87-136">To wystąpienie zostało usunięte.</span><span class="sxs-lookup"><span data-stu-id="89f87-136">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonWriterOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonWriterOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As JsonWriterOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonWriterOptions Options { System::Text::Json::JsonWriterOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Text.Json.JsonWriterOptions" Usage="System.Text.Json.Utf8JsonWriter.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonWriterOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="89f87-137">Pobiera zachowanie niestandardowe podczas zapisywania JSON przy użyciu tego wystąpienia, które wskazuje, czy formatować dane wyjściowe podczas pisania i czy pominąć strukturalną walidację JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-137">Gets the custom behavior when writing JSON using this instance, which indicates whether to format the output while writing and whether to skip structural JSON validation.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="utf8JsonWriter.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="89f87-138">Resetuje stan wewnętrzny tego wystąpienia, aby można go było ponownie użyć.</span><span class="sxs-lookup"><span data-stu-id="89f87-138">Resets the internal state of this instance so that it can be reused.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="89f87-139">Program będzie nadal używać oryginalnych opcji składnika zapisywania i oryginalnego wyjścia ( <xref:System.IO.Stream>albo <xref:System.Buffers.IBufferWriter`1> ) jako miejsca docelowego. <xref:System.Text.Json.Utf8JsonWriter></span><span class="sxs-lookup"><span data-stu-id="89f87-139">The <xref:System.Text.Json.Utf8JsonWriter> will continue to use the original writer options and the original output (either <xref:System.Buffers.IBufferWriter`1> or <xref:System.IO.Stream>) as the destination.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="89f87-140">To wystąpienie zostało usunięte.</span><span class="sxs-lookup"><span data-stu-id="89f87-140">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset (System.Buffers.IBufferWriter&lt;byte&gt; bufferWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset(class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; bufferWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Reset(System.Buffers.IBufferWriter{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset (bufferWriter As IBufferWriter(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset(System::Buffers::IBufferWriter&lt;System::Byte&gt; ^ bufferWriter);" />
      <MemberSignature Language="F#" Value="member this.Reset : System.Buffers.IBufferWriter&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.Reset bufferWriter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufferWriter" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="bufferWriter"><span data-ttu-id="89f87-141">Miejsce docelowe zapisywania tekstu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-141">The destination for writing JSON text.</span></span></param>
        <summary><span data-ttu-id="89f87-142">Resetuje stan wewnętrzny tego wystąpienia, aby można go było ponownie użyć z nowym wystąpieniem <see cref="T:System.Buffers.IBufferWriter`1" />.</span><span class="sxs-lookup"><span data-stu-id="89f87-142">Resets the internal state of this instance so that it can be reused with a new instance of <see cref="T:System.Buffers.IBufferWriter`1" />.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="89f87-143">Program będzie nadal używać oryginalnych opcji składnika zapisywania, ale teraz `bufferWriter` zapisuje jako nowe miejsce docelowe. <xref:System.Text.Json.Utf8JsonWriter></span><span class="sxs-lookup"><span data-stu-id="89f87-143">The <xref:System.Text.Json.Utf8JsonWriter> will continue to use the original writer options but now writes to `bufferWriter` as the new destination.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="89f87-144"><paramref name="bufferWriter" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="89f87-144"><paramref name="bufferWriter" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="89f87-145">To wystąpienie zostało usunięte.</span><span class="sxs-lookup"><span data-stu-id="89f87-145">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset (System.IO.Stream utf8Json);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset(class System.IO.Stream utf8Json) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Reset(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset (utf8Json As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset(System::IO::Stream ^ utf8Json);" />
      <MemberSignature Language="F#" Value="member this.Reset : System.IO.Stream -&gt; unit" Usage="utf8JsonWriter.Reset utf8Json" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="89f87-146">Miejsce docelowe zapisywania tekstu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-146">The destination for writing JSON text.</span></span></param>
        <summary><span data-ttu-id="89f87-147">Resetuje stan wewnętrzny tego wystąpienia, aby można go było ponownie użyć z nowym wystąpieniem <see cref="T:System.IO.Stream" />.</span><span class="sxs-lookup"><span data-stu-id="89f87-147">Resets the internal state of this instance so that it can be reused with a new instance of <see cref="T:System.IO.Stream" />.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="89f87-148">Program będzie kontynuował Używanie oryginalnych opcji składnika zapisywania, ale teraz `utf8Json` zapisuje jako nowe miejsce docelowe. <xref:System.Text.Json.Utf8JsonWriter></span><span class="sxs-lookup"><span data-stu-id="89f87-148">The <xref:System.Text.Json.Utf8JsonWriter> will continue to use the original writer options but now write to `utf8Json` as the new destination.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="89f87-149"><paramref name="utf8Json" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="89f87-149"><paramref name="utf8Json" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="89f87-150">To wystąpienie zostało usunięte.</span><span class="sxs-lookup"><span data-stu-id="89f87-150">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64String">
      <MemberSignature Language="C#" Value="public void WriteBase64String (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64String(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64String (utf8PropertyName As ReadOnlySpan(Of Byte), bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64String(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64String : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64String (utf8PropertyName, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="89f87-151">Zakodowana w formacie UTF-8 nazwa właściwości do zapisania.</span><span class="sxs-lookup"><span data-stu-id="89f87-151">The UTF-8 encoded name of the property to write.</span></span></param>
        <param name="bytes"><span data-ttu-id="89f87-152">Dane binarne, które mają być zapisywane jako podstawowy zakodowany ciąg JSON 64 jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-152">The binary data to be written as a base 64 encoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-153">Zapisuje wartość nazwy właściwości i nieprzetworzonych bajtów (jako podstawowy, zakodowany ciąg JSON 64) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-153">Writes the property name and raw bytes value (as a base 64 encoded JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="89f87-154">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-154">The property name is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-155">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-155">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-156">Sprawdzanie poprawności jest włączone, a ta metoda spowoduje zapisanie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-156">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64String">
      <MemberSignature Language="C#" Value="public void WriteBase64String (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64String(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64String (propertyName As ReadOnlySpan(Of Char), bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64String(ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64String : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64String (propertyName, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-157">Nazwa właściwości obiektu JSON, który ma być transkodowane i zapisywana jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-157">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="bytes"><span data-ttu-id="89f87-158">Dane binarne, które mają być zapisywane jako podstawowy zakodowany ciąg JSON 64 jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-158">The binary data to be written as a base 64 encoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-159">Zapisuje wartość nazwy właściwości i nieprzetworzonych bajtów (jako podstawowy, zakodowany ciąg JSON 64) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-159">Writes the property name and raw bytes value (as a base 64 encoded JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="89f87-160">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-160">The property name is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-161">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-161">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-162">Sprawdzanie poprawności jest włączone, a ta metoda spowoduje zapisanie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-162">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64String">
      <MemberSignature Language="C#" Value="public void WriteBase64String (string propertyName, ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64String(string propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.String,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64String (propertyName As String, bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64String(System::String ^ propertyName, ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64String : string * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64String (propertyName, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-163">Nazwa właściwości obiektu JSON, który ma być transkodowane i zapisywana jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-163">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="bytes"><span data-ttu-id="89f87-164">Dane binarne, które mają być zapisywane jako podstawowy zakodowany ciąg JSON 64 jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-164">The binary data to be written as a base 64 encoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-165">Zapisuje wartość nazwy właściwości i nieprzetworzonych bajtów (jako ciąg JSON kodowane algorytmem Base64) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-165">Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="89f87-166">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-166">The property name is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-167">Gdy określona nazwa właściwości jest zbyt duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-167">when the specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-168">Sprawdzanie poprawności jest włączone, a ta metoda spowoduje zapisanie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-168">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64String">
      <MemberSignature Language="C#" Value="public void WriteBase64String (System.Text.Json.JsonEncodedText propertyName, ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64String(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64String (propertyName As JsonEncodedText, bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64String(System::Text::Json::JsonEncodedText propertyName, ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64String : System.Text.Json.JsonEncodedText * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64String (propertyName, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-169">Nazwa właściwości, która ma zostać zapisana w formacie JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-169">The JSON-encoded name of the property to write.</span></span></param>
        <param name="bytes"><span data-ttu-id="89f87-170">Dane binarne, które mają być zapisywane jako podstawowy zakodowany ciąg JSON 64 jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-170">The binary data to be written as a base 64 encoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-171">Zapisuje wstępnie zakodowaną nazwę właściwości i wartość nieprzetworzonych bajtów (jako podstawowy ciąg JSON zakodowany zgodnie z 64) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-171">Writes the pre-encoded property name and raw bytes value (as a base 64 encoded JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="89f87-172">Nazwę właściwości należy już zmienić, gdy wystąpienie <xref:System.Text.Json.JsonEncodedText> zostało utworzone.</span><span class="sxs-lookup"><span data-stu-id="89f87-172">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-173">Sprawdzanie poprawności jest włączone, a ta metoda spowoduje zapisanie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-173">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64StringValue">
      <MemberSignature Language="C#" Value="public void WriteBase64StringValue (ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64StringValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64StringValue(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64StringValue (bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64StringValue(ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64StringValue : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64StringValue bytes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="89f87-174">Dane binarne, które mają być zapisywane jako podstawowy, zakodowany w formacie notacji JSON 64 element w tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-174">The binary data to be written as a base 64 encoded JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="89f87-175">Zapisuje wartość RAW Bytes jako podstawowy 64 ciąg JSON jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-175">Writes the raw bytes value as base 64 encoded JSON string as an element of a JSON array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="89f87-176">Bajty są kodowane przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-176">The bytes are encoded before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-177">Określona wartość jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-177">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-178">Sprawdzanie poprawności jest włączone, a ta metoda spowoduje zapisanie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-178">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (utf8PropertyName As ReadOnlySpan(Of Byte), value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="89f87-179">Zakodowana w formacie UTF-8 nazwa właściwości obiektu JSON, który ma zostać zapisany.</span><span class="sxs-lookup"><span data-stu-id="89f87-179">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-180">Wartość, która ma zostać zapisywana jako literał JSON <b>true</b> lub <b>false</b> w ramach pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-180">The value to be written as a JSON literal <b>true</b> or <b>false</b> as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-181">Zapisuje nazwę właściwości określoną jako zakres tylko do odczytu bajtów i <see cref="T:System.Boolean" /> wartość (jako literał JSON <b>true</b> lub <b>false</b>) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-181">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="89f87-182">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-182">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-183">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-183">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-184">Sprawdzanie poprawności jest włączone, a operacja spowodowałaby zapisanie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-184">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;char&gt; propertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As ReadOnlySpan(Of Char), value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(ReadOnlySpan&lt;char&gt; propertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-185">Zakodowana w formacie UTF-16 nazwa właściwości obiektu JSON, który ma być transzakodowany i zapisany jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-185">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-186">Wartość, która ma zostać zapisywana jako literał JSON <b>true</b> lub <b>false</b> w ramach pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-186">The value to be written as a JSON literal <b>true</b> or <b>false</b> as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-187">Zapisuje nazwę właściwości określoną jako zakres znaków tylko do odczytu i <see cref="T:System.Boolean" /> wartość (jako literał JSON <b>true</b> lub <b>false</b>) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-187">Writes a property name specified as a read-only character span and a <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="89f87-188">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-188">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-189">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-189">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-190">Sprawdzanie poprawności jest włączone, a operacja spowodowałaby zapisanie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-190">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (string propertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(string propertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As String, value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(System::String ^ propertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-191">Zakodowana w formacie UTF-16 nazwa właściwości obiektu JSON, który ma być transzakodowany i zapisany jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-191">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-192">Wartość, która ma zostać zapisywana jako literał JSON <b>true</b> lub <b>false</b> w ramach pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-192">The value to be written as a JSON literal <b>true</b> or <b>false</b> as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-193">Zapisuje nazwę właściwości określoną jako ciąg i <see cref="T:System.Boolean" /> wartość (jako literał JSON <b>true</b> lub <b>false</b>) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-193">Writes a property name specified as a string and a <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="89f87-194">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-194">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-195">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-195">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-196">Sprawdzanie poprawności jest włączone, a operacja spowodowałaby zapisanie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-196">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (System.Text.Json.JsonEncodedText propertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.Text.Json.JsonEncodedText propertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.Text.Json.JsonEncodedText,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As JsonEncodedText, value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(System::Text::Json::JsonEncodedText propertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : System.Text.Json.JsonEncodedText * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-197">Nazwa właściwości kodowanej w formacie JSON obiektu JSON, która ma zostać poddana transkodowaniem i zapisywana jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-197">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-198">Wartość, która ma zostać zapisywana jako literał JSON <b>true</b> lub <b>false</b> w ramach pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-198">The value to be written as a JSON literal <b>true</b> or <b>false</b> as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-199">Zapisuje wstępnie zakodowaną nazwę i <see cref="T:System.Boolean" /> wartość właściwości (jako literał JSON <b>true</b> lub <b>false</b>) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-199">Writes the pre-encoded property name and <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="89f87-200">Nazwę właściwości należy już zmienić, gdy wystąpienie <xref:System.Text.Json.JsonEncodedText> zostało utworzone.</span><span class="sxs-lookup"><span data-stu-id="89f87-200">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-201">Sprawdzanie poprawności jest włączone, a ta metoda spowoduje zapisanie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-201">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBooleanValue">
      <MemberSignature Language="C#" Value="public void WriteBooleanValue (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBooleanValue(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBooleanValue (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBooleanValue(bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBooleanValue : bool -&gt; unit" Usage="utf8JsonWriter.WriteBooleanValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="89f87-202">Wartość, która ma zostać zapisywana jako literał JSON <b>true</b> lub <b>false</b> jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-202">The value to be written as a JSON literal <b>true</b> or <b>false</b> as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="89f87-203">Zapisuje wartość (jako literał JSON true lub <b>false</b>) jako element tablicy JSON. <b></b> <see cref="T:System.Boolean" /></span><span class="sxs-lookup"><span data-stu-id="89f87-203">Writes a <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-204">Sprawdzanie poprawności jest włączone, a operacja spowodowałaby zapisanie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-204">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteCommentValue(ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue utf8Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8Value"><span data-ttu-id="89f87-205">Wartość zakodowana UTF-8, która ma być zapisywana jako komentarz JSON w obrębie/*..* /.</span><span class="sxs-lookup"><span data-stu-id="89f87-205">The UTF-8 encoded value to be written as a JSON comment within /*..*/.</span></span></param>
        <summary><span data-ttu-id="89f87-206">Zapisuje wartość tekstową w formacie UTF-8 jako komentarz JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-206">Writes a UTF-8 text value as a JSON comment.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="89f87-207">Wartość komentarza nie jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-207">The comment value is not escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-208">Określona wartość jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-208">The specified value is too large.</span></span>
        
<span data-ttu-id="89f87-209">—lub—</span><span class="sxs-lookup"><span data-stu-id="89f87-209">-or-</span></span>

<span data-ttu-id="89f87-210"><paramref name="utf8Value" />zawiera ogranicznik komentarza (czyli \*/).</span><span class="sxs-lookup"><span data-stu-id="89f87-210"><paramref name="utf8Value" /> contains a comment delimiter (that is, \*/).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteCommentValue(ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="89f87-211">Zakodowana wartość UTF-16 jest zapisywana jako niekodowane w formacie UTF-8 komentarz JSON w obrębie/*..* /.</span><span class="sxs-lookup"><span data-stu-id="89f87-211">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within /*..*/.</span></span></param>
        <summary><span data-ttu-id="89f87-212">Zapisuje wartość tekstową w formacie UTF-16 jako komentarz JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-212">Writes a UTF-16 text value as a JSON comment.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="89f87-213">Wartość komentarza nie jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-213">The comment value is not escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-214">Określona wartość jest za duża lub.</span><span class="sxs-lookup"><span data-stu-id="89f87-214">The specified value is too large OR.</span></span>
        
<span data-ttu-id="89f87-215">—lub—</span><span class="sxs-lookup"><span data-stu-id="89f87-215">-or-</span></span>

<span data-ttu-id="89f87-216"><paramref name="value" />zawiera ogranicznik komentarza (czyli \*/).</span><span class="sxs-lookup"><span data-stu-id="89f87-216"><paramref name="value" /> contains a comment delimiter (that is, \*/).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteCommentValue(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : string -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="89f87-217">Zakodowana wartość UTF-16 jest zapisywana jako niekodowane w formacie UTF-8 komentarz JSON w obrębie/*..* /.</span><span class="sxs-lookup"><span data-stu-id="89f87-217">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within /*..*/.</span></span></param>
        <summary><span data-ttu-id="89f87-218">Zapisuje wartość tekstową ciągu jako komentarz JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-218">Writes a string text value as a JSON comment.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="89f87-219">Wartość komentarza nie jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-219">The comment value is not escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-220">Określona wartość jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-220">The specified value is too large.</span></span>
        
<span data-ttu-id="89f87-221">—lub—</span><span class="sxs-lookup"><span data-stu-id="89f87-221">-or-</span></span>

<span data-ttu-id="89f87-222"><paramref name="value" />zawiera ogranicznik komentarza (czyli \*/).</span><span class="sxs-lookup"><span data-stu-id="89f87-222"><paramref name="value" /> contains a comment delimiter (that is, \*/).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndArray">
      <MemberSignature Language="C#" Value="public void WriteEndArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndArray();" />
      <MemberSignature Language="F#" Value="member this.WriteEndArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="89f87-223">Zapisuje koniec tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-223">Writes the end of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-224">Sprawdzanie poprawności jest włączone, a operacja spowodowałaby zapisanie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-224">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndObject">
      <MemberSignature Language="C#" Value="public void WriteEndObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndObject();" />
      <MemberSignature Language="F#" Value="member this.WriteEndObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="89f87-225">Zapisuje koniec obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-225">Writes the end of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-226">Sprawdzanie poprawności jest włączone, a operacja spowodowałaby zapisanie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-226">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteNull utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="89f87-227">Zakodowana w formacie UTF-8 nazwa właściwości obiektu JSON, który ma zostać zapisany.</span><span class="sxs-lookup"><span data-stu-id="89f87-227">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <summary><span data-ttu-id="89f87-228">Zapisuje nazwę właściwości określoną jako zakres tylko do odczytu bajtów i literał JSON <b>null</b> w ramach pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-228">Writes a property name specified as a read-only span of bytes and the JSON literal <b>null</b> as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="89f87-229">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-229">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-230">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-230">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-231">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-231">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteNull propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-232">Zakodowana w formacie UTF-16 nazwa właściwości obiektu JSON, który ma być transzakodowany i zapisany jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-232">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="89f87-233">Zapisuje nazwę właściwości określoną jako zakres znaków tylko do odczytu i literał JSON <b>null</b> jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-233">Writes a property name specified as a read-only character span and the JSON literal <b>null</b> as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="89f87-234">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-234">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-235">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-235">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-236">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-236">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : string -&gt; unit" Usage="utf8JsonWriter.WriteNull propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-237">Zakodowana w formacie UTF-16 nazwa właściwości obiektu JSON, który ma być transzakodowany i zapisany jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-237">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="89f87-238">Zapisuje nazwę właściwości określoną jako ciąg i literał JSON <b>null</b> jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-238">Writes a property name specified as a string and the JSON literal <b>null</b> as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="89f87-239">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-239">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-240">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-240">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-241">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-241">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (System.Text.Json.JsonEncodedText propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.Text.Json.JsonEncodedText propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(System::Text::Json::JsonEncodedText propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteNull propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-242">Nazwa właściwości kodowanej w formacie JSON obiektu JSON, która ma zostać poddana transkodowaniem i zapisywana jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-242">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="89f87-243">Zapisuje wstępnie zakodowaną nazwę właściwości i literał JSON <b>null</b> jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-243">Writes the pre-encoded property name and the JSON literal <b>null</b> as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="89f87-244">Nazwę właściwości należy już zmienić, gdy wystąpienie <xref:System.Text.Json.JsonEncodedText> zostało utworzone.</span><span class="sxs-lookup"><span data-stu-id="89f87-244">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-245">Sprawdzanie poprawności jest włączone, a ta metoda spowoduje zapisanie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-245">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNullValue">
      <MemberSignature Language="C#" Value="public void WriteNullValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNullValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNullValue" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNullValue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNullValue();" />
      <MemberSignature Language="F#" Value="member this.WriteNullValue : unit -&gt; unit" Usage="utf8JsonWriter.WriteNullValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="89f87-246">Zapisuje literał JSON o <b>wartości null</b> jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-246">Writes the JSON literal <b>null</b> as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-247">Sprawdzanie poprawności jest włączone, a operacja spowodowałaby zapisanie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-247">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="89f87-248">Zakodowana w formacie UTF-8 nazwa właściwości obiektu JSON, który ma zostać zapisany.</span><span class="sxs-lookup"><span data-stu-id="89f87-248">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-249">Wartość, która ma zostać zapisywana jako liczba JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-249">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-250">Zapisuje nazwę właściwości określoną jako zakres tylko do odczytu bajtów i <see cref="T:System.Decimal" /> wartość (jako numer JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-250">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="89f87-251">Zapisuje przy użyciu domyślnego <xref:System.Buffers.StandardFormat> (czyli "G"). <xref:System.Decimal></span><span class="sxs-lookup"><span data-stu-id="89f87-251">Writes the <xref:System.Decimal> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="89f87-252">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-252">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-253">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-253">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-254">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-254">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="89f87-255">Zakodowana w formacie UTF-8 nazwa właściwości obiektu JSON, który ma zostać zapisany.</span><span class="sxs-lookup"><span data-stu-id="89f87-255">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-256">Wartość, która ma zostać zapisywana jako liczba JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-256">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-257">Zapisuje nazwę właściwości określoną jako zakres tylko do odczytu bajtów i <see cref="T:System.Double" /> wartość (jako numer JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-257">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="89f87-258">Zapisuje przy użyciu domyślnego <xref:System.Buffers.StandardFormat> (czyli "G"). <xref:System.Double></span><span class="sxs-lookup"><span data-stu-id="89f87-258">Writes the <xref:System.Double> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="89f87-259">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-259">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-260">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-260">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-261">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-261">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="89f87-262">Zakodowana w formacie UTF-8 nazwa właściwości obiektu JSON, który ma zostać zapisany.</span><span class="sxs-lookup"><span data-stu-id="89f87-262">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-263">Wartość, która ma zostać zapisywana jako liczba JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-263">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-264">Zapisuje nazwę właściwości określoną jako zakres tylko do odczytu bajtów i <see cref="T:System.Int32" /> wartość (jako numer JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-264">Writes a property name specified as a read-only span of bytes and an <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="89f87-265">Zapisuje przy użyciu domyślnego <xref:System.Buffers.StandardFormat> (czyli "G"), na przykład 32767. <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="89f87-265">Writes the <xref:System.Int32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="89f87-266">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-266">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-267">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-267">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-268">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-268">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="89f87-269">Zakodowana w formacie UTF-8 nazwa właściwości obiektu JSON, który ma zostać zapisany.</span><span class="sxs-lookup"><span data-stu-id="89f87-269">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-270">Wartość, która ma zostać zapisywana jako liczba JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-270">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-271">Zapisuje nazwę właściwości określoną jako zakres tylko do odczytu bajtów i <see cref="T:System.Int64" /> wartość (jako numer JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-271">Writes a property name specified as a read-only span of bytes and an <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="89f87-272">Zapisuje przy użyciu domyślnego <xref:System.Buffers.StandardFormat> (czyli "G"), na przykład 32767. <xref:System.Int64></span><span class="sxs-lookup"><span data-stu-id="89f87-272">Writes the <xref:System.Int64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="89f87-273">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-273">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-274">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-274">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-275">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-275">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="89f87-276">Zakodowana w formacie UTF-8 nazwa właściwości obiektu JSON, który ma zostać zapisany.</span><span class="sxs-lookup"><span data-stu-id="89f87-276">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-277">Wartość, która ma zostać zapisywana jako liczba JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-277">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-278">Zapisuje nazwę właściwości określoną jako zakres tylko do odczytu bajtów i <see cref="T:System.Single" /> wartość (jako numer JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-278">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="89f87-279">Zapisuje przy użyciu domyślnego <xref:System.Buffers.StandardFormat> (czyli "G"). <xref:System.Single></span><span class="sxs-lookup"><span data-stu-id="89f87-279">Writes the <xref:System.Single> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="89f87-280">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-280">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-281">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-281">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-282">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-282">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="89f87-283">Zakodowana w formacie UTF-8 nazwa właściwości obiektu JSON, który ma zostać zapisany.</span><span class="sxs-lookup"><span data-stu-id="89f87-283">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-284">Wartość, która ma zostać zapisywana jako liczba JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-284">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-285">Zapisuje nazwę właściwości określoną jako zakres tylko do odczytu bajtów i <see cref="T:System.UInt32" /> wartość (jako numer JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-285">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="89f87-286">Zapisuje przy użyciu domyślnego <xref:System.Buffers.StandardFormat> (czyli "G"), na przykład 32767. <xref:System.UInt32></span><span class="sxs-lookup"><span data-stu-id="89f87-286">Writes the <xref:System.UInt32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="89f87-287">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-287">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-288">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-288">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-289">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-289">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="89f87-290">Zakodowana w formacie UTF-8 nazwa właściwości obiektu JSON, który ma zostać zapisany.</span><span class="sxs-lookup"><span data-stu-id="89f87-290">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-291">Wartość, która ma zostać zapisywana jako liczba JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-291">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-292">Zapisuje nazwę właściwości określoną jako zakres tylko do odczytu bajtów i <see cref="T:System.UInt64" /> wartość (jako numer JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-292">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="89f87-293">Zapisuje przy użyciu domyślnego <xref:System.Buffers.StandardFormat> (czyli "G"), na przykład 32767. <xref:System.UInt64></span><span class="sxs-lookup"><span data-stu-id="89f87-293">Writes the <xref:System.UInt64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="89f87-294">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-294">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-295">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-295">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-296">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-296">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-297">Zakodowana w formacie UTF-16 nazwa właściwości obiektu JSON, który ma być transzakodowany i zapisany jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-297">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-298">Wartość, która ma zostać zapisywana jako liczba JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-298">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-299">Zapisuje nazwę właściwości określoną jako zakres znaków tylko do odczytu i <see cref="T:System.Decimal" /> wartość (jako numer JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-299">Writes a property name specified as a read-only character span and a <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="89f87-300">Zapisuje przy użyciu domyślnego <xref:System.Buffers.StandardFormat> (czyli "G"). <xref:System.Decimal></span><span class="sxs-lookup"><span data-stu-id="89f87-300">Writes the <xref:System.Decimal> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="89f87-301">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-301">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-302">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-302">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-303">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-303">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-304">Zakodowana w formacie UTF-16 nazwa właściwości obiektu JSON, który ma być transzakodowany i zapisany jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-304">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-305">Wartość, która ma zostać zapisywana jako liczba JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-305">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-306">Zapisuje nazwę właściwości określoną jako zakres znaków tylko do odczytu i <see cref="T:System.Double" /> wartość (jako numer JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-306">Writes a property name specified as a read-only character span and a <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="89f87-307">Zapisuje przy użyciu domyślnego <xref:System.Buffers.StandardFormat> (czyli "G"). <xref:System.Double></span><span class="sxs-lookup"><span data-stu-id="89f87-307">Writes the <xref:System.Double> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="89f87-308">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-308">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-309">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-309">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-310">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-310">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-311">Zakodowana w formacie UTF-16 nazwa właściwości obiektu JSON, który ma być transzakodowany i zapisany jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-311">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-312">Wartość, która ma zostać zapisywana jako liczba JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-312">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-313">Zapisuje nazwę właściwości określoną jako zakres znaków tylko do odczytu i <see cref="T:System.Int32" /> wartość (jako numer JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-313">Writes a property name specified as a read-only character span and an <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="89f87-314">Zapisuje przy użyciu domyślnego <xref:System.Buffers.StandardFormat> (czyli "G"), na przykład 32767. <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="89f87-314">Writes the <xref:System.Int32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="89f87-315">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-315">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-316">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-316">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-317">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-317">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-318">Zakodowana w formacie UTF-16 nazwa właściwości obiektu JSON, który ma być transzakodowany i zapisany jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-318">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-319">Wartość, która ma zostać zapisywana jako liczba JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-319">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-320">Zapisuje nazwę właściwości określoną jako zakres znaków tylko do odczytu i <see cref="T:System.Int64" /> wartość (jako numer JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-320">Writes a property name specified as a read-only character span and an <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="89f87-321">Zapisuje przy użyciu domyślnego <xref:System.Buffers.StandardFormat> (czyli "G"), na przykład 32767. <xref:System.Int64></span><span class="sxs-lookup"><span data-stu-id="89f87-321">Writes the <xref:System.Int64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="89f87-322">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-322">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-323">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-323">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-324">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-324">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-325">Zakodowana w formacie UTF-16 nazwa właściwości obiektu JSON, który ma być transzakodowany i zapisany jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-325">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-326">Wartość, która ma zostać zapisywana jako liczba JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-326">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-327">Zapisuje nazwę właściwości określoną jako zakres znaków tylko do odczytu i <see cref="T:System.Single" /> wartość (jako numer JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-327">Writes a property name specified as a read-only character span and a <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="89f87-328">Zapisuje przy użyciu domyślnego <xref:System.Buffers.StandardFormat> (czyli "G"). <xref:System.Single></span><span class="sxs-lookup"><span data-stu-id="89f87-328">Writes the <xref:System.Single> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="89f87-329">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-329">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-330">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-330">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-331">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-331">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-332">Zakodowana w formacie UTF-16 nazwa właściwości obiektu JSON, który ma być transzakodowany i zapisany jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-332">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-333">Wartość, która ma zostać zapisywana jako liczba JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-333">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-334">Zapisuje nazwę właściwości określoną jako zakres znaków tylko do odczytu i <see cref="T:System.UInt32" /> wartość (jako numer JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-334">Writes a property name specified as a read-only character span and a <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="89f87-335">Zapisuje przy użyciu domyślnego <xref:System.Buffers.StandardFormat> (czyli "G"), na przykład 32767. <xref:System.UInt32></span><span class="sxs-lookup"><span data-stu-id="89f87-335">Writes the <xref:System.UInt32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="89f87-336">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-336">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-337">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-337">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-338">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-338">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-339">Zakodowana w formacie UTF-16 nazwa właściwości obiektu JSON, który ma być transzakodowany i zapisany jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-339">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-340">Wartość, która ma zostać zapisywana jako liczba JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-340">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-341">Zapisuje nazwę właściwości określoną jako zakres znaków tylko do odczytu i <see cref="T:System.UInt64" /> wartość (jako numer JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-341">Writes a property name specified as a read-only character span and a <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="89f87-342">Zapisuje przy użyciu domyślnego <xref:System.Buffers.StandardFormat> (czyli "G"), na przykład 32767. <xref:System.UInt64></span><span class="sxs-lookup"><span data-stu-id="89f87-342">Writes the <xref:System.UInt64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="89f87-343">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-343">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-344">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-344">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-345">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-345">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-346">Zakodowana w formacie UTF-16 nazwa właściwości obiektu JSON, który ma być transzakodowany i zapisany jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-346">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-347">Wartość, która ma zostać zapisywana jako liczba JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-347">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-348">Zapisuje nazwę właściwości określoną jako ciąg i <see cref="T:System.Decimal" /> wartość (jako numer JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-348">Writes a property name specified as a string and a <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="89f87-349">Zapisuje przy użyciu domyślnego <xref:System.Buffers.StandardFormat> (czyli "G"). <xref:System.Decimal></span><span class="sxs-lookup"><span data-stu-id="89f87-349">Writes the <xref:System.Decimal> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="89f87-350">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-350">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-351">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-351">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-352">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-352">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-353">Zakodowana w formacie UTF-16 nazwa właściwości obiektu JSON, który ma być transzakodowany i zapisany jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-353">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-354">Wartość, która ma zostać zapisywana jako liczba JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-354">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-355">Zapisuje nazwę właściwości określoną jako ciąg i <see cref="T:System.Double" /> wartość (jako numer JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-355">Writes a property name specified as a string and a <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="89f87-356">Zapisuje przy użyciu domyślnego <xref:System.Buffers.StandardFormat> (czyli "G"). <xref:System.Double></span><span class="sxs-lookup"><span data-stu-id="89f87-356">Writes the <xref:System.Double> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="89f87-357">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-357">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-358">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-358">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-359">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-359">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-360">Zakodowana w formacie UTF-16 nazwa właściwości obiektu JSON, który ma być transzakodowany i zapisany jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-360">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-361">Wartość, która ma zostać zapisywana jako liczba JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-361">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-362">Zapisuje nazwę właściwości określoną jako ciąg i <see cref="T:System.Int32" /> wartość (jako numer JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-362">Writes a property name specified as a string and an <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="89f87-363">Zapisuje przy użyciu domyślnego <xref:System.Buffers.StandardFormat> (czyli "G"), na przykład 32767. <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="89f87-363">Writes the <xref:System.Int32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="89f87-364">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-364">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-365">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-365">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-366">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-366">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-367">Zakodowana w formacie UTF-16 nazwa właściwości obiektu JSON, który ma być transzakodowany i zapisany jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-367">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-368">Wartość, która ma zostać zapisywana jako liczba JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-368">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-369">Zapisuje nazwę właściwości określoną jako ciąg i <see cref="T:System.Int64" /> wartość (jako numer JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-369">Writes a property name specified as a string and an <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="89f87-370">Zapisuje przy użyciu domyślnego <xref:System.Buffers.StandardFormat> (czyli "G"), na przykład 32767. <xref:System.Int64></span><span class="sxs-lookup"><span data-stu-id="89f87-370">Writes the <xref:System.Int64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="89f87-371">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-371">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-372">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-372">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-373">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-373">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-374">Zakodowana w formacie UTF-16 nazwa właściwości obiektu JSON, który ma być transzakodowany i zapisany jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-374">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-375">Wartość, która ma zostać zapisywana jako liczba JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-375">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-376">Zapisuje nazwę właściwości określoną jako ciąg i <see cref="T:System.Single" /> wartość (jako numer JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-376">Writes a property name specified as a string and a <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="89f87-377">Zapisuje przy użyciu domyślnego <xref:System.Buffers.StandardFormat> (czyli "G"). <xref:System.Single></span><span class="sxs-lookup"><span data-stu-id="89f87-377">Writes the <xref:System.Single> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="89f87-378">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-378">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-379">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-379">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-380">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-380">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-381">Zakodowana w formacie UTF-16 nazwa właściwości obiektu JSON, który ma być transzakodowany i zapisany jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-381">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-382">Wartość, która ma zostać zapisywana jako liczba JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-382">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-383">Zapisuje nazwę właściwości określoną jako ciąg i <see cref="T:System.UInt32" /> wartość (jako numer JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-383">Writes a property name specified as a string and a <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="89f87-384">Zapisuje przy użyciu domyślnego <xref:System.Buffers.StandardFormat> (czyli "G"), na przykład 32767. <xref:System.UInt32></span><span class="sxs-lookup"><span data-stu-id="89f87-384">Writes the <xref:System.UInt32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="89f87-385">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-385">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-386">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-386">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-387">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-387">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-388">Zakodowana w formacie UTF-16 nazwa właściwości obiektu JSON, który ma być transzakodowany i zapisany jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-388">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-389">Wartość, która ma zostać zapisywana jako liczba JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-389">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-390">Zapisuje nazwę właściwości określoną jako ciąg i <see cref="T:System.UInt64" /> wartość (jako numer JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-390">Writes a property name specified as a string and a <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="89f87-391">Zapisuje przy użyciu domyślnego <xref:System.Buffers.StandardFormat> (czyli "G"), na przykład 32767. <xref:System.UInt64></span><span class="sxs-lookup"><span data-stu-id="89f87-391">Writes the <xref:System.UInt64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="89f87-392">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-392">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-393">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-393">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-394">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-394">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-395">Nazwa właściwości kodowanej w formacie JSON obiektu JSON, która ma zostać poddana transkodowaniem i zapisywana jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-395">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-396">Wartość, która ma zostać zapisywana jako liczba JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-396">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-397">Zapisuje wstępnie zakodowaną nazwę i <see cref="T:System.Decimal" /> wartość właściwości (jako numer JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-397">Writes the pre-encoded property name and <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="89f87-398">Zapisuje przy użyciu domyślnego <xref:System.Buffers.StandardFormat> (czyli "G"). <xref:System.Decimal></span><span class="sxs-lookup"><span data-stu-id="89f87-398">Writes the <xref:System.Decimal> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="89f87-399">Nazwę właściwości należy już zmienić, gdy wystąpienie <xref:System.Text.Json.JsonEncodedText> zostało utworzone.</span><span class="sxs-lookup"><span data-stu-id="89f87-399">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-400">Sprawdzanie poprawności jest włączone, a ta metoda spowoduje zapisanie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-400">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-401">Nazwa właściwości kodowanej w formacie JSON obiektu JSON, która ma zostać poddana transkodowaniem i zapisywana jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-401">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-402">Wartość, która ma zostać zapisywana jako liczba JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-402">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-403">Zapisuje wstępnie zakodowaną nazwę i <see cref="T:System.Double" /> wartość właściwości (jako numer JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-403">Writes the pre-encoded property name and <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="89f87-404">Zapisuje przy użyciu domyślnego <xref:System.Buffers.StandardFormat> (czyli "G"). <xref:System.Double></span><span class="sxs-lookup"><span data-stu-id="89f87-404">Writes the <xref:System.Double> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="89f87-405">Nazwę właściwości należy już zmienić, gdy wystąpienie <xref:System.Text.Json.JsonEncodedText> zostało utworzone.</span><span class="sxs-lookup"><span data-stu-id="89f87-405">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-406">Sprawdzanie poprawności jest włączone, a ta metoda spowoduje zapisanie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-406">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-407">Nazwa właściwości kodowanej w formacie JSON obiektu JSON, która ma zostać poddana transkodowaniem i zapisywana jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-407">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-408">Wartość, która ma zostać zapisywana jako liczba JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-408">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-409">Zapisuje wstępnie zakodowaną nazwę i <see cref="T:System.Int32" /> wartość właściwości (jako numer JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-409">Writes the pre-encoded property name and <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="89f87-410">Zapisuje przy użyciu domyślnego <xref:System.Buffers.StandardFormat> (czyli "G"), na przykład 32767. <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="89f87-410">Writes the <xref:System.Int32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="89f87-411">Nazwę właściwości należy już zmienić, gdy wystąpienie <xref:System.Text.Json.JsonEncodedText> zostało utworzone.</span><span class="sxs-lookup"><span data-stu-id="89f87-411">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-412">Sprawdzanie poprawności jest włączone, a ta metoda spowoduje zapisanie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-412">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-413">Nazwa właściwości kodowanej w formacie JSON obiektu JSON, która ma zostać poddana transkodowaniem i zapisywana jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-413">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-414">Wartość, która ma zostać zapisywana jako liczba JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-414">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-415">Zapisuje wstępnie zakodowaną nazwę i <see cref="T:System.Int64" /> wartość właściwości (jako numer JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-415">Writes the pre-encoded property name and <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="89f87-416">Zapisuje przy użyciu domyślnego <xref:System.Buffers.StandardFormat> (to jest "G"), na przykład 32767. <xref:System.Int64></span><span class="sxs-lookup"><span data-stu-id="89f87-416">Writes the <xref:System.Int64> using the default <xref:System.Buffers.StandardFormat> (this is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="89f87-417">Nazwę właściwości należy już zmienić, gdy wystąpienie <xref:System.Text.Json.JsonEncodedText> zostało utworzone.</span><span class="sxs-lookup"><span data-stu-id="89f87-417">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-418">Sprawdzanie poprawności jest włączone, a ta metoda spowoduje zapisanie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-418">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-419">Nazwa właściwości kodowanej w formacie JSON obiektu JSON, która ma zostać poddana transkodowaniem i zapisywana jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-419">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-420">Wartość, która ma zostać zapisywana jako liczba JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-420">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-421">Zapisuje wstępnie zakodowaną nazwę i <see cref="T:System.Single" /> wartość właściwości (jako numer JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-421">Writes the pre-encoded property name and <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="89f87-422">Zapisuje przy użyciu domyślnego <xref:System.Buffers.StandardFormat> (czyli "G"). <xref:System.Single></span><span class="sxs-lookup"><span data-stu-id="89f87-422">Writes the <xref:System.Single> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="89f87-423">Nazwę właściwości należy już zmienić, gdy wystąpienie <xref:System.Text.Json.JsonEncodedText> zostało utworzone.</span><span class="sxs-lookup"><span data-stu-id="89f87-423">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-424">Sprawdzanie poprawności jest włączone, a ta metoda spowoduje zapisanie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-424">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-425">Nazwa właściwości kodowanej w formacie JSON obiektu JSON, która ma zostać poddana transkodowaniem i zapisywana jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-425">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-426">Wartość, która ma zostać zapisywana jako liczba JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-426">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-427">Zapisuje wstępnie zakodowaną nazwę i <see cref="T:System.UInt32" /> wartość właściwości (jako numer JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-427">Writes the pre-encoded property name and <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="89f87-428">Zapisuje przy użyciu domyślnego <xref:System.Buffers.StandardFormat> (czyli "G"), na przykład 32767. <xref:System.UInt32></span><span class="sxs-lookup"><span data-stu-id="89f87-428">Writes the <xref:System.UInt32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="89f87-429">Nazwę właściwości należy już zmienić, gdy wystąpienie <xref:System.Text.Json.JsonEncodedText> zostało utworzone.</span><span class="sxs-lookup"><span data-stu-id="89f87-429">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-430">Sprawdzanie poprawności jest włączone, a ta metoda spowoduje zapisanie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-430">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-431">Nazwa właściwości kodowanej w formacie JSON obiektu JSON, która ma zostać poddana transkodowaniem i zapisywana jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-431">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-432">Wartość, która ma zostać zapisywana jako liczba JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-432">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-433">Zapisuje wstępnie zakodowaną nazwę i <see cref="T:System.UInt64" /> wartość właściwości (jako numer JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-433">Writes the pre-encoded property name and <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="89f87-434">Zapisuje przy użyciu domyślnego <xref:System.Buffers.StandardFormat> (czyli "G"), na przykład 32767. <xref:System.UInt64></span><span class="sxs-lookup"><span data-stu-id="89f87-434">Writes the <xref:System.UInt64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="89f87-435">Nazwę właściwości należy już zmienić, gdy wystąpienie <xref:System.Text.Json.JsonEncodedText> zostało utworzone.</span><span class="sxs-lookup"><span data-stu-id="89f87-435">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-436">Sprawdzanie poprawności jest włączone, a ta metoda spowoduje zapisanie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-436">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="89f87-437">Wartość, która ma być zapisywana jako liczba JSON jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-437">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="89f87-438"><see cref="T:System.Decimal" /> Zapisuje wartość (jako liczbę JSON) jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-438">Writes a <see cref="T:System.Decimal" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="89f87-439">Ta metoda zapisuje <xref:System.Decimal> wartość przy użyciu wartości domyślnej <xref:System.Buffers.StandardFormat> (czyli "G").</span><span class="sxs-lookup"><span data-stu-id="89f87-439">This method writes the <xref:System.Decimal> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-440">Sprawdzanie poprawności jest włączone, a operacja spowodowałaby zapisanie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-440">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : double -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="89f87-441">Wartość, która ma być zapisywana jako liczba JSON jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-441">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="89f87-442"><see cref="T:System.Double" /> Zapisuje wartość (jako liczbę JSON) jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-442">Writes a <see cref="T:System.Double" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="89f87-443">Ta metoda zapisuje <xref:System.Double> wartość przy użyciu wartości domyślnej <xref:System.Buffers.StandardFormat> (czyli "G").</span><span class="sxs-lookup"><span data-stu-id="89f87-443">This method writes the <xref:System.Double> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-444">Sprawdzanie poprawności jest włączone, a operacja spowodowałaby zapisanie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-444">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="89f87-445">Wartość, która ma być zapisywana jako liczba JSON jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-445">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="89f87-446"><see cref="T:System.Int32" /> Zapisuje wartość (jako liczbę JSON) jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-446">Writes an <see cref="T:System.Int32" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="89f87-447">Ta metoda zapisuje <xref:System.Int32> wartość przy użyciu wartości domyślnej <xref:System.Buffers.StandardFormat> (czyli "G").</span><span class="sxs-lookup"><span data-stu-id="89f87-447">This method writes the <xref:System.Int32> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span> <span data-ttu-id="89f87-448">Na przykład 32767.</span><span class="sxs-lookup"><span data-stu-id="89f87-448">For example, 32767.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-449">Sprawdzanie poprawności jest włączone, a operacja spowodowałaby zapisanie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-449">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="89f87-450">Wartość, która ma być zapisywana jako liczba JSON jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-450">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="89f87-451"><see cref="T:System.Int64" /> Zapisuje wartość (jako liczbę JSON) jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-451">Writes an <see cref="T:System.Int64" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="89f87-452">Ta metoda zapisuje <xref:System.Int64> wartość przy użyciu wartości domyślnej <xref:System.Buffers.StandardFormat> (czyli "G").</span><span class="sxs-lookup"><span data-stu-id="89f87-452">This method writes the <xref:System.Int64> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span> <span data-ttu-id="89f87-453">Na przykład 32767.</span><span class="sxs-lookup"><span data-stu-id="89f87-453">For example, 32767.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-454">Sprawdzanie poprawności jest włączone, a operacja spowodowałaby zapisanie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-454">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : single -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="89f87-455">Wartość, która ma być zapisywana jako liczba JSON jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-455">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="89f87-456"><see cref="T:System.Single" /> Zapisuje wartość (jako liczbę JSON) jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-456">Writes a <see cref="T:System.Single" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="89f87-457">Ta metoda zapisuje <xref:System.Single> wartość przy użyciu wartości domyślnej <xref:System.Buffers.StandardFormat> (czyli "G").</span><span class="sxs-lookup"><span data-stu-id="89f87-457">This method writes the <xref:System.Single> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-458">Sprawdzanie poprawności jest włączone, a operacja spowodowałaby zapisanie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-458">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="89f87-459">Wartość, która ma być zapisywana jako liczba JSON jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-459">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="89f87-460"><see cref="T:System.UInt32" /> Zapisuje wartość (jako liczbę JSON) jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-460">Writes a <see cref="T:System.UInt32" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="89f87-461">Ta metoda zapisuje <xref:System.UInt32> wartość przy użyciu wartości domyślnej <xref:System.Buffers.StandardFormat> (czyli "G").</span><span class="sxs-lookup"><span data-stu-id="89f87-461">This method writes the <xref:System.UInt32> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span> <span data-ttu-id="89f87-462">Na przykład 32767.</span><span class="sxs-lookup"><span data-stu-id="89f87-462">For example, 32767.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-463">Sprawdzanie poprawności jest włączone, a operacja spowodowałaby zapisanie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-463">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="89f87-464">Wartość, która ma być zapisywana jako liczba JSON jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-464">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="89f87-465"><see cref="T:System.UInt64" /> Zapisuje wartość (jako liczbę JSON) jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-465">Writes a <see cref="T:System.UInt64" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="89f87-466">Ta metoda zapisuje <xref:System.UInt64> wartość przy użyciu wartości domyślnej <xref:System.Buffers.StandardFormat> (czyli "G").</span><span class="sxs-lookup"><span data-stu-id="89f87-466">This method writes the <xref:System.UInt64> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span> <span data-ttu-id="89f87-467">Na przykład 32767.</span><span class="sxs-lookup"><span data-stu-id="89f87-467">For example, 32767.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-468">Sprawdzanie poprawności jest włączone, a operacja spowodowałaby zapisanie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-468">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WritePropertyName">
      <MemberSignature Language="C#" Value="public void WritePropertyName (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WritePropertyName(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WritePropertyName (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WritePropertyName(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WritePropertyName : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WritePropertyName utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WritePropertyName">
      <MemberSignature Language="C#" Value="public void WritePropertyName (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WritePropertyName(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WritePropertyName (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WritePropertyName(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WritePropertyName : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WritePropertyName propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WritePropertyName">
      <MemberSignature Language="C#" Value="public void WritePropertyName (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WritePropertyName(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WritePropertyName (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WritePropertyName(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WritePropertyName : string -&gt; unit" Usage="utf8JsonWriter.WritePropertyName propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WritePropertyName">
      <MemberSignature Language="C#" Value="public void WritePropertyName (System.Text.Json.JsonEncodedText propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WritePropertyName(valuetype System.Text.Json.JsonEncodedText propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WritePropertyName (propertyName As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WritePropertyName(System::Text::Json::JsonEncodedText propertyName);" />
      <MemberSignature Language="F#" Value="member this.WritePropertyName : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WritePropertyName propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray();" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="89f87-469">Zapisuje początek tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-469">Writes the beginning of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-470">Głębokość JSON przekracza maksymalną głębokość wynoszącą 1000.</span><span class="sxs-lookup"><span data-stu-id="89f87-470">The depth of the JSON exceeds the maximum depth of 1000.</span></span>

<span data-ttu-id="89f87-471">—lub—</span><span class="sxs-lookup"><span data-stu-id="89f87-471">-or-</span></span>

<span data-ttu-id="89f87-472">Sprawdzanie poprawności jest włączone, a ta operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-472">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartArray utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="89f87-473">Zakodowana w formacie UTF-8 nazwa właściwości tablicy JSON do zapisania.</span><span class="sxs-lookup"><span data-stu-id="89f87-473">The UTF-8 encoded property name of the JSON array to be written.</span></span></param>
        <summary><span data-ttu-id="89f87-474">Zapisuje początkową tablicę JSON z nazwą właściwości określoną jako klucz tylko do odczytu w bajtach.</span><span class="sxs-lookup"><span data-stu-id="89f87-474">Writes the beginning of a JSON array with a property name specified as a read-only span of bytes as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="89f87-475">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-475">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-476">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-476">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-477">Głębokość JSON przekracza maksymalną głębokość wynoszącą 1000.</span><span class="sxs-lookup"><span data-stu-id="89f87-477">The depth of the JSON exceeds the maximum depth of 1000.</span></span>

<span data-ttu-id="89f87-478">—lub—</span><span class="sxs-lookup"><span data-stu-id="89f87-478">-or-</span></span>
       
<span data-ttu-id="89f87-479">Sprawdzanie poprawności jest włączone, a ta operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-479">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartArray propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-480">Zakodowana w formacie UTF-16 nazwa właściwości tablicy JSON do przekodowania i pisania jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-480">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="89f87-481">Zapisuje początek tablicy JSON z nazwą właściwości określoną jako klucz tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="89f87-481">Writes the beginning of a JSON array with a property name specified as a read-only character span as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="89f87-482">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-482">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-483">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-483">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-484">Głębokość JSON przekracza maksymalną głębokość wynoszącą 1000.</span><span class="sxs-lookup"><span data-stu-id="89f87-484">The depth of the JSON exceeds the maximum depth of 1000.</span></span>

<span data-ttu-id="89f87-485">—lub—</span><span class="sxs-lookup"><span data-stu-id="89f87-485">-or-</span></span>
       
<span data-ttu-id="89f87-486">Sprawdzanie poprawności jest włączone, a ta operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-486">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : string -&gt; unit" Usage="utf8JsonWriter.WriteStartArray propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-487">Zakodowana w formacie UTF-16 nazwa właściwości tablicy JSON do przekodowania i pisania jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-487">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="89f87-488">Zapisuje początek tablicy JSON o nazwie właściwości określonej jako ciąg jako klucz.</span><span class="sxs-lookup"><span data-stu-id="89f87-488">Writes the beginning of a JSON array with a property name specified as a string as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="89f87-489">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-489">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-490">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-490">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-491">Głębokość JSON przekracza maksymalną głębokość wynoszącą 1000.</span><span class="sxs-lookup"><span data-stu-id="89f87-491">The depth of the JSON exceeds the maximum depth of 1000.</span></span>

<span data-ttu-id="89f87-492">—lub—</span><span class="sxs-lookup"><span data-stu-id="89f87-492">-or-</span></span>
       
<span data-ttu-id="89f87-493">Sprawdzanie poprawności jest włączone, a ta operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-493">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (System.Text.Json.JsonEncodedText propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.Text.Json.JsonEncodedText propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(System::Text::Json::JsonEncodedText propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteStartArray propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-494">Nazwa właściwości kodowanej w formacie JSON tablicy JSON, która ma zostać poddana transkodowaniem i zapisywana jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-494">The JSON encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="89f87-495">Zapisuje początek tablicy JSON z wstępnie zakodowaną nazwą właściwości jako kluczem.</span><span class="sxs-lookup"><span data-stu-id="89f87-495">Writes the beginning of a JSON array with a pre-encoded property name as the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="89f87-496">Nazwę właściwości należy już zmienić, gdy wystąpienie <xref:System.Text.Json.JsonEncodedText> zostało utworzone.</span><span class="sxs-lookup"><span data-stu-id="89f87-496">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-497">Głębokość JSON przekroczyła maksymalną głębokość wynoszącą 1000.</span><span class="sxs-lookup"><span data-stu-id="89f87-497">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>
    
<span data-ttu-id="89f87-498">oraz</span><span class="sxs-lookup"><span data-stu-id="89f87-498">- or -</span></span>

<span data-ttu-id="89f87-499">Sprawdzanie poprawności jest włączone, a ta metoda spowoduje zapisanie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-499">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject();" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="89f87-500">Zapisuje początek obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-500">Writes the beginning of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-501">Głębokość JSON przekracza maksymalną głębokość wynoszącą 1000.</span><span class="sxs-lookup"><span data-stu-id="89f87-501">The depth of the JSON exceeds the maximum depth of 1000.</span></span>

<span data-ttu-id="89f87-502">—lub—</span><span class="sxs-lookup"><span data-stu-id="89f87-502">-or-</span></span>

<span data-ttu-id="89f87-503">Sprawdzanie poprawności jest włączone, a operacja spowodowałaby zapisanie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-503">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartObject utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="89f87-504">Zakodowana w formacie UTF-8 nazwa właściwości obiektu JSON, który ma zostać zapisany.</span><span class="sxs-lookup"><span data-stu-id="89f87-504">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <summary><span data-ttu-id="89f87-505">Zapisuje początek obiektu JSON z nazwą właściwości określoną jako klucz tylko do odczytu w postaci bajtów.</span><span class="sxs-lookup"><span data-stu-id="89f87-505">Writes the beginning of a JSON object with a property name specified as a read-only span of bytes as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="89f87-506">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-506">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-507">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-507">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-508">Głębokość JSON przekracza maksymalną głębokość wynoszącą 1000.</span><span class="sxs-lookup"><span data-stu-id="89f87-508">The depth of the JSON exceeds the maximum depth of 1000.</span></span> 

<span data-ttu-id="89f87-509">—lub—</span><span class="sxs-lookup"><span data-stu-id="89f87-509">-or-</span></span>
       
<span data-ttu-id="89f87-510">Sprawdzanie poprawności jest włączone, a ta operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-510">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartObject propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-511">Zakodowana w formacie UTF-16 nazwa właściwości obiektu JSON, który ma być transzakodowany i zapisany jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-511">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="89f87-512">Zapisuje początek obiektu JSON z nazwą właściwości specififed jako klucz, który jest tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="89f87-512">Writes the beginning of a JSON object with a property name specififed as a read-only character span as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="89f87-513">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-513">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-514">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-514">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-515">Głębokość JSON przekracza maksymalną głębokość wynoszącą 1000.</span><span class="sxs-lookup"><span data-stu-id="89f87-515">The depth of the JSON exceeds the maximum depth of 1000.</span></span> 

<span data-ttu-id="89f87-516">—lub—</span><span class="sxs-lookup"><span data-stu-id="89f87-516">-or-</span></span>
       
<span data-ttu-id="89f87-517">Sprawdzanie poprawności jest włączone, a ta operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-517">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : string -&gt; unit" Usage="utf8JsonWriter.WriteStartObject propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-518">Zakodowana w formacie UTF-16 nazwa właściwości obiektu JSON, który ma być transzakodowany i zapisany jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-518">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="89f87-519">Zapisuje początek obiektu JSON z nazwą właściwości określoną jako ciąg jako klucz.</span><span class="sxs-lookup"><span data-stu-id="89f87-519">Writes the beginning of a JSON object with a property name specified as a string as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="89f87-520">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-520">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-521">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-521">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-522">Głębokość JSON przekracza maksymalną głębokość wynoszącą 1000.</span><span class="sxs-lookup"><span data-stu-id="89f87-522">The depth of the JSON exceeds the maximum depth of 1000.</span></span> 

<span data-ttu-id="89f87-523">—lub—</span><span class="sxs-lookup"><span data-stu-id="89f87-523">-or-</span></span>
       
<span data-ttu-id="89f87-524">Sprawdzanie poprawności jest włączone, a ta operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-524">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (System.Text.Json.JsonEncodedText propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.Text.Json.JsonEncodedText propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(System::Text::Json::JsonEncodedText propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteStartObject propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-525">Nazwa właściwości kodowanej w formacie JSON obiektu JSON, która ma zostać poddana transkodowaniem i zapisywana jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-525">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="89f87-526">Zapisuje początek obiektu JSON z wstępnie zakodowaną nazwą właściwości jako kluczem.</span><span class="sxs-lookup"><span data-stu-id="89f87-526">Writes the beginning of a JSON object with a pre-encoded property name as the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="89f87-527">Nazwę właściwości należy już zmienić, gdy wystąpienie <xref:System.Text.Json.JsonEncodedText> zostało utworzone.</span><span class="sxs-lookup"><span data-stu-id="89f87-527">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-528">Głębokość JSON przekroczyła maksymalną głębokość wynoszącą 1000.</span><span class="sxs-lookup"><span data-stu-id="89f87-528">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>
          
<span data-ttu-id="89f87-529">oraz</span><span class="sxs-lookup"><span data-stu-id="89f87-529">- or -</span></span>

<span data-ttu-id="89f87-530">Sprawdzanie poprawności jest włączone, a ta metoda spowoduje zapisanie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-530">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="89f87-531">Zakodowana w formacie UTF-8 nazwa właściwości obiektu JSON, który ma zostać zapisany.</span><span class="sxs-lookup"><span data-stu-id="89f87-531">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-532">Wartość, która ma być zapisywana jako ciąg JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-532">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-533">Zapisuje nazwę właściwości UTF-8 i <see cref="T:System.DateTime" /> wartość (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-533">Writes a UTF-8 property name and a <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="89f87-534">Zapisuje przy użyciu funkcji Round-----------("O") <xref:System.Buffers.StandardFormat>. <xref:System.DateTime></span><span class="sxs-lookup"><span data-stu-id="89f87-534">Writes the <xref:System.DateTime> using the round-trippable ('O') <xref:System.Buffers.StandardFormat>.</span></span> <span data-ttu-id="89f87-535">Na przykład 2017-06-12T05:30:45.7680000.</span><span class="sxs-lookup"><span data-stu-id="89f87-535">For example, 2017-06-12T05:30:45.7680000.</span></span> <span data-ttu-id="89f87-536">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-536">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-537">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-537">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-538">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-538">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="89f87-539">Zakodowana w formacie UTF-8 nazwa właściwości obiektu JSON, który ma zostać zapisany.</span><span class="sxs-lookup"><span data-stu-id="89f87-539">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-540">Wartość, która ma być zapisywana jako ciąg JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-540">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-541">Zapisuje nazwę właściwości UTF-8 i <see cref="T:System.DateTimeOffset" /> wartość (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-541">Writes a UTF-8 property name and a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="89f87-542">Zapisuje przy użyciu funkcji Round-------------------------------------- <xref:System.Buffers.StandardFormat> <xref:System.DateTimeOffset></span><span class="sxs-lookup"><span data-stu-id="89f87-542">Writes the <xref:System.DateTimeOffset> using the round-trippable ('O') <xref:System.Buffers.StandardFormat>; for example, 2017-06-12T05:30:45.7680000-07:00.</span></span> <span data-ttu-id="89f87-543">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-543">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-544">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-544">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-545">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-545">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="89f87-546">Zakodowana w formacie UTF-8 nazwa właściwości obiektu JSON, który ma zostać zapisany.</span><span class="sxs-lookup"><span data-stu-id="89f87-546">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-547">Wartość, która ma być zapisywana jako ciąg JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-547">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-548">Zapisuje nazwę właściwości UTF-8 i <see cref="T:System.Guid" /> wartość (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-548">Writes a UTF-8 property name and a <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="89f87-549">Zapisuje przy użyciu wartości domyślnej <xref:System.Buffers.StandardFormat> (czyli ")", w postaci: nnnnnnnn-nnnn-nnnn-nnnnnnnnnnnn. <xref:System.Guid></span><span class="sxs-lookup"><span data-stu-id="89f87-549">Writes the <xref:System.Guid> using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), in the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span> <span data-ttu-id="89f87-550">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-550">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-551">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-551">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-552">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-552">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="89f87-553">Zakodowana w formacie UTF-8 nazwa właściwości obiektu JSON, który ma zostać zapisany.</span><span class="sxs-lookup"><span data-stu-id="89f87-553">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="89f87-554">Zakodowana wartość UTF-8 jako ciąg JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-554">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-555">Zapisuje nazwę właściwości UTF-8 i wartość tekstową UTF-8 (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-555">Writes a UTF-8 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="89f87-556">Przed zapisaniem nazwa właściwości i wartość są wyprowadzane.</span><span class="sxs-lookup"><span data-stu-id="89f87-556">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-557">Określona nazwa właściwości lub wartość jest zbyt duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-557">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-558">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-558">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="89f87-559">Zakodowana w formacie UTF-8 nazwa właściwości obiektu JSON, który ma zostać zapisany.</span><span class="sxs-lookup"><span data-stu-id="89f87-559">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-560">Zakodowana wartość UTF-16 jest zapisywana jako ciąg JSON z kodowaniem UTF-8 w ramach pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-560">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-561">Zapisuje nazwy właściwości UTF-8 i UTF-16 (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-561">Writes a UTF-8 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="89f87-562">Przed zapisaniem nazwa właściwości i wartość są wyprowadzane.</span><span class="sxs-lookup"><span data-stu-id="89f87-562">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-563">Określona nazwa właściwości lub wartość jest zbyt duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-563">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-564">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-564">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * string -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="89f87-565">Zakodowana w formacie UTF-8 nazwa właściwości obiektu JSON, który ma zostać zapisany.</span><span class="sxs-lookup"><span data-stu-id="89f87-565">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-566">Zakodowana wartość UTF-16 jest zapisywana jako ciąg JSON z kodowaniem UTF-8 w ramach pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-566">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-567">Zapisuje nazwę właściwości UTF-8 i tekst (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-567">Writes a UTF-8 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="89f87-568">Przed zapisaniem nazwa właściwości i wartość są wyprowadzane.</span><span class="sxs-lookup"><span data-stu-id="89f87-568">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-569">Określona nazwa właściwości lub wartość jest zbyt duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-569">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-570">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-570">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="89f87-571">Zakodowana w formacie UTF-8 nazwa właściwości obiektu JSON, który ma zostać zapisany.</span><span class="sxs-lookup"><span data-stu-id="89f87-571">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-572">Zakodowana wartość JSON jest zapisywana jako ciąg JSON w formacie UTF-8 w ramach pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-572">The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-573">Zapisuje nazwę właściwości UTF-8 i wstępnie zakodowaną wartość (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-573">Writes the UTF-8 property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="89f87-574">Wartość powinna mieć już zmieniony znak ucieczki podczas tworzenia wystąpienia <xref:System.Text.Json.JsonEncodedText> .</span><span class="sxs-lookup"><span data-stu-id="89f87-574">The value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="89f87-575">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-575">The property name is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-576">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-576">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-577">Sprawdzanie poprawności jest włączone, a ta metoda spowoduje zapisanie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-577">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-578">Zakodowana w formacie UTF-16 nazwa właściwości obiektu JSON, który ma być transzakodowany i zapisany jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-578">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-579">Wartość, która ma być zapisywana jako ciąg JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-579">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-580">Zapisuje nazwę właściwości określoną jako zakres znaków tylko do odczytu i <see cref="T:System.DateTime" /> wartość (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-580">Writes a property name specified as a read-only character span and a <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="89f87-581">Zapisuje przy użyciu funkcji Round---------------------------------- <xref:System.Buffers.StandardFormat> <xref:System.DateTime></span><span class="sxs-lookup"><span data-stu-id="89f87-581">Writes the <xref:System.DateTime> using the round-trippable ('O') <xref:System.Buffers.StandardFormat>; for example, 2017-06-12T05:30:45.7680000.</span></span> <span data-ttu-id="89f87-582">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-582">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-583">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-583">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-584">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-584">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-585">Zakodowana w formacie UTF-16 nazwa właściwości obiektu JSON, który ma być transzakodowany i zapisany jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-585">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-586">Wartość, która ma być zapisywana jako ciąg JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-586">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-587">Zapisuje nazwę właściwości określoną jako zakres znaków tylko do odczytu i <see cref="T:System.DateTimeOffset" /> wartość (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-587">Writes a property name specified as a read-only character span and a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="89f87-588">Zapisuje przy użyciu funkcji Round-------------------------------------- <xref:System.Buffers.StandardFormat> <xref:System.DateTimeOffset></span><span class="sxs-lookup"><span data-stu-id="89f87-588">Writes the <xref:System.DateTimeOffset> using the round-trippable ('O') <xref:System.Buffers.StandardFormat>; for example, 2017-06-12T05:30:45.7680000-07:00.</span></span> <span data-ttu-id="89f87-589">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-589">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-590">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-590">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-591">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-591">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-592">Zakodowana w formacie UTF-16 nazwa właściwości obiektu JSON, który ma być transzakodowany i zapisany jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-592">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-593">Wartość, która ma być zapisywana jako ciąg JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-593">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-594">Zapisuje nazwę właściwości określoną jako zakres znaków tylko do odczytu i <see cref="T:System.Guid" /> wartość (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-594">Writes a property name specified as a read-only character span and a <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="89f87-595">Zapisuje przy użyciu wartości domyślnej <xref:System.Buffers.StandardFormat> (czyli ")", w postaci: nnnnnnnn-nnnn-nnnn-nnnnnnnnnnnn. <xref:System.Guid></span><span class="sxs-lookup"><span data-stu-id="89f87-595">Writes the <xref:System.Guid> using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), in the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span> <span data-ttu-id="89f87-596">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-596">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-597">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-597">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-598">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-598">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-599">Zakodowana w formacie UTF-16 nazwa właściwości obiektu JSON, który ma być transzakodowany i zapisany jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-599">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="89f87-600">Zakodowana wartość UTF-8 jako ciąg JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-600">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-601">Zapisuje nazwę właściwości UTF-16 i wartość tekstową UTF-8 (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-601">Writes a UTF-16 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="89f87-602">Przed zapisaniem nazwa właściwości i wartość są wyprowadzane.</span><span class="sxs-lookup"><span data-stu-id="89f87-602">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-603">Określona nazwa właściwości lub wartość jest zbyt duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-603">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-604">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-604">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-605">Zakodowana w formacie UTF-16 nazwa właściwości obiektu JSON, który ma być transzakodowany i zapisany jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-605">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-606">Zakodowana wartość UTF-16 jest zapisywana jako ciąg JSON z kodowaniem UTF-8 w ramach pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-606">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-607">Zapisuje nazwę właściwości UTF-16 i wartość tekstową UTF-16 (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-607">Writes a UTF-16 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="89f87-608">Przed zapisaniem nazwa właściwości i wartość są wyprowadzane.</span><span class="sxs-lookup"><span data-stu-id="89f87-608">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-609">Określona nazwa właściwości lub wartość jest zbyt duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-609">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-610">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-610">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * string -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-611">Zakodowana w formacie UTF-16 nazwa właściwości obiektu JSON, który ma być transzakodowany i zapisany jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-611">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-612">Zakodowana wartość UTF-16 jest zapisywana jako ciąg JSON z kodowaniem UTF-8 w ramach pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-612">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-613">Zapisuje nazwę właściwości UTF-16 i tekst (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-613">Writes a UTF-16 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="89f87-614">Przed zapisaniem nazwa właściwości i wartość są wyprowadzane.</span><span class="sxs-lookup"><span data-stu-id="89f87-614">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-615">Określona nazwa właściwości lub wartość jest zbyt duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-615">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-616">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-616">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-617">Nazwa właściwości obiektu JSON, który ma być transkodowane i zapisywana jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-617">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-618">Zakodowana wartość JSON jest zapisywana jako ciąg JSON w formacie UTF-8 w ramach pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-618">The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-619">Zapisuje nazwę właściwości i wstępnie zakodowaną wartość (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-619">Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="89f87-620">Wartość powinna mieć już zmieniony znak ucieczki podczas tworzenia wystąpienia <xref:System.Text.Json.JsonEncodedText> .</span><span class="sxs-lookup"><span data-stu-id="89f87-620">The value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="89f87-621">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-621">The property name is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-622">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-622">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-623">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-623">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-624">Zakodowana w formacie UTF-16 nazwa właściwości obiektu JSON, który ma być transzakodowany i zapisany jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-624">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-625">Wartość, która ma być zapisywana jako ciąg JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-625">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-626">Zapisuje nazwę właściwości określoną jako ciąg i <see cref="T:System.DateTime" /> wartość (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-626">Writes a property name specified as a string and a <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="89f87-627">Zapisuje przy użyciu funkcji Round---------------------------------- <xref:System.Buffers.StandardFormat> <xref:System.DateTime></span><span class="sxs-lookup"><span data-stu-id="89f87-627">Writes the <xref:System.DateTime> using the round-trippable ('O') <xref:System.Buffers.StandardFormat>; for example, 2017-06-12T05:30:45.7680000.</span></span> <span data-ttu-id="89f87-628">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-628">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-629">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-629">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-630">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-630">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-631">Zakodowana w formacie UTF-16 nazwa właściwości obiektu JSON, który ma być transzakodowany i zapisany jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-631">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-632">Wartość, która ma być zapisywana jako ciąg JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-632">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-633">Zapisuje nazwę właściwości określoną jako ciąg i <see cref="T:System.DateTimeOffset" /> wartość (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-633">Writes a property name specified as a string and a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="89f87-634">Zapisuje przy użyciu funkcji Round-------------------------------------- <xref:System.Buffers.StandardFormat> <xref:System.DateTimeOffset></span><span class="sxs-lookup"><span data-stu-id="89f87-634">Writes the <xref:System.DateTimeOffset> using the round-trippable ('O') <xref:System.Buffers.StandardFormat>; for example, 2017-06-12T05:30:45.7680000-07:00.</span></span> <span data-ttu-id="89f87-635">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-635">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-636">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-636">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-637">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-637">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-638">Zakodowana w formacie UTF-16 nazwa właściwości obiektu JSON, który ma być transzakodowany i zapisany jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-638">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-639">Wartość, która ma być zapisywana jako ciąg JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-639">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-640">Zapisuje nazwę właściwości określoną jako ciąg i <see cref="T:System.Guid" /> wartość (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-640">Writes a property name specified as a string and a <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="89f87-641">Zapisuje przy użyciu wartości domyślnej <xref:System.Buffers.StandardFormat> (czyli ")", w postaci: nnnnnnnn-nnnn-nnnn-nnnnnnnnnnnn. <xref:System.Guid></span><span class="sxs-lookup"><span data-stu-id="89f87-641">Writes the <xref:System.Guid> using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), in the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span> <span data-ttu-id="89f87-642">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-642">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-643">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-643">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-644">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-644">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-645">Zakodowana w formacie UTF-16 nazwa właściwości obiektu JSON, który ma być transzakodowany i zapisany jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-645">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="89f87-646">Zakodowana wartość UTF-8 jako ciąg JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-646">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-647">Zapisuje nazwę właściwości określoną jako ciąg i wartość tekstową UTF-8 (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-647">Writes a property name specified as a string and a UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="89f87-648">Przed zapisaniem nazwa właściwości i wartość są wyprowadzane.</span><span class="sxs-lookup"><span data-stu-id="89f87-648">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-649">Określona nazwa właściwości lub wartość jest zbyt duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-649">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-650">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-650">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-651">Zakodowana w formacie UTF-16 nazwa właściwości obiektu JSON, który ma być transzakodowany i zapisany jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-651">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-652">Zakodowana wartość UTF-16 jest zapisywana jako ciąg JSON z kodowaniem UTF-8 w ramach pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-652">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-653">Zapisuje nazwę właściwości określoną jako ciąg i wartość tekstową UTF-16 (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-653">Writes a property name specified as a string and a UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="89f87-654">Przed zapisaniem nazwa właściwości i wartość są wyprowadzane.</span><span class="sxs-lookup"><span data-stu-id="89f87-654">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-655">Określona nazwa właściwości lub wartość jest zbyt duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-655">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-656">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-656">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * string -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-657">Zakodowana w formacie UTF-16 nazwa właściwości obiektu JSON, który ma być transzakodowany i zapisany jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-657">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-658">Zakodowana wartość UTF-16 jest zapisywana jako ciąg JSON z kodowaniem UTF-8 w ramach pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-658">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-659">Zapisuje nazwę właściwości określoną jako ciąg i ciąg wartości tekstowej (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-659">Writes a property name specified as a string and a string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="89f87-660">Przed zapisaniem nazwa właściwości i wartość są wyprowadzane.</span><span class="sxs-lookup"><span data-stu-id="89f87-660">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-661">Określona nazwa właściwości lub wartość jest zbyt duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-661">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-662">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-662">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-663">Nazwa właściwości obiektu JSON, który ma być transkodowane i zapisywana jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-663">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-664">Zakodowana wartość JSON jest zapisywana jako ciąg JSON w formacie UTF-8 w ramach pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-664">The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-665">Zapisuje nazwę właściwości i wstępnie zakodowaną wartość (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-665">Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="89f87-666">Wartość powinna mieć już zmieniony znak ucieczki podczas tworzenia wystąpienia <xref:System.Text.Json.JsonEncodedText> .</span><span class="sxs-lookup"><span data-stu-id="89f87-666">The value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="89f87-667">Nazwa właściwości jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-667">The property name is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-668">Określona nazwa właściwości jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-668">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-669">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-669">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-670">Nazwa właściwości kodowanej w formacie JSON obiektu JSON, która ma zostać poddana transkodowaniem i zapisywana jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-670">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-671">Wartość, która ma być zapisywana jako ciąg JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-671">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-672">Zapisuje wstępnie zakodowaną nazwę i <see cref="T:System.DateTime" /> wartość właściwości (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-672">Writes the pre-encoded property name and <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="89f87-673">Zapisuje przy użyciu funkcji Round---------------------------------- <xref:System.Buffers.StandardFormat> <xref:System.DateTime></span><span class="sxs-lookup"><span data-stu-id="89f87-673">Writes the <xref:System.DateTime> using the round-trippable ('O') <xref:System.Buffers.StandardFormat>; for example, 2017-06-12T05:30:45.7680000.</span></span>

<span data-ttu-id="89f87-674">Nazwę właściwości należy już zmienić, gdy wystąpienie <xref:System.Text.Json.JsonEncodedText> zostało utworzone.</span><span class="sxs-lookup"><span data-stu-id="89f87-674">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-675">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-675">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-676">Nazwa właściwości kodowanej w formacie JSON obiektu JSON, która ma zostać poddana transkodowaniem i zapisywana jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-676">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-677">Wartość, która ma być zapisywana jako ciąg JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-677">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-678">Zapisuje wstępnie zakodowaną nazwę i <see cref="T:System.DateTimeOffset" /> wartość właściwości (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-678">Writes the pre-encoded property name and <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="89f87-679">Zapisuje przy użyciu funkcji Round-------------------------------------- <xref:System.Buffers.StandardFormat> <xref:System.DateTimeOffset></span><span class="sxs-lookup"><span data-stu-id="89f87-679">Writes the <xref:System.DateTimeOffset> using the round-trippable ('O') <xref:System.Buffers.StandardFormat>; for example, 2017-06-12T05:30:45.7680000-07:00.</span></span>

<span data-ttu-id="89f87-680">Nazwę właściwości należy już zmienić, gdy wystąpienie <xref:System.Text.Json.JsonEncodedText> zostało utworzone.</span><span class="sxs-lookup"><span data-stu-id="89f87-680">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-681">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-681">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-682">Nazwa właściwości kodowanej w formacie JSON obiektu JSON, która ma zostać poddana transkodowaniem i zapisywana jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-682">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-683">Wartość, która ma być zapisywana jako ciąg JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-683">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-684">Zapisuje wstępnie zakodowaną nazwę i <see cref="T:System.Guid" /> wartość właściwości (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-684">Writes the pre-encoded property name and <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="89f87-685">Zapisuje przy użyciu wartości domyślnej <xref:System.Buffers.StandardFormat> (czyli ")", w postaci: nnnnnnnn-nnnn-nnnn-nnnnnnnnnnnn. <xref:System.Guid></span><span class="sxs-lookup"><span data-stu-id="89f87-685">Writes the <xref:System.Guid> using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), in the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span>

<span data-ttu-id="89f87-686">Nazwę właściwości należy już zmienić, gdy wystąpienie <xref:System.Text.Json.JsonEncodedText> zostało utworzone.</span><span class="sxs-lookup"><span data-stu-id="89f87-686">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-687">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-687">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-688">Nazwa właściwości kodowanej w formacie JSON obiektu JSON, która ma zostać poddana transkodowaniem i zapisywana jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-688">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="89f87-689">Zakodowana wartość UTF-8 jako ciąg JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-689">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-690">Zapisuje wstępnie zakodowaną nazwę właściwości i wartość tekstową UTF-8 (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-690">Writes the pre-encoded property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="89f87-691">Nazwę właściwości należy już zmienić, gdy wystąpienie <xref:System.Text.Json.JsonEncodedText> zostało utworzone.</span><span class="sxs-lookup"><span data-stu-id="89f87-691">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="89f87-692">Wartość jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-692">The value is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-693">Określona wartość jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-693">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-694">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-694">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-695">Nazwa właściwości kodowanej w formacie JSON obiektu JSON, która ma zostać poddana transkodowaniem i zapisywana jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-695">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-696">Wartość, która ma być zapisywana jako ciąg JSON z kodowaniem UTF-8 w ramach pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-696">The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-697">Zapisuje wstępnie zakodowaną nazwę właściwości i wartość tekstową (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-697">Writes the pre-encoded property name and text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="89f87-698">Nazwę właściwości należy już zmienić, gdy wystąpienie <xref:System.Text.Json.JsonEncodedText> zostało utworzone.</span><span class="sxs-lookup"><span data-stu-id="89f87-698">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="89f87-699">Wartość jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-699">The value is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-700">Określona wartość jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-700">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-701">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-701">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * string -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-702">Nazwa właściwości kodowanej w formacie JSON obiektu JSON, która ma zostać poddana transkodowaniem i zapisywana jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-702">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-703">Wartość, która ma być zapisywana jako ciąg JSON z kodowaniem UTF-8 w ramach pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-703">The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-704">Zapisuje wstępnie zakodowaną nazwę właściwości i wartość tekstową ciągu (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-704">Writes the pre-encoded property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="89f87-705">Nazwę właściwości należy już zmienić, gdy wystąpienie <xref:System.Text.Json.JsonEncodedText> zostało utworzone.</span><span class="sxs-lookup"><span data-stu-id="89f87-705">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="89f87-706">Wartość jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-706">The value is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-707">Określona wartość jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-707">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-708">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-708">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="89f87-709">Nazwa właściwości kodowanej w formacie JSON obiektu JSON, która ma zostać poddana transkodowaniem i zapisywana jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="89f87-709">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="89f87-710">Zakodowana wartość JSON jest zapisywana jako ciąg JSON w formacie UTF-8 w ramach pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="89f87-710">The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="89f87-711">Zapisuje wstępnie zakodowaną nazwę właściwości i wstępnie zakodowaną wartość (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-711">Writes the pre-encoded property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="89f87-712">Nazwa właściwości i wartość powinna być już zmieniana podczas tworzenia wystąpienia <xref:System.Text.Json.JsonEncodedText> .</span><span class="sxs-lookup"><span data-stu-id="89f87-712">The property name and value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-713">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-713">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTime -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="89f87-714">Wartość, która ma być zapisywana jako ciąg JSON jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-714">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="89f87-715"><see cref="T:System.DateTime" /> Zapisuje wartość (jako ciąg JSON) jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-715">Writes a <see cref="T:System.DateTime" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="89f87-716">Ta metoda zapisuje <xref:System.DateTime> przy użyciu funkcji okrężnej ("O") <xref:System.Buffers.StandardFormat>.</span><span class="sxs-lookup"><span data-stu-id="89f87-716">This method writes the <xref:System.DateTime> using the round-trippable ('O') <xref:System.Buffers.StandardFormat>.</span></span> <span data-ttu-id="89f87-717">Na przykład 2017-06-12T05:30:45.7680000.</span><span class="sxs-lookup"><span data-stu-id="89f87-717">For example, 2017-06-12T05:30:45.7680000.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-718">Sprawdzanie poprawności jest włączone, a operacja spowodowałaby zapisanie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-718">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="89f87-719">Wartość, która ma być zapisywana jako ciąg JSON jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-719">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="89f87-720"><see cref="T:System.DateTimeOffset" /> Zapisuje wartość (jako ciąg JSON) jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-720">Writes a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="89f87-721">Ta metoda zapisuje <xref:System.DateTimeOffset> przy użyciu funkcji okrężnej ("O") <xref:System.Buffers.StandardFormat>.</span><span class="sxs-lookup"><span data-stu-id="89f87-721">This method writes the <xref:System.DateTimeOffset> using the round-trippable ('O') <xref:System.Buffers.StandardFormat>.</span></span> <span data-ttu-id="89f87-722">Na przykład 2017-06-12T05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="89f87-722">For example, 2017-06-12T05:30:45.7680000-07:00.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-723">Sprawdzanie poprawności jest włączone, a operacja spowodowałaby zapisanie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-723">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : Guid -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="89f87-724">Wartość, która ma być zapisywana jako ciąg JSON jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-724">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="89f87-725"><see cref="T:System.Guid" /> Zapisuje wartość (jako ciąg JSON) jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-725">Writes a <see cref="T:System.Guid" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[  

<span data-ttu-id="89f87-726">Ta metoda zapisuje <xref:System.Guid> wartość przy użyciu wartości domyślnej <xref:System.Buffers.StandardFormat> (czyli "'d"), w postaci: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span><span class="sxs-lookup"><span data-stu-id="89f87-726">This method writes the <xref:System.Guid> value using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-727">Sprawdzanie poprawności jest włączone, a operacja spowodowałaby zapisanie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-727">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStringValue utf8Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8Value"><span data-ttu-id="89f87-728">Zakodowana wartość UTF-8, która ma być zapisywana jako element ciągu JSON tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-728">The UTF-8 encoded value to be written as a JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="89f87-729">Zapisuje wartość tekstową UTF-8 (jako ciąg JSON) jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-729">Writes a UTF-8 text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="89f87-730">Wartość jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-730">The value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-731">Określona wartość jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-731">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-732">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-732">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="89f87-733">Zakodowana wartość UTF-16, która ma być zapisywana jako element ciągu JSON w formacie UTF-8 w tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-733">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="89f87-734">Zapisuje wartość tekstową w formacie UTF-16 (jako ciąg JSON) jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-734">Writes a UTF-16 text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="89f87-735">Wartość jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-735">The value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-736">Określona wartość jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-736">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-737">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-737">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : string -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="89f87-738">Zakodowana wartość UTF-16, która ma być zapisywana jako element ciągu JSON w formacie UTF-8 w tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-738">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="89f87-739">Zapisuje wartość tekstową ciągu (jako ciąg JSON) jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-739">Writes a string text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="89f87-740">Wartość jest wyprowadzana przed zapisem.</span><span class="sxs-lookup"><span data-stu-id="89f87-740">The value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="89f87-741">Określona wartość jest za duża.</span><span class="sxs-lookup"><span data-stu-id="89f87-741">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-742">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-742">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="89f87-743">Zakodowana wartość JSON jest zapisywana jako element ciągu JSON w formacie UTF-8 w tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-743">The JSON encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="89f87-744">Zapisuje wstępnie zakodowaną wartość tekstową (jako ciąg JSON) jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-744">Writes the pre-encoded text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="89f87-745">Wartość powinna mieć już zmieniony znak ucieczki podczas tworzenia wystąpienia <xref:System.Text.Json.JsonEncodedText> .</span><span class="sxs-lookup"><span data-stu-id="89f87-745">The value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="89f87-746">Sprawdzanie poprawności jest włączone, a operacja zapisu spowodowałaby utworzenie nieprawidłowego kodu JSON.</span><span class="sxs-lookup"><span data-stu-id="89f87-746">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
