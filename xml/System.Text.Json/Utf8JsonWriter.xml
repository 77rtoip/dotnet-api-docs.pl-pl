<Type Name="Utf8JsonWriter" FullName="System.Text.Json.Utf8JsonWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6bf8bd7fdfd80ccc415cee28e69de81768b96942" /><Meta Name="ms.sourcegitcommit" Value="e28b7b371ead27d99e20387b8243f09b0cdb9fb3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="04/12/2019" /><Meta Name="ms.locfileid" Value="59541648" /></Metadata><TypeSignature Language="C#" Value="public struct Utf8JsonWriter" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Utf8JsonWriter extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Utf8JsonWriter" />
  <TypeSignature Language="VB.NET" Value="Public Structure Utf8JsonWriter" />
  <TypeSignature Language="C++ CLI" Value="public value class Utf8JsonWriter" />
  <TypeSignature Language="F#" Value="type Utf8JsonWriter = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="ea44e-101">Udostępnia interfejs API o wysokiej wydajności dla zapisu tylko do przodu, Niebuforowana UTF-8 kodowany w formacie JSON tekst.</span><span class="sxs-lookup"><span data-stu-id="ea44e-101">Provides a high-performance API for forward-only, non-cached writing of UTF-8 encoded JSON text.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="ea44e-102">`Utf8JsonWriter` Zapisuje tekst sekwencyjnie z Brak buforowania i domyślnie działa zgodnie z [JSON RFC](https://tools.ietf.org/html/rfc8259), z wyjątkiem pisania komentarzy.</span><span class="sxs-lookup"><span data-stu-id="ea44e-102">`Utf8JsonWriter` writes the text sequentially with no caching and by default adheres to the [JSON RFC](https://tools.ietf.org/html/rfc8259), with the exception of writing comments.</span></span>

<span data-ttu-id="ea44e-103">Metoda, która próbuje zapisać obiekt JSON jest nieprawidłowy, gdy sprawdzanie poprawności jest włączone zgłasza <xref:System.InvalidOperationException> kontekstowych komunikat o błędzie.</span><span class="sxs-lookup"><span data-stu-id="ea44e-103">A method that attempts to write invalid JSON when validation is enabled throws a <xref:System.InvalidOperationException> with a context-specific error message.</span></span>
<span data-ttu-id="ea44e-104">Ponieważ ten typ jest strukturą ref, go nie obsługuje bezpośrednio async.</span><span class="sxs-lookup"><span data-stu-id="ea44e-104">Since this type is a ref struct, it does not directly support async.</span></span> <span data-ttu-id="ea44e-105">Jednak zapewnia obsługę współużytkowania wątkowości zapisu częściowe dane i kontynuować pisanie we fragmentach.</span><span class="sxs-lookup"><span data-stu-id="ea44e-105">However, it does provide support for reentrancy to write partial data and to continue writing in chunks.</span></span>
<span data-ttu-id="ea44e-106">Aby można było, aby sformatować dane wyjściowe z wcięcia i biały znak lub Pomiń sprawdzanie poprawności, Utwórz wystąpienie obiektu <xref:System.Text.Json.JsonWriterState> i przekazać ją w składniku zapisywania.</span><span class="sxs-lookup"><span data-stu-id="ea44e-106">To be able to format the output with indentation and white space OR to skip validation, create an instance of <xref:System.Text.Json.JsonWriterState> and pass that in to the writer.</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonWriter (System.Buffers.IBufferWriter&lt;byte&gt; bufferWriter, System.Text.Json.JsonWriterState state = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; bufferWriter, valuetype System.Text.Json.JsonWriterState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bufferWriter As IBufferWriter(Of Byte), Optional state As JsonWriterState = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonWriter : System.Buffers.IBufferWriter&lt;byte&gt; * System.Text.Json.JsonWriterState -&gt; System.Text.Json.Utf8JsonWriter" Usage="new System.Text.Json.Utf8JsonWriter (bufferWriter, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bufferWriter" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
        <Parameter Name="state" Type="System.Text.Json.JsonWriterState" />
      </Parameters>
      <Docs>
        <param name="bufferWriter"><span data-ttu-id="ea44e-107">Wystąpienie <see cref="T:System.Buffers.IBufferWriter`1" /> używanego jako miejsca docelowego, do pisania tekst JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-107">An instance of <see cref="T:System.Buffers.IBufferWriter`1" /> used as a destination for writing JSON text.</span></span></param>
        <param name="state"><span data-ttu-id="ea44e-108">Struktura, która zawiera stan czytnika.</span><span class="sxs-lookup"><span data-stu-id="ea44e-108">A struct that contains the reader state.</span></span> <span data-ttu-id="ea44e-109">Przy pierwszym wywołaniu konstruktora powinien odzwierciedlać stan domyślny; w przeciwnym razie należy przechwytywać stan z poprzednie wystąpienie wystąpienia <see cref="T:System.Text.Json.Utf8JsonWriter" /> i przekazać go ponownie.</span><span class="sxs-lookup"><span data-stu-id="ea44e-109">On the first call to the constructor, it should reflect a default state; otherwise, it should capture the state from the previous instance instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> and pass that back.</span></span></param>
        <summary><span data-ttu-id="ea44e-110">Inicjuje nowe wystąpienie klasy <see cref="T:System.Text.Json.Utf8JsonWriter" /> klasy z określonym <paramref name="bufferWriter" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-110">Initializes a new instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> class with the specified <paramref name="bufferWriter" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="ea44e-111">Ponieważ ten typ jest strukturą ref, jest to typ tylko do stosu i ograniczenia struktury ref zastosowanie do niej.</span><span class="sxs-lookup"><span data-stu-id="ea44e-111">Since this type is a ref struct, it is a stack-only type, and all the limitations of ref structs apply to it.</span></span>
<span data-ttu-id="ea44e-112">Jest to powód, dlaczego Konstruktor akceptuje <xref:System.Text.Json.JsonWriterState>.</span><span class="sxs-lookup"><span data-stu-id="ea44e-112">This is the reason why the constructor accepts a <xref:System.Text.Json.JsonWriterState>.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ea44e-113"><paramref name="bufferWriter" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-113"><paramref name="bufferWriter" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BytesCommitted">
      <MemberSignature Language="C#" Value="public long BytesCommitted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesCommitted" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesCommitted As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesCommitted { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesCommitted : int64" Usage="System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ea44e-114">Pobiera całkowitą liczbę bajtów zadeklarowanych w typie danych wyjściowych przez <see cref="T:System.Text.Json.Utf8JsonWriter" /> do tej pory dla bieżącego wystąpienia <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-114">Gets the total number of bytes committed to the output by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far for the current instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span></span>
<span data-ttu-id="ea44e-115">Oznacza to, ile <see cref="T:System.Buffers.IBufferWriter`1" /> udostępnia zaawansowane.</span><span class="sxs-lookup"><span data-stu-id="ea44e-115">This indicates how much the <see cref="T:System.Buffers.IBufferWriter`1" /> has advanced.</span></span></summary>
        <value><span data-ttu-id="ea44e-116">Całkowita liczba bajtów zadeklarowane w typie danych wyjściowych przez <see cref="T:System.Text.Json.Utf8JsonWriter" /> do tej pory.</span><span class="sxs-lookup"><span data-stu-id="ea44e-116">The total number of bytes committed to the output by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BytesWritten">
      <MemberSignature Language="C#" Value="public long BytesWritten { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesWritten" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesWritten" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesWritten As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesWritten { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesWritten : int64" Usage="System.Text.Json.Utf8JsonWriter.BytesWritten" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ea44e-117">Pobiera liczba bajtów zapisanych przez <see cref="T:System.Text.Json.Utf8JsonWriter" /> do tej pory dla bieżącego wystąpienia <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-117">Gets the total number of bytes written by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far for the current instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span></span>
<span data-ttu-id="ea44e-118">Obejmuje to dane, który został zapisany poza co została już przekazana.</span><span class="sxs-lookup"><span data-stu-id="ea44e-118">This includes data that has been written beyond what has already been committed.</span></span></summary>
        <value><span data-ttu-id="ea44e-119">Całkowita liczba bajtów zapisanych przez <see cref="T:System.Text.Json.Utf8JsonWriter" /> do tej pory.</span><span class="sxs-lookup"><span data-stu-id="ea44e-119">The total number of bytes written by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentDepth">
      <MemberSignature Language="C#" Value="public int CurrentDepth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentDepth" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentDepth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDepth : int" Usage="System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ea44e-120">Pobiera głębokość bieżącego tokenu.</span><span class="sxs-lookup"><span data-stu-id="ea44e-120">Gets the depth of the current token.</span></span></summary>
        <value><span data-ttu-id="ea44e-121">Głębokość bieżącego tokenu.</span><span class="sxs-lookup"><span data-stu-id="ea44e-121">The depth of the current token.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="ea44e-122">`CurrentDepth` Właściwość śledzi cyklicznego głębokość zagnieżdżonych obiektów / tablic w tekście JSON zapisane do tej pory.</span><span class="sxs-lookup"><span data-stu-id="ea44e-122">The `CurrentDepth` property tracks the recursive depth of the nested objects / arrays within the JSON text written so far.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush (bool isFinalBlock = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush(bool isFinalBlock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Flush(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush (Optional isFinalBlock As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.Flush : bool -&gt; unit" Usage="utf8JsonWriter.Flush isFinalBlock" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isFinalBlock" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isFinalBlock"><span data-ttu-id="ea44e-123"><see langword="true" /> Aby wskazać, że nie ma więcej danych zostanie zapisany; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-123"><see langword="true" /> to indicate no more data will be written; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="ea44e-124">Służy to sprawdzić, czy dane JSON zapisane do tej pory jest nieprawidłową strukturę, jeśli nie ma więcej danych jest wykonanie czynności opisanych.</span><span class="sxs-lookup"><span data-stu-id="ea44e-124">This is used to validate that the JSON written so far is structurally valid if no more data is to follow.</span></span></param>
        <summary><span data-ttu-id="ea44e-125">Przesuwa bazowego <see cref="T:System.Buffers.IBufferWriter`1" /> oparte na co została zapisana do tej pory.</span><span class="sxs-lookup"><span data-stu-id="ea44e-125">Advances the underlying <see cref="T:System.Buffers.IBufferWriter`1" /> based on what has been written so far.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-126">Niekompletne JSON został zapisany i <paramref name="isFinalBlock" /> jest <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-126">Incomplete JSON has been written and <paramref name="isFinalBlock" /> is <see langword="true" />.</span></span> <span data-ttu-id="ea44e-127">Na przykład, gdy otwarty obiekt lub tablica musi zostać zamknięty.</span><span class="sxs-lookup"><span data-stu-id="ea44e-127">For example, when an open object or array needs to be closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentState">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonWriterState GetCurrentState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Text.Json.JsonWriterState GetCurrentState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.GetCurrentState" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentState () As JsonWriterState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::Json::JsonWriterState GetCurrentState();" />
      <MemberSignature Language="F#" Value="member this.GetCurrentState : unit -&gt; System.Text.Json.JsonWriterState" Usage="utf8JsonWriter.GetCurrentState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonWriterState</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ea44e-128">Zwraca bieżącą migawką <see cref="T:System.Text.Json.Utf8JsonWriter" /> stanu, który musi być przechwycony przez obiekt wywołujący i przekazywane ponownie do <see cref="T:System.Text.Json.Utf8JsonWriter" /> konstruktora o większej ilości danych.</span><span class="sxs-lookup"><span data-stu-id="ea44e-128">Returns the current snapshot of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> state that must be captured by the caller and passed back in to the <see cref="T:System.Text.Json.Utf8JsonWriter" /> constructor with more data.</span></span></summary>
        <returns><span data-ttu-id="ea44e-129">Bieżąca migawka <see cref="T:System.Text.Json.Utf8JsonWriter" /> stanu.</span><span class="sxs-lookup"><span data-stu-id="ea44e-129">The current snapshot of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> state.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="ea44e-130">W odróżnieniu od <xref:System.Text.Json.Utf8JsonWriter>, która jest strukturą ref, stan mogą przetrwać w granicach async/await i dlatego tego typu są wymagane do świadczenia pomocy technicznej do odczytu w większej ilości danych asynchronicznie przed kontynuowaniem nowe wystąpienie klasy <xref:System.Text.Json.Utf8JsonWriter>.</span><span class="sxs-lookup"><span data-stu-id="ea44e-130">Unlike the <xref:System.Text.Json.Utf8JsonWriter>, which is a ref struct, the state can survive across async/await boundaries, and hence this type is required to provide support for reading in more data asynchronously before continuing with a new instance of the <xref:System.Text.Json.Utf8JsonWriter>.</span></span>

<span data-ttu-id="ea44e-131">Uzyskiwanie stanu tworzenia nowego <see cref="T:System.Text.Json.Utf8JsonWriter" /> struct bez zobowiązania pierwszy spowodowałoby danych, który został napisany w niespójnym stanie.</span><span class="sxs-lookup"><span data-stu-id="ea44e-131">Getting the state for creating a new <see cref="T:System.Text.Json.Utf8JsonWriter" /> struct without first committing the data that has been written would result in an inconsistent state.</span></span> <span data-ttu-id="ea44e-132">Wywołaj <xref:System.Text.Json.Utf8JsonWriter.Flush%2A> przed pobraniem bieżącego stanu.</span><span class="sxs-lookup"><span data-stu-id="ea44e-132">Call <xref:System.Text.Json.Utf8JsonWriter.Flush%2A> before getting the current state.</span></span>  

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-133">Dane JSON zostały zapisane i buforowane ale jeszcze nie jest opróżniany do <see cref="T:System.Buffers.IBufferWriter`1" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-133">The JSON data has been written and buffered but not yet flushed to the <see cref="T:System.Buffers.IBufferWriter`1" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (utf8PropertyName As ReadOnlySpan(Of Byte), value As Boolean, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;byte&gt; * bool * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="ea44e-134">UTF-8 zakodowane nazwy właściwości JSON obiektu do zapisania.</span><span class="sxs-lookup"><span data-stu-id="ea44e-134">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="ea44e-135">Wartość do zapisania jako JSON literału "true" lub "fałsz", jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="ea44e-135">The value to be written as a JSON literal "true" or "false" as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-136"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-136"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-137">Jest to parametr opcjonalny; jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-137">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-138">Zapisuje nazwę właściwości i <see cref="T:System.Boolean" /> wartości (jako JSON literału "true" lub "false") jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-138">Writes the property name and <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-139"><paramref name="utf8PropertyName" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-139"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-140">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-140">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;char&gt; propertyName, bool value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As ReadOnlySpan(Of Char), value As Boolean, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;char&gt; * bool * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="ea44e-141">UTF-16 zakodowane Właściwość Nazwa obiektu JSON do transkodowania i zapis jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="ea44e-141">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="ea44e-142">Wartość do zapisania jako JSON literału "true" lub "fałsz", jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="ea44e-142">The value to be written as a JSON literal "true" or "false" as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-143"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-143"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-144">Jest to parametr opcjonalny, a jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-144">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-145">Zapisuje nazwę właściwości i <see cref="T:System.Boolean" /> wartości (jako JSON literału "true" lub "false") jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-145">Writes the property name and <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-146"><paramref name="propertyName" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-146"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-147">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-147">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (string propertyName, bool value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(string propertyName, bool value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As String, value As Boolean, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : string * bool * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="ea44e-148">UTF-16 zakodowane Właściwość Nazwa obiektu JSON do transkodowania i zapis jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="ea44e-148">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="ea44e-149">Wartość do zapisania jako JSON literału "true" lub "fałsz", jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="ea44e-149">The value to be written as a JSON literal "true" or "false" as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-150"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-150"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-151">Jest to parametr opcjonalny, a jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-151">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-152">Zapisuje nazwę właściwości i <see cref="T:System.Boolean" /> wartości (jako JSON literału "true" lub "false") jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-152">Writes the property name and <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-153"><paramref name="propertyName" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-153"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-154">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-154">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBooleanValue">
      <MemberSignature Language="C#" Value="public void WriteBooleanValue (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBooleanValue(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBooleanValue (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBooleanValue(bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBooleanValue : bool -&gt; unit" Usage="utf8JsonWriter.WriteBooleanValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ea44e-155">Wartość do zapisania jako JSON literału "true" lub "false" jako elementu tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-155">The value to be written as a JSON literal "true" or "false" as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="ea44e-156">Zapisuje <see cref="T:System.Boolean" /> wartości (jako JSON literału "true" lub "false") jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-156">Writes the <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-157">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-157">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue (utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8Value"><span data-ttu-id="ea44e-158">UTF-8 zakodowana wartość do zapisania jako komentarz JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-158">The UTF-8 encoded value to be written as a JSON comment.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-159"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-159"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-160">Jest to parametr opcjonalny, a jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-160">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-161">Zapisuje wartości tekstowej UTF-8 jako komentarz JSON (w ramach <c>/ *...* /</c>).</span><span class="sxs-lookup"><span data-stu-id="ea44e-161">Writes the UTF-8 text value as a JSON comment (within <c>/*..*/</c>).</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-162"><paramref name="utf8Value" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-162"><paramref name="utf8Value" /> is too large.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ea44e-163">Wartość do zapisania jako komentarz JSON transkodowane UTF-8 kodowany w formacie UTF-16.</span><span class="sxs-lookup"><span data-stu-id="ea44e-163">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-164"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-164"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-165">Jest to parametr opcjonalny, a jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-165">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-166">Zapisuje wartości tekstowej UTF-16 jako komentarz JSON (w ramach <c>/ *...* /</c>).</span><span class="sxs-lookup"><span data-stu-id="ea44e-166">Writes the UTF-16 text value as a JSON comment (within <c>/*..*/</c>).</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-167"><paramref name="value" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-167"><paramref name="value" /> is too large.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ea44e-168">Wartość do zapisania jako komentarz JSON transkodowane UTF-8 kodowany w formacie UTF-16.</span><span class="sxs-lookup"><span data-stu-id="ea44e-168">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-169"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-169"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-170">Jest to parametr opcjonalny, a jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-170">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-171">Zapisuje wartość ciągu tekstowego jako komentarz JSON (w ramach <c>/ *...* /</c>).</span><span class="sxs-lookup"><span data-stu-id="ea44e-171">Writes the string text value as a JSON comment (within <c>/*..*/</c>).</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-172"><paramref name="value" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-172"><paramref name="value" /> is too large.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndArray">
      <MemberSignature Language="C#" Value="public void WriteEndArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndArray();" />
      <MemberSignature Language="F#" Value="member this.WriteEndArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ea44e-173">Zapisuje końca tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-173">Writes the end of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-174">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-174">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndObject">
      <MemberSignature Language="C#" Value="public void WriteEndObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndObject();" />
      <MemberSignature Language="F#" Value="member this.WriteEndObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ea44e-175">Zapisuje koniec obiekt JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-175">Writes the end of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-176">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-176">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (utf8PropertyName As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteNull (utf8PropertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="ea44e-177">UTF-8 zakodowane nazwy właściwości JSON obiektu do zapisania.</span><span class="sxs-lookup"><span data-stu-id="ea44e-177">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-178"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-178"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-179">Jest to parametr opcjonalny; jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-179">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-180">Zapisuje nazwę właściwości i JSON literału "null" jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-180">Writes the property name and the JSON literal "null" as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-181"><paramref name="utf8PropertyName" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-181"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-182">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-182">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;char&gt; propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteNull (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="ea44e-183">Nazwa właściwości zakodowany UTF-16 obiekt JSON służący do transkodowania i zapisu w formacie UTF-8.</span><span class="sxs-lookup"><span data-stu-id="ea44e-183">The UTF-16 encoded property name of the JSON object to transcode and write as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-184"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-184"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-185">Jest to parametr opcjonalny; jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-185">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-186">Zapisuje nazwę właściwości i JSON literału "null" jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-186">Writes the property name and the JSON literal "null" as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-187"><paramref name="propertyName" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-187"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-188">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-188">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (string propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(string propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNull : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteNull (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="ea44e-189">UTF-16 zakodowane Właściwość Nazwa obiektu JSON do transkodowania i zapis jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="ea44e-189">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-190"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-190"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-191">Jest to parametr opcjonalny; jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-191">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-192">Zapisuje nazwę właściwości i JSON literału "null" jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-192">Writes the property name and the JSON literal "null" as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-193"><paramref name="propertyName" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-193"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-194">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-194">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNullValue">
      <MemberSignature Language="C#" Value="public void WriteNullValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNullValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNullValue" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNullValue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNullValue();" />
      <MemberSignature Language="F#" Value="member this.WriteNullValue : unit -&gt; unit" Usage="utf8JsonWriter.WriteNullValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ea44e-195">Zapisuje dane JSON literału "null" jako elementu tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-195">Writes the JSON literal "null" as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-196">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-196">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, decimal value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Decimal value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Decimal, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * decimal * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="ea44e-197">UTF-8 zakodowane nazwy właściwości JSON obiektu do zapisania.</span><span class="sxs-lookup"><span data-stu-id="ea44e-197">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="ea44e-198">Wartość do zapisania jako liczbę JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="ea44e-198">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-199"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-199"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-200">Jest to parametr opcjonalny; jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-200">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-201">Zapisuje nazwę właściwości i <see cref="T:System.Decimal" /> wartości (jako liczba JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-201">Writes the property name and <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="ea44e-202">Zapisuje <see cref="T:System.Decimal" /> przy użyciu domyślnego <see cref="T:System.Buffers.StandardFormat" /> (czyli "G").</span><span class="sxs-lookup"><span data-stu-id="ea44e-202">Writes the <see cref="T:System.Decimal" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-203"><paramref name="utf8PropertyName" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-203"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-204">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-204">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, double value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Double, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * double * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="ea44e-205">UTF-8 zakodowane nazwy właściwości JSON obiektu do zapisania.</span><span class="sxs-lookup"><span data-stu-id="ea44e-205">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="ea44e-206">Wartość do zapisania jako liczbę JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="ea44e-206">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-207"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-207"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-208">Jest to parametr opcjonalny; jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-208">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-209">Zapisuje nazwę właściwości i <see cref="T:System.Double" /> wartości (jako liczba JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-209">Writes the property name and <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="ea44e-210">Zapisuje <see cref="T:System.Double" /> przy użyciu domyślnego <see cref="T:System.Buffers.StandardFormat" /> (czyli "G").</span><span class="sxs-lookup"><span data-stu-id="ea44e-210">Writes the <see cref="T:System.Double" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-211"><paramref name="utf8PropertyName" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-211"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-212">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-212">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, int value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Integer, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="ea44e-213">UTF-8 zakodowane nazwy właściwości JSON obiektu do zapisania.</span><span class="sxs-lookup"><span data-stu-id="ea44e-213">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="ea44e-214">Wartość do zapisania jako liczbę JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="ea44e-214">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-215"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-215"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-216">Jest to parametr opcjonalny; jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-216">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-217">Zapisuje nazwę właściwości i <see cref="T:System.Int32" /> wartości (jako liczba JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-217">Writes the property name and <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="ea44e-218">Zapisuje <see cref="T:System.Int32" /> przy użyciu domyślnego <see cref="T:System.Buffers.StandardFormat" /> (czyli "G").</span><span class="sxs-lookup"><span data-stu-id="ea44e-218">Writes the <see cref="T:System.Int32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="ea44e-219">Na przykład 32767.</span><span class="sxs-lookup"><span data-stu-id="ea44e-219">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-220"><paramref name="utf8PropertyName" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-220"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-221">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-221">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, long value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Long, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="ea44e-222">UTF-8 zakodowane nazwy właściwości JSON obiektu do zapisania.</span><span class="sxs-lookup"><span data-stu-id="ea44e-222">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="ea44e-223">Wartość do zapisania jako liczbę JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="ea44e-223">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-224"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-224"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-225">Jest to parametr opcjonalny; jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-225">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-226">Zapisuje nazwę właściwości i <see cref="T:System.Int64" /> wartości (jako liczba JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-226">Writes the property name and <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="ea44e-227">Zapisuje <see cref="T:System.Int64" /> przy użyciu domyślnego <see cref="T:System.Buffers.StandardFormat" /> (czyli "G").</span><span class="sxs-lookup"><span data-stu-id="ea44e-227">Writes the <see cref="T:System.Int64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="ea44e-228">Na przykład 32767.</span><span class="sxs-lookup"><span data-stu-id="ea44e-228">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-229"><paramref name="utf8PropertyName" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-229"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-230">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-230">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, float value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Single, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * single * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="ea44e-231">UTF-8 zakodowane nazwy właściwości JSON obiektu do zapisania.</span><span class="sxs-lookup"><span data-stu-id="ea44e-231">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="ea44e-232">Wartość do zapisania jako liczbę JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="ea44e-232">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-233"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-233"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-234">Jest to parametr opcjonalny; jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-234">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-235">Zapisuje nazwę właściwości i <see cref="T:System.Single" /> wartości (jako liczba JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-235">Writes the property name and <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="ea44e-236">Zapisuje <see cref="T:System.Single" /> przy użyciu domyślnego <see cref="T:System.Buffers.StandardFormat" /> (czyli "G").</span><span class="sxs-lookup"><span data-stu-id="ea44e-236">Writes the <see cref="T:System.Single" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-237"><paramref name="utf8PropertyName" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-237"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-238">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-238">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, uint value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As UInteger, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint32 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="ea44e-239">UTF-8 zakodowane nazwy właściwości JSON obiektu do zapisania.</span><span class="sxs-lookup"><span data-stu-id="ea44e-239">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="ea44e-240">Wartość do zapisania jako liczbę JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="ea44e-240">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-241"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-241"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-242">Jest to parametr opcjonalny; jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-242">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-243">Zapisuje nazwę właściwości i <see cref="T:System.UInt32" /> wartości (jako liczba JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-243">Writes the property name and <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="ea44e-244">Zapisuje <see cref="T:System.UInt32" /> przy użyciu domyślnego <see cref="T:System.Buffers.StandardFormat" /> (czyli "G").</span><span class="sxs-lookup"><span data-stu-id="ea44e-244">Writes the <see cref="T:System.UInt32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="ea44e-245">Na przykład 32767.</span><span class="sxs-lookup"><span data-stu-id="ea44e-245">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-246"><paramref name="utf8PropertyName" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-246"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-247">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-247">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ulong value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As ULong, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="ea44e-248">UTF-8 zakodowane nazwy właściwości JSON obiektu do zapisania.</span><span class="sxs-lookup"><span data-stu-id="ea44e-248">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="ea44e-249">Wartość do zapisania jako liczbę JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="ea44e-249">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-250"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-250"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-251">Jest to parametr opcjonalny; jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-251">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-252">Zapisuje nazwę właściwości i <see cref="T:System.UInt64" /> wartości (jako liczba JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-252">Writes the property name and <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="ea44e-253">Zapisuje <see cref="T:System.UInt64" /> przy użyciu domyślnego <see cref="T:System.Buffers.StandardFormat" /> (czyli "G").</span><span class="sxs-lookup"><span data-stu-id="ea44e-253">Writes the <see cref="T:System.UInt64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="ea44e-254">Na przykład 32767.</span><span class="sxs-lookup"><span data-stu-id="ea44e-254">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-255"><paramref name="utf8PropertyName" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-255"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-256">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-256">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, decimal value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Decimal value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Decimal, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * decimal * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="ea44e-257">UTF-16 zakodowane Właściwość Nazwa obiektu JSON do transkodowania i zapis jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="ea44e-257">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="ea44e-258">Wartość do zapisania jako liczbę JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="ea44e-258">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-259"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-259"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-260">Jest to parametr opcjonalny; jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-260">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-261">Zapisuje nazwę właściwości i <see cref="T:System.Decimal" /> wartości (jako liczba JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-261">Writes the property name and <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="ea44e-262">Zapisuje <see cref="T:System.Decimal" /> przy użyciu domyślnego <see cref="T:System.Buffers.StandardFormat" /> (czyli "G").</span><span class="sxs-lookup"><span data-stu-id="ea44e-262">Writes the <see cref="T:System.Decimal" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-263"><paramref name="propertyName" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-263"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-264">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-264">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, double value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Double, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * double * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="ea44e-265">UTF-16 zakodowane Właściwość Nazwa obiektu JSON do transkodowania i zapis jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="ea44e-265">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="ea44e-266">Wartość do zapisania jako liczbę JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="ea44e-266">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-267"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-267"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-268">Jest to parametr opcjonalny; jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-268">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-269">Zapisuje nazwę właściwości i <see cref="T:System.Double" /> wartości (jako liczba JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-269">Writes the property name and <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="ea44e-270">Zapisuje <see cref="T:System.Double" /> przy użyciu domyślnego <see cref="T:System.Buffers.StandardFormat" /> (czyli "G").</span><span class="sxs-lookup"><span data-stu-id="ea44e-270">Writes the <see cref="T:System.Double" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-271"><paramref name="propertyName" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-271"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-272">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-272">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, int value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Integer, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="ea44e-273">UTF-16 zakodowane Właściwość Nazwa obiektu JSON do transkodowania i zapis jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="ea44e-273">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="ea44e-274">Wartość do zapisania jako liczbę JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="ea44e-274">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-275"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-275"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-276">Jest to parametr opcjonalny; jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-276">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-277">Zapisuje nazwę właściwości i <see cref="T:System.Int32" /> wartości (jako liczba JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-277">Writes the property name and <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="ea44e-278">Zapisuje <see cref="T:System.Int32" /> przy użyciu domyślnego <see cref="T:System.Buffers.StandardFormat" /> (czyli "G").</span><span class="sxs-lookup"><span data-stu-id="ea44e-278">Writes the <see cref="T:System.Int32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="ea44e-279">Na przykład 32767.</span><span class="sxs-lookup"><span data-stu-id="ea44e-279">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-280"><paramref name="propertyName" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-280"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-281">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-281">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, long value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Long, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="ea44e-282">UTF-16 zakodowane Właściwość Nazwa obiektu JSON do transkodowania i zapis jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="ea44e-282">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="ea44e-283">Wartość do zapisania jako liczbę JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="ea44e-283">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-284"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-284"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-285">Jest to parametr opcjonalny; jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-285">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-286">Zapisuje nazwę właściwości i <see cref="T:System.Int64" /> wartości (jako liczba JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-286">Writes the property name and <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="ea44e-287">Zapisuje <see cref="T:System.Int64" /> przy użyciu domyślnego <see cref="T:System.Buffers.StandardFormat" /> (czyli "G").</span><span class="sxs-lookup"><span data-stu-id="ea44e-287">Writes the <see cref="T:System.Int64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="ea44e-288">Na przykład 32767.</span><span class="sxs-lookup"><span data-stu-id="ea44e-288">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-289"><paramref name="propertyName" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-289"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-290">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-290">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, float value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Single, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * single * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="ea44e-291">UTF-16 zakodowane Właściwość Nazwa obiektu JSON do transkodowania i zapis jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="ea44e-291">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="ea44e-292">Wartość do zapisania jako liczbę JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="ea44e-292">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-293"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-293"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-294">Jest to parametr opcjonalny; jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-294">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-295">Zapisuje nazwę właściwości i <see cref="T:System.Single" /> wartości (jako liczba JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-295">Writes the property name and <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="ea44e-296">Zapisuje <see cref="T:System.Single" /> przy użyciu domyślnego <see cref="T:System.Buffers.StandardFormat" /> (czyli "G").</span><span class="sxs-lookup"><span data-stu-id="ea44e-296">Writes the <see cref="T:System.Single" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-297"><paramref name="propertyName" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-297"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-298">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-298">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, uint value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As UInteger, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint32 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="ea44e-299">UTF-16 zakodowane Właściwość Nazwa obiektu JSON do transkodowania i zapis jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="ea44e-299">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="ea44e-300">Wartość do zapisania jako liczbę JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="ea44e-300">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-301"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-301"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-302">Jest to parametr opcjonalny; jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-302">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-303">Zapisuje nazwę właściwości i <see cref="T:System.UInt32" /> wartości (jako liczba JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-303">Writes the property name and <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="ea44e-304">Zapisuje <see cref="T:System.UInt32" /> przy użyciu domyślnego <see cref="T:System.Buffers.StandardFormat" /> (czyli "G").</span><span class="sxs-lookup"><span data-stu-id="ea44e-304">Writes the <see cref="T:System.UInt32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="ea44e-305">Na przykład 32767.</span><span class="sxs-lookup"><span data-stu-id="ea44e-305">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-306"><paramref name="propertyName" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-306"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-307">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-307">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, ulong value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As ULong, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="ea44e-308">UTF-16 zakodowane Właściwość Nazwa obiektu JSON do transkodowania i zapis jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="ea44e-308">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="ea44e-309">Wartość do zapisania jako liczbę JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="ea44e-309">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-310"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-310"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-311">Jest to parametr opcjonalny; jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-311">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-312">Zapisuje nazwę właściwości i <see cref="T:System.UInt64" /> wartości (jako liczba JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-312">Writes the property name and <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="ea44e-313">Zapisuje <see cref="T:System.UInt64" /> przy użyciu domyślnego <see cref="T:System.Buffers.StandardFormat" /> (czyli "G").</span><span class="sxs-lookup"><span data-stu-id="ea44e-313">Writes the <see cref="T:System.UInt64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="ea44e-314">Na przykład 32767.</span><span class="sxs-lookup"><span data-stu-id="ea44e-314">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-315"><paramref name="propertyName" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-315"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-316">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-316">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, decimal value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, valuetype System.Decimal value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Decimal, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * decimal * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="ea44e-317">UTF-16 zakodowane Właściwość Nazwa obiektu JSON do transkodowania i zapis jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="ea44e-317">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="ea44e-318">Wartość do zapisania jako liczbę JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="ea44e-318">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-319"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-319"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-320">Jest to parametr opcjonalny; jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-320">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-321">Zapisuje nazwę właściwości i <see cref="T:System.Decimal" /> wartości (jako liczba JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-321">Writes the property name and <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="ea44e-322">Zapisuje <see cref="T:System.Decimal" /> przy użyciu domyślnego <see cref="T:System.Buffers.StandardFormat" /> (czyli "G").</span><span class="sxs-lookup"><span data-stu-id="ea44e-322">Writes the <see cref="T:System.Decimal" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-323"><paramref name="propertyName" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-323"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-324">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-324">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, double value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Double, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * double * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="ea44e-325">UTF-16 zakodowane Właściwość Nazwa obiektu JSON do transkodowania i zapis jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="ea44e-325">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="ea44e-326">Wartość do zapisania jako liczbę JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="ea44e-326">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-327"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-327"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-328">Jest to parametr opcjonalny; jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-328">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-329">Zapisuje nazwę właściwości i <see cref="T:System.Double" /> wartości (jako liczba JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-329">Writes the property name and <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="ea44e-330">Zapisuje <see cref="T:System.Double" /> przy użyciu domyślnego <see cref="T:System.Buffers.StandardFormat" /> (czyli "G").</span><span class="sxs-lookup"><span data-stu-id="ea44e-330">Writes the <see cref="T:System.Double" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-331"><paramref name="propertyName" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-331"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-332">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-332">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, int value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Integer, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="ea44e-333">UTF-16 zakodowane Właściwość Nazwa obiektu JSON do transkodowania i zapis jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="ea44e-333">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="ea44e-334">Wartość do zapisania jako liczbę JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="ea44e-334">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-335"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-335"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-336">Jest to parametr opcjonalny; jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-336">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-337">Zapisuje nazwę właściwości i <see cref="T:System.Int32" /> wartości (jako liczba JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-337">Writes the property name and <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="ea44e-338">Zapisuje <see cref="T:System.Int32" /> przy użyciu domyślnego <see cref="T:System.Buffers.StandardFormat" /> (czyli "G").</span><span class="sxs-lookup"><span data-stu-id="ea44e-338">Writes the <see cref="T:System.Int32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="ea44e-339">Na przykład 32767.</span><span class="sxs-lookup"><span data-stu-id="ea44e-339">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-340"><paramref name="propertyName" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-340"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-341">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-341">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, long value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Long, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="ea44e-342">UTF-16 zakodowane Właściwość Nazwa obiektu JSON do transkodowania i zapis jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="ea44e-342">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="ea44e-343">Wartość do zapisania jako liczbę JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="ea44e-343">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-344"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-344"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-345">Jest to parametr opcjonalny; jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-345">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-346">Zapisuje nazwę właściwości i <see cref="T:System.Int64" /> wartości (jako liczba JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-346">Writes the property name and <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="ea44e-347">Zapisuje <see cref="T:System.Int64" /> przy użyciu domyślnego <see cref="T:System.Buffers.StandardFormat" /> (czyli "G").</span><span class="sxs-lookup"><span data-stu-id="ea44e-347">Writes the <see cref="T:System.Int64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="ea44e-348">Na przykład 32767.</span><span class="sxs-lookup"><span data-stu-id="ea44e-348">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-349"><paramref name="propertyName" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-349"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-350">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-350">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, float value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Single, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * single * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="ea44e-351">UTF-16 zakodowane Właściwość Nazwa obiektu JSON do transkodowania i zapis jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="ea44e-351">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="ea44e-352">Wartość do zapisania jako liczbę JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="ea44e-352">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-353"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-353"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-354">Jest to parametr opcjonalny; jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-354">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-355">Zapisuje nazwę właściwości i <see cref="T:System.Single" /> wartości (jako liczba JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-355">Writes the property name and <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="ea44e-356">Zapisuje <see cref="T:System.Single" /> przy użyciu domyślnego <see cref="T:System.Buffers.StandardFormat" /> (czyli "G").</span><span class="sxs-lookup"><span data-stu-id="ea44e-356">Writes the <see cref="T:System.Single" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-357"><paramref name="propertyName" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-357"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-358">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-358">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, uint value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As UInteger, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint32 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="ea44e-359">UTF-16 zakodowane Właściwość Nazwa obiektu JSON do transkodowania i zapis jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="ea44e-359">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="ea44e-360">Wartość do zapisania jako liczbę JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="ea44e-360">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-361"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-361"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-362">Jest to parametr opcjonalny; jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-362">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-363">Zapisuje nazwę właściwości i <see cref="T:System.UInt32" /> wartości (jako liczba JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-363">Writes the property name and <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="ea44e-364">Zapisuje <see cref="T:System.UInt32" /> przy użyciu domyślnego <see cref="T:System.Buffers.StandardFormat" /> (czyli "G").</span><span class="sxs-lookup"><span data-stu-id="ea44e-364">Writes the <see cref="T:System.UInt32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="ea44e-365">Na przykład 32767.</span><span class="sxs-lookup"><span data-stu-id="ea44e-365">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-366"><paramref name="propertyName" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-366"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-367">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-367">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, ulong value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As ULong, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="ea44e-368">UTF-16 zakodowane Właściwość Nazwa obiektu JSON do transkodowania i zapis jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="ea44e-368">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="ea44e-369">Wartość do zapisania jako liczbę JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="ea44e-369">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-370"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-370"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-371">Jest to parametr opcjonalny; jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-371">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-372">Zapisuje nazwę właściwości i <see cref="T:System.UInt64" /> wartości (jako liczba JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-372">Writes the property name and <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="ea44e-373">Zapisuje <see cref="T:System.UInt64" /> przy użyciu domyślnego <see cref="T:System.Buffers.StandardFormat" /> (czyli "G").</span><span class="sxs-lookup"><span data-stu-id="ea44e-373">Writes the <see cref="T:System.UInt64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="ea44e-374">Na przykład 32767.</span><span class="sxs-lookup"><span data-stu-id="ea44e-374">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-375"><paramref name="propertyName" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-375"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-376">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-376">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ea44e-377">Wartość do zapisania jako liczbę JSON jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-377">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="ea44e-378">Zapisuje <see cref="T:System.Decimal" /> wartości (jako liczba JSON) jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-378">Writes the <see cref="T:System.Decimal" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="ea44e-379">Zapisuje <see cref="T:System.Decimal" /> przy użyciu domyślnego <see cref="T:System.Buffers.StandardFormat" /> (czyli "G").</span><span class="sxs-lookup"><span data-stu-id="ea44e-379">Writes the <see cref="T:System.Decimal" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-380">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-380">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : double -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ea44e-381">Wartość do zapisania jako liczbę JSON jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-381">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="ea44e-382">Zapisuje <see cref="T:System.Double" /> wartości (jako liczba JSON) jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-382">Writes the <see cref="T:System.Double" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="ea44e-383">Zapisuje <see cref="T:System.Double" /> przy użyciu domyślnego <see cref="T:System.Buffers.StandardFormat" /> (czyli "G").</span><span class="sxs-lookup"><span data-stu-id="ea44e-383">Writes the <see cref="T:System.Double" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-384">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-384">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ea44e-385">Wartość do zapisania jako liczbę JSON jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-385">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="ea44e-386">Zapisuje <see cref="T:System.Int32" /> wartości (jako liczba JSON) jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-386">Writes the <see cref="T:System.Int32" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="ea44e-387">Zapisuje <see cref="T:System.Int32" /> przy użyciu domyślnego <see cref="T:System.Buffers.StandardFormat" /> (czyli "G").</span><span class="sxs-lookup"><span data-stu-id="ea44e-387">Writes the <see cref="T:System.Int32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="ea44e-388">Na przykład 32767.</span><span class="sxs-lookup"><span data-stu-id="ea44e-388">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-389">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-389">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ea44e-390">Wartość do zapisania jako liczbę JSON jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-390">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="ea44e-391">Zapisuje <see cref="T:System.Int64" /> wartości (jako liczba JSON) jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-391">Writes the <see cref="T:System.Int64" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="ea44e-392">Zapisuje <see cref="T:System.Int64" /> przy użyciu domyślnego <see cref="T:System.Buffers.StandardFormat" /> (czyli "G").</span><span class="sxs-lookup"><span data-stu-id="ea44e-392">Writes the <see cref="T:System.Int64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="ea44e-393">Na przykład 32767.</span><span class="sxs-lookup"><span data-stu-id="ea44e-393">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-394">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-394">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : single -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ea44e-395">Wartość do zapisania jako liczbę JSON jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-395">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="ea44e-396">Zapisuje <see cref="T:System.Single" /> wartości (jako liczba JSON) jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-396">Writes the <see cref="T:System.Single" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="ea44e-397">Zapisuje <see cref="T:System.Single" /> przy użyciu domyślnego <see cref="T:System.Buffers.StandardFormat" /> (czyli "G").</span><span class="sxs-lookup"><span data-stu-id="ea44e-397">Writes the <see cref="T:System.Single" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-398">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-398">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ea44e-399">Wartość do zapisania jako liczbę JSON jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-399">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="ea44e-400">Zapisuje <see cref="T:System.UInt32" /> wartości (jako liczba JSON) jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-400">Writes the <see cref="T:System.UInt32" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="ea44e-401">Zapisuje <see cref="T:System.UInt32" /> przy użyciu domyślnego <see cref="T:System.Buffers.StandardFormat" /> (czyli "G").</span><span class="sxs-lookup"><span data-stu-id="ea44e-401">Writes the <see cref="T:System.UInt32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="ea44e-402">Na przykład 32767.</span><span class="sxs-lookup"><span data-stu-id="ea44e-402">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-403">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-403">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ea44e-404">Wartość do zapisania jako liczbę JSON jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-404">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="ea44e-405">Zapisuje <see cref="T:System.UInt64" /> wartości (jako liczba JSON) jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-405">Writes the <see cref="T:System.UInt64" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="ea44e-406">Zapisuje <see cref="T:System.UInt64" /> przy użyciu domyślnego <see cref="T:System.Buffers.StandardFormat" /> (czyli "G").</span><span class="sxs-lookup"><span data-stu-id="ea44e-406">Writes the <see cref="T:System.UInt64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="ea44e-407">Na przykład 32767.</span><span class="sxs-lookup"><span data-stu-id="ea44e-407">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-408">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-408">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray();" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ea44e-409">Zapisuje początku tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-409">Writes the beginning of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-410">Głębokość JSON przekroczyła maksymalną głębokość 1000.</span><span class="sxs-lookup"><span data-stu-id="ea44e-410">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="ea44e-411">—lub—</span><span class="sxs-lookup"><span data-stu-id="ea44e-411">-or-</span></span>

<span data-ttu-id="ea44e-412">Jeśli spowodowałoby to nieprawidłowy element JSON ma zostać zapisany (podczas sprawdzania poprawności jest włączona).</span><span class="sxs-lookup"><span data-stu-id="ea44e-412">if this would result in an invalid JSON to be written (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (utf8PropertyName As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartArray (utf8PropertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="ea44e-413">UTF-8 zakodowane nazwę właściwości tablicy JSON, który ma zostać zapisany.</span><span class="sxs-lookup"><span data-stu-id="ea44e-413">The UTF-8 encoded property name of the JSON array to be written.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-414"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-414"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-415">Jest to parametr opcjonalny; jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-415">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-416">Zapisuje początku tablicę JSON o nazwie właściwości jako klucz.</span><span class="sxs-lookup"><span data-stu-id="ea44e-416">Writes the beginning of a JSON array with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-417"><paramref name="utf8PropertyName" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-417"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-418">Głębokość JSON przekroczyła maksymalną głębokość 1000.</span><span class="sxs-lookup"><span data-stu-id="ea44e-418">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="ea44e-419">—lub—</span><span class="sxs-lookup"><span data-stu-id="ea44e-419">-or-</span></span>

<span data-ttu-id="ea44e-420">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-420">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;char&gt; propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartArray (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="ea44e-421">UTF-16 zakodowane Właściwość Nazwa tablicę JSON do transkodowania i zapis jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="ea44e-421">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-422"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-422"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-423">Jest to parametr opcjonalny; jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-423">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-424">Zapisuje początku tablicę JSON o nazwie właściwości jako klucz.</span><span class="sxs-lookup"><span data-stu-id="ea44e-424">Writes the beginning of a JSON array with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-425"><paramref name="propertyName" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-425"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-426">Głębokość JSON przekroczyła maksymalną głębokość 1000.</span><span class="sxs-lookup"><span data-stu-id="ea44e-426">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="ea44e-427">—lub—</span><span class="sxs-lookup"><span data-stu-id="ea44e-427">-or-</span></span>

<span data-ttu-id="ea44e-428">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-428">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (string propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(string propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartArray (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="ea44e-429">UTF-16 zakodowane Właściwość Nazwa tablicę JSON do transkodowania i zapis jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="ea44e-429">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-430"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-430"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-431">Jest to parametr opcjonalny; jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-431">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-432">Zapisuje początku tablicę JSON o nazwie właściwości jako klucz.</span><span class="sxs-lookup"><span data-stu-id="ea44e-432">Writes the beginning of a JSON array with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-433"><paramref name="propertyName" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-433"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-434">Głębokość JSON przekroczyła maksymalną głębokość 1000.</span><span class="sxs-lookup"><span data-stu-id="ea44e-434">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="ea44e-435">—lub—</span><span class="sxs-lookup"><span data-stu-id="ea44e-435">-or-</span></span>

<span data-ttu-id="ea44e-436">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-436">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject();" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ea44e-437">Zapisuje początku obiekt JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-437">Writes the beginning of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-438">Głębokość JSON przekroczyła maksymalną głębokość 1000.</span><span class="sxs-lookup"><span data-stu-id="ea44e-438">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="ea44e-439">—lub—</span><span class="sxs-lookup"><span data-stu-id="ea44e-439">-or-</span></span>

<span data-ttu-id="ea44e-440">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-440">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (utf8PropertyName As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartObject (utf8PropertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="ea44e-441">UTF-8 zakodowane nazwy właściwości JSON obiektu do zapisania.</span><span class="sxs-lookup"><span data-stu-id="ea44e-441">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-442"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-442"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-443">Jest to parametr opcjonalny; jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-443">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-444">Zapisuje początku obiekt JSON z użyciem nazwy właściwości jako klucz.</span><span class="sxs-lookup"><span data-stu-id="ea44e-444">Writes the beginning of a JSON object with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-445"><paramref name="utf8PropertyName" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-445"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-446">Głębokość JSON przekroczyła maksymalną głębokość 1000.</span><span class="sxs-lookup"><span data-stu-id="ea44e-446">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="ea44e-447">—lub—</span><span class="sxs-lookup"><span data-stu-id="ea44e-447">-or-</span></span>

<span data-ttu-id="ea44e-448">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-448">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;char&gt; propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartObject (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="ea44e-449">UTF-16 zakodowane Właściwość Nazwa obiektu JSON do transkodowania i zapis jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="ea44e-449">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-450"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-450"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-451">Jest to parametr opcjonalny; jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-451">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-452">Zapisuje początku obiekt JSON z użyciem nazwy właściwości jako klucz.</span><span class="sxs-lookup"><span data-stu-id="ea44e-452">Writes the beginning of a JSON object with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-453"><paramref name="propertyName" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-453"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-454">Głębokość JSON przekroczyła maksymalną głębokość 1000.</span><span class="sxs-lookup"><span data-stu-id="ea44e-454">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="ea44e-455">—lub—</span><span class="sxs-lookup"><span data-stu-id="ea44e-455">-or-</span></span>

<span data-ttu-id="ea44e-456">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-456">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (string propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(string propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartObject (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="ea44e-457">UTF-16 zakodowane Właściwość Nazwa obiektu JSON do transkodowania i zapis jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="ea44e-457">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-458"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-458"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-459">Jest to parametr opcjonalny; jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-459">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-460">Zapisuje początku obiekt JSON z użyciem nazwy właściwości jako klucz.</span><span class="sxs-lookup"><span data-stu-id="ea44e-460">Writes the beginning of a JSON object with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-461"><paramref name="propertyName" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-461"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-462">Głębokość JSON przekroczyła maksymalną głębokość 1000.</span><span class="sxs-lookup"><span data-stu-id="ea44e-462">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="ea44e-463">—lub—</span><span class="sxs-lookup"><span data-stu-id="ea44e-463">-or-</span></span>

<span data-ttu-id="ea44e-464">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-464">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTime value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTime value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTime, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTime * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="ea44e-465">UTF-8 zakodowane nazwy właściwości JSON obiektu do zapisania.</span><span class="sxs-lookup"><span data-stu-id="ea44e-465">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="ea44e-466">Wartość do zapisania jako ciągu JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="ea44e-466">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-467"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-467"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-468">Jest to parametr opcjonalny; jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-468">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-469">Zapisuje nazwę właściwości i <see cref="T:System.DateTime" /> wartości (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-469">Writes the property name and <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="ea44e-470">Zapisuje <see cref="T:System.DateTime" /> przy użyciu wysyłanych ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span><span class="sxs-lookup"><span data-stu-id="ea44e-470">Writes the <see cref="T:System.DateTime" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="ea44e-471">Na przykład 2017-06-12T05:30:45.7680000.</span><span class="sxs-lookup"><span data-stu-id="ea44e-471">For example, 2017-06-12T05:30:45.7680000.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-472"><paramref name="utf8PropertyName" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-472"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-473">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-473">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTimeOffset value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTimeOffset value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTimeOffset, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTimeOffset * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="ea44e-474">UTF-8 zakodowane nazwy właściwości JSON obiektu do zapisania.</span><span class="sxs-lookup"><span data-stu-id="ea44e-474">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="ea44e-475">Wartość do zapisania jako ciągu JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="ea44e-475">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-476"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-476"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-477">Jest to parametr opcjonalny; jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-477">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-478">Zapisuje nazwę właściwości i <see cref="T:System.DateTimeOffset" /> wartości (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-478">Writes the property name and <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="ea44e-479">Zapisuje <see cref="T:System.DateTimeOffset" /> przy użyciu wysyłanych ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span><span class="sxs-lookup"><span data-stu-id="ea44e-479">Writes the <see cref="T:System.DateTimeOffset" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="ea44e-480">Na przykład 2017-06-12T05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="ea44e-480">For example, 2017-06-12T05:30:45.7680000-07:00.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-481"><paramref name="utf8PropertyName" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-481"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-482">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-482">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, Guid value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Guid value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As Guid, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * Guid * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Guid" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="ea44e-483">UTF-8 zakodowane nazwy właściwości JSON obiektu do zapisania.</span><span class="sxs-lookup"><span data-stu-id="ea44e-483">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="ea44e-484">Wartość do zapisania jako ciągu JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="ea44e-484">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-485"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-485"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-486">Jest to parametr opcjonalny; jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-486">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-487">Zapisuje nazwę właściwości i <see cref="T:System.Guid" /> wartości (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-487">Writes the property name and <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="ea44e-488">Zapisuje <see cref="T:System.Guid" /> przy użyciu domyślnego <see cref="T:System.Buffers.StandardFormat" /> (czyli miał "), jak formularz: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span><span class="sxs-lookup"><span data-stu-id="ea44e-488">Writes the <see cref="T:System.Guid" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-489"><paramref name="utf8PropertyName" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-489"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-490">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-490">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="ea44e-491">UTF-8 zakodowane nazwy właściwości JSON obiektu do zapisania.</span><span class="sxs-lookup"><span data-stu-id="ea44e-491">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="ea44e-492">UTF-8 zakodowana wartość do zapisania jako ciągu JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="ea44e-492">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-493">Jeśli jest to wartość false, moduł zapisujący przyjęto założenie, nazwy właściwości poprzedzone odpowiednim znakiem ucieczki i pominie krok ucieczki.</span><span class="sxs-lookup"><span data-stu-id="ea44e-493">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="ea44e-494">Wartość jest zawsze poprzedzone znakiem zmiany znaczenia</span><span class="sxs-lookup"><span data-stu-id="ea44e-494">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="ea44e-495">Zapisuje nazwę właściwości UTF-8 i UTF-8 wartości tekstowej (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-495">Writes the UTF-8 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-496">Element zgłaszany, gdy określona nazwa właściwości lub wartość jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-496">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-497">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-497">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="ea44e-498">UTF-8 zakodowane nazwy właściwości JSON obiektu do zapisania.</span><span class="sxs-lookup"><span data-stu-id="ea44e-498">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="ea44e-499">Wartość do zapisania jako transkodowane UTF-8 ciągu JSON jako część pary nazwa/wartość kodowany w formacie UTF-16.</span><span class="sxs-lookup"><span data-stu-id="ea44e-499">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-500">Jeśli jest to wartość false, moduł zapisujący przyjęto założenie, nazwy właściwości poprzedzone odpowiednim znakiem ucieczki i pominie krok ucieczki.</span><span class="sxs-lookup"><span data-stu-id="ea44e-500">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="ea44e-501">Wartość jest zawsze poprzedzone znakiem zmiany znaczenia</span><span class="sxs-lookup"><span data-stu-id="ea44e-501">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="ea44e-502">Zapisuje nazwę właściwości UTF-8 i UTF-16 wartości tekstowej (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-502">Writes the UTF-8 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-503">Element zgłaszany, gdy określona nazwa właściwości lub wartość jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-503">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-504">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-504">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * string * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="ea44e-505">UTF-8 zakodowane nazwy właściwości JSON obiektu do zapisania.</span><span class="sxs-lookup"><span data-stu-id="ea44e-505">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="ea44e-506">Wartość do zapisania jako transkodowane UTF-8 ciągu JSON jako część pary nazwa/wartość kodowany w formacie UTF-16.</span><span class="sxs-lookup"><span data-stu-id="ea44e-506">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-507">Jeśli jest to wartość false, moduł zapisujący przyjęto założenie, nazwy właściwości poprzedzone odpowiednim znakiem ucieczki i pominie krok ucieczki.</span><span class="sxs-lookup"><span data-stu-id="ea44e-507">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="ea44e-508">Wartość jest zawsze poprzedzone znakiem zmiany znaczenia</span><span class="sxs-lookup"><span data-stu-id="ea44e-508">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="ea44e-509">Zapisuje UTF-8 nazwy i ciąg tekstu wartość właściwości (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-509">Writes the UTF-8 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-510">Element zgłaszany, gdy określona nazwa właściwości lub wartość jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-510">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-511">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-511">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTime value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTime value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTime, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTime * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="ea44e-512">UTF-16 zakodowane Właściwość Nazwa obiektu JSON do transkodowania i zapis jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="ea44e-512">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="ea44e-513">Wartość do zapisania jako ciągu JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="ea44e-513">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-514"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-514"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-515">Jest to parametr opcjonalny; jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-515">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-516">Zapisuje nazwę właściwości i <see cref="T:System.DateTime" /> wartości (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-516">Writes the property name and <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="ea44e-517">Zapisuje <see cref="T:System.DateTime" /> przy użyciu wysyłanych ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span><span class="sxs-lookup"><span data-stu-id="ea44e-517">Writes the <see cref="T:System.DateTime" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="ea44e-518">Na przykład 2017-06-12T05:30:45.7680000.</span><span class="sxs-lookup"><span data-stu-id="ea44e-518">For example, 2017-06-12T05:30:45.7680000.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-519"><paramref name="propertyName" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-519"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-520">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-520">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTimeOffset value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTimeOffset value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTimeOffset, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTimeOffset * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="ea44e-521">UTF-16 zakodowane Właściwość Nazwa obiektu JSON do transkodowania i zapis jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="ea44e-521">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="ea44e-522">Wartość do zapisania jako ciągu JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="ea44e-522">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-523"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-523"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-524">Jest to parametr opcjonalny; jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-524">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-525">Zapisuje nazwę właściwości i <see cref="T:System.DateTimeOffset" /> wartości (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-525">Writes the property name and <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="ea44e-526">Zapisuje <see cref="T:System.DateTimeOffset" /> przy użyciu wysyłanych ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span><span class="sxs-lookup"><span data-stu-id="ea44e-526">Writes the <see cref="T:System.DateTimeOffset" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="ea44e-527">Na przykład 2017-06-12T05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="ea44e-527">For example, 2017-06-12T05:30:45.7680000-07:00.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-528"><paramref name="propertyName" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-528"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-529">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-529">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, Guid value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Guid value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As Guid, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * Guid * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Guid" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="ea44e-530">UTF-16 zakodowane Właściwość Nazwa obiektu JSON do transkodowania i zapis jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="ea44e-530">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="ea44e-531">Wartość do zapisania jako ciągu JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="ea44e-531">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-532"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-532"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-533">Jest to parametr opcjonalny; jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-533">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-534">Zapisuje nazwę właściwości i <see cref="T:System.Guid" /> wartości (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-534">Writes the property name and <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="ea44e-535">Zapisuje <see cref="T:System.Guid" /> przy użyciu domyślnego <see cref="T:System.Buffers.StandardFormat" /> (czyli miał "), jak formularz: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span><span class="sxs-lookup"><span data-stu-id="ea44e-535">Writes the <see cref="T:System.Guid" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-536"><paramref name="propertyName" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-536"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-537">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-537">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="ea44e-538">UTF-16 zakodowane Właściwość Nazwa obiektu JSON do transkodowania i zapis jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="ea44e-538">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="ea44e-539">UTF-8 zakodowana wartość do zapisania jako ciągu JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="ea44e-539">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-540">Jeśli jest to wartość false, moduł zapisujący przyjęto założenie, nazwy właściwości poprzedzone odpowiednim znakiem ucieczki i pominie krok ucieczki.</span><span class="sxs-lookup"><span data-stu-id="ea44e-540">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="ea44e-541">Wartość jest zawsze poprzedzone znakiem zmiany znaczenia</span><span class="sxs-lookup"><span data-stu-id="ea44e-541">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="ea44e-542">Zapisuje nazwę właściwości UTF-16 i UTF-8 wartości tekstowej (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-542">Writes the UTF-16 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-543">Element zgłaszany, gdy określona nazwa właściwości lub wartość jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-543">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-544">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-544">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="ea44e-545">UTF-16 zakodowane Właściwość Nazwa obiektu JSON do transkodowania i zapis jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="ea44e-545">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="ea44e-546">Wartość do zapisania jako transkodowane UTF-8 ciągu JSON jako część pary nazwa/wartość kodowany w formacie UTF-16.</span><span class="sxs-lookup"><span data-stu-id="ea44e-546">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-547">Jeśli jest to wartość false, moduł zapisujący przyjęto założenie, nazwy właściwości poprzedzone odpowiednim znakiem ucieczki i pominie krok ucieczki.</span><span class="sxs-lookup"><span data-stu-id="ea44e-547">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="ea44e-548">Wartość jest zawsze poprzedzone znakiem zmiany znaczenia</span><span class="sxs-lookup"><span data-stu-id="ea44e-548">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="ea44e-549">Zapisuje nazwę właściwości UTF-16 i UTF-16 wartości tekstowej (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-549">Writes the UTF-16 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-550">Element zgłaszany, gdy określona nazwa właściwości lub wartość jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-550">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-551">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-551">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * string * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="ea44e-552">UTF-16 zakodowane Właściwość Nazwa obiektu JSON do transkodowania i zapis jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="ea44e-552">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="ea44e-553">Wartość do zapisania jako transkodowane UTF-8 ciągu JSON jako część pary nazwa/wartość kodowany w formacie UTF-16.</span><span class="sxs-lookup"><span data-stu-id="ea44e-553">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-554">Jeśli jest to wartość false, moduł zapisujący przyjęto założenie, nazwy właściwości poprzedzone odpowiednim znakiem ucieczki i pominie krok ucieczki.</span><span class="sxs-lookup"><span data-stu-id="ea44e-554">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="ea44e-555">Wartość jest zawsze poprzedzone znakiem zmiany znaczenia</span><span class="sxs-lookup"><span data-stu-id="ea44e-555">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="ea44e-556">Zapisuje UTF-16 nazwy i ciąg tekstu wartość właściwości (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-556">Writes the UTF-16 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-557">Element zgłaszany, gdy określona nazwa właściwości lub wartość jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-557">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-558">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-558">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTime value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTime value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTime, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTime * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="ea44e-559">UTF-16 zakodowane Właściwość Nazwa obiektu JSON do transkodowania i zapis jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="ea44e-559">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="ea44e-560">Wartość do zapisania jako ciągu JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="ea44e-560">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-561"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-561"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-562">Jest to parametr opcjonalny; jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-562">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-563">Zapisuje nazwę właściwości i <see cref="T:System.DateTime" /> wartości (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-563">Writes the property name and <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="ea44e-564">Zapisuje <see cref="T:System.DateTime" /> przy użyciu wysyłanych ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span><span class="sxs-lookup"><span data-stu-id="ea44e-564">Writes the <see cref="T:System.DateTime" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="ea44e-565">Na przykład 2017-06-12T05:30:45.7680000.</span><span class="sxs-lookup"><span data-stu-id="ea44e-565">For example, 2017-06-12T05:30:45.7680000.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-566"><paramref name="propertyName" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-566"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-567">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-567">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTimeOffset value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTimeOffset value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTimeOffset, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTimeOffset * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="ea44e-568">UTF-16 zakodowane Właściwość Nazwa obiektu JSON do transkodowania i zapis jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="ea44e-568">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="ea44e-569">Wartość do zapisania jako ciągu JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="ea44e-569">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-570"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-570"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-571">Jest to parametr opcjonalny; jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-571">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-572">Zapisuje nazwę właściwości i <see cref="T:System.DateTimeOffset" /> wartości (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-572">Writes the property name and <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="ea44e-573">Zapisuje <see cref="T:System.DateTimeOffset" /> przy użyciu wysyłanych ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span><span class="sxs-lookup"><span data-stu-id="ea44e-573">Writes the <see cref="T:System.DateTimeOffset" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="ea44e-574">Na przykład 2017-06-12T05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="ea44e-574">For example, 2017-06-12T05:30:45.7680000-07:00.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-575"><paramref name="propertyName" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-575"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-576">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-576">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, Guid value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.Guid value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As Guid, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * Guid * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Guid" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="ea44e-577">UTF-16 zakodowane Właściwość Nazwa obiektu JSON do transkodowania i zapis jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="ea44e-577">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="ea44e-578">Wartość do zapisania jako ciągu JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="ea44e-578">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-579"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-579"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-580">Jest to parametr opcjonalny; jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-580">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-581">Zapisuje nazwę właściwości i <see cref="T:System.Guid" /> wartości (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-581">Writes the property name and <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="ea44e-582">Zapisuje <see cref="T:System.Guid" /> przy użyciu domyślnego <see cref="T:System.Buffers.StandardFormat" /> (czyli miał "), jak formularz: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span><span class="sxs-lookup"><span data-stu-id="ea44e-582">Writes the <see cref="T:System.Guid" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-583"><paramref name="propertyName" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-583"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-584">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-584">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="ea44e-585">UTF-16 zakodowane Właściwość Nazwa obiektu JSON do transkodowania i zapis jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="ea44e-585">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="ea44e-586">UTF-8 zakodowana wartość do zapisania jako ciągu JSON jako część pary nazwa/wartość.</span><span class="sxs-lookup"><span data-stu-id="ea44e-586">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-587">Jeśli jest to wartość false, moduł zapisujący przyjęto założenie, nazwy właściwości poprzedzone odpowiednim znakiem ucieczki i pominie krok ucieczki.</span><span class="sxs-lookup"><span data-stu-id="ea44e-587">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="ea44e-588">Wartość jest zawsze poprzedzone znakiem zmiany znaczenia</span><span class="sxs-lookup"><span data-stu-id="ea44e-588">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="ea44e-589">Zapisuje nazwę właściwości i wartości tekstowej UTF-8 (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-589">Writes the property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-590">Element zgłaszany, gdy określona nazwa właściwości lub wartość jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-590">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-591">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-591">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="ea44e-592">UTF-16 zakodowane Właściwość Nazwa obiektu JSON do transkodowania i zapis jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="ea44e-592">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="ea44e-593">Wartość do zapisania jako transkodowane UTF-8 ciągu JSON jako część pary nazwa/wartość kodowany w formacie UTF-16.</span><span class="sxs-lookup"><span data-stu-id="ea44e-593">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-594">Jeśli jest to wartość false, moduł zapisujący przyjęto założenie, nazwy właściwości poprzedzone odpowiednim znakiem ucieczki i pominie krok ucieczki.</span><span class="sxs-lookup"><span data-stu-id="ea44e-594">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="ea44e-595">Wartość jest zawsze poprzedzone znakiem zmiany znaczenia</span><span class="sxs-lookup"><span data-stu-id="ea44e-595">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="ea44e-596">Zapisuje nazwę właściwości i wartości tekstowej UTF-16 (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-596">Writes the property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-597">Element zgłaszany, gdy określona nazwa właściwości lub wartość jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-597">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-598">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-598">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * string * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="ea44e-599">UTF-16 zakodowane Właściwość Nazwa obiektu JSON do transkodowania i zapis jako UTF-8.</span><span class="sxs-lookup"><span data-stu-id="ea44e-599">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="ea44e-600">Wartość do zapisania jako transkodowane UTF-8 ciągu JSON jako część pary nazwa/wartość kodowany w formacie UTF-16.</span><span class="sxs-lookup"><span data-stu-id="ea44e-600">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-601">Jeśli jest to wartość false, moduł zapisujący przyjęto założenie, nazwy właściwości poprzedzone odpowiednim znakiem ucieczki i pominie krok ucieczki.</span><span class="sxs-lookup"><span data-stu-id="ea44e-601">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="ea44e-602">Wartość jest zawsze poprzedzone znakiem zmiany znaczenia</span><span class="sxs-lookup"><span data-stu-id="ea44e-602">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="ea44e-603">Zapisuje nazwę i ciąg tekstu wartość właściwości (jako ciąg JSON) jako część pary nazwa/wartość obiektu JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-603">Writes the property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-604">Element zgłaszany, gdy określona nazwa właściwości lub wartość jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-604">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-605">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-605">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTime -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ea44e-606">Wartość do zapisania jako ciągu JSON jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-606">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="ea44e-607">Zapisuje <see cref="T:System.DateTime" /> wartości (jako ciąg JSON) jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-607">Writes the <see cref="T:System.DateTime" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="ea44e-608">Zapisuje <see cref="T:System.DateTime" /> przy użyciu wysyłanych ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span><span class="sxs-lookup"><span data-stu-id="ea44e-608">Writes the <see cref="T:System.DateTime" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="ea44e-609">Na przykład 2017-06-12T05:30:45.7680000.</span><span class="sxs-lookup"><span data-stu-id="ea44e-609">For example, 2017-06-12T05:30:45.7680000.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-610">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-610">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ea44e-611">Wartość do zapisania jako ciągu JSON jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-611">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="ea44e-612">Zapisuje <see cref="T:System.DateTimeOffset" /> wartości (jako ciąg JSON) jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-612">Writes the <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="ea44e-613">Zapisuje <see cref="T:System.DateTimeOffset" /> przy użyciu wysyłanych ('O') <see cref="T:System.Buffers.StandardFormat" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-613">Writes the <see cref="T:System.DateTimeOffset" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" />.</span></span> <span data-ttu-id="ea44e-614">Na przykład 2017-06-12T05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="ea44e-614">For example, 2017-06-12T05:30:45.7680000-07:00.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-615">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-615">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : Guid -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ea44e-616">Wartość do zapisania jako ciągu JSON jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-616">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="ea44e-617">Zapisuje <see cref="T:System.Guid" /> wartości (jako ciąg JSON) jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-617">Writes the <see cref="T:System.Guid" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="ea44e-618">Zapisuje <see cref="T:System.Guid" /> przy użyciu domyślnego <see cref="T:System.Buffers.StandardFormat" /> (czyli miał "), jak formularz: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span><span class="sxs-lookup"><span data-stu-id="ea44e-618">Writes the <see cref="T:System.Guid" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-619">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-619">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStringValue (utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8Value"><span data-ttu-id="ea44e-620">UTF-8 zakodowana wartość ma zostać zapisany jako element ciągu JSON w tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-620">The UTF-8 encoded value to be written as a JSON string element of a JSON array.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-621"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-621"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-622">Jest to parametr opcjonalny, a jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-622">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-623">Zapisuje wartości tekstowej UTF-8 (jako ciąg JSON) jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-623">Writes the UTF-8 text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-624"><paramref name="utf8Value" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-624"><paramref name="utf8Value" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-625">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-625">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStringValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ea44e-626">Wartość do zapisania jako element ciągu UTF-8 transkodowane JSON w tablicy JSON kodowany w formacie UTF-16.</span><span class="sxs-lookup"><span data-stu-id="ea44e-626">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-627"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-627"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-628">Jest to parametr opcjonalny, a jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-628">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-629">Zapisuje wartości tekstowej UTF-16 (jako ciąg JSON) jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-629">Writes the UTF-16 text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-630"><paramref name="value" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-630"><paramref name="value" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-631">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-631">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteStringValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ea44e-632">Wartość do zapisania jako element ciągu UTF-8 transkodowane JSON w tablicy JSON kodowany w formacie UTF-16.</span><span class="sxs-lookup"><span data-stu-id="ea44e-632">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <param name="escape"><span data-ttu-id="ea44e-633"><see langword="false" /> Wskazuje, że moduł zapisujący założyć, że właściwość nazwa poprzedzone odpowiednim znakiem ucieczki i pominie kroki ucieczki. w przeciwnym razie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-633"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="ea44e-634">Jest to parametr opcjonalny, a jego wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="ea44e-634">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="ea44e-635">Zapisuje ciąg wartości tekstowej (jako ciąg JSON) jako element tablicy JSON.</span><span class="sxs-lookup"><span data-stu-id="ea44e-635">Writes the string text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea44e-636"><paramref name="value" /> jest zbyt duży.</span><span class="sxs-lookup"><span data-stu-id="ea44e-636"><paramref name="value" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea44e-637">Dane JSON, który ma zostać zapisany będzie obiekt JSON jest nieprawidłowy, (gdy włączona jest weryfikacja).</span><span class="sxs-lookup"><span data-stu-id="ea44e-637">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
