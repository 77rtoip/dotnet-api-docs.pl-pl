<Type Name="InstallContext" FullName="System.Configuration.Install.InstallContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e6621ecd89b04f69ace758d85792b68231ae46cd" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69380037" /></Metadata><TypeSignature Language="C#" Value="public class InstallContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InstallContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.Install.InstallContext" />
  <TypeSignature Language="VB.NET" Value="Public Class InstallContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class InstallContext" />
  <TypeSignature Language="F#" Value="type InstallContext = class" />
  <AssemblyInfo>
    <AssemblyName>System.Configuration.Install</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zawiera informacje o bieżącej instalacji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwykle tworzony jest plik wykonywalny instalacji, taki jak Installutil. exe, który instaluje zestawy. <xref:System.Configuration.Install.InstallContext> Program instalacyjny wywołuje <xref:System.Configuration.Install.InstallContext> Konstruktor, przekazując go do domyślnej ścieżki pliku dziennika i parametrów wiersza polecenia.  
  
 <xref:System.Configuration.Install.Installer.Install%2A>Przed wywołaniem metody, <xref:System.Configuration.Install.Installer.Commit%2A>, <xref:System.Configuration.Install.Installer.Rollback%2A> <xref:System.Configuration.Install.Installer.Uninstall%2A> lub,program<xref:System.Configuration.Install.InstallContext>instalacyjny ustawia <xref:System.Configuration.Install.Installer> Właściwośćdowystąpienia.<xref:System.Configuration.Install.Installer.Context%2A> Przed wywołaniem tych metod, <xref:System.Configuration.Install.Installer> który zawiera kolekcję Instalatora <xref:System.Configuration.Install.Installer.Installers%2A> we właściwości, ustawia <xref:System.Configuration.Install.Installer.Context%2A> właściwość każdego zawartego Instalatora.  
  
 <xref:System.Configuration.Install.InstallContext.Parameters%2A> Właściwość zawiera przeanalizowana wersję wiersza polecenia, który został wprowadzony do uruchomienia pliku wykonywalnego instalacji. Właściwość zawiera informacje, takie jak ścieżka do pliku dziennika, określa, czy informacje o dziennikach mają być wyświetlane w konsoli, oraz czy podczas instalacji ma być pokazywany interfejs użytkownika. Wywołaj <xref:System.Configuration.Install.InstallContext.IsParameterTrue%2A> metodę, aby dowiedzieć się, czy parametr wiersza polecenia `true`jest.  
  
 Użyj metody <xref:System.Configuration.Install.InstallContext.LogMessage%2A> , aby zapisać komunikaty o stanie w pliku dziennika instalacji i konsoli programu.  
  
   
  
## Examples  
 Poniższy <xref:System.Configuration.Install.InstallContext.%23ctor%2A> przykład demonstruje konstruktory <xref:System.Configuration.Install.InstallContext.LogMessage%2A> <xref:System.Configuration.Install.InstallContext.Parameters%2A> , właściwość i metody <xref:System.Configuration.Install.InstallContext> i <xref:System.Configuration.Install.InstallContext.IsParameterTrue%2A> klasy.  
  
 Gdy wywoływana jest metoda Instalatora, sprawdza parametry w wierszu polecenia. <xref:System.Configuration.Install.Installer.Install%2A> W zależności od tego program wyświetla komunikaty o postępie na konsoli programu, a także zapisuje je w określonym pliku dziennika.  
  
 Gdy program jest wywoływany bez żadnych argumentów, tworzony jest <xref:System.Configuration.Install.InstallContext> pusty. Gdy określono wartość "/LogFile" i "/LogtoConsole", <xref:System.Configuration.Install.InstallContext> jest ona tworzona przez przekazanie odpowiednich argumentów do. <xref:System.Configuration.Install.InstallContext.%23ctor%2A>  
  
 [!code-cpp[InstallContext_InstallContext#1](~/samples/snippets/cpp/VS_Snippets_CLR/InstallContext_InstallContext/CPP/installcontext_installcontext.cpp#1)]
 [!code-csharp[InstallContext_InstallContext#1](~/samples/snippets/csharp/VS_Snippets_CLR/InstallContext_InstallContext/CS/installcontext_installcontext.cs#1)]
 [!code-vb[InstallContext_InstallContext#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/InstallContext_InstallContext/VB/installcontext_installcontext.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Configuration.Install.Installer" />
    <altmember cref="T:System.Configuration.Install.TransactedInstaller" />
    <altmember cref="T:System.Configuration.Install.AssemblyInstaller" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Configuration.Install.InstallContext" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InstallContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Install.InstallContext.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InstallContext();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Configuration.Install.InstallContext" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To Przeciążenie nie tworzy pliku dziennika dla instalacji.  
  
   
  
## Examples  
  
> [!NOTE]
>  Ten przykład pokazuje, jak używać jednej ze przeciążonych wersji <xref:System.Configuration.Install.InstallContext> konstruktora. Inne przykłady, które mogą być dostępne, można znaleźć w tematach dotyczących poszczególnych przeciążeń.  
  
 Gdy program jest wywoływany bez żadnych argumentów, tworzony jest <xref:System.Configuration.Install.InstallContext> pusty.  
  
 [!code-cpp[InstallContext_InstallContext#2](~/samples/snippets/cpp/VS_Snippets_CLR/InstallContext_InstallContext/CPP/installcontext_installcontext.cpp#2)]
 [!code-csharp[InstallContext_InstallContext#2](~/samples/snippets/csharp/VS_Snippets_CLR/InstallContext_InstallContext/CS/installcontext_installcontext.cs#2)]
 [!code-vb[InstallContext_InstallContext#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/InstallContext_InstallContext/VB/installcontext_installcontext.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InstallContext (string logFilePath, string[] commandLine);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string logFilePath, string[] commandLine) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Install.InstallContext.#ctor(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (logFilePath As String, commandLine As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InstallContext(System::String ^ logFilePath, cli::array &lt;System::String ^&gt; ^ commandLine);" />
      <MemberSignature Language="F#" Value="new System.Configuration.Install.InstallContext : string * string[] -&gt; System.Configuration.Install.InstallContext" Usage="new System.Configuration.Install.InstallContext (logFilePath, commandLine)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="logFilePath" Type="System.String" />
        <Parameter Name="commandLine" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="logFilePath">Ścieżka do pliku dziennika dla tej instalacji lub <see langword="null" /> Jeśli nie należy utworzyć pliku dziennika.</param>
        <param name="commandLine">Parametry wiersza polecenia wprowadzone podczas uruchamiania programu instalacyjnego lub <see langword="null" /> nie zostały wprowadzone.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Configuration.Install.InstallContext" /> klasy i tworzy plik dziennika dla instalacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli instalacja używa programu [Installutil. exe (Narzędzie instalatora)](~/docs/framework/tools/installutil-exe-installer-tool.md), ten konstruktor tworzy plik dziennika w określonej ścieżce i analizuje tablicę parametrów wiersza polecenia we <xref:System.Configuration.Install.InstallContext.Parameters%2A> właściwości. Jeśli ścieżka do pliku dziennika jest określona w parametrach wiersza polecenia, zostanie użyta do utworzenia tego pliku. Jeśli argument pliku dziennika nie zostanie określony w wierszu polecenia, zostanie użyta wartość `logFilePath` parametru. Aby pominąć tworzenie pliku dziennika, należy przekazać parametr wiersza polecenia "/LogFile =".  
  
   
  
## Examples  
 Ten przykład to fragment przykładu w klasie przegląd <xref:System.Configuration.Install.InstallContext> klasy.  
  
 Gdy określono wartość "/LogFile" i "/LogtoConsole", <xref:System.Configuration.Install.InstallContext> jest ona tworzona przez przekazanie odpowiednich argumentów do. <xref:System.Configuration.Install.InstallContext.%23ctor%2A>  
  
 [!code-cpp[InstallContext_InstallContext#3](~/samples/snippets/cpp/VS_Snippets_CLR/InstallContext_InstallContext/CPP/installcontext_installcontext.cpp#3)]
 [!code-csharp[InstallContext_InstallContext#3](~/samples/snippets/csharp/VS_Snippets_CLR/InstallContext_InstallContext/CS/installcontext_installcontext.cs#3)]
 [!code-vb[InstallContext_InstallContext#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/InstallContext_InstallContext/VB/installcontext_installcontext.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>Podczas wywoływania tego konstruktora Przekaż domyślną ścieżkę do <paramref name="logFilePath" /> pliku dziennika. Jest to miejsce, w którym tworzony jest plik dziennika, chyba że parametr wiersza polecenia/LogFile jest używany podczas uruchamiania pliku wykonywalnego instalacji.</para></block>
        <altmember cref="P:System.Configuration.Install.InstallContext.Parameters" />
        <altmember cref="M:System.Configuration.Install.InstallContext.LogMessage(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsParameterTrue">
      <MemberSignature Language="C#" Value="public bool IsParameterTrue (string paramName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsParameterTrue(string paramName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Install.InstallContext.IsParameterTrue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsParameterTrue (paramName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsParameterTrue(System::String ^ paramName);" />
      <MemberSignature Language="F#" Value="member this.IsParameterTrue : string -&gt; bool" Usage="installContext.IsParameterTrue paramName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="paramName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="paramName">Nazwa parametru wiersza polecenia do sprawdzenia.</param>
        <summary>Określa, czy określony parametr wiersza polecenia jest <see langword="true" />.</summary>
        <returns><see langword="true" />Jeśli określony parametr ma wartość "yes", "true", "1" lub pusty ciąg (""); w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda uzyskuje dostęp <xref:System.Configuration.Install.InstallContext.Parameters%2A> do właściwości, która zawiera przeanalizowane wersje parametrów wiersza polecenia, aby określić, czy określony parametr ma `true`wartość.  
  
   
  
## Examples  
 Ten przykład jest fragmentem próbki w przegląd <xref:System.Configuration.Install.InstallContext> klasy klasy.  
  
 Używa metody, <xref:System.Configuration.Install.InstallContext.IsParameterTrue%2A> aby dowiedzieć się, `LogtoConsole` czy parametr został ustawiony. Jeśli `yes`następnie będzie <xref:System.Configuration.Install.InstallContext.LogMessage%2A> używać metody do zapisywania komunikatów o stanie w pliku dziennika instalacji i konsoli programu.  
  
 [!code-cpp[InstallContext_InstallContext#4](~/samples/snippets/cpp/VS_Snippets_CLR/InstallContext_InstallContext/CPP/installcontext_installcontext.cpp#4)]
 [!code-csharp[InstallContext_InstallContext#4](~/samples/snippets/csharp/VS_Snippets_CLR/InstallContext_InstallContext/CS/installcontext_installcontext.cs#4)]
 [!code-vb[InstallContext_InstallContext#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/InstallContext_InstallContext/VB/installcontext_installcontext.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Configuration.Install.InstallContext.Parameters" />
      </Docs>
    </Member>
    <Member MemberName="LogMessage">
      <MemberSignature Language="C#" Value="public void LogMessage (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LogMessage(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Install.InstallContext.LogMessage(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LogMessage (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LogMessage(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.LogMessage : string -&gt; unit" Usage="installContext.LogMessage message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Wiadomość do zapisu.</param>
        <summary>Zapisuje komunikat w konsoli programu i w pliku dziennika instalacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Instalator może wywołać tę metodę, aby zapisać postęp lub inne informacje o stanie w pliku dziennika. Jeśli parametry wiersza polecenia określają, że interfejs użytkownika powinien być wyświetlany, Instalator powinien pokazać okna komunikatów lub wykonać zapytania oprócz wywołania <xref:System.Configuration.Install.InstallContext.LogMessage%2A> metody. Tekst zapisany w pliku dziennika nie będzie widoczny dla użytkownika, chyba że InstallUtil. exe jest używany do uruchomienia instalacji i w wierszu polecenia określono wartość "/LogToConsole = true".  
  
   
  
## Examples  
 Ten przykład to fragment przykładu w klasie przegląd <xref:System.Configuration.Install.InstallContext> klasy.  
  
 Używa metody, <xref:System.Configuration.Install.InstallContext.IsParameterTrue%2A> aby dowiedzieć się, `LogtoConsole` czy parametr został ustawiony. Jeśli `yes`następnie będzie <xref:System.Configuration.Install.InstallContext.LogMessage%2A> używać metody do zapisywania komunikatów o stanie w pliku dziennika instalacji i konsoli programu.  
  
 [!code-cpp[InstallContext_InstallContext#4](~/samples/snippets/cpp/VS_Snippets_CLR/InstallContext_InstallContext/CPP/installcontext_installcontext.cpp#4)]
 [!code-csharp[InstallContext_InstallContext#4](~/samples/snippets/csharp/VS_Snippets_CLR/InstallContext_InstallContext/CS/installcontext_installcontext.cs#4)]
 [!code-vb[InstallContext_InstallContext#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/InstallContext_InstallContext/VB/installcontext_installcontext.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Configuration.Install.InstallContext.Parameters" />
      </Docs>
    </Member>
    <Member MemberName="Parameters">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.StringDictionary Parameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.StringDictionary Parameters" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.Install.InstallContext.Parameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parameters As StringDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::StringDictionary ^ Parameters { System::Collections::Specialized::StringDictionary ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parameters : System.Collections.Specialized.StringDictionary" Usage="System.Configuration.Install.InstallContext.Parameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.StringDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera parametry wiersza polecenia, które zostały wprowadzone, gdy InstallUtil. exe został uruchomiony.</summary>
        <value><see cref="T:System.Collections.Specialized.StringDictionary" /> Reprezentuje parametry wiersza polecenia, które zostały wprowadzone, gdy plik wykonywalny instalacji został uruchomiony.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po utworzeniu nowego <xref:System.Configuration.Install.InstallContext> parametru wiersza polecenia są analizowane <xref:System.Configuration.Install.InstallContext.Parameters%2A> we właściwości. Zarówno klucze, jak i wartości parametrów są ciągami.  
  
   
  
## Examples  
 Ten przykład to fragment przykładu w klasie przegląd <xref:System.Configuration.Install.InstallContext> klasy.  
  
 Przykład pobiera <xref:System.Configuration.Install.InstallContext.Parameters%2A> właściwość, aby sprawdzić, czy dany argument wiersza polecenia został wprowadzony przez użytkownika. Używa również metody, <xref:System.Configuration.Install.InstallContext.IsParameterTrue%2A> aby sprawdzić, `LogtoConsole` czy parametr został ustawiony. Jeśli `yes`następnie będzie <xref:System.Configuration.Install.InstallContext.LogMessage%2A> używać metody do zapisywania komunikatów o stanie w pliku dziennika instalacji i konsoli programu.  
  
 [!code-cpp[InstallContext_InstallContext#6](~/samples/snippets/cpp/VS_Snippets_CLR/InstallContext_InstallContext/CPP/installcontext_installcontext.cpp#6)]
 [!code-csharp[InstallContext_InstallContext#6](~/samples/snippets/csharp/VS_Snippets_CLR/InstallContext_InstallContext/CS/installcontext_installcontext.cs#6)]
 [!code-vb[InstallContext_InstallContext#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/InstallContext_InstallContext/VB/installcontext_installcontext.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Specialized.StringDictionary" />
      </Docs>
    </Member>
    <Member MemberName="ParseCommandLine">
      <MemberSignature Language="C#" Value="protected static System.Collections.Specialized.StringDictionary ParseCommandLine (string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Collections.Specialized.StringDictionary ParseCommandLine(string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Install.InstallContext.ParseCommandLine(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function ParseCommandLine (args As String()) As StringDictionary" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Collections::Specialized::StringDictionary ^ ParseCommandLine(cli::array &lt;System::String ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="static member ParseCommandLine : string[] -&gt; System.Collections.Specialized.StringDictionary" Usage="System.Configuration.Install.InstallContext.ParseCommandLine args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.StringDictionary</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="args">Tablica zawierająca parametry wiersza polecenia.</param>
        <summary>Analizuje parametry wiersza polecenia w słowniku ciągów.</summary>
        <returns>A <see cref="T:System.Collections.Specialized.StringDictionary" /> zawierającego przeanalizowane parametry wiersza polecenia.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Configuration.Install.InstallContext.Parameters" />
        <altmember cref="M:System.Configuration.Install.InstallContext.IsParameterTrue(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>
