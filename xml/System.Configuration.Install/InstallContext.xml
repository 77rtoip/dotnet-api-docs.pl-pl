<Type Name="InstallContext" FullName="System.Configuration.Install.InstallContext">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0866b9a8d8027df2cd3f53a8dc6b20d77983798f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30443466" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class InstallContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InstallContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.Install.InstallContext" />
  <TypeSignature Language="VB.NET" Value="Public Class InstallContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class InstallContext" />
  <AssemblyInfo>
    <AssemblyName>System.Configuration.Install</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zawiera informacje o bieżącej instalacji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zazwyczaj <xref:System.Configuration.Install.InstallContext> jest tworzona podczas instalacji pliku wykonywalnego, takich jak InstallUtil.exe, który instaluje zestawy. Wywołuje program instalacyjny <xref:System.Configuration.Install.InstallContext> Konstruktor przekazaniem go, domyślna ścieżka pliku dziennika i parametry wiersza polecenia.  
  
 Przed wywołaniem jego <xref:System.Configuration.Install.Installer.Install%2A>, <xref:System.Configuration.Install.Installer.Commit%2A>, <xref:System.Configuration.Install.Installer.Rollback%2A>, lub <xref:System.Configuration.Install.Installer.Uninstall%2A> metody, program instalacyjny ustawia <xref:System.Configuration.Install.Installer.Context%2A> właściwość <xref:System.Configuration.Install.Installer> do wystąpienia <xref:System.Configuration.Install.InstallContext>. Przed wywołaniem tych metod <xref:System.Configuration.Install.Installer> zawierający kolekcji Instalatora w <xref:System.Configuration.Install.Installer.Installers%2A> zestawy właściwości <xref:System.Configuration.Install.Installer.Context%2A> właściwości każdego zawartych w niej Instalatora.  
  
 <xref:System.Configuration.Install.InstallContext.Parameters%2A> Właściwość zawiera przeanalizowana wersja wprowadzony uruchamiania instalacji pliku wykonywalnego wiersza polecenia. Ta właściwość zawiera informacje, takie jak ścieżka do pliku dziennika, czy mają być wyświetlane informacje dziennika w konsoli i czy wyświetlać interfejsu użytkownika podczas instalacji. Wywołanie <xref:System.Configuration.Install.InstallContext.IsParameterTrue%2A> metodę, aby sprawdzić, czy parametr wiersza polecenia `true`.  
  
 Użyj <xref:System.Configuration.Install.InstallContext.LogMessage%2A> metody do zapisywania komunikatów o stanie pliku dziennika instalacji i konsoli.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano <xref:System.Configuration.Install.InstallContext.%23ctor%2A> konstruktorów, <xref:System.Configuration.Install.InstallContext.Parameters%2A> właściwości i <xref:System.Configuration.Install.InstallContext.LogMessage%2A> i <xref:System.Configuration.Install.InstallContext.IsParameterTrue%2A> metody <xref:System.Configuration.Install.InstallContext> klasy.  
  
 Gdy <xref:System.Configuration.Install.Installer.Install%2A> wywoływana jest metoda Instalatora, sprawdza parametry wiersza polecenia. W zależności od tego, który wyświetla komunikaty o postępie do konsoli i zapisuje go do określonego pliku dziennika.  
  
 Gdy program jest wywoływana bez żadnych argumentów pustą <xref:System.Configuration.Install.InstallContext> jest tworzony. Gdy "/ LogFile" i "/ LogtoConsole" są określone, <xref:System.Configuration.Install.InstallContext> jest tworzony przez przekazanie odpowiednich argumenty <xref:System.Configuration.Install.InstallContext.%23ctor%2A>.  
  
 [!code-cpp[InstallContext_InstallContext#1](~/samples/snippets/cpp/VS_Snippets_CLR/InstallContext_InstallContext/CPP/installcontext_installcontext.cpp#1)]
 [!code-csharp[InstallContext_InstallContext#1](~/samples/snippets/csharp/VS_Snippets_CLR/InstallContext_InstallContext/CS/installcontext_installcontext.cs#1)]
 [!code-vb[InstallContext_InstallContext#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/InstallContext_InstallContext/VB/installcontext_installcontext.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Configuration.Install.Installer" />
    <altmember cref="T:System.Configuration.Install.TransactedInstaller" />
    <altmember cref="T:System.Configuration.Install.AssemblyInstaller" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Configuration.Install.InstallContext" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InstallContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Install.InstallContext.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InstallContext();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Configuration.Install.InstallContext" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To przeciążenie nie tworzy pliku dziennika instalacji.  
  
   
  
## Examples  
  
> [!NOTE]
>  W tym przykładzie pokazano, jak używać jednej z zastąpionej wersji <xref:System.Configuration.Install.InstallContext> konstruktora. Inne przykłady, które mogą być dostępne znajduje się w tematach poszczególnych przeciążenia.  
  
 Gdy program jest wywoływana bez żadnych argumentów pustą <xref:System.Configuration.Install.InstallContext> jest tworzony.  
  
 [!code-cpp[InstallContext_InstallContext#2](~/samples/snippets/cpp/VS_Snippets_CLR/InstallContext_InstallContext/CPP/installcontext_installcontext.cpp#2)]
 [!code-csharp[InstallContext_InstallContext#2](~/samples/snippets/csharp/VS_Snippets_CLR/InstallContext_InstallContext/CS/installcontext_installcontext.cs#2)]
 [!code-vb[InstallContext_InstallContext#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/InstallContext_InstallContext/VB/installcontext_installcontext.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InstallContext (string logFilePath, string[] commandLine);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string logFilePath, string[] commandLine) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Install.InstallContext.#ctor(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (logFilePath As String, commandLine As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InstallContext(System::String ^ logFilePath, cli::array &lt;System::String ^&gt; ^ commandLine);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="logFilePath" Type="System.String" />
        <Parameter Name="commandLine" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="logFilePath">Ścieżka do pliku dziennika dla tej instalacji lub <see langword="null" /> Jeśli plik dziennika nie powinien zostać utworzony.</param>
        <param name="commandLine">Parametry wiersza polecenia wprowadzone podczas uruchamiania programu instalacyjnego lub <see langword="null" /> Jeśli żaden nie wprowadzono.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Configuration.Install.InstallContext" /> klasy, a następnie tworzy plik dziennika instalacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli instalacja używa [Installutil.exe (Narzędzie Instalatora)](~/docs/framework/tools/installutil-exe-installer-tool.md), ten konstruktor tworzy plik dziennika w określonej ścieżce i analizuje tablicy parametrów wiersza polecenia do <xref:System.Configuration.Install.InstallContext.Parameters%2A> właściwości. Jeśli ścieżka pliku dziennika jest określona w parametry wiersza polecenia, służy do tworzenia pliku. Jeśli nie określono argumentu Plik dziennika w wierszu polecenia, a wartość `logFilePath` parametr jest używany. Aby pominąć tworzenie pliku dziennika, należy przekazać "/ logfile =" parametru wiersza polecenia.  
  
   
  
## Examples  
 W tym przykładzie znajduje się fragment przykładu w przeglądzie klasy <xref:System.Configuration.Install.InstallContext> klasy.  
  
 Gdy "/ LogFile" i "/ LogtoConsole" są określone, <xref:System.Configuration.Install.InstallContext> jest tworzony przez przekazanie odpowiednich argumenty <xref:System.Configuration.Install.InstallContext.%23ctor%2A>.  
  
 [!code-cpp[InstallContext_InstallContext#3](~/samples/snippets/cpp/VS_Snippets_CLR/InstallContext_InstallContext/CPP/installcontext_installcontext.cpp#3)]
 [!code-csharp[InstallContext_InstallContext#3](~/samples/snippets/csharp/VS_Snippets_CLR/InstallContext_InstallContext/CS/installcontext_installcontext.cs#3)]
 [!code-vb[InstallContext_InstallContext#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/InstallContext_InstallContext/VB/installcontext_installcontext.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Przekaż domyślną ścieżką pliku dziennika w <paramref name="logFilePath" /> parametru po wywołaniu tego konstruktora. Jest to, gdy plik dziennika jest tworzony, chyba że logfile parametru wiersza polecenia jest używane podczas instalacji pliku wykonywalnego.</para>
        </block>
        <altmember cref="P:System.Configuration.Install.InstallContext.Parameters" />
        <altmember cref="M:System.Configuration.Install.InstallContext.LogMessage(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsParameterTrue">
      <MemberSignature Language="C#" Value="public bool IsParameterTrue (string paramName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsParameterTrue(string paramName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Install.InstallContext.IsParameterTrue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsParameterTrue (paramName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsParameterTrue(System::String ^ paramName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="paramName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="paramName">Nazwa parametru wiersza polecenia do sprawdzenia.</param>
        <summary>Określa, czy określony parametr wiersza polecenia jest <see langword="true" />.</summary>
        <returns>
          <see langword="true" /> Jeśli określony parametr jest ustawiony na "tak", "prawda", "1" lub ciąg pusty (""); w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda uzyskuje dostęp do <xref:System.Configuration.Install.InstallContext.Parameters%2A> właściwość, która zawiera wersję przeanalizowany parametrów wiersza polecenia, aby ustalić, czy określony parametr `true`.  
  
   
  
## Examples  
 W tym przykładzie znajduje się fragment próbki w przeglądzie klasy <xref:System.Configuration.Install.InstallContext> klasy.  
  
 Używa <xref:System.Configuration.Install.InstallContext.IsParameterTrue%2A> metodę, aby sprawdzić, czy `LogtoConsole` ustawiono parametr. Jeśli `yes`, następnie użyje <xref:System.Configuration.Install.InstallContext.LogMessage%2A> metody do zapisywania komunikatów o stanie pliku dziennika instalacji i konsoli.  
  
 [!code-cpp[InstallContext_InstallContext#4](~/samples/snippets/cpp/VS_Snippets_CLR/InstallContext_InstallContext/CPP/installcontext_installcontext.cpp#4)]
 [!code-csharp[InstallContext_InstallContext#4](~/samples/snippets/csharp/VS_Snippets_CLR/InstallContext_InstallContext/CS/installcontext_installcontext.cs#4)]
 [!code-vb[InstallContext_InstallContext#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/InstallContext_InstallContext/VB/installcontext_installcontext.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Configuration.Install.InstallContext.Parameters" />
      </Docs>
    </Member>
    <Member MemberName="LogMessage">
      <MemberSignature Language="C#" Value="public void LogMessage (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LogMessage(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Install.InstallContext.LogMessage(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LogMessage (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LogMessage(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Wiadomość do zapisu.</param>
        <summary>Zapisuje komunikat do konsoli i pliku dziennika instalacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Instalator może wywołać tę metodę, aby zapisać postęp lub inne informacje o stanie pliku dziennika. Parametry wiersza polecenia określenia, czy można wyświetlić interfejsu użytkownika, Instalator powinien Pokaż pola komunikatów lub tworzenie kwerend oprócz wywołania <xref:System.Configuration.Install.InstallContext.LogMessage%2A> metody. Tekst w pliku dziennika zapisywany nie będą widoczne przez użytkownika, chyba że InstallUtil.exe służy do uruchamiania instalacji i "/ LogToConsole = true" w wierszu polecenia określono.  
  
   
  
## Examples  
 W tym przykładzie znajduje się fragment przykładu w przeglądzie klasy <xref:System.Configuration.Install.InstallContext> klasy.  
  
 Używa <xref:System.Configuration.Install.InstallContext.IsParameterTrue%2A> metodę, aby sprawdzić, czy `LogtoConsole` ustawiono parametr. Jeśli `yes`, następnie użyje <xref:System.Configuration.Install.InstallContext.LogMessage%2A> metody do zapisywania komunikatów o stanie pliku dziennika instalacji i konsoli.  
  
 [!code-cpp[InstallContext_InstallContext#4](~/samples/snippets/cpp/VS_Snippets_CLR/InstallContext_InstallContext/CPP/installcontext_installcontext.cpp#4)]
 [!code-csharp[InstallContext_InstallContext#4](~/samples/snippets/csharp/VS_Snippets_CLR/InstallContext_InstallContext/CS/installcontext_installcontext.cs#4)]
 [!code-vb[InstallContext_InstallContext#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/InstallContext_InstallContext/VB/installcontext_installcontext.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Configuration.Install.InstallContext.Parameters" />
      </Docs>
    </Member>
    <Member MemberName="Parameters">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.StringDictionary Parameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.StringDictionary Parameters" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.Install.InstallContext.Parameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parameters As StringDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::StringDictionary ^ Parameters { System::Collections::Specialized::StringDictionary ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.StringDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera parametry wiersza polecenia, które zostały wprowadzone podczas uruchamiania InstallUtil.exe.</summary>
        <value>A <see cref="T:System.Collections.Specialized.StringDictionary" /> reprezentujący parametry wiersza polecenia, które zostały wprowadzone podczas uruchamiania pliku wykonywalnego instalacji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas tworzenia nowego <xref:System.Configuration.Install.InstallContext> jest tworzony, wiersza polecenia parametry są parsowane do <xref:System.Configuration.Install.InstallContext.Parameters%2A> właściwości. Zarówno klucze i wartości parametrów są ciągami.  
  
   
  
## Examples  
 W tym przykładzie znajduje się fragment przykładu w przeglądzie klasy <xref:System.Configuration.Install.InstallContext> klasy.  
  
 Pobiera próbkę <xref:System.Configuration.Install.InstallContext.Parameters%2A> właściwości, aby zobaczyć, jeśli dowolny z argumentów wiersza polecenia została wprowadzona przez użytkownika. Ponadto użyto <xref:System.Configuration.Install.InstallContext.IsParameterTrue%2A> metodę, aby sprawdzić, czy `LogtoConsole` ustawiono parametr. Jeśli `yes`, następnie użyje <xref:System.Configuration.Install.InstallContext.LogMessage%2A> metody do zapisywania komunikatów o stanie pliku dziennika instalacji i konsoli.  
  
 [!code-cpp[InstallContext_InstallContext#6](~/samples/snippets/cpp/VS_Snippets_CLR/InstallContext_InstallContext/CPP/installcontext_installcontext.cpp#6)]
 [!code-csharp[InstallContext_InstallContext#6](~/samples/snippets/csharp/VS_Snippets_CLR/InstallContext_InstallContext/CS/installcontext_installcontext.cs#6)]
 [!code-vb[InstallContext_InstallContext#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/InstallContext_InstallContext/VB/installcontext_installcontext.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Specialized.StringDictionary" />
      </Docs>
    </Member>
    <Member MemberName="ParseCommandLine">
      <MemberSignature Language="C#" Value="protected static System.Collections.Specialized.StringDictionary ParseCommandLine (string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Collections.Specialized.StringDictionary ParseCommandLine(string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Install.InstallContext.ParseCommandLine(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function ParseCommandLine (args As String()) As StringDictionary" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Collections::Specialized::StringDictionary ^ ParseCommandLine(cli::array &lt;System::String ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.StringDictionary</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="args">Tablica zawierająca parametry wiersza polecenia.</param>
        <summary>Analizuje parametry wiersza polecenia do słownika ciągu.</summary>
        <returns>A <see cref="T:System.Collections.Specialized.StringDictionary" /> zawierający przeanalizowany parametry wiersza polecenia.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Configuration.Install.InstallContext.Parameters" />
        <altmember cref="M:System.Configuration.Install.InstallContext.IsParameterTrue(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>