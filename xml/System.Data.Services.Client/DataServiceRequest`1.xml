<Type Name="DataServiceRequest&lt;TElement&gt;" FullName="System.Data.Services.Client.DataServiceRequest&lt;TElement&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ae520f49924ffb6e02cd3eef1f96d7ea1a67de26" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30445857" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DataServiceRequest&lt;TElement&gt; : System.Data.Services.Client.DataServiceRequest" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DataServiceRequest`1&lt;TElement&gt; extends System.Data.Services.Client.DataServiceRequest" />
  <TypeSignature Language="DocId" Value="T:System.Data.Services.Client.DataServiceRequest`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DataServiceRequest(Of TElement)&#xA;Inherits DataServiceRequest" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TElement&gt;&#xA;public ref class DataServiceRequest sealed : System::Data::Services::Client::DataServiceRequest" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Services.Client</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TElement" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Data.Services.Client.DataServiceRequest</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TElement">To be added.</typeparam>
    <summary>Reprezentuje żądanie obiektów przesłane w partii z usługą danych.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W grupie zapytań przesłane w partii z usługą danych zapytania są określone jako <xref:System.Data.Services.Client.DataServiceRequest%601> wystąpień. A <xref:System.Data.Services.Client.DataServiceResponse> jest zwracany reprezentujący odpowiedź żądanie wsadowe jako całość. Odpowiedzi na kwerendy poszczególnych są reprezentowane jako <xref:System.Data.Services.Client.QueryOperationResponse> obiektów pochodzących od <xref:System.Data.Services.Client.OperationResponse>, które są dostępne przez wyliczania <xref:System.Data.Services.Client.DataServiceResponse> wystąpienia.  
  
   
  
## Examples  
 Gdy <xref:System.Data.Services.Client.DataServiceContext.ExecuteBatch%2A> zwraca całej odpowiedzi HTTP dla żądania wsadowego odczytane ze strumienia sieci, ale odpowiedzi nie zostały przetworzone. Materialization rozdzielczość i obiekt Identity nie występują dla określonej jednostki w odpowiedzi do momentu jest iterowane, jak pokazano w poniższym przykładzie.  
  
```  
DataServiceContext service = new DataServiceContext(new   
                                                    Uri("http://myserviceroot"));  
  
// Create query batches.  
DataServiceRequest[] reqs = new DataServiceRequest[] {   
    new DataServiceRequest<Category>(  
            new Uri("http://myserviceroot/Categories")),  
            new DataServiceRequest<Customer>(  
            new Uri("http://myserviceroot/Customers"))  
};  
  
DataServiceResponse dsr;  
try  
{  
    // Client will not throw an exception on ExecuteBatch because the   
    // entire response has not been processed yet to know  
    // whether an exception should be thrown.  
  
    dsr = service.ExecuteBatch(reqs);     
  
    if (dsr.IsBatchResponse)   
    {  
        /*inspect HTTP artifacts associated with the entire batch:  
                      dsr.BatchHeaders, dsr.BatchStatusCode*/ }  
  
    foreach (QueryOperationResponse qr in dsr)  
    {  
        if (IsErrorStatusCode(qr.StatusCode))     
        {  
            //q.Error.Message contains the full contents of the error.  
            /* process any part of the Error Contract (<error> element)  
                      sent from the service.  */  
            }  
        }  
        else  
        {  
            if (qr.Query.ElementType == typeof(Customer))  
            {  
                //process customers  
                foreach (Customer c in qr){ /*process the customer*/ }  
  
                // the DataServiceContext does not materialize, resolve  
                // identity on Customer until it is enumerated.  
            }  
            else if (qr.Query.ElementType == typeof(Category))  
            {  
                // Process categories.  
                foreach (Category cat in qr)  
                {   
                    /*process the category*/   
                 }  
                // the DataServiceContext does not materialize or  
                // resolve identity on the Category until  
                // it is enumerated.  
                // This means that instream errors will be thrown  
                // during iteration.  
            }  
        }  
    }  
}  
catch (DataServiceRequestException e)  
{  
    // This error is thrown if the data service returns with  
    // a response code < 200 or >299 or the top level element.  
    // If neither of the above or true, this exception is not   
    // thrown.  
  
    dsr = e.Response;  
  
    if (dsr.IsBatchResponse)   
    {   
        /*inspect HTTP artifacts associated with the entire batch:  
                        dsr.BatchHeaders, dsr.BatchStatusCode*/   
    }  
  
    /* There will always only be one of these because if the top level  
     status code was >=200 and =<299 and the first element was not an  
     error, the call to start the query will not throw. */  
  
    foreach (QueryOperationResponse qr in dsr)  
    {  
        if (qr.Error != null)  
        {  
            // Process error.  
        }  
    }     
}  
  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataServiceRequest (Uri requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Services.Client.DataServiceRequest`1.#ctor(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (requestUri As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataServiceRequest(Uri ^ requestUri);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Services.Client</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri">Obiekt URI, który zawiera ciąg żądania.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.Services.Client.DataServiceRequest`1" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementType">
      <MemberSignature Language="C#" Value="public override Type ElementType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ElementType" />
      <MemberSignature Language="DocId" Value="P:System.Data.Services.Client.DataServiceRequest`1.ElementType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ElementType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ElementType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Services.Client</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera typ obiektu, który został użyty do utworzenia <see cref="T:System.Data.Services.Client.DataServiceRequest`1" /> wystąpienia.</summary>
        <value>A <see cref="System.Type" /> zwróciła wartość, która wskazuje typ danych.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestUri">
      <MemberSignature Language="C#" Value="public override Uri RequestUri { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri RequestUri" />
      <MemberSignature Language="DocId" Value="P:System.Data.Services.Client.DataServiceRequest`1.RequestUri" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property RequestUri As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Uri ^ RequestUri { Uri ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Services.Client</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt URI, który zawiera ciąg żądania.</summary>
        <value>A <see cref="System.Uri" /> obiekt, który zawiera ciąg żądania.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>