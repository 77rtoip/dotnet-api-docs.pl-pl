<Type Name="InternalsVisibleToAttribute" FullName="System.Runtime.CompilerServices.InternalsVisibleToAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="657e65a2c4f745a71b7324c59207c72d70b93f6d" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69274255" /></Metadata><TypeSignature Language="C#" Value="public sealed class InternalsVisibleToAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit InternalsVisibleToAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class InternalsVisibleToAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class InternalsVisibleToAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type InternalsVisibleToAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Assembly, AllowMultiple=true, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Określa, że typy, które są zwykle widoczne tylko w bieżącym zestawie, są widoczne dla określonego zestawu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwykle typy i elementy członkowskie z `internal` lub `private protected` zakres `Private Protected` (w C#) i `Friend` zakres (w Visual Basic) są widoczne tylko w zestawie, w którym są zdefiniowane. Ten <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> atrybut sprawia, że są one również widoczne dla typów w określonym zestawie, który jest znany jako zestaw zaprzyjaźniony. Dotyczy `internal` to tylko metod (`Friend` w języku VB) `private protected`lub`Private Protected` (w języku VB), ale nie `private` tylko.
  
 Ten atrybut jest stosowany na poziomie zestawu. Oznacza to, że można ją uwzględnić na początku pliku kodu źródłowego lub umieścić w pliku AssemblyInfo w projekcie programu Visual Studio. Możesz użyć atrybutu, aby określić pojedynczy zestaw zaprzyjaźniony, który może uzyskać dostęp do typów wewnętrznych i elementów członkowskich bieżącego zestawu. Można zdefiniować wiele zestawów zaprzyjaźnionych na dwa sposoby. Mogą one być wyświetlane jako pojedyncze atrybuty na poziomie zestawu, jak pokazano w poniższym przykładzie.  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/multiple1.cs#3)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/multiple1.vb#3)]  
  
 Mogą być również wyświetlane z oddzielnymi <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> tagami, ale z pojedynczym `assembly` słowem kluczowym, jak pokazano w poniższym przykładzie.  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/multiple2.cs#4)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/multiple2.vb#4)]  
  
 Zestaw zaprzyjaźniony jest identyfikowany przez <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> konstruktora. Zarówno bieżący zestaw, jak i zestaw zaprzyjaźniony muszą być niepodpisane lub oba muszą być podpisane za pomocą silnej nazwy.  
  
 Jeśli oba zestawy są niepodpisane, `assemblyName` argument składa się z nazwy zestawu zaprzyjaźnionego, określonego bez ścieżki katalogu lub rozszerzenia nazwy pliku.  
  
 Jeśli oba zestawy są podpisane silną nazwą, argument <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> konstruktora musi składać się z nazwy zestawu bez ścieżki katalogu lub rozszerzenia nazwy pliku oraz z pełnym kluczem publicznym (a nie tokenem klucza publicznego). Aby uzyskać pełny klucz publiczny zestawu o silnej nazwie, zobacz sekcję [pobieranie pełnego klucza publicznego](#Key) w dalszej części tego artykułu. Aby uzyskać więcej informacji o <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> używaniu z zestawami o silnych <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> nazwach, zobacz Konstruktor.  
  
 Nie należy uwzględniać wartości dla <xref:System.Reflection.AssemblyName.CultureInfo%2A>, <xref:System.Reflection.AssemblyName.Version%2A>, ani <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A> pola w argumencie; Visual Basic, C#, i C++ kompilatory traktują ten błąd w postaci błędu kompilatora. Jeśli używasz kompilatora, który nie traktuje go jako błąd (na przykład [asemblera Il (Ilasm. exe)](~/docs/framework/tools/ilasm-exe-il-assembler.md)), a zestawy są o silnej nazwie, <xref:System.MethodAccessException> wyjątek jest zgłaszany podczas pierwszego dostępu określonego zaprzyjaźnionego zestawu do zestawu, który zawiera <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> atrybut.  
  
 Więcej informacji o sposobach korzystania z tego atrybutu znajduje się w następujących tematach:  
  
-   [Przyjazne zestawy (C++)](https://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)  
  
-   [Przyjazne zestawy](https://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)  
  
<a name="Key"></a>   
## <a name="getting-the-full-public-key"></a>Pobieranie pełnego klucza publicznego  
 Za pomocą [Narzędzia silnej nazwy (SN. exe)](~/docs/framework/tools/sn-exe-strong-name-tool.md) można pobrać pełny klucz publiczny z pliku klucza o silnej nazwie (SNK). W tym celu wykonaj następujące czynności:  
  
1.  Wyodrębnij klucz publiczny z pliku klucza o silnej nazwie do oddzielnego pliku:  
  
     **SN-p** *snk_file* *plik w pliku*  
  
2.  Wyświetl pełny klucz publiczny w konsoli programu:  
  
     **SN-TP** *plik w pliku*  
  
3.  Skopiuj i wklej pełną wartość klucza publicznego do kodu źródłowego.  
  
## <a name="compiling-the-friend-assembly-with-c"></a>Kompilowanie zestawu zaprzyjaźnionego za pomocąC#  
 Jeśli używasz C# kompilatora do kompilowania zestawu zaprzyjaźnionego, musisz jawnie określić nazwę pliku wyjściowego (. exe lub. dll) przy użyciu opcji kompilatora **/out** . Jest to wymagane, ponieważ kompilator nie wygenerował jeszcze nazwy dla zestawu, który jest tworzony w momencie powiązania z odwołaniami zewnętrznymi. Opcja kompilatora **/out** jest opcjonalna dla kompilatora Visual Basic i nie należy używać odpowiedniej **** opcji kompilatora lub **-o** w przypadku kompilowania zespołów zaprzyjaźnionych z F# kompilatorem.  
  
## <a name="compiling-the-friend-assembly-with-c"></a>Kompilowanie zestawu zaprzyjaźnionego za pomocąC++  
 W C++programie w celu zapewnienia, że wewnętrzne elementy członkowskie z włączonym atrybutem są <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> dostępne dla zestawu zaprzyjaźnionego, należy użyć `as_friend` atrybutu w C++ dyrektywie. Aby uzyskać więcej informacji, zobacz [zaprzyjaźnioneC++zestawy ()](https://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd).  
  
   
  
## Examples  
 **Podpisane zestawy**  
  
 Poniższy przykład używa atrybutu, <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> aby `internal` utworzyć metodę o nazwie `AppendDirectorySeparator` w podpisanym zestawie widocznym dla innego podpisanego zestawu. Definiuje `FileUtilities` klasę, która zawiera metodę wewnętrzną `AppendDirectorySeparator` . Ten <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> atrybut jest stosowany do zestawu, który `FileUtilities` zawiera klasę. Atrybut umożliwia zestawowi o nazwie `Friend1` uzyskanie dostępu do tego wewnętrznego elementu członkowskiego.  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/assembly1.cs#1)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/assembly1.vb#1)]  
  
 Jeśli Poniższy przykład jest kompilowany `Friend1`do zestawu o silnej nazwie `Example.Main` , Metoda `FileUtilities.AppendDirectorySeparator` w programie `Friend1` może pomyślnie wywołać metodę, chociaż Metoda jest wewnętrzna dla `Assembly1` zestawu. Należy pamiętać, że w przypadku kompilowania w C# wierszu polecenia, należy użyć przełącznika kompilatora **/out** , aby upewnić się, że nazwa zestawu zaprzyjaźnionego jest dostępna, gdy kompilator wiąże się z odwołaniami zewnętrznymi.  
  
 [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend1.cpp#2)]
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend1.cs#2)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend1.vb#2)]  
  
 **Niepodpisane zestawy**  
  
 Poniższy przykład używa atrybutu, <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> aby `internal` uczynić element członkowski niepodpisanego zestawu widoczny dla innego niepodpisanego zestawu. Ten atrybut zapewnia, że `internal` `StringLib.IsFirstLetterUpperCase` Metoda w zestawie o nazwie `UtilityLib` jest widoczna dla kodu w zestawie o nazwie `Friend2`.  Poniżej znajduje się kod źródłowy dla UtilityLib. dll:  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/utilitylib.cs#5)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/utilitylib.vb#5)]  
  
 Poniższy przykład zawiera kod `Friend2` źródłowy zestawu. Należy pamiętać, że w przypadku kompilowania w C# wierszu polecenia, należy użyć przełącznika kompilatora **/out** , aby upewnić się, że nazwa zestawu zaprzyjaźnionego jest dostępna, gdy kompilator wiąże się z odwołaniami zewnętrznymi.  
  
 [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend2.cpp#6)]
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend2.cs#6)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend2.vb#6)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InternalsVisibleToAttribute (string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (assemblyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InternalsVisibleToAttribute(System::String ^ assemblyName);" />
      <MemberSignature Language="F#" Value="new System.Runtime.CompilerServices.InternalsVisibleToAttribute : string -&gt; System.Runtime.CompilerServices.InternalsVisibleToAttribute" Usage="new System.Runtime.CompilerServices.InternalsVisibleToAttribute assemblyName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName">Nazwa zestawu zaprzyjaźnionego.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute" /> klasy o nazwie określonego zestawu zaprzyjaźnionego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> Konstruktor definiuje zestaw zaprzyjaźniony, który jest zestawem, który ma dostęp do wewnętrznych i prywatnych typów chronionych oraz elementów członkowskich bieżącego zestawu.  
  
 Zarówno bieżący zestaw, jak i zestaw zaprzyjaźniony muszą być podpisane lub muszą być podpisane przy użyciu silnej nazwy. (Aby uzyskać więcej informacji na temat zestawów o silnych nazwach, zobacz [Tworzenie i używanie zestawów o silnych nazwach](~/docs/framework/app-domains/create-and-use-strong-named-assemblies.md)). Jeśli obie są niepodpisane, `assemblyName` argument składa się z nazwy zestawu zaprzyjaźnionego, określonego bez ścieżki katalogu lub rozszerzenia pliku. Jeśli obie są podpisane, `assemblyName` składa się z nazwy zestawu zaprzyjaźnionego bez ścieżki katalogu lub rozszerzenia nazwy pliku wraz z pełnym kluczem publicznym (ale nie tokenem klucza publicznego). W `assemblyName` argumencie nie można określić innych składników silnej nazwy, takich jak te, które zawierają informacje o kulturze, wersji lub architektury procesora.  
  
> [!IMPORTANT]
>  Jeśli używasz C# kompilatora do kompilowania zestawu zaprzyjaźnionego, musisz jawnie określić nazwę pliku wyjściowego (. exe lub. dll) przy użyciu opcji kompilatora **/out** . Jest to wymagane, ponieważ kompilator nie wygenerował jeszcze nazwy dla zestawu, który jest tworzony w momencie powiązania z odwołaniami zewnętrznymi. Opcja kompilatora **/out** jest opcjonalna dla kompilatora Visual Basic i nie należy używać odpowiedniej **** opcji kompilatora lub **-o** w przypadku kompilowania zespołów zaprzyjaźnionych z F# kompilatorem.  
  
 Za pomocą [SN. exe (Narzędzie silnej nazwy)](~/docs/framework/tools/sn-exe-strong-name-tool.md) można pobrać pełny klucz publiczny z pliku klucza o silnej nazwie (SNK). W tym celu wykonaj następujące czynności:  
  
1.  Wyodrębnij klucz publiczny z pliku klucza o silnej nazwie do oddzielnego pliku:  
  
     **SN-p** *snk_file* *plik w pliku*  
  
2.  Wyświetl pełny klucz publiczny w konsoli programu:  
  
     **SN-TP** *plik w pliku*  
  
3.  Skopiuj i wklej pełną wartość klucza publicznego do kodu źródłowego.  
  
 Więcej informacji o sposobach korzystania z tego <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> atrybutu znajduje się w następujących tematach:  
  
-   [Przyjazne zestawy (C++)](https://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)  
  
-   [Przyjazne zestawy](https://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)  
  
   
  
## Examples  
 **Podpisane zestawy**  
  
 Poniższy przykład używa atrybutu, <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> aby `internal` utworzyć metodę o nazwie `AppendDirectorySeparator` w podpisanym zestawie widocznym dla innego podpisanego zestawu. Definiuje `FileUtilities` klasę, która zawiera metodę wewnętrzną `AppendDirectorySeparator` . Ten <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> atrybut jest stosowany do zestawu, który `FileUtilities` zawiera klasę. Atrybut umożliwia zestawowi o nazwie `Friend1` uzyskanie dostępu do tego wewnętrznego elementu członkowskiego.  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/assembly1.cs#1)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/assembly1.vb#1)]  
  
 Jeśli Poniższy przykład jest kompilowany do zestawu `Friend1`o silnej nazwie, może pomyślnie `FileUtilities.AppendDirectorySeparator` wywołać metodę, mimo że `Assembly1` Metoda jest wewnętrzna dla zestawu. Należy pamiętać, że w przypadku kompilowania w C# wierszu polecenia, należy użyć przełącznika kompilatora **/out** , aby upewnić się, że nazwa zestawu zaprzyjaźnionego jest dostępna, gdy kompilator wiąże się z odwołaniami zewnętrznymi.  
  
 [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend1.cpp#2)]
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend1.cs#2)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend1.vb#2)]  
  
 Poniższy przykład używa atrybutu, <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> aby `internal` uczynić element członkowski niepodpisanego zestawu widoczny dla innego niepodpisanego zestawu. Ten atrybut zapewnia, że `internal` `StringLib.IsFirstLetterUpperCase` Metoda w zestawie o nazwie `UtilityLib` jest widoczna dla kodu w zestawie o nazwie `Friend2`.  Poniżej znajduje się kod źródłowy dla UtilityLib. dll:  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/utilitylib.cs#5)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/utilitylib.vb#5)]  
  
 **Niepodpisane zestawy**  
  
 Poniższy przykład zawiera kod `Friend2` źródłowy zestawu. Należy pamiętać, że w przypadku kompilowania w C# wierszu polecenia, należy użyć przełącznika kompilatora **/out** , aby upewnić się, że nazwa zestawu zaprzyjaźnionego jest dostępna, gdy kompilator wiąże się z odwołaniami zewnętrznymi.  
  
 [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend2.cpp#6)]
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend2.cs#6)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend2.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllInternalsVisible">
      <MemberSignature Language="C#" Value="public bool AllInternalsVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllInternalsVisible" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AllInternalsVisible" />
      <MemberSignature Language="VB.NET" Value="Public Property AllInternalsVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllInternalsVisible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllInternalsVisible : bool with get, set" Usage="System.Runtime.CompilerServices.InternalsVisibleToAttribute.AllInternalsVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ta właściwość nie jest zaimplementowana.</summary>
        <value>Ta właściwość nie zwraca wartości.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyName">
      <MemberSignature Language="C#" Value="public string AssemblyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssemblyName" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AssemblyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AssemblyName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AssemblyName : string" Usage="System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę zaprzyjaźnionego zestawu, do którego wszystkie typy i elementy członkowskie typu, które są oznaczone <see langword="internal" /> słowem kluczowym, mają być widoczne.</summary>
        <value>Ciąg, który reprezentuje nazwę zestawu zaprzyjaźnionego.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Więcej informacji o sposobach korzystania z tego <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> atrybutu znajduje się w następujących tematach:  
  
-   [Przyjazne zestawy (C++)](https://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)  
  
-   [Przyjazne zestawy](https://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
