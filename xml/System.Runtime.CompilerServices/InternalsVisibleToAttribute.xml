<Type Name="InternalsVisibleToAttribute" FullName="System.Runtime.CompilerServices.InternalsVisibleToAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="72f45e174f70fa5053339a1308aae4feae8b8626" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30564529" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class InternalsVisibleToAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit InternalsVisibleToAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class InternalsVisibleToAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class InternalsVisibleToAttribute sealed : Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Assembly, AllowMultiple=true, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Określa, że typy, które są zwykle widoczne tylko w obrębie bieżącego zestawu są widoczne w określonym zestawie.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwykle typów i członków z `internal` zakresu (w języku C#) i `friend` zakresu (w języku Visual Basic) są widoczne tylko w zestawie, w którym są zdefiniowane. <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> Atrybut powoduje, że je również widoczne dla typów w określonym zestawie, znany jako przyjaznego zestawu.  
  
 Ten atrybut jest stosowany na poziomie zestawu. Oznacza to, że można dołączać na początku pliku kodu źródłowego lub mogą być włączone w pliku AssemblyInfo projektu programu Visual Studio. Ten atrybut służy do określenia pojedynczego przyjaznego zestawu, które mogą uzyskiwać dostęp do wewnętrznych typów i członków bieżącego zestawu. Można zdefiniować wiele przyjaznych zestawów na dwa sposoby. Można pojawią się one jako atrybuty poziomu zestawu pojedynczych, jak pokazano w poniższym przykładzie.  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/multiple1.cs#3)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/multiple1.vb#3)]  
  
 Można również pojawią się one z oddzielnym <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> tagi, ale jeden `assembly` — słowo kluczowe, jak w poniższym przykładzie przedstawiono.  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/multiple2.cs#4)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/multiple2.vb#4)]  
  
 Przyjaznego zestawu jest identyfikowany przez <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> konstruktora. Zarówno bieżącego zestawu i przyjaznego zestawu musi być niepodpisany lub oba zestawy muszą być podpisane przy użyciu silnej nazwy.  
  
 Jeżeli oba zestawy są bez znaku, `assemblyName` argument składa się z nazwy przyjaznego zestawu określony bez katalogu ścieżkę lub rozszerzenie nazwy.  
  
 Jeśli oba zestawy są podpisane za pomocą silna nazwa, argument <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> Konstruktor musi składać się z nazwy zestawu bez katalogu ścieżkę lub rozszerzenie nazwy, wraz z kluczem publicznym pełnej (i nie jego token klucza publicznego). Aby uzyskać klucz publiczny pełnego zestawu z silną nazwą, zobacz [uzyskiwania klucza publicznego pełnej](#Key) sekcji w dalszej części tego artykułu. Aby uzyskać więcej informacji o korzystaniu z <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> zestawy o silnych nazwach, zobacz <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> konstruktora.  
  
 Nie dołączaj wartości <xref:System.Reflection.AssemblyName.CultureInfo%2A>, <xref:System.Reflection.AssemblyName.Version%2A>, lub <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A> pola w argumencie; Kompilatory języka Visual Basic, C# i C++ potraktować jako błąd kompilatora. Jeśli używasz kompilatora, która nie traktuje tego jako błąd (takich jak [asembler IL (ILAsm.exe)](~/docs/framework/tools/ilasm-exe-il-assembler.md)) i zestawy o silnych nazwach, <xref:System.MethodAccessException> wyjątku przy pierwszym dostępie określonego przyjaznego zestawu zestaw zawierający <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> atrybutu.  
  
 Aby uzyskać więcej informacji na temat używania tego atrybutu zobacz następujące tematy:  
  
-   [Przyjazne zestawy (C++)](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)  
  
-   [Przyjazne zestawy](http://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)  
  
<a name="Key"></a>   
## <a name="getting-the-full-public-key"></a>Wprowadzenie klucza publicznego pełnej  
 Można użyć [silnej nazwy narzędzia (Sn.exe)](~/docs/framework/tools/sn-exe-strong-name-tool.md) można pobrać pełnej publiczny klucz z pliku klucza o silnej nazwie (.snk —). Aby to zrobić, należy wykonać następujące kroki:  
  
1.  Wyodrębnij klucza publicznego z pliku klucza o silnej nazwie do osobnego pliku:  
  
     **SN -p***snk_file* *outfile*  
  
2.  Klucz publiczny pełnej służy do wyświetlenia w konsoli:  
  
     **SN - tp***outfile*  
  
3.  Skopiuj i Wklej publicznej wartości klucza do kodu źródłowego.  
  
## <a name="compiling-the-friend-assembly-with-c"></a>Kompilowanie zestawu friend w języku C#  
 Jeśli używasz kompilatora C# do skompilowania przyjaznego zestawu musi jawnie określić nazwę pliku wyjściowego (.exe lub .dll) przy użyciu **/out** — opcja kompilatora. Jest to wymagane, ponieważ kompilator nie ma jeszcze wygenerowany nazwę zestawu, w którym jest ona tworzenie w czasie, który jest wiązany odwołań zewnętrznych. **/Out** — opcja kompilatora jest opcjonalne dla kompilatora języka Visual Basic i odpowiadający mu **-out** lub **-o** — opcja kompilatora nie należy używać w przypadku kompilowania kodu friend zestawy za pomocą kompilatora F #.  
  
## <a name="compiling-the-friend-assembly-with-c"></a>Kompilowanie zestawu friend w języku C++  
 W języku C++, aby można było wewnętrzne elementy członkowskie, aby włączyć <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> atrybutu dostęp do przyjaznego zestawu, należy użyć `as_friend` atrybutu w dyrektywie C++. Aby uzyskać więcej informacji, zobacz [przyjazne zestawy (C++)](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd).  
  
   
  
## Examples  
 **Zestawy oznaczone**  
  
 W poniższym przykładzie użyto <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> atrybutu, aby `internal` metodę o nazwie `AppendDirectorySeparator` w zestawie podpisem widoczne do innego zestawu podpisem. Definiuje `FileUtilities` klasa, która zawiera wewnętrzne `AppendDirectorySeparator` metody. <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> Atrybut jest stosowany do zestawu, który zawiera `FileUtilities` klasy. Ten atrybut umożliwia zestawu o nazwie `Friend1` uzyskać dostępu do tego członka wewnętrznego.  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/assembly1.cs#1)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/assembly1.vb#1)]  
  
 Jeśli poniższy przykład jest kompilowany do zestawu o silnej nazwie, o nazwie `Friend1`, `Example.Main` metody w `Friend1` pomyślnie wywołać `FileUtilities.AppendDirectorySeparator` metody, mimo że metoda jest wewnętrzna `Assembly1` zestawu. Należy pamiętać, że jeśli kompilacja w języku C# z wiersza polecenia, należy użyć **/out** przełącznika kompilatora, aby upewnić się, nazwa zestawu friend jest dostępna, gdy kompilator wiąże odwołań zewnętrznych.  
  
 [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend1.cpp#2)]
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend1.cs#2)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend1.vb#2)]  
  
 **Zestawy nieoznaczone**  
  
 W poniższym przykładzie użyto <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> atrybutu, aby `internal` niepodpisanego zestawu widoczne na inny element członkowski niepodpisanego zestawu. Ten atrybut zapewnia, że `internal` `StringLib.IsFirstLetterUpperCase` metody w zestawie o nazwie `UtilityLib` jest widoczny kod w zestawie o nazwie `Friend2`.  Oto kod źródłowy UtilityLib.dll:  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/utilitylib.cs#5)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/utilitylib.vb#5)]  
  
 W poniższym przykładzie przedstawiono kod źródłowy `Friend2` zestawu. Należy pamiętać, że jeśli kompilacja w języku C# z wiersza polecenia, należy użyć **/out** przełącznika kompilatora, aby upewnić się, nazwa zestawu friend jest dostępna, gdy kompilator wiąże odwołań zewnętrznych.  
  
 [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend2.cpp#6)]
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend2.cs#6)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend2.vb#6)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InternalsVisibleToAttribute (string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (assemblyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InternalsVisibleToAttribute(System::String ^ assemblyName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName">Nazwa przyjaznego zestawu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute" /> klasa o nazwie określonej przyjaznego zestawu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> Konstruktor definiuje przyjaznego zestawu, który jest zestawu, który ma dostęp do wewnętrznych typów i członków bieżącego zestawu.  
  
 Zarówno bieżącego zestawu i przyjaznego zestawu musi być niepodpisany lub oba muszą być podpisane przy użyciu silnej nazwy. (Aby uzyskać więcej informacji na temat zestawów o silnych nazwach, zobacz [tworzenie i zestawy Using Strong-Named](~/docs/framework/app-domains/create-and-use-strong-named-assemblies.md).) Jeśli oba nie mają znaku, `assemblyName` argument składa się z nazwy przyjaznego zestawu określony bez rozszerzenia pliku lub ścieżkę katalogu. Jeśli oba są podpisane, `assemblyName` składa się z nazwy przyjaznego zestawu bez katalogu ścieżkę lub rozszerzenie nazwy, wraz z jego kluczowi publicznemu pełnej (ale nie jego token klucza publicznego). Inne składniki silnej nazwy, takie jak te, które zapewniają kultury, wersji lub informacje o architektury procesora, nie można określić w `assemblyName` argumentu.  
  
> [!IMPORTANT]
>  Jeśli używasz kompilatora C# do skompilowania przyjaznego zestawu musi jawnie określić nazwę pliku wyjściowego (.exe lub .dll) przy użyciu **/out** — opcja kompilatora. Jest to wymagane, ponieważ kompilator nie ma jeszcze wygenerowany nazwę zestawu, w którym jest ona tworzenie w czasie, który jest wiązany odwołań zewnętrznych. **/Out** — opcja kompilatora jest opcjonalne dla kompilatora języka Visual Basic i odpowiadający mu **-out** lub **-o** — opcja kompilatora nie należy używać w przypadku kompilowania kodu friend zestawy za pomocą kompilatora F #.  
  
 Można użyć [Sn.exe (narzędzie silnej nazwy)](~/docs/framework/tools/sn-exe-strong-name-tool.md) można pobrać pełnej publiczny klucz z pliku klucza o silnej nazwie (.snk —). Aby to zrobić, należy wykonać następujące kroki:  
  
1.  Wyodrębnij klucza publicznego z pliku klucza o silnej nazwie do osobnego pliku:  
  
     **SN -p***snk_file* *outfile*  
  
2.  Klucz publiczny pełnej służy do wyświetlenia w konsoli:  
  
     **SN - tp***outfile*  
  
3.  Skopiuj i Wklej publicznej wartości klucza do kodu źródłowego.  
  
 Aby uzyskać więcej informacji o sposobie używania <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> atrybutów, zobacz następujące tematy:  
  
-   [Przyjazne zestawy (C++)](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)  
  
-   [Przyjazne zestawy](http://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)  
  
   
  
## Examples  
 **Zestawy oznaczone**  
  
 W poniższym przykładzie użyto <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> atrybutu, aby `internal` metodę o nazwie `AppendDirectorySeparator` w zestawie podpisem widoczne do innego zestawu podpisem. Definiuje `FileUtilities` klasa, która zawiera wewnętrzne `AppendDirectorySeparator` metody. <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> Atrybut jest stosowany do zestawu, który zawiera `FileUtilities` klasy. Ten atrybut umożliwia zestawu o nazwie `Friend1` uzyskać dostępu do tego członka wewnętrznego.  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/assembly1.cs#1)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/assembly1.vb#1)]  
  
 Jeśli poniższy przykład jest kompilowany do zestawu o silnej nazwie, o nazwie `Friend1`, może pomyślnie wywołać `FileUtilities.AppendDirectorySeparator` metody, nawet wtedy, gdy metoda jest wewnętrzna `Assembly1` zestawu. Należy pamiętać, że jeśli kompilacja w języku C# z wiersza polecenia, należy użyć **/out** przełącznika kompilatora, aby upewnić się, nazwa zestawu friend jest dostępna, gdy kompilator wiąże odwołań zewnętrznych.  
  
 [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend1.cpp#2)]
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend1.cs#2)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend1.vb#2)]  
  
 W poniższym przykładzie użyto <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> atrybutu, aby `internal` niepodpisanego zestawu widoczne na inny element członkowski niepodpisanego zestawu. Ten atrybut zapewnia, że `internal` `StringLib.IsFirstLetterUpperCase` metody w zestawie o nazwie `UtilityLib` jest widoczny kod w zestawie o nazwie `Friend2`.  Oto kod źródłowy UtilityLib.dll:  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/utilitylib.cs#5)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/utilitylib.vb#5)]  
  
 **Zestawy nieoznaczone**  
  
 W poniższym przykładzie przedstawiono kod źródłowy `Friend2` zestawu. Należy pamiętać, że jeśli kompilacja w języku C# z wiersza polecenia, należy użyć **/out** przełącznika kompilatora, aby upewnić się, nazwa zestawu friend jest dostępna, gdy kompilator wiąże odwołań zewnętrznych.  
  
 [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend2.cpp#6)]
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend2.cs#6)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend2.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllInternalsVisible">
      <MemberSignature Language="C#" Value="public bool AllInternalsVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllInternalsVisible" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AllInternalsVisible" />
      <MemberSignature Language="VB.NET" Value="Public Property AllInternalsVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllInternalsVisible { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ta właściwość nie jest zaimplementowana.</summary>
        <value>Ta właściwość nie zwraca wartości.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyName">
      <MemberSignature Language="C#" Value="public string AssemblyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssemblyName" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AssemblyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AssemblyName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę przyjaznego zestawu wszystkie typy i elementy członkowskie typu, które są oznaczone ikoną z <see langword="internal" /> — słowo kluczowe, które mają być widoczne.</summary>
        <value>Ciąg, który reprezentuje nazwę przyjaznego zestawu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji o sposobie używania <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> atrybutów, zobacz następujące tematy:  
  
-   [Przyjazne zestawy (C++)](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)  
  
-   [Przyjazne zestawy](http://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>