<Type Name="InternalsVisibleToAttribute" FullName="System.Runtime.CompilerServices.InternalsVisibleToAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fce3c411e3d6daf4320db60d4d1e2a5898d7ff9d" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51903040" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class InternalsVisibleToAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit InternalsVisibleToAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class InternalsVisibleToAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class InternalsVisibleToAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type InternalsVisibleToAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Assembly, AllowMultiple=true, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Określa, że typy, które są zwykle widoczne tylko w bieżącym zestawie są widoczne dla określonego zestawu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwykle typy i elementy członkowskie z `internal` zakresu (w języku C#) i `friend` zakresu (w języku Visual Basic) są widoczne tylko w zestawie, w której są zdefiniowane. <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> Atrybutu sprawia, że ich również widoczna do typów w określonym zestawie, który jest znany jako zestaw przyjazny.  
  
 Ten atrybut jest stosowany na poziomie zestawu. Oznacza to, że można uwzględnić na początku pliku kodu źródłowego lub może on być uwzględniony w pliku AssemblyInfo w projekcie programu Visual Studio. Ten atrybut służy do określania zestawu friend jednego, który mają dostęp do wewnętrznych typów i elementów członkowskich bieżącego zestawu. Można zdefiniować wiele przyjaznych zestawów na dwa sposoby. One może pojawić się jako poszczególne atrybuty na poziomie zestawu, tak jak pokazano w poniższym przykładzie.  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/multiple1.cs#3)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/multiple1.vb#3)]  
  
 Również może zostać wyświetlony z oddzielnym <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> tagi, ale jeden `assembly` — słowo kluczowe, w poniższym przykładzie pokazano.  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/multiple2.cs#4)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/multiple2.vb#4)]  
  
 Przyjazny zestaw jest identyfikowane za pomocą <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> konstruktora. Zarówno w bieżącym zestawie, jak i w przyjazny zestaw muszą być bez znaku lub oba zestawy muszą być podpisane za pomocą silnej nazwy.  
  
 Jeśli oba zestawy są bez znaku, `assemblyName` argument składa się z nazwy zestawu friend, określony bez rozszerzenia nazwy pliku lub ścieżki katalogu.  
  
 Jeśli oba zestawy są podpisane za pomocą silnej nazwy, argument <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> konstruktora musi składać się z nazwy zestawu bez jego katalogu ścieżki i rozszerzenia, wraz z kluczem pełnego publicznego (i nie jego token klucza publicznego). Aby uzyskać klucz publiczny pełnego zestawu z silną nazwą, zobacz [uzyskiwania klucza publicznego pełnej](#Key) sekcję w dalszej części tego artykułu. Aby uzyskać więcej informacji o korzystaniu z <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> za pomocą zestawów o silnych nazwach, zobacz <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> konstruktora.  
  
 Nie ma wartości <xref:System.Reflection.AssemblyName.CultureInfo%2A>, <xref:System.Reflection.AssemblyName.Version%2A>, lub <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A> pola w argumencie; Kompilatory języka Visual Basic, C# i C++ traktować to jako błąd kompilatora. Jeśli używasz kompilatora, które nie traktuje tego jako błąd (takie jak [IL Assembler (ILAsm.exe)](~/docs/framework/tools/ilasm-exe-il-assembler.md)) i zestawy o silnych nazwach, <xref:System.MethodAccessException> wyjątek jest zgłaszany po raz pierwszy uzyskuje dostęp do określonego przyjazny zestaw zestaw, który zawiera <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> atrybutu.  
  
 Aby uzyskać więcej informacji na temat używania tego atrybutu zobacz następujące tematy:  
  
-   [Przyjazne zestawy (C++)](https://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)  
  
-   [Przyjazne zestawy](https://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)  
  
<a name="Key"></a>   
## <a name="getting-the-full-public-key"></a>Uzyskiwania klucza publicznego pełnej  
 Możesz użyć [narzędzie silnych nazw (Sn.exe)](~/docs/framework/tools/sn-exe-strong-name-tool.md) można pobrać pełnej publiczny klucz z pliku klucza o silnej nazwie (.snk). Aby to zrobić, należy wykonać następujące czynności:  
  
1.  Wyodrębnij klucz publiczny z pliku klucza o silnej nazwie do osobnego pliku:  
  
     **SN -p***snk_file* *outfile*   
  
2.  Wyświetl pełne publiczny klucz do konsoli:  
  
     **SN - tp***outfile*  
  
3.  Skopiuj i Wklej wartość klucza publicznej do kodu źródłowego.  
  
## <a name="compiling-the-friend-assembly-with-c"></a>Kompilowanie zestawu friend w języku C#  
 Użycie kompilator języka C# do kompilowania zestaw przyjazny, należy jawnie określić nazwę pliku wyjściowego (.exe lub .dll), za pomocą **/out** — opcja kompilatora. Jest to wymagane, ponieważ kompilator nie ma jeszcze wygenerować nazwę zestawu, który tworzysz w czasie, który jest wiązanie odwołań zewnętrznych. **/Out** — opcja kompilatora jest opcjonalne dla kompilatora języka Visual Basic i odpowiedni **-out** lub **-o** — opcja kompilatora nie należy używać podczas kompilowania friend zestawy za pomocą F# kompilatora.  
  
## <a name="compiling-the-friend-assembly-with-c"></a>Kompilowanie zestawu friend przy użyciu języka C++  
 W języku C++, w celu zapewnienia wewnętrznych składowych włączane przez <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> atrybutu dostępny zestaw przyjazny, należy użyć `as_friend` atrybutu w dyrektywie C++. Aby uzyskać więcej informacji, zobacz [przyjazne zestawy (C++)](https://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd).  
  
   
  
## Examples  
 **Zestawy oznaczone**  
  
 W poniższym przykładzie użyto <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> atrybutu, aby wprowadzić `internal` metodę o nazwie `AppendDirectorySeparator` w zestawu podpisanego za pomocą widoczne do innego zestawu podpisem. Definiuje on `FileUtilities` klasa, która zawiera wewnętrzną `AppendDirectorySeparator` metody. <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> Atrybut jest stosowany do zestawu, który zawiera `FileUtilities` klasy. Ten atrybut umożliwia zestaw o nazwie `Friend1` na dostęp do tego elementu wewnętrznego.  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/assembly1.cs#1)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/assembly1.vb#1)]  
  
 Jeśli poniższy przykład jest kompilowany do zestawu o silnej nazwie o nazwie `Friend1`, `Example.Main` method in Class metoda `Friend1` pomyślnie wywołać `FileUtilities.AppendDirectorySeparator` metody, mimo że metoda jest wewnętrzna `Assembly1` zestawu. Należy pamiętać, że jeśli kompilujesz w języku C# z wiersza polecenia, należy użyć **/out** przełącznika kompilatora, aby upewnić się, nazwa zestawu friend jest dostępna, gdy kompilator tworzy powiązanie z odwołań zewnętrznych.  
  
 [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend1.cpp#2)]
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend1.cs#2)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend1.vb#2)]  
  
 **Zestawy nieoznaczone**  
  
 W poniższym przykładzie użyto <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> atrybutu, aby wprowadzić `internal` niepodpisanego zestawu widoczne na inny element członkowski niepodpisanego zestawu. Ten atrybut zapewnia, że `internal` `StringLib.IsFirstLetterUpperCase` metody w zestawie o nazwie `UtilityLib` jest widoczny dla kodu w zestawie o nazwie `Friend2`.  Poniżej znajduje się kod źródłowy UtilityLib.dll:  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/utilitylib.cs#5)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/utilitylib.vb#5)]  
  
 W poniższym przykładzie przedstawiono kod źródłowy `Friend2` zestawu. Należy pamiętać, że jeśli kompilujesz w języku C# z wiersza polecenia, należy użyć **/out** przełącznika kompilatora, aby upewnić się, nazwa zestawu friend jest dostępna, gdy kompilator tworzy powiązanie z odwołań zewnętrznych.  
  
 [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend2.cpp#6)]
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend2.cs#6)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend2.vb#6)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InternalsVisibleToAttribute (string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (assemblyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InternalsVisibleToAttribute(System::String ^ assemblyName);" />
      <MemberSignature Language="F#" Value="new System.Runtime.CompilerServices.InternalsVisibleToAttribute : string -&gt; System.Runtime.CompilerServices.InternalsVisibleToAttribute" Usage="new System.Runtime.CompilerServices.InternalsVisibleToAttribute assemblyName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName">Nazwa zestawu przyjaciela.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute" /> klasy o nazwie określonej przyjazny zestaw.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> Konstruktor określa zestaw "friend" to zestaw, który ma dostęp do wewnętrznych typów i elementów członkowskich bieżącego zestawu.  
  
 Zarówno w bieżącym zestawie, jak i w przyjazny zestaw muszą być bez znaku lub obu z nich musi być podpisany silną nazwą. (Aby uzyskać więcej informacji na temat zestawów o silnych nazwach, zobacz [tworzenie i zestawy Using Strong-Named](~/docs/framework/app-domains/create-and-use-strong-named-assemblies.md).) Jeśli obie są bez znaku, `assemblyName` argument składa się z nazwy zestawu friend, określony bez rozszerzenia pliku lub ścieżki katalogu. Jeśli obie są podpisane, `assemblyName` składa się z nazwy zestawu friend bez jego katalogu ścieżki i rozszerzenia, wraz ze swojego klucza publicznego pełnej (ale nie jego token klucza publicznego). Inne składniki silnej nazwy, takie jak te, które zapewniają kultura, wersji lub informacje o architekturze procesora, nie można określić w `assemblyName` argumentu.  
  
> [!IMPORTANT]
>  Użycie kompilator języka C# do kompilowania zestaw przyjazny, należy jawnie określić nazwę pliku wyjściowego (.exe lub .dll), za pomocą **/out** — opcja kompilatora. Jest to wymagane, ponieważ kompilator nie ma jeszcze wygenerować nazwę zestawu, który tworzysz w czasie, który jest wiązanie odwołań zewnętrznych. **/Out** — opcja kompilatora jest opcjonalne dla kompilatora języka Visual Basic i odpowiedni **-out** lub **-o** — opcja kompilatora nie należy używać podczas kompilowania friend zestawy za pomocą F# kompilatora.  
  
 Możesz użyć [Sn.exe (narzędzie silnych nazw)](~/docs/framework/tools/sn-exe-strong-name-tool.md) można pobrać pełnej publiczny klucz z pliku klucza o silnej nazwie (.snk). Aby to zrobić, należy wykonać następujące czynności:  
  
1.  Wyodrębnij klucz publiczny z pliku klucza o silnej nazwie do osobnego pliku:  
  
     **SN -p***snk_file* *outfile*   
  
2.  Wyświetl pełne publiczny klucz do konsoli:  
  
     **SN - tp***outfile*  
  
3.  Skopiuj i Wklej wartość klucza publicznej do kodu źródłowego.  
  
 Aby uzyskać więcej informacji o sposobie używania <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> atrybutów, zobacz następujące tematy:  
  
-   [Przyjazne zestawy (C++)](https://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)  
  
-   [Przyjazne zestawy](https://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)  
  
   
  
## Examples  
 **Zestawy oznaczone**  
  
 W poniższym przykładzie użyto <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> atrybutu, aby wprowadzić `internal` metodę o nazwie `AppendDirectorySeparator` w zestawu podpisanego za pomocą widoczne do innego zestawu podpisem. Definiuje on `FileUtilities` klasa, która zawiera wewnętrzną `AppendDirectorySeparator` metody. <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> Atrybut jest stosowany do zestawu, który zawiera `FileUtilities` klasy. Ten atrybut umożliwia zestaw o nazwie `Friend1` na dostęp do tego elementu wewnętrznego.  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/assembly1.cs#1)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/assembly1.vb#1)]  
  
 Jeśli poniższy przykład jest kompilowany do zestawu o silnej nazwie o nazwie `Friend1`, można pomyślnie wywołać `FileUtilities.AppendDirectorySeparator` metody, nawet jeśli metoda jest wewnętrzna `Assembly1` zestawu. Należy pamiętać, że jeśli kompilujesz w języku C# z wiersza polecenia, należy użyć **/out** przełącznika kompilatora, aby upewnić się, nazwa zestawu friend jest dostępna, gdy kompilator tworzy powiązanie z odwołań zewnętrznych.  
  
 [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend1.cpp#2)]
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend1.cs#2)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend1.vb#2)]  
  
 W poniższym przykładzie użyto <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> atrybutu, aby wprowadzić `internal` niepodpisanego zestawu widoczne na inny element członkowski niepodpisanego zestawu. Ten atrybut zapewnia, że `internal` `StringLib.IsFirstLetterUpperCase` metody w zestawie o nazwie `UtilityLib` jest widoczny dla kodu w zestawie o nazwie `Friend2`.  Poniżej znajduje się kod źródłowy UtilityLib.dll:  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/utilitylib.cs#5)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/utilitylib.vb#5)]  
  
 **Zestawy nieoznaczone**  
  
 W poniższym przykładzie przedstawiono kod źródłowy `Friend2` zestawu. Należy pamiętać, że jeśli kompilujesz w języku C# z wiersza polecenia, należy użyć **/out** przełącznika kompilatora, aby upewnić się, nazwa zestawu friend jest dostępna, gdy kompilator tworzy powiązanie z odwołań zewnętrznych.  
  
 [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend2.cpp#6)]
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend2.cs#6)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend2.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllInternalsVisible">
      <MemberSignature Language="C#" Value="public bool AllInternalsVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllInternalsVisible" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AllInternalsVisible" />
      <MemberSignature Language="VB.NET" Value="Public Property AllInternalsVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllInternalsVisible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllInternalsVisible : bool with get, set" Usage="System.Runtime.CompilerServices.InternalsVisibleToAttribute.AllInternalsVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ta właściwość nie jest zaimplementowana.</summary>
        <value>Ta właściwość nie zwraca wartości.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyName">
      <MemberSignature Language="C#" Value="public string AssemblyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssemblyName" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AssemblyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AssemblyName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AssemblyName : string" Usage="System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę zestawu friend na wszystkie typy i składowe typu, które są oznaczone <see langword="internal" /> — słowo kluczowe, które mają być widoczne.</summary>
        <value>Ciąg, który reprezentuje nazwę przyjazny zestaw.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji o sposobie używania <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> atrybutów, zobacz następujące tematy:  
  
-   [Przyjazne zestawy (C++)](https://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)  
  
-   [Przyjazne zestawy](https://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>