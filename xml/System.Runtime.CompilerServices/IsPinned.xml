<Type Name="IsPinned" FullName="System.Runtime.CompilerServices.IsPinned">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3744e6092270be3f38d1eabe29cccb0dda0c6ec2" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36540997" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class IsPinned" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsPinned extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsPinned" />
  <TypeSignature Language="VB.NET" Value="Public Class IsPinned" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsPinned abstract sealed" />
  <TypeSignature Language="F#" Value="type IsPinned = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="51ae3-101">Wskazuje, że zmodyfikowany wystąpienia jest przypięty w pamięci.</span>
      <span class="sxs-lookup">
        <span data-stu-id="51ae3-101">Indicates that a modified instance is pinned in memory.</span>
      </span>
      <span data-ttu-id="51ae3-102">Klasa ta nie może być dziedziczona.</span>
      <span class="sxs-lookup">
        <span data-stu-id="51ae3-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="51ae3-103">Kompilatory Emituj niestandardowych Modyfikatory w metadanych, aby zmienić sposób, że przy użyciu kompilatora just in time (JIT) obsługuje wartości podczas domyślne zachowanie nie jest odpowiedni.</span><span class="sxs-lookup"><span data-stu-id="51ae3-103">Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</span></span>  <span data-ttu-id="51ae3-104">Kompilator JIT napotkał modyfikator niestandardowych, obsługi przez wartość w taki sposób, który określa modyfikator.</span><span class="sxs-lookup"><span data-stu-id="51ae3-104">When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</span></span>  <span data-ttu-id="51ae3-105">Kompilatory można zastosować Modyfikatory niestandardowych metod, parametry i wartości zwracane.</span><span class="sxs-lookup"><span data-stu-id="51ae3-105">Compilers can apply custom modifiers to methods, parameters, and return values.</span></span>  <span data-ttu-id="51ae3-106">Przy użyciu kompilatora JIT musi odpowiadać na Modyfikatory wymagane, ale można zignorować Modyfikatory opcjonalne.</span><span class="sxs-lookup"><span data-stu-id="51ae3-106">The JIT compiler must respond to required modifiers but can ignore optional modifiers.</span></span>  <span data-ttu-id="51ae3-107">Kompilator języka C++ może wyemitować niestandardowych modyfikator opisujących sposób bajt powinny być traktowane w przypadkach, gdy przy użyciu kompilatora JIT traktuje bajtów w taki sposób, który nie jest zgodny z C++ domyślnie.</span><span class="sxs-lookup"><span data-stu-id="51ae3-107">A C++ compiler could emit a custom modifier to describe how a byte should be treated in cases where the JIT compiler treats bytes in a manner that is not compatible with C++ by default.</span></span>  
  
 <span data-ttu-id="51ae3-108">Modyfikatory niestandardowy może emitować w metadanych przy użyciu jednej z następujących metod:</span><span class="sxs-lookup"><span data-stu-id="51ae3-108">You can emit custom modifiers into metadata using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="51ae3-109">Przy użyciu metod w <xref:System.Reflection.Emit.TypeBuilder> klas takich jak <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, i <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span><span class="sxs-lookup"><span data-stu-id="51ae3-109">Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span></span>  
  
-   <span data-ttu-id="51ae3-110">Generowanie pliku instrukcji języka pośredniego (MSIL) firmy Microsoft, który zawiera wywołań `modopt` i `modreq`i składania pliku o [Ilasm.exe (asembler IL)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="51ae3-110">Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
-   <span data-ttu-id="51ae3-111">Przy użyciu odbicia niezarządzane interfejsu API.</span><span class="sxs-lookup"><span data-stu-id="51ae3-111">Using the unmanaged reflection API.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="51ae3-112">W poniższym przykładzie pokazano sposób Emituj <xref:System.Runtime.CompilerServices.IsPinned> obiektu w zestawie przy użyciu odbicia.</span><span class="sxs-lookup"><span data-stu-id="51ae3-112">The following example demonstrates how to emit an <xref:System.Runtime.CompilerServices.IsPinned> object into an assembly using reflection.</span></span>  
  
 [!code-cpp[Runtime.CompilerServices.IsPinned#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.CompilerServices.IsPinned/cpp/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>