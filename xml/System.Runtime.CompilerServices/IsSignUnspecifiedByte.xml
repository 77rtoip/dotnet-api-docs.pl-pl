<Type Name="IsSignUnspecifiedByte" FullName="System.Runtime.CompilerServices.IsSignUnspecifiedByte">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e65669772e4fe8dcde7c38cca641d119217dfd32" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class IsSignUnspecifiedByte" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsSignUnspecifiedByte extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsSignUnspecifiedByte" />
  <TypeSignature Language="VB.NET" Value="Public Class IsSignUnspecifiedByte" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsSignUnspecifiedByte abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="8d5f4-101">Wskazuje, że modyfikator nie jest podpisany ani bez znaku.</span>
      <span class="sxs-lookup">
        <span data-stu-id="8d5f4-101">Indicates that a modifier is neither signed nor unsigned.</span>
      </span>
      <span data-ttu-id="8d5f4-102">Klasa ta nie może być dziedziczona.</span>
      <span class="sxs-lookup">
        <span data-stu-id="8d5f4-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8d5f4-103">Niektóre języki programowania, takich jak C++, rozpoznaje trzy różne `char` wartości: `signed char`, `unsigned char`, i `char`.</span><span class="sxs-lookup"><span data-stu-id="8d5f4-103">Some programming languages, such as C++, recognize three distinct `char` values: `signed char`, `unsigned char`, and `char`.</span></span>  <span data-ttu-id="8d5f4-104">Aby odróżnić niemodyfikowana `char` wpisz od innych, kompilator Microsoft C++ dodaje <xref:System.Runtime.CompilerServices.IsSignUnspecifiedByte> modyfikator do każdego `char` typu wysyłanego do zestawu.</span><span class="sxs-lookup"><span data-stu-id="8d5f4-104">To distinguish the unmodified `char` type from the others, the Microsoft C++ compiler adds the <xref:System.Runtime.CompilerServices.IsSignUnspecifiedByte> modifier to each `char` type emitted to an assembly.</span></span>  
  
 <span data-ttu-id="8d5f4-105">Kompilatory Emituj niestandardowych Modyfikatory w metadanych, aby zmienić sposób, że przy użyciu kompilatora just in time (JIT) obsługuje wartości podczas domyślne zachowanie nie jest odpowiedni.</span><span class="sxs-lookup"><span data-stu-id="8d5f4-105">Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</span></span>  <span data-ttu-id="8d5f4-106">Kompilator JIT napotkał modyfikator niestandardowych, obsługi przez wartość w taki sposób, który określa modyfikator.</span><span class="sxs-lookup"><span data-stu-id="8d5f4-106">When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</span></span>  <span data-ttu-id="8d5f4-107">Kompilatory można zastosować Modyfikatory niestandardowych metod, parametry i wartości zwracane.</span><span class="sxs-lookup"><span data-stu-id="8d5f4-107">Compilers can apply custom modifiers to methods, parameters, and return values.</span></span>  <span data-ttu-id="8d5f4-108">Przy użyciu kompilatora JIT musi odpowiadać na Modyfikatory wymagane, ale można zignorować Modyfikatory opcjonalne.</span><span class="sxs-lookup"><span data-stu-id="8d5f4-108">The JIT compiler must respond to required modifiers but can ignore optional modifiers.</span></span>  
  
 <span data-ttu-id="8d5f4-109">Modyfikatory niestandardowy może emitować w metadanych przy użyciu jednej z następujących metod:</span><span class="sxs-lookup"><span data-stu-id="8d5f4-109">You can emit custom modifiers into metadata using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="8d5f4-110">Przy użyciu metod w <xref:System.Reflection.Emit.TypeBuilder> klas takich jak <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, i <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span><span class="sxs-lookup"><span data-stu-id="8d5f4-110">Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span></span>  
  
-   <span data-ttu-id="8d5f4-111">Generowanie pliku instrukcji języka pośredniego (MSIL) firmy Microsoft, który zawiera wywołań `modopt` i `modreq`i składania pliku o [Ilasm.exe (asembler IL)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="8d5f4-111">Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
-   <span data-ttu-id="8d5f4-112">Przy użyciu odbicia niezarządzane interfejsu API.</span><span class="sxs-lookup"><span data-stu-id="8d5f4-112">Using the unmanaged reflection API.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8d5f4-113">Poniższy przykład kodu tworzy zestawu za pomocą klasy w <xref:System.Reflection.Emit> przestrzeni nazw i emituje <xref:System.Runtime.CompilerServices.IsSignUnspecifiedByte> modyfikator do tego zestawu.</span><span class="sxs-lookup"><span data-stu-id="8d5f4-113">The following code example creates an assembly using classes in the <xref:System.Reflection.Emit> namespace and emits the <xref:System.Runtime.CompilerServices.IsSignUnspecifiedByte> modifier into that assembly.</span></span>  
  
 [!code-cpp[Runtime.CompilerServices.IsSignUnspecifiedByte#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.CompilerServices.IsSignUnspecifiedByte/cpp/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>