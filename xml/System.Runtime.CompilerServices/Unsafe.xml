<Type Name="Unsafe" FullName="System.Runtime.CompilerServices.Unsafe">
  <Metadata><Meta Name="ms.openlocfilehash" Value="03415d4c998929d603318b6c1ffdf0cc9cf8cba5" /><Meta Name="ms.sourcegitcommit" Value="634678f7ccd2928c6b2cf792a301b079b63639af" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="07/26/2019" /><Meta Name="ms.locfileid" Value="68542379" /></Metadata><TypeSignature Language="C#" Value="public static class Unsafe" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Unsafe extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.Unsafe" />
  <TypeSignature Language="VB.NET" Value="Public Class Unsafe" />
  <TypeSignature Language="C++ CLI" Value="public ref class Unsafe abstract sealed" />
  <TypeSignature Language="F#" Value="type Unsafe = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.1</AssemblyVersion>
    <AssemblyVersion>4.0.5.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="a04e7-101">Zawiera ogólne funkcje niskiego poziomu na potrzeby manipulowania wskaźnikami.</span><span class="sxs-lookup"><span data-stu-id="a04e7-101">Contains generic, low-level functionality for manipulating pointers.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Add&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void* Add&lt;T&gt; (void* source, int elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void* Add&lt;T&gt;(void* source, int32 elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Add``1(System.Void*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void* Add(void* source, int elementOffset);" />
      <MemberSignature Language="F#" Value="static member Add : nativeptr&lt;unit&gt; * int -&gt; nativeptr&lt;unit&gt;" Usage="System.Runtime.CompilerServices.Unsafe.Add (source, elementOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void*</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Void*" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="elementOffset" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="a04e7-102">Typ wskaźnika typu void.</span><span class="sxs-lookup"><span data-stu-id="a04e7-102">The type of void pointer.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a04e7-103">Wskaźnik void, do którego ma zostać dodane przesunięcie.</span><span class="sxs-lookup"><span data-stu-id="a04e7-103">The void pointer to add the offset to.</span></span></param>
        <param name="elementOffset"><span data-ttu-id="a04e7-104">Przesunięcie do dodania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-104">The offset to add.</span></span></param>
        <summary><span data-ttu-id="a04e7-105">Dodaje przesunięcie elementu do podanym pustego wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="a04e7-105">Adds an element offset to the given void pointer.</span></span></summary>
        <returns><span data-ttu-id="a04e7-106">Nowy pusty wskaźnik, który odzwierciedla dodanie przesunięcia do określonego wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="a04e7-106">A new void pointer that reflects the addition of offset to the specified pointer.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Add&lt;T&gt; (ref T source, int elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Add&lt;T&gt;(!!T&amp; source, int32 elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Add``1(``0@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add(Of T) (ByRef source As T, elementOffset As Integer) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % Add(T % source, int elementOffset);" />
      <MemberSignature Language="F#" Value="static member Add :  * int -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.Add (source, elementOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="elementOffset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="a04e7-107">Typ odwołania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-107">The type of reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a04e7-108">Odwołanie do dodania przesunięcia do.</span><span class="sxs-lookup"><span data-stu-id="a04e7-108">The reference to add the offset to.</span></span></param>
        <param name="elementOffset"><span data-ttu-id="a04e7-109">Przesunięcie do dodania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-109">The offset to add.</span></span></param>
        <summary><span data-ttu-id="a04e7-110">Dodaje przesunięcie elementu do danego odwołania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-110">Adds an element offset to the given reference.</span></span></summary>
        <returns><span data-ttu-id="a04e7-111">Nowe odwołanie, które odzwierciedla dodanie przesunięcia do wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="a04e7-111">A new reference that reflects the addition of offset to pointer.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Add&lt;T&gt; (ref T source, IntPtr elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Add&lt;T&gt;(!!T&amp; source, native int elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Add``1(``0@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add(Of T) (ByRef source As T, elementOffset As IntPtr) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % Add(T % source, IntPtr elementOffset);" />
      <MemberSignature Language="F#" Value="static member Add :  * nativeint -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.Add (source, elementOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="elementOffset" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="a04e7-112">Typ odwołania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-112">The type of reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a04e7-113">Odwołanie do dodania przesunięcia do.</span><span class="sxs-lookup"><span data-stu-id="a04e7-113">The reference to add the offset to.</span></span></param>
        <param name="elementOffset"><span data-ttu-id="a04e7-114">Przesunięcie do dodania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-114">The offset to add.</span></span></param>
        <summary><span data-ttu-id="a04e7-115">Dodaje przesunięcie elementu do danego odwołania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-115">Adds an element offset to the given reference.</span></span></summary>
        <returns><span data-ttu-id="a04e7-116">Nowe odwołanie, które odzwierciedla dodanie przesunięcia do wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="a04e7-116">A new reference that reflects the addition of offset to pointer.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddByteOffset&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T AddByteOffset&lt;T&gt; (ref T source, IntPtr byteOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T AddByteOffset&lt;T&gt;(!!T&amp; source, native int byteOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.AddByteOffset``1(``0@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddByteOffset(Of T) (ByRef source As T, byteOffset As IntPtr) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % AddByteOffset(T % source, IntPtr byteOffset);" />
      <MemberSignature Language="F#" Value="static member AddByteOffset :  * nativeint -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.AddByteOffset (source, byteOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="byteOffset" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="a04e7-117">Typ odwołania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-117">The type of reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a04e7-118">Odwołanie do dodania przesunięcia do.</span><span class="sxs-lookup"><span data-stu-id="a04e7-118">The reference to add the offset to.</span></span></param>
        <param name="byteOffset"><span data-ttu-id="a04e7-119">Przesunięcie do dodania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-119">The offset to add.</span></span></param>
        <summary><span data-ttu-id="a04e7-120">Dodaje przesunięcie bajtów do danego odwołania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-120">Adds a byte offset to the given reference.</span></span></summary>
        <returns><span data-ttu-id="a04e7-121">Nowe odwołanie, które odzwierciedla dodanie przesunięcia bajtów do wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="a04e7-121">A new reference that reflects the addition of byte offset to pointer.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreSame&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool AreSame&lt;T&gt; (ref T left, ref T right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool AreSame&lt;T&gt;(!!T&amp; left, !!T&amp; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.AreSame``1(``0@,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AreSame(Of T) (ByRef left As T, ByRef right As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool AreSame(T % left, T % right);" />
      <MemberSignature Language="F#" Value="static member AreSame :  *  -&gt; bool" Usage="System.Runtime.CompilerServices.Unsafe.AreSame (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="T" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-1.1;netcore-3.0" />
        <Parameter Name="right" Type="T" RefType="ref" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-1.1;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="a04e7-122">Typ odwołania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-122">The type of reference.</span></span></typeparam>
        <param name="left"><span data-ttu-id="a04e7-123">Pierwsze odwołanie do porównania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-123">The first reference to compare.</span></span></param>
        <param name="right"><span data-ttu-id="a04e7-124">Drugie odwołanie do porównania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-124">The second reference to compare.</span></span></param>
        <summary><span data-ttu-id="a04e7-125">Określa, czy określone odwołania wskazują do tej samej lokalizacji.</span><span class="sxs-lookup"><span data-stu-id="a04e7-125">Determines whether the specified references point to the same location.</span></span></summary>
        <returns><span data-ttu-id="a04e7-126"><see langword="true" />Jeśli <paramref name="left" /> i <paramref name="right" /> wskaż tę<see langword="false" />samą lokalizację; w przeciwnym razie.</span><span class="sxs-lookup"><span data-stu-id="a04e7-126"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> point to the same location; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="As&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T As&lt;T&gt; (object o) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T As&lt;class T&gt;(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.As``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function As(Of T As Class) (o As Object) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T As(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="static member As : obj -&gt; 'T (requires 'T : null)" Usage="System.Runtime.CompilerServices.Unsafe.As o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="a04e7-127">Typ, do którego zostanie przerzutowany obiekt.</span><span class="sxs-lookup"><span data-stu-id="a04e7-127">The type which the object will be cast to.</span></span></typeparam>
        <param name="o"><span data-ttu-id="a04e7-128">Obiekt do rzutowania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-128">The object to cast.</span></span></param>
        <summary><span data-ttu-id="a04e7-129">Rzutuje podany obiekt na określony typ.</span><span class="sxs-lookup"><span data-stu-id="a04e7-129">Casts the given object to the specified type.</span></span></summary>
        <returns><span data-ttu-id="a04e7-130">Oryginalny obiekt rzutowany na dany typ.</span><span class="sxs-lookup"><span data-stu-id="a04e7-130">The original object, casted to the given type.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="As&lt;TFrom,TTo&gt;">
      <MemberSignature Language="C#" Value="public static TTo As&lt;TFrom,TTo&gt; (ref TFrom source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TTo As&lt;TFrom, TTo&gt;(!!TFrom&amp; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.As``2(``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function As(Of TFrom, TTo) (ByRef source As TFrom) As TTo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFrom, typename TTo&gt;&#xA; static TTo % As(TFrom % source);" />
      <MemberSignature Language="F#" Value="static member As :  -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.As source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TTo@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFrom" />
        <TypeParameter Name="TTo" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="TFrom&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="TFrom"><span data-ttu-id="a04e7-131">Typ odwołania do reinterpretacji.</span><span class="sxs-lookup"><span data-stu-id="a04e7-131">The type of reference to reinterpret.</span></span></typeparam>
        <typeparam name="TTo"><span data-ttu-id="a04e7-132">Żądany typ odwołania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-132">The desired type of the reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a04e7-133">Odwołanie do reinterpretacji.</span><span class="sxs-lookup"><span data-stu-id="a04e7-133">The reference to reinterpret.</span></span></param>
        <summary><span data-ttu-id="a04e7-134">Reinterpretuje daną odwołanie jako odwołanie do wartości typu <typeparamref name="TTo" />.</span><span class="sxs-lookup"><span data-stu-id="a04e7-134">Reinterprets the given reference as a reference to a value of type <typeparamref name="TTo" />.</span></span></summary>
        <returns><span data-ttu-id="a04e7-135">Odwołanie do wartości typu <typeparamref name="TTo" />.</span><span class="sxs-lookup"><span data-stu-id="a04e7-135">A reference to a value of type <typeparamref name="TTo" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsPointer&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void* AsPointer&lt;T&gt; (ref T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void* AsPointer&lt;T&gt;(!!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.AsPointer``1(``0@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void* AsPointer(T % value);" />
      <MemberSignature Language="F#" Value="static member AsPointer :  -&gt; nativeptr&lt;unit&gt;" Usage="System.Runtime.CompilerServices.Unsafe.AsPointer value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void*</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="a04e7-136">Typ obiektu.</span><span class="sxs-lookup"><span data-stu-id="a04e7-136">The type of object.</span></span></typeparam>
        <param name="value"><span data-ttu-id="a04e7-137">Obiekt, którego wskaźnik został uzyskany.</span><span class="sxs-lookup"><span data-stu-id="a04e7-137">The object whose pointer is obtained.</span></span></param>
        <summary><span data-ttu-id="a04e7-138">Zwraca wskaźnik do danego parametru przez-ref.</span><span class="sxs-lookup"><span data-stu-id="a04e7-138">Returns a pointer to the given by-ref parameter.</span></span></summary>
        <returns><span data-ttu-id="a04e7-139">Wskaźnik do danej wartości.</span><span class="sxs-lookup"><span data-stu-id="a04e7-139">A pointer to the given value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsRef&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T AsRef&lt;T&gt; (void* source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T AsRef&lt;T&gt;(void* source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.AsRef``1(System.Void*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % AsRef(void* source);" />
      <MemberSignature Language="F#" Value="static member AsRef : nativeptr&lt;unit&gt; -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.AsRef source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Void*" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="a04e7-140">Typ interpretowanej lokalizacji.</span><span class="sxs-lookup"><span data-stu-id="a04e7-140">The type of the interpreted location.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a04e7-141">Lokalizacja wartości do odwołania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-141">The location of the value to reference.</span></span></param>
        <summary><span data-ttu-id="a04e7-142">Reinterpretuje daną lokalizację jako odwołanie do wartości typu <typeparamref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="a04e7-142">Reinterprets the given location as a reference to a value of type <typeparamref name="T" />.</span></span></summary>
        <returns><span data-ttu-id="a04e7-143">Odwołanie do wartości typu <typeparamref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="a04e7-143">A reference to a value of type <typeparamref name="T" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsRef&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ref T AsRef&lt;T&gt; (ref T source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T AsRef&lt;T&gt;([in]!!T&amp; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.AsRef``1(``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsRef(Of T) (ByRef source As T) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % AsRef(T % source);" />
      <MemberSignature Language="F#" Value="static member AsRef :  -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.AsRef source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="a04e7-144">Typ odwołania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-144">The type of reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a04e7-145">Odwołanie tylko do odczytu do reinterpretacji.</span><span class="sxs-lookup"><span data-stu-id="a04e7-145">The read-only reference to reinterpret.</span></span></param>
        <summary><span data-ttu-id="a04e7-146">Reinterpretuje daną referencję tylko do odczytu jako odwołanie.</span><span class="sxs-lookup"><span data-stu-id="a04e7-146">Reinterprets the given read-only reference as a reference.</span></span></summary>
        <returns><span data-ttu-id="a04e7-147">Odwołanie do wartości typu <typeparamref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="a04e7-147">A reference to a value of type <typeparamref name="T" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ByteOffset&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static IntPtr ByteOffset&lt;T&gt; (ref T origin, ref T target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int ByteOffset&lt;T&gt;(!!T&amp; origin, !!T&amp; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.ByteOffset``1(``0@,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ByteOffset(Of T) (ByRef origin As T, ByRef target As T) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static IntPtr ByteOffset(T % origin, T % target);" />
      <MemberSignature Language="F#" Value="static member ByteOffset :  *  -&gt; nativeint" Usage="System.Runtime.CompilerServices.Unsafe.ByteOffset (origin, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="origin" Type="T" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="target" Type="T" RefType="ref" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="a04e7-148">Typ odwołania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-148">The type of reference.</span></span></typeparam>
        <param name="origin"><span data-ttu-id="a04e7-149">Odwołanie do źródła.</span><span class="sxs-lookup"><span data-stu-id="a04e7-149">The reference to origin.</span></span></param>
        <param name="target"><span data-ttu-id="a04e7-150">Odwołanie do elementu docelowego.</span><span class="sxs-lookup"><span data-stu-id="a04e7-150">The reference to target.</span></span></param>
        <summary><span data-ttu-id="a04e7-151">Określa przesunięcie bajtu od początku do wartości docelowej z danego odwołania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-151">Determines the byte offset from origin to target from the given references.</span></span></summary>
        <returns><span data-ttu-id="a04e7-152">Przesunięcie bajtu od początku do elementu docelowego <paramref name="target" />, np.  -  <paramref name="origin" />.</span><span class="sxs-lookup"><span data-stu-id="a04e7-152">Byte offset from origin to target i.e. <paramref name="target" /> - <paramref name="origin" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Copy&lt;T&gt; (void* destination, ref T source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy&lt;T&gt;(void* destination, !!T&amp; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Copy``1(System.Void*,``0@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Copy(void* destination, T % source);" />
      <MemberSignature Language="F#" Value="static member Copy : nativeptr&lt;unit&gt; *  -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.Copy (destination, source)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Void*" />
        <Parameter Name="source" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="a04e7-153">Typ wartości do skopiowania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-153">The type of value to copy.</span></span></typeparam>
        <param name="destination"><span data-ttu-id="a04e7-154">Lokalizacja, do której ma zostać skopiowana.</span><span class="sxs-lookup"><span data-stu-id="a04e7-154">The location to copy to.</span></span></param>
        <param name="source"><span data-ttu-id="a04e7-155">Odwołanie do wartości, która ma zostać skopiowana.</span><span class="sxs-lookup"><span data-stu-id="a04e7-155">A reference to the value to copy.</span></span></param>
        <summary><span data-ttu-id="a04e7-156">Kopiuje wartość typu <typeparamref name="T" /> do danej lokalizacji.</span><span class="sxs-lookup"><span data-stu-id="a04e7-156">Copies a value of type <typeparamref name="T" /> to the given location.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Copy&lt;T&gt; (ref T destination, void* source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy&lt;T&gt;(!!T&amp; destination, void* source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Copy``1(``0@,System.Void*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Copy(T % destination, void* source);" />
      <MemberSignature Language="F#" Value="static member Copy :  * nativeptr&lt;unit&gt; -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.Copy (destination, source)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="T" RefType="ref" />
        <Parameter Name="source" Type="System.Void*" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="a04e7-157">Typ wartości do skopiowania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-157">The type of value to copy.</span></span></typeparam>
        <param name="destination"><span data-ttu-id="a04e7-158">Lokalizacja, do której ma zostać skopiowana.</span><span class="sxs-lookup"><span data-stu-id="a04e7-158">The location to copy to.</span></span></param>
        <param name="source"><span data-ttu-id="a04e7-159">Wskaźnik do wartości, która ma zostać skopiowana.</span><span class="sxs-lookup"><span data-stu-id="a04e7-159">A pointer to the value to copy.</span></span></param>
        <summary><span data-ttu-id="a04e7-160">Kopiuje wartość typu <typeparamref name="T" /> do danej lokalizacji.</span><span class="sxs-lookup"><span data-stu-id="a04e7-160">Copies a value of type <typeparamref name="T" /> to the given location.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyBlock">
      <MemberSignature Language="C#" Value="public static void CopyBlock (ref byte destination, ref byte source, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyBlock(unsigned int8&amp; destination, unsigned int8&amp; source, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.CopyBlock(System.Byte@,System.Byte@,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CopyBlock (ByRef destination As Byte, ByRef source As Byte, byteCount As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyBlock(System::Byte % destination, System::Byte % source, System::UInt32 byteCount);" />
      <MemberSignature Language="F#" Value="static member CopyBlock :  *  * uint32 -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.CopyBlock (destination, source, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Byte" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="source" Type="System.Byte" RefType="ref" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="byteCount" Type="System.UInt32" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="a04e7-161">Adres docelowy do skopiowania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-161">The destination address to copy to.</span></span></param>
        <param name="source"><span data-ttu-id="a04e7-162">Adres źródłowy, z którego należy kopiować.</span><span class="sxs-lookup"><span data-stu-id="a04e7-162">The source address to copy from.</span></span></param>
        <param name="byteCount"><span data-ttu-id="a04e7-163">Liczba bajtów do skopiowania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-163">The number of bytes to copy.</span></span></param>
        <summary><span data-ttu-id="a04e7-164">Kopiuje bajty z adresu źródłowego na adres docelowy.</span><span class="sxs-lookup"><span data-stu-id="a04e7-164">Copies bytes from the source address to the destination address.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyBlock">
      <MemberSignature Language="C#" Value="public static void CopyBlock (void* destination, void* source, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyBlock(void* destination, void* source, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.CopyBlock(System.Void*,System.Void*,System.UInt32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyBlock(void* destination, void* source, System::UInt32 byteCount);" />
      <MemberSignature Language="F#" Value="static member CopyBlock : nativeptr&lt;unit&gt; * nativeptr&lt;unit&gt; * uint32 -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.CopyBlock (destination, source, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Void*" />
        <Parameter Name="source" Type="System.Void*" />
        <Parameter Name="byteCount" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="a04e7-165">Adres docelowy do skopiowania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-165">The destination address to copy to.</span></span></param>
        <param name="source"><span data-ttu-id="a04e7-166">Adres źródłowy, z którego należy kopiować.</span><span class="sxs-lookup"><span data-stu-id="a04e7-166">The source address to copy from.</span></span></param>
        <param name="byteCount"><span data-ttu-id="a04e7-167">Liczba bajtów do skopiowania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-167">The number of bytes to copy.</span></span></param>
        <summary><span data-ttu-id="a04e7-168">Kopiuje bajty z adresu źródłowego na adres docelowy.</span><span class="sxs-lookup"><span data-stu-id="a04e7-168">Copies bytes from the source address to the destination address.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyBlockUnaligned">
      <MemberSignature Language="C#" Value="public static void CopyBlockUnaligned (ref byte destination, ref byte source, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyBlockUnaligned(unsigned int8&amp; destination, unsigned int8&amp; source, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(System.Byte@,System.Byte@,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CopyBlockUnaligned (ByRef destination As Byte, ByRef source As Byte, byteCount As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyBlockUnaligned(System::Byte % destination, System::Byte % source, System::UInt32 byteCount);" />
      <MemberSignature Language="F#" Value="static member CopyBlockUnaligned :  *  * uint32 -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned (destination, source, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Byte" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="source" Type="System.Byte" RefType="ref" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="byteCount" Type="System.UInt32" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="a04e7-169">Adres docelowy do skopiowania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-169">The destination address to copy to.</span></span></param>
        <param name="source"><span data-ttu-id="a04e7-170">Adres źródłowy, z którego należy kopiować.</span><span class="sxs-lookup"><span data-stu-id="a04e7-170">The source address to copy from.</span></span></param>
        <param name="byteCount"><span data-ttu-id="a04e7-171">Liczba bajtów do skopiowania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-171">The number of bytes to copy.</span></span></param>
        <summary><span data-ttu-id="a04e7-172">Kopiuje bajty z adresu źródłowego na adres docelowy bez zakładania wyrównania adresów zależnych od architektury.</span><span class="sxs-lookup"><span data-stu-id="a04e7-172">Copies bytes from the source address to the destination address without assuming architecture dependent alignment of the addresses.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyBlockUnaligned">
      <MemberSignature Language="C#" Value="public static void CopyBlockUnaligned (void* destination, void* source, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyBlockUnaligned(void* destination, void* source, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(System.Void*,System.Void*,System.UInt32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyBlockUnaligned(void* destination, void* source, System::UInt32 byteCount);" />
      <MemberSignature Language="F#" Value="static member CopyBlockUnaligned : nativeptr&lt;unit&gt; * nativeptr&lt;unit&gt; * uint32 -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned (destination, source, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Void*" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="source" Type="System.Void*" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="byteCount" Type="System.UInt32" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="a04e7-173">Adres docelowy do skopiowania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-173">The destination address to copy to.</span></span></param>
        <param name="source"><span data-ttu-id="a04e7-174">Adres źródłowy, z którego należy kopiować.</span><span class="sxs-lookup"><span data-stu-id="a04e7-174">The source address to copy from.</span></span></param>
        <param name="byteCount"><span data-ttu-id="a04e7-175">Liczba bajtów do skopiowania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-175">The number of bytes to copy.</span></span></param>
        <summary><span data-ttu-id="a04e7-176">Kopiuje bajty z adresu źródłowego na adres docelowy bez zakładania wyrównania adresów zależnych od architektury.</span><span class="sxs-lookup"><span data-stu-id="a04e7-176">Copies bytes from the source address to the destination address without assuming architecture dependent alignment of the addresses.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitBlock">
      <MemberSignature Language="C#" Value="public static void InitBlock (ref byte startAddress, byte value, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InitBlock(unsigned int8&amp; startAddress, unsigned int8 value, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.InitBlock(System.Byte@,System.Byte,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub InitBlock (ByRef startAddress As Byte, value As Byte, byteCount As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void InitBlock(System::Byte % startAddress, System::Byte value, System::UInt32 byteCount);" />
      <MemberSignature Language="F#" Value="static member InitBlock :  * byte * uint32 -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.InitBlock (startAddress, value, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startAddress" Type="System.Byte" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="value" Type="System.Byte" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="byteCount" Type="System.UInt32" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="startAddress"><span data-ttu-id="a04e7-177">Adres początku bloku pamięci do zainicjowania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-177">The address of the start of the memory block to initialize.</span></span></param>
        <param name="value"><span data-ttu-id="a04e7-178">Wartość, dla której ma zostać zainicjowany blok.</span><span class="sxs-lookup"><span data-stu-id="a04e7-178">The value to initialize the block to.</span></span></param>
        <param name="byteCount"><span data-ttu-id="a04e7-179">Liczba bajtów do zainicjowania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-179">The number of bytes to initialize.</span></span></param>
        <summary><span data-ttu-id="a04e7-180">Inicjuje blok pamięci w danej lokalizacji z określoną wartością początkową.</span><span class="sxs-lookup"><span data-stu-id="a04e7-180">Initializes a block of memory at the given location with a given initial value.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitBlock">
      <MemberSignature Language="C#" Value="public static void InitBlock (void* startAddress, byte value, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InitBlock(void* startAddress, unsigned int8 value, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.InitBlock(System.Void*,System.Byte,System.UInt32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void InitBlock(void* startAddress, System::Byte value, System::UInt32 byteCount);" />
      <MemberSignature Language="F#" Value="static member InitBlock : nativeptr&lt;unit&gt; * byte * uint32 -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.InitBlock (startAddress, value, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startAddress" Type="System.Void*" />
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="byteCount" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="startAddress"><span data-ttu-id="a04e7-181">Adres początku bloku pamięci do zainicjowania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-181">The address of the start of the memory block to initialize.</span></span></param>
        <param name="value"><span data-ttu-id="a04e7-182">Wartość, dla której ma zostać zainicjowany blok.</span><span class="sxs-lookup"><span data-stu-id="a04e7-182">The value to initialize the block to.</span></span></param>
        <param name="byteCount"><span data-ttu-id="a04e7-183">Liczba bajtów do zainicjowania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-183">The number of bytes to initialize.</span></span></param>
        <summary><span data-ttu-id="a04e7-184">Inicjuje blok pamięci w danej lokalizacji z określoną wartością początkową.</span><span class="sxs-lookup"><span data-stu-id="a04e7-184">Initializes a block of memory at the given location with a given initial value.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitBlockUnaligned">
      <MemberSignature Language="C#" Value="public static void InitBlockUnaligned (ref byte startAddress, byte value, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InitBlockUnaligned(unsigned int8&amp; startAddress, unsigned int8 value, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(System.Byte@,System.Byte,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub InitBlockUnaligned (ByRef startAddress As Byte, value As Byte, byteCount As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void InitBlockUnaligned(System::Byte % startAddress, System::Byte value, System::UInt32 byteCount);" />
      <MemberSignature Language="F#" Value="static member InitBlockUnaligned :  * byte * uint32 -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned (startAddress, value, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startAddress" Type="System.Byte" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="value" Type="System.Byte" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="byteCount" Type="System.UInt32" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="startAddress"><span data-ttu-id="a04e7-185">Adres początku bloku pamięci do zainicjowania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-185">The address of the start of the memory block to initialize.</span></span></param>
        <param name="value"><span data-ttu-id="a04e7-186">Wartość, dla której ma zostać zainicjowany blok.</span><span class="sxs-lookup"><span data-stu-id="a04e7-186">The value to initialize the block to.</span></span></param>
        <param name="byteCount"><span data-ttu-id="a04e7-187">Liczba bajtów do zainicjowania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-187">The number of bytes to initialize.</span></span></param>
        <summary><span data-ttu-id="a04e7-188">Inicjuje blok pamięci w danej lokalizacji z określoną wartością początkową bez założeniu, że wyrównania adresu jest zależne od architektury.</span><span class="sxs-lookup"><span data-stu-id="a04e7-188">Initializes a block of memory at the given location with a given initial value without assuming architecture dependent alignment of the address.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitBlockUnaligned">
      <MemberSignature Language="C#" Value="public static void InitBlockUnaligned (void* startAddress, byte value, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InitBlockUnaligned(void* startAddress, unsigned int8 value, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(System.Void*,System.Byte,System.UInt32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void InitBlockUnaligned(void* startAddress, System::Byte value, System::UInt32 byteCount);" />
      <MemberSignature Language="F#" Value="static member InitBlockUnaligned : nativeptr&lt;unit&gt; * byte * uint32 -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned (startAddress, value, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startAddress" Type="System.Void*" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="value" Type="System.Byte" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="byteCount" Type="System.UInt32" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="startAddress"><span data-ttu-id="a04e7-189">Adres początku bloku pamięci do zainicjowania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-189">The address of the start of the memory block to initialize.</span></span></param>
        <param name="value"><span data-ttu-id="a04e7-190">Wartość, dla której ma zostać zainicjowany blok.</span><span class="sxs-lookup"><span data-stu-id="a04e7-190">The value to initialize the block to.</span></span></param>
        <param name="byteCount"><span data-ttu-id="a04e7-191">Liczba bajtów do zainicjowania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-191">The number of bytes to initialize.</span></span></param>
        <summary><span data-ttu-id="a04e7-192">Inicjuje blok pamięci w danej lokalizacji z określoną wartością początkową bez założeniu, że wyrównania adresu jest zależne od architektury.</span><span class="sxs-lookup"><span data-stu-id="a04e7-192">Initializes a block of memory at the given location with a given initial value without assuming architecture dependent alignment of the address.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAddressGreaterThan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool IsAddressGreaterThan&lt;T&gt; (ref T left, ref T right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsAddressGreaterThan&lt;T&gt;(!!T&amp; left, !!T&amp; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.IsAddressGreaterThan``1(``0@,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsAddressGreaterThan(Of T) (ByRef left As T, ByRef right As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool IsAddressGreaterThan(T % left, T % right);" />
      <MemberSignature Language="F#" Value="static member IsAddressGreaterThan :  *  -&gt; bool" Usage="System.Runtime.CompilerServices.Unsafe.IsAddressGreaterThan (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="T" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="right" Type="T" RefType="ref" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="a04e7-193">Typ odwołania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-193">The type of the reference.</span></span></typeparam>
        <param name="left"><span data-ttu-id="a04e7-194">Pierwsza wartość do porównania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-194">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="a04e7-195">Druga wartość do porównania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-195">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="a04e7-196">Zwraca wartość wskazującą, czy określone odwołanie jest większe niż inne określone odwołanie.</span><span class="sxs-lookup"><span data-stu-id="a04e7-196">Returns a value that indicates whether a specified reference is greater than another specified reference.</span></span></summary>
        <returns><span data-ttu-id="a04e7-197"><see langword="true" />Jeśli <paramref name="left" /> jest większa niż <paramref name="right" />; w przeciwnym <see langword="false" />razie,.</span><span class="sxs-lookup"><span data-stu-id="a04e7-197"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAddressLessThan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool IsAddressLessThan&lt;T&gt; (ref T left, ref T right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsAddressLessThan&lt;T&gt;(!!T&amp; left, !!T&amp; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.IsAddressLessThan``1(``0@,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsAddressLessThan(Of T) (ByRef left As T, ByRef right As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool IsAddressLessThan(T % left, T % right);" />
      <MemberSignature Language="F#" Value="static member IsAddressLessThan :  *  -&gt; bool" Usage="System.Runtime.CompilerServices.Unsafe.IsAddressLessThan (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="T" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="right" Type="T" RefType="ref" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="a04e7-198">Typ odwołania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-198">The type of the reference.</span></span></typeparam>
        <param name="left"><span data-ttu-id="a04e7-199">Pierwsza wartość do porównania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-199">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="a04e7-200">Druga wartość do porównania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-200">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="a04e7-201">Zwraca wartość wskazującą, czy określone odwołanie jest mniejsze niż inne określone odwołanie.</span><span class="sxs-lookup"><span data-stu-id="a04e7-201">Returns a value that indicates whether a specified reference is less than another specified reference.</span></span></summary>
        <returns><span data-ttu-id="a04e7-202"><see langword="true" />Jeśli <paramref name="left" /> jest mniejsza niż <paramref name="right" />; w przeciwnym <see langword="false" />razie,.</span><span class="sxs-lookup"><span data-stu-id="a04e7-202"><see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Read&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Read&lt;T&gt; (void* source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Read&lt;T&gt;(void* source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Read``1(System.Void*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T Read(void* source);" />
      <MemberSignature Language="F#" Value="static member Read : nativeptr&lt;unit&gt; -&gt; 'T" Usage="System.Runtime.CompilerServices.Unsafe.Read source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Void*" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="a04e7-203">Typ, który ma zostać odczytany.</span><span class="sxs-lookup"><span data-stu-id="a04e7-203">The type to read.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a04e7-204">Lokalizacja, z której ma zostać odczytana.</span><span class="sxs-lookup"><span data-stu-id="a04e7-204">The location to read from.</span></span></param>
        <summary><span data-ttu-id="a04e7-205">Odczytuje wartość typu <typeparamref name="T" /> z podanej lokalizacji.</span><span class="sxs-lookup"><span data-stu-id="a04e7-205">Reads a value of type <typeparamref name="T" /> from the given location.</span></span></summary>
        <returns><span data-ttu-id="a04e7-206">Obiekt typu <typeparamref name="T" /> odczytany z danej lokalizacji.</span><span class="sxs-lookup"><span data-stu-id="a04e7-206">An object of type <typeparamref name="T" /> read from the given location.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadUnaligned&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T ReadUnaligned&lt;T&gt; (ref byte source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T ReadUnaligned&lt;T&gt;(unsigned int8&amp; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.ReadUnaligned``1(System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadUnaligned(Of T) (ByRef source As Byte) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T ReadUnaligned(System::Byte % source);" />
      <MemberSignature Language="F#" Value="static member ReadUnaligned :  -&gt; 'T" Usage="System.Runtime.CompilerServices.Unsafe.ReadUnaligned source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Byte" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="a04e7-207">Typ, który ma zostać odczytany.</span><span class="sxs-lookup"><span data-stu-id="a04e7-207">The type to read.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a04e7-208">Lokalizacja, z której ma zostać odczytana.</span><span class="sxs-lookup"><span data-stu-id="a04e7-208">The location to read from.</span></span></param>
        <summary><span data-ttu-id="a04e7-209">Odczytuje wartość typu <typeparamref name="T" /> z danej lokalizacji bez przyjętia wyrównania adresów zależnych od architektury.</span><span class="sxs-lookup"><span data-stu-id="a04e7-209">Reads a value of type <typeparamref name="T" /> from the given location without assuming architecture dependent alignment of the addresses.</span></span></summary>
        <returns><span data-ttu-id="a04e7-210">Obiekt typu <typeparamref name="T" /> odczytany z danej lokalizacji.</span><span class="sxs-lookup"><span data-stu-id="a04e7-210">An object of type <typeparamref name="T" /> read from the given location.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadUnaligned&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T ReadUnaligned&lt;T&gt; (void* source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T ReadUnaligned&lt;T&gt;(void* source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.ReadUnaligned``1(System.Void*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T ReadUnaligned(void* source);" />
      <MemberSignature Language="F#" Value="static member ReadUnaligned : nativeptr&lt;unit&gt; -&gt; 'T" Usage="System.Runtime.CompilerServices.Unsafe.ReadUnaligned source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Void*" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="a04e7-211">Typ, który ma zostać odczytany.</span><span class="sxs-lookup"><span data-stu-id="a04e7-211">The type to read.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a04e7-212">Lokalizacja, z której ma zostać odczytana.</span><span class="sxs-lookup"><span data-stu-id="a04e7-212">The location to read from.</span></span></param>
        <summary><span data-ttu-id="a04e7-213">Odczytuje wartość typu <typeparamref name="T" /> z danej lokalizacji bez przyjętia wyrównania adresów zależnych od architektury.</span><span class="sxs-lookup"><span data-stu-id="a04e7-213">Reads a value of type <typeparamref name="T" /> from the given location without assuming architecture dependent alignment of the addresses.</span></span></summary>
        <returns><span data-ttu-id="a04e7-214">Obiekt typu <typeparamref name="T" /> odczytany z danej lokalizacji.</span><span class="sxs-lookup"><span data-stu-id="a04e7-214">An object of type <typeparamref name="T" /> read from the given location.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int SizeOf&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 SizeOf&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.SizeOf``1" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SizeOf(Of T) () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static int SizeOf();" />
      <MemberSignature Language="F#" Value="static member SizeOf : unit -&gt; int" Usage="System.Runtime.CompilerServices.Unsafe.SizeOf " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T"><span data-ttu-id="a04e7-215">Typ obiektu, którego rozmiar jest pobierany.</span><span class="sxs-lookup"><span data-stu-id="a04e7-215">The type of object whose size is retrieved.</span></span></typeparam>
        <summary><span data-ttu-id="a04e7-216">Zwraca rozmiar obiektu danego parametru typu.</span><span class="sxs-lookup"><span data-stu-id="a04e7-216">Returns the size of an object of the given type parameter.</span></span></summary>
        <returns><span data-ttu-id="a04e7-217">Rozmiar obiektu typu <typeparamref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="a04e7-217">The size of an object of type <typeparamref name="T" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void* Subtract&lt;T&gt; (void* source, int elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void* Subtract&lt;T&gt;(void* source, int32 elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(System.Void*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void* Subtract(void* source, int elementOffset);" />
      <MemberSignature Language="F#" Value="static member Subtract : nativeptr&lt;unit&gt; * int -&gt; nativeptr&lt;unit&gt;" Usage="System.Runtime.CompilerServices.Unsafe.Subtract (source, elementOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void*</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Void*" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="elementOffset" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="a04e7-218">Typ wskaźnika typu void.</span><span class="sxs-lookup"><span data-stu-id="a04e7-218">The type of the void pointer.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a04e7-219">Wskaźnik void, od którego ma zostać odjęte przesunięcie.</span><span class="sxs-lookup"><span data-stu-id="a04e7-219">The void pointer to subtract the offset from.</span></span></param>
        <param name="elementOffset"><span data-ttu-id="a04e7-220">Przesunięcie do odejmowania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-220">The offset to subtract.</span></span></param>
        <summary><span data-ttu-id="a04e7-221">Odejmuje przesunięcie elementu od danego pustego wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="a04e7-221">Subtracts an element offset from the given void pointer.</span></span></summary>
        <returns><span data-ttu-id="a04e7-222">Nowy pusty wskaźnik odzwierciedlający odejmowanie przesunięcia od określonego wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="a04e7-222">A new void pointer that reflects the subtraction of offset from the specified pointer.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Subtract&lt;T&gt; (ref T source, int elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Subtract&lt;T&gt;(!!T&amp; source, int32 elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(``0@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract(Of T) (ByRef source As T, elementOffset As Integer) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % Subtract(T % source, int elementOffset);" />
      <MemberSignature Language="F#" Value="static member Subtract :  * int -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.Subtract (source, elementOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="elementOffset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="a04e7-223">Typ odwołania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-223">The type of reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a04e7-224">Odwołanie do odjęcia przesunięcia od.</span><span class="sxs-lookup"><span data-stu-id="a04e7-224">The reference to subtract the offset from.</span></span></param>
        <param name="elementOffset"><span data-ttu-id="a04e7-225">Przesunięcie do odejmowania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-225">The offset to subtract.</span></span></param>
        <summary><span data-ttu-id="a04e7-226">Odejmuje przesunięcie elementu od danego odwołania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-226">Subtracts an element offset from the given reference.</span></span></summary>
        <returns><span data-ttu-id="a04e7-227">Nowe odwołanie, które odzwierciedla odjęcie przesunięcia od wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="a04e7-227">A new reference that reflects the subtraction of offset from pointer.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Subtract&lt;T&gt; (ref T source, IntPtr elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Subtract&lt;T&gt;(!!T&amp; source, native int elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(``0@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract(Of T) (ByRef source As T, elementOffset As IntPtr) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % Subtract(T % source, IntPtr elementOffset);" />
      <MemberSignature Language="F#" Value="static member Subtract :  * nativeint -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.Subtract (source, elementOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="elementOffset" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="a04e7-228">Typ odwołania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-228">The type of reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a04e7-229">Odwołanie do odjęcia przesunięcia od.</span><span class="sxs-lookup"><span data-stu-id="a04e7-229">The reference to subtract the offset from.</span></span></param>
        <param name="elementOffset"><span data-ttu-id="a04e7-230">Przesunięcie do odejmowania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-230">The offset to subtract.</span></span></param>
        <summary><span data-ttu-id="a04e7-231">Odejmuje przesunięcie elementu od danego odwołania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-231">Subtracts an element offset from the given reference.</span></span></summary>
        <returns><span data-ttu-id="a04e7-232">Nowe odwołanie, które odzwierciedla odjęcie przesunięcia od wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="a04e7-232">A new reference that reflects the subtraction of offset from pointer.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractByteOffset&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T SubtractByteOffset&lt;T&gt; (ref T source, IntPtr byteOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T SubtractByteOffset&lt;T&gt;(!!T&amp; source, native int byteOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.SubtractByteOffset``1(``0@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractByteOffset(Of T) (ByRef source As T, byteOffset As IntPtr) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % SubtractByteOffset(T % source, IntPtr byteOffset);" />
      <MemberSignature Language="F#" Value="static member SubtractByteOffset :  * nativeint -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.SubtractByteOffset (source, byteOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="byteOffset" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="a04e7-233">Typ odwołania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-233">The type of reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="a04e7-234">Odwołanie do odjęcia przesunięcia od.</span><span class="sxs-lookup"><span data-stu-id="a04e7-234">The reference to subtract the offset from.</span></span></param>
        <param name="byteOffset"><span data-ttu-id="a04e7-235">Przesunięcie do odejmowania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-235">The offset to subtract.</span></span></param>
        <summary><span data-ttu-id="a04e7-236">Odejmuje przesunięcie bajtów od danego odwołania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-236">Subtracts a byte offset from the given reference.</span></span></summary>
        <returns><span data-ttu-id="a04e7-237">Nowe odwołanie, które odzwierciedla odjęcie przesunięcia bajtów od wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="a04e7-237">A new reference that reflects the subtraction of byte offset from pointer.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unbox&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ref T Unbox&lt;T&gt; (object box) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Unbox&lt;struct .ctor (class System.ValueType) T&gt;(object box) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Unbox``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Unbox(Of T As Structure) (box As Object) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static T % Unbox(System::Object ^ box);" />
      <MemberSignature Language="F#" Value="static member Unbox : obj -&gt;  (requires 'T : struct)" Usage="System.Runtime.CompilerServices.Unsafe.Unbox box" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="box" Type="System.Object" Index="0" FrameworkAlternate="dotnet-plat-ext-3.0;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="a04e7-238">Typ, który ma być nieopakowany.</span><span class="sxs-lookup"><span data-stu-id="a04e7-238">The type to be unboxed.</span></span></typeparam>
        <param name="box"><span data-ttu-id="a04e7-239">Wartość do Unbox.</span><span class="sxs-lookup"><span data-stu-id="a04e7-239">The value to unbox.</span></span></param>
        <summary><span data-ttu-id="a04e7-240">Zwraca wartość <see langword="mutable ref" /> do wartości opakowanej.</span><span class="sxs-lookup"><span data-stu-id="a04e7-240">Returns a <see langword="mutable ref" /> to a boxed value.</span></span></summary>
        <returns><span data-ttu-id="a04e7-241"><see langword="mutable ref" /> Do wartości<paramref name="box" />opakowanej.</span><span class="sxs-lookup"><span data-stu-id="a04e7-241">A <see langword="mutable ref" /> to the boxed value <paramref name="box" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="a04e7-242">Metoda jest po prostu otoką dla instrukcji IL [Unbox.](xref:System.Reflection.Emit.OpCodes.Unbox) `Unbox<T>`</span><span class="sxs-lookup"><span data-stu-id="a04e7-242">The `Unbox<T>` method is simply a wrapper for the IL [unbox](xref:System.Reflection.Emit.OpCodes.Unbox) instruction.</span></span> <span data-ttu-id="a04e7-243">Jest to przydatne w przypadku optymalizacji wydajności.</span><span class="sxs-lookup"><span data-stu-id="a04e7-243">It is useful as a performance optimization.</span></span> <span data-ttu-id="a04e7-244">Za każdym razem, gdy interfejs <xref:System.Object> API, który musi być wywoływany wielokrotnie przy użyciu różnych wartości typu wartości, można ponownie użyć tego samego obiektu Box zamiast nowego tworzonego.</span><span class="sxs-lookup"><span data-stu-id="a04e7-244">Whenever an API that takes an <xref:System.Object> needs to be called repeatedly with different values of a value type, the same box object can be reused rather than a new one created each time.</span></span>

<span data-ttu-id="a04e7-245">`Unbox<T>` Metoda ma ważne ograniczenie użycia, które nie jest wymuszane przez kompilatory języka i który jest odpowiedzialny za obiekt wywołujący.</span><span class="sxs-lookup"><span data-stu-id="a04e7-245">The `Unbox<T>` method has an important usage constraint that is not enforced by language compilers and that is the responsibility of the caller.</span></span> <span data-ttu-id="a04e7-246">Instrukcja Il `unbox` zwraca zarządzany wskaźnik zmienność.</span><span class="sxs-lookup"><span data-stu-id="a04e7-246">The IL `unbox` instruction returns a controlled-mutability managed pointer.</span></span> <span data-ttu-id="a04e7-247">Ponieważ kompilatory języka .NET i .NET nie mogą reprezentować tego `Unbox<T>` ograniczenia, metoda zwraca normalne `ref T`modyfikowalne.</span><span class="sxs-lookup"><span data-stu-id="a04e7-247">Because .NET and .NET language compilers cannot represent this constraint, the `Unbox<T>` method returns a normal mutable `ref T`.</span></span> <span data-ttu-id="a04e7-248">Jednak deweloperzy **nie mogą** zmodyfikować zwracanego odwołania, `T` chyba że są one określone jako modyfikowalny typ struktury.</span><span class="sxs-lookup"><span data-stu-id="a04e7-248">However developers **must not** mutate the returned reference unless they are certain that `T` is a mutable struct type.</span></span> <span data-ttu-id="a04e7-249">Na przykład, ponieważ liczbowe elementy pierwotne, takie <xref:System.Int32> jak nie są modyfikowalnymi typami struktur, następujący kod nie jest obsługiwany:</span><span class="sxs-lookup"><span data-stu-id="a04e7-249">For example, because the numeric primitives such as <xref:System.Int32> are not mutable struct types, the following code is not suppported:</span></span>

```csharp
Unsafe.Unbox<int>(obj) = 30;
```

<span data-ttu-id="a04e7-250">Z kolei Typ taki jak <xref:System.Drawing.Point?<displayProperty=nameWithType> jest niemodyfikowalną strukturą z metodami ustawiającymi właściwości publiczną, więc obsługiwany jest następujący kod:</span><span class="sxs-lookup"><span data-stu-id="a04e7-250">In contrast, a type such as <xref:System.Drawing.Point?<displayProperty=nameWithType> is a mutable struct with public property setters, so the following code is supported:</span></span>

```csharp
Unsafe.Unbox<System.Drawing.Point>(obj).X = 50;
```

<span data-ttu-id="a04e7-251">Aby uzyskać więcej informacji, zobacz sekcje III. 1.8.1.2.2 ("zarządzane muttabilitye wskaźniki") i III. 4.32 ("Unbox--Convert opakowany typ wartości do jego pierwotnej postaci" [) w ECMA-335: Common Language Infrastructure (CLI) partycje I do VI](https://www.ecma-international.org/publications/files/ECMA-ST/ECMA-335.pdf).</span><span class="sxs-lookup"><span data-stu-id="a04e7-251">For more information, see sections III.1.8.1.2.2 ("Controlled-muttability managed pointers") and III.4.32 ("unbox -- convert boxed value type to its raw form") in [ECMA-335: Common Language Infrastructure (CLI) Partitions I to VI](https://www.ecma-international.org/publications/files/ECMA-ST/ECMA-335.pdf).</span></span>

         ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="a04e7-252"><paramref name="box" />is <see langword="null" /> i<typeparamref name="T" /> jest typem wartości, który nie dopuszcza wartości null.</span><span class="sxs-lookup"><span data-stu-id="a04e7-252"><paramref name="box" /> is <see langword="null" />, and <typeparamref name="T" /> is a non-nullable value type.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="a04e7-253"><paramref name="box" />nie jest opakowanym typem wartościowym.</span><span class="sxs-lookup"><span data-stu-id="a04e7-253"><paramref name="box" /> is not a boxed value type.</span></span>
         
<span data-ttu-id="a04e7-254">—lub—</span><span class="sxs-lookup"><span data-stu-id="a04e7-254">-or-</span></span>

<span data-ttu-id="a04e7-255"><paramref name="box" />nie jest opakowany <typeparamref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="a04e7-255"><paramref name="box" /> is not a boxed <typeparamref name="T" />.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="a04e7-256"><typeparamref name="T" />nie można znaleźć.</span><span class="sxs-lookup"><span data-stu-id="a04e7-256"><typeparamref name="T" /> cannot be found.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Write&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Write&lt;T&gt; (void* destination, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write&lt;T&gt;(void* destination, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Write``1(System.Void*,``0)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Write(void* destination, T value);" />
      <MemberSignature Language="F#" Value="static member Write : nativeptr&lt;unit&gt; * 'T -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.Write (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Void*" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="a04e7-257">Typ wartości do zapisania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-257">The type of value to write.</span></span></typeparam>
        <param name="destination"><span data-ttu-id="a04e7-258">Lokalizacja, w której ma zostać zapisany.</span><span class="sxs-lookup"><span data-stu-id="a04e7-258">The location to write to.</span></span></param>
        <param name="value"><span data-ttu-id="a04e7-259">Wartość do zapisu.</span><span class="sxs-lookup"><span data-stu-id="a04e7-259">The value to write.</span></span></param>
        <summary><span data-ttu-id="a04e7-260">Zapisuje wartość typu <typeparamref name="T" /> w danej lokalizacji.</span><span class="sxs-lookup"><span data-stu-id="a04e7-260">Writes a value of type <typeparamref name="T" /> to the given location.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteUnaligned&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void WriteUnaligned&lt;T&gt; (ref byte destination, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteUnaligned&lt;T&gt;(unsigned int8&amp; destination, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.WriteUnaligned``1(System.Byte@,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteUnaligned(Of T) (ByRef destination As Byte, value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void WriteUnaligned(System::Byte % destination, T value);" />
      <MemberSignature Language="F#" Value="static member WriteUnaligned :  * 'T -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.WriteUnaligned (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Byte" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="value" Type="T" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="a04e7-261">Typ wartości do zapisania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-261">The type of value to write.</span></span></typeparam>
        <param name="destination"><span data-ttu-id="a04e7-262">Lokalizacja, w której ma zostać zapisany.</span><span class="sxs-lookup"><span data-stu-id="a04e7-262">The location to write to.</span></span></param>
        <param name="value"><span data-ttu-id="a04e7-263">Wartość do zapisu.</span><span class="sxs-lookup"><span data-stu-id="a04e7-263">The value to write.</span></span></param>
        <summary><span data-ttu-id="a04e7-264">Zapisuje wartość typu <typeparamref name="T" /> w danej lokalizacji bez zakładania wyrównania adresów zależnych od architektury.</span><span class="sxs-lookup"><span data-stu-id="a04e7-264">Writes a value of type <typeparamref name="T" /> to the given location without assuming architecture dependent alignment of the addresses.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteUnaligned&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void WriteUnaligned&lt;T&gt; (void* destination, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteUnaligned&lt;T&gt;(void* destination, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.WriteUnaligned``1(System.Void*,``0)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void WriteUnaligned(void* destination, T value);" />
      <MemberSignature Language="F#" Value="static member WriteUnaligned : nativeptr&lt;unit&gt; * 'T -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.WriteUnaligned (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Void*" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
        <Parameter Name="value" Type="T" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="a04e7-265">Typ wartości do zapisania.</span><span class="sxs-lookup"><span data-stu-id="a04e7-265">The type of value to write.</span></span></typeparam>
        <param name="destination"><span data-ttu-id="a04e7-266">Lokalizacja, w której ma zostać zapisany.</span><span class="sxs-lookup"><span data-stu-id="a04e7-266">The location to write to.</span></span></param>
        <param name="value"><span data-ttu-id="a04e7-267">Wartość do zapisu.</span><span class="sxs-lookup"><span data-stu-id="a04e7-267">The value to write.</span></span></param>
        <summary><span data-ttu-id="a04e7-268">Zapisuje wartość typu <typeparamref name="T" /> w danej lokalizacji bez zakładania wyrównania adresów zależnych od architektury.</span><span class="sxs-lookup"><span data-stu-id="a04e7-268">Writes a value of type <typeparamref name="T" /> to the given location without assuming architecture dependent alignment of the addresses.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>