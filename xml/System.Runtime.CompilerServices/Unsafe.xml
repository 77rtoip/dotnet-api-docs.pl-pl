<Type Name="Unsafe" FullName="System.Runtime.CompilerServices.Unsafe">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f2e43170bd1e6c1ad126e8a14ebe42fcfb764b41" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55311740" /></Metadata><TypeSignature Language="C#" Value="public static class Unsafe" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Unsafe extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.Unsafe" />
  <TypeSignature Language="VB.NET" Value="Public Class Unsafe" />
  <TypeSignature Language="C++ CLI" Value="public ref class Unsafe abstract sealed" />
  <TypeSignature Language="F#" Value="type Unsafe = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.1</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="e057f-101">Zawiera ogólne, niskiego poziomu funkcji do manipulowania wskaźników.</span><span class="sxs-lookup"><span data-stu-id="e057f-101">Contains generic, low-level functionality for manipulating pointers.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Add&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void* Add&lt;T&gt; (void* source, int elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void* Add&lt;T&gt;(void* source, int32 elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Add``1(System.Void*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void* Add(void* source, int elementOffset);" />
      <MemberSignature Language="F#" Value="static member Add : nativeptr&lt;unit&gt; * int -&gt; nativeptr&lt;unit&gt;" Usage="System.Runtime.CompilerServices.Unsafe.Add (source, elementOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void*</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Void*" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
        <Parameter Name="elementOffset" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="source">To be added.</param>
        <param name="elementOffset">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Add&lt;T&gt; (ref T source, int elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Add&lt;T&gt;(!!T&amp; source, int32 elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Add``1(``0@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add(Of T) (ByRef source As T, elementOffset As Integer) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % Add(T % source, int elementOffset);" />
      <MemberSignature Language="F#" Value="static member Add :  * int -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.Add (source, elementOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="elementOffset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e057f-102">Typ odwołania.</span><span class="sxs-lookup"><span data-stu-id="e057f-102">The type of reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="e057f-103">Odwołanie do przesunięcie do dodania.</span><span class="sxs-lookup"><span data-stu-id="e057f-103">The reference to add the offset to.</span></span></param>
        <param name="elementOffset"><span data-ttu-id="e057f-104">Przesunięcie do dodania.</span><span class="sxs-lookup"><span data-stu-id="e057f-104">The offset to add.</span></span></param>
        <summary><span data-ttu-id="e057f-105">Dodaje wartość przesunięcia elementu do danego odwołania.</span><span class="sxs-lookup"><span data-stu-id="e057f-105">Adds an element offset to the given reference.</span></span></summary>
        <returns><span data-ttu-id="e057f-106">Nowe odwołanie, które odzwierciedla dodanie przesunięcia wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="e057f-106">A new reference that reflects the addition of offset to pointer.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Add&lt;T&gt; (ref T source, IntPtr elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Add&lt;T&gt;(!!T&amp; source, native int elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Add``1(``0@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add(Of T) (ByRef source As T, elementOffset As IntPtr) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % Add(T % source, IntPtr elementOffset);" />
      <MemberSignature Language="F#" Value="static member Add :  * nativeint -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.Add (source, elementOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="elementOffset" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e057f-107">Typ odwołania.</span><span class="sxs-lookup"><span data-stu-id="e057f-107">The type of reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="e057f-108">Odwołanie do przesunięcie do dodania.</span><span class="sxs-lookup"><span data-stu-id="e057f-108">The reference to add the offset to.</span></span></param>
        <param name="elementOffset"><span data-ttu-id="e057f-109">Przesunięcie do dodania.</span><span class="sxs-lookup"><span data-stu-id="e057f-109">The offset to add.</span></span></param>
        <summary><span data-ttu-id="e057f-110">Dodaje wartość przesunięcia elementu do danego odwołania.</span><span class="sxs-lookup"><span data-stu-id="e057f-110">Adds an element offset to the given reference.</span></span></summary>
        <returns><span data-ttu-id="e057f-111">Nowe odwołanie, które odzwierciedla dodanie przesunięcia wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="e057f-111">A new reference that reflects the addition of offset to pointer.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddByteOffset&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T AddByteOffset&lt;T&gt; (ref T source, IntPtr byteOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T AddByteOffset&lt;T&gt;(!!T&amp; source, native int byteOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.AddByteOffset``1(``0@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddByteOffset(Of T) (ByRef source As T, byteOffset As IntPtr) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % AddByteOffset(T % source, IntPtr byteOffset);" />
      <MemberSignature Language="F#" Value="static member AddByteOffset :  * nativeint -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.AddByteOffset (source, byteOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="byteOffset" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e057f-112">Typ odwołania.</span><span class="sxs-lookup"><span data-stu-id="e057f-112">The type of reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="e057f-113">Odwołanie do przesunięcie do dodania.</span><span class="sxs-lookup"><span data-stu-id="e057f-113">The reference to add the offset to.</span></span></param>
        <param name="byteOffset"><span data-ttu-id="e057f-114">Przesunięcie do dodania.</span><span class="sxs-lookup"><span data-stu-id="e057f-114">The offset to add.</span></span></param>
        <summary><span data-ttu-id="e057f-115">Dodaje przesunięcie bajtu do danego odwołania.</span><span class="sxs-lookup"><span data-stu-id="e057f-115">Adds a byte offset to the given reference.</span></span></summary>
        <returns><span data-ttu-id="e057f-116">Nowe odwołanie odzwierciedla dodanie bajt przesunięcia do wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="e057f-116">A new reference that reflects the addition of byte offset to pointer.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreSame&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool AreSame&lt;T&gt; (ref T left, ref T right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool AreSame&lt;T&gt;(!!T&amp; left, !!T&amp; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.AreSame``1(``0@,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AreSame(Of T) (ByRef left As T, ByRef right As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool AreSame(T % left, T % right);" />
      <MemberSignature Language="F#" Value="static member AreSame :  *  -&gt; bool" Usage="System.Runtime.CompilerServices.Unsafe.AreSame (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="T" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-1.1" />
        <Parameter Name="right" Type="T" RefType="ref" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-1.1" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e057f-117">Typ odwołania.</span><span class="sxs-lookup"><span data-stu-id="e057f-117">The type of reference.</span></span></typeparam>
        <param name="left"><span data-ttu-id="e057f-118">Pierwszym odwołaniu do porównania.</span><span class="sxs-lookup"><span data-stu-id="e057f-118">The first reference to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e057f-119">Drugiego odwołania do porównania.</span><span class="sxs-lookup"><span data-stu-id="e057f-119">The second reference to compare.</span></span></param>
        <summary><span data-ttu-id="e057f-120">Określa, czy odwołania do określonego punktu w tej samej lokalizacji.</span><span class="sxs-lookup"><span data-stu-id="e057f-120">Determines whether the specified references point to the same location.</span></span></summary>
        <returns><span data-ttu-id="e057f-121"><see langword="true" /> Jeśli <paramref name="left" /> i <paramref name="right" /> punktu w tej samej lokalizacji; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="e057f-121"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> point to the same location; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="As&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T As&lt;T&gt; (object o) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T As&lt;class T&gt;(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.As``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function As(Of T As Class) (o As Object) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T As(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="static member As : obj -&gt; 'T (requires 'T : null)" Usage="System.Runtime.CompilerServices.Unsafe.As o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e057f-122">Typ, który będzie można rzutować obiektu.</span><span class="sxs-lookup"><span data-stu-id="e057f-122">The type which the object will be cast to.</span></span></typeparam>
        <param name="o"><span data-ttu-id="e057f-123">Obiekt do rzutowania.</span><span class="sxs-lookup"><span data-stu-id="e057f-123">The object to cast.</span></span></param>
        <summary><span data-ttu-id="e057f-124">Rzutuje danego obiektu określonego typu.</span><span class="sxs-lookup"><span data-stu-id="e057f-124">Casts the given object to the specified type.</span></span></summary>
        <returns><span data-ttu-id="e057f-125">Oryginalny obiekt, rzutować do danego typu.</span><span class="sxs-lookup"><span data-stu-id="e057f-125">The original object, casted to the given type.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="As&lt;TFrom,TTo&gt;">
      <MemberSignature Language="C#" Value="public static TTo As&lt;TFrom,TTo&gt; (ref TFrom source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TTo As&lt;TFrom, TTo&gt;(!!TFrom&amp; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.As``2(``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function As(Of TFrom, TTo) (ByRef source As TFrom) As TTo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFrom, typename TTo&gt;&#xA; static TTo % As(TFrom % source);" />
      <MemberSignature Language="F#" Value="static member As :  -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.As source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TTo@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFrom" />
        <TypeParameter Name="TTo" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="TFrom&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="TFrom"><span data-ttu-id="e057f-126">Typ odwołania do reinterpret.</span><span class="sxs-lookup"><span data-stu-id="e057f-126">The type of reference to reinterpret.</span></span></typeparam>
        <typeparam name="TTo"><span data-ttu-id="e057f-127">Żądany typ odwołania.</span><span class="sxs-lookup"><span data-stu-id="e057f-127">The desired type of the reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="e057f-128">Odwołanie do reinterpret.</span><span class="sxs-lookup"><span data-stu-id="e057f-128">The reference to reinterpret.</span></span></param>
        <summary><span data-ttu-id="e057f-129">Reinterpretuje obiekt danego odwołania jako odwołanie do wartości typu <typeparamref name="TTo" />.</span><span class="sxs-lookup"><span data-stu-id="e057f-129">Reinterprets the given reference as a reference to a value of type <typeparamref name="TTo" />.</span></span></summary>
        <returns><span data-ttu-id="e057f-130">Odwołanie do wartości typu <typeparamref name="TTo" />.</span><span class="sxs-lookup"><span data-stu-id="e057f-130">A reference to a value of type <typeparamref name="TTo" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsPointer&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void* AsPointer&lt;T&gt; (ref T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void* AsPointer&lt;T&gt;(!!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.AsPointer``1(``0@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void* AsPointer(T % value);" />
      <MemberSignature Language="F#" Value="static member AsPointer :  -&gt; nativeptr&lt;unit&gt;" Usage="System.Runtime.CompilerServices.Unsafe.AsPointer value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void*</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e057f-131">Typ obiektu.</span><span class="sxs-lookup"><span data-stu-id="e057f-131">The type of object.</span></span></typeparam>
        <param name="value"><span data-ttu-id="e057f-132">Obiekt, którego wskaźnik jest uzyskiwany.</span><span class="sxs-lookup"><span data-stu-id="e057f-132">The object whose pointer is obtained.</span></span></param>
        <summary><span data-ttu-id="e057f-133">Zwraca wskaźnik do parametru o podanej przez odwołanie.</span><span class="sxs-lookup"><span data-stu-id="e057f-133">Returns a pointer to the given by-ref parameter.</span></span></summary>
        <returns><span data-ttu-id="e057f-134">Wskaźnik do podanej wartości.</span><span class="sxs-lookup"><span data-stu-id="e057f-134">A pointer to the given value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsRef&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T AsRef&lt;T&gt; (void* source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T AsRef&lt;T&gt;(void* source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.AsRef``1(System.Void*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % AsRef(void* source);" />
      <MemberSignature Language="F#" Value="static member AsRef : nativeptr&lt;unit&gt; -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.AsRef source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Void*" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e057f-135">Typ lokalizacji interpretowane.</span><span class="sxs-lookup"><span data-stu-id="e057f-135">The type of the interpreted location.</span></span></typeparam>
        <param name="source"><span data-ttu-id="e057f-136">Lokalizacja wartość do odwołania.</span><span class="sxs-lookup"><span data-stu-id="e057f-136">The location of the value to reference.</span></span></param>
        <summary><span data-ttu-id="e057f-137">Reinterpretuje obiekt danej lokalizacji jako odwołanie do wartości typu <typeparamref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="e057f-137">Reinterprets the given location as a reference to a value of type <typeparamref name="T" />.</span></span></summary>
        <returns><span data-ttu-id="e057f-138">Odwołanie do wartości typu <typeparamref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="e057f-138">A reference to a value of type <typeparamref name="T" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsRef&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ref T AsRef&lt;T&gt; (ref T source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T AsRef&lt;T&gt;([in]!!T&amp; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.AsRef``1(``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsRef(Of T) (ByRef source As T) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % AsRef(T % source);" />
      <MemberSignature Language="F#" Value="static member AsRef :  -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.AsRef source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="source">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ByteOffset&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static IntPtr ByteOffset&lt;T&gt; (ref T origin, ref T target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int ByteOffset&lt;T&gt;(!!T&amp; origin, !!T&amp; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.ByteOffset``1(``0@,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ByteOffset(Of T) (ByRef origin As T, ByRef target As T) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static IntPtr ByteOffset(T % origin, T % target);" />
      <MemberSignature Language="F#" Value="static member ByteOffset :  *  -&gt; nativeint" Usage="System.Runtime.CompilerServices.Unsafe.ByteOffset (origin, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="origin" Type="T" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
        <Parameter Name="target" Type="T" RefType="ref" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e057f-139">Typ odwołania.</span><span class="sxs-lookup"><span data-stu-id="e057f-139">The type of reference.</span></span></typeparam>
        <param name="origin"><span data-ttu-id="e057f-140">Odwołanie do źródła.</span><span class="sxs-lookup"><span data-stu-id="e057f-140">The reference to origin.</span></span></param>
        <param name="target"><span data-ttu-id="e057f-141">Odwołanie do obiektu docelowego.</span><span class="sxs-lookup"><span data-stu-id="e057f-141">The reference to target.</span></span></param>
        <summary><span data-ttu-id="e057f-142">Określa przesunięcie bajtu od źródła do docelowego z danego odwołania.</span><span class="sxs-lookup"><span data-stu-id="e057f-142">Determines the byte offset from origin to target from the given references.</span></span></summary>
        <returns><span data-ttu-id="e057f-143">Przesunięcie bajtu od źródła pod kątem tj <paramref name="target" />  -  <paramref name="origin" />.</span><span class="sxs-lookup"><span data-stu-id="e057f-143">Byte offset from origin to target i.e. <paramref name="target" /> - <paramref name="origin" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Copy&lt;T&gt; (void* destination, ref T source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy&lt;T&gt;(void* destination, !!T&amp; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Copy``1(System.Void*,``0@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Copy(void* destination, T % source);" />
      <MemberSignature Language="F#" Value="static member Copy : nativeptr&lt;unit&gt; *  -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.Copy (destination, source)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Void*" />
        <Parameter Name="source" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e057f-144">Typ wartości do skopiowania.</span><span class="sxs-lookup"><span data-stu-id="e057f-144">The type of value to copy.</span></span></typeparam>
        <param name="destination"><span data-ttu-id="e057f-145">Można skopiować do lokalizacji.</span><span class="sxs-lookup"><span data-stu-id="e057f-145">The location to copy to.</span></span></param>
        <param name="source"><span data-ttu-id="e057f-146">Odwołanie do wartości do skopiowania.</span><span class="sxs-lookup"><span data-stu-id="e057f-146">A reference to the value to copy.</span></span></param>
        <summary><span data-ttu-id="e057f-147">Kopiuje wartości typu <typeparamref name="T" /> do danej lokalizacji.</span><span class="sxs-lookup"><span data-stu-id="e057f-147">Copies a value of type <typeparamref name="T" /> to the given location.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Copy&lt;T&gt; (ref T destination, void* source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy&lt;T&gt;(!!T&amp; destination, void* source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Copy``1(``0@,System.Void*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Copy(T % destination, void* source);" />
      <MemberSignature Language="F#" Value="static member Copy :  * nativeptr&lt;unit&gt; -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.Copy (destination, source)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="T" RefType="ref" />
        <Parameter Name="source" Type="System.Void*" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e057f-148">Typ wartości do skopiowania.</span><span class="sxs-lookup"><span data-stu-id="e057f-148">The type of value to copy.</span></span></typeparam>
        <param name="destination"><span data-ttu-id="e057f-149">Można skopiować do lokalizacji.</span><span class="sxs-lookup"><span data-stu-id="e057f-149">The location to copy to.</span></span></param>
        <param name="source"><span data-ttu-id="e057f-150">Wskaźnik do wartości do skopiowania.</span><span class="sxs-lookup"><span data-stu-id="e057f-150">A pointer to the value to copy.</span></span></param>
        <summary><span data-ttu-id="e057f-151">Kopiuje wartości typu <typeparamref name="T" /> do danej lokalizacji.</span><span class="sxs-lookup"><span data-stu-id="e057f-151">Copies a value of type <typeparamref name="T" /> to the given location.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyBlock">
      <MemberSignature Language="C#" Value="public static void CopyBlock (ref byte destination, ref byte source, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyBlock(unsigned int8&amp; destination, unsigned int8&amp; source, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.CopyBlock(System.Byte@,System.Byte@,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CopyBlock (ByRef destination As Byte, ByRef source As Byte, byteCount As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyBlock(System::Byte % destination, System::Byte % source, System::UInt32 byteCount);" />
      <MemberSignature Language="F#" Value="static member CopyBlock :  *  * uint32 -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.CopyBlock (destination, source, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Byte" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
        <Parameter Name="source" Type="System.Byte" RefType="ref" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
        <Parameter Name="byteCount" Type="System.UInt32" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="e057f-152">Docelowy adres, który można skopiować do.</span><span class="sxs-lookup"><span data-stu-id="e057f-152">The destination address to copy to.</span></span></param>
        <param name="source"><span data-ttu-id="e057f-153">Adres źródłowy do skopiowania.</span><span class="sxs-lookup"><span data-stu-id="e057f-153">The source address to copy from.</span></span></param>
        <param name="byteCount"><span data-ttu-id="e057f-154">Liczba bajtów do skopiowania.</span><span class="sxs-lookup"><span data-stu-id="e057f-154">The number of bytes to copy.</span></span></param>
        <summary><span data-ttu-id="e057f-155">Bajty kopie z adresu źródłowego do docelowego adresu.</span><span class="sxs-lookup"><span data-stu-id="e057f-155">Copies bytes from the source address to the destination address.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyBlock">
      <MemberSignature Language="C#" Value="public static void CopyBlock (void* destination, void* source, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyBlock(void* destination, void* source, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.CopyBlock(System.Void*,System.Void*,System.UInt32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyBlock(void* destination, void* source, System::UInt32 byteCount);" />
      <MemberSignature Language="F#" Value="static member CopyBlock : nativeptr&lt;unit&gt; * nativeptr&lt;unit&gt; * uint32 -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.CopyBlock (destination, source, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Void*" />
        <Parameter Name="source" Type="System.Void*" />
        <Parameter Name="byteCount" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="e057f-156">Docelowy adres, który można skopiować do.</span><span class="sxs-lookup"><span data-stu-id="e057f-156">The destination address to copy to.</span></span></param>
        <param name="source"><span data-ttu-id="e057f-157">Adres źródłowy do skopiowania.</span><span class="sxs-lookup"><span data-stu-id="e057f-157">The source address to copy from.</span></span></param>
        <param name="byteCount"><span data-ttu-id="e057f-158">Liczba bajtów do skopiowania.</span><span class="sxs-lookup"><span data-stu-id="e057f-158">The number of bytes to copy.</span></span></param>
        <summary><span data-ttu-id="e057f-159">Bajty kopie z adresu źródłowego do docelowego adresu.</span><span class="sxs-lookup"><span data-stu-id="e057f-159">Copies bytes from the source address to the destination address.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyBlockUnaligned">
      <MemberSignature Language="C#" Value="public static void CopyBlockUnaligned (ref byte destination, ref byte source, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyBlockUnaligned(unsigned int8&amp; destination, unsigned int8&amp; source, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(System.Byte@,System.Byte@,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CopyBlockUnaligned (ByRef destination As Byte, ByRef source As Byte, byteCount As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyBlockUnaligned(System::Byte % destination, System::Byte % source, System::UInt32 byteCount);" />
      <MemberSignature Language="F#" Value="static member CopyBlockUnaligned :  *  * uint32 -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned (destination, source, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Byte" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
        <Parameter Name="source" Type="System.Byte" RefType="ref" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
        <Parameter Name="byteCount" Type="System.UInt32" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="e057f-160">Docelowy adres, który można skopiować do.</span><span class="sxs-lookup"><span data-stu-id="e057f-160">The destination address to copy to.</span></span></param>
        <param name="source"><span data-ttu-id="e057f-161">Adres źródłowy do skopiowania.</span><span class="sxs-lookup"><span data-stu-id="e057f-161">The source address to copy from.</span></span></param>
        <param name="byteCount"><span data-ttu-id="e057f-162">Liczba bajtów do skopiowania.</span><span class="sxs-lookup"><span data-stu-id="e057f-162">The number of bytes to copy.</span></span></param>
        <summary><span data-ttu-id="e057f-163">Bajty kopie z adresu źródłowego adres docelowy bez zakładając, że architektura zależne wyrównanie adresów.</span><span class="sxs-lookup"><span data-stu-id="e057f-163">Copies bytes from the source address to the destination address without assuming architecture dependent alignment of the addresses.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyBlockUnaligned">
      <MemberSignature Language="C#" Value="public static void CopyBlockUnaligned (void* destination, void* source, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyBlockUnaligned(void* destination, void* source, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(System.Void*,System.Void*,System.UInt32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyBlockUnaligned(void* destination, void* source, System::UInt32 byteCount);" />
      <MemberSignature Language="F#" Value="static member CopyBlockUnaligned : nativeptr&lt;unit&gt; * nativeptr&lt;unit&gt; * uint32 -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned (destination, source, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Void*" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
        <Parameter Name="source" Type="System.Void*" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
        <Parameter Name="byteCount" Type="System.UInt32" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="e057f-164">Docelowy adres, który można skopiować do.</span><span class="sxs-lookup"><span data-stu-id="e057f-164">The destination address to copy to.</span></span></param>
        <param name="source"><span data-ttu-id="e057f-165">Adres źródłowy do skopiowania.</span><span class="sxs-lookup"><span data-stu-id="e057f-165">The source address to copy from.</span></span></param>
        <param name="byteCount"><span data-ttu-id="e057f-166">Liczba bajtów do skopiowania.</span><span class="sxs-lookup"><span data-stu-id="e057f-166">The number of bytes to copy.</span></span></param>
        <summary><span data-ttu-id="e057f-167">Bajty kopie z adresu źródłowego adres docelowy bez zakładając, że architektura zależne wyrównanie adresów.</span><span class="sxs-lookup"><span data-stu-id="e057f-167">Copies bytes from the source address to the destination address without assuming architecture dependent alignment of the addresses.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitBlock">
      <MemberSignature Language="C#" Value="public static void InitBlock (ref byte startAddress, byte value, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InitBlock(unsigned int8&amp; startAddress, unsigned int8 value, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.InitBlock(System.Byte@,System.Byte,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub InitBlock (ByRef startAddress As Byte, value As Byte, byteCount As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void InitBlock(System::Byte % startAddress, System::Byte value, System::UInt32 byteCount);" />
      <MemberSignature Language="F#" Value="static member InitBlock :  * byte * uint32 -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.InitBlock (startAddress, value, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startAddress" Type="System.Byte" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
        <Parameter Name="value" Type="System.Byte" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
        <Parameter Name="byteCount" Type="System.UInt32" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
      </Parameters>
      <Docs>
        <param name="startAddress"><span data-ttu-id="e057f-168">Adres początku blok pamięci, aby zainicjować.</span><span class="sxs-lookup"><span data-stu-id="e057f-168">The address of the start of the memory block to initialize.</span></span></param>
        <param name="value"><span data-ttu-id="e057f-169">Wartość do bloku, aby zainicjować.</span><span class="sxs-lookup"><span data-stu-id="e057f-169">The value to initialize the block to.</span></span></param>
        <param name="byteCount"><span data-ttu-id="e057f-170">Liczba bajtów do zainicjowania.</span><span class="sxs-lookup"><span data-stu-id="e057f-170">The number of bytes to initialize.</span></span></param>
        <summary><span data-ttu-id="e057f-171">Inicjuje blok pamięci w podanej lokalizacji z podanej wartości początkowej.</span><span class="sxs-lookup"><span data-stu-id="e057f-171">Initializes a block of memory at the given location with a given initial value.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitBlock">
      <MemberSignature Language="C#" Value="public static void InitBlock (void* startAddress, byte value, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InitBlock(void* startAddress, unsigned int8 value, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.InitBlock(System.Void*,System.Byte,System.UInt32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void InitBlock(void* startAddress, System::Byte value, System::UInt32 byteCount);" />
      <MemberSignature Language="F#" Value="static member InitBlock : nativeptr&lt;unit&gt; * byte * uint32 -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.InitBlock (startAddress, value, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startAddress" Type="System.Void*" />
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="byteCount" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="startAddress"><span data-ttu-id="e057f-172">Adres początku blok pamięci, aby zainicjować.</span><span class="sxs-lookup"><span data-stu-id="e057f-172">The address of the start of the memory block to initialize.</span></span></param>
        <param name="value"><span data-ttu-id="e057f-173">Wartość do bloku, aby zainicjować.</span><span class="sxs-lookup"><span data-stu-id="e057f-173">The value to initialize the block to.</span></span></param>
        <param name="byteCount"><span data-ttu-id="e057f-174">Liczba bajtów do zainicjowania.</span><span class="sxs-lookup"><span data-stu-id="e057f-174">The number of bytes to initialize.</span></span></param>
        <summary><span data-ttu-id="e057f-175">Inicjuje blok pamięci w podanej lokalizacji z podanej wartości początkowej.</span><span class="sxs-lookup"><span data-stu-id="e057f-175">Initializes a block of memory at the given location with a given initial value.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitBlockUnaligned">
      <MemberSignature Language="C#" Value="public static void InitBlockUnaligned (ref byte startAddress, byte value, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InitBlockUnaligned(unsigned int8&amp; startAddress, unsigned int8 value, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(System.Byte@,System.Byte,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub InitBlockUnaligned (ByRef startAddress As Byte, value As Byte, byteCount As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void InitBlockUnaligned(System::Byte % startAddress, System::Byte value, System::UInt32 byteCount);" />
      <MemberSignature Language="F#" Value="static member InitBlockUnaligned :  * byte * uint32 -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned (startAddress, value, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startAddress" Type="System.Byte" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
        <Parameter Name="value" Type="System.Byte" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
        <Parameter Name="byteCount" Type="System.UInt32" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
      </Parameters>
      <Docs>
        <param name="startAddress"><span data-ttu-id="e057f-176">Adres początku blok pamięci, aby zainicjować.</span><span class="sxs-lookup"><span data-stu-id="e057f-176">The address of the start of the memory block to initialize.</span></span></param>
        <param name="value"><span data-ttu-id="e057f-177">Wartość do bloku, aby zainicjować.</span><span class="sxs-lookup"><span data-stu-id="e057f-177">The value to initialize the block to.</span></span></param>
        <param name="byteCount"><span data-ttu-id="e057f-178">Liczba bajtów do zainicjowania.</span><span class="sxs-lookup"><span data-stu-id="e057f-178">The number of bytes to initialize.</span></span></param>
        <summary><span data-ttu-id="e057f-179">Inicjuje blok pamięci w podanej lokalizacji z podanej wartości początkowej, bez przyjmuje wyrównanie zależne architektury adresu.</span><span class="sxs-lookup"><span data-stu-id="e057f-179">Initializes a block of memory at the given location with a given initial value without assuming architecture dependent alignment of the address.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitBlockUnaligned">
      <MemberSignature Language="C#" Value="public static void InitBlockUnaligned (void* startAddress, byte value, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InitBlockUnaligned(void* startAddress, unsigned int8 value, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(System.Void*,System.Byte,System.UInt32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void InitBlockUnaligned(void* startAddress, System::Byte value, System::UInt32 byteCount);" />
      <MemberSignature Language="F#" Value="static member InitBlockUnaligned : nativeptr&lt;unit&gt; * byte * uint32 -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned (startAddress, value, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startAddress" Type="System.Void*" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
        <Parameter Name="value" Type="System.Byte" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
        <Parameter Name="byteCount" Type="System.UInt32" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
      </Parameters>
      <Docs>
        <param name="startAddress"><span data-ttu-id="e057f-180">Adres początku blok pamięci, aby zainicjować.</span><span class="sxs-lookup"><span data-stu-id="e057f-180">The address of the start of the memory block to initialize.</span></span></param>
        <param name="value"><span data-ttu-id="e057f-181">Wartość do bloku, aby zainicjować.</span><span class="sxs-lookup"><span data-stu-id="e057f-181">The value to initialize the block to.</span></span></param>
        <param name="byteCount"><span data-ttu-id="e057f-182">Liczba bajtów do zainicjowania.</span><span class="sxs-lookup"><span data-stu-id="e057f-182">The number of bytes to initialize.</span></span></param>
        <summary><span data-ttu-id="e057f-183">Inicjuje blok pamięci w podanej lokalizacji z podanej wartości początkowej, bez przyjmuje wyrównanie zależne architektury adresu.</span><span class="sxs-lookup"><span data-stu-id="e057f-183">Initializes a block of memory at the given location with a given initial value without assuming architecture dependent alignment of the address.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAddressGreaterThan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool IsAddressGreaterThan&lt;T&gt; (ref T left, ref T right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsAddressGreaterThan&lt;T&gt;(!!T&amp; left, !!T&amp; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.IsAddressGreaterThan``1(``0@,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsAddressGreaterThan(Of T) (ByRef left As T, ByRef right As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool IsAddressGreaterThan(T % left, T % right);" />
      <MemberSignature Language="F#" Value="static member IsAddressGreaterThan :  *  -&gt; bool" Usage="System.Runtime.CompilerServices.Unsafe.IsAddressGreaterThan (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="T" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
        <Parameter Name="right" Type="T" RefType="ref" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAddressLessThan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool IsAddressLessThan&lt;T&gt; (ref T left, ref T right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsAddressLessThan&lt;T&gt;(!!T&amp; left, !!T&amp; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.IsAddressLessThan``1(``0@,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsAddressLessThan(Of T) (ByRef left As T, ByRef right As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool IsAddressLessThan(T % left, T % right);" />
      <MemberSignature Language="F#" Value="static member IsAddressLessThan :  *  -&gt; bool" Usage="System.Runtime.CompilerServices.Unsafe.IsAddressLessThan (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="T" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
        <Parameter Name="right" Type="T" RefType="ref" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Read&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Read&lt;T&gt; (void* source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Read&lt;T&gt;(void* source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Read``1(System.Void*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T Read(void* source);" />
      <MemberSignature Language="F#" Value="static member Read : nativeptr&lt;unit&gt; -&gt; 'T" Usage="System.Runtime.CompilerServices.Unsafe.Read source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Void*" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e057f-184">Typ do odczytu.</span><span class="sxs-lookup"><span data-stu-id="e057f-184">The type to read.</span></span></typeparam>
        <param name="source"><span data-ttu-id="e057f-185">Lokalizacja do odczytu.</span><span class="sxs-lookup"><span data-stu-id="e057f-185">The location to read from.</span></span></param>
        <summary><span data-ttu-id="e057f-186">Odczytuje wartość typu <typeparamref name="T" /> z danej lokalizacji.</span><span class="sxs-lookup"><span data-stu-id="e057f-186">Reads a value of type <typeparamref name="T" /> from the given location.</span></span></summary>
        <returns><span data-ttu-id="e057f-187">Obiekt typu <typeparamref name="T" /> odczytu z danej lokalizacji.</span><span class="sxs-lookup"><span data-stu-id="e057f-187">An object of type <typeparamref name="T" /> read from the given location.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadUnaligned&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T ReadUnaligned&lt;T&gt; (ref byte source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T ReadUnaligned&lt;T&gt;(unsigned int8&amp; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.ReadUnaligned``1(System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadUnaligned(Of T) (ByRef source As Byte) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T ReadUnaligned(System::Byte % source);" />
      <MemberSignature Language="F#" Value="static member ReadUnaligned :  -&gt; 'T" Usage="System.Runtime.CompilerServices.Unsafe.ReadUnaligned source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Byte" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e057f-188">Typ do odczytu.</span><span class="sxs-lookup"><span data-stu-id="e057f-188">The type to read.</span></span></typeparam>
        <param name="source"><span data-ttu-id="e057f-189">Lokalizacja do odczytu.</span><span class="sxs-lookup"><span data-stu-id="e057f-189">The location to read from.</span></span></param>
        <summary><span data-ttu-id="e057f-190">Odczytuje wartość typu <typeparamref name="T" /> z danej lokalizacji bez zakładając, że architektura zależne wyrównanie adresów.</span><span class="sxs-lookup"><span data-stu-id="e057f-190">Reads a value of type <typeparamref name="T" /> from the given location without assuming architecture dependent alignment of the addresses.</span></span></summary>
        <returns><span data-ttu-id="e057f-191">Obiekt typu <typeparamref name="T" /> odczytu z danej lokalizacji.</span><span class="sxs-lookup"><span data-stu-id="e057f-191">An object of type <typeparamref name="T" /> read from the given location.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadUnaligned&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T ReadUnaligned&lt;T&gt; (void* source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T ReadUnaligned&lt;T&gt;(void* source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.ReadUnaligned``1(System.Void*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T ReadUnaligned(void* source);" />
      <MemberSignature Language="F#" Value="static member ReadUnaligned : nativeptr&lt;unit&gt; -&gt; 'T" Usage="System.Runtime.CompilerServices.Unsafe.ReadUnaligned source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Void*" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e057f-192">Typ do odczytu.</span><span class="sxs-lookup"><span data-stu-id="e057f-192">The type to read.</span></span></typeparam>
        <param name="source"><span data-ttu-id="e057f-193">Lokalizacja do odczytu.</span><span class="sxs-lookup"><span data-stu-id="e057f-193">The location to read from.</span></span></param>
        <summary><span data-ttu-id="e057f-194">Odczytuje wartość typu <typeparamref name="T" /> z danej lokalizacji bez zakładając, że architektura zależne wyrównanie adresów.</span><span class="sxs-lookup"><span data-stu-id="e057f-194">Reads a value of type <typeparamref name="T" /> from the given location without assuming architecture dependent alignment of the addresses.</span></span></summary>
        <returns><span data-ttu-id="e057f-195">Obiekt typu <typeparamref name="T" /> odczytu z danej lokalizacji.</span><span class="sxs-lookup"><span data-stu-id="e057f-195">An object of type <typeparamref name="T" /> read from the given location.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int SizeOf&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 SizeOf&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.SizeOf``1" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SizeOf(Of T) () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static int SizeOf();" />
      <MemberSignature Language="F#" Value="static member SizeOf : unit -&gt; int" Usage="System.Runtime.CompilerServices.Unsafe.SizeOf " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T"><span data-ttu-id="e057f-196">Typ obiektu, którego rozmiar jest pobierany.</span><span class="sxs-lookup"><span data-stu-id="e057f-196">The type of object whose size is retrieved.</span></span></typeparam>
        <summary><span data-ttu-id="e057f-197">Zwraca rozmiar obiektu danego typu parametru.</span><span class="sxs-lookup"><span data-stu-id="e057f-197">Returns the size of an object of the given type parameter.</span></span></summary>
        <returns><span data-ttu-id="e057f-198">Rozmiar obiektu typu <typeparamref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="e057f-198">The size of an object of type <typeparamref name="T" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void* Subtract&lt;T&gt; (void* source, int elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void* Subtract&lt;T&gt;(void* source, int32 elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(System.Void*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void* Subtract(void* source, int elementOffset);" />
      <MemberSignature Language="F#" Value="static member Subtract : nativeptr&lt;unit&gt; * int -&gt; nativeptr&lt;unit&gt;" Usage="System.Runtime.CompilerServices.Unsafe.Subtract (source, elementOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void*</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Void*" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
        <Parameter Name="elementOffset" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="source">To be added.</param>
        <param name="elementOffset">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Subtract&lt;T&gt; (ref T source, int elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Subtract&lt;T&gt;(!!T&amp; source, int32 elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(``0@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract(Of T) (ByRef source As T, elementOffset As Integer) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % Subtract(T % source, int elementOffset);" />
      <MemberSignature Language="F#" Value="static member Subtract :  * int -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.Subtract (source, elementOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="elementOffset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e057f-199">Typ odwołania.</span><span class="sxs-lookup"><span data-stu-id="e057f-199">The type of reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="e057f-200">Odwołanie do odjęcia przesunięcia od.</span><span class="sxs-lookup"><span data-stu-id="e057f-200">The reference to subtract the offset from.</span></span></param>
        <param name="elementOffset"><span data-ttu-id="e057f-201">Przesunięcie do odjęcia.</span><span class="sxs-lookup"><span data-stu-id="e057f-201">The offset to subtract.</span></span></param>
        <summary><span data-ttu-id="e057f-202">Odejmuje przesunięcie elementu z danego odwołania.</span><span class="sxs-lookup"><span data-stu-id="e057f-202">Subtracts an element offset from the given reference.</span></span></summary>
        <returns><span data-ttu-id="e057f-203">Nowe odwołanie, które odzwierciedla subraction przesunięcia ze wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="e057f-203">A new reference that reflects the subraction of offset from pointer.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Subtract&lt;T&gt; (ref T source, IntPtr elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Subtract&lt;T&gt;(!!T&amp; source, native int elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(``0@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract(Of T) (ByRef source As T, elementOffset As IntPtr) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % Subtract(T % source, IntPtr elementOffset);" />
      <MemberSignature Language="F#" Value="static member Subtract :  * nativeint -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.Subtract (source, elementOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="elementOffset" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e057f-204">Typ odwołania.</span><span class="sxs-lookup"><span data-stu-id="e057f-204">The type of reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="e057f-205">Odwołanie do odjęcia przesunięcia od.</span><span class="sxs-lookup"><span data-stu-id="e057f-205">The reference to subtract the offset from.</span></span></param>
        <param name="elementOffset"><span data-ttu-id="e057f-206">Przesunięcie do odjęcia.</span><span class="sxs-lookup"><span data-stu-id="e057f-206">The offset to subtract.</span></span></param>
        <summary><span data-ttu-id="e057f-207">Odejmuje przesunięcie elementu z danego odwołania.</span><span class="sxs-lookup"><span data-stu-id="e057f-207">Subtracts an element offset from the given reference.</span></span></summary>
        <returns><span data-ttu-id="e057f-208">Nowe odwołanie, które odzwierciedla subraction przesunięcia ze wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="e057f-208">A new reference that reflects the subraction of offset from pointer.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractByteOffset&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T SubtractByteOffset&lt;T&gt; (ref T source, IntPtr byteOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T SubtractByteOffset&lt;T&gt;(!!T&amp; source, native int byteOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.SubtractByteOffset``1(``0@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractByteOffset(Of T) (ByRef source As T, byteOffset As IntPtr) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % SubtractByteOffset(T % source, IntPtr byteOffset);" />
      <MemberSignature Language="F#" Value="static member SubtractByteOffset :  * nativeint -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.SubtractByteOffset (source, byteOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="byteOffset" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e057f-209">Typ odwołania.</span><span class="sxs-lookup"><span data-stu-id="e057f-209">The type of reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="e057f-210">Odwołanie do odjęcia przesunięcia od.</span><span class="sxs-lookup"><span data-stu-id="e057f-210">The reference to subtract the offset from.</span></span></param>
        <param name="bytesOffset"><span data-ttu-id="e057f-211">Przesunięcie do odjęcia.</span><span class="sxs-lookup"><span data-stu-id="e057f-211">The offset to subtract.</span></span></param>
        <param name="byteOffset">To be added.</param>
        <summary><span data-ttu-id="e057f-212">Odejmuje przesunięcie bajtu od danego odwołania.</span><span class="sxs-lookup"><span data-stu-id="e057f-212">Subtracts a byte offset from the given reference.</span></span></summary>
        <returns><span data-ttu-id="e057f-213">Nowe odwołanie odzwierciedla subraction bajt przesunięcia ze wskaźnika.</span><span class="sxs-lookup"><span data-stu-id="e057f-213">A new reference that reflects the subraction of byte offset from pointer.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Write&lt;T&gt; (void* destination, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write&lt;T&gt;(void* destination, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Write``1(System.Void*,``0)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Write(void* destination, T value);" />
      <MemberSignature Language="F#" Value="static member Write : nativeptr&lt;unit&gt; * 'T -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.Write (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Void*" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e057f-214">Typ wartości do zapisania.</span><span class="sxs-lookup"><span data-stu-id="e057f-214">The type of value to write.</span></span></typeparam>
        <param name="destination"><span data-ttu-id="e057f-215">Lokalizacja do zapisywania.</span><span class="sxs-lookup"><span data-stu-id="e057f-215">The location to write to.</span></span></param>
        <param name="value"><span data-ttu-id="e057f-216">Wartość do zapisu.</span><span class="sxs-lookup"><span data-stu-id="e057f-216">The value to write.</span></span></param>
        <summary><span data-ttu-id="e057f-217">Zapisuje wartości typu <typeparamref name="T" /> do danej lokalizacji.</span><span class="sxs-lookup"><span data-stu-id="e057f-217">Writes a value of type <typeparamref name="T" /> to the given location.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteUnaligned&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void WriteUnaligned&lt;T&gt; (ref byte destination, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteUnaligned&lt;T&gt;(unsigned int8&amp; destination, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.WriteUnaligned``1(System.Byte@,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteUnaligned(Of T) (ByRef destination As Byte, value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void WriteUnaligned(System::Byte % destination, T value);" />
      <MemberSignature Language="F#" Value="static member WriteUnaligned :  * 'T -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.WriteUnaligned (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Byte" RefType="ref" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
        <Parameter Name="value" Type="T" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e057f-218">Typ wartości do zapisania.</span><span class="sxs-lookup"><span data-stu-id="e057f-218">The type of value to write.</span></span></typeparam>
        <param name="destination"><span data-ttu-id="e057f-219">Lokalizacja do zapisywania.</span><span class="sxs-lookup"><span data-stu-id="e057f-219">The location to write to.</span></span></param>
        <param name="value"><span data-ttu-id="e057f-220">Wartość do zapisu.</span><span class="sxs-lookup"><span data-stu-id="e057f-220">The value to write.</span></span></param>
        <summary><span data-ttu-id="e057f-221">Zapisuje wartości typu <typeparamref name="T" /> do danej lokalizacji bez zakładając, że architektura zależne wyrównanie adresów.</span><span class="sxs-lookup"><span data-stu-id="e057f-221">Writes a value of type <typeparamref name="T" /> to the given location without assuming architecture dependent alignment of the addresses.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteUnaligned&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void WriteUnaligned&lt;T&gt; (void* destination, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteUnaligned&lt;T&gt;(void* destination, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.WriteUnaligned``1(System.Void*,``0)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void WriteUnaligned(void* destination, T value);" />
      <MemberSignature Language="F#" Value="static member WriteUnaligned : nativeptr&lt;unit&gt; * 'T -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.WriteUnaligned (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Void*" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
        <Parameter Name="value" Type="T" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e057f-222">Typ wartości do zapisania.</span><span class="sxs-lookup"><span data-stu-id="e057f-222">The type of value to write.</span></span></typeparam>
        <param name="destination"><span data-ttu-id="e057f-223">Lokalizacja do zapisywania.</span><span class="sxs-lookup"><span data-stu-id="e057f-223">The location to write to.</span></span></param>
        <param name="value"><span data-ttu-id="e057f-224">Wartość do zapisu.</span><span class="sxs-lookup"><span data-stu-id="e057f-224">The value to write.</span></span></param>
        <summary><span data-ttu-id="e057f-225">Zapisuje wartości typu <typeparamref name="T" /> do danej lokalizacji bez zakładając, że architektura zależne wyrównanie adresów.</span><span class="sxs-lookup"><span data-stu-id="e057f-225">Writes a value of type <typeparamref name="T" /> to the given location without assuming architecture dependent alignment of the addresses.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>