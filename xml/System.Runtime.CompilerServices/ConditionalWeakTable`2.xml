<Type Name="ConditionalWeakTable&lt;TKey,TValue&gt;" FullName="System.Runtime.CompilerServices.ConditionalWeakTable&lt;TKey,TValue&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="dbf347a600196f6012ffdb19e1733f7b6934173d" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36541731" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ConditionalWeakTable&lt;TKey,TValue&gt; where TKey : class where TValue : class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ConditionalWeakTable`2&lt;class TKey, class TValue&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ConditionalWeakTable(Of TKey, TValue)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TKey, typename TValue&gt;&#xA; where TKey : class where TValue : classpublic ref class ConditionalWeakTable sealed" />
  <TypeSignature Language="F#" Value="type ConditionalWeakTable&lt;'Key, 'Value (requires 'Key : null and 'Value : null)&gt; = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TValue">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces></Interfaces>
  <Docs>
    <typeparam name="TKey">Typ referencyjny, do której jest dołączona pola.</typeparam>
    <typeparam name="TValue">Typ pola. Musi to być typem referencyjnym.</typeparam>
    <summary>Umożliwia kompilatory dynamicznie dołączyć pola obiektu do obiektów zarządzanych.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> Klasa umożliwia Kompilatory języka dołączyć dowolne właściwości do zarządzanych obiektów w czasie wykonywania. A <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> obiekt jest słownik, który wiąże obiekt zarządzany, która jest reprezentowana przez klucz, dołączona właściwość, która jest reprezentowany przez wartość. Poszczególne wystąpienia są klucze obiektu `TKey` klasy, do której jest dołączona właściwość, a jego wartości są wartości właściwości, które są przypisane do odpowiednich obiektów.  
  
 Klucze muszą być unikatowe; innymi słowy <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> klasa obsługuje jedną wartość dołączonych na obiekt zarządzany. Dwa klucze są takie same, jeśli przekazywanie ich do <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> metoda zwraca `true`.  
  
> [!NOTE]
>  Porównywanie równości nie może kontrolować przez zastąpienie <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> jawnie ustaw wartość skrótu dla klucza. <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> Klasy nie używa <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> metodę w celu obliczenia skrótów kodów i dlatego nie jest wywoływany <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> zastąpienia.  
  
 Mimo że <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> klasy przetrzymuje kolekcję par klucz/wartość, jego jest najlepiej traktować jako tabeli, a nie w obiekt słownika. <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> Klasy różni się od słownik na kilka sposobów:  
  
-   Nie jest trwały kluczy. Oznacza to, że klucz jest nie życiu tylko, ponieważ jest elementem członkowskim kolekcji.  
  
-   Nie obejmuje wszystkie metody (takie jak `GetEnumerator` lub `Contains`) zawierający zwykle słownika.  
  
-   Nie implementuje <xref:System.Collections.Generic.IDictionary%602> interfejsu.  
  
 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> Klasy różni się od innych obiektów kolekcji w jego zarządzania okres istnienia obiektów z kluczy przechowywanych w kolekcji. Zwykle gdy obiekt jest przechowywany w kolekcji, jego okres istnienia ważny aż do jego usunięciu (i nie żadne dodatkowe odwołania do obiektu) lub samego obiektu kolekcji zostanie zniszczony. Jednak w <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> klasy Dodawanie parę klucza i wartości do tabeli nie upewnij się, że klucz będzie będzie się powtarzać, nawet jeśli jest osiągalna bezpośrednio z wartością przechowywaną w tabeli (na przykład, jeśli tabela zawiera jeden klucz, A, o wartości 1 oraz drugi klucz, B, z wartością P2, który zawiera odwołanie do A). Zamiast tego <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> automatycznie usuwa wpis klucz/wartość, jak spoza tabeli nie występują żadne inne relacje, do klucza. Przykład stanowi ilustrację.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, że klucza przechowywanego u <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> tabeli nie zostaną utrwalone po odwołania do niego poza tabeli zostaną zniszczone. W przykładzie zdefiniowano dwie klasy: `ManagedClass`, reprezentuje klucza w tabeli, i `ClassData`, który reprezentuje wartość klucza. Przykład tworzy trzy obiekty każdego typu. Również tworzy <xref:System.WeakReference> obiekt, który reprezentuje drugi `ManagedClass`, a następnie niszczy drugi `ManagedClass` wystąpienia. Próba pobrania drugi `ManagedClass` obiekt z <xref:System.WeakReference.Target%2A> właściwość wskazuje, że pozostają nie odwołania do obiektu.  
  
 [!code-csharp[System.Runtime.CompilerServices.ConditionalWeakTable.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.class/cs/example1.cs#1)]
 [!code-vb[System.Runtime.CompilerServices.ConditionalWeakTable.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.class/vb/example1.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Wystąpienia <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> klasy są bezpieczne dla wątków. Nie wymagają wywołań w celu dodatkowe blokowania.</threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConditionalWeakTable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConditionalWeakTable();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.%23ctor%2A> Konstruktora tworzy pustą <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> tabeli; oznacza to, że tabela nie zawiera żadnych pary klucz wartość. Można dodawać pary klucz wartość, wywołując <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A>, <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A>, lub <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> metody.  
  
 Każdy klucz w <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> obiektu musi być unikatowa. Klucze nie są unikatowe, odnoszące się do tego samego obiektu (to znaczy, jeśli przekazywanie ich jako argumenty do <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> metoda zwraca `true`).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (TKey key, TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(!TKey key, !TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (key As TKey, value As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(TKey key, TValue value);" />
      <MemberSignature Language="F#" Value="member this.Add : 'Key * 'Value -&gt; unit" Usage="conditionalWeakTable.Add (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="key">Klucz do dodania. <c>klucz</c> reprezentuje obiekt, do której jest dołączona właściwość.</param>
        <param name="value">Wartość właściwości klucza.</param>
        <summary>Dodaje klucz do tabeli.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każdy klucz w <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> obiektu musi być unikatowa. Klucze nie są unikatowe, odnoszące się do tego samego obiektu (to znaczy, jeśli przekazywanie ich jako argumenty do <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> metoda zwraca `true`).  
  
 Jeśli klucz jest zbierane pamięci podczas operacji dodawania, istniejące pary klucza/wartości jest usuwany, a nową parę klucz wartość są dodawane bez wyjątek.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano `MainClass` klasy i `MainInfo` klasy, która zawiera informacje na temat `MainClass` wystąpienia. Przykład wywołuje <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A> metody w celu dodania `MainClass` obiekt i jego dołączonych `MainInfo` do obiektu <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> tabeli. Wywołania również pokazano w przykładzie <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> i <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> metody dodawania pary klucz wartość do tabeli, a także do <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> metody do pobierania wartości istniejącego klucza.  
  
 [!code-csharp[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/cs/getvalue1.cs#1)]
 [!code-vb[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/vb/getvalue1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="key" /> już istnieje.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego. Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</permission>
        <altmember cref="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)" />
      </Docs>
    </Member>
    <Member MemberName="AddOrUpdate">
      <MemberSignature Language="C#" Value="public void AddOrUpdate (TKey key, TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddOrUpdate(!TKey key, !TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.AddOrUpdate(`0,`1)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddOrUpdate (key As TKey, value As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddOrUpdate(TKey key, TValue value);" />
      <MemberSignature Language="F#" Value="member this.AddOrUpdate : 'Key * 'Value -&gt; unit" Usage="conditionalWeakTable.AddOrUpdate (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="conditionalWeakTable.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~ConditionalWeakTable ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!ConditionalWeakTable`2 ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="conditionalWeakTable.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gwarantuje, że zasoby są zwalniane i inne operacje oczyszczania są wykonywane, gdy moduł garbage collector zwraca <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołania modułu zbierającego elementy bezużyteczne <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Finalize%2A> Jeśli bieżący obiekt jest gotowy do przetwarzania.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
    <Member MemberName="GetOrCreateValue">
      <MemberSignature Language="C#" Value="public TValue GetOrCreateValue (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TValue GetOrCreateValue(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOrCreateValue (key As TKey) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TValue GetOrCreateValue(TKey key);" />
      <MemberSignature Language="F#" Value="member this.GetOrCreateValue : 'Key -&gt; 'Value" Usage="conditionalWeakTable.GetOrCreateValue key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">Klucz do wyszukania. <c>klucz</c> reprezentuje obiekt, do której jest dołączona właściwość.</param>
        <summary>Automatycznie wyszukuje określonego klucza w tabeli i zwraca odpowiadającej jej wartości. Jeśli klucz nie istnieje w tabeli, metoda wywołuje konstruktor domyślny klasy, która reprezentuje wartość tabeli, aby utworzyć wartość, która jest powiązana z określonym kluczem.</summary>
        <returns>Wartość, która odpowiada <paramref name="key" />, jeśli <paramref name="key" /> już istnieje w tabeli; w przeciwnym razie nowa wartość utworzone przez domyślny konstruktor obiektu klasy zdefiniowane przez <paramref name="TValue" /> parametr typu ogólnego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `key` nie istnieje w tabeli, metoda dodaje, wraz z obiektu, który jest uruchomiony przez wywołanie domyślnego konstruktora klasy zdefiniowane przez `TValue` parametr typu ogólnego. Jeśli `TValue` klasa nie ma domyślnego konstruktora, <xref:System.MissingMethodException> jest generowany.  
  
 Jest zalecana metoda pobierania istniejącej wartości lub dodanie nowej wartości do <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> tabeli, jeśli klasa wartości tabeli definiuje konstruktora domyślnego. Jeśli nie definiuje konstruktora domyślnego, możesz zamiast tego wywołać <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> metodę, która zależy od dostarczane do wywołania zwrotnego metody do tworzenia wystąpienia obiektu reprezentujący wartość tabeli  
  
 Do pobierania wartości istniejącego klucza bez dodawania parę klucza i wartości, jeśli klucz nie zostanie znaleziony w tabeli, wywołaj <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> metody.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano `MainClass` klasy i `MainInfo` klasy, która zawiera informacje na temat `MainClass` wystąpienia. Przykład wywołania <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> metody w celu dodania `MainClass` obiekt i jego dołączonych `MainInfo` do obiektu <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> tabeli. Wywołania również pokazano w przykładzie <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A> i <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> metody dodawania pary klucz wartość do tabeli, a także do <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> metody do pobierania wartości istniejącego klucza.  
  
 [!code-csharp[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/cs/getvalue1.cs#1)]
 [!code-vb[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/vb/getvalue1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.MissingMethodException">
          <block subset="none" type="note">
            <para> [.NET dla aplikacji ze Sklepu Windows] (http://go.microsoft.com/fwlink/?LinkID=247912) lub [przenośne Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md) klasy, catch wyjątku klasy podstawowej <see cref="T:System.MissingMemberException" />, zamiast tego.  </para>
          </block>  Klasa, która reprezentuje wartość tabeli nie definiuje konstruktora domyślnego.</exception>
        <altmember cref="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)" />
        <altmember cref="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)" />
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public TValue GetValue (TKey key, System.Runtime.CompilerServices.ConditionalWeakTable&lt;TKey,TValue&gt;.CreateValueCallback createValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TValue GetValue(!TKey key, class System.Runtime.CompilerServices.ConditionalWeakTable`2/CreateValueCallback&lt;!TKey, !TValue&gt; createValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback{`0,`1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TValue GetValue(TKey key, System::Runtime::CompilerServices::ConditionalWeakTable&lt;TKey, TValue&gt;::CreateValueCallback ^ createValueCallback);" />
      <MemberSignature Language="F#" Value="member this.GetValue : 'Key * System.Runtime.CompilerServices.ConditionalWeakTable&lt;'Key, 'Value (requires 'Key : null and 'Value : null)&gt;.CreateValueCallback -&gt; 'Value" Usage="conditionalWeakTable.GetValue (key, createValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="createValueCallback" Type="System.Runtime.CompilerServices.ConditionalWeakTable&lt;TKey,TValue&gt;+CreateValueCallback" />
      </Parameters>
      <Docs>
        <param name="key">Klucz do wyszukania. <c>klucz</c> reprezentuje obiekt, do której jest dołączona właściwość.</param>
        <param name="createValueCallback">Delegat do metody, której można utworzyć wartości danego <c>klucza</c>. Ma jeden parametr typu <c>TKey</c>i zwraca wartość typu <c>TValue</c>.</param>
        <summary>Automatycznie wyszukuje określonego klucza w tabeli i zwraca odpowiadającej jej wartości. Jeśli klucz nie istnieje w tabeli, metoda wywołuje metodę wywołania zwrotnego można utworzyć wartości, który jest powiązany z określonym kluczem.</summary>
        <returns>Wartość dołączony do <paramref name="key" />, jeśli <paramref name="key" /> już istnieje w tabeli; w przeciwnym razie nowa wartość zwrócona przez <paramref name="createValueCallback" /> delegowanie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `key` nie istnieje w tabeli, <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> wywołuje metodę, która jest zdefiniowana przez `createValueCallback` parametru i przekazuje je klucza. Nowa wartość jest powiązany z klucza w tabeli i zwrócone w wyniku.  
  
 Tej metody można użyć tylko wtedy, gdy klasa, która reprezentuje wartość tabeli nie definiuje konstruktora domyślnego. Jeśli ją zdefiniować konstruktora domyślnego, użyj <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> metody zamiast tego. Do pobierania wartości istniejącego klucza bez dodawania parę klucza i wartości, jeśli klucz nie zostanie znaleziony w tabeli, wywołaj <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> metody.  
  
 Jeśli wiele wątków próbuje utworzyć ten sam klucz `createValueCallback` może być wywołana kilka razy z tym samym kluczem. Powiedzie się tylko jeden z tych wywołań, a jego zwracanej wartości zostaną dodane do tabeli. Wątek, który zakończy się pomyślnie w tworzeniu wartości jest nieokreślony. Ta reguła zezwala tabeli do wywołania `createValueCallback` poza blokady tabeli wewnętrznej, aby zapobiec zakleszczenia.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano `MainClass` klasy i `MainInfo` klasy, która zawiera informacje na temat `MainClass` wystąpienia. Definiuje również statycznego (`Shared` w języku Visual Basic) `CreateAttachedValue` metody, które mogą być przypisane do <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.CreateValueCallback> delegować i przekazywane do <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> metody. Przykład wywołania <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> metody w celu dodania `MainClass` obiekt i jego dołączonych `MainInfo` do obiektu <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> tabeli. Wywołania również pokazano w przykładzie <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A> i <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> metody dodawania pary klucz wartość do tabeli, a także do <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> metody do pobierania wartości istniejącego klucza.  
  
 [!code-csharp[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/cs/getvalue1.cs#1)]
 [!code-vb[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/vb/getvalue1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> lub <paramref name="createValueCallback" /> jest <see langword="null" />.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego. Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</permission>
        <altmember cref="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)" />
        <altmember cref="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)" />
        <altmember cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Remove(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Remove(TKey key);" />
      <MemberSignature Language="F#" Value="member this.Remove : 'Key -&gt; bool" Usage="conditionalWeakTable.Remove key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">Klucz do usunięcia.</param>
        <summary>Usuwa klucz i wartość z tabeli.</summary>
        <returns>
          <see langword="true" /> Jeśli klucz jest odnalezione i usunięte; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli klucz jest zbierane pamięci podczas tej operacji, metoda nie zgłaszał wyjątku i zwracanych wartości są niezdefiniowane.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> jest <see langword="null" />.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego. Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</permission>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt; IEnumerable&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt; System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.System#Collections#Generic#IEnumerable&lt;System#Collections#Generic#KeyValuePair&lt;TKey,TValue&gt;&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of KeyValuePair(Of TKey, TValue)) Implements IEnumerable(Of KeyValuePair(Of TKey, TValue)).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt; ^ System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (TKey key, out TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetValue(!TKey key, [out] !TValue&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (key As TKey, ByRef value As TValue) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetValue(TKey key, [Runtime::InteropServices::Out] TValue % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetValue : 'Key *  -&gt; bool" Usage="conditionalWeakTable.TryGetValue (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">Klucz reprezentujący obiekt z dołączona właściwość.</param>
        <param name="value">Po powrocie z tej metody zawiera wartość dołączona właściwość. Jeśli <c>klucza</c> nie zostanie znaleziony, <c>wartość</c> zawiera domyślną wartość.</param>
        <summary>Pobiera wartość określonego klucza.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="key" /> zostanie odnaleziony; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli klucz jest zbierane pamięci podczas tej operacji, metoda może zwracać `false` i ustaw `value` domyślną wartość (tak, jakby nie było klucz).  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano `MainClass` klasy i `MainInfo` klasy, która zawiera informacje na temat `MainClass` wystąpienia. Przykład wywołania <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A>, <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A>, i <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> metody dodawania pary klucz wartość do <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> tabeli. W każdym przypadku przykład wywołuje <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> metodę, aby potwierdzić, że para klucza i wartości zostały dodane do tabeli.  
  
 [!code-csharp[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/cs/getvalue1.cs#1)]
 [!code-vb[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/vb/getvalue1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> jest <see langword="null" />.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego. Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</permission>
        <altmember cref="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)" />
        <altmember cref="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)" />
      </Docs>
    </Member>
  </Members>
</Type>