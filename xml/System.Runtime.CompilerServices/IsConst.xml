<Type Name="IsConst" FullName="System.Runtime.CompilerServices.IsConst">
  <TypeSignature Language="C#" Value="public static class IsConst" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsConst extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsConst" />
  <TypeSignature Language="VB.NET" Value="Public Class IsConst" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsConst abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="3699c-101">Wskazuje, że zmodyfikowany typ ma <see langword="const" /> modyfikator.</span><span class="sxs-lookup"><span data-stu-id="3699c-101">Indicates that the modified type has a <see langword="const" /> modifier.</span></span> <span data-ttu-id="3699c-102">Klasa ta nie może być dziedziczona.</span><span class="sxs-lookup"><span data-stu-id="3699c-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3699c-103">Kompilator Microsoft C++ emituje modyfikator do metadanych dla każdego parametru zwracany typ lub deklaracja obiektu zadeklarowane jako `const` w kodzie źródłowym.</span><span class="sxs-lookup"><span data-stu-id="3699c-103">The Microsoft C++ compiler emits this modifier into metadata for any parameter, return type, or object declaration declared as `const` in the source code.</span></span>  
  
 <span data-ttu-id="3699c-104">Kompilatory Emituj niestandardowych Modyfikatory w metadanych, aby zmienić sposób, że przy użyciu kompilatora just in time (JIT) obsługuje wartości podczas domyślne zachowanie nie jest odpowiedni.</span><span class="sxs-lookup"><span data-stu-id="3699c-104">Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</span></span>  <span data-ttu-id="3699c-105">Kompilator JIT napotkał modyfikator niestandardowych, obsługi przez wartość w taki sposób, który określa modyfikator.</span><span class="sxs-lookup"><span data-stu-id="3699c-105">When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</span></span>  <span data-ttu-id="3699c-106">Kompilatory można zastosować Modyfikatory niestandardowych metod, parametry i wartości zwracane.</span><span class="sxs-lookup"><span data-stu-id="3699c-106">Compilers can apply custom modifiers to methods, parameters, and return values.</span></span>  <span data-ttu-id="3699c-107">Przy użyciu kompilatora JIT musi odpowiadać na Modyfikatory wymagane, ale można zignorować Modyfikatory opcjonalne.</span><span class="sxs-lookup"><span data-stu-id="3699c-107">The JIT compiler must respond to required modifiers but can ignore optional modifiers.</span></span>  
  
 <span data-ttu-id="3699c-108">Modyfikatory niestandardowy może emitować w metadanych przy użyciu jednej z następujących metod:</span><span class="sxs-lookup"><span data-stu-id="3699c-108">You can emit custom modifiers into metadata using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="3699c-109">Przy użyciu metod w <xref:System.Reflection.Emit.TypeBuilder> klas takich jak <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, i <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span><span class="sxs-lookup"><span data-stu-id="3699c-109">Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span></span>  
  
-   <span data-ttu-id="3699c-110">Generowanie pliku instrukcji języka pośredniego (MSIL) firmy Microsoft, który zawiera wywołań `modopt` i `modreq`i składania pliku o [Ilasm.exe (asembler IL)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="3699c-110">Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
-   <span data-ttu-id="3699c-111">Przy użyciu odbicia niezarządzane interfejsu API.</span><span class="sxs-lookup"><span data-stu-id="3699c-111">Using the unmanaged reflection API.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3699c-112">W poniższym przykładzie pokazano sposób Emituj <xref:System.Runtime.CompilerServices.IsConst> obiektu w zestawie przy użyciu odbicia.</span><span class="sxs-lookup"><span data-stu-id="3699c-112">The following example demonstrates how to emit an <xref:System.Runtime.CompilerServices.IsConst> object into an assembly using reflection.</span></span>  
  
 [!code-cpp[Runtime.CompilerServices.IsConst#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.CompilerServices.IsConst/cpp/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>