<Type Name="ServiceProviders" FullName="System.Windows.Markup.ServiceProviders">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c5c1be6d12bd7b1fb0ad65441dfe37c37f9cb7d2" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69167098" /></Metadata><TypeSignature Language="C#" Value="public class ServiceProviders : IServiceProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceProviders extends System.Object implements class System.IServiceProvider" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.ServiceProviders" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceProviders&#xA;Implements IServiceProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceProviders : IServiceProvider" />
  <TypeSignature Language="F#" Value="type ServiceProviders = class&#xA;    interface IServiceProvider" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IServiceProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Zapewnia implementację <see cref="T:System.IServiceProvider" /> interfejsu z metodami, które umożliwiają dodawanie usług.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest to Klasa narzędzi do użycia podczas serializacji zawartości. Klasa jest zasadniczo słownikiem zawierającym tylko dane wejściowe służący do przechowywania usług, które są oparte na <xref:System.IServiceProvider> typie usługi, który implementuje do późniejszego pobrania z tego samego słownika. Korzystanie z słownika nie pozwala na wielokrotne wykonywanie zapytań dotyczących tej samej usługi. Ta klasa jest klasą <xref:System.Windows.Markup.XamlDesignerSerializationManager>bazową, która jest usługą używaną do `ShouldSerialize` implementacji metod w innych częściach WPF.  
  
 Użycie tej klasy wymaga odwołujących się do zestawów WPF, nie jest przeznaczone do ogólnych scenariuszy usług .NET Framework XAML. Scenariusz ten jest przeznaczony dla WPF wewnętrznej implementacji funkcji intensywnie korzystających z usługi podczas serializacji, na przykład podczas `ShouldSerialize` przetwarzania implementacji niektórych typów. Praktyczną klasą wykonywaną w tym scenariuszu jest <xref:System.Windows.Markup.XamlDesignerSerializationManager>Klasa pochodna.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceProviders ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ServiceProviders.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceProviders();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Markup.ServiceProviders" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddService">
      <MemberSignature Language="C#" Value="public void AddService (Type serviceType, object service);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddService(class System.Type serviceType, object service) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ServiceProviders.AddService(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddService (serviceType As Type, service As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddService(Type ^ serviceType, System::Object ^ service);" />
      <MemberSignature Language="F#" Value="member this.AddService : Type * obj -&gt; unit" Usage="serviceProviders.AddService (serviceType, service)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="service" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="serviceType">Typ usługi nowej usługi.</param>
        <param name="service">Klasa implementacji usługi.</param>
        <summary>Dodaje usługę do listy.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="serviceType" />lub <paramref name="service" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Podjęto próbę dodania usługi, która już istnieje w słowniku.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="public object GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ServiceProviders.GetService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetService (serviceType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetService(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="abstract member GetService : Type -&gt; obj&#xA;override this.GetService : Type -&gt; obj" Usage="serviceProviders.GetService serviceType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IServiceProvider.GetService(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">Typ obiektu usługi do pobrania.</param>
        <summary>Pobiera obiekt usługi określonego typu.</summary>
        <returns>Implementacja usługi dla typu <paramref name="serviceType" />. Może tak <see langword="null" /> być, jeśli nie ma usługi przechowywanej <paramref name="serviceType" />dla typu.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
