<Type Name="XmlLanguage" FullName="System.Windows.Markup.XmlLanguage">
  <Metadata><Meta Name="ms.openlocfilehash" Value="022116ef3ac51cfc15562c3554ff8eba19216867" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69166390" /></Metadata><TypeSignature Language="C#" Value="public class XmlLanguage" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlLanguage extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.XmlLanguage" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlLanguage" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlLanguage" />
  <TypeSignature Language="F#" Value="type XmlLanguage = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Markup.XmlLanguageConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje tag języka do użycia w znacznikach XAML.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tag języka może lub nie ma zarejestrowanego <xref:System.Globalization.CultureInfo> w systemie, w którym jest interpretowany kod XAML.  
  
 Ta klasa jest przydatna do obsługi wartości reprezentowanych `xml:lang` za pomocą języka XML.  
  
 Tagi języka można określić w postaci dwuznakowej lub w postaci podzielonej w formie języka w postaci. Zobacz [dokument RFC 3066](https://go.microsoft.com/fwlink/?LinkId=132454).  
  
 Należy zauważyć, że specyfikacja XML dopuszcza pusty ciąg dla `xml:lang`, chociaż nie jest to dozwolone przez RFC 3066; w związku z <xref:System.Windows.Markup.XmlLanguage> tym typ zezwala na "" (pusty ciąg atrybutu). Skonstruowane <xref:System.Windows.Markup.XmlLanguage> domyślnie zachowuje się tak, jakby były skonstruowane z "" (pustym ciągiem).  
  
<a name="xamlAttributeUsage_XmlLanguage"></a>   
## <a name="xaml-attribute-usage"></a>Użycie atrybutu języka XAML  
  
```  
<object property="prefix"/>  
- or -  
<object property="prefix-subcode"/>  
```  
  
<a name="xamlValues_XmlLanguage"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 *prefix*  
 Prefiks języka przy użyciu wartości prefiksów języka ISO 639-1. Na przykład "en" lub "zh". Wielkie wartości są akceptowane i konwertowane na małe litery. Może to być również pusty atrybut "".  
  
 *subcode*  
 Jeśli jest podana, musi być poprzedzona pojedynczym łącznikiem. Następnie podkod zdefiniowany przez RFC 3066. Najbardziej typowym użyciem i tym, który najprawdopodobniej prawidłowo mapuje na a <xref:System.Globalization.CultureInfo>, jest krajem lub regionalnym oznaczeniem, takim jak "-US" lub "-HK". Wielkie wartości są akceptowane i konwertowane na małe litery.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.XmlLanguage Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Markup.XmlLanguage Empty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.XmlLanguage.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As XmlLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Markup::XmlLanguage ^ Empty { System::Windows::Markup::XmlLanguage ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Empty : System.Windows.Markup.XmlLanguage" Usage="System.Windows.Markup.XmlLanguage.Empty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.XmlLanguage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wystąpienie statyczne <see cref="T:System.Windows.Markup.XmlLanguage" /> , które zostanie utworzone za <see cref="M:System.Windows.Markup.XmlLanguage.GetLanguage(System.String)" /> pomocą tagu języka jako pustego ciągu atrybutu.</summary>
        <value>Pusta wersja znacznika języka programu <see cref="T:System.Windows.Markup.XmlLanguage" />, do użycia w operacjach porównania.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta <xref:System.Windows.Markup.XmlLanguage> wartość obowiązuje w odniesieniu do <xref:System.String.Empty?displayProperty=nameWithType>, którego <xref:System.Windows.Markup.XmlLanguage.GetEquivalentCulture%2A> wynikiem jest. <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEquivalentCulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo GetEquivalentCulture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Globalization.CultureInfo GetEquivalentCulture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.GetEquivalentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEquivalentCulture () As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Globalization::CultureInfo ^ GetEquivalentCulture();" />
      <MemberSignature Language="F#" Value="member this.GetEquivalentCulture : unit -&gt; System.Globalization.CultureInfo" Usage="xmlLanguage.GetEquivalentCulture " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca odpowiedni odpowiednik <see cref="T:System.Globalization.CultureInfo" /> dla <see cref="T:System.Globalization.CultureInfo" /> tego <see cref="T:System.Windows.Markup.XmlLanguage" />elementu,Jeśli i tylko wtedy, gdy jest on zarejestrowany dla wartościtego<see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /><see cref="T:System.Windows.Markup.XmlLanguage" /></summary>
        <returns><see cref="T:System.Globalization.CultureInfo" /> , Który może być używany na potrzeby wywołań interfejsu API globalizacji lokalizacji, który przyjmuje ten typ jako argument.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie można <xref:System.Globalization.CultureInfo> wytworzyć odpowiednika, ta metoda zgłasza wyjątek. Jeśli nie chcesz obsługiwać wyjątków, zamiast tego wywołaj <xref:System.Windows.Markup.XmlLanguage.GetSpecificCulture%2A> .  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Nie zarejestrowano <see cref="T:System.Globalization.CultureInfo" /> dla <see cref="T:System.Windows.Markup.XmlLanguage" /> podanego elementu EXISTS, <see cref="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)" />określonego przez wywołanie.</exception>
        <altmember cref="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetLanguage">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.XmlLanguage GetLanguage (string ietfLanguageTag);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.XmlLanguage GetLanguage(string ietfLanguageTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.GetLanguage(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLanguage (ietfLanguageTag As String) As XmlLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::XmlLanguage ^ GetLanguage(System::String ^ ietfLanguageTag);" />
      <MemberSignature Language="F#" Value="static member GetLanguage : string -&gt; System.Windows.Markup.XmlLanguage" Usage="System.Windows.Markup.XmlLanguage.GetLanguage ietfLanguageTag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.XmlLanguage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ietfLanguageTag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ietfLanguageTag">Ciąg języka RFC 3066 lub pusty ciąg.</param>
        <summary><see cref="T:System.Windows.Markup.XmlLanguage" /> Zwraca wystąpienie na podstawie ciągu reprezentującego język na RFC 3066.</summary>
        <returns>Nowy <see cref="T:System.Windows.Markup.XmlLanguage" /> z dostarczonym ciągiem jako jego <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> wartością.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest efektywnie konstruktorem.  
  
 Ciąg języka może być pusty lub musi być zgodny z regułami [RFC 3066](https://go.microsoft.com/fwlink/?LinkId=132454) :  
  
-   Pierwszy atrybutu musi zawierać tylko [!INCLUDE[TLA#tla_ascii](~/includes/tlasharptla-ascii-md.md)] litery.  
  
-   Dodatkowe tagi podrzędne muszą zawierać [!INCLUDE[TLA#tla_ascii](~/includes/tlasharptla-ascii-md.md)] litery lub cyfry.  
  
-   Tagi podrzędne są rozdzielone pojedynczym znakiem łącznika.  
  
-   Każdy atrybutu musi mieć długość od 1 do 8 znaków.  
  
-   Nie są dozwolone żadne łączniki wiodące ani końcowe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="ietfLanguageTag" />parametr nie może mieć wartości null.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="ietfLanguageTag" />parametr był niepusty, ale nie jest zgodny z składnią określoną w dokumencie RFC 3066.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSpecificCulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo GetSpecificCulture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Globalization.CultureInfo GetSpecificCulture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.GetSpecificCulture" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSpecificCulture () As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Globalization::CultureInfo ^ GetSpecificCulture();" />
      <MemberSignature Language="F#" Value="member this.GetSpecificCulture : unit -&gt; System.Globalization.CultureInfo" Usage="xmlLanguage.GetSpecificCulture " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca najbardziej ścisłe, nieneutralne <see cref="T:System.Globalization.CultureInfo" /> dla tego <see cref="T:System.Windows.Markup.XmlLanguage" />elementu.</summary>
        <returns>, Który może być używany na potrzeby [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] wywołań globalizacji lokalizacji, które pobierają ten typ jako argument. <see cref="T:System.Globalization.CultureInfo" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli jest <xref:System.Windows.Markup.XmlLanguage> to równe, <xref:System.Windows.Markup.XmlLanguage.Empty%2A?displayProperty=nameWithType> ta metoda zwróci <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>wartość.  
  
 Ta metoda umożliwia znalezienie zarejestrowanego <xref:System.Globalization.CultureInfo> dopasowania do najdłuższego prefiksu tego <xref:System.Windows.Markup.XmlLanguage>elementu. Jeśli zarejestrowana <xref:System.Globalization.CultureInfo> jest neutralna<xref:System.Globalization.CultureInfo.IsNeutralCulture%2A> ( `true`is), Metoda <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> ta polega na wywołaniu do mapowania od neutralnego <xref:System.Globalization.CultureInfo> do określonego.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Dla bieżącego <see cref="T:System.Globalization.CultureInfo" /> <see cref="T:System.Windows.Markup.XmlLanguage" />elementu niezarejestrowanożadnychpowiązanych,nieneutralnych.<see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /></exception>
      </Docs>
    </Member>
    <Member MemberName="IetfLanguageTag">
      <MemberSignature Language="C#" Value="public string IetfLanguageTag { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IetfLanguageTag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IetfLanguageTag As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IetfLanguageTag { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IetfLanguageTag : string" Usage="System.Windows.Markup.XmlLanguage.IetfLanguageTag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera ciąg reprezentujący tag języka.</summary>
        <value>Ciąg reprezentujący tag języka.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość może zwracać znormalizowaną wersję pierwotnie określonego ciągu, zgodnie z <xref:System.Windows.Markup.XmlLanguage.GetLanguage%2A>oczekiwaniami.  
  
 Ta właściwość może również zwracać <xref:System.String.Empty> , jeśli <xref:System.Windows.Markup.XmlLanguage.GetLanguage%2A>podano pusty ciąg.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="xmlLanguage.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca wartość reprezentującą bieżącą <see cref="T:System.Windows.Markup.XmlLanguage" />. <see cref="T:System.String" /></summary>
        <returns><see cref="T:System.String" /> Reprezentuje bieżący<see cref="T:System.Windows.Markup.XmlLanguage" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwraca <xref:System.Windows.Markup.XmlLanguage.IetfLanguageTag%2A> wartość bieżącej <xref:System.Windows.Markup.XmlLanguage>wartości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
