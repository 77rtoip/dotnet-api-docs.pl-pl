<Type Name="XmlLanguage" FullName="System.Windows.Markup.XmlLanguage">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="949b5d2e6f4e8bbe51d550b6df6cca7d0c9978c4" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30709130" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlLanguage" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlLanguage extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.XmlLanguage" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlLanguage" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlLanguage" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Markup.XmlLanguageConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje tag język do użycia w kodzie XAML.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Znacznik języka może lub nie ma zarejestrowanego <xref:System.Globalization.CultureInfo> obecne w systemie, gdzie jest interpretowany XAML.  
  
 Ta klasa jest przydatne w przypadku zajmowanie się przy użyciu wartości `xml:lang` w kodzie XML.  
  
 Tagi języka można określić w postaci dwóch znaków lub w postaci podzielonym języka ustawień regionalnych. Zobacz [RFC 3066](http://go.microsoft.com/fwlink/?LinkId=132454).  
  
 Należy zauważyć, że w specyfikacji XML pozwala pusty ciąg `xml:lang`, chociaż nie jest dozwolone przez RFC 3066; w związku z tym <xref:System.Windows.Markup.XmlLanguage> zezwala wpisz "" (pusty ciąg atrybutu). Domyślne skonstruowany <xref:System.Windows.Markup.XmlLanguage> zachowuje się tak, jakby skonstruowany przy "" (pusty ciąg).  
  
<a name="xamlAttributeUsage_XmlLanguage"></a>   
## <a name="xaml-attribute-usage"></a>Użycie atrybutu języka XAML  
  
```  
<object property="prefix"/>  
- or -  
<object property="prefix-subcode"/>  
```  
  
<a name="xamlValues_XmlLanguage"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 *prefix*  
 Prefiks języka przy użyciu wartości prefiksu 639 1 języka ISO. Na przykład "en" lub "zh". Wielkie litery wartości są akceptowane i przekształcone na małe litery. Może to być również pustego atrybutu "".  
  
 *subcode*  
 Jeśli zostanie podana, musi być poprzedzona pojedynczy łącznik. Następnie kod podrzędny zgodnie z definicją w dokumencie RFC 3066. Najbardziej typowy sposób i to, które najprawdopodobniej poprawnie mapowane do <xref:System.Globalization.CultureInfo>, jest takie jak kraj lub regionalne oznaczenie "-us" lub "-hk". Wielkie litery wartości są akceptowane i przekształcone na małe litery.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.XmlLanguage Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Markup.XmlLanguage Empty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.XmlLanguage.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As XmlLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Markup::XmlLanguage ^ Empty { System::Windows::Markup::XmlLanguage ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.XmlLanguage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera statycznego <see cref="T:System.Windows.Markup.XmlLanguage" /> wystąpienia jako zostałyby utworzone przez <see cref="M:System.Windows.Markup.XmlLanguage.GetLanguage(System.String)" /> z tagiem języka jako ciąg pusty atrybut.</summary>
        <value>Wersja tag pusty języka <see cref="T:System.Windows.Markup.XmlLanguage" />, do użycia w ramach operacji porównania.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta wartość jest obowiązująca <xref:System.Windows.Markup.XmlLanguage> odpowiadający <xref:System.String.Empty?displayProperty=nameWithType>, których <xref:System.Windows.Markup.XmlLanguage.GetEquivalentCulture%2A> wynik jest <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEquivalentCulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo GetEquivalentCulture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Globalization.CultureInfo GetEquivalentCulture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.GetEquivalentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEquivalentCulture () As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Globalization::CultureInfo ^ GetEquivalentCulture();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca odpowiednie równoważne <see cref="T:System.Globalization.CultureInfo" /> tego <see cref="T:System.Windows.Markup.XmlLanguage" />, jeśli i tylko wtedy, gdy taki <see cref="T:System.Globalization.CultureInfo" /> jest zarejestrowany dla <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> wartość to <see cref="T:System.Windows.Markup.XmlLanguage" /></summary>
        <returns>A <see cref="T:System.Globalization.CultureInfo" /> które mogą być używane w przypadku wywołań interfejsu API globalizacji lokalizacji, które przyjmują tego typu jako argumentu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli odpowiednika <xref:System.Globalization.CultureInfo> mogą być tworzone, ta metoda zgłasza wyjątek. Jeśli nie chcesz, aby obsługa wyjątków, wywołań <xref:System.Windows.Markup.XmlLanguage.GetSpecificCulture%2A> zamiast tego.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Nie zarejestrowano <see cref="T:System.Globalization.CultureInfo" /> dla udostępnionych <see cref="T:System.Windows.Markup.XmlLanguage" /> istnieje, zgodnie z ustaleniami wywołania <see cref="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)" />.</exception>
        <altmember cref="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetLanguage">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.XmlLanguage GetLanguage (string ietfLanguageTag);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.XmlLanguage GetLanguage(string ietfLanguageTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.GetLanguage(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLanguage (ietfLanguageTag As String) As XmlLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::XmlLanguage ^ GetLanguage(System::String ^ ietfLanguageTag);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.XmlLanguage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ietfLanguageTag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ietfLanguageTag">Ciąg języka RFC 3066 lub pusty ciąg.</param>
        <summary>Zwraca <see cref="T:System.Windows.Markup.XmlLanguage" /> wystąpienia, na podstawie ciągu reprezentujący języka na RFC 3066.</summary>
        <returns>Nowy <see cref="T:System.Windows.Markup.XmlLanguage" /> z podanego ciągu jako jego <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> wartość.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest skutecznie konstruktora.  
  
 Ciąg języka może być pusta, w przeciwnym razie musi być zgodna z [RFC 3066](http://go.microsoft.com/fwlink/?LinkId=132454) reguł:  
  
-   Pierwszy tag podrzędny musi składać się z tylko [!INCLUDE[TLA#tla_ascii](~/includes/tlasharptla-ascii-md.md)] litery.  
  
-   Dodatkowe tagi podrzędne muszą składać się [!INCLUDE[TLA#tla_ascii](~/includes/tlasharptla-ascii-md.md)] litery lub cyfry.  
  
-   Tagi podrzędne są oddzielone znakiem pojedynczy łącznik.  
  
-   Co tag podrzędny musi być 1 – 8 znaków.  
  
-   Nie wiodących lub końcowych łączniki są dozwolone.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ietfLanguageTag" /> Parametr nie może mieć wartości null.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ietfLanguageTag" /> Parametr był pusty, ale nie jest zgodny ze składni określona w dokumencie RFC 3066.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSpecificCulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo GetSpecificCulture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Globalization.CultureInfo GetSpecificCulture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.GetSpecificCulture" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSpecificCulture () As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Globalization::CultureInfo ^ GetSpecificCulture();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca blisko związane z systemem innym niż neutralne <see cref="T:System.Globalization.CultureInfo" /> dla tego <see cref="T:System.Windows.Markup.XmlLanguage" />.</summary>
        <returns>A <see cref="T:System.Globalization.CultureInfo" /> które mogą być używane dla lokalizacji globalizacji [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] wywołania, które przyjmują tego typu jako argumentu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Windows.Markup.XmlLanguage> jest równa <xref:System.Windows.Markup.XmlLanguage.Empty%2A?displayProperty=nameWithType> , a następnie ta metoda zwróci <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>.  
  
 Ta metoda umożliwia znalezienie zarejestrowaną <xref:System.Globalization.CultureInfo> dopasowanie prefiksu najdłuższym możliwe <xref:System.Windows.Markup.XmlLanguage>. Jeśli które zarejestrowane <xref:System.Globalization.CultureInfo> jest obojętny (<xref:System.Globalization.CultureInfo.IsNeutralCulture%2A> jest `true`), a następnie ta metoda polega na wywołanie <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> mapować neutralnej <xref:System.Globalization.CultureInfo> na określoną.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Nie pokrewne nieneutralną <see cref="T:System.Globalization.CultureInfo" /> jest zarejestrowany dla bieżącego <see cref="T:System.Windows.Markup.XmlLanguage" /><see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IetfLanguageTag">
      <MemberSignature Language="C#" Value="public string IetfLanguageTag { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IetfLanguageTag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IetfLanguageTag As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IetfLanguageTag { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera reprezentację ciągu znacznik języka.</summary>
        <value>Reprezentacja ciągu znacznik języka.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość może zwrócić znormalizowane wersję ciągu określona pierwotnie przewidzianych do <xref:System.Windows.Markup.XmlLanguage.GetLanguage%2A>.  
  
 Ta właściwość może również zwrócić <xref:System.String.Empty> Jeśli pusty ciąg został dołączony do <xref:System.Windows.Markup.XmlLanguage.GetLanguage%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca <see cref="T:System.String" /> reprezentujący bieżącą <see cref="T:System.Windows.Markup.XmlLanguage" />.</summary>
        <returns>A <see cref="T:System.String" /> reprezentujący bieżącą <see cref="T:System.Windows.Markup.XmlLanguage" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To polecenie zwróci <xref:System.Windows.Markup.XmlLanguage.IetfLanguageTag%2A> wartość bieżącej klasy <xref:System.Windows.Markup.XmlLanguage>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>