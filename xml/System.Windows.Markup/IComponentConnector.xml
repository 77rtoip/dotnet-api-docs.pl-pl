<Type Name="IComponentConnector" FullName="System.Windows.Markup.IComponentConnector">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c483a3ed14ba335ba3804ec518820fbaf9779bf5" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48714071" /></Metadata><TypeSignature Language="C#" Value="public interface IComponentConnector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IComponentConnector" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.IComponentConnector" />
  <TypeSignature Language="VB.NET" Value="Public Interface IComponentConnector" />
  <TypeSignature Language="C++ CLI" Value="public interface class IComponentConnector" />
  <TypeSignature Language="F#" Value="type IComponentConnector = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Umożliwia obsługę kompilacji znaczników i narzędzia dla nazwanych elementów XAML i dołączanie procedury obsługi zdarzeń do nich.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten interfejs jest używana wewnętrznie przez <xref:System.Windows.Baml2006.Baml2006Reader>.  
  
 Implementacje <xref:System.Windows.Markup.IComponentConnector.InitializeComponent%2A> są szeroko możliwość obserwowania jako część infrastruktury zapewnianej przez platformy lub technologii, które używają XAML w połączeniu z aplikacji i modeli programowania. Na przykład zawsze wtedy, gdy przyjrzymy się wygenerowanych klas dla elementów katalogu głównego XAML w WPF stron i aplikacji, zobaczysz <xref:System.Windows.Markup.IComponentConnector.InitializeComponent%2A> zdefiniowane w danych wyjściowych. Ta metoda również istnieje w skompilowanym zestawie i odgrywa rolę w modelu aplikacji WPF ładowania zawartości interfejsu użytkownika XAML podczas analizy XAML. Aby uzyskać więcej informacji na temat integracji WPF `InitializeComponent` koncepcji, zobacz [Zarządzanie aplikacjami — omówienie](~/docs/framework/wpf/app-development/application-management-overview.md) lub [związanym z kodem i XAML w WPF](~/docs/framework/wpf/advanced/code-behind-and-xaml-in-wpf.md).  
  
 W poprzednich wersjach programu .NET Framework ten interfejs istniały w zestawie charakterystyczne dla WPF WindowsBase. W [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.IComponentConnector> znajduje się w zestawie System.Xaml. . Aby uzyskać więcej informacji, zobacz [typy migrowane z WPF do System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).  
  
> [!TIP]
>  Rozpoznanie <xref:System.Windows.Markup.IComponentConnector> podczas próby kompilacji stanowi często wskaźnik, nie zaktualizowano projekt WPF poprawnie. W szczególności projekt nie odwołuje się do zestawu System.Xaml dla projektu, który jest przeznaczony dla [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]. Spróbuj uruchomić `devenv /upgrade` opcji dla projektu lub, w przeciwnym razie dostosowywać odwołania do zestawów projektu tak, aby System.Xaml znajduje się na liście odwołania.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (int connectionId, object target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Connect(int32 connectionId, object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.IComponentConnector.Connect(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (connectionId As Integer, target As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(int connectionId, System::Object ^ target);" />
      <MemberSignature Language="F#" Value="abstract member Connect : int * obj -&gt; unit" Usage="iComponentConnector.Connect (connectionId, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connectionId" Type="System.Int32" />
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="connectionId">Token identyfikatora w celu odróżnienia wywołania.</param>
        <param name="target">Obiekt docelowy połączyć zdarzenia i nazwy.</param>
        <summary>Dołącza nazwy i zdarzeń do skompilowanej zawartości.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.IComponentConnector> jest używana wewnętrznie przez <xref:System.Windows.Baml2006.Baml2006Reader>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeComponent">
      <MemberSignature Language="C#" Value="public void InitializeComponent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InitializeComponent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.IComponentConnector.InitializeComponent" />
      <MemberSignature Language="VB.NET" Value="Public Sub InitializeComponent ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InitializeComponent();" />
      <MemberSignature Language="F#" Value="abstract member InitializeComponent : unit -&gt; unit" Usage="iComponentConnector.InitializeComponent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ładuje kompilowanej stronie składnika.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.IComponentConnector> jest używana wewnętrznie przez <xref:System.Windows.Baml2006.Baml2006Reader>.  
  
 Implementacje <xref:System.Windows.Markup.IComponentConnector.InitializeComponent%2A> są szeroko możliwość obserwowania jako część infrastruktury zapewnianej przez platformy lub technologii, które używają XAML w połączeniu z aplikacji i modeli programowania. Na przykład zawsze wtedy, gdy przyjrzymy się wygenerowanych klas dla elementów katalogu głównego XAML w WPF stron i aplikacji, zobaczysz <xref:System.Windows.Markup.IComponentConnector.InitializeComponent%2A> zdefiniowane w danych wyjściowych. Ta metoda również istnieje w skompilowanym zestawie i odgrywa rolę w modelu aplikacji WPF ładowania zawartości interfejsu użytkownika XAML podczas analizy XAML. Aby uzyskać więcej informacji na temat integracji WPF `InitializeComponent` koncepcji, zobacz [Zarządzanie aplikacjami — omówienie](~/docs/framework/wpf/app-development/application-management-overview.md) lub [związanym z kodem i XAML w WPF](~/docs/framework/wpf/advanced/code-behind-and-xaml-in-wpf.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>