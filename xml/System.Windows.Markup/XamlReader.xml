<Type Name="XamlReader" FullName="System.Windows.Markup.XamlReader">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2c7b0834c6137c0fca8506b9e7ad74a71a202c2f" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36501763" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XamlReader" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlReader extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.XamlReader" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlReader" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlReader" />
  <TypeSignature Language="F#" Value="type XamlReader = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Odczytuje dane wejściowe XAML i tworzy wykres obiektu przy użyciu czytnika XAML domyślne WPF i skojarzone moduł zapisywania obiektów języka XAML.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Synchroniczne <xref:System.Windows.Markup.XamlReader.Load%2A> metody są statyczne, ale asynchroniczną <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> metod nie są statyczne i wymagają wystąpienia <xref:System.Windows.Markup.XamlReader> klasy do użycia.  
  
 Dane wyjściowe `Load` metody jest pojedynczy obiekt reprezentuje obiekt główny drzewa utworzony obiekt lub obiekt Wykres. Wykresy, które są tworzone przez obiekt <xref:System.Windows.Markup.XamlReader> zazwyczaj są dodawane do istniejącego drzewa obiektów w aplikacji WPF w czasie wykonywania. W przeciwnym razie nowy wykres obiektu jest traktowany jako odłączona na potrzeby modelu aplikacji WPF. To oznacza, że nie jest renderowana i nie może dotyczyć używanych użyciu dowolną z metod drzewa obiektów jako drzewa obiektów głównych aplikacji WPF (na przykład interfejsy API <xref:System.Windows.FrameworkElement.FindName%2A>, <xref:System.Windows.LogicalTreeHelper>, <xref:System.Windows.Media.VisualTreeHelper>). Aby uzyskać więcej informacji dotyczących obiektu drzewa pojęć, zobacz [drzewa WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).  
  
 <xref:System.Windows.Markup.XamlReader> obsługuje następujące scenariusze głównej:  
  
-   **Fabryka w klonowania obiektu**: bez dodatkowych mechanizmów typu odwołania zasadniczo nie może być uwzględniany w więcej niż jedną pozycję w drzewie obiektu WPF. (Dodatkowe mechanizmy, które oferują obsługę udostępniania lub ponownie użyj na platformie WPF przykłady obiektów, które są oparte na <xref:System.Windows.Freezable>, lub obsługę często możliwe do udostępnienia obiektów, takich jak <xref:System.Windows.Media.Brush> który jest określany jako element <xref:System.Windows.ResourceDictionary>.) Jednym ze sposobów obiekt, który znajduje się już w klonowania jest drzewa obiektów do serializacji obiektów przy użyciu <xref:System.Windows.Markup.XamlWriter.Save%2A?displayProperty=nameWithType>. Następnie możesz użyć serializacji ciągu jako dane wejściowe do wywołania <xref:System.Windows.Markup.XamlReader.Load%2A>, za pomocą strumienia lub <xref:System.Xml.XmlReader> jako pośrednik.  
  
-   **Konstruowanie obiektów w oparciu o informacje w czasie**: często są inne sposoby ma wejścia późne powiązania lub dostarczone przez użytkownika zmiany stanu istniejących obiektów. Na przykład można używać tej samej wartości można ustawić więcej niż jedną właściwość lub użyj wiązania z danymi. Ale jeśli scenariusz, w którym nawet typ obiektu do utworzenia jest tylko możliwa do ustalenia w czasie wykonywania, lub z interakcji z użytkownikiem, następnie utworzenie takiego obiektu przez utworzenie ciąg w celu <xref:System.Windows.Markup.XamlReader.Load%2A> dane wejściowe są często technika przydatne.  
  
-   **Przy użyciu technik, istniejącego zasobu**: <xref:System.IO.Stream> typu jest często używane w innych platform lub technologii przesyłania danych ani obiektów poza granicami aplikacji lub w sytuacjach podobne. Następnie można użyć <xref:System.IO.Stream> technik w celu przechowywania lub uzyskać danych w formacie XAML, który ostatecznie zostanie użyty do utworzenia obiektu w ramach aplikacji.  
  
-   **Stałe dokumentów:** aplikacja może załadować dokumenty XPS lokalnego lub pobrany do włączenia do drzewa obiektów w aplikacji WPF i interfejsu użytkownika.  
  
> [!NOTE]
>  Czasami tej dokumentacji opisano wykres obiektu, w przeciwieństwie do drzewa obiektów. Relacji nadrzędny podrzędny ograniczeniami nie zawsze istnieje w relacje między obiektami czas wykonywania aplikacji WPF, więc wykres obiektu jest powszechnie stosowane terminologii. Jednak ponieważ WPF obejmuje również conceptualization innego drzewa dwóch interfejsów API (<xref:System.Windows.LogicalTreeHelper>, <xref:System.Windows.Media.VisualTreeHelper>) metaphor drzewa nadal mają zastosowanie odpowiednio najczęściej rzeczywistych na platformie WPF. Z perspektywy języka XAML, wykres obiektu jest często najlepszym sposobem zastanowić, tworzenia obiektów poza XAML, ponieważ sam języka XAML nie musi określać metodologii klasa pomocnika, których relacje jeden do ponownie struktury drzewa.  
  
## <a name="code-access-security-loose-xaml-and-xamlreader"></a>Zabezpieczenia dostępu kodu, utracić XAML i XamlReader  
 XAML jest język bezpośrednio reprezentuje podczas tworzenia wystąpienia obiektu i wykonywanie. W związku z tym elementy utworzone w języku XAML ma tego samego możliwość interakcji z zasobami systemu (na przykład sieci dostępu do pliku systemu We/Wy) jako równoważne, generowany jest kod.  
  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] obsługuje [!INCLUDE[TLA2#tla_net](~/includes/tla2sharptla-net-md.md)] strukturę zabezpieczeń [!INCLUDE[TLA#tla_cas](~/includes/tlasharptla-cas-md.md)]. Oznacza to, że [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] zawartości w strefie internet ma ograniczone uprawnienia wykonywania. "Luźno XAML" (strony XAML Nieskompilowane interpretowana w czasie ładowania przez Podgląd XAML) i [!INCLUDE[TLA#tla_xbap](~/includes/tlasharptla-xbap-md.md)] są zazwyczaj uruchamiane w tej strefie internet i ten sam zestaw uprawnień.  Jednak XAML załadowany w pełni zaufany aplikacji ma takie same prawa dostępu do zasobów systemowych, jak hostingu aplikacji. Aby uzyskać więcej informacji, zobacz [WPF częściowego zaufania zabezpieczeń](~/docs/framework/wpf/wpf-partial-trust-security.md).  
  
 Konsekwencje te instrukcje dla <xref:System.Windows.Markup.XamlReader> jest, że projekt musi podjęcie decyzji o zaufaniu XAML zdecydujesz się załadować. Ładowania XAML, który nie jest zaufany, należy rozważyć zaimplementowanie własne technika sandboxing jak załadować wynikowego wykresu obiektu.  
  
 <xref:System.Windows.Markup.XamlReader> również może być wywoływany przez kod częściowego zaufania. W takim przypadku strefy zabezpieczeń Internet jest stosowane do zabezpieczenia dostępu kodu. Jeśli w XAML załadować jest nieprawidłowy w strefie Internet, jest zwracany wyjątek analizy XAML. W obszarze XBAP i innych przypadków, które są częściowej relacji zaufania na poziomie platformy, gdzie <xref:System.Windows.Markup.XamlReader> jest częścią wykonywania, możesz uzyskać takie samo zachowanie wyjątek tak jak w przypadku wywołania jawne częściowej relacji zaufania.  
  
## <a name="wpf-xaml-xaml-readerswriters-and-xaml-language-versioning"></a>WPF XAML, XAML czytników/autorzy i przechowywanie wersji języka XAML  
 [!INCLUDE[xaml2009](~/includes/xaml2009-md.md)] obejmuje funkcje języka, takich jak i. Można użyć sygnatur `Load` lub `Parse` można załadować pliku XAML, który używa tych funkcji. Jednak te funkcje językowe nie są obsługiwane dla języka XAML, który musi być kompilacji znaczników (takich jak XAML dla **strony** akcji w aplikacji WPF lub dowolnego języka XAML, która obejmuje zadania kompilacji znaczników w akcji kompilacji kompilacji).  
  
 Typy WPF i technologii WPF ogólnie obsługuje pojęcia, które opierają się na dostęp do wewnętrzne WPF. Na przykład jak WPF implementuje właściwości zależności zależy od wewnętrznego techniki wydajne członka typu wyszukiwania. Dostęp do tych wewnętrzne jest włączana przez XAML, odczytywanie i zapisywanie interfejsów API dostarczonych w <xref:System.Windows.Markup.XamlWriter> i <xref:System.Windows.Markup.XamlReader> z <xref:System.Windows.Markup> przestrzeni nazw i zestawu PresentationFramework. Jednak niższego poziomu czytników XAML i autorzy XAML z zestawu System.Xaml (na podstawie klasy <xref:System.Xaml.XamlReader?displayProperty=nameWithType>, <xref:System.Xaml.XamlWriter?displayProperty=nameWithType>) nie mają dostępu do ustawienia wewnętrzne WPF. Nie ma żadnych zależności z System.Xaml do dowolnego zestawu specyficzne dla WPF. Bez dostępu do ustawienia wewnętrzne WPF czytników System.Xaml i autorzy poprawnie nie można załadować lub Zapisz WPF wszystkie typy lub typy oparte na typach WPF. W szczególności czytników System.Xaml i autorzy nie rozumie pojęcia, takie jak właściwości zależności WPF kopii Magazyn właściwości ani wszystkie szczegółowe informacje o używaniu WPF style, słownikach zasobów i szablony. Dlatego trzeba wyboru, aby:  
  
-   Czy ładowanie typów WPF i/lub są przy użyciu kodu XAML w formie BAML w dowolny sposób, należy użyć czytników PresentationFramework XAML i zapisywania XAML.  
  
-   Nie używają żadnych typów WPF lub BAML formę XAML i nie używasz innej określonych technologii firmy czytnik XAML lub wykonania modułu zapisującego XAML przyczyn, które są specyficzne dla tej struktury, użyć czytników System.Xaml XAML i zapisywania XAML.  
  
## <a name="systemxaml-backing-implementation-in-net-4"></a>System.Xaml kopii implementacja .NET 4  
 <xref:System.Windows.Markup.XamlReader> jest powierzchnię interfejsu API można wywołać dla analizatora WPF XAML poziomie struktury. Tej samej podstawowej analizatora składni języka XAML oraz wykonuje środowiska wykonawczego języka XAML, ładowanie i analizowania aplikacji WPF przeznaczonych [!INCLUDE[net_v30_short](~/includes/net-v30-short-md.md)] i [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)].  
  
 Jeśli aplikacja jest przeznaczona dla [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], zewnętrznego interfejsu API jest taki sam, ale części wdrożenia są tworzone [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] ogólne implementacji XAML w zestawie System.Xaml, co zwiększa wiele aspektów technicznych i raportowania analiza kodu XAML. Celem [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] zawsze powoduje tym System.Xaml jako odwołanie i szczegóły implementacji, takie jak wyjątki zgłoszone mogą pochodzić z System.Xaml zdefiniowanych typów.  
  
## Examples  
 Poniższy przykład konwertuje <xref:System.Windows.Controls.Button> na ciąg za pomocą <xref:System.Windows.Markup.XamlWriter> klasy.  Ten ciąg jest następnie ładowany do <xref:System.Windows.Controls.Button> przy użyciu statycznych <xref:System.Windows.Markup.XamlReader.Load%2A> metoda <xref:System.Windows.Markup.XamlReader> klasy.  
  
 [!code-csharp[xamlreaderwritersnippets#XamlReaderLoadXmlReader](~/samples/snippets/csharp/VS_Snippets_Wpf/XamlReaderWriterSnippets/CSharp/Window1.xaml.cs#xamlreaderloadxmlreader)]
 [!code-vb[xamlreaderwritersnippets#XamlReaderLoadXmlReader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XamlReaderWriterSnippets/visualbasic/window1.xaml.vb#xamlreaderloadxmlreader)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Markup.XamlWriter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlReader();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Markup.XamlReader" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.CancelAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync();" />
      <MemberSignature Language="F#" Value="member this.CancelAsync : unit -&gt; unit" Usage="xamlReader.CancelAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Przerywa bieżącej operacji asynchronicznych obciążenia, jeśli istnieje oczekująca operacja asynchronicznego obciążenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.XamlReader.CancelAsync%2A> Operacja asynchroniczna; w związku z tym niektóre ładowania może wystąpić, zanim operacja została przerwana.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWpfSchemaContext">
      <MemberSignature Language="C#" Value="public static System.Xaml.XamlSchemaContext GetWpfSchemaContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xaml.XamlSchemaContext GetWpfSchemaContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.GetWpfSchemaContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetWpfSchemaContext () As XamlSchemaContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xaml::XamlSchemaContext ^ GetWpfSchemaContext();" />
      <MemberSignature Language="F#" Value="static member GetWpfSchemaContext : unit -&gt; System.Xaml.XamlSchemaContext" Usage="System.Windows.Markup.XamlReader.GetWpfSchemaContext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca <see cref="T:System.Xaml.XamlSchemaContext" /> obiekt, który reprezentuje ustawienia kontekst schematu WPF dla <see cref="T:System.Windows.Markup.XamlReader" />.</summary>
        <returns>A <see cref="T:System.Xaml.XamlSchemaContext" /> obiekt, który reprezentuje ustawienia kontekst schematu WPF dla <see cref="T:System.Windows.Markup.XamlReader" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Odczytuje dane wejściowe XAML i Zwraca pierwiastek drzewie odpowiednich obiektów.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.Stream -&gt; obj" Usage="System.Windows.Markup.XamlReader.Load stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">Kod XAML, aby załadować w formie strumienia.</param>
        <summary>Odczytuje dane wejściowe XAML w określonym <see cref="T:System.IO.Stream" /> i zwraca <see cref="T:System.Object" /> oznacza to katalog główny drzewa odpowiednich obiektów.</summary>
        <returns>Obiekt w katalogu głównym drzewa utworzony obiekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład jest zapisywany <xref:System.Windows.Controls.Button> do <xref:System.IO.MemoryStream> przy użyciu <xref:System.Windows.Markup.XamlWriter> klasy. Strumień jest następnie ładowany do <xref:System.Windows.Controls.Button> przy użyciu statycznych <xref:System.Windows.Markup.XamlReader.Load%2A> metoda <xref:System.Windows.Markup.XamlReader> klasy.  
  
 [!code-csharp[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/csharp/VS_Snippets_Wpf/XamlReaderWriterSnippets/CSharp/Window1.xaml.cs#xamlreaderloadxmlreader)]
 [!code-vb[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XamlReaderWriterSnippets/visualbasic/window1.xaml.vb#xamlreaderloadxmlreader)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> jest <see langword="null" />.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xaml.XamlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xaml.XamlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.Xaml.XamlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XamlReader) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xaml::XamlReader ^ reader);" />
      <MemberSignature Language="F#" Value="static member Load : System.Xaml.XamlReader -&gt; obj" Usage="System.Windows.Markup.XamlReader.Load reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xaml.XamlReader" />
      </Parameters>
      <Docs>
        <param name="reader">A <see cref="T:System.Xaml.XamlReader" /> obiektu. Oczekuje się można zainicjować przy użyciu wejściowych XAML.</param>
        <summary>Odczytuje dane wejściowe XAML za pomocą podanego <see cref="T:System.Xaml.XamlReader" /> i zwraca obiekt, który jest elementem głównym drzewa odpowiednich obiektów.</summary>
        <returns>Obiekt, który jest elementem głównym drzewa utworzony obiekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dane wejściowe <xref:System.Xaml.XamlReader> może być <xref:System.Windows.Baml2006.Baml2006Reader>. Jest to, jak załadować BAML w czasie wykonywania, lub do lokalizacji narzędzia celów.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XmlReader) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="static member Load : System.Xml.XmlReader -&gt; obj" Usage="System.Windows.Markup.XamlReader.Load reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <see cref="T:System.Xml.XmlReader" /> Który został już załadowany XAML danych wejściowych do załadowania w postaci XML.</param>
        <summary>Odczytuje dane wejściowe XAML w określonym <see cref="T:System.Xml.XmlReader" /> i zwraca obiekt, który jest elementem głównym drzewa odpowiednich obiektów.</summary>
        <returns>Obiekt, który jest elementem głównym drzewa utworzony obiekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje <xref:System.Windows.Controls.Button> na ciąg za pomocą <xref:System.Windows.Markup.XamlWriter> klasy.  Ten ciąg jest następnie ładowany do <xref:System.Windows.Controls.Button> przy użyciu statycznych <xref:System.Windows.Markup.XamlReader.Load%2A> metoda <xref:System.Windows.Markup.XamlReader> klasy.  
  
 [!code-csharp[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/csharp/VS_Snippets_Wpf/XamlReaderWriterSnippets/CSharp/Window1.xaml.cs#xamlreaderloadxmlreader)]
 [!code-vb[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XamlReaderWriterSnippets/visualbasic/window1.xaml.vb#xamlreaderloadxmlreader)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> jest <see langword="null" />.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.Stream stream, System.Windows.Markup.ParserContext parserContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.Stream stream, class System.Windows.Markup.ParserContext parserContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.IO.Stream,System.Windows.Markup.ParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::Stream ^ stream, System::Windows::Markup::ParserContext ^ parserContext);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.Stream * System.Windows.Markup.ParserContext -&gt; obj" Usage="System.Windows.Markup.XamlReader.Load (stream, parserContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" />
      </Parameters>
      <Docs>
        <param name="stream">Strumień, który zawiera XAML danych wejściowych do załadowania.</param>
        <param name="parserContext">Informacje o kontekście używane przez analizator.</param>
        <summary>Odczytuje dane wejściowe XAML w określonym <see cref="T:System.IO.Stream" /> i zwraca obiekt, który jest elementem głównym drzewa odpowiednich obiektów.</summary>
        <returns>Obiekt, który jest elementem głównym drzewa utworzony obiekt.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> jest <see langword="null" />.  - lub - <paramref name="parserContext" /> jest <see langword="null" />.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LoadAsync">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Odczytuje znaczników XAML i zwraca obiekt, który odpowiada w katalogu głównym określonej znaczników.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.LoadAsync : System.IO.Stream -&gt; obj" Usage="xamlReader.LoadAsync stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">Strumień XAML zawierającego dane wejściowe obciążenia.</param>
        <summary>Odczytuje dane wejściowe XAML w określonym <see cref="T:System.IO.Stream" /> i Zwraca pierwiastek drzewie odpowiednich obiektów.</summary>
        <returns>Obiekt, który jest elementem głównym drzewa utworzony obiekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Operacja asynchroniczna obciążenia XAML początkowo zwróci obiekt, który jest wyłącznie do obiektu głównego. Asynchronicznie następnie analizowanie zawartości XAML nadal i wszystkie jego obiekty podrzędne są wypełnione w katalogu głównym. Dzięki temu nie trzeba typowe WPF XAML przetwarzania zachowania i jego interakcji z WPF koncepcji okres istnienia obiektu. Interakcja typowe (z systemem innym niż — async) wszystkie właściwości obiektu w tym wszystkie kolekcje podrzędne są wypełnione przed zwracanie elementu i raportowania go jako załadowane. To zachowanie jest równa metodologia dołu do góry tworzenia drzewa przypadku ostatni obiekt na udostępnienie obiektu głównego.  
  
 Zazwyczaj miejsce w aplikacji WPF drzewa obiektów przypisywanej zwrócony obiekt, z wiedzy, które zawartości może nadal być wypełnianie i może spowodować aktualizacje przyrostowe układu, jeśli cała zawartość jest udostępniany jako część interfejsu użytkownika. Z tego powodu jest typowy do izolowania lub wirtualizację wszelkie obiekty asynchronicznie załadować z pliku XAML, a na potrzeby powiadomienia, kiedy stan aplikacji lub specyficzne dla aplikacji logiki <xref:System.Windows.Markup.XamlReader.LoadCompleted> jest obsługiwane.  
  
 Aby <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> załadować XAML wejściowych asynchronicznie, element główny w języku XAML, danych wejściowych musi zawierać atrybut i wartość `x:SynchronousMode="Async"`. Wartość jest traktowany jako wielkość liter. Jeśli główny wejściowych XAML nie zawiera `x:SynchronousMode="Async"`, nie wyjątku i wywołanie jest przetwarzany jako synchroniczne obciążenia (zobacz <xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%29>).  
  
 Tylko jedna operacja asynchroniczne ładowanie każdego wystąpienia <xref:System.Windows.Markup.XamlReader> klasy można wykonać w czasie.  Jeśli nastąpiła więcej niż jedną operację asynchroniczną, w tym samym wystąpieniu <xref:System.Windows.Markup.XamlReader> klasy <xref:System.InvalidOperationException> jest generowany.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Wiele operacji obciążenia oczekujących jednocześnie takie same <see cref="T:System.Windows.Markup.XamlReader" />.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadAsync (reader As XmlReader) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.LoadAsync : System.Xml.XmlReader -&gt; obj" Usage="xamlReader.LoadAsync reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">Istniejące <see cref="T:System.Xml.XmlReader" /> który został już załadowany odczytu danych wejściowych XAML.</param>
        <summary>Odczytuje dane wejściowe XAML w określonym <see cref="T:System.Xml.XmlReader" /> i Zwraca pierwiastek drzewie odpowiednich obiektów.</summary>
        <returns>Korzeń drzewa utworzony obiekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Operacja asynchroniczna obciążenia XAML początkowo zwróci obiekt, który jest wyłącznie do obiektu głównego. Asynchronicznie następnie analizowanie zawartości XAML nadal i wszystkie jego obiekty podrzędne są wypełnione w katalogu głównym. Dzięki temu nie trzeba typowe WPF XAML przetwarzania zachowania i jego interakcji z WPF koncepcji okres istnienia obiektu. Interakcja typowe (z systemem innym niż — async) wszystkie właściwości obiektu w tym wszystkie kolekcje podrzędne są wypełnione przed zwracanie elementu i raportowania go jako załadowane. To zachowanie jest równa metodologia dołu do góry tworzenia drzewa przypadku ostatni obiekt na udostępnienie obiektu głównego.  
  
 Należy zwykle przypisać zwrócony obiekt z <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> miejsce w drzewie obiekt aplikacji, wiedzy, że zawartość może nadal być wypełnianie i może powodować aktualizacje przyrostowe układu, jeśli cała zawartość jest udostępniany jako część INTERFEJS UŻYTKOWNIKA. Z tego powodu jest typowy do izolowania lub wirtualizację wszelkie obiekty asynchronicznie załadować z pliku XAML, a na potrzeby powiadomienia, kiedy stan aplikacji lub specyficzne dla aplikacji logiki <xref:System.Windows.Markup.XamlReader.LoadCompleted> jest obsługiwane.  
  
 Aby <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> załadować XAML wejściowych asynchronicznie, element główny w kodzie XAML musi zawierać atrybut i wartość `x:SynchronousMode="Async"`. Wartość jest traktowany jako wielkość liter. Jeśli główny znaczników XAML nie zawiera `x:SynchronousMode="Async"`, nie wyjątku i wywołanie zamiast tego jest przetwarzany jako synchroniczne obciążenia (zobacz <xref:System.Windows.Markup.XamlReader.Load%28System.Xml.XmlReader%29>).  
  
 Tylko jedna operacja asynchroniczne ładowanie każdego wystąpienia <xref:System.Windows.Markup.XamlReader> klasy można wykonać w czasie.  Jeśli nastąpiła więcej niż jedną operację asynchroniczną, w tym samym wystąpieniu <xref:System.Windows.Markup.XamlReader> klasy <xref:System.InvalidOperationException> jest generowany.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Wiele operacji obciążenia są wykonywane równocześnie takie same <see cref="T:System.Windows.Markup.XamlReader" />.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.IO.Stream stream, System.Windows.Markup.ParserContext parserContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.IO.Stream stream, class System.Windows.Markup.ParserContext parserContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream,System.Windows.Markup.ParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::IO::Stream ^ stream, System::Windows::Markup::ParserContext ^ parserContext);" />
      <MemberSignature Language="F#" Value="member this.LoadAsync : System.IO.Stream * System.Windows.Markup.ParserContext -&gt; obj" Usage="xamlReader.LoadAsync (stream, parserContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" />
      </Parameters>
      <Docs>
        <param name="stream">Strumień XAML zawierającego dane wejściowe obciążenia.</param>
        <param name="parserContext">Informacje o kontekście używane przez analizator.</param>
        <summary>Odczytuje dane wejściowe XAML w określonym <see cref="T:System.IO.Stream" /> i Zwraca pierwiastek drzewie odpowiednich obiektów.</summary>
        <returns>Korzeń drzewa utworzony obiekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Operacja asynchroniczna obciążenia XAML początkowo zwróci obiekt, który jest wyłącznie do obiektu głównego. Asynchronicznie następnie analizowanie zawartości XAML nadal i wszystkie jego obiekty podrzędne są wypełnione w katalogu głównym. Dzięki temu nie trzeba typowe WPF XAML przetwarzania zachowania i jego interakcji z WPF koncepcji okres istnienia obiektu. Interakcja typowe (z systemem innym niż — async) wszystkie właściwości obiektu w tym wszystkie kolekcje podrzędne są wypełnione przed zwracanie elementu i raportowania go jako załadowane. To zachowanie jest równa metodologia dołu do góry tworzenia drzewa przypadku ostatni obiekt na udostępnienie obiektu głównego.  
  
 Zazwyczaj przypisywanej zwrócony obiekt miejsce w drzewie obiekt aplikacji, z wiedzy, które zawartości może nadal być wypełnianie i może powodować aktualizacje przyrostowe układu, jeśli cała zawartość jest udostępniany jako część interfejsu użytkownika. Z tego powodu jest typowy do izolowania lub wirtualizację wszelkie obiekty asynchronicznie załadować z pliku XAML, a na potrzeby powiadomienia, kiedy stan aplikacji lub specyficzne dla aplikacji logiki <xref:System.Windows.Markup.XamlReader.LoadCompleted> jest obsługiwane.  
  
 Aby <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> załadować znaczników asynchronicznie, element główny w kodzie XAML musi zawierać atrybut i wartość `x:SynchronousMode="Async"`. Wartość jest traktowany jako wielkość liter. Jeśli główny znaczników XAML nie zawiera `x:SynchronousMode="Async"`, nie wyjątku i wywołanie jest przetwarzany jako synchroniczne obciążenia (zobacz <xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%2CSystem.Windows.Markup.ParserContext%29>).  
  
 Tylko jedna operacja asynchroniczne ładowanie każdego wystąpienia <xref:System.Windows.Markup.XamlReader> klasy można wykonać w czasie.  Jeśli nastąpiła więcej niż jedną operację asynchroniczną, w tym samym wystąpieniu <xref:System.Windows.Markup.XamlReader> klasy <xref:System.InvalidOperationException> jest generowany.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Wiele operacji obciążenia są wykonywane równocześnie takie same <see cref="T:System.Windows.Markup.XamlReader" />.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="LoadCompleted">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.AsyncCompletedEventHandler LoadCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.AsyncCompletedEventHandler LoadCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Markup.XamlReader.LoadCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event LoadCompleted As AsyncCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::AsyncCompletedEventHandler ^ LoadCompleted;" />
      <MemberSignature Language="F#" Value="member this.LoadCompleted : System.ComponentModel.AsyncCompletedEventHandler " Usage="member this.LoadCompleted : System.ComponentModel.AsyncCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po zakończeniu operacji asynchronicznej obciążenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.XamlReader.LoadCompleted> jest również zgłaszane w przypadku przerwanie operacji asynchronicznych obciążenia.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncCompletedEventHandler" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Odczytuje kod znaczników w parametrach określony tekst i zwraca obiekt odpowiadający w katalogu głównym określonej znaczników.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (string xamlText);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(string xamlText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (xamlText As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(System::String ^ xamlText);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; obj" Usage="System.Windows.Markup.XamlReader.Parse xamlText" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xamlText">Dane wejściowe XAML jako jeden ciąg tekstowy.</param>
        <summary>Odczytuje dane wejściowe XAML w parametrach określony tekst i zwraca obiekt odpowiadający w katalogu głównym określonej znaczników.</summary>
        <returns>Korzeń drzewa utworzony obiekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementacja wywołuje <xref:System.Windows.Markup.XamlReader.Load%2A> wewnętrznie po tworzenia strumienia z ciągu. Zobacz <xref:System.Windows.Markup.XamlReader.Load%2A> Aby uzyskać dodatkowe informacje, takie jak możliwych wyjątków.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (string xamlText, System.Windows.Markup.ParserContext parserContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(string xamlText, class System.Windows.Markup.ParserContext parserContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Parse(System.String,System.Windows.Markup.ParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(System::String ^ xamlText, System::Windows::Markup::ParserContext ^ parserContext);" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Windows.Markup.ParserContext -&gt; obj" Usage="System.Windows.Markup.XamlReader.Parse (xamlText, parserContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlText" Type="System.String" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" />
      </Parameters>
      <Docs>
        <param name="xamlText">Dane wejściowe XAML jako jeden ciąg tekstowy.</param>
        <param name="parserContext">Informacje o kontekście używane przez analizator.</param>
        <summary>Odczytuje kod znaczników XAML w ciągu określonego tekstu (przy użyciu określonej <see cref="T:System.Windows.Markup.ParserContext" />) i zwraca obiekt, który odpowiada w katalogu głównym określonej znaczników.</summary>
        <returns>Korzeń drzewa utworzony obiekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementacja wywołuje <xref:System.Windows.Markup.XamlReader.Load%2A> wewnętrznie po tworzenia strumienia z ciągu. Zobacz <xref:System.Windows.Markup.XamlReader.Load%2A> Aby uzyskać dodatkowe informacje, takie jak możliwych wyjątków.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>