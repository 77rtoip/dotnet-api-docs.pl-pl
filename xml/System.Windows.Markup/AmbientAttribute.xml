<Type Name="AmbientAttribute" FullName="System.Windows.Markup.AmbientAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6ef06ba6a6917bfcac9b7286dc147a92adbad2d8" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69167777" /></Metadata><TypeSignature Language="C#" Value="public sealed class AmbientAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AmbientAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.AmbientAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AmbientAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class AmbientAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type AmbientAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Method | System.AttributeTargets.Property, Inherited=true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Property, Inherited=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Określa, że właściwość lub typ powinien być traktowany jako otaczający. Koncepcja otoczenia odnosi się do tego, jak procesory XAML określają właścicieli typów członków.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość otoczenia jest właściwością, w której oczekiwana jest dostępność w kontekście analizatora podczas tworzenia grafu obiektów, ale w przypadku gdy typowe wyszukiwanie elementu członkowskiego typu jest zawieszone do celów bezpośredniego tworzenia zestawu węzłów XAML. Istnieją dwa główne scenariusze koncepcji otoczenia:  
  
-   Inna Właściwość tego samego obiektu wpływa i określa, w jaki sposób wyszukiwanie właściwości Object ma być wykonywane.  
  
-   Właściwość reprezentuje większy mechanizm odroczenia i otoczenia umożliwiające wyszukiwanie wartości elementu członkowskiego, które są dostępne dla wszystkich obiektów zawartych w bieżącym obiekcie.  
  
 Ten atrybut może być stosowany do określonych właściwości, które mają oczekiwane kontenery, które umożliwiają zachowanie wyszukiwania właściwości otoczenia lub można zastosować do klasy, aby umożliwić zachowanie właściwości otoczenia we wszystkich przypadkach tego typu wartości dla właściwości.  
  
 <xref:System.Windows.Markup.AmbientAttribute>można również zastosować do metody CLR, aby obsługiwać przyłączanie właściwości XAML jako otoczenia. Jest to potencjalnie konieczne, ponieważ w implementacji środowiska CLR Właściwość dołączona XAML jest zaimplementowana/reprezentowana do odbicia jako `get` wzorzec `set` akcesora z metodami i. Nie istnieje rzeczywista Właściwość środowiska CLR do atrybutu, dlatego ograniczenie użycia <xref:System.AttributeTargets> dla `Property` do nie było możliwe do określenia dołączalnego elementu członkowskiego jako otoczenia. Dla dołączalnego elementu członkowskiego, który ma być raportowany jako otoczenie, atrybut `get` metody dostępu. Nie należy podejmować próby atrybutów, które nie obsługują metod dołączalnych elementów członkowskich.  
  
 W poprzednich wersjach .NET Framework Ta klasa istniała w zestawie specyficznym dla WPF 'Windowsbase. W [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]programie <xref:System.Windows.Markup.AmbientAttribute> , znajduje się w zestawie System. XAML. Aby uzyskać więcej informacji, zobacz [typy migrowane z WPF do System. XAML](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).  
  
 Typy otoczenia (typy, <xref:System.Windows.Markup.AmbientAttribute> które są stosowane na poziomie typu) mogą być używane dla niektórych sytuacji przetwarzania XAML, w których typ właściwości musi zostać rozpoznany poza kolejnością.  
  
## <a name="object-writer-scenarios"></a>Scenariusze modułów zapisywania obiektów  
 W przypadku definiowania składnika zapisywania obiektów XAML i napotkania właściwości, metody lub typu, w którym <xref:System.Windows.Markup.AmbientAttribute> jest stosowana, zazwyczaj trzeba uzyskać dostęp do usługi, aby określić zamierzone zachowanie wyszukiwania właściwości otoczenia, które jest potrzebne do pisania obiektów. Aby uzyskać więcej informacji, zobacz <xref:System.Xaml.IAmbientProvider>.  
  
## <a name="value-converters"></a>Konwertery wartości  
 Konwertery typów lub rozszerzenia znaczników mogą znać informacje o otoczeniu, aby przetwarzać właściwości reprezentujące mapowania typu pośredniego, takie jak właściwości określające elementy członkowskie lub typy według nazw ciągów z lub bez kwalifikacji. W tym scenariuszu <xref:System.Windows.Markup.AmbientAttribute> nie jest przeznaczony do użycia bezpośrednio dla logiki kodu konwertera wartości. Zamiast tego, konwerter wartości powinien opierać się na zachowaniu przetwarzania składnika XAML, który <xref:System.Xaml.IAmbientProvider> zostanie przekazany w kontekstach usługi do metod konwertera wartości po wywołaniu.  
  
## <a name="wpf-scenarios-for-ambientattribute"></a>Scenariusze WPF dla środowiska otoczenia  
  
-   Właściwość <xref:System.Windows.Style> <xref:System.Windows.Setter.Property%2A?displayProperty=nameWithType> (<xref:System.Windows.Style.TargetType%2A>) może kwalifikować wymagane wyszukiwania nazw właściwości, które są potrzebne do znalezienia odwołań do kopii zapasowych nazw właściwości w wartościach.  
  
-   Cała zawartość we `Resources` właściwości (elementy a <xref:System.Windows.ResourceDictionary>) oraz zawartość szablonu powinna mieć możliwość dostępu do innych elementów równorzędnych jako wartości. Deklarowanie całej `Resources` właściwości jako otoczenia wywołuje logikę, która umożliwia to w analizatorze WPF XAML.  
  
 Zobacz <xref:System.Windows.ResourceDictionary> , aby zapoznać się z przykładem scenariusza <xref:System.Windows.Markup.AmbientAttribute> dla ustawienia na poziomie typu.  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Xaml.XamlMember.IsAmbient" />
    <altmember cref="T:System.Xaml.XamlMember" />
    <altmember cref="T:System.Xaml.IAmbientProvider" />
    <related type="Article" href="https://msdn.microsoft.com/library/5dfb299a-b6e2-41b8-8694-e6ac987547f1">Atrybuty CLR związane z językiem XAML dla niestandardowych typów i bibliotek</related>
    <related type="Article" href="https://msdn.microsoft.com/library/c2667cbd-2f46-4a7f-9dfc-53696e35e8e4">Definiowanie typów niestandardowych do użytku z usługami .NET Framework XAML</related>
    <related type="Article" href="https://msdn.microsoft.com/library/0e11f386-808c-4eae-9ba6-029ad7ba2211">Dokumentacja dotycząca pojęć dotyczących usługi NET XAML</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AmbientAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.AmbientAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AmbientAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Markup.AmbientAttribute" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
