<Type Name="XamlTypeMapper" FullName="System.Windows.Markup.XamlTypeMapper">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a3d3958120fe26b80e126a09c20e3314d4c834d3" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30709166" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XamlTypeMapper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlTypeMapper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.XamlTypeMapper" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlTypeMapper" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlTypeMapper" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Mapuje nazwę elementu XAML na odpowiednie CLR <see cref="T:System.Type" /> w zestawach.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.XamlTypeMapper> jest częścią scenariusza WPF zaawansowanego dostarczającego alternatywnym kontekście dla <xref:System.Windows.Markup.XamlReader> i <xref:System.Windows.Markup.XamlWriter>. Dla [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] aplikacje WPF, należy rozważyć zastępowanie <xref:System.Xaml.XamlSchemaContext> dla tego scenariusza, a nie podjęto próbę użycia <xref:System.Windows.Markup.XamlTypeMapper>.  
  
 <xref:System.Windows.Markup.XamlTypeMapper> może służyć do zapewnienia analizator XAML z informacjami dotyczącymi mapowania niestandardowych za pomocą bardziej bezpośrednie techniki niż stosowania <xref:System.Windows.Markup.XmlnsDefinitionAttribute> wartości kodu zestawu. Może to być przydatne do konsolidacji wszystkich nazw CLR w zestawie lub dla odwołania do typów, które są gotowe do XAML w istniejącego zestawu bez konieczności ponownego kompilowania go tak, aby dodać <xref:System.Windows.Markup.XmlnsDefinitionAttribute> przypisywanie.  
  
 Zazwyczaj tworzenie <xref:System.Windows.Markup.XamlTypeMapper> wystąpienia, aby określić <xref:System.Windows.Markup.ParserContext.XamlTypeMapper%2A> wartości właściwości dla <xref:System.Windows.Markup.ParserContext>. <xref:System.Windows.Markup.ParserContext> z kolei może być używana jako kontekst dla <xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%2CSystem.Windows.Markup.ParserContext%29?displayProperty=nameWithType> wywołania.  
  
## <a name="default-mapper"></a>Odwzorowanie domyślne  
 Możesz uzyskać mapowania domyślny, za pomocą <xref:System.Windows.Markup.XamlTypeMapper.DefaultMapper%2A> właściwości statycznej. Domyślne mapowanie działa tylko na liście zestaw domyślnych. Nie określone informacje na temat zestawów (jak określono w <xref:System.Windows.Markup.XamlTypeMapper> konstruktorów) jest używany.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Markup.NamespaceMapEntry" />
    <altmember cref="T:System.Windows.Markup.ParserContext" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Markup.XamlTypeMapper" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlTypeMapper (string[] assemblyNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] assemblyNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlTypeMapper.#ctor(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (assemblyNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlTypeMapper(cli::array &lt;System::String ^&gt; ^ assemblyNames);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="assemblyNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="assemblyNames">Tablica nazw zestawów <see cref="T:System.Windows.Markup.XamlTypeMapper" /> należy użyć.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Markup.XamlTypeMapper" /> nazwy klasy, określając tablicę zestawu, który <see cref="T:System.Windows.Markup.XamlTypeMapper" /> należy użyć.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="assemblyNames" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlTypeMapper (string[] assemblyNames, System.Windows.Markup.NamespaceMapEntry[] namespaceMaps);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] assemblyNames, class System.Windows.Markup.NamespaceMapEntry[] namespaceMaps) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlTypeMapper.#ctor(System.String[],System.Windows.Markup.NamespaceMapEntry[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (assemblyNames As String(), namespaceMaps As NamespaceMapEntry())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlTypeMapper(cli::array &lt;System::String ^&gt; ^ assemblyNames, cli::array &lt;System::Windows::Markup::NamespaceMapEntry ^&gt; ^ namespaceMaps);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="assemblyNames" Type="System.String[]" />
        <Parameter Name="namespaceMaps" Type="System.Windows.Markup.NamespaceMapEntry[]" />
      </Parameters>
      <Docs>
        <param name="assemblyNames">Tablica nazw zestawów <see cref="T:System.Windows.Markup.XamlTypeMapper" /> należy użyć.</param>
        <param name="namespaceMaps">Tablica nazw mapy <see cref="T:System.Windows.Markup.XamlTypeMapper" /> należy użyć.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Markup.XamlTypeMapper" /> przy użyciu określonej tablicy nazwy zestawu, a następnie mapuje określonego obszaru nazw.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="assemblyNames" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddMappingProcessingInstruction">
      <MemberSignature Language="C#" Value="public void AddMappingProcessingInstruction (string xmlNamespace, string clrNamespace, string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddMappingProcessingInstruction(string xmlNamespace, string clrNamespace, string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlTypeMapper.AddMappingProcessingInstruction(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddMappingProcessingInstruction (xmlNamespace As String, clrNamespace As String, assemblyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddMappingProcessingInstruction(System::String ^ xmlNamespace, System::String ^ clrNamespace, System::String ^ assemblyName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlNamespace" Type="System.String" />
        <Parameter Name="clrNamespace" Type="System.String" />
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xmlNamespace">Prefiks przestrzeni nazw XML.</param>
        <param name="clrNamespace">Przestrzeń nazw środowiska CLR, która zawiera typy do mapowania.</param>
        <param name="assemblyName">Zestaw, który zawiera przestrzeń nazw środowiska CLR.</param>
        <summary>Definiuje mapowanie między przestrzeni nazw XML i przestrzenie nazw CLR w zestawach i dodaje je do <see cref="T:System.Windows.Markup.XamlTypeMapper" /> informacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.XamlTypeMapper.AddMappingProcessingInstruction%2A> jest programowy sposób dodać mapowania.  Na przykład różnych części następujących instrukcji mapping XAML odpowiadają parametrom <xref:System.Windows.Markup.XamlTypeMapper.AddMappingProcessingInstruction%2A>:  
  
```  
<Window xmlns:SDK="clr-namespace:Samples;assembly=SDKSamples">  
...  
```  
  
 `xmlNamespace` Jest `SDK`, `clrNamespace` jest `Samples`i `assemblyName` jest `SDKSamples`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="xmlNamespace" /> jest <see langword="null" />  
  
 —lub—  
  
 <paramref name="clrNamespace" /> jest <see langword="null" />  
  
 —lub—  
  
 <paramref name="assemblyName" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AllowInternalType">
      <MemberSignature Language="C#" Value="protected virtual bool AllowInternalType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool AllowInternalType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlTypeMapper.AllowInternalType(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool AllowInternalType(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">Typ do uzyskania dostępu.</param>
        <summary>Żąda uprawnienia dla <see cref="T:System.Windows.Markup.XamlTypeMapper" /> pochodzi z typu, który jest wywoływana w obszarze pełne zaufanie uzyskiwać dostęp do określonego typu wewnętrznego.</summary>
        <returns>
          <see langword="true" /> Jeśli wewnętrzny typ jest możliwy; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie jest przesłonięty przez podklasę, <xref:System.Windows.Markup.XamlTypeMapper.AllowInternalType%2A> zawsze zwraca `false`.  
  
 Gdy przesłonięty przez podklasę, zachowanie powinny być który <xref:System.Windows.Markup.XamlTypeMapper.AllowInternalType%2A> powinien zwrócić `true` jeśli wewnętrzny typ może być używane; w przeciwnym razie `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultMapper">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.XamlTypeMapper DefaultMapper { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Markup.XamlTypeMapper DefaultMapper" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.XamlTypeMapper.DefaultMapper" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultMapper As XamlTypeMapper" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Markup::XamlTypeMapper ^ DefaultMapper { System::Windows::Markup::XamlTypeMapper ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.XamlTypeMapper</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wystąpienie elementu <see cref="T:System.Windows.Markup.XamlTypeMapper" /> do użycia, jeśli nie zostało określone.</summary>
        <value>Domyślne mapowanie typu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślne mapowanie działa tylko na liście zestaw domyślnych. Nie określone informacje na temat zestawów (jak określono w <xref:System.Windows.Markup.XamlTypeMapper> konstruktorów) jest używany. Bieżąca implementacja jest domyślnej listy zestawu: `WindowsBase`, `PresentationCore`, `PresentationFramework`.  
  
 Przy użyciu domyślnego mapowania nie oznacza, że nie można użyć niestandardowych zestawów/typy w języku XAML w ogóle. Tylko oznacza, że użycie typów/zestawów niestandardowych musi następnie używać, tworząc mapowania jako konwencjonalnej techniki XAML `xmlns` atrybutów w każdej strony XAML, gdzie są przywoływane typy/zestawów, zamiast mapowanie typu interfejsu API. Aby uzyskać więcej informacji, zobacz [przestrzeń nazw XAML i Namespace mapowanie WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType (string xmlNamespace, string localName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Type GetType(string xmlNamespace, string localName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlTypeMapper.GetType(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType (xmlNamespace As String, localName As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetType(System::String ^ xmlNamespace, System::String ^ localName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlNamespace" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xmlNamespace">Określony prefiks przestrzeni nazw XML.</param>
        <param name="localName">"Lokalnie" Nazwa elementu XAML można uzyskać zamapowanej <see cref="T:System.Type" /> dla. Lokalny w tym kontekście oznacza mapowane w porównaniu z dostarczonych <c>xmlNamespace</c>.</param>
        <summary>Pobiera środowisko CLR <see cref="T:System.Type" /> zamapowanego danego elementu XAML, przy użyciu określonego obszaru nazw prefiks i elementu nazwa XML.</summary>
        <returns>
          <see cref="T:System.Type" /> Dla obiekt, lub <see langword="null" /> Jeśli mapowanie nie mogą zostać rozpoznane.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie można odnaleźć typu mapujący do informacji podanych `null` jest zwracany.  
  
 Nie dołączaj prefiks jako część `localName`. Dla żadnego prefiksem informacje o elementach XAML, oddzielić go do `xmlNamespace` i `localName` składników dla tego wywołania interfejsu API.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="xmlNamespace" /> jest <see langword="null" />  
  
 —lub—  
  
 <paramref name="localName" /> jest <see langword="null" />.</exception>
        <altmember cref="T:System.Windows.Markup.IXamlTypeResolver" />
      </Docs>
    </Member>
    <Member MemberName="SetAssemblyPath">
      <MemberSignature Language="C#" Value="public void SetAssemblyPath (string assemblyName, string assemblyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAssemblyPath(string assemblyName, string assemblyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlTypeMapper.SetAssemblyPath(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAssemblyPath (assemblyName As String, assemblyPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAssemblyPath(System::String ^ assemblyName, System::String ^ assemblyPath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="assemblyPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName">Krótka nazwa zestawu bez rozszerzenia lub określona ścieżka (odpowiednikiem <see cref="P:System.Reflection.AssemblyName.Name" />).</param>
        <param name="assemblyPath">Ścieżka pliku zestawu. Ścieżka zestawu musi być pełną ścieżkę zawierającą rozszerzenie pliku.</param>
        <summary>Określa ścieżkę do użycia podczas ładowania zestawu.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="assemblyName" /> jest <see langword="null" />  
  
 —lub—  
  
 <paramref name="assemblyPath" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.Windows.Markup.XamlParseException">
          <paramref name="assemblyName" /> jest <see cref="F:System.String.Empty" />  
  
 —lub—  
  
 <paramref name="assemblyPath" /> jest <see cref="F:System.String.Empty" />  
  
 —lub—  
  
 <paramref name="assemblyPath" /> to nie pełna ścieżka pliku zawierający rozszerzenie pliku.</exception>
      </Docs>
    </Member>
  </Members>
</Type>