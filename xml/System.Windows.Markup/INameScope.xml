<Type Name="INameScope" FullName="System.Windows.Markup.INameScope">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="387741b6254120f3bedc817966a2f93b51df1d15" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface INameScope" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract INameScope" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.INameScope" />
  <TypeSignature Language="VB.NET" Value="Public Interface INameScope" />
  <TypeSignature Language="C++ CLI" Value="public interface class INameScope" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="fb108-101">Definiuje kontrakt dla jak nazwy elementów powinni mieć dostęp w taki sposób, w szczególności namescope XAML i jak wymusić unikatowość nazwy w tym namescope XAML.</span>
      <span class="sxs-lookup">
        <span data-stu-id="fb108-101">Defines a contract for how names of elements should be accessed within a particular XAML namescope, and how to enforce uniqueness of names within that XAML namescope.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb108-102">Ten interfejs jest implementowany przez klasy, które mają elementy podrzędne, które mają być ponownie używane z szablonu lub odroczenie metaphor.</span><span class="sxs-lookup"><span data-stu-id="fb108-102">This interface is implemented by classes that have child elements that are intended to be reused through the template or defer metaphor.</span></span> <span data-ttu-id="fb108-103">Szablony, fabryki i podobne konstrukcje musi mieć unikatowy namescopes XAML są niezależne od wykres obiektu głównego i głównego pliku XAML.</span><span class="sxs-lookup"><span data-stu-id="fb108-103">Templates, factories and similar constructs must have unique XAML namescopes that are separate from a main object graph and root XAML.</span></span> <span data-ttu-id="fb108-104">W tym miejscu zasada jest, że nie powinno być nie konfliktów nazw, gdy obiekty utworzone na podstawie tych elementy podrzędne zostaną wprowadzone do wykresu obiektu aplikacji i, aby operacje modelu DOM i XAML odwołanie techniki, które opierają się na podstawie identyfikatora nazwy mogą polegać na nazwę Unikatowość w każdym namescope XAML.</span><span class="sxs-lookup"><span data-stu-id="fb108-104">The principle here is that there should be no name collisions when objects created from those child elements are introduced to an application's object graph, and so that DOM operations and XAML reference techniques that rely on the name identifier can rely on name uniqueness in each XAML namescope.</span></span>  
  
 <span data-ttu-id="fb108-105">Ten interfejs były dostępne w programie WPF określonego zestawu WindowsBase w poprzednich wersjach programu .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="fb108-105">In previous versions of the .NET Framework, this interface existed in the WPF-specific assembly WindowsBase.</span></span> <span data-ttu-id="fb108-106">W [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.INameScope> znajduje się w zestawie System.Xaml.</span><span class="sxs-lookup"><span data-stu-id="fb108-106">In [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.INameScope> is in the System.Xaml assembly.</span></span> <span data-ttu-id="fb108-107">Aby uzyskać więcej informacji, zobacz [typy migrowane z WPF do System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).</span><span class="sxs-lookup"><span data-stu-id="fb108-107">For more information, see [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).</span></span>  
  
## <a name="wpf-usage-notes"></a><span data-ttu-id="fb108-108">Uwagi dotyczące użycia WPF</span><span class="sxs-lookup"><span data-stu-id="fb108-108">WPF Usage Notes</span></span>  
 <span data-ttu-id="fb108-109">Ten interfejs jest implementowany przez klasę WPF <xref:System.Windows.NameScope>.</span><span class="sxs-lookup"><span data-stu-id="fb108-109">This interface is implemented by the WPF class <xref:System.Windows.NameScope>.</span></span> <span data-ttu-id="fb108-110">Większość operacji namescope XAML w [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] działanie, używając <xref:System.Windows.NameScope> wystąpień, ale informacje od czasu do czasu przesyłane wewnętrznie przy użyciu <xref:System.Windows.Markup.INameScope> odwołania.</span><span class="sxs-lookup"><span data-stu-id="fb108-110">Most XAML namescope operations in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] operate by using <xref:System.Windows.NameScope> instances, but information is occasionally communicated internally by using <xref:System.Windows.Markup.INameScope> references.</span></span>  
  
 <span data-ttu-id="fb108-111">Przykłady klas WPF, korzystających z fabryki lub odroczenie metaphor połączone z reprezentacji XAML <xref:System.Windows.Style> i <xref:System.Windows.FrameworkTemplate>.</span><span class="sxs-lookup"><span data-stu-id="fb108-111">Examples of WPF classes that use a factory or defer metaphor combined with XAML representation are <xref:System.Windows.Style> and <xref:System.Windows.FrameworkTemplate>.</span></span> <span data-ttu-id="fb108-112">Tych implementacji zwykle polegać na jawne wersji dostępnej w sklepie metod interfejsu <xref:System.Windows.NameScope> klasy.</span><span class="sxs-lookup"><span data-stu-id="fb108-112">These implementations usually rely on the explicit versions of the interface methods available from the <xref:System.Windows.NameScope> class.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.NameScope" />
    <altmember cref="T:System.Windows.Markup.INameScopeDictionary" />
  </Docs>
  <Members>
    <Member MemberName="FindName">
      <MemberSignature Language="C#" Value="public object FindName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FindName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.FindName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindName (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindName(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="fb108-113">Identyfikator nazwy dla żądanego obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb108-113">The name identifier for the object being requested.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fb108-114">Zwraca obiekt, który ma nazwę identyfikującą podana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb108-114">Returns an object that has the provided identifying name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fb108-115">Obiekt, jeśli znaleziono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb108-115">The object, if found.</span>
          </span>
          <span data-ttu-id="fb108-116">Zwraca <see langword="null" /> Jeśli został znaleziony żaden obiekt o tej nazwie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb108-116">Returns <see langword="null" /> if no object of that name was found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb108-117">Ciągi prawidłowej nazwy w kodzie XAML musi odpowiadać wymagania opisane w temacie [xamlname — gramatyka](~/docs/framework/xaml-services/xamlname-grammar.md).</span><span class="sxs-lookup"><span data-stu-id="fb108-117">Valid name strings in XAML markup must match the requirements documented in [XamlName Grammar](~/docs/framework/xaml-services/xamlname-grammar.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="RegisterName">
      <MemberSignature Language="C#" Value="public void RegisterName (string name, object scopedElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterName(string name, object scopedElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.RegisterName(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterName (name As String, scopedElement As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterName(System::String ^ name, System::Object ^ scopedElement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scopedElement" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="fb108-118">Nazwa do zarejestrowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb108-118">The name to register.</span>
          </span>
        </param>
        <param name="scopedElement">
          <span data-ttu-id="fb108-119">Konkretny element który dostarczonych <c>nazwa</c> odwołuje się do.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb108-119">The specific element that the provided <c>name</c> refers to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fb108-120">Rejestruje podanej nazwy w bieżącym namescope XAML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb108-120">Registers the provided name into the current XAML namescope.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb108-121">Zduplikowane nazwy w XAML namescope nie są dozwolone.</span><span class="sxs-lookup"><span data-stu-id="fb108-121">Duplicate names in a XAML namescope are not permitted.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="fb108-122">Nie zezwalaj na zduplikowanych nazw ma zostać zarejestrowany.</span>
            <span class="sxs-lookup">
              <span data-stu-id="fb108-122">Do not permit duplicate names to be registered.</span>
            </span>
            <span data-ttu-id="fb108-123">Jeśli dane wejściowe <paramref name="name" /> jest już przypisana do istniejącego elementu w kolekcji wewnętrznej reprezentację XAML namescope (nawet jeśli jest ona taka sama jak <paramref name="scopedElement" />), Zgłoś wyjątek.</span>
            <span class="sxs-lookup">
              <span data-stu-id="fb108-123">If the input <paramref name="name" /> is already assigned to an existing element in the internal collection representation of the XAML namescope (even if it is the same as <paramref name="scopedElement" />), throw an exception.</span>
            </span>
            <span data-ttu-id="fb108-124">Należy również rozważyć zgłoszeniu wyjątku, jeśli podana nazwa jest niezgodna ze [xamlname — gramatyka](~/docs/framework/xaml-services/xamlname-grammar.md).</span>
            <span class="sxs-lookup">
              <span data-stu-id="fb108-124">Also consider throwing an exception if the provided name does not conform to [XamlName Grammar](~/docs/framework/xaml-services/xamlname-grammar.md).</span>
            </span>
          </para>
        </block>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="UnregisterName">
      <MemberSignature Language="C#" Value="public void UnregisterName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.UnregisterName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnregisterName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnregisterName(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="fb108-125">Nazwa wyrejestrować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb108-125">The name to unregister.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fb108-126">Wyrejestrowuje podanej nazwy z bieżącego namescope XAML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb108-126">Unregisters the provided name from the current XAML namescope.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="fb108-127">Jeśli nazwa wejściowa nie istnieje, Zgłoś wyjątek.</span>
            <span class="sxs-lookup">
              <span data-stu-id="fb108-127">If the input name does not exist, throw an exception.</span>
            </span>
            <span data-ttu-id="fb108-128">Tak, aby w tej samej nazwie może potencjalnie być zarejestrowany ponownie w przyszłości, należy usunąć nazwę i wcześniej zarejestrowany element, który odwołuje się do z kolekcji reprezentację XAML namescope.</span>
            <span class="sxs-lookup">
              <span data-stu-id="fb108-128">You should remove the name and the previously registered element it refers to from the collection representation of the XAML namescope, so that the same name could potentially be registered again in the future.</span>
            </span>
          </para>
        </block>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
  </Members>
</Type>