<Type Name="INameScope" FullName="System.Windows.Markup.INameScope">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="387741b6254120f3bedc817966a2f93b51df1d15" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30708353" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface INameScope" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract INameScope" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.INameScope" />
  <TypeSignature Language="VB.NET" Value="Public Interface INameScope" />
  <TypeSignature Language="C++ CLI" Value="public interface class INameScope" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Definiuje kontrakt dla jak nazwy elementów powinni mieć dostęp w taki sposób, w szczególności namescope XAML i jak wymusić unikatowość nazwy w tym namescope XAML.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten interfejs jest implementowany przez klasy, które mają elementy podrzędne, które mają być ponownie używane z szablonu lub odroczenie metaphor. Szablony, fabryki i podobne konstrukcje musi mieć unikatowy namescopes XAML są niezależne od wykres obiektu głównego i głównego pliku XAML. W tym miejscu zasada jest, że nie powinno być nie konfliktów nazw, gdy obiekty utworzone na podstawie tych elementy podrzędne zostaną wprowadzone do wykresu obiektu aplikacji i, aby operacje modelu DOM i XAML odwołanie techniki, które opierają się na podstawie identyfikatora nazwy mogą polegać na nazwę Unikatowość w każdym namescope XAML.  
  
 Ten interfejs były dostępne w programie WPF określonego zestawu WindowsBase w poprzednich wersjach programu .NET Framework. W [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.INameScope> znajduje się w zestawie System.Xaml. Aby uzyskać więcej informacji, zobacz [typy migrowane z WPF do System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).  
  
## <a name="wpf-usage-notes"></a>Uwagi dotyczące użycia WPF  
 Ten interfejs jest implementowany przez klasę WPF <xref:System.Windows.NameScope>. Większość operacji namescope XAML w [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] działanie, używając <xref:System.Windows.NameScope> wystąpień, ale informacje od czasu do czasu przesyłane wewnętrznie przy użyciu <xref:System.Windows.Markup.INameScope> odwołania.  
  
 Przykłady klas WPF, korzystających z fabryki lub odroczenie metaphor połączone z reprezentacji XAML <xref:System.Windows.Style> i <xref:System.Windows.FrameworkTemplate>. Tych implementacji zwykle polegać na jawne wersji dostępnej w sklepie metod interfejsu <xref:System.Windows.NameScope> klasy.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.NameScope" />
    <altmember cref="T:System.Windows.Markup.INameScopeDictionary" />
  </Docs>
  <Members>
    <Member MemberName="FindName">
      <MemberSignature Language="C#" Value="public object FindName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FindName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.FindName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindName (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindName(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Identyfikator nazwy dla żądanego obiektu.</param>
        <summary>Zwraca obiekt, który ma nazwę identyfikującą podana.</summary>
        <returns>Obiekt, jeśli znaleziono. Zwraca <see langword="null" /> Jeśli został znaleziony żaden obiekt o tej nazwie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ciągi prawidłowej nazwy w kodzie XAML musi odpowiadać wymagania opisane w temacie [xamlname — gramatyka](~/docs/framework/xaml-services/xamlname-grammar.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="RegisterName">
      <MemberSignature Language="C#" Value="public void RegisterName (string name, object scopedElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterName(string name, object scopedElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.RegisterName(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterName (name As String, scopedElement As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterName(System::String ^ name, System::Object ^ scopedElement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scopedElement" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">Nazwa do zarejestrowania.</param>
        <param name="scopedElement">Konkretny element który dostarczonych <c>nazwa</c> odwołuje się do.</param>
        <summary>Rejestruje podanej nazwy w bieżącym namescope XAML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zduplikowane nazwy w XAML namescope nie są dozwolone.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Nie zezwalaj na zduplikowanych nazw ma zostać zarejestrowany. Jeśli dane wejściowe <paramref name="name" /> jest już przypisana do istniejącego elementu w kolekcji wewnętrznej reprezentację XAML namescope (nawet jeśli jest ona taka sama jak <paramref name="scopedElement" />), Zgłoś wyjątek.  
  
 Należy również rozważyć zgłoszeniu wyjątku, jeśli podana nazwa jest niezgodna ze [xamlname — gramatyka](~/docs/framework/xaml-services/xamlname-grammar.md).</para>
        </block>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="UnregisterName">
      <MemberSignature Language="C#" Value="public void UnregisterName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.UnregisterName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnregisterName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnregisterName(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nazwa wyrejestrować.</param>
        <summary>Wyrejestrowuje podanej nazwy z bieżącego namescope XAML.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Jeśli nazwa wejściowa nie istnieje, Zgłoś wyjątek.  
  
 Tak, aby w tej samej nazwie może potencjalnie być zarejestrowany ponownie w przyszłości, należy usunąć nazwę i wcześniej zarejestrowany element, który odwołuje się do z kolekcji reprezentację XAML namescope.</para>
        </block>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
  </Members>
</Type>