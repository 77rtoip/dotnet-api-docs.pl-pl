<Type Name="IQueryAmbient" FullName="System.Windows.Markup.IQueryAmbient">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3fc4b5258dc07f4eadf8564b9485e2f54ccfd49e" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69168434" /></Metadata><TypeSignature Language="C#" Value="public interface IQueryAmbient" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IQueryAmbient" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.IQueryAmbient" />
  <TypeSignature Language="VB.NET" Value="Public Interface IQueryAmbient" />
  <TypeSignature Language="C++ CLI" Value="public interface class IQueryAmbient" />
  <TypeSignature Language="F#" Value="type IQueryAmbient = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Zapytania dotyczące tego, czy określona właściwość powinna być traktowana jak otoczenia w bieżącym zakresie.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Celem mechanizmu właściwości otoczenia jest skrócenie czasu analizowania przez przekazanie modułu zapisywania obiektów XAML w celu uniknięcia tworzenia wystąpień określonych obiektów, w przypadkach, gdy wiadomo, że obiekty są dla wartości tymczasowych i nie są przydatne dla typowego czasu wykonywania Aplikacja. Zwykle operacje wyszukiwania XAML lub przetwarzania XAML właściwości metoda dostępu get wymagają wystąpienia takich obiektów, aby wypełnić reprezentację grafu obiektów z gotowymi do użycia wartościami.  
  
 <xref:System.Windows.Markup.IQueryAmbient>ma jeden element członkowski <xref:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable%2A>:.  
  
 <xref:System.Windows.Markup.IQueryAmbient>jest mechanizmem równoległym <xref:System.Windows.Markup.AmbientAttribute>do. <xref:System.Windows.Markup.IQueryAmbient>to wyspecjalizowany mechanizm, który pozwala uniknąć używania odbicia w celu określenia informacji, i może również działać w praktyce (dany obiekt może wybrać `true` opcję `false` Zgłoś <xref:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable%2A>lub dla), natomiast atrybut jest zasadniczo statyczny. Analiza). <xref:System.Windows.Markup.AmbientAttribute>jest ogólnym mechanizmem, który może być używany przez moduły zapisujące obiektów XAML i zwykle skorelowany z dedykowanymi <xref:System.Xaml.XamlMember.IsAmbient%2A> właściwościami <xref:System.Xaml.XamlType.IsAmbient%2A>systemu typu XAML i.  
  
## <a name="wpf-implementations-of-iqueryambient"></a>Implementacje WPF IQueryAmbient  
 W WPF <xref:System.Windows.Markup.IQueryAmbient> jest używany do procesu wyszukiwania słownika zasobów. Proces wyszukiwania pobiera kolejne `Resources` wartości w drzewie logicznym WPF, działając do katalogu głównego zakresu zasobów, dopóki nie zostanie znaleziony klucz lub że klucz nie istnieje w zakresie. Zwykle wymaga to utworzenia wystąpienia <xref:System.Windows.ResourceDictionary> dla każdego momentu, aby otrzymać wyniki. Deklarowanie zawartości `Resources` jako otoczenia tak długo, jak `Resources` już istnieje optymalizuje ten proces wyszukiwania. W programie WPF ten interfejs jest implementowany w następujących przypadkach:  
  
-   <xref:System.Windows.FrameworkElement>implementuje <xref:System.Windows.FrameworkElement.System%23Windows%23Markup%23IQueryAmbient%23IsAmbientPropertyAvailable%2A> `true` <xref:System.Windows.ResourceDictionary> ,aby<xref:System.Windows.FrameworkElement.Resources%2A>zwracać dla wszystkich nazw właściwości, jeśli zawiera istniejące dla i tak długo, jak zapytanie nie jest dla samej właściwości.<xref:System.Windows.FrameworkElement.Resources%2A>  
  
-   <xref:System.Windows.Style>implementuje ten sam wzorzec dla jego <xref:System.Windows.Style.Resources%2A>.  
  
-   <xref:System.Windows.Application>implementuje ten sam wzorzec dla jego <xref:System.Windows.Application.Resources%2A>.  
  
-   <xref:System.Windows.FrameworkContentElement>implementuje ten sam wzorzec dla jego <xref:System.Windows.FrameworkContentElement.Resources%2A>.  
  
-   <xref:System.Windows.FrameworkTemplate>implementuje ten sam wzorzec dla jego <xref:System.Windows.FrameworkTemplate.Resources%2A>. Raportuje <xref:System.Windows.FrameworkTemplate.Template%2A> również zawartość jako otoczenia, ale `false` zwraca w przypadku wykonywania <xref:System.Windows.FrameworkTemplate.Template%2A> zapytań dla siebie.  
  
-   W każdym z tych przypadków odpowiednia `Resources` Właściwość (i <xref:System.Windows.FrameworkTemplate.Template%2A>) jest przypisywana jako <xref:System.Windows.Markup.AmbientAttribute>. Typowym zastosowaniem jest wykonywanie zapytań dotyczących właściwości, które nie <xref:System.Windows.Markup.AmbientAttribute> są właściwościami obiektu, które definiują interfejs. Innymi słowy, tak długo, jak słownik zasobów istnieje, aby zapewnić potencjalną wartość czasu wykonywania podczas tworzenia grafu obiektów, każda inna Właściwość oprócz kontenera właściwości słownika zasobów może być traktowana jako otoczenia.  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Xaml.XamlMember.IsAmbient" />
  </Docs>
  <Members>
    <Member MemberName="IsAmbientPropertyAvailable">
      <MemberSignature Language="C#" Value="public bool IsAmbientPropertyAvailable (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsAmbientPropertyAvailable(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsAmbientPropertyAvailable (propertyName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbientPropertyAvailable(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="abstract member IsAmbientPropertyAvailable : string -&gt; bool" Usage="iQueryAmbient.IsAmbientPropertyAvailable propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">Nazwa właściwości do sprawdzenia stanu Ambience.</param>
        <summary>Zapytania dotyczące tego, czy określona nazwana właściwość może być uważana za otoczenie w bieżącym zakresie.</summary>
        <returns><see langword="true" />Jeśli żądana właściwość może być uważana za otoczenia; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
