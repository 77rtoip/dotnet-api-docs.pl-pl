<Type Name="ValueSerializer" FullName="System.Windows.Markup.ValueSerializer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="258ed704368bcfb2f89872500ab73ca32065cf4b" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39915951" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ValueSerializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract ValueSerializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.ValueSerializer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ValueSerializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValueSerializer abstract" />
  <TypeSignature Language="F#" Value="type ValueSerializer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Klasa abstrakcyjna, która definiuje zachowanie konwersji do serializacji z reprezentacji obiektu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ciąg, który zwraca konwerter serializacji musi być bez utraty i konwerter zawsze musi zwracać ten sam ciąg dla określonej wartości.  Jeśli konwertera typów (pochodną <xref:System.ComponentModel.TypeConverter>) nie spełnia tych wymagań, w jego `ConvertTo` implementacje dla ciągów w danych wyjściowych, niestandardowe <xref:System.Windows.Markup.ValueSerializer> musi być zadeklarowana. Albo <xref:System.Windows.Markup.ValueSerializer> powinny spełniać wymagania lub wartość null <xref:System.Windows.Markup.ValueSerializer> powinny być skojarzone z typem. A <xref:System.Windows.Markup.ValueSerializer> jest skojarzony z typem, stosując <xref:System.Windows.Markup.ValueSerializerAttribute> atrybutu.  
  
 Wartość null <xref:System.Windows.Markup.ValueSerializer> wskazuje konwertera typów mają być ignorowane w przypadku konwersji na ciągi znaków konwersji z typu wykresu obiektu.  
  
> [!IMPORTANT]
>  Implementacja <xref:System.Windows.Markup.ValueSerializer> należy unikać zgłaszanie wyjątków. Wyjątki zgłaszane można zakończyć serializacji.  
  
 <xref:System.Windows.Markup.IValueSerializerContext> Aby uzyskać <xref:System.Windows.Markup.ValueSerializer> i jej interfejsów API jest odpowiednikiem <xref:System.ComponentModel.ITypeDescriptorContext> dla <xref:System.ComponentModel.TypeConverter>. W rzeczywistości <xref:System.Windows.Markup.IValueSerializerContext> dziedziczy <xref:System.ComponentModel.ITypeDescriptorContext>. Gdy <xref:System.Windows.Markup.ValueSerializer> interfejsu API w klasie pochodnej jest wywoływana, obiekt wywołujący (zwykle proces serializator) przekazuje kontekst, który może być świadczenia pewnych usług. Ze względu na ogólne wskazówki, <xref:System.Windows.Markup.ValueSerializer> nie może zgłaszać wyjątki. Błąd, aby powrócić do określonej usługi w kontekście musi również generuje żadnych wyjątków.  
  
 W poprzednich wersjach programu .NET Framework ta klasa istnieje w zestawie charakterystyczne dla WPF WindowsBase. W [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.ValueSerializer> znajduje się w zestawie System.Xaml. Aby uzyskać więcej informacji, zobacz [typy migrowane z WPF do System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlXmlWriter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValueSerializer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ValueSerializer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Markup.ValueSerializer" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Treść tego konstruktora jest pusta. <xref:System.Windows.Markup.ValueSerializer> klasa nie zawiera żadnych wartości, które wymagają inicjalizacji.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertFromString">
      <MemberSignature Language="C#" Value="public virtual bool CanConvertFromString (string value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanConvertFromString(string value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanConvertFromString (value As String, context As IValueSerializerContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanConvertFromString(System::String ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member CanConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; bool&#xA;override this.CanConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; bool" Usage="valueSerializer.CanConvertFromString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg, który można obliczyć wartości do konwersji.</param>
        <param name="context">Informacje o kontekście, który jest używany na potrzeby konwersji.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej, określa, czy określony <see cref="T:System.String" /> mogą być konwertowane do wystąpienia typu, wykonania <see cref="T:System.Windows.Markup.ValueSerializer" /> obsługuje.</summary>
        <returns>
          <see langword="true" /> Jeśli można przekonwertować daną wartość; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwraca implementację podstawową zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertToString">
      <MemberSignature Language="C#" Value="public virtual bool CanConvertToString (object value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanConvertToString(object value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanConvertToString (value As Object, context As IValueSerializerContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanConvertToString(System::Object ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member CanConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; bool&#xA;override this.CanConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; bool" Usage="valueSerializer.CanConvertToString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który można obliczyć wartości do konwersji.</param>
        <param name="context">Informacje o kontekście, który jest używany na potrzeby konwersji.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej, określa, czy określony obiekt można przekonwertować na <see cref="T:System.String" />.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="value" /> mogą być konwertowane na <see cref="T:System.String" />; w przeciwnym razie <see langword="false." /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwraca implementację podstawową zawsze `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertFromString">
      <MemberSignature Language="C#" Value="public virtual object ConvertFromString (string value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ConvertFromString(string value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConvertFromString (value As String, context As IValueSerializerContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ ConvertFromString(System::String ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; obj&#xA;override this.ConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; obj" Usage="valueSerializer.ConvertFromString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg do konwersji.</param>
        <param name="context">Informacje o kontekście, który jest używany na potrzeby konwersji.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej, konwertuje <see cref="T:System.String" /> do wystąpienia typu, implementacja <see cref="T:System.Windows.Markup.ValueSerializer" /> obsługuje.</summary>
        <returns>Nowe wystąpienie tego typu, implementacja <see cref="T:System.Windows.Markup.ValueSerializer" /> obsługuje oparciu o podane <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podstawowa implementacja zawsze zgłasza wyjątek.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <paramref name="value" /> Nie można przekonwertować.</exception>
        <block subset="none" type="overrides">
          <para>Należy unikać zgłaszanie wyjątków z implementacji. Zobacz <see cref="T:System.Windows.Markup.ValueSerializer" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ConvertToString">
      <MemberSignature Language="C#" Value="public virtual string ConvertToString (object value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ConvertToString(object value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConvertToString (value As Object, context As IValueSerializerContext) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ConvertToString(System::Object ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; string&#xA;override this.ConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; string" Usage="valueSerializer.ConvertToString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt do przekonwertowania na ciąg.</param>
        <param name="context">Informacje o kontekście, który jest używany na potrzeby konwersji.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej, konwertuje określony obiekt do <see cref="T:System.String" />.</summary>
        <returns>Ciąg reprezentujący określony obiekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podstawowa implementacja zawsze zgłasza wyjątek.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <paramref name="value" /> Nie można przekonwertować.</exception>
        <block subset="none" type="overrides">
          <para>Należy unikać zgłaszanie wyjątków z implementacji. Zobacz <see cref="T:System.Windows.Markup.ValueSerializer" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetConvertFromException">
      <MemberSignature Language="C#" Value="protected Exception GetConvertFromException (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Exception GetConvertFromException(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetConvertFromException(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetConvertFromException (value As Object) As Exception" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Exception ^ GetConvertFromException(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.GetConvertFromException : obj -&gt; Exception" Usage="valueSerializer.GetConvertFromException value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który nie można przekonwertować.</param>
        <summary>Zwraca wyjątek, aby zgłosić, gdy nie można wykonać konwersji.</summary>
        <returns>
          <see cref="T:System.Exception" /> Obiektu, dla wyjątku, kiedy zgłoszenie <see langword="ConvertFrom" /> nie można wykonać konwersji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rzeczywiste `throw` — słowo kluczowe nie jest wywoływany przez tę metodę, dlatego jest typowy `throw GetConvertFromException` (przy użyciu parametrów podanych).  
  
 Określony wyjątek zwrócony <xref:System.InvalidOperationException>, za pomocą `value` przekazano komunikat o wyjątku. Wzorzec użycia jest taka sama jak narzędzia wyjątek w <xref:System.ComponentModel.TypeConverter>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConvertToException">
      <MemberSignature Language="C#" Value="protected Exception GetConvertToException (object value, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Exception GetConvertToException(object value, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetConvertToException(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetConvertToException (value As Object, destinationType As Type) As Exception" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Exception ^ GetConvertToException(System::Object ^ value, Type ^ destinationType);" />
      <MemberSignature Language="F#" Value="member this.GetConvertToException : obj * Type -&gt; Exception" Usage="valueSerializer.GetConvertToException (value, destinationType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który nie można przekonwertować.</param>
        <param name="destinationType">Typ, który reprezentuje typ konwersji próbował przekonwertować.</param>
        <summary>Zwraca wyjątek, aby zgłosić, gdy nie można wykonać konwersji.</summary>
        <returns>
          <see cref="T:System.Exception" /> Obiektu, dla wyjątku, kiedy zgłoszenie <see langword="ConvertTo" /> nie można wykonać konwersji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rzeczywiste `throw` — słowo kluczowe nie jest wywoływany przez tę metodę, dlatego jest typowy `throw GetConvertToException` (przy użyciu `value` podano parametr).  
  
 Określony wyjątek zwrócony <xref:System.InvalidOperationException>, za pomocą `value` przekazano komunikat o wyjątku. Wzorzec użycia jest taka sama jak narzędzia wyjątek w <xref:System.ComponentModel.TypeConverter>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSerializerFor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera <see cref="T:System.Windows.Markup.ValueSerializer" /> dla obiektu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (System.ComponentModel.PropertyDescriptor descriptor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.ComponentModel.PropertyDescriptor descriptor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSerializerFor (descriptor As PropertyDescriptor) As ValueSerializer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(System::ComponentModel::PropertyDescriptor ^ descriptor);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : System.ComponentModel.PropertyDescriptor -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor descriptor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descriptor" Type="System.ComponentModel.PropertyDescriptor" />
      </Parameters>
      <Docs>
        <param name="descriptor">Deskryptor właściwości CLR dla właściwości do zserializowania.</param>
        <summary>Pobiera <see cref="T:System.Windows.Markup.ValueSerializer" /> zadeklarowaną dla właściwości, przekazując deskryptor właściwości CLR dla właściwości.</summary>
        <returns>Serializator skojarzony z określoną właściwością. Może zwracać <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.Markup.ValueSerializer> dla właściwości lub typ, który jest używany jako wartość właściwości jest wskazywany przez zastosowanie <xref:System.Windows.Markup.ValueSerializerAttribute> atrybutu w deklaracji właściwości lub typu. <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> Metoda jest metodą narzędzia, która odczytuje informacje o systemie typu CLR i zwraca nowy <xref:System.Windows.Markup.ValueSerializer> klasy oparty na atrybut, jeśli nie odnaleziono właściwości lub a w przypadku znalezione na typ właściwości. `null` może zostać zwrócona, jeśli istnieje żadnego takiego elementu serializującego. `null` mogą także zwracać w przypadku typu lub właściwości jest celowo związana z wartością null <xref:System.Windows.Markup.ValueSerializerAttribute>.  
  
 Inny tryb, <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> obsługuje Zwraca wewnętrzny `TypeConverterValueSerializer` klasy, która jest <xref:System.Windows.Markup.ValueSerializer> implementację, która otacza <xref:System.ComponentModel.TypeConverter> i wykonuje translację `Convert` metody `Convert*String` metod (na przykład <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>jest wywoływana z wejściem <xref:System.String> wpisz i przekłada się na <xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A>. Można to zrobić tylko w przypadkach, gdy są spełnione wszystkie z następujących czynności:  
  
-   Element <xref:System.ComponentModel.TypeConverterAttribute> znajduje się w odpowiednich właściwości lub typ odpowiednich właściwości.  
  
-   Wskazany <xref:System.ComponentModel.TypeConverter> można poprawnie zbudowane.  
  
-   <xref:System.ComponentModel.TypeConverter> Zwraca `true` dla <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>, co jest nazywane odwołujące się do <xref:System.String> typu.  
  
-   <xref:System.ComponentModel.TypeConverter> Zwraca `true` dla <xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType>, co jest nazywane odwołujące się do <xref:System.String> typu.  
  
-   <xref:System.ComponentModel.TypeConverter> Zwraca `true` dla <xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType>, co jest nazywane odwołujące się do <xref:System.String> typu.  
  
> [!NOTE]
>  Poniżej podano specjalne przypadki: <xref:System.DateTime> typów zwrotu <xref:System.Windows.Markup.DateTimeValueSerializer>; <xref:System.String> typy zwracają serializator wewnętrzny, ale funkcjonalności (`StringValueSerializer`).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="descriptor" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : Type -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">Typ do pobrania <see cref="T:System.Windows.Markup.ValueSerializer" /> dla.</param>
        <summary>Pobiera <see cref="T:System.Windows.Markup.ValueSerializer" /> zgłoszone dla określonego typu.</summary>
        <returns>Serializator skojarzone z określonym typem. Może zwracać <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.Markup.ValueSerializer> dla typu jest oznaczany przez zastosowanie <xref:System.Windows.Markup.ValueSerializerAttribute> atrybutu deklaracji typu. <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> Metoda jest metodą narzędzia, która odczytuje informacje o systemie typu CLR i zwraca nowy <xref:System.Windows.Markup.ValueSerializer> klasy na podstawie atrybutu Jeśli znalezione na określonym `type`. `null` może zostać zwrócona, jeśli istnieje żadnego takiego elementu serializującego. `null` również może zostać zwrócona Jeśli typ jest celowo związana z wartością null <xref:System.Windows.Markup.ValueSerializerAttribute>.  
  
 Inny tryb, <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> obsługuje Zwraca wewnętrzny `TypeConverterValueSerializer` klasy, która jest <xref:System.Windows.Markup.ValueSerializer> implementację, która otacza <xref:System.ComponentModel.TypeConverter> i wykonuje translację `Convert` metody `Convert*String` metod (na przykład <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>jest wywoływana z wejściem <xref:System.String> wpisz i przekłada się na <xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A>. Można to zrobić tylko w przypadkach, gdy są spełnione wszystkie z następujących czynności:  
  
-   A <xref:System.ComponentModel.TypeConverterAttribute> znajduje się na `type`.  
  
-   Wskazany <xref:System.ComponentModel.TypeConverter> można poprawnie zbudowane.  
  
-   <xref:System.ComponentModel.TypeConverter> Zwraca `true` dla <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>, co jest nazywane odwołujące się do <xref:System.String> typu.  
  
-   <xref:System.ComponentModel.TypeConverter> Zwraca `true` dla <xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType>, co jest nazywane odwołujące się do <xref:System.String> typu.  
  
-   <xref:System.ComponentModel.TypeConverter> Zwraca `true` dla <xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType>, co jest nazywane odwołujące się do <xref:System.String> typu.  
  
> [!NOTE]
>  Poniżej podano specjalne przypadki: <xref:System.DateTime> typów zwrotu <xref:System.Windows.Markup.DateTimeValueSerializer>; <xref:System.String> typy zwracają serializator wewnętrzny, ale funkcjonalności (`StringValueSerializer`).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (System.ComponentModel.PropertyDescriptor descriptor, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.ComponentModel.PropertyDescriptor descriptor, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSerializerFor (descriptor As PropertyDescriptor, context As IValueSerializerContext) As ValueSerializer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(System::ComponentModel::PropertyDescriptor ^ descriptor, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : System.ComponentModel.PropertyDescriptor * System.Windows.Markup.IValueSerializerContext -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor (descriptor, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descriptor" Type="System.ComponentModel.PropertyDescriptor" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="descriptor">Deskryptor właściwości do zserializowania.</param>
        <param name="context">Informacje o kontekście, który jest używany na potrzeby konwersji.</param>
        <summary>Pobiera <see cref="T:System.Windows.Markup.ValueSerializer" /> zadeklarowany dla określonej właściwości przy użyciu określonego kontekstu.</summary>
        <returns>Serializator skojarzony z określoną właściwością.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zamiast polegać wyłącznie na atrybuty zgłoszone w systemie typów CLR, używa tego przeciążenia `context` jako usługa a wywołuje implementacji usługi <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>. <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> Wdrożenia będzie najczęściej polegają również na `descriptor`, ale mogą implementować specjalnego zachowania w przypadku pewnych kontekstach.  
  
 Ta metoda powinna być wywoływana, gdy obiekt wywołujący ma dostępne <xref:System.Windows.Markup.IValueSerializerContext> z usługi.  Daje to pewność, że prawidłowy <xref:System.Windows.Markup.ValueSerializer> jest zwracana dla określonego kontekstu.  
  
 Jeśli kontekst zwraca `null` z jego <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> z określonym `descriptor`, czy kontekst, możesz określić `null`, zachowanie jest identyczne z wywoływaniem <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.ComponentModel.PropertyDescriptor%29> przeciążenia.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="descriptor" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (Type type, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.Type type, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(Type ^ type, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : Type * System.Windows.Markup.IValueSerializerContext -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor (type, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="type">Typ do pobrania <see cref="T:System.Windows.Markup.ValueSerializer" /> dla.</param>
        <param name="context">Informacje o kontekście, który jest używany na potrzeby konwersji.</param>
        <summary>Pobiera <see cref="T:System.Windows.Markup.ValueSerializer" /> zgłoszone dla określonego typu, przy użyciu określonego kontekstu.</summary>
        <returns>Serializator skojarzone z określonym typem.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zamiast polegać wyłącznie na atrybuty zgłoszone w systemie typów CLR, używa tego przeciążenia `context` jako usługa a wywołuje implementacji usługi <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>. <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> Wdrożenia będzie najczęściej polegają również na `type`, ale mogą implementować specjalnego zachowania w przypadku pewnych kontekstach.  
  
 Ta metoda powinna być wywoływana, gdy obiekt wywołujący ma dostępne <xref:System.Windows.Markup.IValueSerializerContext> z usługi. Daje to pewność, że prawidłowy <xref:System.Windows.Markup.ValueSerializer> jest zwracana dla określonego kontekstu.  
  
 Jeśli kontekst zwraca `null` z jego <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> z określonym `type`, czy kontekst, możesz określić `null`, zachowanie jest identyczne z wywoływaniem <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.Type%29> przeciążenia.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TypeReferences">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Type&gt; TypeReferences (object value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; TypeReferences(object value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TypeReferences (value As Object, context As IValueSerializerContext) As IEnumerable(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ TypeReferences(System::Object ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member TypeReferences : obj * System.Windows.Markup.IValueSerializerContext -&gt; seq&lt;Type&gt;&#xA;override this.TypeReferences : obj * System.Windows.Markup.IValueSerializerContext -&gt; seq&lt;Type&gt;" Usage="valueSerializer.TypeReferences (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value">Wartość atrybutu jest serializowana.</param>
        <param name="context">Informacje o kontekście, który jest używany na potrzeby konwersji.</param>
        <summary>Pobiera wyliczenie typów odwołuje się <see cref="T:System.Windows.Markup.ValueSerializer" />.</summary>
        <returns>Typy przekonwertowane przez ten serializator.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wszystkie typy <xref:System.Windows.Markup.ValueSerializer> konwertuje powinny być uwzględnione w zwrócone wyliczenia.  Dzięki temu element serializujący upewnić się, że serializatora bezpośrednią ma za mało informacji o typach, że konwertuje przez ten serializator.  
  
 Zastąpienie tej metody jest zaawansowanym scenariuszu. Zastępowanie tylko należy niezbędne w przypadku wdrażania systemu gdzie dostępne kontekst schematu XAML relacje właściwości ownertype system typów CLR nie będą zgłaszać wystarczającą ilość informacji.  
  
## <a name="wpf-usage-notes"></a>Uwagi dotyczące użytkowania WPF  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] System właściwości implementuje serializator wartości wewnętrznej, który zastępuje <xref:System.Windows.Markup.ValueSerializer.TypeReferences%2A> ponieważ właściwość zależności koncepcja, że można mieć dodano właścicieli. [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] wyrażenia również mieć specjalne obsługi wewnętrznych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>