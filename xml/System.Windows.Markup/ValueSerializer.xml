<Type Name="ValueSerializer" FullName="System.Windows.Markup.ValueSerializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="531f9d9ba781b72f2ffeebff4f24830e253106be" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69166926" /></Metadata><TypeSignature Language="C#" Value="public abstract class ValueSerializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract ValueSerializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.ValueSerializer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ValueSerializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValueSerializer abstract" />
  <TypeSignature Language="F#" Value="type ValueSerializer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Klasa abstrakcyjna, która definiuje zachowanie konwersji dla serializacji z reprezentacji obiektu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ciąg zwracany przez konwerter dla serializacji musi być krótszy, a konwerter musi zawsze zwracać ten sam ciąg dla określonej wartości.  Jeśli konwerter typów (pochodny od <xref:System.ComponentModel.TypeConverter>) nie spełnia tych wymagań `ConvertTo` w implementacjach ciągów wyjściowych, musi być zadeklarowany jako niestandardowy <xref:System.Windows.Markup.ValueSerializer> . Powinien spełniać wymagania lub wartość null <xref:System.Windows.Markup.ValueSerializer> powinna być skojarzona z typem. <xref:System.Windows.Markup.ValueSerializer> A <xref:System.Windows.Markup.ValueSerializer> jest skojarzony z typem przez <xref:System.Windows.Markup.ValueSerializerAttribute> zastosowanie atrybutu.  
  
 Wartość null <xref:System.Windows.Markup.ValueSerializer> wskazuje, że konwerter typów powinien być ignorowany w przypadku konwersji konwersji na ciąg z grafu obiektów.  
  
> [!IMPORTANT]
>  <xref:System.Windows.Markup.ValueSerializer> Implementacja powinna unikać zgłaszania wyjątków. Wszystkie zgłoszone wyjątki mogą kończyć serializację.  
  
 <xref:System.Windows.Markup.IValueSerializerContext>dla i jego interfejsy API są analogiczne <xref:System.ComponentModel.ITypeDescriptorContext> do dla <xref:System.ComponentModel.TypeConverter>. <xref:System.Windows.Markup.ValueSerializer> W rzeczywistości <xref:System.Windows.Markup.IValueSerializerContext> dziedziczy <xref:System.ComponentModel.ITypeDescriptorContext>. Gdy wywoływany jest interfejs API klasy pochodnej,wywołujący(zazwyczajjesttoprocesserializatora)przekazujekontekst,którymożezapewnićpewneusługi.<xref:System.Windows.Markup.ValueSerializer> Ze względu na ogólne wskazówki, <xref:System.Windows.Markup.ValueSerializer> które nie mogą generować wyjątków. Niepowodzenie zwrócenia określonej usługi z kontekstu nie może również generować żadnych wyjątków.  
  
 W poprzednich wersjach .NET Framework Ta klasa istniała w zestawie specyficznym dla WPF 'Windowsbase. W [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]programie <xref:System.Windows.Markup.ValueSerializer> , znajduje się w zestawie System. XAML. Aby uzyskać więcej informacji, zobacz [typy migrowane z WPF do System. XAML](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlXmlWriter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValueSerializer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ValueSerializer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Markup.ValueSerializer" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Treść tego konstruktora jest pusta; <xref:System.Windows.Markup.ValueSerializer> Klasa nie zawiera żadnych wartości, które wymagają inicjalizacji.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertFromString">
      <MemberSignature Language="C#" Value="public virtual bool CanConvertFromString (string value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanConvertFromString(string value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanConvertFromString (value As String, context As IValueSerializerContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanConvertFromString(System::String ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member CanConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; bool&#xA;override this.CanConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; bool" Usage="valueSerializer.CanConvertFromString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="netframework-4.8" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" Index="1" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg do obliczenia dla konwersji.</param>
        <param name="context">Informacje kontekstowe, które są używane do konwersji.</param>
        <summary>Gdy jest zastępowany w klasie pochodnej, określa, czy <see cref="T:System.String" /> określony element może być konwertowany do wystąpienia typu <see cref="T:System.Windows.Markup.ValueSerializer" /> obsługiwanego przez implementację.</summary>
        <returns><see langword="true" />Jeśli wartość może zostać przekonwertowana; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podstawowa implementacja zawsze zwraca wartość `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertToString">
      <MemberSignature Language="C#" Value="public virtual bool CanConvertToString (object value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanConvertToString(object value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanConvertToString (value As Object, context As IValueSerializerContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanConvertToString(System::Object ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member CanConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; bool&#xA;override this.CanConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; bool" Usage="valueSerializer.CanConvertToString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.8" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" Index="1" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt do obliczenia dla konwersji.</param>
        <param name="context">Informacje kontekstowe, które są używane do konwersji.</param>
        <summary>Gdy jest zastępowany w klasie pochodnej, określa, czy określony obiekt może być konwertowany na <see cref="T:System.String" />.</summary>
        <returns><see langword="true" />Jeśli można dokonać konwersji na; w przeciwnym razie, <see cref="T:System.String" /> <paramref name="value" /><see langword="false." /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podstawowa implementacja zawsze zwraca wartość `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertFromString">
      <MemberSignature Language="C#" Value="public virtual object ConvertFromString (string value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ConvertFromString(string value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConvertFromString (value As String, context As IValueSerializerContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ ConvertFromString(System::String ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; obj&#xA;override this.ConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; obj" Usage="valueSerializer.ConvertFromString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="netframework-4.8" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" Index="1" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg do konwersji.</param>
        <param name="context">Informacje kontekstowe, które są używane do konwersji.</param>
        <summary>Gdy jest zastępowany w klasie pochodnej, konwertuje <see cref="T:System.String" /> do wystąpienia typu, który <see cref="T:System.Windows.Markup.ValueSerializer" /> obsługuje implementacja.</summary>
        <returns>Nowe wystąpienie typu, które <see cref="T:System.Windows.Markup.ValueSerializer" /> obsługuje implementacja, na podstawie podanego <paramref name="value" />elementu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementacja podstawowa zawsze zgłasza wyjątek.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><paramref name="value" />nie można przekonwertować.</exception>
        <block subset="none" type="overrides"><para>Unikaj zgłaszania wyjątków od implementacji. Zobacz <see cref="T:System.Windows.Markup.ValueSerializer" />.</para></block>
      </Docs>
    </Member>
    <Member MemberName="ConvertToString">
      <MemberSignature Language="C#" Value="public virtual string ConvertToString (object value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ConvertToString(object value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConvertToString (value As Object, context As IValueSerializerContext) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ConvertToString(System::Object ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; string&#xA;override this.ConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; string" Usage="valueSerializer.ConvertToString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.8" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" Index="1" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt do przekonwertowania na ciąg.</param>
        <param name="context">Informacje kontekstowe, które są używane do konwersji.</param>
        <summary>Gdy jest zastępowany w klasie pochodnej, konwertuje określony obiekt na <see cref="T:System.String" />.</summary>
        <returns>Reprezentacja określonego obiektu w postaci ciągu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementacja podstawowa zawsze zgłasza wyjątek.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><paramref name="value" />nie można przekonwertować.</exception>
        <block subset="none" type="overrides"><para>Unikaj zgłaszania wyjątków od implementacji. Zobacz <see cref="T:System.Windows.Markup.ValueSerializer" />.</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetConvertFromException">
      <MemberSignature Language="C#" Value="protected Exception GetConvertFromException (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Exception GetConvertFromException(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetConvertFromException(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetConvertFromException (value As Object) As Exception" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Exception ^ GetConvertFromException(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.GetConvertFromException : obj -&gt; Exception" Usage="valueSerializer.GetConvertFromException value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, którego nie można przekonwertować.</param>
        <summary>Zwraca wyjątek, który ma zostać zgłoszony, gdy nie można wykonać konwersji.</summary>
        <returns>Obiekt, dla którego ma zostać zgłoszony wyjątek, <see langword="ConvertFrom" /> gdy nie można wykonać konwersji. <see cref="T:System.Exception" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rzeczywiste `throw` słowo kluczowe nie jest wywoływane przez tę metodę, w związku z czym typowe `throw GetConvertFromException` użycie to (z podanymi parametrami).  
  
 Zwrócony wyjątek ma <xref:System.InvalidOperationException>wartość z przekazaniem komunikatu o `value` wyjątku. Wzorzec użycia jest taki sam jak w przypadku narzędzi wyjątków w programie <xref:System.ComponentModel.TypeConverter>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConvertToException">
      <MemberSignature Language="C#" Value="protected Exception GetConvertToException (object value, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Exception GetConvertToException(object value, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetConvertToException(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetConvertToException (value As Object, destinationType As Type) As Exception" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Exception ^ GetConvertToException(System::Object ^ value, Type ^ destinationType);" />
      <MemberSignature Language="F#" Value="member this.GetConvertToException : obj * Type -&gt; Exception" Usage="valueSerializer.GetConvertToException (value, destinationType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.8" />
        <Parameter Name="destinationType" Type="System.Type" Index="1" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, którego nie można przekonwertować.</param>
        <param name="destinationType">Typ, który reprezentuje typ konwersji, na który próbujesz skonwertować.</param>
        <summary>Zwraca wyjątek, który ma zostać zgłoszony, gdy nie można wykonać konwersji.</summary>
        <returns>Obiekt, dla którego ma zostać zgłoszony wyjątek, <see langword="ConvertTo" /> gdy nie można wykonać konwersji. <see cref="T:System.Exception" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rzeczywiste `throw` słowo kluczowe nie jest wywoływane przez tę metodę, dlatego typowe użycie to `throw GetConvertToException` (z `value` podanym parametrem).  
  
 Zwrócony wyjątek ma <xref:System.InvalidOperationException>wartość z przekazaniem komunikatu o `value` wyjątku. Wzorzec użycia jest taki sam jak w przypadku narzędzi wyjątków w programie <xref:System.ComponentModel.TypeConverter>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSerializerFor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera obiekt <see cref="T:System.Windows.Markup.ValueSerializer" /> dla obiektu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (System.ComponentModel.PropertyDescriptor descriptor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.ComponentModel.PropertyDescriptor descriptor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSerializerFor (descriptor As PropertyDescriptor) As ValueSerializer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(System::ComponentModel::PropertyDescriptor ^ descriptor);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : System.ComponentModel.PropertyDescriptor -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor descriptor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descriptor" Type="System.ComponentModel.PropertyDescriptor" Index="0" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="descriptor">Deskryptor właściwości CLR dla właściwości, która ma zostać zserializowana.</param>
        <summary><see cref="T:System.Windows.Markup.ValueSerializer" /> Pobiera zadeklarowany dla właściwości przez przekazanie deskryptora właściwości CLR dla właściwości.</summary>
        <returns>Serializator skojarzony z określoną właściwością. Może zwrócić <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dla właściwości lub dla typu, który jest używany jako wartość właściwości, jest wskazywany przez <xref:System.Windows.Markup.ValueSerializerAttribute> zastosowanie atrybutu właściwości lub deklaracji typu. <xref:System.Windows.Markup.ValueSerializer> Metoda jest metodą narzędziową, która odczytuje informacje o systemie typu CLR i zwraca nową <xref:System.Windows.Markup.ValueSerializer> klasę na podstawie atrybutu, jeśli znajduje się on na właściwości, lub jeśli znaleziono w typie właściwości. <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> `null`może zostać zwrócona, jeśli taki serializator nie istnieje. `null`może być również zwracany, jeśli typ lub właściwość zostanie świadomie przypisana wartością <xref:System.Windows.Markup.ValueSerializerAttribute>null.  
  
 Inny tryb, <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> który obsługuje zwraca <xref:System.Windows.Markup.ValueSerializer> klasę wewnętrzną `TypeConverterValueSerializer` , która jest implementacją, `Convert` która zawija <xref:System.ComponentModel.TypeConverter> i tłumaczy metody na `Convert*String` metody (na przykład <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>jest wywoływana z <xref:System.String> typem wejściowym i tłumaczy na <xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A>. Jest to wykonywane tylko w przypadku, gdy spełnione są wszystkie następujące warunki:  
  
-   <xref:System.ComponentModel.TypeConverterAttribute> Znajduje się w odpowiedniej właściwości lub typ odpowiedniej właściwości.  
  
-   Wskazane <xref:System.ComponentModel.TypeConverter> może być pomyślne skonstruowanie.  
  
-   Funkcja Return `true` zwraca <xref:System.String> wartość ,którawywołujeodwołaniedotypu.<xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType> <xref:System.ComponentModel.TypeConverter>  
  
-   Funkcja Return `true` zwraca <xref:System.String> wartość ,którawywołujeodwołaniedotypu.<xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType> <xref:System.ComponentModel.TypeConverter>  
  
-   Funkcja Return `true` zwraca <xref:System.String> wartość ,którawywołujeodwołaniedotypu.<xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType> <xref:System.ComponentModel.TypeConverter>  
  
> [!NOTE]
>  Poniżej przedstawiono specjalne przypadki: <xref:System.DateTime> typy zwracają a; <xref:System.Windows.Markup.DateTimeValueSerializer> typy zwracają wewnętrzny, ale serializator funkcjonalny`StringValueSerializer`(). <xref:System.String>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="descriptor" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : Type -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="type">Typ, dla którego ma <see cref="T:System.Windows.Markup.ValueSerializer" /> zostać uzyskana wartość.</param>
        <summary><see cref="T:System.Windows.Markup.ValueSerializer" /> Pobiera zadeklarowany dla określonego typu.</summary>
        <returns>Serializator skojarzony z określonym typem. Może zwrócić <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.Markup.ValueSerializer> dla typu jest wskazywany przez <xref:System.Windows.Markup.ValueSerializerAttribute> zastosowanie atrybutu w deklaracji typu. Metoda jest metodą narzędziową, która odczytuje informacje o systemie typu CLR i zwraca nową <xref:System.Windows.Markup.ValueSerializer> klasę na podstawie atrybutu, jeśli znajduje się on w określonym `type`. <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> `null`może zostać zwrócona, jeśli taki serializator nie istnieje. `null`może być również zwracany, jeśli typ jest świadomie przypisany do wartości <xref:System.Windows.Markup.ValueSerializerAttribute>null.  
  
 Inny tryb, <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> który obsługuje zwraca <xref:System.Windows.Markup.ValueSerializer> klasę wewnętrzną `TypeConverterValueSerializer` , która jest implementacją, `Convert` która zawija <xref:System.ComponentModel.TypeConverter> i tłumaczy metody na `Convert*String` metody (na przykład <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>jest wywoływana z <xref:System.String> typem wejściowym i tłumaczy na <xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A>. Jest to wykonywane tylko w przypadku, gdy spełnione są wszystkie następujące warunki:  
  
-   Znajduje się w `type`. <xref:System.ComponentModel.TypeConverterAttribute>  
  
-   Wskazane <xref:System.ComponentModel.TypeConverter> może być pomyślne skonstruowanie.  
  
-   Funkcja Return `true` zwraca <xref:System.String> wartość ,którawywołujeodwołaniedotypu.<xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType> <xref:System.ComponentModel.TypeConverter>  
  
-   Funkcja Return `true` zwraca <xref:System.String> wartość ,którawywołujeodwołaniedotypu.<xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType> <xref:System.ComponentModel.TypeConverter>  
  
-   Funkcja Return `true` zwraca <xref:System.String> wartość ,którawywołujeodwołaniedotypu.<xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType> <xref:System.ComponentModel.TypeConverter>  
  
> [!NOTE]
>  Poniżej przedstawiono specjalne przypadki: <xref:System.DateTime> typy zwracają a; <xref:System.Windows.Markup.DateTimeValueSerializer> typy zwracają wewnętrzny, ale serializator funkcjonalny`StringValueSerializer`(). <xref:System.String>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="type" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (System.ComponentModel.PropertyDescriptor descriptor, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.ComponentModel.PropertyDescriptor descriptor, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSerializerFor (descriptor As PropertyDescriptor, context As IValueSerializerContext) As ValueSerializer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(System::ComponentModel::PropertyDescriptor ^ descriptor, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : System.ComponentModel.PropertyDescriptor * System.Windows.Markup.IValueSerializerContext -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor (descriptor, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descriptor" Type="System.ComponentModel.PropertyDescriptor" Index="0" FrameworkAlternate="netframework-4.8" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" Index="1" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="descriptor">Deskryptor dla właściwości, która ma zostać zserializowana.</param>
        <param name="context">Informacje kontekstowe, które są używane do konwersji.</param>
        <summary><see cref="T:System.Windows.Markup.ValueSerializer" /> Pobiera zadeklarowaną dla określonej właściwości, używając określonego kontekstu.</summary>
        <returns>Serializator skojarzony z określoną właściwością.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zamiast polegać na czystym poleganiu na atrybutach raportowanych w systemie typów CLR, Przeciążenie `context` wykorzystuje jako usługę i wywołuje <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>implementację usługi. Implementacja zazwyczaj polega `descriptor`na, ale może zaimplementować specjalne zachowanie dla określonych kontekstów. <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>  
  
 Ta metoda powinna być wywoływana, gdy obiekt wywołujący jest <xref:System.Windows.Markup.IValueSerializerContext> dostępny z usługi.  Zapewni to poprawne <xref:System.Windows.Markup.ValueSerializer> zwrócenie dla określonego kontekstu.  
  
 Jeśli kontekst powróci `null` <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> do określonego `descriptor`elementu lub jeśli określony kontekst to `null`, zachowanie jest identyczne z wywołaniem <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.ComponentModel.PropertyDescriptor%29> przeciążenia.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="descriptor" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (Type type, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.Type type, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(Type ^ type, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : Type * System.Windows.Markup.IValueSerializerContext -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor (type, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netframework-4.8" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" Index="1" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="type">Typ, dla którego ma <see cref="T:System.Windows.Markup.ValueSerializer" /> zostać uzyskana wartość.</param>
        <param name="context">Informacje kontekstowe, które są używane do konwersji.</param>
        <summary><see cref="T:System.Windows.Markup.ValueSerializer" /> Pobiera zadeklarowany dla określonego typu, przy użyciu określonego kontekstu.</summary>
        <returns>Serializator skojarzony z określonym typem.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zamiast polegać na czystym poleganiu na atrybutach raportowanych w systemie typów CLR, Przeciążenie `context` wykorzystuje jako usługę i wywołuje <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>implementację usługi. Implementacja zazwyczaj polega `type`na, ale może zaimplementować specjalne zachowanie dla określonych kontekstów. <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>  
  
 Ta metoda powinna być wywoływana, gdy obiekt wywołujący jest <xref:System.Windows.Markup.IValueSerializerContext> dostępny z usługi. Zapewni to poprawne <xref:System.Windows.Markup.ValueSerializer> zwrócenie dla określonego kontekstu.  
  
 Jeśli kontekst powróci `null` <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> do określonego `type`elementu lub jeśli określony kontekst to `null`, zachowanie jest identyczne z wywołaniem <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.Type%29> przeciążenia.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="type" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TypeReferences">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Type&gt; TypeReferences (object value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; TypeReferences(object value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TypeReferences (value As Object, context As IValueSerializerContext) As IEnumerable(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ TypeReferences(System::Object ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member TypeReferences : obj * System.Windows.Markup.IValueSerializerContext -&gt; seq&lt;Type&gt;&#xA;override this.TypeReferences : obj * System.Windows.Markup.IValueSerializerContext -&gt; seq&lt;Type&gt;" Usage="valueSerializer.TypeReferences (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.8" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" Index="1" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value">Serializowana wartość.</param>
        <param name="context">Informacje kontekstowe, które są używane do konwersji.</param>
        <summary>Pobiera Wyliczenie typów, do których odwołuje <see cref="T:System.Windows.Markup.ValueSerializer" />się.</summary>
        <returns>Typy konwertowane przez ten serializator.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wszystkie typy, <xref:System.Windows.Markup.ValueSerializer> które są konwertowane, powinny być zawarte w zwracanym wyliczeniu.  Dzięki temu serializator zagwarantuje, że Deserializator ma wystarczającą ilość informacji o typach, które ten serializator konwertuje.  
  
 Zastępowanie tej metody jest zaawansowanym scenariuszem. Zastępowanie powinno być konieczne tylko w przypadku implementowania systemu, w którym typ CLR SystemType — relacje właściwości dostępne dla kontekstu schematu XAML nie zgłasza wystarczającej ilości informacji.  
  
## <a name="wpf-usage-notes"></a>Uwagi dotyczące użycia WPF  
 System właściwości implementuje serializator wartości wewnętrznej, który zastępuje <xref:System.Windows.Markup.ValueSerializer.TypeReferences%2A> , ponieważ właściwość zależności ma koncepcję, która może dodawać właścicieli. [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]wyrażenia mają również specjalną obsługę wewnętrzną.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
