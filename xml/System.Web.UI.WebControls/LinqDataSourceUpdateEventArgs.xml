<Type Name="LinqDataSourceUpdateEventArgs" FullName="System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ad4de834753cb8cf7c08131b0ca92f63c49de8d7" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30691031" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class LinqDataSourceUpdateEventArgs : System.ComponentModel.CancelEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSourceUpdateEventArgs extends System.ComponentModel.CancelEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSourceUpdateEventArgs&#xA;Inherits CancelEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSourceUpdateEventArgs : System::ComponentModel::CancelEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.CancelEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia dane dla <see cref="E:System.Web.UI.WebControls.LinqDataSource.Updating" /> zdarzeń.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> Do dowolnego programu obsługi zdarzeń dla przekazanego obiektu <xref:System.Web.UI.WebControls.LinqDataSource.Updating> zdarzeń. Można użyć <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> obiektu do sprawdzenia danych, przed wykonaniem operacji aktualizacji w źródle danych. Można następnie sprawdzania poprawności danych, sprawdź weryfikacji wyjątków zgłaszanych przez klasy danych lub zmień wartość przed aktualizacją. Możesz również anulować operacji aktualizacji.  
  
 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> Obiekt zawiera dane, który został pierwotnie pobrany ze źródła danych. <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> Obiekt zawiera dane, które zostaną zapisane w źródle danych podczas operacji update.  
  
 Jeśli obiekt, który reprezentuje źródło danych zgłasza wyjątek weryfikacji przed zaktualizowaniem danych, <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> wystąpienie zawiera właściwość <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> klasy. Możesz pobrać wszystkie wyjątki poprawności za pośrednictwem <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> właściwości. Jeśli nie jest wyjątek sprawdzania poprawności, <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> zawiera właściwość `null`. Obsługa wyjątków sprawdzania poprawności, nie ma wyjątku, aby zostać zgłoszony ponownie ustawić <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> właściwości `true`.  
  
 Domyślnie <xref:System.Web.UI.WebControls.LinqDataSource> magazynów kontroli oryginalnej wartości ze źródła danych w widoku stanu na stronie sieci Web, z wyjątkiem tych, których <xref:System.Data.Linq.Mapping.ColumnAttribute> atrybut jest oznaczony jako `UpdateCheck.Never`. LINQ do SQL automatycznie sprawdza, czy integralności danych przed zaktualizowaniem danych. Robi to przez porównanie bieżącej wartości w źródle danych z oryginalnych wartościach przechowywanych w widoku stanu. LINQ do SQL spowodują zgłoszenie wyjątku, jeśli zostały zmienione wartości w źródle danych. Można wykonać walidacji dodatkowe dane przez utworzenie obsługi dla <xref:System.Web.UI.WebControls.LinqDataSource.Updating> zdarzeń.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono program obsługi zdarzeń dla <xref:System.Web.UI.WebControls.LinqDataSource.Updating> zdarzeń. W przykładzie pokazano sposób porównywania właściwości z <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> właściwości i <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> umożliwia określenie, czy wartość w `Category` właściwość zostanie zmieniona. Jeśli tak, `CategoryChanged` właściwości obiektu w <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> właściwość jest ustawiona na `true`.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 W poniższym przykładzie przedstawiono program obsługi zdarzeń dla <xref:System.Web.UI.WebControls.LinqDataSource.Updating> zdarzeń. Wyświetla wszystkie komunikaty o wyjątkach weryfikacji przy użyciu <xref:System.Web.UI.WebControls.Label> formantu.  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceUpdateEventArgs (System.Web.UI.WebControls.LinqDataSourceValidationException exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.WebControls.LinqDataSourceValidationException exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (exception As LinqDataSourceValidationException)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceUpdateEventArgs(System::Web::UI::WebControls::LinqDataSourceValidationException ^ exception);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="exception" Type="System.Web.UI.WebControls.LinqDataSourceValidationException" />
      </Parameters>
      <Docs>
        <param name="exception">Wyjątek, który wystąpił podczas sprawdzania poprawności danych do zaktualizowania.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" /> klasy z określonym wyjątkiem.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceUpdateEventArgs (object originalObject, object newObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object originalObject, object newObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (originalObject As Object, newObject As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceUpdateEventArgs(System::Object ^ originalObject, System::Object ^ newObject);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="originalObject" Type="System.Object" />
        <Parameter Name="newObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="originalObject">Obiekt typu określonego w <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> właściwość, która zawiera wartości początkowej, które zostały pobrane ze źródła danych.</param>
        <param name="newObject">Obiekt typu określonego w <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> właściwość, która zawiera wartości, które zostaną zapisane w źródle danych.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.LinqDataSourceValidationException Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.LinqDataSourceValidationException Exception" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As LinqDataSourceValidationException" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::LinqDataSourceValidationException ^ Exception { System::Web::UI::WebControls::LinqDataSourceValidationException ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.LinqDataSourceValidationException</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wyjątek zgłoszony podczas danych został sprawdzana przed wykonaniem operacji aktualizacji.</summary>
        <value>Wyjątek, jeśli wystąpił błąd; w przeciwnym razie <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli wyjątek sprawdzania poprawności jest wywoływane przed wykonaniem operacji aktualizacji, wyjątek znajduje się w <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> właściwości. W obsłudze zdarzeń dla <xref:System.Web.UI.WebControls.LinqDataSource.Updating> zdarzeń, możesz pobrać wyjątku za pomocą <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> właściwości.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono program obsługi zdarzeń dla <xref:System.Web.UI.WebControls.LinqDataSource.Updating> zdarzeń. Wyświetla wszystkie komunikaty o wyjątkach weryfikacji przy użyciu <xref:System.Web.UI.WebControls.Label> formantu.  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionHandled">
      <MemberSignature Language="C#" Value="public bool ExceptionHandled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExceptionHandled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled" />
      <MemberSignature Language="VB.NET" Value="Public Property ExceptionHandled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExceptionHandled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy wyjątek został obsłużony i że jej powinien nie zostać zgłoszony ponownie.</summary>
        <value>
          <see langword="true" /> Jeśli określony wyjątek został obsłużony; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można utworzyć programu obsługi zdarzeń dla <xref:System.Web.UI.WebControls.LinqDataSource.Updating> zdarzeń do sprawdzenia poprawności wyjątki, które miały miejsce przed operację aktualizacji. Jeśli obsłużyć wyjątek i nie chcesz, aby zostać wygenerowany ponownie, ustaw <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> właściwości `true`. Jeśli nie ustawisz <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> właściwości `true`, wyjątek będzie propagowane do następnego programu obsługi zdarzeń w stosie wywołań.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono program obsługi zdarzeń dla <xref:System.Web.UI.WebControls.LinqDataSource.Updating> zdarzeń. Wyświetla wszystkie komunikaty o wyjątkach weryfikacji przy użyciu <xref:System.Web.UI.WebControls.Label> formantu.  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewObject">
      <MemberSignature Language="C#" Value="public object NewObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object NewObject" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NewObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ NewObject { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt, który zawiera wartości, które zostaną zapisane w źródle danych.</summary>
        <value>Obiekt typu określonego w <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> właściwość, która zawiera dane do zapisania.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tworzenie procedury obsługi zdarzeń dla <xref:System.Web.UI.WebControls.LinqDataSource.Updating> zdarzeń i pobrać <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> właściwości sprawdzania poprawności danych. Możesz również zmienić dane lub anulować operacji aktualizacji.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono program obsługi zdarzeń dla <xref:System.Web.UI.WebControls.LinqDataSource.Updating> zdarzeń. W przykładzie pokazano sposób porównywania właściwości z <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> właściwości i <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> umożliwia określenie, czy wartość w `Category` właściwość zostanie zmieniona. Jeśli tak, `CategoryChanged` właściwości obiektu w <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> właściwość jest ustawiona na `true`.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OriginalObject">
      <MemberSignature Language="C#" Value="public object OriginalObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object OriginalObject" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OriginalObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ OriginalObject { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt, który zawiera wartości, które pierwotnie zostały pobrane ze źródła danych.</summary>
        <value>Obiekt typu określonego w <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> właściwość, która zawiera dane, które zostało pobrane ze źródła danych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można użyć <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> właściwości Sprawdź oryginalnych wartości względem bieżącej wartości w źródle danych i Anuluj operację aktualizacji lub podjąć inne działania.  
  
 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> Właściwość zawiera wartości dla właściwości, które są trwałe w widoku stanu na stronie sieci Web. Właściwość jest utrwalona w tych warunkach:  
  
-   Gdy jest on wyświetlany w formancie powiązane z danymi.  
  
-   Gdy <xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A?displayProperty=nameWithType> właściwość <xref:System.Data.Linq.Mapping.ColumnAttribute?displayProperty=nameWithType> atrybut ma ustawioną `Always` lub `WhenChanged`.  
  
 Jeśli <xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A> właściwość jest ustawiona na `Never` i wartość nie jest wyświetlana w formancie powiązane z danymi, wartość nie znajduje się na stronie sieci Web. W takim przypadku nie można przypisać do <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> właściwości.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono program obsługi zdarzeń dla <xref:System.Web.UI.WebControls.LinqDataSource.Updating> zdarzeń. W przykładzie pokazano sposób porównywania właściwości z <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> właściwości i <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> umożliwia określenie, czy wartość w `Category` właściwość zostanie zmieniona. Jeśli tak, `CategoryChanged` właściwości obiektu w <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> właściwość jest ustawiona na `true`.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>