<Type Name="LinqDataSourceStatusEventArgs" FullName="System.Web.UI.WebControls.LinqDataSourceStatusEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8ef52ad56e9cfa9547b24b47a2d6f4a4e6ee0e40" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36581358" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class LinqDataSourceStatusEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSourceStatusEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSourceStatusEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSourceStatusEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type LinqDataSourceStatusEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia dane dla <see cref="E:System.Web.UI.WebControls.LinqDataSource.ContextCreated" />, <see cref="E:System.Web.UI.WebControls.LinqDataSource.Deleted" />, <see cref="E:System.Web.UI.WebControls.LinqDataSource.Inserted" />, <see cref="E:System.Web.UI.WebControls.LinqDataSource.Selected" />, i <see cref="E:System.Web.UI.WebControls.LinqDataSource.Updated" /> zdarzenia.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Klasy można przejrzeć wyniki operacji danych, które mogły zostać wykonane przez <xref:System.Web.UI.WebControls.LinqDataSource> formantu. A <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> obiekt jest przekazywany do obsługi zdarzeń <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated>, <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>, <xref:System.Web.UI.WebControls.LinqDataSource.Selected>, i <xref:System.Web.UI.WebControls.LinqDataSource.Updated> zdarzenia <xref:System.Web.UI.WebControls.LinqDataSource> formantu.  
  
 Jeśli operacja danych zakończyła się pomyślnie, wynikowy obiekt danych, jest przechowywany w <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> właściwości i <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> jest właściwość `null`. Jeśli operacja danych nie powiodła się, wyjątek, który wystąpił podczas operacji danych są przechowywane w <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> właściwości i <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> jest właściwość `null`. Jeśli obsługiwane wyjątek reprezentowany przez <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> właściwość, ustaw <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A> właściwości `true` tak, aby nie zostanie zgłoszony wyjątek.  
  
 Pobrać całkowita liczba rekordów dane zwrócone w wyniku zapytania za pomocą <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> właściwości.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono program obsługi zdarzeń dla <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> zdarzeń. W obsłudze zdarzeń Jeśli <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> właściwość jest `null`, produktu identyfikator jest pobierana z obiektu w <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> właściwości. Produktu identyfikator klucza podstawowego dla tabeli a jest ustawiana przez bazę danych, dlatego wartość nie jest znany przed zakończeniem operacji insert. Komunikat o wyjątku jest rejestrowane, jeśli <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> właściwość nie jest równa `null`. <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A> Następnie ustawioną właściwość `true`.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceStatusEventArgs (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.#ctor(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceStatusEventArgs(Exception ^ exception);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceStatusEventArgs : Exception -&gt; System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" Usage="new System.Web.UI.WebControls.LinqDataSourceStatusEventArgs exception" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception">Błąd, który wystąpił podczas operacji danych.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" /> przy użyciu wyjątek nastąpiło w wyniku operacji danych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor jest używany, gdy wyjątek podczas operacji danych. <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> Jest automatycznie ustawiana właściwość `null`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceStatusEventArgs (object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (result As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceStatusEventArgs(System::Object ^ result);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceStatusEventArgs : obj -&gt; System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" Usage="new System.Web.UI.WebControls.LinqDataSourceStatusEventArgs result" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="result" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="result">Obiekt, który zawiera dane, które wynikają z operacji danych.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" /> przy użyciu obiektu, który zawiera dane z operacji danych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor jest używany podczas operacji danych zostało ukończone bez błędów. `result` Parametr zawiera obiekt, który reprezentuje wynik operacji danych. <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> Jest automatycznie ustawiana właściwość `null`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceStatusEventArgs (object result, int totalRowCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object result, int32 totalRowCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.#ctor(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (result As Object, totalRowCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceStatusEventArgs(System::Object ^ result, int totalRowCount);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceStatusEventArgs : obj * int -&gt; System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" Usage="new System.Web.UI.WebControls.LinqDataSourceStatusEventArgs (result, totalRowCount)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="result" Type="System.Object" />
        <Parameter Name="totalRowCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="result">Obiekt, który zawiera dane, które wynikają z operacji danych.</param>
        <param name="totalRowCount">Liczba wierszy, które zostały zwrócone przez operację pobierania danych.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" /> klasy z obiektu, który zawiera dane z operacji danych i liczby wierszy zwracanych.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public Exception Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Exception" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ Exception { Exception ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Exception : Exception" Usage="System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wyjątek zgłoszony podczas operacji danych.</summary>
        <value>
          <see cref="T:System.Exception" /> Obiekt, który reprezentuje wyjątek, jeśli wystąpił błąd; w przeciwnym razie <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli wyjątek jest wywoływane podczas operacji danych, wyjątek znajduje się w <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> właściwości. Można utworzyć procedury obsługi zdarzeń dla <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated>, <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>, <xref:System.Web.UI.WebControls.LinqDataSource.Selected>, i <xref:System.Web.UI.WebControls.LinqDataSource.Updated> zdarzenia i pobrać wyjątek, jeśli istnieje, za pośrednictwem <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> właściwości.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono program obsługi zdarzeń dla <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> zdarzeń. W obsłudze zdarzeń Jeśli <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> właściwość jest `null`, produktu identyfikator jest pobierana z obiektu w <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> właściwości. Identyfikator produktu jest klucz podstawowy dla tabeli i jest ustawiony przez bazę danych, dlatego wartość nie jest znany przed zakończeniem operacji insert. Komunikat o wyjątku jest rejestrowane, jeśli <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> właściwość nie jest równa `null`. <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A> Następnie ustawioną właściwość `true`.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionHandled">
      <MemberSignature Language="C#" Value="public bool ExceptionHandled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExceptionHandled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled" />
      <MemberSignature Language="VB.NET" Value="Public Property ExceptionHandled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExceptionHandled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ExceptionHandled : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy wyjątek został obsłużony i że jej powinien nie zostać zgłoszony ponownie.</summary>
        <value>
          <see langword="true" /> Jeśli określony wyjątek został obsłużony; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można utworzyć procedury obsługi zdarzeń dla <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated>, <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>, <xref:System.Web.UI.WebControls.LinqDataSource.Selected>, i <xref:System.Web.UI.WebControls.LinqDataSource.Updated> zdarzeń, aby sprawdzić wszelkie wyjątki, które wystąpiły podczas tych czynności. Jeśli obsłużyć wyjątek i nie chcesz, aby zostać wygenerowany ponownie, ustaw <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A> właściwości `true`. Jeśli nie ustawisz <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A> właściwości `true`, wyjątek będzie propagowane do następnego programu obsługi zdarzeń w stosie wywołań.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono program obsługi zdarzeń dla <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> zdarzeń. W obsłudze zdarzeń Jeśli <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> właściwość jest `null`, produktu identyfikator jest pobierana z obiektu w <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> właściwości. Produktu identyfikator klucza podstawowego dla tabeli a jest ustawiana przez bazę danych, dlatego wartość nie jest znany przed zakończeniem operacji insert. Komunikat o wyjątku jest rejestrowane, jeśli <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> właściwość nie jest równa `null`. <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A> Następnie ustawioną właściwość `true`.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public object Result { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Result" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Result As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Result { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Result : obj" Usage="System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt reprezentujący wynik operacji danych.</summary>
        <value>Obiekt, który zawiera dane z operacji danych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> właściwość do sprawdzenia wartości zwracane z operacji danych. Można pobrać parametrów wyjściowych z operacji danych lub zmodyfikuj wartości zwrócone w wyniku zapytania.  
  
 Dane przechowywane w <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> właściwości zależy od typu operacji danych, która została wykonana. Po usunięciu danych, <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> właściwość zawiera obiekt typu określonego w <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> właściwości z oryginalnych wartości, które zostały usunięte ze źródła danych. Podczas wstawiania lub aktualizowania danych, <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> właściwość zawiera obiekt typu określonego w <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> właściwości przy użyciu nowych wartości, które zostały zapisane w źródle danych. Po wybraniu danych, <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> właściwość zawiera wyniki zapytania.  
  
 Jeśli zapytania select obejmuje grupowania danych lub wybierając podzbiór właściwości z typem określonym w <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> właściwość <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> właściwość zawiera obiekt utworzony dynamicznie typu. W przeciwnym razie <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> właściwość zawiera obiekt typu określonego w <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> właściwości.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono program obsługi zdarzeń dla <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> zdarzeń. W obsłudze zdarzeń Jeśli <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> właściwość jest `null`, produktu identyfikator jest pobierana z obiektu w <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> właściwości. Produktu identyfikator klucza podstawowego dla tabeli a jest ustawiana przez bazę danych, dlatego wartość nie jest znany przed zakończeniem operacji insert. Komunikat o wyjątku jest rejestrowane, jeśli <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> właściwość nie jest równa `null`. <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A> Następnie ustawioną właściwość `true`.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TotalRowCount">
      <MemberSignature Language="C#" Value="public int TotalRowCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TotalRowCount" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TotalRowCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TotalRowCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.TotalRowCount : int" Usage="System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera całkowitą liczbę wierszy w zestawie danych z operacji pobierania danych.</summary>
        <value>Całkowita liczba wierszy w zestawie danych przez operację pobierania danych; -1, gdy <see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" /> obiekt został utworzony podczas operacji modyfikacji danych; -1, jeśli włączono dostosować stronicowania przez ustawienie <see cref="P:System.Web.UI.WebControls.LinqDataSource.AutoPage" /> do <see langword="true" /> i ustawiając <see cref="P:System.Web.UI.DataSourceSelectArguments.RetrieveTotalRowCount" /> do <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> właściwości można pobrać liczby rekordów w zestawie danych podczas operacji pobierania danych. Zwykle ta właściwość pobrać w sytuacji, gdy są wyświetlane na stronach danych i chcesz je wyświetlić całkowita liczba rekordów.  
  
 Gdy jest trwa stronicowanej danych, wartości <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> właściwości mogą się różnić od rzeczywistej liczby wierszy zwracanych przez zapytanie. Jest to spowodowane zapytanie zwraca liczbę wierszy, które są wymagane dla tej strony danych.  
  
 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> Właściwość zawiera liczbę rekordów w wyniku zapytania tylko wtedy, gdy jest on dostępny w obsłudze zdarzeń dla <xref:System.Web.UI.WebControls.LinqDataSource.Selected> zdarzeń. Jeśli właściwość jest dostępny program obsługi zdarzeń dla <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated>, <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>, lub <xref:System.Web.UI.WebControls.LinqDataSource.Updated> zdarzenia <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> właściwość zawiera wartość -1.  
  
 Wartość <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> zależy od właściwości <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> właściwość <xref:System.Web.UI.WebControls.LinqDataSource> kontroli, a na `AllowPaging` właściwości formantu powiązanego z danymi. W poniższej tabeli przedstawiono możliwe wartości <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> właściwości.  
  
|Właściwość AutoPage formantu LinqDataSource|Właściwość AllowPaging właściwości formantu powiązanego z danymi|Właściwość TotalRowCount|Wynik|  
|-------------------------------------------------|-------------------------------------------------|----------------------------|-------------|  
|`true`|`true`|Liczba rekordów dla zapytania.|Dane mają być automatycznie stronicowane.|  
|`false`|`false`|Liczba rekordów dla zapytania.|Dane nie jest stronicowana.|  
|`true`|`false`|-1|Dane nie jest stronicowana.|  
|`false`|`true`|Wartość przypisana do <xref:System.Web.UI.DataSourceSelectArguments.TotalRowCount%2A> właściwości do obsługi zdarzeń dla <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> zdarzeń.|Danych jest stronicowana zgodnie z wartościami określony podczas dostosowane stronicowania.|  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono strony sieci Web z <xref:System.Web.UI.WebControls.LinqDataSource> kontroli, <xref:System.Web.UI.WebControls.GridView> kontroli, a <xref:System.Web.UI.WebControls.Literal> formantu. <xref:System.Web.UI.WebControls.LinqDataSource> Kontrola Określa program obsługi zdarzeń dla <xref:System.Web.UI.WebControls.LinqDataSource.Selected> zdarzeń.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount/vb/Default.aspx#1)]  
  
 W poniższym przykładzie pokazano kod obsługi zdarzenia <xref:System.Web.UI.WebControls.LinqDataSource.Selected> zdarzeń. Wartość <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> właściwości jest przypisany do <xref:System.Web.UI.WebControls.Literal> formantu.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount/cs/Default.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount/vb/Default.aspx.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>