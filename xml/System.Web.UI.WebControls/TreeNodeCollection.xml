<Type Name="TreeNodeCollection" FullName="System.Web.UI.WebControls.TreeNodeCollection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="79542c4b25b631281f79eaa1d06a22eebf673ef8" /><Meta Name="ms.sourcegitcommit" Value="e7974886b08aa83a8fb461e8550f31a7d4331ee3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="07/23/2019" /><Meta Name="ms.locfileid" Value="68392971" /></Metadata><TypeSignature Language="C#" Value="public sealed class TreeNodeCollection : System.Collections.ICollection, System.Web.UI.IStateManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TreeNodeCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Web.UI.IStateManager" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.TreeNodeCollection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TreeNodeCollection&#xA;Implements ICollection, IStateManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class TreeNodeCollection sealed : System::Collections::ICollection, System::Web::UI::IStateManager" />
  <TypeSignature Language="F#" Value="type TreeNodeCollection = class&#xA;    interface ICollection&#xA;    interface IEnumerable&#xA;    interface IStateManager" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IStateManager</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Reprezentuje kolekcję <see cref="T:System.Web.UI.WebControls.TreeNode" /> obiektów <see cref="T:System.Web.UI.WebControls.TreeView" /> w kontrolce. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasa jest używana do przechowywania <xref:System.Web.UI.WebControls.TreeNode> kolekcji obiektów w <xref:System.Web.UI.WebControls.TreeView> kontrolce i zarządzania nią. <xref:System.Web.UI.WebControls.TreeNodeCollection> Kontrolka<xref:System.Web.UI.WebControls.TreeNodeCollection> używa klasy w dwóch właściwościach. <xref:System.Web.UI.WebControls.TreeView> Przechowuje swoje węzły główne we <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> właściwości i jej wybranych węzłach <xref:System.Web.UI.WebControls.TreeView.CheckedNodes%2A> we właściwości. Kolekcja jest również używana <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> dla właściwości do przechowywania węzłów podrzędnych (jeśli istnieją). <xref:System.Web.UI.WebControls.TreeNodeCollection>  
  
 <xref:System.Web.UI.WebControls.TreeNodeCollection> Klasa obsługuje kilka sposobów uzyskiwania dostępu do elementów w kolekcji:  
  
-   Użyj indeksatora, <xref:System.Web.UI.WebControls.TreeNodeCollection.Item%2A> aby <xref:System.Web.UI.WebControls.TreeNode> pobrać obiekt bezpośrednio w określonym indeksie liczonym od zera.  
  
-   <xref:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator%2A> Użyj metody, aby utworzyć moduł wyliczający, który może być używany do iteracji kolekcji.  
  
-   Użyj `foreach` (C#) lub `For Each` (Visual Basic), aby wykonać iterację kolekcji.  
  
-   Użyj metody <xref:System.Web.UI.WebControls.TreeNodeCollection.CopyTo%2A> , aby skopiować zawartość kolekcji <xref:System.Array> do obiektu.  
  
 Można programowo zarządzać <xref:System.Web.UI.WebControls.TreeNodeCollection> przez dodawanie i usuwanie <xref:System.Web.UI.WebControls.TreeNode> obiektów. Aby dodać węzły do kolekcji, użyj <xref:System.Web.UI.WebControls.TreeNodeCollection.Add%2A> metody lub. <xref:System.Web.UI.WebControls.TreeNodeCollection.AddAt%2A> Aby usunąć węzły z kolekcji, użyj <xref:System.Web.UI.WebControls.TreeNodeCollection.Remove%2A>metody, <xref:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt%2A>lub <xref:System.Web.UI.WebControls.TreeNodeCollection.Clear%2A> .  
  
> [!NOTE]
>  Gdy formant jest powiązany ze źródłem danych <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> , kolekcje i <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> są wypełniane automatycznie przy każdym wystąpieniu powiązania. <xref:System.Web.UI.WebControls.TreeView> Wszystkie zmiany kolekcji między powiązaniami zostaną utracone. Aby zachować te zmiany, należy zaktualizować źródło danych lub ręcznie skompilować kolekcję po każdym utworzeniu powiązania.  
  
 <xref:System.Web.UI.WebControls.TreeNodeCollection> Zawiera właściwości i metody, które umożliwiają pobieranie informacji o samej kolekcji. Aby dowiedzieć się, ile elementów znajduje się w kolekcji, użyj <xref:System.Web.UI.WebControls.TreeNodeCollection.Count%2A> właściwości. Jeśli chcesz określić, czy kolekcja zawiera określony <xref:System.Web.UI.WebControls.TreeNode> obiekt, <xref:System.Web.UI.WebControls.TreeNodeCollection.Contains%2A> Użyj metody. Aby uzyskać indeks <xref:System.Web.UI.WebControls.TreeNode> obiektu w kolekcji, <xref:System.Web.UI.WebControls.TreeNodeCollection.IndexOf%2A> Użyj metody.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, jak programowo dodać węzły do i usunąć je z <xref:System.Web.UI.WebControls.TreeNodeCollection>. Zwróć uwagę, <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> że <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> właściwości i zwracają <xref:System.Web.UI.WebControls.TreeNodeCollection> obiekt.  
  
 [!code-aspx-csharp[TreeNodeCollectionAdd#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionAdd/CS/treenodecollectionaddcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionAdd#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionAdd/VB/treenodecollectionaddvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.TreeView" />
    <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
    <altmember cref="P:System.Web.UI.WebControls.TreeView.Nodes" />
    <altmember cref="P:System.Web.UI.WebControls.TreeView.CheckedNodes" />
    <altmember cref="P:System.Web.UI.WebControls.TreeNode.ChildNodes" />
    <altmember cref="P:System.Web.UI.WebControls.TreeNodeCollection.Item(System.Int32)" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.CopyTo(System.Web.UI.WebControls.TreeNode[],System.Int32)" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Add(System.Web.UI.WebControls.TreeNode)" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.AddAt(System.Int32,System.Web.UI.WebControls.TreeNode)" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Remove(System.Web.UI.WebControls.TreeNode)" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt(System.Int32)" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Clear" />
    <altmember cref="P:System.Web.UI.WebControls.TreeNodeCollection.Count" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Contains(System.Web.UI.WebControls.TreeNode)" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.IndexOf(System.Web.UI.WebControls.TreeNode)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TreeNodeCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TreeNodeCollection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> klasy przy użyciu wartości domyślnych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tego konstruktora, aby zainicjować nowe wystąpienie <xref:System.Web.UI.WebControls.TreeNodeCollection> klasy przy użyciu wartości domyślnych. Ten konstruktor jest często używany podczas tworzenia kolekcji węzłów głównych, w których węzeł nadrzędny (lub właściciel) nie jest wymagany.  
  
> [!NOTE]
>  Podczas tworzenia kolekcji węzłów niebędących głównymi należy użyć przeciążonego konstruktora, który przyjmuje `owner` parametr, zamiast tego konstruktora, aby określić węzeł nadrzędny.  
  
 Ten konstruktor jest używany głównie przez deweloperów kontroli.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.Nodes" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.CheckedNodes" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.ChildNodes" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TreeNodeCollection (System.Web.UI.WebControls.TreeNode owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.WebControls.TreeNode owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.#ctor(System.Web.UI.WebControls.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (owner As TreeNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TreeNodeCollection(System::Web::UI::WebControls::TreeNode ^ owner);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.TreeNodeCollection : System.Web.UI.WebControls.TreeNode -&gt; System.Web.UI.WebControls.TreeNodeCollection" Usage="new System.Web.UI.WebControls.TreeNodeCollection owner" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="owner" Type="System.Web.UI.WebControls.TreeNode" />
      </Parameters>
      <Docs>
        <param name="owner"><see cref="T:System.Web.UI.WebControls.TreeNode" /> Obiekt, który reprezentuje węzeł nadrzędny kolekcji.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> klasy przy użyciu określonego węzła nadrzędnego (lub właściciela).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tego konstruktora, aby zainicjować nowe wystąpienie <xref:System.Web.UI.WebControls.TreeNodeCollection> klasy przy użyciu określonego węzła nadrzędnego (lub właściciela). Ten konstruktor jest często używany podczas tworzenia kolekcji węzłów innych niż główne, w których należy określić węzeł nadrzędny.  
  
> [!NOTE]
>  Podczas tworzenia kolekcji węzłów głównych należy rozważyć użycie konstruktora bez parametrów, ponieważ węzły główne nie mają węzła nadrzędnego.  
  
 Ten konstruktor jest używany głównie przez deweloperów kontroli.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.Nodes" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.CheckedNodes" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.ChildNodes" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Web.UI.WebControls.TreeNode child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Web.UI.WebControls.TreeNode child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.Add(System.Web.UI.WebControls.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (child As TreeNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Web::UI::WebControls::TreeNode ^ child);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Web.UI.WebControls.TreeNode -&gt; unit" Usage="treeNodeCollection.Add child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Web.UI.WebControls.TreeNode" />
      </Parameters>
      <Docs>
        <param name="child"><see cref="T:System.Web.UI.WebControls.TreeNode" /> Obiekt do dołączenia.</param>
        <summary>Dołącza określony <see cref="T:System.Web.UI.WebControls.TreeNode" /> obiekt do końca <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody <xref:System.Web.UI.WebControls.TreeNodeCollection.Add%2A> , aby dołączyć określony <xref:System.Web.UI.WebControls.TreeNode> obiekt <xref:System.Web.UI.WebControls.TreeNodeCollection>do końca.  
  
> [!NOTE]
>  Umożliwia dodanie odwołań o wartości null (Nothing w Visual Basic), a także zduplikowanych <xref:System.Web.UI.WebControls.TreeNode> obiektów. <xref:System.Web.UI.WebControls.TreeNodeCollection>  
  
 Alternatywnie można wstawić <xref:System.Web.UI.WebControls.TreeNode> obiekt <xref:System.Web.UI.WebControls.TreeNodeCollection> w <xref:System.Web.UI.WebControls.TreeNodeCollection.AddAt%2A> określonym indeksie przy użyciu metody.  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób użycia <xref:System.Web.UI.WebControls.TreeNodeCollection.Add%2A> metody do programistycznego dodawania węzła <xref:System.Web.UI.WebControls.TreeNodeCollection>do. Zwróć uwagę, <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> że <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> wszystkie właściwości i zwracają <xref:System.Web.UI.WebControls.TreeNodeCollection> obiekt.  
  
 [!code-aspx-csharp[TreeNodeCollectionAdd#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionAdd/CS/treenodecollectionaddcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionAdd#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionAdd/VB/treenodecollectionaddvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="M:System.Collections.ArrayList.Add(System.Object)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.AddAt(System.Int32,System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Clear" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Contains(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Remove(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="AddAt">
      <MemberSignature Language="C#" Value="public void AddAt (int index, System.Web.UI.WebControls.TreeNode child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAt(int32 index, class System.Web.UI.WebControls.TreeNode child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.AddAt(System.Int32,System.Web.UI.WebControls.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAt (index As Integer, child As TreeNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAt(int index, System::Web::UI::WebControls::TreeNode ^ child);" />
      <MemberSignature Language="F#" Value="member this.AddAt : int * System.Web.UI.WebControls.TreeNode -&gt; unit" Usage="treeNodeCollection.AddAt (index, child)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="child" Type="System.Web.UI.WebControls.TreeNode" />
      </Parameters>
      <Docs>
        <param name="index">Lokalizacja indeksu (liczony od zera), w którym ma <see cref="T:System.Web.UI.WebControls.TreeNode" /> zostać wstawiony obiekt.</param>
        <param name="child"><see cref="T:System.Web.UI.WebControls.TreeNode" /> Obiekt do dodania.</param>
        <summary>Wstawia określony <see cref="T:System.Web.UI.WebControls.TreeNode" /> obiekt <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> w obiekcie w określonej lokalizacji indeksu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody, aby wstawić określony <xref:System.Web.UI.WebControls.TreeNode> obiekt w <xref:System.Web.UI.WebControls.TreeNodeCollection> określonym indeksie liczonym od zera. <xref:System.Web.UI.WebControls.TreeNodeCollection.AddAt%2A>  
  
> [!NOTE]
>  Umożliwia wstawianie odwołań o wartości null (Nothing w Visual Basic), a także zduplikowanych <xref:System.Web.UI.WebControls.TreeNode> obiektów. <xref:System.Web.UI.WebControls.TreeNodeCollection>  
  
 Alternatywnie, można dołączyć <xref:System.Web.UI.WebControls.TreeNode> obiekt na końcu <xref:System.Web.UI.WebControls.TreeNodeCollection> za pomocą <xref:System.Web.UI.WebControls.TreeNodeCollection.Add%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób użycia <xref:System.Web.UI.WebControls.TreeNodeCollection.AddAt%2A> metody do programistycznego dodawania węzła <xref:System.Web.UI.WebControls.TreeNodeCollection>do. Zwróć uwagę, <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> że <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> wszystkie właściwości i zwracają <xref:System.Web.UI.WebControls.TreeNodeCollection> obiekt.  
  
 [!code-aspx-csharp[TreeNodeCollectionAdd#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionAdd/CS/treenodecollectionaddcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionAdd#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionAdd/VB/treenodecollectionaddvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="child" />jest <see langword="null" />.</exception>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Add(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Clear" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Contains(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Remove(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="treeNodeCollection.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> Opróżnia obiekt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody, aby usunąć wszystkie <xref:System.Web.UI.WebControls.TreeNode> obiekty z <xref:System.Web.UI.WebControls.TreeNodeCollection>. <xref:System.Web.UI.WebControls.TreeNodeCollection.Clear%2A>  
  
> [!NOTE]
>  Aby usunąć pojedynczy węzeł z kolekcji, użyj <xref:System.Web.UI.WebControls.TreeNodeCollection.Remove%2A> metody lub. <xref:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt%2A>  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób użycia <xref:System.Web.UI.WebControls.TreeNodeCollection.Clear%2A> metody do programistycznego <xref:System.Web.UI.WebControls.TreeNodeCollection>opróżniania. Zwróć uwagę, <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> że <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> właściwości i zwracają <xref:System.Web.UI.WebControls.TreeNodeCollection> obiekt.  
  
 [!code-aspx-csharp[TreeNodeCollectionAdd#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionAdd/CS/treenodecollectionaddcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionAdd#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionAdd/VB/treenodecollectionaddvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Add(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.AddAt(System.Int32,System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Contains(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Remove(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Web.UI.WebControls.TreeNode c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Web.UI.WebControls.TreeNode c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.Contains(System.Web.UI.WebControls.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (c As TreeNode) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Web::UI::WebControls::TreeNode ^ c);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.Web.UI.WebControls.TreeNode -&gt; bool" Usage="treeNodeCollection.Contains c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Web.UI.WebControls.TreeNode" />
      </Parameters>
      <Docs>
        <param name="c">Obiekt <see cref="T:System.Web.UI.WebControls.TreeNode" /> , który ma zostać znaleziony.</param>
        <summary>Określa, czy określony <see cref="T:System.Web.UI.WebControls.TreeNode" /> obiekt znajduje się w kolekcji.</summary>
        <returns><see langword="true" />Jeśli określony <see cref="T:System.Web.UI.WebControls.TreeNode" /> obiekt jest zawarty w kolekcji; <see langword="false" />w przeciwnym razie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody <xref:System.Web.UI.WebControls.TreeNodeCollection.Contains%2A> , aby określić, <xref:System.Web.UI.WebControls.TreeNode> <xref:System.Web.UI.WebControls.TreeNodeCollection>czy obiekt jest zawarty w. Ta metoda jest często używana do testowania pod kątem istnienia <xref:System.Web.UI.WebControls.TreeNode> obiektu przed wykonaniem zadania, takiego jak dodanie lub usunięcie węzła z kolekcji.  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób użycia <xref:System.Web.UI.WebControls.TreeNodeCollection.Contains%2A> metody w celu ustalenia, czy wybrany węzeł znajduje się <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> w kolekcji. Zauważ, że <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> Właściwość <xref:System.Web.UI.WebControls.TreeNodeCollection> zwraca obiekt.  
  
 [!code-aspx-csharp[TreeNodeCollectionIndexOf#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionIndexOf/CS/treenodecollectionindexofcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionIndexOf/VB/treenodecollectionindexofvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Add(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.AddAt(System.Int32,System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Clear" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.IndexOf(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Remove(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Web.UI.WebControls.TreeNode[] nodeArray, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.Web.UI.WebControls.TreeNode[] nodeArray, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.CopyTo(System.Web.UI.WebControls.TreeNode[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (nodeArray As TreeNode(), index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;System::Web::UI::WebControls::TreeNode ^&gt; ^ nodeArray, int index);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : System.Web.UI.WebControls.TreeNode[] * int -&gt; unit" Usage="treeNodeCollection.CopyTo (nodeArray, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeArray" Type="System.Web.UI.WebControls.TreeNode[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="nodeArray">Tablica <see cref="T:System.Web.UI.WebControls.TreeNode" /> obiektów na podstawie zera, która odbiera skopiowane elementy <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />z.</param>
        <param name="index">Pozycja w tablicy docelowej, w której ma zostać rozpoczęte otrzymywanie skopiowanej zawartości.</param>
        <summary>Kopiuje wszystkie elementy z <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> obiektu do zgodnej jednowymiarowej <see cref="T:System.Web.UI.WebControls.TreeNode" /> tablicy obiektów, rozpoczynając od określonego indeksu w tablicy docelowej.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody, aby skopiować zawartość <xref:System.Web.UI.WebControls.TreeNodeCollection> do określonego obiektu na podstawie <xref:System.Array?displayProperty=nameWithType> 0. <xref:System.Web.UI.WebControls.TreeNodeCollection.CopyTo%2A> Elementy są kopiowane, rozpoczynając od określonego indeksu tablicy docelowej. Za pomocą <xref:System.Web.UI.WebControls.TreeNodeCollection>obiektu można użyć składni tablicy, aby uzyskać dostęp do elementów w. <xref:System.Array?displayProperty=nameWithType>  
  
 Alternatywnie można również użyć <xref:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator%2A> metody, aby utworzyć moduł wyliczający, który może służyć do uzyskiwania dostępu do elementów w kolekcji.  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób użycia <xref:System.Web.UI.WebControls.TreeNodeCollection.CopyTo%2A> metody do kopiowania wartości <xref:System.Web.UI.WebControls.TreeNodeCollection> do tablicy. Zauważ, że <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> Właściwość <xref:System.Web.UI.WebControls.TreeNodeCollection> zwraca obiekt.  
  
 [!code-aspx-csharp[TreeNodeCollectionCopyTo#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionCopyTo/CS/treenodecollectioncopytocs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionCopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionCopyTo/VB/treenodecollectioncopytovb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="T:System.Array" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNodeCollection.Item(System.Int32)" />
        <altmember cref="M:System.Collections.ArrayList.CopyTo(System.Array)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNodeCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Web.UI.WebControls.TreeNodeCollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę elementów w <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> obiekcie.</summary>
        <value>Liczba elementów w <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj właściwości <xref:System.Web.UI.WebControls.TreeNodeCollection.Count%2A> , aby określić liczbę elementów <xref:System.Web.UI.WebControls.TreeNodeCollection>w. Ta właściwość jest często używana podczas iteracji kolekcji, aby określić górną granicę kolekcji. <xref:System.Web.UI.WebControls.TreeNodeCollection.Count%2A> Właściwość jest również często używana do określenia, czy kolekcja jest pusta.  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób użycia właściwości, <xref:System.Web.UI.WebControls.TreeNodeCollection.Count%2A> aby określić liczbę elementów <xref:System.Web.UI.WebControls.TreeNodeCollection>w. Następnie wykonuje przechodzenie <xref:System.Web.UI.WebControls.TreeView> kontrolki w celu wyświetlenia tekstu każdego węzła.  
  
 [!code-aspx-csharp[TreeNodeCollectionCount#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionCount/CS/treenodecollectioncountcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionCount#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionCount/VB/treenodecollectioncountvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Collections.ArrayList.Count" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.Nodes" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.CheckedNodes" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.ChildNodes" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="treeNodeCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca moduł wyliczający, który może być używany do iteracji <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> w obiekcie.</summary>
        <returns>Moduł wyliczający, który może być używany do iteracji <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />przez.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody, aby utworzyć moduł wyliczający, który można łatwo powtórzyć, aby pobrać każdy element <xref:System.Web.UI.WebControls.TreeNodeCollection>w. <xref:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator%2A> Aby wyświetlić element, który jest obecnie wskazywany w module wyliczającym, użyj <xref:System.Collections.IEnumerator.Current%2A?displayProperty=nameWithType> właściwości. Użyj metody <xref:System.Collections.IEnumerator.MoveNext%2A?displayProperty=nameWithType> , aby przejść do następnego elementu. Jeśli musisz przenieść moduł wyliczający z powrotem do początku kolekcji, użyj <xref:System.Collections.IEnumerator.Reset%2A?displayProperty=nameWithType> metody.  
  
> [!NOTE]
>  Po utworzeniu modułu wyliczającego lub zastosowaniu <xref:System.Collections.IEnumerator.Reset%2A?displayProperty=nameWithType> metody należy <xref:System.Collections.IEnumerator.MoveNext%2A?displayProperty=nameWithType> wywołać metodę. W przeciwnym razie element reprezentowany przez <xref:System.Collections.IEnumerator.Current%2A?displayProperty=nameWithType> właściwość jest niezdefiniowany.  
  
 Alternatywnie można również użyć <xref:System.Web.UI.WebControls.TreeNodeCollection.CopyTo%2A> metody, aby <xref:System.Array?displayProperty=nameWithType> utworzyć obiekt, którego można użyć w celu uzyskania dostępu do elementów w kolekcji. Kolejną alternatywą jest użycie `foreach` struktury lub `For Each` do iteracji w kolekcji.  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób użycia <xref:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator%2A> metody w celu utworzenia modułu wyliczającego, który zawiera węzły <xref:System.Web.UI.WebControls.TreeView> główne formantu.  
  
 [!code-aspx-csharp[TreeNodeCollectionGetEnumerator#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionGetEnumerator/CS/treenodecollectiongetenumeratorcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionGetEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionGetEnumerator/VB/treenodecollectiongetenumeratorvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNodeCollection.Item(System.Int32)" />
        <altmember cref="M:System.Collections.ArrayList.GetEnumerator" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.CopyTo(System.Web.UI.WebControls.TreeNode[],System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (System.Web.UI.WebControls.TreeNode value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(class System.Web.UI.WebControls.TreeNode value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.IndexOf(System.Web.UI.WebControls.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As TreeNode) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::Web::UI::WebControls::TreeNode ^ value);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : System.Web.UI.WebControls.TreeNode -&gt; int" Usage="treeNodeCollection.IndexOf value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Web.UI.WebControls.TreeNode" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt <see cref="T:System.Web.UI.WebControls.TreeNode" /> , który ma zostać zlokalizowany.</param>
        <summary>Określa indeks określonego <see cref="T:System.Web.UI.WebControls.TreeNode" /> obiektu.</summary>
        <returns>Indeks (liczony od zera) pierwszego wystąpienia <paramref name="value" /> <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />w, jeśli został znaleziony; w przeciwnym razie-1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody, aby określić indeks (liczony od zera) określonego <xref:System.Web.UI.WebControls.TreeNode> obiektu w <xref:System.Web.UI.WebControls.TreeNodeCollection> obiekcie. <xref:System.Web.UI.WebControls.TreeNodeCollection.IndexOf%2A> Jeśli węzeł nie znajduje się w kolekcji, metoda zwróci wartość-1.  
  
> [!NOTE]
>  Jeśli określony węzeł pojawia się wiele razy w kolekcji, zwracany jest indeks pierwszego wystąpienia.  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób użycia <xref:System.Web.UI.WebControls.TreeNodeCollection.IndexOf%2A> metody w celu określenia indeksu węzła głównego. Zauważ, że <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> Właściwość <xref:System.Web.UI.WebControls.TreeNodeCollection> zwraca obiekt.  
  
 [!code-aspx-csharp[TreeNodeCollectionIndexOf#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionIndexOf/CS/treenodecollectionindexofcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionIndexOf/VB/treenodecollectionindexofvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="M:System.Collections.ArrayList.IndexOf(System.Object)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Contains(System.Web.UI.WebControls.TreeNode)" />
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNodeCollection.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSynchronized : bool" Usage="System.Web.UI.WebControls.TreeNodeCollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> czy dostęp do elementu jest synchronizowany (bezpieczny wątkowo).</summary>
        <value><see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość służy do wskazywania, czy dostęp do programu <xref:System.Web.UI.WebControls.TreeNodeCollection> jest synchronizowany (wątek bezpieczny). <xref:System.Web.UI.WebControls.TreeNodeCollection.IsSynchronized%2A> Ta właściwość jest pochodną <xref:System.Collections.ICollection?displayProperty=nameWithType> klasy i jest zastępowana, aby zawsze zwracać. `false`  
  
 Aby uzyskać więcej informacji na <xref:System.Web.UI.WebControls.TreeNodeCollection.IsSynchronized%2A> temat właściwości, <xref:System.Collections.ICollection.IsSynchronized%2A?displayProperty=nameWithType> Zobacz Właściwość <xref:System.Collections.ICollection?displayProperty=nameWithType> interfejsu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="P:System.Collections.ICollection.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TreeNode this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TreeNode Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNodeCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::TreeNode ^ default[int] { System::Web::UI::WebControls::TreeNode ^ get(int index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : System.Web.UI.WebControls.TreeNode" Usage="System.Web.UI.WebControls.TreeNodeCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Indeks (liczony od zera) <see cref="T:System.Web.UI.WebControls.TreeNode" /> obiektu do pobrania.</param>
        <summary>Pobiera obiekt pod określonym indeksem <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> w obiekcie. <see cref="T:System.Web.UI.WebControls.TreeNode" /></summary>
        <value>Obiekt o określonym indeksie <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />w. <see cref="T:System.Web.UI.WebControls.TreeNode" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tego indeksatora, aby uzyskać <xref:System.Web.UI.WebControls.TreeNode> dostęp do obiektu <xref:System.Web.UI.WebControls.TreeNodeCollection> z określonego indeksu przy użyciu notacji Array. Indeksator umożliwia bezpośrednie modyfikowanie lub zastępowanie <xref:System.Web.UI.WebControls.TreeNode> obiektu w kolekcji. Kolekcja jest oparta na zero.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, jak za pomocą indeksatora uzyskać dostęp do elementu w <xref:System.Web.UI.WebControls.TreeNodeCollection>. Zwróć uwagę, <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> że <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> właściwości i zwracają <xref:System.Web.UI.WebControls.TreeNodeCollection> obiekt.  
  
 [!code-aspx-csharp[TreeNodeCollectionAdd#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionAdd/CS/treenodecollectionaddcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionAdd#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionAdd/VB/treenodecollectionaddvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.CopyTo(System.Web.UI.WebControls.TreeNode[],System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Web.UI.WebControls.TreeNode value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Web.UI.WebControls.TreeNode value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.Remove(System.Web.UI.WebControls.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (value As TreeNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Web::UI::WebControls::TreeNode ^ value);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.Web.UI.WebControls.TreeNode -&gt; unit" Usage="treeNodeCollection.Remove value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Web.UI.WebControls.TreeNode" />
      </Parameters>
      <Docs>
        <param name="value"><see cref="T:System.Web.UI.WebControls.TreeNode" /> Obiekt do usunięcia.</param>
        <summary>Usuwa określony <see cref="T:System.Web.UI.WebControls.TreeNode" /> obiekt <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> z obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.TreeNodeCollection.Remove%2A> Użyj metody, aby usunąć określony węzeł z kolekcji. Wszystkie elementy znajdujące się po tym węźle są następnie przenoszone w górę w celu wypełnienia wolnej pozycji. Zostaną również zaktualizowane indeksy przeniesionych elementów.  
  
> [!NOTE]
>  Może zawierać odwołania o wartości null (Nothing w Visual Basic), a także zduplikowane <xref:System.Web.UI.WebControls.TreeNode> obiekty. <xref:System.Web.UI.WebControls.TreeNodeCollection>  
  
 Alternatywnie można usunąć węzeł w określonym indeksie przy użyciu <xref:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt%2A> metody. Można również usunąć każdy węzeł w kolekcji przy użyciu <xref:System.Web.UI.WebControls.TreeNodeCollection.Clear%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób użycia <xref:System.Web.UI.WebControls.TreeNodeCollection.Remove%2A> metody w celu programistycznego usunięcia węzła <xref:System.Web.UI.WebControls.TreeNodeCollection>z. Zwróć uwagę, <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> że <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> wszystkie właściwości i zwracają <xref:System.Web.UI.WebControls.TreeNodeCollection> obiekt.  
  
 [!code-aspx-csharp[TreeNodeCollectionAdd#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionAdd/CS/treenodecollectionaddcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionAdd#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionAdd/VB/treenodecollectionaddvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="value" />jest <see langword="null" />.</exception>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Add(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.AddAt(System.Int32,System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Clear" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Contains(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Collections.ArrayList.Remove(System.Object)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="member this.RemoveAt : int -&gt; unit" Usage="treeNodeCollection.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Lokalizacja indeksu (liczony od zera) węzła do usunięcia.</param>
        <summary>Usuwa obiekt znajdujący się w określonej lokalizacji indeksu <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> z obiektu. <see cref="T:System.Web.UI.WebControls.TreeNode" /></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody <xref:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt%2A> , aby <xref:System.Web.UI.WebControls.TreeNode> usunąć obiekt w określonej lokalizacji <xref:System.Web.UI.WebControls.TreeNodeCollection>indeksu od zera. Wszystkie elementy znajdujące się po tym węźle są następnie przenoszone w górę w celu wypełnienia wolnej pozycji. Zostaną również zaktualizowane indeksy przeniesionych elementów.  
  
> [!NOTE]
>  Może zawierać odwołania o wartości null (Nothing w Visual Basic), a także zduplikowane <xref:System.Web.UI.WebControls.TreeNode> obiekty. <xref:System.Web.UI.WebControls.TreeNodeCollection>  
  
 Alternatywnie można usunąć konkretny <xref:System.Web.UI.WebControls.TreeNode> obiekt za <xref:System.Web.UI.WebControls.TreeNodeCollection.Remove%2A> pomocą metody. Można również usunąć każdy węzeł w kolekcji przy użyciu <xref:System.Web.UI.WebControls.TreeNodeCollection.Clear%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób użycia <xref:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt%2A> metody w celu programistycznego usunięcia węzła <xref:System.Web.UI.WebControls.TreeNodeCollection>z. Zwróć uwagę, <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> że <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> wszystkie właściwości i zwracają <xref:System.Web.UI.WebControls.TreeNodeCollection> obiekt.  
  
 [!code-aspx-csharp[TreeNodeCollectionAdd#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionAdd/CS/treenodecollectionaddcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionAdd#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionAdd/VB/treenodecollectionaddvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Add(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.AddAt(System.Int32,System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Clear" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Contains(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Remove(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Collections.ArrayList.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNodeCollection.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SyncRoot : obj" Usage="System.Web.UI.WebControls.TreeNodeCollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt, który może służyć do synchronizowania dostępu do <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> obiektu.</summary>
        <value>, Który może służyć do synchronizowania dostępu do programu <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />. <see cref="T:System.Object" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość zawiera zsynchronizowaną wersję <xref:System.Web.UI.WebControls.TreeNodeCollection> programu, która może być używana z kodem wątków. <xref:System.Web.UI.WebControls.TreeNodeCollection.SyncRoot%2A>  
  
> [!CAUTION]
>  Właściwość tej klasy zawsze zwraca `false` <xref:System.Web.UI.WebControls.TreeNodeCollection> , co oznacza, że Klasa nie jest zsynchronizowana (nie jest bezpieczna wątkowo). <xref:System.Web.UI.WebControls.TreeNodeCollection.IsSynchronized%2A>  
  
 Synchronizowanie kodu musi wykonywać operacje na <xref:System.Web.UI.WebControls.TreeNodeCollection.SyncRoot%2A> obiekcie <xref:System.Web.UI.WebControls.TreeNodeCollection> <xref:System.Web.UI.WebControls.TreeNodeCollection> , nie bezpośrednio na samym siebie. Gwarantuje to prawidłowe funkcjonowanie kolekcji, które są uzyskiwane z innych obiektów. W celu zapewnienia odpowiedniej synchronizacji z innymi wątkami, które mogą jednocześnie modyfikować <xref:System.Web.UI.WebControls.TreeNodeCollection> obiekt.  
  
> [!NOTE]
>  Obiekt zwrócony w tej implementacji jest <xref:System.Collections.ArrayList?displayProperty=nameWithType> obiektem używanym do <xref:System.Web.UI.WebControls.TreeNode> przechowywania obiektów w kolekcji.  
  
 Wyliczanie w kolekcji nie jest wewnętrznie procedurą odporną na wielowątkowość. Nawet w przypadku synchronizacji kolekcji inne wątki mogą nadal modyfikować kolekcję, co powoduje zgłoszenie wyjątku przez moduł wyliczający. Aby zagwarantować bezpieczeństwo wątków podczas wyliczania, można zablokować kolekcję podczas całego procesu wyliczania albo rejestrować wyjątki wynikłe ze zmian wprowadzanych przez inne wątków.  
  
 Aby uzyskać więcej informacji na <xref:System.Web.UI.WebControls.DataGridColumnCollection.SyncRoot%2A> temat właściwości, <xref:System.Collections.ICollection.SyncRoot%2A?displayProperty=nameWithType> Zobacz Właściwość <xref:System.Collections.ICollection?displayProperty=nameWithType> interfejsu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="P:System.Collections.ArrayList.SyncRoot" />
        <altmember cref="P:System.Collections.ICollection.SyncRoot" />
        <altmember cref="T:System.Collections.ICollection" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">Obiekt oparty <see cref="T:System.Array" /> na zero, który odbiera skopiowane elementy <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />z.</param>
        <param name="index">Pozycja w tablicy docelowej, w której ma zostać rozpoczęte otrzymywanie skopiowanej zawartości.</param>
        <summary>Kopiuje wszystkie elementy z <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> obiektu do zgodnego jednowymiarowego <see cref="T:System.Array" />, rozpoczynając od określonego indeksu w tablicy docelowej.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody, aby skopiować zawartość <xref:System.Web.UI.WebControls.TreeNodeCollection> do określonego obiektu na podstawie <xref:System.Array?displayProperty=nameWithType> 0. <xref:System.Web.UI.WebControls.TreeNodeCollection.CopyTo%2A> Elementy są kopiowane, rozpoczynając od określonego indeksu tablicy docelowej. Za pomocą <xref:System.Web.UI.WebControls.TreeNodeCollection>obiektu można użyć składni tablicy, aby uzyskać dostęp do elementów w. <xref:System.Array?displayProperty=nameWithType>  
  
 Alternatywnie można również użyć <xref:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator%2A> metody, aby utworzyć moduł wyliczający, który może służyć do uzyskiwania dostępu do elementów w kolekcji.  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób użycia <xref:System.Web.UI.WebControls.TreeNodeCollection.CopyTo%2A> metody do kopiowania wartości <xref:System.Web.UI.WebControls.TreeNodeCollection> do tablicy. Zauważ, że <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> Właściwość <xref:System.Web.UI.WebControls.TreeNodeCollection> zwraca obiekt.  
  
 [!code-aspx-csharp[TreeNodeCollectionCopyTo#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionCopyTo/CS/treenodecollectioncopytocs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionCopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionCopyTo/VB/treenodecollectioncopytovb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="array" />nie jest tablicą <see cref="T:System.Web.UI.WebControls.TreeNode" /> obiektów.</exception>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="T:System.Array" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNodeCollection.Item(System.Int32)" />
        <altmember cref="M:System.Collections.ArrayList.CopyTo(System.Array)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.IsTrackingViewState">
      <MemberSignature Language="C#" Value="bool System.Web.UI.IStateManager.IsTrackingViewState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Web.UI.IStateManager.IsTrackingViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNodeCollection.System#Web#UI#IStateManager#IsTrackingViewState" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsTrackingViewState As Boolean Implements IStateManager.IsTrackingViewState" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Web::UI::IStateManager::IsTrackingViewState { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Web.UI.IStateManager.IsTrackingViewState" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IStateManager.IsTrackingViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> obiekt zapisuje zmiany w stanie widoku.</summary>
        <value><see langword="true" />Jeśli formant jest oznaczony do zapisania jego stanu; w przeciwnym razie. <see langword="false" /></value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Web.UI.Control.ViewState" />
        <altmember cref="M:System.Web.UI.Control.LoadViewState(System.Object)" />
        <altmember cref="M:System.Web.UI.Control.SaveViewState" />
        <related type="Article" href="https://msdn.microsoft.com/library/0218d965-5d30-445b-b6a6-8870e70e63ce(v=vs.100)">Omówienie zarządzania stanem ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.LoadViewState">
      <MemberSignature Language="C#" Value="void IStateManager.LoadViewState (object state);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IStateManager.LoadViewState(object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.System#Web#UI#IStateManager#LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub LoadViewState (state As Object) Implements IStateManager.LoadViewState" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IStateManager.LoadViewState(System::Object ^ state) = System::Web::UI::IStateManager::LoadViewState;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.LoadViewState(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="state">Element <see cref="T:System.Object" /> zawierający zapisane wartości stanu widoku.</param>
        <summary>Ładuje stan widoku poprzednio zapisanego obiektu.<see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.StateBag" />
        <altmember cref="T:System.Web.UI.StateItem" />
        <related type="Article" href="https://msdn.microsoft.com/library/0218d965-5d30-445b-b6a6-8870e70e63ce(v=vs.100)">Omówienie zarządzania stanem ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.SaveViewState">
      <MemberSignature Language="C#" Value="object IStateManager.SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Web.UI.IStateManager.SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.System#Web#UI#IStateManager#SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Function SaveViewState () As Object Implements IStateManager.SaveViewState" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.Web.UI.IStateManager.SaveViewState() = System::Web::UI::IStateManager::SaveViewState;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.SaveViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje zmiany stanu <see cref="T:System.Object" />widoku.</summary>
        <returns><see cref="T:System.Object" /> Zawiera zmiany stanu widoku.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.StateBag" />
        <altmember cref="T:System.Web.UI.StateItem" />
        <related type="Article" href="https://msdn.microsoft.com/library/0218d965-5d30-445b-b6a6-8870e70e63ce(v=vs.100)">Omówienie zarządzania stanem ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.TrackViewState">
      <MemberSignature Language="C#" Value="void IStateManager.TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IStateManager.TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.System#Web#UI#IStateManager#TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Sub TrackViewState () Implements IStateManager.TrackViewState" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IStateManager.TrackViewState() = System::Web::UI::IStateManager::TrackViewState;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.TrackViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> Nakazuje śledzenie zmian stanu widoku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po wywołaniu tej metody w formancie serwera właściwość zwróci <xref:System.Web.UI.Control.IsTrackingViewState%2A> `true`wartość.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.StateBag" />
        <altmember cref="T:System.Web.UI.StateItem" />
        <related type="Article" href="https://msdn.microsoft.com/library/0218d965-5d30-445b-b6a6-8870e70e63ce(v=vs.100)">Omówienie zarządzania stanem ASP.NET</related>
      </Docs>
    </Member>
  </Members>
</Type>