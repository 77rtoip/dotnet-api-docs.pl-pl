<Type Name="TreeNodeCollection" FullName="System.Web.UI.WebControls.TreeNodeCollection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5cce4966301477a078a6b2fa8a110793caadbfd5" /><Meta Name="ms.sourcegitcommit" Value="723b8a6d92667ba86fcda96190bad3b4a03283b3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="11/09/2018" /><Meta Name="ms.locfileid" Value="51303855" /></Metadata><TypeSignature Language="C#" Value="public sealed class TreeNodeCollection : System.Collections.ICollection, System.Web.UI.IStateManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TreeNodeCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Web.UI.IStateManager" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.TreeNodeCollection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TreeNodeCollection&#xA;Implements ICollection, IStateManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class TreeNodeCollection sealed : System::Collections::ICollection, System::Web::UI::IStateManager" />
  <TypeSignature Language="F#" Value="type TreeNodeCollection = class&#xA;    interface ICollection&#xA;    interface IEnumerable&#xA;    interface IStateManager" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IStateManager</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Reprezentuje kolekcję <see cref="T:System.Web.UI.WebControls.TreeNode" /> obiekty w <see cref="T:System.Web.UI.WebControls.TreeView" /> kontroli. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.TreeNodeCollection> Klasa jest używana do przechowywania i zarządzania nimi zbiór <xref:System.Web.UI.WebControls.TreeNode> obiekty w <xref:System.Web.UI.WebControls.TreeView> kontroli. <xref:System.Web.UI.WebControls.TreeView> Kontrolować używa <xref:System.Web.UI.WebControls.TreeNodeCollection> klasy na dwie jego właściwości. Przechowuje jego węzły główne w <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> właściwość i jego zaznaczonych węzłach <xref:System.Web.UI.WebControls.TreeView.CheckedNodes%2A> właściwości. <xref:System.Web.UI.WebControls.TreeNodeCollection> Kolekcji służy także do <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> właściwość do przechowywania węzłów podrzędnych (jeśli istnieje).  
  
 <xref:System.Web.UI.WebControls.TreeNodeCollection> Klasa obsługuje dostęp do elementów w kolekcji na kilka sposobów:  
  
-   Użyj <xref:System.Web.UI.WebControls.TreeNodeCollection.Item%2A> indeksatora w celu pobrania <xref:System.Web.UI.WebControls.TreeNode> obiektu bezpośrednio pod konkretny indeks zaczynający się od zera.  
  
-   Użyj <xref:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator%2A> metodę, aby utworzyć moduł wyliczający, który może służyć do iterowania po kolekcji.  
  
-   Użyj `foreach` (C#) lub `For Each` (Visual Basic) do iterowania po kolekcji.  
  
-   Użyj <xref:System.Web.UI.WebControls.TreeNodeCollection.CopyTo%2A> metodę, aby skopiować zawartość kolekcji do <xref:System.Array> obiektu.  
  
 Możesz programowo zarządzać <xref:System.Web.UI.WebControls.TreeNodeCollection> dodając i usuwając <xref:System.Web.UI.WebControls.TreeNode> obiektów. Aby dodać węzły do kolekcji, należy użyć <xref:System.Web.UI.WebControls.TreeNodeCollection.Add%2A> lub <xref:System.Web.UI.WebControls.TreeNodeCollection.AddAt%2A> metody. Aby usunąć węzły z kolekcji, użyj <xref:System.Web.UI.WebControls.TreeNodeCollection.Remove%2A>, <xref:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt%2A>, lub <xref:System.Web.UI.WebControls.TreeNodeCollection.Clear%2A> metody.  
  
> [!NOTE]
>  Gdy <xref:System.Web.UI.WebControls.TreeView> kontrolka jest powiązana ze źródłem danych <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> i <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> kolekcje są wypełniane automatycznie każdorazowo występuje powiązania. Wszelkie zmiany w kolekcji między powiązań zostaną utracone. Aby zachować te zmiany, zaktualizować źródło danych lub ręcznie przebudować każdorazowo, gdy powiąże kolekcję.  
  
 <xref:System.Web.UI.WebControls.TreeNodeCollection> Zawiera właściwości i metody, które umożliwiają pobieranie informacji o sama kolekcja. Aby dowiedzieć się, ile elementów znajdują się w kolekcji, należy użyć <xref:System.Web.UI.WebControls.TreeNodeCollection.Count%2A> właściwości. Jeśli chcesz ustalić, czy kolekcja zawiera określony <xref:System.Web.UI.WebControls.TreeNode> obiektu, należy użyć <xref:System.Web.UI.WebControls.TreeNodeCollection.Contains%2A> metody. Aby uzyskać indeks <xref:System.Web.UI.WebControls.TreeNode> obiektu w kolekcji, użyj <xref:System.Web.UI.WebControls.TreeNodeCollection.IndexOf%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak programowo dodać węzły do i usuń je z <xref:System.Web.UI.WebControls.TreeNodeCollection>. Należy zauważyć, że <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> i <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> return właściwości <xref:System.Web.UI.WebControls.TreeNodeCollection> obiektu.  
  
 [!code-aspx-csharp[TreeNodeCollectionAdd#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionAdd/CS/treenodecollectionaddcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionAdd#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionAdd/VB/treenodecollectionaddvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.TreeView" />
    <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
    <altmember cref="P:System.Web.UI.WebControls.TreeView.Nodes" />
    <altmember cref="P:System.Web.UI.WebControls.TreeView.CheckedNodes" />
    <altmember cref="P:System.Web.UI.WebControls.TreeNode.ChildNodes" />
    <altmember cref="P:System.Web.UI.WebControls.TreeNodeCollection.Item(System.Int32)" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.CopyTo(System.Web.UI.WebControls.TreeNode[],System.Int32)" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Add(System.Web.UI.WebControls.TreeNode)" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.AddAt(System.Int32,System.Web.UI.WebControls.TreeNode)" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Remove(System.Web.UI.WebControls.TreeNode)" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt(System.Int32)" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Clear" />
    <altmember cref="P:System.Web.UI.WebControls.TreeNodeCollection.Count" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Contains(System.Web.UI.WebControls.TreeNode)" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.IndexOf(System.Web.UI.WebControls.TreeNode)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TreeNodeCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TreeNodeCollection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> klasy przy użyciu wartości domyślnych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Umożliwia ten konstruktor inicjuje nowe wystąpienie klasy <xref:System.Web.UI.WebControls.TreeNodeCollection> klasy przy użyciu wartości domyślnych. Ten konstruktor jest często stosowany podczas tworzenia kolekcji węzłów głównych gdzie węzła nadrzędnego (lub właściciela) nie jest wymagana.  
  
> [!NOTE]
>  Podczas tworzenia kolekcji użytkowników innych niż root węzłów, należy używać przeciążonego konstruktora, który przyjmuje `owner` parametru, zamiast tego konstruktora, aby określić węzła nadrzędnego.  
  
 Ten konstruktor jest używany przede wszystkim deweloperom kontroli.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.Nodes" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.CheckedNodes" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.ChildNodes" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TreeNodeCollection (System.Web.UI.WebControls.TreeNode owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.WebControls.TreeNode owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.#ctor(System.Web.UI.WebControls.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (owner As TreeNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TreeNodeCollection(System::Web::UI::WebControls::TreeNode ^ owner);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.TreeNodeCollection : System.Web.UI.WebControls.TreeNode -&gt; System.Web.UI.WebControls.TreeNodeCollection" Usage="new System.Web.UI.WebControls.TreeNodeCollection owner" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="owner" Type="System.Web.UI.WebControls.TreeNode" />
      </Parameters>
      <Docs>
        <param name="owner"><see cref="T:System.Web.UI.WebControls.TreeNode" /> Obiekt, który reprezentuje węzeł nadrzędny kolekcji.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> przy użyciu określonego elementu nadrzędnego węzła (lub właściciela).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Umożliwia ten konstruktor inicjuje nowe wystąpienie klasy <xref:System.Web.UI.WebControls.TreeNodeCollection> przy użyciu określonego elementu nadrzędnego węzła (lub właściciela). Ten konstruktor jest często używany podczas tworzenia kolekcji użytkowników innych niż root węzłów wymagających Określ węzła nadrzędnego.  
  
> [!NOTE]
>  Podczas tworzenia kolekcji Węzły główne, należy wziąć pod uwagę przy użyciu konstruktora domyślnego, ponieważ węzły główne nie ma węzła nadrzędnego.  
  
 Ten konstruktor jest używany przede wszystkim deweloperom kontroli.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.Nodes" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.CheckedNodes" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.ChildNodes" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Web.UI.WebControls.TreeNode child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Web.UI.WebControls.TreeNode child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.Add(System.Web.UI.WebControls.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (child As TreeNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Web::UI::WebControls::TreeNode ^ child);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Web.UI.WebControls.TreeNode -&gt; unit" Usage="treeNodeCollection.Add child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Web.UI.WebControls.TreeNode" />
      </Parameters>
      <Docs>
        <param name="child"><see cref="T:System.Web.UI.WebControls.TreeNode" /> Obiektu do dołączenia.</param>
        <summary>Dołącza określony <see cref="T:System.Web.UI.WebControls.TreeNode" /> obiekt na koniec <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.TreeNodeCollection.Add%2A> metodę, aby dołączyć określonego <xref:System.Web.UI.WebControls.TreeNode> obiekt na koniec <xref:System.Web.UI.WebControls.TreeNodeCollection>.  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.TreeNodeCollection> Pozwala na dodawanie odwołania o wartości null (Nothing w języku Visual Basic), a także zduplikowane <xref:System.Web.UI.WebControls.TreeNode> obiektów.  
  
 Alternatywnie, można wstawić <xref:System.Web.UI.WebControls.TreeNode> obiektu <xref:System.Web.UI.WebControls.TreeNodeCollection> pod określonym indeksem przy użyciu <xref:System.Web.UI.WebControls.TreeNodeCollection.AddAt%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład pokazuje sposób użycia <xref:System.Web.UI.WebControls.TreeNodeCollection.Add%2A> metodę, aby programowo dodać węzeł do <xref:System.Web.UI.WebControls.TreeNodeCollection>. Należy zauważyć, że <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> i <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> właściwości każdego zwracają <xref:System.Web.UI.WebControls.TreeNodeCollection> obiektu.  
  
 [!code-aspx-csharp[TreeNodeCollectionAdd#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionAdd/CS/treenodecollectionaddcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionAdd#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionAdd/VB/treenodecollectionaddvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="M:System.Collections.ArrayList.Add(System.Object)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.AddAt(System.Int32,System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Clear" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Contains(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Remove(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="AddAt">
      <MemberSignature Language="C#" Value="public void AddAt (int index, System.Web.UI.WebControls.TreeNode child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAt(int32 index, class System.Web.UI.WebControls.TreeNode child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.AddAt(System.Int32,System.Web.UI.WebControls.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAt (index As Integer, child As TreeNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAt(int index, System::Web::UI::WebControls::TreeNode ^ child);" />
      <MemberSignature Language="F#" Value="member this.AddAt : int * System.Web.UI.WebControls.TreeNode -&gt; unit" Usage="treeNodeCollection.AddAt (index, child)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="child" Type="System.Web.UI.WebControls.TreeNode" />
      </Parameters>
      <Docs>
        <param name="index">Lokalizację liczony od zera indeks, w której mają zostać wstawione <see cref="T:System.Web.UI.WebControls.TreeNode" /> obiektu.</param>
        <param name="child"><see cref="T:System.Web.UI.WebControls.TreeNode" /> Obiekt do dodania.</param>
        <summary>Wstawia określony <see cref="T:System.Web.UI.WebControls.TreeNode" /> obiektu <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> obiektu w określonej lokalizacji indeksu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.TreeNodeCollection.AddAt%2A> metodę, aby wstawić określonego <xref:System.Web.UI.WebControls.TreeNode> obiektu <xref:System.Web.UI.WebControls.TreeNodeCollection> dla podanego indeksu zaczynającego się od zera.  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.TreeNodeCollection> Umożliwia wstawianie odwołania o wartości null (Nothing w języku Visual Basic), a także zduplikowane <xref:System.Web.UI.WebControls.TreeNode> obiektów.  
  
 Alternatywnie, można dołączyć <xref:System.Web.UI.WebControls.TreeNode> obiekt na koniec <xref:System.Web.UI.WebControls.TreeNodeCollection> przy użyciu <xref:System.Web.UI.WebControls.TreeNodeCollection.Add%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład pokazuje sposób użycia <xref:System.Web.UI.WebControls.TreeNodeCollection.AddAt%2A> metodę, aby programowo dodać węzeł do <xref:System.Web.UI.WebControls.TreeNodeCollection>. Należy zauważyć, że <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> i <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> właściwości każdego zwracają <xref:System.Web.UI.WebControls.TreeNodeCollection> obiektu.  
  
 [!code-aspx-csharp[TreeNodeCollectionAdd#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionAdd/CS/treenodecollectionaddcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionAdd#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionAdd/VB/treenodecollectionaddvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="child" /> jest <see langword="null" />.</exception>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Add(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Clear" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Contains(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Remove(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="treeNodeCollection.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Opróżnia <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.TreeNodeCollection.Clear%2A> metodę, aby usunąć każdy <xref:System.Web.UI.WebControls.TreeNode> obiektu z <xref:System.Web.UI.WebControls.TreeNodeCollection>.  
  
> [!NOTE]
>  Aby usunąć jednego węzła z kolekcji, użyj <xref:System.Web.UI.WebControls.TreeNodeCollection.Remove%2A> lub <xref:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład pokazuje sposób użycia <xref:System.Web.UI.WebControls.TreeNodeCollection.Clear%2A> metodę, aby programowo pusty <xref:System.Web.UI.WebControls.TreeNodeCollection>. Należy zauważyć, że <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> i <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> return właściwości <xref:System.Web.UI.WebControls.TreeNodeCollection> obiektu.  
  
 [!code-aspx-csharp[TreeNodeCollectionAdd#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionAdd/CS/treenodecollectionaddcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionAdd#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionAdd/VB/treenodecollectionaddvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Add(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.AddAt(System.Int32,System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Contains(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Remove(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Web.UI.WebControls.TreeNode c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Web.UI.WebControls.TreeNode c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.Contains(System.Web.UI.WebControls.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (c As TreeNode) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Web::UI::WebControls::TreeNode ^ c);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.Web.UI.WebControls.TreeNode -&gt; bool" Usage="treeNodeCollection.Contains c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Web.UI.WebControls.TreeNode" />
      </Parameters>
      <Docs>
        <param name="c"><see cref="T:System.Web.UI.WebControls.TreeNode" /> Obiektu do znalezienia.</param>
        <summary>Określa, czy określony <see cref="T:System.Web.UI.WebControls.TreeNode" /> obiekt znajduje się w kolekcji.</summary>
        <returns><see langword="true" /> Jeśli określony <see cref="T:System.Web.UI.WebControls.TreeNode" /> obiekt jest zawarty w kolekcji; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.TreeNodeCollection.Contains%2A> metodę pozwala ustalić czy <xref:System.Web.UI.WebControls.TreeNode> obiekt znajduje się w <xref:System.Web.UI.WebControls.TreeNodeCollection>. Ta metoda jest często używana do testowania obecności <xref:System.Web.UI.WebControls.TreeNode> obiektu przed wykonaniem zadania, takie jak dodawanie lub usuwanie węzła z kolekcji.  
  
   
  
## Examples  
 Poniższy przykład pokazuje sposób użycia <xref:System.Web.UI.WebControls.TreeNodeCollection.Contains%2A> metody, aby ustalić, czy wybrany węzeł w <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> kolekcji. Należy zauważyć, że <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> właściwość zwraca <xref:System.Web.UI.WebControls.TreeNodeCollection> obiektu.  
  
 [!code-aspx-csharp[TreeNodeCollectionIndexOf#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionIndexOf/CS/treenodecollectionindexofcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionIndexOf/VB/treenodecollectionindexofvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Add(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.AddAt(System.Int32,System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Clear" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.IndexOf(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Remove(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Web.UI.WebControls.TreeNode[] nodeArray, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.Web.UI.WebControls.TreeNode[] nodeArray, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.CopyTo(System.Web.UI.WebControls.TreeNode[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (nodeArray As TreeNode(), index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;System::Web::UI::WebControls::TreeNode ^&gt; ^ nodeArray, int index);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : System.Web.UI.WebControls.TreeNode[] * int -&gt; unit" Usage="treeNodeCollection.CopyTo (nodeArray, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeArray" Type="System.Web.UI.WebControls.TreeNode[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="nodeArray">Liczony od zera tablicę <see cref="T:System.Web.UI.WebControls.TreeNode" /> obiektów, które odbiera skopiowane elementy z <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />.</param>
        <param name="index">Pozycja w docelowej tablicy, od którego należy rozpocząć odbierani skopiowanej zawartości.</param>
        <summary>Kopiuje wszystkie elementy z <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> obiektu zgodne Jednowymiarowa tablica <see cref="T:System.Web.UI.WebControls.TreeNode" /> obiektów, zaczynając od określonego indeksu w tablicy docelowej.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.TreeNodeCollection.CopyTo%2A> metodę, aby skopiować zawartość <xref:System.Web.UI.WebControls.TreeNodeCollection> do określonego liczony od zera <xref:System.Array?displayProperty=nameWithType> obiektu. Elementy są kopiowane, rozpoczynając od określonego indeksu tablicy docelowej. Za pomocą <xref:System.Array?displayProperty=nameWithType> obiektu można następnie użyć składni tablicy dostępu do elementów w <xref:System.Web.UI.WebControls.TreeNodeCollection>.  
  
 Alternatywnie, można również użyć <xref:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator%2A> metodę, aby utworzyć moduł wyliczający, który może służyć do dostępu do elementów w kolekcji.  
  
   
  
## Examples  
 Poniższy przykład pokazuje sposób użycia <xref:System.Web.UI.WebControls.TreeNodeCollection.CopyTo%2A> metodę, aby skopiować wartości <xref:System.Web.UI.WebControls.TreeNodeCollection> do tablicy. Należy zauważyć, że <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> właściwość zwraca <xref:System.Web.UI.WebControls.TreeNodeCollection> obiektu.  
  
 [!code-aspx-csharp[TreeNodeCollectionCopyTo#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionCopyTo/CS/treenodecollectioncopytocs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionCopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionCopyTo/VB/treenodecollectioncopytovb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="T:System.Array" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNodeCollection.Item(System.Int32)" />
        <altmember cref="M:System.Collections.ArrayList.CopyTo(System.Array)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNodeCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Web.UI.WebControls.TreeNodeCollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę elementów w <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> obiektu.</summary>
        <value>Liczba elementów w <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.TreeNodeCollection.Count%2A> właściwości, aby określić liczbę elementów w <xref:System.Web.UI.WebControls.TreeNodeCollection>. Ta właściwość jest często używana do określenia górna granica kolekcji podczas iteracji w kolekcji. <xref:System.Web.UI.WebControls.TreeNodeCollection.Count%2A> Jest również powszechnie używana do określenia, czy kolekcja jest pusta.  
  
   
  
## Examples  
 Poniższy przykład pokazuje sposób użycia <xref:System.Web.UI.WebControls.TreeNodeCollection.Count%2A> właściwości, aby określić liczbę elementów w <xref:System.Web.UI.WebControls.TreeNodeCollection>. Następnie wykonuje preorder przechodzenie <xref:System.Web.UI.WebControls.TreeView> formantu, aby wyświetlić tekst każdego węzła.  
  
 [!code-aspx-csharp[TreeNodeCollectionCount#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionCount/CS/treenodecollectioncountcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionCount#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionCount/VB/treenodecollectioncountvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Collections.ArrayList.Count" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.Nodes" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.CheckedNodes" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.ChildNodes" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="treeNodeCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca moduł wyliczający, który może służyć do iterowania po <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> obiektu.</summary>
        <returns>Moduł wyliczający, który może służyć do iterowania po <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator%2A> metodę, aby utworzyć moduł wyliczający, który można łatwo należy powtórzyć za pośrednictwem można pobrać każdy element w <xref:System.Web.UI.WebControls.TreeNodeCollection>. Aby uzyskać element obecnie wskazany w moduł wyliczający, użyj <xref:System.Collections.IEnumerator.Current%2A?displayProperty=nameWithType> właściwości. Użyj <xref:System.Collections.IEnumerator.MoveNext%2A?displayProperty=nameWithType> metodę, aby przejść do następnego elementu. Jeśli musisz przenieść modułu wyliczającego z powrotem do stanu sprzed kolekcji, użyj <xref:System.Collections.IEnumerator.Reset%2A?displayProperty=nameWithType> metody.  
  
> [!NOTE]
>  Po utworzeniu modułu wyliczającego lub użyj <xref:System.Collections.IEnumerator.Reset%2A?displayProperty=nameWithType> metody, należy wywołać <xref:System.Collections.IEnumerator.MoveNext%2A?displayProperty=nameWithType> metody. W przeciwnym razie element reprezentowany przez <xref:System.Collections.IEnumerator.Current%2A?displayProperty=nameWithType> właściwość jest niezdefiniowana.  
  
 Alternatywnie, można również użyć <xref:System.Web.UI.WebControls.TreeNodeCollection.CopyTo%2A> metodę w celu utworzenia <xref:System.Array?displayProperty=nameWithType> obiekt, który może służyć do dostępu do elementów w kolekcji. Innym sposobem jest użycie `foreach` lub `For Each` strukturę do iterowania po kolekcji.  
  
   
  
## Examples  
 Poniższy przykład pokazuje sposób użycia <xref:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator%2A> metodę, aby utworzyć moduł wyliczający, który zawiera węzły główne z <xref:System.Web.UI.WebControls.TreeView> kontroli.  
  
 [!code-aspx-csharp[TreeNodeCollectionGetEnumerator#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionGetEnumerator/CS/treenodecollectiongetenumeratorcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionGetEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionGetEnumerator/VB/treenodecollectiongetenumeratorvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNodeCollection.Item(System.Int32)" />
        <altmember cref="M:System.Collections.ArrayList.GetEnumerator" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.CopyTo(System.Web.UI.WebControls.TreeNode[],System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (System.Web.UI.WebControls.TreeNode value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(class System.Web.UI.WebControls.TreeNode value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.IndexOf(System.Web.UI.WebControls.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As TreeNode) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::Web::UI::WebControls::TreeNode ^ value);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : System.Web.UI.WebControls.TreeNode -&gt; int" Usage="treeNodeCollection.IndexOf value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Web.UI.WebControls.TreeNode" />
      </Parameters>
      <Docs>
        <param name="value"><see cref="T:System.Web.UI.WebControls.TreeNode" /> Obiekt do zlokalizowania.</param>
        <summary>Określa indeksuje określony <see cref="T:System.Web.UI.WebControls.TreeNode" /> obiektu.</summary>
        <returns>Liczony od zera indeks pierwszego wystąpienia <paramref name="value" /> w ramach <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />, jeśli je znaleziono; w przeciwnym razie wartość -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.TreeNodeCollection.IndexOf%2A> metodę pozwala ustalić liczony od zera indeks określonego <xref:System.Web.UI.WebControls.TreeNode> obiektu <xref:System.Web.UI.WebControls.TreeNodeCollection> obiektu. Jeśli węzeł nie znajduje się w kolekcji, metoda zwraca wartość -1.  
  
> [!NOTE]
>  Jeśli określony węzeł pojawia się wiele razy w kolekcji, zwracany jest indeks pierwszego wystąpienia.  
  
   
  
## Examples  
 Poniższy przykład pokazuje sposób użycia <xref:System.Web.UI.WebControls.TreeNodeCollection.IndexOf%2A> metodę, aby określić indeks węzła głównego. Należy zauważyć, że <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> właściwość zwraca <xref:System.Web.UI.WebControls.TreeNodeCollection> obiektu.  
  
 [!code-aspx-csharp[TreeNodeCollectionIndexOf#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionIndexOf/CS/treenodecollectionindexofcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionIndexOf/VB/treenodecollectionindexofvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="M:System.Collections.ArrayList.IndexOf(System.Object)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Contains(System.Web.UI.WebControls.TreeNode)" />
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNodeCollection.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSynchronized : bool" Usage="System.Web.UI.WebControls.TreeNodeCollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą czy dostęp do <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> jest synchronizowane (wątkowo).</summary>
        <value><see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.TreeNodeCollection.IsSynchronized%2A> Właściwość jest używana w celu wskazania, czy dostęp do <xref:System.Web.UI.WebControls.TreeNodeCollection> jest synchronizowane (wątkowo). Ta właściwość jest tworzony na podstawie <xref:System.Collections.ICollection?displayProperty=nameWithType> klasy i zostanie zastąpiony zawsze zwracają `false`.  
  
 Aby uzyskać więcej informacji na temat <xref:System.Web.UI.WebControls.TreeNodeCollection.IsSynchronized%2A> właściwości, zobacz <xref:System.Collections.ICollection.IsSynchronized%2A?displayProperty=nameWithType> właściwość <xref:System.Collections.ICollection?displayProperty=nameWithType> interfejsu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="P:System.Collections.ICollection.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TreeNode this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TreeNode Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNodeCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::TreeNode ^ default[int] { System::Web::UI::WebControls::TreeNode ^ get(int index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : System.Web.UI.WebControls.TreeNode" Usage="System.Web.UI.WebControls.TreeNodeCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Liczony od zera indeks <see cref="T:System.Web.UI.WebControls.TreeNode" /> obiektu do pobrania.</param>
        <summary>Pobiera <see cref="T:System.Web.UI.WebControls.TreeNode" /> obiektu pod określonym indeksem <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> obiektu.</summary>
        <value><see cref="T:System.Web.UI.WebControls.TreeNode" /> Obiektu pod określonym indeksem <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dostęp do za pomocą ten indeksator <xref:System.Web.UI.WebControls.TreeNode> obiektu z <xref:System.Web.UI.WebControls.TreeNodeCollection> wskazywanego przez określony indeks tablicy notacji. Indeksator umożliwia modyfikowanie lub Zastąp <xref:System.Web.UI.WebControls.TreeNode> obiektu w kolekcji bezpośrednio. Kolekcja jest liczony od zera.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak umożliwia uzyskiwanie dostępu do elementu w indeksatorze <xref:System.Web.UI.WebControls.TreeNodeCollection>. Należy zauważyć, że <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> i <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> return właściwości <xref:System.Web.UI.WebControls.TreeNodeCollection> obiektu.  
  
 [!code-aspx-csharp[TreeNodeCollectionAdd#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionAdd/CS/treenodecollectionaddcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionAdd#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionAdd/VB/treenodecollectionaddvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.CopyTo(System.Web.UI.WebControls.TreeNode[],System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Web.UI.WebControls.TreeNode value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Web.UI.WebControls.TreeNode value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.Remove(System.Web.UI.WebControls.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (value As TreeNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Web::UI::WebControls::TreeNode ^ value);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.Web.UI.WebControls.TreeNode -&gt; unit" Usage="treeNodeCollection.Remove value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Web.UI.WebControls.TreeNode" />
      </Parameters>
      <Docs>
        <param name="value"><see cref="T:System.Web.UI.WebControls.TreeNode" /> Obiekt ma zostać usunięty.</param>
        <summary>Usuwa określony <see cref="T:System.Web.UI.WebControls.TreeNode" /> obiektu z <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.TreeNodeCollection.Remove%2A> metodę, aby usunąć określony węzeł z kolekcji. Wszystkie elementy, które należy wykonać w tym węźle są następnie przenoszone w górę do wypełnienia wolne stanowisko. Indeksy przeniesionych elementów również są aktualizowane.  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.TreeNodeCollection> Może zawierać odwołania do wartości null (Nothing w języku Visual Basic), a także zduplikowane <xref:System.Web.UI.WebControls.TreeNode> obiektów.  
  
 Alternatywnie, można usunąć węzła w określonym indeksie przy użyciu <xref:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt%2A> metody. Możesz również usunąć każdy węzeł w kolekcji, przy użyciu <xref:System.Web.UI.WebControls.TreeNodeCollection.Clear%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład pokazuje sposób użycia <xref:System.Web.UI.WebControls.TreeNodeCollection.Remove%2A> metodę, aby programowo usunąć węzeł z <xref:System.Web.UI.WebControls.TreeNodeCollection>. Należy zauważyć, że <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> i <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> właściwości każdego zwracają <xref:System.Web.UI.WebControls.TreeNodeCollection> obiektu.  
  
 [!code-aspx-csharp[TreeNodeCollectionAdd#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionAdd/CS/treenodecollectionaddcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionAdd#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionAdd/VB/treenodecollectionaddvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="value" /> jest <see langword="null" />.</exception>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Add(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.AddAt(System.Int32,System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Clear" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Contains(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Collections.ArrayList.Remove(System.Object)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="member this.RemoveAt : int -&gt; unit" Usage="treeNodeCollection.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Lokalizacja liczony od zera indeks węzła do usunięcia.</param>
        <summary>Usuwa <see cref="T:System.Web.UI.WebControls.TreeNode" /> obiektu w określonej lokalizacji indeksu z <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt%2A> metodę, aby usunąć <xref:System.Web.UI.WebControls.TreeNode> obiektu w miejscu określonym liczony od zera indeks z <xref:System.Web.UI.WebControls.TreeNodeCollection>. Wszystkie elementy, które należy wykonać w tym węźle są następnie przenoszone w górę do wypełnienia wolne stanowisko. Indeksy przeniesionych elementów również są aktualizowane.  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.TreeNodeCollection> Może zawierać odwołania do wartości null (Nothing w języku Visual Basic), a także zduplikowane <xref:System.Web.UI.WebControls.TreeNode> obiektów.  
  
 Alternatywnie, można usunąć określonego <xref:System.Web.UI.WebControls.TreeNode> obiektu za pomocą <xref:System.Web.UI.WebControls.TreeNodeCollection.Remove%2A> metody. Możesz również usunąć każdy węzeł w kolekcji, przy użyciu <xref:System.Web.UI.WebControls.TreeNodeCollection.Clear%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład pokazuje sposób użycia <xref:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt%2A> metodę, aby programowo usunąć węzeł z <xref:System.Web.UI.WebControls.TreeNodeCollection>. Należy zauważyć, że <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> i <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> właściwości każdego zwracają <xref:System.Web.UI.WebControls.TreeNodeCollection> obiektu.  
  
 [!code-aspx-csharp[TreeNodeCollectionAdd#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionAdd/CS/treenodecollectionaddcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionAdd#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionAdd/VB/treenodecollectionaddvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Add(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.AddAt(System.Int32,System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Clear" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Contains(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Remove(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Collections.ArrayList.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNodeCollection.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SyncRoot : obj" Usage="System.Web.UI.WebControls.TreeNodeCollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt, który może służyć do synchronizowania dostępu do <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> obiektu.</summary>
        <value>A <see cref="T:System.Object" /> który może służyć do synchronizowania dostępu do <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.TreeNodeCollection.SyncRoot%2A> Dostarcza zsynchronizowaną wersję <xref:System.Web.UI.WebControls.TreeNodeCollection> które mogą być używane z synchronizacją kodu (wątku).  
  
> [!CAUTION]
>  <xref:System.Web.UI.WebControls.TreeNodeCollection.IsSynchronized%2A> Właściwości tej klasy zawsze zwraca `false`, który wskazuje, że <xref:System.Web.UI.WebControls.TreeNodeCollection> klasy nie jest synchronizowany (nie wątkowo).  
  
 Synchronizowanie kodu należy wykonywać operacje <xref:System.Web.UI.WebControls.TreeNodeCollection.SyncRoot%2A> obiektu <xref:System.Web.UI.WebControls.TreeNodeCollection>, nie są bezpośrednio w <xref:System.Web.UI.WebControls.TreeNodeCollection> sam. Gwarantuje to prawidłowe funkcjonowanie kolekcji, które są uzyskiwane z innych obiektów. W szczególności utrzymuje właściwe synchronizacji z innych wątków, które mogą być jednocześnie modyfikowanie <xref:System.Web.UI.WebControls.TreeNodeCollection> obiektu.  
  
> [!NOTE]
>  Obiekt zwrócony w tej implementacji jest <xref:System.Collections.ArrayList?displayProperty=nameWithType> obiekt używany do przechowywania <xref:System.Web.UI.WebControls.TreeNode> obiektów w kolekcji.  
  
 Wyliczanie w kolekcji nie jest wewnętrznie procedurą odporną na wielowątkowość. Nawet gdy kolekcja jest synchronizowana, inne wątki nadal można zmodyfikować kolekcji, co powoduje, że moduł wyliczający do zgłoszenia wyjątku. Aby zagwarantować bezpieczeństwo wątków podczas wyliczania, można zablokować kolekcję podczas całego procesu wyliczania albo rejestrować wyjątki wynikłe ze zmian wprowadzanych przez inne wątków.  
  
 Aby uzyskać więcej informacji na temat <xref:System.Web.UI.WebControls.DataGridColumnCollection.SyncRoot%2A> właściwości, zobacz <xref:System.Collections.ICollection.SyncRoot%2A?displayProperty=nameWithType> właściwość <xref:System.Collections.ICollection?displayProperty=nameWithType> interfejsu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="P:System.Collections.ArrayList.SyncRoot" />
        <altmember cref="P:System.Collections.ICollection.SyncRoot" />
        <altmember cref="T:System.Collections.ICollection" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">Liczony od zera <see cref="T:System.Array" /> obiekt, który odbiera skopiowane elementy z <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />.</param>
        <param name="index">Pozycja w docelowej tablicy, od którego należy rozpocząć odbierani skopiowanej zawartości.</param>
        <summary>Kopiuje wszystkie elementy z <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> obiektu zgodnego z jednowymiarowa <see cref="T:System.Array" />, rozpoczynając od określonego indeksu tablicy docelowej.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.TreeNodeCollection.CopyTo%2A> metodę, aby skopiować zawartość <xref:System.Web.UI.WebControls.TreeNodeCollection> do określonego liczony od zera <xref:System.Array?displayProperty=nameWithType> obiektu. Elementy są kopiowane, rozpoczynając od określonego indeksu tablicy docelowej. Za pomocą <xref:System.Array?displayProperty=nameWithType> obiektu można następnie użyć składni tablicy dostępu do elementów w <xref:System.Web.UI.WebControls.TreeNodeCollection>.  
  
 Alternatywnie, można również użyć <xref:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator%2A> metodę, aby utworzyć moduł wyliczający, który może służyć do dostępu do elementów w kolekcji.  
  
   
  
## Examples  
 Poniższy przykład pokazuje sposób użycia <xref:System.Web.UI.WebControls.TreeNodeCollection.CopyTo%2A> metodę, aby skopiować wartości <xref:System.Web.UI.WebControls.TreeNodeCollection> do tablicy. Należy zauważyć, że <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> właściwość zwraca <xref:System.Web.UI.WebControls.TreeNodeCollection> obiektu.  
  
 [!code-aspx-csharp[TreeNodeCollectionCopyTo#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionCopyTo/CS/treenodecollectioncopytocs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionCopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionCopyTo/VB/treenodecollectioncopytovb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="array" /> nie jest tablicą <see cref="T:System.Web.UI.WebControls.TreeNode" /> obiektów.</exception>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="T:System.Array" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNodeCollection.Item(System.Int32)" />
        <altmember cref="M:System.Collections.ArrayList.CopyTo(System.Array)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.IsTrackingViewState">
      <MemberSignature Language="C#" Value="bool System.Web.UI.IStateManager.IsTrackingViewState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Web.UI.IStateManager.IsTrackingViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNodeCollection.System#Web#UI#IStateManager#IsTrackingViewState" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsTrackingViewState As Boolean Implements IStateManager.IsTrackingViewState" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Web::UI::IStateManager::IsTrackingViewState { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Web.UI.IStateManager.IsTrackingViewState" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IStateManager.IsTrackingViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą czy <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> obiektu jest zapisywanie zmian stanu widoku.</summary>
        <value><see langword="true" /> Jeśli kontrolka jest oznaczona zapisanie swojego stanu; w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Web.UI.Control.ViewState" />
        <altmember cref="M:System.Web.UI.Control.LoadViewState(System.Object)" />
        <altmember cref="M:System.Web.UI.Control.SaveViewState" />
        <related type="Article" href="https://msdn.microsoft.com/library/0218d965-5d30-445b-b6a6-8870e70e63ce(v=vs.100)">Omówienie zarządzania stanu programu ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.LoadViewState">
      <MemberSignature Language="C#" Value="void IStateManager.LoadViewState (object state);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IStateManager.LoadViewState(object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.System#Web#UI#IStateManager#LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub LoadViewState (state As Object) Implements IStateManager.LoadViewState" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IStateManager.LoadViewState(System::Object ^ state) = System::Web::UI::IStateManager::LoadViewState;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.LoadViewState(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="state">Element <see cref="T:System.Object" /> zawierający wartości stanu zapisanego widoku.</param>
        <summary>Ładunki <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> obiektu uprzednio zapisanego stanu widoku.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.StateBag" />
        <altmember cref="T:System.Web.UI.StateItem" />
        <related type="Article" href="https://msdn.microsoft.com/library/0218d965-5d30-445b-b6a6-8870e70e63ce(v=vs.100)">Omówienie zarządzania stanu programu ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.SaveViewState">
      <MemberSignature Language="C#" Value="object IStateManager.SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Web.UI.IStateManager.SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.System#Web#UI#IStateManager#SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Function SaveViewState () As Object Implements IStateManager.SaveViewState" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.Web.UI.IStateManager.SaveViewState() = System::Web::UI::IStateManager::SaveViewState;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.SaveViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje zmiany, aby wyświetlić stan <see cref="T:System.Object" />.</summary>
        <returns><see cref="T:System.Object" /> Zawierający zmian stanu widoku.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.StateBag" />
        <altmember cref="T:System.Web.UI.StateItem" />
        <related type="Article" href="https://msdn.microsoft.com/library/0218d965-5d30-445b-b6a6-8870e70e63ce(v=vs.100)">Omówienie zarządzania stanu programu ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.TrackViewState">
      <MemberSignature Language="C#" Value="void IStateManager.TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IStateManager.TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.System#Web#UI#IStateManager#TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Sub TrackViewState () Implements IStateManager.TrackViewState" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IStateManager.TrackViewState() = System::Web::UI::IStateManager::TrackViewState;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.TrackViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Powoduje, że <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> śledzenie zmian stanu widoku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po wywołaniu tej metody w kontrolce serwera <xref:System.Web.UI.Control.IsTrackingViewState%2A> zwróci właściwość `true`.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.StateBag" />
        <altmember cref="T:System.Web.UI.StateItem" />
        <related type="Article" href="https://msdn.microsoft.com/library/0218d965-5d30-445b-b6a6-8870e70e63ce(v=vs.100)">Omówienie zarządzania stanu programu ASP.NET</related>
      </Docs>
    </Member>
  </Members>
</Type>