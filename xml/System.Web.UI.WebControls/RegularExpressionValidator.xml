<Type Name="RegularExpressionValidator" FullName="System.Web.UI.WebControls.RegularExpressionValidator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7dfc688d4a755c1c9502c4780d40d038365c38b3" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37591195" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RegularExpressionValidator : System.Web.UI.WebControls.BaseValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RegularExpressionValidator extends System.Web.UI.WebControls.BaseValidator" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.RegularExpressionValidator" />
  <TypeSignature Language="VB.NET" Value="Public Class RegularExpressionValidator&#xA;Inherits BaseValidator" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegularExpressionValidator : System::Web::UI::WebControls::BaseValidator" />
  <TypeSignature Language="F#" Value="type RegularExpressionValidator = class&#xA;    inherit BaseValidator" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.BaseValidator</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Web.UI.ToolboxData("&lt;{0}:RegularExpressionValidator runat="server" ErrorMessage="RegularExpressionValidator"&gt;&lt;/{0}:RegularExpressionValidator&gt;")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Sprawdza, czy wartość kontrolki wejściowej skojarzone jest zgodny ze wzorcem określonym przez wyrażenia regularne.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.RegularExpressionValidator> Kontroli sprawdza, czy wartość kontrolki wejściowej odpowiada wzorcowi zdefiniowany przez wyrażenie regularne. Tego rodzaju Walidacja pozwala pod kątem przewidywalnej sekwencji znaków, takich jak te adresy e-mail, numerów telefonów i kody pocztowe.  
  
> [!NOTE]
>  Sprawdzanie poprawności zakończy się pomyślnie, jeśli kontrolka wejściowa jest pusta. Jeśli wartość jest wymagana dla skojarzonego formantu danych wejściowych, użyj <xref:System.Web.UI.WebControls.RequiredFieldValidator> kontrolować oprócz <xref:System.Web.UI.WebControls.RegularExpressionValidator> kontroli.  
  
 Weryfikacja po stronie serwera i po stronie klienta są wykonywane, chyba że przeglądarka nie obsługuje walidacji po stronie klienta lub weryfikacji po stronie klienta jest jawnie wyłączone (przez ustawienie <xref:System.Web.UI.WebControls.BaseValidator.EnableClientScript%2A> właściwość `false`).  
  
 Implementacja weryfikacji wyrażeń regularnych różni się nieco na kliencie niż na serwerze. Na komputerze klienckim używana jest składnia wyrażeń regularnych języka JScript. Na serwerze <xref:System.Text.RegularExpressions.Regex?displayProperty=nameWithType> składnia jest używana. Ponieważ JScript składni wyrażeń regularnych jest podzbiorem <xref:System.Text.RegularExpressions.Regex?displayProperty=nameWithType> składni, zalecane jest, że JScript składni wyrażeń regularnych można użyć w celu uzyskanie takie same wyniki zarówno klient, jak i na serwerze.  
  
> [!NOTE]
>  Kiedy używasz <xref:System.Web.UI.WebControls.RegularExpressionValidator> kontrolować wewnątrz <xref:System.Web.UI.UpdatePanel> sterowania, upewnij się, że formantem modułu sprawdzania poprawności i jest skojarzony z są na tym samym panelu. Aby uzyskać więcej informacji o korzystaniu z <xref:System.Web.UI.UpdatePanel> kontrolowanie aktualizacji stron częściowych, zobacz [Przegląd renderowanie części strony](http://msdn.microsoft.com/library/5c12736d-d9e9-464a-9388-3fe0f9f49e49).  
  
 Aby uzyskać dodatkowe informacje na temat sprawdzania poprawności formantów, zobacz <xref:System.Web.UI.WebControls.BaseValidator>. Aby uzyskać więcej informacji na temat wyrażeń regularnych, zobacz [wyrażeń regularnych programu .NET Framework](~/docs/standard/base-types/regular-expressions.md).  
  
## <a name="accessibility"></a>Ułatwienia dostępu  
 Aby uzyskać informacje o sposobie konfigurowania tej kontrolki, tak aby generuje kod znaczników, który jest zgodny ze standardami ułatwień dostępu, zobacz [ułatwień dostępu w programie Visual Studio i platformy ASP.NET](http://msdn.microsoft.com/library/7e3ce9c4-6b7d-4fb1-94b5-72cf2a44fe13) i [kontrolki ASP.NET orazułatwieńdostępu](http://msdn.microsoft.com/library/847a37e3-ce20-41da-b0d3-7dfb0fdae9a0).  
  
   
  
## Examples  
 Poniższy przykład pokazuje sposób użycia <xref:System.Web.UI.WebControls.RegularExpressionValidator> formantu, aby sprawdzić 5 cyfrowy kod pocztowy.  
  
> [!IMPORTANT]
>  W tym przykładzie ma pola tekstowego, który akceptuje dane wejściowe użytkownika, który jest potencjalnym zagrożeniem dla bezpieczeństwa. Domyślnie strony sieci Web ASP.NET zweryfikować, że dane wejściowe użytkownika nie obejmuje skrypt lub elementów HTML. Aby uzyskać więcej informacji, zobacz [Przegląd wykorzystuje skryptu](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[Classic RegularExpressionValidator Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic RegularExpressionValidator Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic RegularExpressionValidator Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic RegularExpressionValidator Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.BaseValidator" />
    <altmember cref="P:System.Web.UI.WebControls.BaseValidator.EnableClientScript" />
    <altmember cref="T:System.Text.RegularExpressions.Regex" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegularExpressionValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.RegularExpressionValidator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegularExpressionValidator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.WebControls.RegularExpressionValidator" /> klasy.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.WebControls.BaseValidator" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.EnableClientScript" />
        <altmember cref="T:System.Text.RegularExpressions.Regex" />
      </Docs>
    </Member>
    <Member MemberName="AddAttributesToRender">
      <MemberSignature Language="C#" Value="protected override void AddAttributesToRender (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddAttributesToRender(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.RegularExpressionValidator.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub AddAttributesToRender (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void AddAttributesToRender(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.AddAttributesToRender : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="regularExpressionValidator.AddAttributesToRender writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.Web.UI.HtmlTextWriter" /> Reprezentujący strumienia wyjściowego do renderowania elementów HTML zawartości na komputerze klienckim.</param>
        <summary>Dodaje do określonego <see cref="T:System.Web.UI.HtmlTextWriter" /> atrybuty kodu HTML i style, które należy do renderowania kontrolki obiektów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje sposób zastąpienia <xref:System.Web.UI.WebControls.RegularExpressionValidator.AddAttributesToRender%2A> metody w niestandardowy formant serwera, aby <xref:System.Web.UI.WebControls.RegularExpressionValidator> komunikat o błędzie zawsze wyświetlana jako pogrubiony.  
  
 [!code-csharp[CustomRegularExpressionValidatorAddAttributesToRender#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomRegularExpressionValidatorAddAttributesToRender/CS/custom_regularexpressionvalidator_addattributestorender.cs#2)]
 [!code-vb[CustomRegularExpressionValidatorAddAttributesToRender#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomRegularExpressionValidatorAddAttributesToRender/VB/custom_regularexpressionvalidator_addattributestorender.vb#2)]  
  
 Poniższy przykład kodu pokazuje, jak użyć `CustomRegularExpressionValidatorAddAttributesToRender` kontrolki, zdefiniowane w poprzednim przykładzie, na stronie formularzy sieci Web.  
  
> [!IMPORTANT]
>  W tym przykładzie ma pola tekstowego, który akceptuje dane wejściowe użytkownika, który jest potencjalnym zagrożeniem dla bezpieczeństwa. Domyślnie strony sieci Web ASP.NET zweryfikować, że dane wejściowe użytkownika nie obejmuje skrypt lub elementów HTML. Aby uzyskać więcej informacji, zobacz [Przegląd wykorzystuje skryptu](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[CustomRegularExpressionValidatorAddAttributesToRender#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomRegularExpressionValidatorAddAttributesToRender/CS/custom_regularexpressionvalidator_addattributestorendercs.aspx#1)]
 [!code-aspx-vb[CustomRegularExpressionValidatorAddAttributesToRender#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomRegularExpressionValidatorAddAttributesToRender/VB/custom_regularexpressionvalidator_addattributestorendervb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.BaseValidator" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.EnableClientScript" />
        <altmember cref="T:System.Text.RegularExpressions.Regex" />
      </Docs>
    </Member>
    <Member MemberName="EvaluateIsValid">
      <MemberSignature Language="C#" Value="protected override bool EvaluateIsValid ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool EvaluateIsValid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.RegularExpressionValidator.EvaluateIsValid" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function EvaluateIsValid () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool EvaluateIsValid();" />
      <MemberSignature Language="F#" Value="override this.EvaluateIsValid : unit -&gt; bool" Usage="regularExpressionValidator.EvaluateIsValid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wskazuje, czy wartość w danych wejściowych kontroli jest prawidłowa.</summary>
        <returns>
          <see langword="true" /> Jeśli wartości wejściowe formantu jest prawidłowy; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje sposób zastąpienia <xref:System.Web.UI.WebControls.RegularExpressionValidator.EvaluateIsValid%2A> metody w niestandardowego serwera kontrolować tak, aby zawsze sprawdzają wartości dla wyrażenia pod kątem dopasowania w <xref:System.Web.UI.WebControls.RegularExpressionValidator>.  
  
> [!IMPORTANT]
>  W tym przykładzie ma pola tekstowego, który akceptuje dane wejściowe użytkownika, który jest potencjalnym zagrożeniem dla bezpieczeństwa. Domyślnie strony sieci Web ASP.NET zweryfikować, że dane wejściowe użytkownika nie obejmuje skrypt lub elementów HTML. Aby uzyskać więcej informacji, zobacz [Przegląd wykorzystuje skryptu](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-csharp[CustomRegularExpressionValidatorEvaluateIsValid#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomRegularExpressionValidatorEvaluateIsValid/CS/custom_regularexpressionvalidator_evaluateisvalid.cs#2)]
 [!code-vb[CustomRegularExpressionValidatorEvaluateIsValid#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomRegularExpressionValidatorEvaluateIsValid/VB/custom_regularexpressionvalidator_evaluateisvalid.vb#2)]  
  
 Poniższy przykład kodu demonstruje sposób używania `CustomRegularExpressionValidatorEvaluateIsValid` kontrolki, zdefiniowane w poprzednim przykładzie, na stronie formularzy sieci Web.  
  
 [!code-aspx-csharp[CustomRegularExpressionValidatorEvaluateIsValid#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomRegularExpressionValidatorEvaluateIsValid/CS/custom_regularexpressionvalidator_evaluateisvalidcs.aspx#1)]
 [!code-aspx-vb[CustomRegularExpressionValidatorEvaluateIsValid#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomRegularExpressionValidatorEvaluateIsValid/VB/custom_regularexpressionvalidator_evaluateisvalidvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.BaseValidator" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.EnableClientScript" />
        <altmember cref="T:System.Text.RegularExpressions.Regex" />
      </Docs>
    </Member>
    <Member MemberName="MatchTimeout">
      <MemberSignature Language="C#" Value="public Nullable&lt;int&gt; MatchTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int32&gt; MatchTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.RegularExpressionValidator.MatchTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property MatchTimeout As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;int&gt; MatchTimeout { Nullable&lt;int&gt; get(); void set(Nullable&lt;int&gt; value); };" />
      <MemberSignature Language="F#" Value="member this.MatchTimeout : Nullable&lt;int&gt; with get, set" Usage="System.Web.UI.WebControls.RegularExpressionValidator.MatchTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia limit czasu interwału maksymalny czas wykonywania pojedynczej operacji dopasowywania, przed wykonaniem operacji.</summary>
        <value>Limit czasu interwału maksymalny czas wykonywania pojedynczej operacji dopasowywania, przed wykonaniem operacji.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationExpression">
      <MemberSignature Language="C#" Value="public string ValidationExpression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ValidationExpression" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.RegularExpressionValidator.ValidationExpression" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidationExpression As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ValidationExpression { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ValidationExpression : string with get, set" Usage="System.Web.UI.WebControls.RegularExpressionValidator.ValidationExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.RegexTypeEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wyrażenie regularne, które określa wzorzec używany do sprawdzania poprawności pola.</summary>
        <value>Ciąg, który określa wyrażenie regularne służące do weryfikacji pól dla formatu. Wartość domyślna to <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość umożliwia określenie wzorzec używany pod kątem przewidywalnej sekwencji znaków, takich jak numery ubezpieczenia społecznego, adresy e-mail, numerów telefonów i kody pocztowe.  
  
 <xref:System.Web.UI.WebControls.RegularExpressionValidator> Nie jest sprawdzana poprawność na pusty ciąg. Jeśli ciąg znaków jest testowana może być pusta, użyj <xref:System.Web.UI.WebControls.RequiredFieldValidator> , jak również <xref:System.Web.UI.WebControls.RegularExpressionValidator>.  
  
 Aby uzyskać więcej informacji na temat wyrażeń regularnych, zobacz [wyrażeń regularnych programu .NET Framework](~/docs/standard/base-types/regular-expressions.md).  
  
> [!NOTE]
>  Jeśli wystąpią problemy z konstrukcje dopasowania do wzorca, spróbuj zawijania wyrażenia "^ $("i")". Na przykład "&#124;ab" staje się "^ (&#124;ab) $".  
  
 Nie można ustawić tę właściwość, motywy lub motywy arkusza stylów. Aby uzyskać więcej informacji, zobacz <xref:System.Web.UI.ThemeableAttribute> i [motywów programu ASP.NET i skórek](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Poniższy przykład pokazuje sposób użycia <xref:System.Web.UI.WebControls.RegularExpressionValidator.ValidationExpression%2A> właściwość, aby sprawdzić poprawność pola z pięciu cyfr. Gdy <xref:System.Web.UI.WebControls.Button> kliknięciu formantu wynikowy <xref:System.Web.UI.WebControls.Button.OnClick%2A> kontroli programu obsługi zdarzeń <xref:System.Web.UI.Page.IsValid%2A> właściwość <xref:System.Web.UI.Page> ustalenie, czy tekst w <xref:System.Web.UI.WebControls.TextBox> spełnia wyrażenia regularnego.  
  
> [!IMPORTANT]
>  W tym przykładzie ma pola tekstowego, który akceptuje dane wejściowe użytkownika, który jest potencjalnym zagrożeniem dla bezpieczeństwa. Domyślnie strony sieci Web ASP.NET zweryfikować, że dane wejściowe użytkownika nie obejmuje skrypt lub elementów HTML. Aby uzyskać więcej informacji, zobacz [Przegląd wykorzystuje skryptu](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[Classic RegularExpressionValidator Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic RegularExpressionValidator Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic RegularExpressionValidator Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic RegularExpressionValidator Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Wyrażenie regularne jest nieprawidłowo sformułowany.</exception>
      </Docs>
    </Member>
  </Members>
</Type>