<Type Name="WizardStepCollection" FullName="System.Web.UI.WebControls.WizardStepCollection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5b7235e3f9d180f991b08d0d777816d59d572f9e" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30691631" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class WizardStepCollection : System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WizardStepCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WizardStepCollection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WizardStepCollection&#xA;Implements IList" />
  <TypeSignature Language="C++ CLI" Value="public ref class WizardStepCollection sealed : System::Collections::IList" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Reprezentuje kolekcję <see cref="T:System.Web.UI.WebControls.WizardStepBase" />-pochodnych obiektów w formancie, który działa jako kreatora. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WizardStepCollection> Klasa jest używana do przechowywania i zarządzanie kolekcją <xref:System.Web.UI.WebControls.WizardStepBase>-pochodnych obiektów w formancie, który działa jako kreatora, takich jak <xref:System.Web.UI.WebControls.CreateUserWizard> kontroli lub <xref:System.Web.UI.WebControls.Wizard> formantu. Na przykład <xref:System.Web.UI.WebControls.Wizard> kontrolować używa <xref:System.Web.UI.WebControls.WizardStepCollection> klasy dla jego <xref:System.Web.UI.WebControls.Wizard.WizardSteps%2A> właściwości.  
  
 Dostęp można uzyskać na kilka sposobów <xref:System.Web.UI.WebControls.WizardStepBase>-pochodnych obiektów w <xref:System.Web.UI.WebControls.WizardStepCollection>:  
  
-   Użyj <xref:System.Web.UI.WebControls.WizardStepCollection.Item%2A> właściwości bezpośredni dostęp do <xref:System.Web.UI.WebControls.WizardStepBase>-pochodnych obiekt w określonym indeksie liczony od zera.  
  
-   Użyj <xref:System.Web.UI.WebControls.WizardStepCollection.GetEnumerator%2A> metodę w celu utworzenia moduł wyliczający, który może służyć do iterowania po kolekcji.  
  
-   Użyj <xref:System.Web.UI.WebControls.WizardStepCollection.CopyTo%2A> metodę, aby skopiować zawartość <xref:System.Web.UI.WebControls.WizardStepCollection> kolekcji do <xref:System.Array> obiektu.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób wypełnić <xref:System.Web.UI.WebControls.WizardStepCollection> kolekcji za pomocą składni deklaratywnej.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.WizardStepCollectionDeclare#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.WizardStepCollectionDeclare/CS/wizardstepcollectiondeclarecs.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.WizardStepCollectionDeclare#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.WizardStepCollectionDeclare/VB/wizardstepcollectiondeclarevb.aspx#3)]  
  
 W poniższym przykładzie pokazano sposób automatycznego wypełniania <xref:System.Web.UI.WebControls.WizardStepCollection> kolekcji.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.WizardStepCollection#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.WizardStepCollection/CS/wizardstepcollectioncs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.WizardStepCollection#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.WizardStepCollection/VB/wizardstepcollectionvb.aspx#1)]  
  
 Poniżej znajduje się plik CodeBehind dla strony sieci Web w poprzednim przykładzie.  
  
 [!code-csharp[System.Web.UI.WebControls.WizardStepCollection#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.WizardStepCollection/CS/wizardstepcollection.cs#2)]
 [!code-vb[System.Web.UI.WebControls.WizardStepCollection#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.WizardStepCollection/VB/wizardstepcollection.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WizardStepBase" />
    <altmember cref="T:System.Web.UI.WebControls.WizardStep" />
    <altmember cref="T:System.Web.UI.WebControls.Wizard" />
    <altmember cref="T:System.Web.UI.WebControls.CreateUserWizard" />
    <altmember cref="T:System.Web.UI.WebControls.Login" />
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Web.UI.WebControls.WizardStepBase wizardStep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Web.UI.WebControls.WizardStepBase wizardStep) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WizardStepCollection.Add(System.Web.UI.WebControls.WizardStepBase)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (wizardStep As WizardStepBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Web::UI::WebControls::WizardStepBase ^ wizardStep);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wizardStep" Type="System.Web.UI.WebControls.WizardStepBase" />
      </Parameters>
      <Docs>
        <param name="wizardStep">
          <see cref="T:System.Web.UI.WebControls.WizardStepBase" />-Pochodnych obiekt można dołączyć do <see cref="T:System.Web.UI.WebControls.WizardStepCollection" /> kolekcji.</param>
        <summary>Dołącza określony <see cref="T:System.Web.UI.WebControls.WizardStepBase" />-pochodnego obiektu na końcu kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WizardStepCollection.Add%2A> Dodaje metody <xref:System.Web.UI.WebControls.WizardStepBase>-pochodnego obiekt na koniec <xref:System.Web.UI.WebControls.WizardStepCollection> kolekcji. Aby dodać <xref:System.Web.UI.WebControls.WizardStepBase>-pochodnej obiektu do kolekcji w lokalizacji określonego indeksu, użyj <xref:System.Web.UI.WebControls.WizardStepCollection.AddAt%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje programowe tworzenie <xref:System.Web.UI.WebControls.Wizard> kontroli i przy użyciu <xref:System.Web.UI.WebControls.WizardStepCollection.Add%2A> metody w celu dodania <xref:System.Web.UI.WebControls.WizardStepBase>-pochodnych <xref:System.Web.UI.WebControls.WizardStep> obiekty do <xref:System.Web.UI.WebControls.Wizard.WizardSteps%2A> kolekcji. Należy pamiętać, że w tym przykładzie <xref:System.Web.UI.WebControls.Wizard.WizardSteps%2A> właściwość <xref:System.Web.UI.WebControls.Wizard> kontroli jest wystąpieniem <xref:System.Web.UI.WebControls.WizardStepCollection> klasy.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.WizardSteps#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.WizardSteps/CS/wizardstepscs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.WizardSteps#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.WizardSteps/VB/wizardstepsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Web.UI.WebControls.WizardStepBase" />-Pochodnej przekazany obiekt jest <see langword="null" />.</exception>
        <altmember cref="T:System.Web.UI.WebControls.WizardStepBase" />
        <altmember cref="T:System.Web.UI.WebControls.WizardStep" />
        <altmember cref="M:System.Web.UI.WebControls.WizardStepCollection.AddAt(System.Int32,System.Web.UI.WebControls.WizardStepBase)" />
      </Docs>
    </Member>
    <Member MemberName="AddAt">
      <MemberSignature Language="C#" Value="public void AddAt (int index, System.Web.UI.WebControls.WizardStepBase wizardStep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAt(int32 index, class System.Web.UI.WebControls.WizardStepBase wizardStep) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WizardStepCollection.AddAt(System.Int32,System.Web.UI.WebControls.WizardStepBase)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAt (index As Integer, wizardStep As WizardStepBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAt(int index, System::Web::UI::WebControls::WizardStepBase ^ wizardStep);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="wizardStep" Type="System.Web.UI.WebControls.WizardStepBase" />
      </Parameters>
      <Docs>
        <param name="index">Lokalizacja indeksu, w której mają zostać wstawione <see cref="T:System.Web.UI.WebControls.WizardStepBase" />-pochodzi z obiektu.</param>
        <param name="wizardStep">
          <see cref="T:System.Web.UI.WebControls.WizardStepBase" />-Pochodnych obiekt można dołączyć do <see cref="T:System.Web.UI.WebControls.WizardStepCollection" /> kolekcji.</param>
        <summary>Dodaje określony <see cref="T:System.Web.UI.WebControls.WizardStepBase" />-pochodnych obiektu do kolekcji w określonej lokalizacji indeksu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WizardStepCollection.AddAt%2A> Dodaje metody <xref:System.Web.UI.WebControls.WizardStepBase>-pochodnych obiektu do kolekcji w określonej lokalizacji indeksu.  
  
 Aby dodać <xref:System.Web.UI.WebControls.WizardStepBase>-pochodnego obiekt na koniec <xref:System.Web.UI.WebControls.WizardStepCollection> kolekcji, użyj <xref:System.Web.UI.WebControls.WizardStepCollection.Add%2A> metody.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Web.UI.WebControls.WizardStepBase" />-Pochodnej przekazany obiekt jest <see langword="null" />.</exception>
        <altmember cref="T:System.Web.UI.WebControls.WizardStepBase" />
        <altmember cref="T:System.Web.UI.WebControls.WizardStep" />
        <altmember cref="M:System.Web.UI.WebControls.WizardStepCollection.Add(System.Web.UI.WebControls.WizardStepBase)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WizardStepCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Usuwa wszystkie <see cref="T:System.Web.UI.WebControls.WizardStepBase" />-pochodnych obiektów z kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.WizardStepCollection.Clear%2A> metody, aby usunąć wszystkie <xref:System.Web.UI.WebControls.WizardStepBase>-pochodnych obiektów z <xref:System.Web.UI.WebControls.WizardStepCollection> kolekcji.  
  
> [!NOTE]
>  Po <xref:System.Web.UI.WebControls.WizardStepCollection.Clear%2A> metoda usuwa <xref:System.Web.UI.WebControls.WizardStepBase>-pochodnych obiektów z kolekcji, <xref:System.Web.UI.WebControls.WizardStepCollection.Count%2A> właściwość <xref:System.Web.UI.WebControls.WizardStepCollection> kolekcja ma wartość zero.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WizardStepBase" />
        <altmember cref="T:System.Web.UI.WebControls.WizardStep" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Web.UI.WebControls.WizardStepBase wizardStep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Web.UI.WebControls.WizardStepBase wizardStep) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WizardStepCollection.Contains(System.Web.UI.WebControls.WizardStepBase)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (wizardStep As WizardStepBase) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Web::UI::WebControls::WizardStepBase ^ wizardStep);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wizardStep" Type="System.Web.UI.WebControls.WizardStepBase" />
      </Parameters>
      <Docs>
        <param name="wizardStep">
          <see cref="T:System.Web.UI.WebControls.WizardStepBase" />-Pochodnych obiektu można znaleźć w <see cref="T:System.Web.UI.WebControls.WizardStepCollection" /> kolekcji.</param>
        <summary>Określa, czy <see cref="T:System.Web.UI.WebControls.WizardStepCollection" /> kolekcja zawiera konkretny <see cref="T:System.Web.UI.WebControls.WizardStepBase" />-pochodzi z obiektu.</summary>
        <returns>
          <see langword="true" /> Jeśli <see cref="T:System.Web.UI.WebControls.WizardStepBase" />-pochodnej obiekt znajduje się w <see cref="T:System.Web.UI.WebControls.WizardStepCollection" /> kolekcji; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.WizardStepCollection.Contains%2A> metodę, aby określić, czy <xref:System.Web.UI.WebControls.WizardStepBase>-pochodnej obiekt znajduje się w kolekcji. Ta metoda jest najczęściej używany do sprawdzenia istnienia <xref:System.Web.UI.WebControls.WizardStepBase>-pochodnych obiektu przed wykonaniem zadań, takich jak usuwanie <xref:System.Web.UI.WebControls.WizardStepBase>-pochodnych obiekt z kolekcji.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="wizardStep" /> jest <see langword="null" />.</exception>
        <altmember cref="T:System.Web.UI.WebControls.WizardStepBase" />
        <altmember cref="T:System.Web.UI.WebControls.WizardStep" />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Web.UI.WebControls.WizardStepBase[] array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.Web.UI.WebControls.WizardStepBase[] array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WizardStepCollection.CopyTo(System.Web.UI.WebControls.WizardStepBase[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As WizardStepBase(), index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;System::Web::UI::WebControls::WizardStepBase ^&gt; ^ array, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Web.UI.WebControls.WizardStepBase[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">Liczony od zera tablicę <see cref="T:System.Web.UI.WebControls.WizardStepBase" /> obiektów, które otrzymuje elementów kopiowanych z kolekcji.</param>
        <param name="index">Pozycja w tablicy docelowej, w którym tablicy rozpoczyna się odbieranie skopiowane elementy.</param>
        <summary>Kopiuje wszystkie elementy z <see cref="T:System.Web.UI.WebControls.WizardStepCollection" /> kolekcji jest tablicą jednowymiarową zgodne z <see cref="T:System.Web.UI.WebControls.WizardStepBase" /> obiektów, zaczynając od określonego indeksu tablicy docelowej.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.WizardStepCollection.CopyTo%2A> metody, aby skopiować zawartość kolekcji w określonej tablicy liczony od zera. Elementy są kopiowane, zaczynając od określonego indeksu tablicy docelowej. Po elementów w tablicy, za pomocą składni tablicy dostępu do elementów w <xref:System.Web.UI.WebControls.WizardStepCollection> kolekcji.  
  
 Alternatywnie, można również użyć <xref:System.Web.UI.WebControls.WizardStepCollection.GetEnumerator%2A> metodę w celu utworzenia moduł wyliczający, który umożliwia dostęp do elementów w kolekcji.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób użycia <xref:System.Web.UI.WebControls.WizardStepCollection.CopyTo%2A> metodę, aby skopiować <xref:System.Web.UI.WebControls.WizardStepBase> obiektów z kolekcji do tablicy. Tablica jest następnie powtórzyć za pośrednictwem do wyświetlenia <xref:System.Web.UI.Control.ID%2A> właściwości każdego <xref:System.Web.UI.WebControls.WizardStepBase>-pochodzi z obiektu. Należy pamiętać, że w tym przykładzie <xref:System.Web.UI.WebControls.Wizard.WizardSteps%2A> właściwość <xref:System.Web.UI.WebControls.Wizard> kontroli jest wystąpieniem <xref:System.Web.UI.WebControls.WizardStepCollection> klasy.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.WizardStepCollectionCopyTo#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.WizardStepCollectionCopyTo/CS/wizardstepcollectioncopytocs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.WizardStepCollectionCopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.WizardStepCollectionCopyTo/VB/wizardstepcollectioncopytovb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WizardStepBase" />
        <altmember cref="M:System.Web.UI.WebControls.WizardStepCollection.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WizardStepCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę <see cref="T:System.Web.UI.WebControls.WizardStepBase" />-pochodnych obiektów w <see cref="T:System.Web.UI.WebControls.Wizard" /> formantu <see cref="T:System.Web.UI.WebControls.WizardStepCollection" /> kolekcji.</summary>
        <value>Liczba <see cref="T:System.Web.UI.WebControls.WizardStepBase" />-pochodnych obiektów w <see cref="T:System.Web.UI.WebControls.Wizard" /> formantu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.WizardStepCollection.Count%2A> właściwości w celu określenia liczby <xref:System.Web.UI.WebControls.WizardStepBase>-pochodnych obiektów w <xref:System.Web.UI.WebControls.WizardStepCollection> kolekcji. <xref:System.Web.UI.WebControls.WizardStepCollection.Count%2A> Właściwość jest często stosowany podczas iteracji w kolekcji, aby ustalić jego górna powiązany.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WizardStepBase" />
        <altmember cref="T:System.Web.UI.WebControls.WizardStep" />
        <altmember cref="T:System.Web.UI.WebControls.Wizard" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WizardStepCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca <see cref="T:System.Collections.IEnumerator" />-zaimplementowany obiekt, który może służyć do iterowania po <see cref="T:System.Web.UI.WebControls.WizardStepBase" />-pochodnych obiektów w kolekcji.</summary>
        <returns>
          <see cref="T:System.Collections.IEnumerator" />-Zaimplementowany obiekt, który zawiera wszystkie <see cref="T:System.Web.UI.WebControls.WizardStepBase" />-pochodnych obiektów w <see cref="T:System.Web.UI.WebControls.WizardStepCollection" /> kolekcji.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.WebControls.WizardStepCollection.CopyTo(System.Web.UI.WebControls.WizardStepBase[],System.Int32)" />
        <altmember cref="T:System.Web.UI.WebControls.WizardStepBase" />
        <altmember cref="T:System.Web.UI.WebControls.WizardStep" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (System.Web.UI.WebControls.WizardStepBase wizardStep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(class System.Web.UI.WebControls.WizardStepBase wizardStep) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WizardStepCollection.IndexOf(System.Web.UI.WebControls.WizardStepBase)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (wizardStep As WizardStepBase) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::Web::UI::WebControls::WizardStepBase ^ wizardStep);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wizardStep" Type="System.Web.UI.WebControls.WizardStepBase" />
      </Parameters>
      <Docs>
        <param name="wizardStep">
          <see cref="T:System.Web.UI.WebControls.WizardStepBase" />-Pochodnych obiektu do wyszukania w <see cref="T:System.Web.UI.WebControls.WizardStepCollection" /> kolekcji.</param>
        <summary>Określa wartość indeksu, która reprezentuje pozycję określonego <see cref="T:System.Web.UI.WebControls.WizardStepBase" />-pochodnych obiektu w kolekcji.</summary>
        <returns>Jeśli znaleziono liczony od zera indeks pierwszego wystąpienia <see cref="T:System.Web.UI.WebControls.WizardStepBase" />-przekazano obiekt pochodnych w bieżącym <see cref="T:System.Web.UI.WebControls.WizardStepCollection" /> kolekcji; w przeciwnym razie wartość -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.WizardStepCollection.IndexOf%2A> metodę, aby określić indeks określonego <xref:System.Web.UI.WebControls.WizardStepBase>-pochodnych obiektu w bieżącym <xref:System.Web.UI.WebControls.WizardStepCollection> kolekcji. Jeśli <xref:System.Web.UI.WebControls.WizardStepBase>-pochodnej obiekt nie jest w kolekcji, metoda zwraca wartość -1.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Web.UI.WebControls.WizardStepBase" />-Pochodnej przekazany obiekt jest <see langword="null" />.</exception>
        <altmember cref="T:System.Web.UI.WebControls.WizardStepBase" />
        <altmember cref="T:System.Web.UI.WebControls.WizardStep" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, System.Web.UI.WebControls.WizardStepBase wizardStep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Insert(int32 index, class System.Web.UI.WebControls.WizardStepBase wizardStep) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WizardStepCollection.Insert(System.Int32,System.Web.UI.WebControls.WizardStepBase)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Insert (index As Integer, wizardStep As WizardStepBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Insert(int index, System::Web::UI::WebControls::WizardStepBase ^ wizardStep);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="wizardStep" Type="System.Web.UI.WebControls.WizardStepBase" />
      </Parameters>
      <Docs>
        <param name="index">Lokalizacja indeksu, w której mają zostać wstawione <see cref="T:System.Web.UI.WebControls.WizardStepBase" />-pochodzi z obiektu.</param>
        <param name="wizardStep">
          <see cref="T:System.Web.UI.WebControls.WizardStepBase" />-Pochodnych obiekt do wstawienia do <see cref="T:System.Web.UI.WebControls.WizardStepCollection" /> kolekcji.</param>
        <summary>Wstawia określony <see cref="T:System.Web.UI.WebControls.WizardStepBase" />-pochodnych obiektu do kolekcji w określonej lokalizacji indeksu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WizardStepCollection.Insert%2A> Dodaje metody <xref:System.Web.UI.WebControls.WizardStepBase>-pochodnych obiektu do kolekcji w określonej lokalizacji indeksu.  
  
 Alternatywnie można użyć <xref:System.Web.UI.WebControls.WizardStepCollection.AddAt%2A> metody w celu dodania <xref:System.Web.UI.WebControls.WizardStepBase>-pochodnych obiektu do kolekcji. Aby dodać <xref:System.Web.UI.WebControls.WizardStepBase>-pochodnego obiekt na koniec <xref:System.Web.UI.WebControls.WizardStepCollection> kolekcji, użyj <xref:System.Web.UI.WebControls.WizardStepCollection.Add%2A> metody.  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.WizardStepCollection.Insert%2A> — Metoda i <xref:System.Web.UI.WebControls.WizardStepCollection.AddAt%2A> metody wykonywać zasadniczo tej samej funkcji. Gdy <xref:System.Web.UI.WebControls.WizardStepCollection.Insert%2A> metoda jest wywoływana, po prostu przekazuje `wizardStep` i `index` parametry <xref:System.Web.UI.WebControls.WizardStepCollection.AddAt%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje programowe tworzenie <xref:System.Web.UI.WebControls.Wizard> kontroli i przy użyciu <xref:System.Web.UI.WebControls.WizardStepCollection.Insert%2A> metody w celu dodania <xref:System.Web.UI.WebControls.WizardStepBase>-pochodnych obiektów do <xref:System.Web.UI.WebControls.Wizard.WizardSteps%2A> kolekcji. Należy pamiętać, że w tym przykładzie <xref:System.Web.UI.WebControls.Wizard.WizardSteps%2A> właściwość <xref:System.Web.UI.WebControls.Wizard> kontroli jest wystąpieniem <xref:System.Web.UI.WebControls.WizardStepCollection> klasy.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.WizardStepCollectionInsert#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.WizardStepCollectionInsert/CS/wizardstepcollectioninsertcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.WizardStepCollectionInsert#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.WizardStepCollectionInsert/VB/wizardstepcollectioninsertvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WizardStepBase" />
        <altmember cref="T:System.Web.UI.WebControls.WizardStep" />
        <altmember cref="M:System.Web.UI.WebControls.WizardStepCollection.Add(System.Web.UI.WebControls.WizardStepBase)" />
        <altmember cref="M:System.Web.UI.WebControls.WizardStepCollection.AddAt(System.Int32,System.Web.UI.WebControls.WizardStepBase)" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WizardStepCollection.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą czy <see cref="T:System.Web.UI.WebControls.WizardStepBase" />— można modyfikować obiekty pochodne w kolekcji.</summary>
        <value>
          <see langword="true" /> Jeśli <see cref="T:System.Web.UI.WebControls.WizardStepCollection" /> kolekcji może być zmodyfikowany; w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.WebControls.WizardStepBase" />
        <altmember cref="T:System.Web.UI.WebControls.WizardStep" />
        <altmember cref="T:System.Web.UI.WebControls.Wizard" />
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WizardStepCollection.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSynchronized { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy dostęp do kolekcji jest zsynchronizowany (wątkowo).</summary>
        <value>
          <see langword="false" /> we wszystkich przypadkach.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość jest określana na podstawie <xref:System.Collections.ICollection> interfejsu i jest zastąpiona w celu zawsze zwracają `false`.  
  
 Aby uzyskać więcej informacji na temat <xref:System.Web.UI.WebControls.WizardStepCollection.IsSynchronized%2A> właściwości, zobacz <xref:System.Collections.ICollection.IsSynchronized%2A> właściwość <xref:System.Collections.ICollection> — interfejs  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.IsSynchronized" />
        <altmember cref="T:System.Collections.ICollection" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WizardStepBase this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WizardStepBase Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WizardStepCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As WizardStepBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WizardStepBase ^ default[int] { System::Web::UI::WebControls::WizardStepBase ^ get(int index); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WizardStepBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Indeks <see cref="T:System.Web.UI.WebControls.WizardStep" /> obiektu do pobrania.</param>
        <summary>Pobiera <see cref="T:System.Web.UI.WebControls.WizardStepBase" />-pochodną obiektu kolekcji pod określonym indeksem.</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.WizardStepBase" />-Pochodnych obiektu w <see cref="T:System.Web.UI.WebControls.WizardStepCollection" /> kolekcji w określonej lokalizacji indeksu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.WizardStepCollection.Item%2A> właściwości do pobrania <xref:System.Web.UI.WebControls.WizardStepBase>-pochodnych obiekt w określonej lokalizacji indeksu w <xref:System.Web.UI.WebControls.WizardStepCollection> kolekcji przy użyciu notacji tablicy.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WizardStepBase" />
        <altmember cref="T:System.Web.UI.WebControls.WizardStep" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Web.UI.WebControls.WizardStepBase wizardStep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Web.UI.WebControls.WizardStepBase wizardStep) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WizardStepCollection.Remove(System.Web.UI.WebControls.WizardStepBase)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (wizardStep As WizardStepBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Web::UI::WebControls::WizardStepBase ^ wizardStep);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wizardStep" Type="System.Web.UI.WebControls.WizardStepBase" />
      </Parameters>
      <Docs>
        <param name="wizardStep">
          <see cref="T:System.Web.UI.WebControls.WizardStepBase" />-Pochodnych obiekt ma zostać usunięty z kolekcji.</param>
        <summary>Usuwa określoną <see cref="T:System.Web.UI.WebControls.WizardStepBase" />-pochodnych obiekt z kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.WizardStepCollection.Remove%2A> metodę, aby usunąć <xref:System.Web.UI.WebControls.WizardStepBase>-pochodnych obiektu z <xref:System.Web.UI.WebControls.WizardStepCollection> kolekcji. Alternatywnie można użyć <xref:System.Web.UI.WebControls.WizardStepCollection.RemoveAt%2A> metodę, aby usunąć <xref:System.Web.UI.WebControls.WizardStepBase>-pochodnych obiektu z określonej lokalizacji w <xref:System.Web.UI.WebControls.WizardStepCollection> kolekcji.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób użycia <xref:System.Web.UI.WebControls.WizardStepCollection.Remove%2A> metodę, aby usunąć <xref:System.Web.UI.WebControls.WizardStepBase>-pochodnych obiektu z <xref:System.Web.UI.WebControls.WizardStepCollection> kolekcji. Należy pamiętać, że w tym przykładzie <xref:System.Web.UI.WebControls.Wizard.WizardSteps%2A> właściwość <xref:System.Web.UI.WebControls.Wizard> kontroli jest wystąpieniem <xref:System.Web.UI.WebControls.WizardStepCollection> klasy.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.WizardStepCollectionRemove#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.WizardStepCollectionRemove/CS/wizardstepcollectionremovecs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.WizardStepCollectionRemove#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.WizardStepCollectionRemove/VB/wizardstepcollectionremovevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Web.UI.WebControls.WizardStepBase" />-Pochodnej przekazany obiekt jest <see langword="null" />.</exception>
        <altmember cref="T:System.Web.UI.WebControls.WizardStepBase" />
        <altmember cref="T:System.Web.UI.WebControls.WizardStep" />
        <altmember cref="M:System.Web.UI.WebControls.WizardStepCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WizardStepCollection.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Indeks <see cref="T:System.Web.UI.WebControls.WizardStepBase" />-pochodnych obiekt ma zostać usunięty.</param>
        <summary>Usuwa <see cref="T:System.Web.UI.WebControls.WizardStepBase" />-pochodnych obiekt z kolekcji w określonej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.WizardStepCollection.RemoveAt%2A> metodę, aby usunąć <xref:System.Web.UI.WebControls.WizardStepBase>-pochodnych obiektu z <xref:System.Web.UI.WebControls.WizardStepCollection> kolekcji w określonej lokalizacji indeksu. Alternatywnie można usunąć określonego <xref:System.Web.UI.WebControls.WizardStepBase>-pochodzące z kolekcji przy użyciu obiektu <xref:System.Web.UI.WebControls.WizardStepCollection.Remove%2A> metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WizardStepBase" />
        <altmember cref="T:System.Web.UI.WebControls.WizardStep" />
        <altmember cref="M:System.Web.UI.WebControls.WizardStepCollection.Remove(System.Web.UI.WebControls.WizardStepBase)" />
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WizardStepCollection.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt, który może służyć do synchronizujący dostęp do kolekcji.</summary>
        <value>Obiekt, który może służyć do synchronizujący dostęp do <see cref="T:System.Web.UI.WebControls.WizardStepCollection" /> kolekcji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obiekt zwrócony w tej implementacji jest <xref:System.Web.UI.WebControls.WizardStepCollection> samego obiektu.  
  
 Aby uzyskać więcej informacji na temat <xref:System.Web.UI.WebControls.WizardStepCollection.SyncRoot%2A> właściwości, zobacz <xref:System.Collections.ICollection.SyncRoot%2A> właściwość <xref:System.Collections.ICollection> interfejsu.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.SyncRoot" />
        <altmember cref="T:System.Collections.ICollection" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WizardStepCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">Liczony od zera <see cref="T:System.Array" /> odbierająca elementów skopiowanych z <see cref="T:System.Web.UI.WebControls.WizardStepCollection" /> kolekcji.</param>
        <param name="index">Pozycja w tablicy docelowej, w którym należy rozpocząć odbieranie skopiowanej zawartości.</param>
        <summary>Kopiuje wszystkie elementy z <see cref="T:System.Web.UI.WebControls.WizardStepCollection" /> kolekcji do tablicy jednowymiarowej tablicy, zaczynając od określonego indeksu tablicy docelowej.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WizardStepCollection.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (value As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ value) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Object" /> Do dołączenia do końca kolekcji.</param>
        <summary>Dołącza określony obiekt do końca kolekcji.</summary>
        <returns>Pozycja, do której dodano nowy element.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WizardStepCollection.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Object" /> Do zlokalizowania w kolekcji.</param>
        <summary>Określa, czy kolekcja zawiera określony obiekt.</summary>
        <returns>
          <see langword="true" /> Jeśli <see cref="T:System.Object" /> znajduje się w <see cref="T:System.Collections.IList" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WizardStepCollection.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt do wyszukania w kolekcji.</param>
        <summary>Określa wartość indeksu, która reprezentuje pozycję określonego obiektu w kolekcji.</summary>
        <returns>Wartość indeksu określonego obiektu w kolekcji.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WizardStepCollection.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">Indeks, w którym można wstawić obiektu do kolekcji.</param>
        <param name="value">Obiekt do wstawienia do kolekcji.</param>
        <summary>Wstawia określony obiekt w kolekcji w określonej pozycji.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WizardStepCollection.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IsFixedSize { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy kolekcja ma stały rozmiar.</summary>
        <value>
          <see langword="true" /> Jeśli kolekcja ma stały rozmiar; w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WizardStepCollection.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IList.Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Indeks obiektu można pobrać z kolekcji.</param>
        <summary>Pobiera obiekt pod określonym indeksem w kolekcji.</summary>
        <value>Obiekt do pobrania.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość umożliwia dostęp do określonego elementu w kolekcji przy użyciu następującej składni: myCollection [Indeks].  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WizardStepCollection.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który ma zostać usunięty z kolekcji.</param>
        <summary>Usuwa określony obiekt z kolekcji.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>