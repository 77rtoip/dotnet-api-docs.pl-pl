<Type Name="CustomValidator" FullName="System.Web.UI.WebControls.CustomValidator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5c9c16154f0596866ce3d5ad57c9e40deedc19ee" />
    <Meta Name="ms.sourcegitcommit" Value="4b4804968da1dfdf71c501075a5b66957b54f2e8" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/27/2018" />
    <Meta Name="ms.locfileid" Value="32037296" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CustomValidator : System.Web.UI.WebControls.BaseValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CustomValidator extends System.Web.UI.WebControls.BaseValidator" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.CustomValidator" />
  <TypeSignature Language="VB.NET" Value="Public Class CustomValidator&#xA;Inherits BaseValidator" />
  <TypeSignature Language="C++ CLI" Value="public ref class CustomValidator : System::Web::UI::WebControls::BaseValidator" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.BaseValidator</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("ServerValidate")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ToolboxData("&lt;{0}:CustomValidator runat="server" ErrorMessage="CustomValidator"&gt;&lt;/{0}:CustomValidator&gt;")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Sprawdza poprawność zdefiniowanych przez użytkownika na kontrolki wprowadzania.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.CustomValidator> formantu do zapewnienia funkcji zdefiniowanej przez użytkownika weryfikacji kontrolki wprowadzania. <xref:System.Web.UI.WebControls.CustomValidator> Formant jest formantem oddzielne z kontrolki wprowadzania jest sprawdzane, które umożliwia kontrolowanie gdy wyświetlany jest komunikat weryfikacji.  
  
 Formanty walidacji zawsze wykonują sprawdzanie poprawności na serwerze. Mają one również pełną implementację po stronie klienta, która umożliwia przeglądarkami z włączoną skryptu (takich jak Microsoft Internet Explorer w wersji 4.0 i nowsze) do wykonywania sprawdzania poprawności na kliencie. Sprawdzanie poprawności klienta podnosi poziom proces weryfikacji, sprawdzanie danych wejściowych użytkownika przed ich wysłaniem do serwera. Dzięki temu błędów zostało wykryte na komputerze klienckim przed przesłaniem formularza, co umożliwia uniknięcie obiegu informacji niezbędnych do weryfikacji po stronie serwera.  
  
 Aby utworzyć funkcję weryfikacji po stronie serwera, należy podać obsługi dla <xref:System.Web.UI.WebControls.CustomValidator.ServerValidate> zdarzeń, który wykonuje sprawdzanie poprawności. Ciąg, z kontrolki wprowadzania do sprawdzania poprawności jest możliwy za pomocą <xref:System.Web.UI.WebControls.ServerValidateEventArgs.Value%2A> właściwość <xref:System.Web.UI.WebControls.ServerValidateEventArgs> obiekt przekazany do obsługi zdarzeń jako parametr. Wynik weryfikacji jest następnie przechowywany w <xref:System.Web.UI.WebControls.ServerValidateEventArgs.IsValid%2A> właściwość <xref:System.Web.UI.WebControls.ServerValidateEventArgs> obiektu.  
  
 Można utworzyć funkcji weryfikacji po stronie klienta, należy najpierw dodać opisanych wcześniej funkcja weryfikacji po stronie serwera. Następnie dodaj funkcję skrypt weryfikacji po stronie klienta do strony ASP.NET (aspx).  
  
 Jeśli używasz programu Visual Basic Scripting Edition (VBScript), funkcja musi być w tym formularzu:  
  
```  
Sub ValidationFunctionName(source, arguments)  
```  
  
 Jeśli używasz języka JScript funkcji musi być w tym formularzu:  
  
```  
function ValidationFunctionName(source, arguments)  
```  
  
 `source` Parametr jest odwołanie do \<span > element renderowany <xref:System.Web.UI.WebControls.CustomValidator> formantu. Dzięki temu można programowo kontroli \<span > tag, takie jak modyfikowanie <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> atrybutu. `arguments` Parametr jest obiekt o dwie właściwości: wartość i IsValid. Ten parametr umożliwia uzyskiwanie wartości formantu do sprawdzania poprawności i wskaż, czy wartość jest prawidłowa procedura użytkownika niestandardowego sprawdzania poprawności.  
  
 Użyj <xref:System.Web.UI.WebControls.CustomValidator.ClientValidationFunction%2A> właściwość, aby określić nazwę funkcji skrypt weryfikacji po stronie klienta skojarzone z <xref:System.Web.UI.WebControls.CustomValidator> formantu. Ponieważ funkcja skryptu jest wykonywana na kliencie, funkcja musi być w języku, który obsługuje docelowej przeglądarki, takich jak VBScript lub JScript.  
  
> [!NOTE]
>  Jeśli używasz <xref:System.Web.UI.WebControls.CustomValidator> kontrolować wewnątrz <xref:System.Web.UI.UpdatePanel> sterowania, upewnij się, że formantem modułu sprawdzania poprawności i skojarzonej z nim są na tym samym panelu. Aby uzyskać więcej informacji o korzystaniu z <xref:System.Web.UI.UpdatePanel> kontrolować aktualizacje stron częściowych, zobacz [omówienie renderowania stron częściowych](http://msdn.microsoft.com/library/5c12736d-d9e9-464a-9388-3fe0f9f49e49).  
  
 Jak weryfikacji po stronie serwera, ciąg z kontrolki wprowadzania do sprawdzania poprawności jest dostępny za pomocą <xref:System.Web.UI.WebControls.ServerValidateEventArgs.Value%2A> właściwość `arguments` parametru. Zwraca wynik weryfikacji przez ustawienie <xref:System.Web.UI.WebControls.ServerValidateEventArgs.IsValid%2A> właściwość `arguments` parametru.  
  
> [!CAUTION]
>  Używanie formantów modułu sprawdzania poprawności, należy zawsze sprawdzić wyniki weryfikacji po stronie serwera przed wykonaniem jakiegokolwiek przetwarzania. Po odświeżania strony ale przed metody zdarzenia są nazywane, strony wywołuje kontrolki modułu sprawdzania poprawności i agreguje wyniki do <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> właściwości. (Możesz także wywołać jawnie za pomocą kontrolki modułu sprawdzania poprawności `Validate` metody.) W swoim własnym kodem powinien sprawdzić, czy <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> zwraca `true` przed rozpoczęciem przetwarzania danych wejściowych. Mimo że przeglądarkami z włączoną skryptu może uniemożliwić występujących na kliencie, jeśli sprawdzanie poprawności nie powiodło się, należy zawsze także sprawdzić odświeżania strony <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> w kodzie serwera przed przetworzeniem zatwierdzonych danych.  
  
 Wiele formantów sprawdzania poprawności można z poszczególnych kontrolki wprowadzania do sprawdzania poprawności różnych kryteriów. Na przykład można zastosować wiele formantów sprawdzania poprawności na <xref:System.Web.UI.WebControls.TextBox> formant, który umożliwia użytkownikowi wprowadzenie liczby elementy do dodania do koszyka zakupów. Można użyć <xref:System.Web.UI.WebControls.CustomValidator> sterowania, aby upewnić się, że podana wartość jest mniejsza niż wartość w magazynie i <xref:System.Web.UI.WebControls.RequiredFieldValidator> sterowania, aby upewnić się, że użytkownik wprowadza wartość do <xref:System.Web.UI.WebControls.TextBox> formantu.  
  
> [!NOTE]
>  Jeśli kontrolki wprowadzania jest pusta, są nazywane żadnych funkcji weryfikacji i sprawdzania poprawności zakończy się pomyślnie. Użyj <xref:System.Web.UI.WebControls.RequiredFieldValidator> sterowania, aby wymagać od użytkownika wprowadzić dane do kontrolki wprowadzania.  
  
 Istnieje możliwość użycia <xref:System.Web.UI.WebControls.CustomValidator> kontroli bez ustawienia <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> właściwości. Zwykle odbywa się podczas sprawdzania poprawności wielu kontrolki wejściowe i sprawdzanie poprawności kontrolki wejściowe, których nie można używać z formantami weryfikacji, takie jak <xref:System.Web.UI.WebControls.CheckBox> formantu. W takim przypadku <xref:System.Web.UI.WebControls.ServerValidateEventArgs.Value%2A> właściwość `arguments` parametr przekazany do programu obsługi zdarzeń dla <xref:System.Web.UI.WebControls.CustomValidator.ServerValidate> zdarzeń i weryfikacji po stronie klienta funkcji zawsze zawiera ciąg pusty (""). Jednak te funkcje sprawdzania poprawności nadal noszą nazwę, gdy mają one zastosowanie do określania walidacji na serwerze i klienta. Aby uzyskać dostęp do wartości do sprawdzania poprawności, programowo musi odwoływać kontrolki wprowadzania, który chcesz zweryfikować, a następnie pobrać wartości z odpowiedniej właściwości. Na przykład, aby sprawdzić poprawność <xref:System.Web.UI.WebControls.CheckBox> sterowania na serwerze, nie należy ustawiać <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> właściwości formantu sprawdzania poprawności i używanie poniższy kod obsługi dla <xref:System.Web.UI.WebControls.CustomValidator.ServerValidate> zdarzeń.  
  
```vb  
Sub ServerValidation (source As object, args As ServerValidateEventArgs)  
    args.IsValid = (CheckBox1.Checked = True)  
 End Sub  
```  
  
```csharp  
void ServerValidation (object source, ServerValidateEventArgs args)  
 {  
    args.IsValid = (CheckBox1.Checked == true);  
 }  
```  
  
 Aby uzyskać więcej informacji na formanty walidacji, zobacz <xref:System.Web.UI.WebControls.BaseValidator>.  
  
## <a name="accessibility"></a>Ułatwienia dostępu  
 Aby uzyskać informacje o sposobie konfigurowania tego formantu, dzięki czemu generuje kod znaczników, który jest zgodny ze standardami ułatwień dostępu, zobacz [ułatwień dostępu w Visual Studio i ASP.NET](http://msdn.microsoft.com/library/7e3ce9c4-6b7d-4fb1-94b5-72cf2a44fe13) i [kontrolki ASP.NET i dostępności](http://msdn.microsoft.com/library/847a37e3-ce20-41da-b0d3-7dfb0fdae9a0).  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób tworzenia serwerowe programu <xref:System.Web.UI.WebControls.CustomValidator> formantu.  
  
> [!IMPORTANT]
>  W tym przykładzie ma pola tekstowego, który akceptuje dane wejściowe użytkownika, który jest potencjalnym zagrożeniem dla bezpieczeństwa. Domyślnie strony sieci Web ASP.NET zweryfikować, czy dane wejściowe użytkownika nie obejmuje skrypt lub elementów HTML. Aby uzyskać więcej informacji, zobacz [Przegląd wykorzystuje skryptu](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[CustomValidatorServerValidate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomValidatorServerValidate/CS/customvalidatorservervalidatecs.aspx#1)]
 [!code-aspx-vb[CustomValidatorServerValidate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomValidatorServerValidate/VB/customvalidatorservervalidatevb.aspx#1)]  
  
 Poniższy przykładowy kod przedstawia sposób tworzenia klienta <xref:System.Web.UI.WebControls.CustomValidator> formantu.  
  
 [!code-aspx-csharp[CustomValidatorClient#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomValidatorClient/CS/customvalidatorclientcs.aspx#1)]
 [!code-aspx-vb[CustomValidatorClient#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomValidatorClient/VB/customvalidatorclientvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.BaseValidator" />
    <altmember cref="T:System.Web.UI.WebControls.RequiredFieldValidator" />
    <altmember cref="P:System.Web.UI.WebControls.CustomValidator.ClientValidationFunction" />
    <altmember cref="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" />
    <altmember cref="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" />
    <altmember cref="T:System.Web.UI.WebControls.ServerValidateEventArgs" />
    <altmember cref="P:System.Web.UI.WebControls.ServerValidateEventArgs.Value" />
    <altmember cref="P:System.Web.UI.WebControls.ServerValidateEventArgs.IsValid" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CustomValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CustomValidator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CustomValidator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.WebControls.CustomValidator" /> klasy.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.WebControls.BaseValidator" />
        <altmember cref="T:System.Web.UI.WebControls.RequiredFieldValidator" />
        <altmember cref="P:System.Web.UI.WebControls.CustomValidator.ClientValidationFunction" />
        <altmember cref="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" />
        <altmember cref="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" />
        <altmember cref="T:System.Web.UI.WebControls.ServerValidateEventArgs" />
        <altmember cref="P:System.Web.UI.WebControls.ServerValidateEventArgs.Value" />
        <altmember cref="P:System.Web.UI.WebControls.ServerValidateEventArgs.IsValid" />
      </Docs>
    </Member>
    <Member MemberName="AddAttributesToRender">
      <MemberSignature Language="C#" Value="protected override void AddAttributesToRender (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddAttributesToRender(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CustomValidator.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub AddAttributesToRender (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void AddAttributesToRender(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter" /> zawierający strumienia wyjściowego do renderowania na kliencie.</param>
        <summary>Dodaje właściwości <see cref="T:System.Web.UI.WebControls.CustomValidator" /> formantu do strumienia wyjściowego do renderowania na kliencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższym przykładzie pokazano, jak zastąpić <xref:System.Web.UI.WebControls.CustomValidator.AddAttributesToRender%2A> metody w formancie niestandardowego serwera, aby <xref:System.Web.UI.WebControls.CustomValidator> pogrubione zawsze jest wyświetlany komunikat o błędzie.  
  
> [!IMPORTANT]
>  W tym przykładzie ma pola tekstowego, który akceptuje dane wejściowe użytkownika, który jest potencjalnym zagrożeniem dla bezpieczeństwa. Domyślnie strony sieci Web ASP.NET zweryfikować, czy dane wejściowe użytkownika nie obejmuje skrypt lub elementów HTML. Aby uzyskać więcej informacji, zobacz [Przegląd wykorzystuje skryptu](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[CustomCustomValidatorAddAttributesToRender#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorAddAttributesToRender/CS/custom_customvalidator_addattributestorendercs.aspx#1)]
 [!code-aspx-vb[CustomCustomValidatorAddAttributesToRender#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorAddAttributesToRender/VB/custom_customvalidator_addattributestorendervb.aspx#1)]  
[!code-csharp[CustomCustomValidatorAddAttributesToRender#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorAddAttributesToRender/CS/custom_customvalidator_addattributestorender.cs#2)]
[!code-vb[CustomCustomValidatorAddAttributesToRender#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorAddAttributesToRender/VB/custom_customvalidator_addattributestorender.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientValidationFunction">
      <MemberSignature Language="C#" Value="public string ClientValidationFunction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ClientValidationFunction" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.CustomValidator.ClientValidationFunction" />
      <MemberSignature Language="VB.NET" Value="Public Property ClientValidationFunction As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ClientValidationFunction { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę funkcji niestandardowego skryptu po stronie klienta używany do sprawdzania poprawności.</summary>
        <value>Nazwa funkcji skryptu niestandardowego klienta używany do sprawdzania poprawności. Wartość domyślna to <see cref="F:System.String.Empty" />, co oznacza, że ta właściwość nie jest ustawiona.  
  
 <block subset="none" type="note"><para>  
 Nazwa funkcji nie może zawierać żadnych parametrów lub nawiasów.  
  
</para></block></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ustaw tę właściwość na nazwę funkcji, która przeprowadza weryfikację po stronie klienta.  
  
 Funkcja sprawdzania poprawności klienta jest uruchamiana w przeglądarce docelowy, funkcja musi być napisana język skryptów obsługiwana przez przeglądarkę, takich jak JScript i VBScript.  
  
 Nie można ustawić tej właściwości kompozycji lub motywów arkusza stylów. Aby uzyskać więcej informacji, zobacz <xref:System.Web.UI.ThemeableAttribute> i [kompozycji ASP.NET i karnacji](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.WebControls.CustomValidator.ClientValidationFunction%2A> właściwości, aby określić nazwę funkcji, która przeprowadza weryfikację po stronie klienta. Funkcja weryfikacji sprawdza, czy liczby parzyste. Aby uzyskać opis parametrów funkcji, zobacz sekcję uwag <xref:System.Web.UI.WebControls.CustomValidator>.  
  
> [!IMPORTANT]
>  W tym przykładzie ma pola tekstowego, który akceptuje dane wejściowe użytkownika, który jest potencjalnym zagrożeniem dla bezpieczeństwa. Domyślnie strony sieci Web ASP.NET zweryfikować, czy dane wejściowe użytkownika nie obejmuje skrypt lub elementów HTML. Aby uzyskać więcej informacji, zobacz [Przegląd wykorzystuje skryptu](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[CustomValidatorClient#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomValidatorClient/CS/customvalidatorclientcs.aspx#1)]
 [!code-aspx-vb[CustomValidatorClient#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomValidatorClient/VB/customvalidatorclientvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.String.Empty" />
      </Docs>
    </Member>
    <Member MemberName="ControlPropertiesValid">
      <MemberSignature Language="C#" Value="protected override bool ControlPropertiesValid ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ControlPropertiesValid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CustomValidator.ControlPropertiesValid" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ControlPropertiesValid () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool ControlPropertiesValid();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sprawdza, czy właściwości formantu prawidłowe wartości.</summary>
        <returns>
          <see langword="true" /> Jeśli właściwości są prawidłowe; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższym przykładzie pokazano, jak zastąpić <xref:System.Web.UI.WebControls.CustomValidator.ControlPropertiesValid%2A> metoda niestandardowego serwera kontroli tak, aby zawsze zwraca wartość właściwości visible tak długo, jak <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> właściwość <xref:System.Web.UI.WebControls.CustomValidator> formant znajduje się na stronie i zawiera właściwości sprawdzania poprawności.  
  
 [!code-aspx-csharp[CustomCustomValidatorControlPropertiesValid#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorControlPropertiesValid/CS/custom_customvalidator_controlpropertiesvalidcs.aspx#1)]
 [!code-aspx-vb[CustomCustomValidatorControlPropertiesValid#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorControlPropertiesValid/VB/custom_customvalidator_controlpropertiesvalidvb.aspx#1)]  
[!code-csharp[CustomCustomValidatorControlPropertiesValid#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorControlPropertiesValid/CS/custom_customvalidator_controlpropertiesvalid.cs#2)]
[!code-vb[CustomCustomValidatorControlPropertiesValid#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorControlPropertiesValid/VB/custom_customvalidator_controlpropertiesvalid.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EvaluateIsValid">
      <MemberSignature Language="C#" Value="protected override bool EvaluateIsValid ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool EvaluateIsValid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CustomValidator.EvaluateIsValid" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function EvaluateIsValid () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool EvaluateIsValid();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zastępuje <see cref="M:System.Web.UI.MobileControls.BaseValidator.EvaluateIsValid" /> metody.</summary>
        <returns>
          <see langword="true" /> Jeśli wartość w formancie wejściowy jest nieprawidłowy; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższym przykładzie pokazano, jak zastąpić <xref:System.Web.UI.WebControls.CustomValidator.EvaluateIsValid%2A> metody w formancie niestandardowego serwera.  
  
> [!IMPORTANT]
>  W tym przykładzie ma pola tekstowego, który akceptuje dane wejściowe użytkownika, który jest potencjalnym zagrożeniem dla bezpieczeństwa. Domyślnie strony sieci Web ASP.NET zweryfikować, czy dane wejściowe użytkownika nie obejmuje skrypt lub elementów HTML. Aby uzyskać więcej informacji, zobacz [Przegląd wykorzystuje skryptu](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[CustomCustomValidatorEvaluateIsValid#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorEvaluateIsValid/CS/custom_customvalidator_evaluateisvalidcs.aspx#1)]
 [!code-aspx-vb[CustomCustomValidatorEvaluateIsValid#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorEvaluateIsValid/VB/custom_customvalidator_evaluateisvalidvb.aspx#1)]  
[!code-csharp[CustomCustomValidatorEvaluateIsValid#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorEvaluateIsValid/CS/custom_customvalidator_evaluateisvalid.cs#2)]
[!code-vb[CustomCustomValidatorEvaluateIsValid#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorEvaluateIsValid/VB/custom_customvalidator_evaluateisvalid.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnServerValidate">
      <MemberSignature Language="C#" Value="protected virtual bool OnServerValidate (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnServerValidate(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnServerValidate (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnServerValidate(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Wartość do zweryfikowania.</param>
        <summary>Zgłasza <see cref="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" /> zdarzenia dla <see cref="T:System.Web.UI.WebControls.CustomValidator" /> formantu.</summary>
        <returns>
          <see langword="true" /> Jeśli wartość jest określona przez <paramref name="value" /> parametru pozytywnej weryfikacji; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.CustomValidator.ServerValidate> Zdarzenie jest zgłaszane, gdy weryfikacja jest przeprowadzana na serwerze.  
  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).  
  
 <xref:System.Web.UI.WebControls.CustomValidator.OnServerValidate%2A> Metoda umożliwia również klas pochodnych do obsługi zdarzenia bez dołączanie delegata. Jest to preferowana metoda obsługi zdarzeń w klasie pochodnej.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, jak określić i kodu obsługę po stronie serwera <xref:System.Web.UI.WebControls.CustomValidator> formantu.  
  
> [!IMPORTANT]
>  W tym przykładzie ma pola tekstowego, który akceptuje dane wejściowe użytkownika, który jest potencjalnym zagrożeniem dla bezpieczeństwa. Domyślnie strony sieci Web ASP.NET zweryfikować, czy dane wejściowe użytkownika nie obejmuje skrypt lub elementów HTML. Aby uzyskać więcej informacji, zobacz [Przegląd wykorzystuje skryptu](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[CustomValidatorServerValidate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomValidatorServerValidate/CS/customvalidatorservervalidatecs.aspx#1)]
 [!code-aspx-vb[CustomValidatorServerValidate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomValidatorServerValidate/VB/customvalidatorservervalidatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>W przypadku przesłaniania <see cref="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" /> w klasie pochodnej, należy wywołać klasy podstawowej <see cref="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" /> metody, które zarejestrowane delegatów odbierać zdarzenia.</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" />
      </Docs>
    </Member>
    <Member MemberName="ServerValidate">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ServerValidateEventHandler ServerValidate;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ServerValidateEventHandler ServerValidate" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ServerValidate As ServerValidateEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ServerValidateEventHandler ^ ServerValidate;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ServerValidateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy weryfikacja jest przeprowadzana na serwerze.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.CustomValidator.ServerValidate> Zdarzenie jest zgłaszane, gdy weryfikacja jest przeprowadzana na serwerze. To zdarzenie służy do zapewnienia procedury walidacji niestandardowej kontrolki wprowadzania, takich jak <xref:System.Web.UI.WebControls.TextBox> formantu.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, jak określić i kodu obsługę po stronie serwera <xref:System.Web.UI.WebControls.CustomValidator> formantu. Tworzy procedury niestandardowego sprawdzania poprawności, sprawdza poprawność wartości <xref:System.Web.UI.WebControls.TextBox> kontrola parzystą liczbą, a następnie wyświetla wynik weryfikacji.  
  
> [!IMPORTANT]
>  W tym przykładzie ma pola tekstowego, który akceptuje dane wejściowe użytkownika, który jest potencjalnym zagrożeniem dla bezpieczeństwa. Domyślnie strony sieci Web ASP.NET zweryfikować, czy dane wejściowe użytkownika nie obejmuje skrypt lub elementów HTML. Aby uzyskać więcej informacji, zobacz [Przegląd wykorzystuje skryptu](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[CustomValidatorServerValidate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomValidatorServerValidate/CS/customvalidatorservervalidatecs.aspx#1)]
 [!code-aspx-vb[CustomValidatorServerValidate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomValidatorServerValidate/VB/customvalidatorservervalidatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" />
        <altmember cref="T:System.Web.UI.WebControls.ServerValidateEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="ValidateEmptyText">
      <MemberSignature Language="C#" Value="public bool ValidateEmptyText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidateEmptyText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.CustomValidator.ValidateEmptyText" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidateEmptyText As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ValidateEmptyText { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość logiczną wskazującą, czy powinny być weryfikowane pusty tekst.</summary>
        <value>
          <see langword="true" /> Jeśli mają być weryfikowane pusty tekst; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każdy moduł sprawdzania poprawności może być skojarzony z formantem docelowym. W poprzednich wersjach programu .NET Framework, jeśli docelowa formant miał wartość pustego ciągu, takich jak <xref:System.Web.UI.WebControls.TextBox.Text%2A> o wartość właściwości <xref:System.String.Empty?displayProperty=nameWithType>, modułu sprawdzania poprawności (z wyjątkiem <xref:System.Web.UI.WebControls.RequiredFieldValidator> modułu sprawdzania poprawności) nie są używane do oceny kontroli docelowych i po prostu zwróci czy sprawdzanie poprawności przekazany.  
  
 <xref:System.Web.UI.WebControls.CustomValidator.ValidateEmptyText%2A> Właściwość jest nowa dla programu .NET Framework w wersji 2.0.  Jeśli <xref:System.Web.UI.WebControls.CustomValidator.ValidateEmptyText%2A> ustawiono `true`, moduł weryfikacji oblicza wartość formantu (przy użyciu kryteriów, aby określić <xref:System.Web.UI.WebControls.CustomValidator> sterowania) i zwraca wyniki sprawdzania poprawności. Ta właściwość umożliwia deweloperom oceniać wyniki <xref:System.Web.UI.WebControls.CustomValidator> kontroli niezależnie od wartości docelowej formantu.  
  
 Nie można ustawić tej właściwości kompozycji lub motywów arkusza stylów. Aby uzyskać więcej informacji, zobacz <xref:System.Web.UI.ThemeableAttribute> i [kompozycji ASP.NET i karnacji](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.BaseValidator" />
        <altmember cref="T:System.Web.UI.WebControls.RequiredFieldValidator" />
      </Docs>
    </Member>
  </Members>
</Type>