<Type Name="CustomValidator" FullName="System.Web.UI.WebControls.CustomValidator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f7b5be829776df65e6854f8551db632e7fc8bb85" />
    <Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="11/29/2018" />
    <Meta Name="ms.locfileid" Value="52611385" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CustomValidator : System.Web.UI.WebControls.BaseValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CustomValidator extends System.Web.UI.WebControls.BaseValidator" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.CustomValidator" />
  <TypeSignature Language="VB.NET" Value="Public Class CustomValidator&#xA;Inherits BaseValidator" />
  <TypeSignature Language="C++ CLI" Value="public ref class CustomValidator : System::Web::UI::WebControls::BaseValidator" />
  <TypeSignature Language="F#" Value="type CustomValidator = class&#xA;    inherit BaseValidator" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.BaseValidator</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.DefaultEvent("ServerValidate")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Web.UI.ToolboxData("&lt;{0}:CustomValidator runat="server" ErrorMessage="CustomValidator"&gt;&lt;/{0}:CustomValidator&gt;")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.Web.UI.ToolboxData("&lt;{0}:CustomValidator runat=server ErrorMessage="CustomValidator"&gt;&lt;/{0}:CustomValidator&gt;")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Przeprowadza weryfikację zdefiniowanych przez użytkownika kontrolki wejściowej.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.CustomValidator> formantu do zapewnienia funkcji zdefiniowanych przez użytkownika weryfikacji kontrolki wejściowej. <xref:System.Web.UI.WebControls.CustomValidator> Jest oddzielnym kontrolka z kontrolki wprowadzania sprawdza poprawność, która umożliwia kontrolowanie której wyświetlany jest komunikat weryfikacji.  
  
 Kontrolkami walidacji zawsze wykonują sprawdzanie poprawności na serwerze. Ma także pełną implementację po stronie klienta, który umożliwia przeglądarkami z włączoną skryptów (takich jak Microsoft Internet Explorer 4.0 i nowsze) do wykonywania sprawdzania poprawności na komputerze klienckim. Weryfikacja po stronie klienta usprawnia proces sprawdzania poprawności, sprawdzając dane wejściowe użytkownika przed ich wysłaniem do serwera. Dzięki temu błędów zostało wykryte na komputerze klienckim, przed przesłaniem formularza, unikając w ten sposób komunikacji dwustronnej informacji niezbędnych do weryfikacji po stronie serwera.  
  
 Aby utworzyć funkcję weryfikacji po stronie serwera, zapewnia funkcję obsługi <xref:System.Web.UI.WebControls.CustomValidator.ServerValidate> zdarzeń, który wykonuje sprawdzanie poprawności. Ciąg, z kontrolki wprowadzania do sprawdzania poprawności jest możliwy za pomocą <xref:System.Web.UI.WebControls.ServerValidateEventArgs.Value%2A> właściwość <xref:System.Web.UI.WebControls.ServerValidateEventArgs> obiekt przekazany do procedury obsługi zdarzeń jako parametr. Wynik sprawdzania poprawności są następnie zapisywane w <xref:System.Web.UI.WebControls.ServerValidateEventArgs.IsValid%2A> właściwość <xref:System.Web.UI.WebControls.ServerValidateEventArgs> obiektu.  
  
 Aby utworzyć funkcję weryfikacji po stronie klienta, należy najpierw dodać funkcji walidacji po stronie serwera, opisanego wcześniej. Następnie dodaj funkcję skrypt weryfikacji po stronie klienta do strony ASP.NET (aspx).  
  
 Jeśli używasz Visual Basic Scripting Edition (VBScript), funkcja musi być w tym formularzu:  
  
```  
Sub ValidationFunctionName(source, arguments)  
```  
  
 Jeśli używasz języka JScript funkcji musi mieć postać:  
  
```  
function ValidationFunctionName(source, arguments)  
```  
  
 `source` Parametr to odwołanie do \<span > element renderowanych dla <xref:System.Web.UI.WebControls.CustomValidator> kontroli. Dzięki temu można programowo kontrola \<span > tag, takie jak modyfikowanie <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> atrybutu. `arguments` Parametru jest obiekt o dwie właściwości: wartość i IsValid. Ten parametr umożliwia użytkownikowi na uzyskanie wartości kontrolki do weryfikacji i wskazuje, czy wartość jest prawidłowa procedura Twojego niestandardowego sprawdzania poprawności.  
  
 Użyj <xref:System.Web.UI.WebControls.CustomValidator.ClientValidationFunction%2A> właściwości w celu określenia nazwy funkcji skrypt weryfikacji po stronie klienta są skojarzone z <xref:System.Web.UI.WebControls.CustomValidator> kontroli. Ponieważ funkcja skrypt jest wykonywany na komputerze klienckim, funkcja musi być w języku, który obsługuje przeglądarki docelowej, np. VBScript lub JScript.  
  
> [!NOTE]
>  Kiedy używasz <xref:System.Web.UI.WebControls.CustomValidator> kontrolować wewnątrz <xref:System.Web.UI.UpdatePanel> sterowania, upewnij się, że formantem modułu sprawdzania poprawności i jest skojarzony z są na tym samym panelu. Aby uzyskać więcej informacji o korzystaniu z <xref:System.Web.UI.UpdatePanel> kontrolowanie aktualizacji stron częściowych, zobacz [Przegląd renderowanie części strony](https://msdn.microsoft.com/library/5c12736d-d9e9-464a-9388-3fe0f9f49e49).  
  
 Weryfikacja po stronie serwera, np. ciągu z kontrolki wprowadzania do sprawdzania poprawności jest dostępne przy użyciu <xref:System.Web.UI.WebControls.ServerValidateEventArgs.Value%2A> właściwość `arguments` parametru. Zwraca wynik weryfikacji, ustawiając <xref:System.Web.UI.WebControls.ServerValidateEventArgs.IsValid%2A> właściwość `arguments` parametru.  
  
> [!CAUTION]
>  Za pomocą formantów modułu sprawdzania poprawności, należy zawsze sprawdzić wyniki weryfikacji po stronie serwera, przed wykonaniem jakiegokolwiek przetwarzania. Po zwrotu ale przed wywołaniem metody zdarzeń są, strony wywołuje kontrolki modułu sprawdzania poprawności i agreguje ich wyniki w <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> właściwości. (Można również wywołać jawnie za pomocą kontrolki modułu sprawdzania poprawności `Validate` metody.) We własnym kodzie powinien sprawdzić, czy <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> właściwość zwraca `true` przed rozpoczęciem przetwarzania danych wejściowych. Mimo że przeglądarkami z włączoną skrypt może uniemożliwić występujące na kliencie, jeśli sprawdzanie poprawności zakończyło się niepowodzeniem, należy zawsze także sprawdzić ogłaszania zwrotnego <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> w kodzie serwera przed przetworzeniem zweryfikowanych danych.  
  
 Wiele kontrolek weryfikacji może służyć za pomocą poszczególnych kontrolkę wejściową do weryfikowania innych kryteriów. Na przykład, można zastosować wiele kontrolek walidacji na <xref:System.Web.UI.WebControls.TextBox> formant, który umożliwia użytkownikowi wprowadzanie ilość elementów do dodania do koszyka. Możesz użyć <xref:System.Web.UI.WebControls.CustomValidator> sterowania, aby upewnić się, że określona wartość jest mniejsza niż ilość w magazynie i <xref:System.Web.UI.WebControls.RequiredFieldValidator> sterowania, aby upewnić się, czy użytkownik musi wprowadzić wartość do <xref:System.Web.UI.WebControls.TextBox> kontroli.  
  
> [!NOTE]
>  Jeśli kontrolka wejściowa jest pusta, są nazywane żadnych funkcji sprawdzania poprawności, a weryfikacja zakończy się powodzeniem. Użyj <xref:System.Web.UI.WebControls.RequiredFieldValidator> sterowania, aby wymagać od użytkowników wprowadzić dane do kontrolki wprowadzania.  
  
 Istnieje możliwość użycia <xref:System.Web.UI.WebControls.CustomValidator> kontroli bez ustawienia <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> właściwości. Zwykle odbywa się podczas sprawdzania poprawności wiele kontrolek wejściowych lub Sprawdzanie poprawności kontrolek wejściowych, których nie można używać z kontrolkami walidacji, takich jak <xref:System.Web.UI.WebControls.CheckBox> kontroli. W tym przypadku <xref:System.Web.UI.WebControls.ServerValidateEventArgs.Value%2A> właściwość `arguments` parametr przekazany do narzędzia obsługi zdarzeń dla <xref:System.Web.UI.WebControls.CustomValidator.ServerValidate> zdarzeń i walidacji po stronie klienta funkcja zawsze zawiera pusty ciąg (""). Jednak te funkcje sprawdzania poprawności nadal noszą nazwę, gdzie jest to odpowiednie określić ważność na serwer i klienta. Do uzyskania dostępu do wartości, aby zweryfikować, możesz programowo odwoływać kontrolki wprowadzania, który chcesz zweryfikować, a następnie pobrać wartość z odpowiednich właściwości. Na przykład w celu zweryfikowania <xref:System.Web.UI.WebControls.CheckBox> sterowania na serwerze, nie należy ustawiać <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> właściwość formant sprawdzania poprawności i użyj następujący kod do programu obsługi <xref:System.Web.UI.WebControls.CustomValidator.ServerValidate> zdarzeń.  
  
```vb  
Sub ServerValidation (source As object, args As ServerValidateEventArgs)  
    args.IsValid = (CheckBox1.Checked = True)  
 End Sub  
```  
  
```csharp  
void ServerValidation (object source, ServerValidateEventArgs args)  
 {  
    args.IsValid = (CheckBox1.Checked == true);  
 }  
```  
  
 Aby uzyskać więcej informacji na temat sprawdzania poprawności formantów, zobacz <xref:System.Web.UI.WebControls.BaseValidator>.  
  
## <a name="accessibility"></a>Ułatwienia dostępu  
 Aby uzyskać informacje o sposobie konfigurowania tej kontrolki, tak aby generuje kod znaczników, który jest zgodny ze standardami ułatwień dostępu, zobacz [ułatwień dostępu w programie Visual Studio i platformy ASP.NET](https://msdn.microsoft.com/library/7e3ce9c4-6b7d-4fb1-94b5-72cf2a44fe13) i [kontrolki ASP.NET orazułatwieńdostępu](https://msdn.microsoft.com/library/847a37e3-ce20-41da-b0d3-7dfb0fdae9a0).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak utworzyć po stronie serwera <xref:System.Web.UI.WebControls.CustomValidator> kontroli.  
  
> [!IMPORTANT]
>  W tym przykładzie ma pola tekstowego, który akceptuje dane wejściowe użytkownika, który jest potencjalnym zagrożeniem dla bezpieczeństwa. Domyślnie strony sieci Web ASP.NET zweryfikować, że dane wejściowe użytkownika nie obejmuje skrypt lub elementów HTML. Aby uzyskać więcej informacji, zobacz [Przegląd wykorzystuje skryptu](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[CustomValidatorServerValidate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomValidatorServerValidate/CS/customvalidatorservervalidatecs.aspx#1)]
 [!code-aspx-vb[CustomValidatorServerValidate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomValidatorServerValidate/VB/customvalidatorservervalidatevb.aspx#1)]  
  
 Poniższy przykład kodu pokazuje, jak utworzyć po stronie klienta <xref:System.Web.UI.WebControls.CustomValidator> kontroli.  
  
 [!code-aspx-csharp[CustomValidatorClient#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomValidatorClient/CS/customvalidatorclientcs.aspx#1)]
 [!code-aspx-vb[CustomValidatorClient#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomValidatorClient/VB/customvalidatorclientvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.BaseValidator" />
    <altmember cref="T:System.Web.UI.WebControls.RequiredFieldValidator" />
    <altmember cref="P:System.Web.UI.WebControls.CustomValidator.ClientValidationFunction" />
    <altmember cref="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" />
    <altmember cref="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" />
    <altmember cref="T:System.Web.UI.WebControls.ServerValidateEventArgs" />
    <altmember cref="P:System.Web.UI.WebControls.ServerValidateEventArgs.Value" />
    <altmember cref="P:System.Web.UI.WebControls.ServerValidateEventArgs.IsValid" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CustomValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CustomValidator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CustomValidator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.WebControls.CustomValidator" /> klasy.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.WebControls.BaseValidator" />
        <altmember cref="T:System.Web.UI.WebControls.RequiredFieldValidator" />
        <altmember cref="P:System.Web.UI.WebControls.CustomValidator.ClientValidationFunction" />
        <altmember cref="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" />
        <altmember cref="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" />
        <altmember cref="T:System.Web.UI.WebControls.ServerValidateEventArgs" />
        <altmember cref="P:System.Web.UI.WebControls.ServerValidateEventArgs.Value" />
        <altmember cref="P:System.Web.UI.WebControls.ServerValidateEventArgs.IsValid" />
      </Docs>
    </Member>
    <Member MemberName="AddAttributesToRender">
      <MemberSignature Language="C#" Value="protected override void AddAttributesToRender (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddAttributesToRender(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CustomValidator.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub AddAttributesToRender (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void AddAttributesToRender(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.AddAttributesToRender : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="customValidator.AddAttributesToRender writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Element <see cref="T:System.Web.UI.HtmlTextWriter" /> zawierający dane ze strumienia wyjściowego do renderowania na komputerze klienckim.</param>
        <summary>Dodaje właściwości <see cref="T:System.Web.UI.WebControls.CustomValidator" /> formantu do strumienia wyjściowego do renderowania na komputerze klienckim.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje sposób zastąpienia <xref:System.Web.UI.WebControls.CustomValidator.AddAttributesToRender%2A> metody w niestandardowy formant serwera, aby <xref:System.Web.UI.WebControls.CustomValidator> zawsze wyświetlany komunikat o błędzie pogrubioną czcionką.  
  
> [!IMPORTANT]
>  W tym przykładzie ma pola tekstowego, który akceptuje dane wejściowe użytkownika, który jest potencjalnym zagrożeniem dla bezpieczeństwa. Domyślnie strony sieci Web ASP.NET zweryfikować, że dane wejściowe użytkownika nie obejmuje skrypt lub elementów HTML. Aby uzyskać więcej informacji, zobacz [Przegląd wykorzystuje skryptu](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[CustomCustomValidatorAddAttributesToRender#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorAddAttributesToRender/CS/custom_customvalidator_addattributestorendercs.aspx#1)]
 [!code-aspx-vb[CustomCustomValidatorAddAttributesToRender#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorAddAttributesToRender/VB/custom_customvalidator_addattributestorendervb.aspx#1)]  
[!code-csharp[CustomCustomValidatorAddAttributesToRender#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorAddAttributesToRender/CS/custom_customvalidator_addattributestorender.cs#2)]
[!code-vb[CustomCustomValidatorAddAttributesToRender#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorAddAttributesToRender/VB/custom_customvalidator_addattributestorender.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientValidationFunction">
      <MemberSignature Language="C#" Value="public string ClientValidationFunction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ClientValidationFunction" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.CustomValidator.ClientValidationFunction" />
      <MemberSignature Language="VB.NET" Value="Public Property ClientValidationFunction As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ClientValidationFunction { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ClientValidationFunction : string with get, set" Usage="System.Web.UI.WebControls.CustomValidator.ClientValidationFunction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę funkcji niestandardowego skryptu po stronie klienta używane do weryfikacji.</summary>
        <value>Nazwa funkcji skryptu niestandardowego klienta, które są używane do weryfikacji. Wartość domyślna to <see cref="F:System.String.Empty" />, co oznacza, że ta właściwość nie jest ustawiony.  
  
 <block subset="none" type="note"><para>  
 Nazwa funkcji nie może zawierać żadnych nawiasów zwykłych lub parametrów.  
  
</para></block></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ustaw tę właściwość na nazwę funkcji, która przeprowadza weryfikację po stronie klienta.  
  
 Funkcja sprawdzania poprawności klienta jest uruchamiana w przeglądarce docelowego, funkcji muszą być napisane przy użyciu skryptów języka, obsługiwane przez przeglądarki, takich jak JScript lub skrypt VBScript.  
  
 Nie można ustawić tę właściwość, motywy lub motywy arkusza stylów. Aby uzyskać więcej informacji, zobacz <xref:System.Web.UI.ThemeableAttribute> i [motywów programu ASP.NET i skórek](https://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Web.UI.WebControls.CustomValidator.ClientValidationFunction%2A> właściwości w celu określenia nazwy funkcji, która przeprowadza weryfikację po stronie klienta. Funkcja weryfikacji sprawdza, czy liczby parzyste z zakresu. Aby uzyskać opis parametrów funkcji, zobacz sekcję Uwagi <xref:System.Web.UI.WebControls.CustomValidator>.  
  
> [!IMPORTANT]
>  W tym przykładzie ma pola tekstowego, który akceptuje dane wejściowe użytkownika, który jest potencjalnym zagrożeniem dla bezpieczeństwa. Domyślnie strony sieci Web ASP.NET zweryfikować, że dane wejściowe użytkownika nie obejmuje skrypt lub elementów HTML. Aby uzyskać więcej informacji, zobacz [Przegląd wykorzystuje skryptu](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[CustomValidatorClient#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomValidatorClient/CS/customvalidatorclientcs.aspx#1)]
 [!code-aspx-vb[CustomValidatorClient#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomValidatorClient/VB/customvalidatorclientvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.String.Empty" />
      </Docs>
    </Member>
    <Member MemberName="ControlPropertiesValid">
      <MemberSignature Language="C#" Value="protected override bool ControlPropertiesValid ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ControlPropertiesValid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CustomValidator.ControlPropertiesValid" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ControlPropertiesValid () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool ControlPropertiesValid();" />
      <MemberSignature Language="F#" Value="override this.ControlPropertiesValid : unit -&gt; bool" Usage="customValidator.ControlPropertiesValid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sprawdza, czy właściwości formantu prawidłowych wartości.</summary>
        <returns>
          <see langword="true" /> Jeśli właściwości kontrolki są ważne. w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje sposób zastąpienia <xref:System.Web.UI.WebControls.CustomValidator.ControlPropertiesValid%2A> metody w niestandardowego serwera kontrolować tak, aby zawsze zwraca wartość właściwości visible tak długo, jak <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> właściwość <xref:System.Web.UI.WebControls.CustomValidator> formant znajduje się na stronie i zawiera właściwości sprawdzania poprawności.  
  
 [!code-aspx-csharp[CustomCustomValidatorControlPropertiesValid#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorControlPropertiesValid/CS/custom_customvalidator_controlpropertiesvalidcs.aspx#1)]
 [!code-aspx-vb[CustomCustomValidatorControlPropertiesValid#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorControlPropertiesValid/VB/custom_customvalidator_controlpropertiesvalidvb.aspx#1)]  
[!code-csharp[CustomCustomValidatorControlPropertiesValid#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorControlPropertiesValid/CS/custom_customvalidator_controlpropertiesvalid.cs#2)]
[!code-vb[CustomCustomValidatorControlPropertiesValid#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorControlPropertiesValid/VB/custom_customvalidator_controlpropertiesvalid.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EvaluateIsValid">
      <MemberSignature Language="C#" Value="protected override bool EvaluateIsValid ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool EvaluateIsValid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CustomValidator.EvaluateIsValid" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function EvaluateIsValid () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool EvaluateIsValid();" />
      <MemberSignature Language="F#" Value="override this.EvaluateIsValid : unit -&gt; bool" Usage="customValidator.EvaluateIsValid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zastępuje <see cref="M:System.Web.UI.MobileControls.BaseValidator.EvaluateIsValid" /> metody.</summary>
        <returns>
          <see langword="true" /> Jeśli wartości wejściowe formantu jest prawidłowy; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje sposób zastąpienia <xref:System.Web.UI.WebControls.CustomValidator.EvaluateIsValid%2A> metody w niestandardowy formant serwera.  
  
> [!IMPORTANT]
>  W tym przykładzie ma pola tekstowego, który akceptuje dane wejściowe użytkownika, który jest potencjalnym zagrożeniem dla bezpieczeństwa. Domyślnie strony sieci Web ASP.NET zweryfikować, że dane wejściowe użytkownika nie obejmuje skrypt lub elementów HTML. Aby uzyskać więcej informacji, zobacz [Przegląd wykorzystuje skryptu](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[CustomCustomValidatorEvaluateIsValid#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorEvaluateIsValid/CS/custom_customvalidator_evaluateisvalidcs.aspx#1)]
 [!code-aspx-vb[CustomCustomValidatorEvaluateIsValid#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorEvaluateIsValid/VB/custom_customvalidator_evaluateisvalidvb.aspx#1)]  
[!code-csharp[CustomCustomValidatorEvaluateIsValid#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorEvaluateIsValid/CS/custom_customvalidator_evaluateisvalid.cs#2)]
[!code-vb[CustomCustomValidatorEvaluateIsValid#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorEvaluateIsValid/VB/custom_customvalidator_evaluateisvalid.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnServerValidate">
      <MemberSignature Language="C#" Value="protected virtual bool OnServerValidate (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnServerValidate(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnServerValidate (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnServerValidate(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnServerValidate : string -&gt; bool&#xA;override this.OnServerValidate : string -&gt; bool" Usage="customValidator.OnServerValidate value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Wartość do zweryfikowania.</param>
        <summary>Wywołuje <see cref="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" /> zdarzenie <see cref="T:System.Web.UI.WebControls.CustomValidator" /> kontroli.</summary>
        <returns>
          <see langword="true" /> Jeśli wartość jest określona przez <paramref name="value" /> parametru pozytywnie przejdą weryfikację; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.CustomValidator.ServerValidate> Zdarzenie jest wywoływane, gdy sprawdzanie poprawności jest wykonywane na serwerze.  
  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Handling and Raising Events](~/docs/standard/events/index.md).  
  
 <xref:System.Web.UI.WebControls.CustomValidator.OnServerValidate%2A> Metoda umożliwia również klasy pochodne obsłużyć zdarzenie bez dołączając delegata. Jest to preferowana metoda obsługi zdarzeń w klasie pochodnej.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak określić i kodu Obsługa po stronie serwera <xref:System.Web.UI.WebControls.CustomValidator> kontroli.  
  
> [!IMPORTANT]
>  W tym przykładzie ma pola tekstowego, który akceptuje dane wejściowe użytkownika, który jest potencjalnym zagrożeniem dla bezpieczeństwa. Domyślnie strony sieci Web ASP.NET zweryfikować, że dane wejściowe użytkownika nie obejmuje skrypt lub elementów HTML. Aby uzyskać więcej informacji, zobacz [Przegląd wykorzystuje skryptu](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[CustomValidatorServerValidate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomValidatorServerValidate/CS/customvalidatorservervalidatecs.aspx#1)]
 [!code-aspx-vb[CustomValidatorServerValidate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomValidatorServerValidate/VB/customvalidatorservervalidatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Podczas zastępowania <see cref="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" /> w klasie pochodnej, pamiętaj wywołać klasy bazowej <see cref="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" /> metody, która zarejestrowana delegaci otrzymają zdarzenie.</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" />
      </Docs>
    </Member>
    <Member MemberName="ServerValidate">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ServerValidateEventHandler ServerValidate;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ServerValidateEventHandler ServerValidate" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ServerValidate As ServerValidateEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ServerValidateEventHandler ^ ServerValidate;" />
      <MemberSignature Language="F#" Value="member this.ServerValidate : System.Web.UI.WebControls.ServerValidateEventHandler " Usage="member this.ServerValidate : System.Web.UI.WebControls.ServerValidateEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ServerValidateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy sprawdzanie poprawności jest wykonywane na serwerze.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.CustomValidator.ServerValidate> Zdarzenie jest wywoływane, gdy sprawdzanie poprawności jest wykonywane na serwerze. To zdarzenie służy do zapewnienia procedury niestandardowego sprawdzania poprawności kontrolkę wejściową, takich jak <xref:System.Web.UI.WebControls.TextBox> kontroli.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Handling and Raising Events](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak określić i kodu Obsługa po stronie serwera <xref:System.Web.UI.WebControls.CustomValidator> kontroli. Tworzy procedurę niestandardowego sprawdzania poprawności, sprawdza poprawność wartości <xref:System.Web.UI.WebControls.TextBox> kontrola liczbą parzystą, a następnie wyświetla wynik weryfikacji.  
  
> [!IMPORTANT]
>  W tym przykładzie ma pola tekstowego, który akceptuje dane wejściowe użytkownika, który jest potencjalnym zagrożeniem dla bezpieczeństwa. Domyślnie strony sieci Web ASP.NET zweryfikować, że dane wejściowe użytkownika nie obejmuje skrypt lub elementów HTML. Aby uzyskać więcej informacji, zobacz [Przegląd wykorzystuje skryptu](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[CustomValidatorServerValidate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomValidatorServerValidate/CS/customvalidatorservervalidatecs.aspx#1)]
 [!code-aspx-vb[CustomValidatorServerValidate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomValidatorServerValidate/VB/customvalidatorservervalidatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" />
        <altmember cref="T:System.Web.UI.WebControls.ServerValidateEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="ValidateEmptyText">
      <MemberSignature Language="C#" Value="public bool ValidateEmptyText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidateEmptyText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.CustomValidator.ValidateEmptyText" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidateEmptyText As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ValidateEmptyText { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ValidateEmptyText : bool with get, set" Usage="System.Web.UI.WebControls.CustomValidator.ValidateEmptyText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość logiczną wskazującą, czy powinny być weryfikowane pusty tekst.</summary>
        <value>
          <see langword="true" /> Jeśli pusty tekst powinien być weryfikowany pod; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każdy moduł sprawdzania poprawności może być skojarzony z formantem docelowych. W poprzednich wersjach programu .NET Framework, jeśli kontrolka docelowa ma wartość pustego ciągu, takich jak <xref:System.Web.UI.WebControls.TextBox.Text%2A> właściwości zawierającej wartość <xref:System.String.Empty?displayProperty=nameWithType>, moduł weryfikacji (z wyjątkiem <xref:System.Web.UI.WebControls.RequiredFieldValidator> modułu sprawdzania poprawności) nie może ocenić docelowych kontroli i po prostu zwróci że weryfikacji zostały zakończone pomyślnie.  
  
 <xref:System.Web.UI.WebControls.CustomValidator.ValidateEmptyText%2A> Właściwość jest nowa w .NET Framework w wersji 2.0.  Jeśli <xref:System.Web.UI.WebControls.CustomValidator.ValidateEmptyText%2A> jest ustawiona na `true`, modułu sprawdzania poprawności oblicza wartości formantu (przy użyciu kryteriów, aby określić <xref:System.Web.UI.WebControls.CustomValidator> kontrolki) i zwraca wyniki sprawdzania poprawności. Ta właściwość umożliwia deweloperom oceniać wyniki <xref:System.Web.UI.WebControls.CustomValidator> kontroli niezależnie od wartości docelowych kontroli.  
  
 Nie można ustawić tę właściwość, motywy lub motywy arkusza stylów. Aby uzyskać więcej informacji, zobacz <xref:System.Web.UI.ThemeableAttribute> i [motywów programu ASP.NET i skórek](https://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.BaseValidator" />
        <altmember cref="T:System.Web.UI.WebControls.RequiredFieldValidator" />
      </Docs>
    </Member>
  </Members>
</Type>