<Type Name="CustomValidator" FullName="System.Web.UI.WebControls.CustomValidator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3e3019cacd3e8fbc2a88c59d90da8398cd3a5b23" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69401580" /></Metadata><TypeSignature Language="C#" Value="public class CustomValidator : System.Web.UI.WebControls.BaseValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CustomValidator extends System.Web.UI.WebControls.BaseValidator" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.CustomValidator" />
  <TypeSignature Language="VB.NET" Value="Public Class CustomValidator&#xA;Inherits BaseValidator" />
  <TypeSignature Language="C++ CLI" Value="public ref class CustomValidator : System::Web::UI::WebControls::BaseValidator" />
  <TypeSignature Language="F#" Value="type CustomValidator = class&#xA;    inherit BaseValidator" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.BaseValidator</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("ServerValidate")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Web.UI.ToolboxData("&lt;{0}:CustomValidator runat="server" ErrorMessage="CustomValidator"&gt;&lt;/{0}:CustomValidator&gt;")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.Web.UI.ToolboxData("&lt;{0}:CustomValidator runat=server ErrorMessage="CustomValidator"&gt;&lt;/{0}:CustomValidator&gt;")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Wykonuje weryfikację zdefiniowaną przez użytkownika w formancie wejściowym.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj kontrolki, <xref:System.Web.UI.WebControls.CustomValidator> aby dostarczyć zdefiniowanej przez użytkownika funkcję walidacji dla kontrolki wejściowej. <xref:System.Web.UI.WebControls.CustomValidator> Kontrolka jest oddzielnym formantem od kontrolki wejściowej, która sprawdza poprawność, co umożliwia kontrolowanie miejsca wyświetlania komunikatu weryfikacyjnego.  
  
 Kontrolki walidacji zawsze sprawdzają poprawność na serwerze. Mają także kompletną implementację po stronie klienta, która umożliwia przeglądarkom z obsługą skryptów (np. program Microsoft Internet Explorer 4,0 i nowsze) sprawdzanie poprawności na kliencie. Weryfikacja po stronie klienta usprawnia proces weryfikacji, sprawdzając dane wejściowe użytkownika przed wysłaniem ich do serwera. Pozwala to na wykrycie błędów na kliencie przed przesłaniem formularza, dzięki czemu unikanie błądzenia informacji niezbędnych do weryfikacji po stronie serwera.  
  
 Aby utworzyć funkcję walidacji po stronie serwera, podaj procedurę obsługi dla <xref:System.Web.UI.WebControls.CustomValidator.ServerValidate> zdarzenia, które przeprowadza walidację. Można uzyskać dostęp do ciągu z kontrolki wejściowej do walidacji przy <xref:System.Web.UI.WebControls.ServerValidateEventArgs.Value%2A> użyciu właściwości <xref:System.Web.UI.WebControls.ServerValidateEventArgs> obiektu przekazaną do procedury obsługi zdarzeń jako parametru. Wynik weryfikacji jest następnie przechowywany we <xref:System.Web.UI.WebControls.ServerValidateEventArgs.IsValid%2A> właściwości <xref:System.Web.UI.WebControls.ServerValidateEventArgs> obiektu.  
  
 Aby utworzyć funkcję walidacji po stronie klienta, należy najpierw dodać opisaną wcześniej funkcję walidacji po stronie serwera. Następnie Dodaj funkcję skrypt weryfikacji po stronie klienta do strony ASP.NET (. aspx).  
  
 Jeśli używasz Visual Basic Scripting Edition (VBScript), funkcja musi mieć następującą formę:  
  
```  
Sub ValidationFunctionName(source, arguments)  
```  
  
 Jeśli używasz języka JScript, funkcja musi mieć następującą formę:  
  
```  
function ValidationFunctionName(source, arguments)  
```  
  
 Parametr jest odwołaniem \<do elementu span <xref:System.Web.UI.WebControls.CustomValidator> > renderowanego dla kontrolki. `source` Dzięki temu można programowo kontrolować \<tag span >, na przykład <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> modyfikując atrybut. `arguments` Parametr jest obiektem z dwiema właściwościami: Wartość i IsValid. Ten parametr pozwala uzyskać wartość kontrolki do sprawdzenia i wskazać, czy wartość jest prawidłowa na podstawie niestandardowej procedury walidacji.  
  
 Użyj właściwości, aby określić nazwę funkcji skryptu walidacji po stronie klienta skojarzonej <xref:System.Web.UI.WebControls.CustomValidator> z kontrolką. <xref:System.Web.UI.WebControls.CustomValidator.ClientValidationFunction%2A> Ponieważ funkcja skryptu jest wykonywana na kliencie, funkcja musi znajdować się w języku obsługiwanym przez przeglądarkę docelową, na przykład VBScript lub JScript.  
  
> [!NOTE]
>  Gdy używasz <xref:System.Web.UI.WebControls.CustomValidator> kontrolki <xref:System.Web.UI.UpdatePanel> wewnątrz kontrolki, upewnij się, że kontrolka walidacji i kontrolka, z którą jest skojarzona, znajdują się na tym samym panelu. Aby uzyskać więcej informacji o używaniu <xref:System.Web.UI.UpdatePanel> kontrolki do aktualizacji częściowej strony, zobacz [częściowe Omówienie renderowania strony](https://msdn.microsoft.com/library/5c12736d-d9e9-464a-9388-3fe0f9f49e49).  
  
 Podobnie jak w przypadku walidacji po stronie serwera, do walidacji jest uzyskiwany ciąg z kontrolki wejściowej `arguments` do zweryfikowania przy użyciu <xref:System.Web.UI.WebControls.ServerValidateEventArgs.Value%2A> właściwości parametru. Zwróć wynik walidacji, ustawiając <xref:System.Web.UI.WebControls.ServerValidateEventArgs.IsValid%2A> Właściwość `arguments` parametru.  
  
> [!CAUTION]
>  W przypadku korzystania z formantów walidatora zawsze należy sprawdzać wyniki weryfikacji po stronie serwera przed wykonaniem jakiegokolwiek przetwarzania. Po zakończeniu ogłaszania zwrotnego, ale przed wywołaniem metod zdarzenia, Strona wywołuje kontrolki walidacji i agreguje ich <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> wyniki do właściwości. (Można również wywołać kontrolki walidacji jawnie za pomocą `Validate` metody). W swoim własnym kodzie należy sprawdzić, czy <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> Właściwość zwraca `true` przed przetwarzaniem danych wejściowych. Mimo że przeglądarki z obsługą skryptów mogą uniemożliwić ogłaszanie zwrotne na kliencie, jeśli sprawdzanie poprawności zakończy się niepowodzeniem, należy również <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> zaewidencjonować kod serwera przed przetworzeniem zweryfikowanych danych.  
  
 Aby sprawdzić inne kryteria, można użyć wielu kontrolek sprawdzania poprawności. Na przykład można zastosować wiele kontrolek weryfikacji dla <xref:System.Web.UI.WebControls.TextBox> kontrolki, która umożliwia użytkownikowi wprowadzanie liczby elementów, które mają zostać dodane do koszyka. Możesz użyć <xref:System.Web.UI.WebControls.CustomValidator> kontrolki, aby upewnić się, że określona wartość jest mniejsza niż ilość w spisie <xref:System.Web.UI.WebControls.RequiredFieldValidator> i formant, aby upewnić się, że użytkownik <xref:System.Web.UI.WebControls.TextBox> wprowadzi wartość do kontrolki.  
  
> [!NOTE]
>  Jeśli kontrolka wejściowa jest pusta, żadne funkcje sprawdzania poprawności nie są wywoływane i walidacja kończy się powodzeniem. <xref:System.Web.UI.WebControls.RequiredFieldValidator> Użyj kontrolki, aby wymagać od użytkownika wprowadzania danych w kontrolce wejściowej.  
  
 Możliwe jest użycie <xref:System.Web.UI.WebControls.CustomValidator> kontrolki bez <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> ustawiania właściwości. Jest to często wykonywane podczas sprawdzania poprawności wielu kontrolek wejściowych lub walidacji kontrolek wejściowych, których nie można użyć z kontrolkami walidacji, takimi jak <xref:System.Web.UI.WebControls.CheckBox> kontrolka. W takim przypadku <xref:System.Web.UI.WebControls.ServerValidateEventArgs.Value%2A> Właściwość `arguments` parametru przekazana do procedury obsługi zdarzeń dla <xref:System.Web.UI.WebControls.CustomValidator.ServerValidate> zdarzenia i funkcji walidacji po stronie klienta zawsze zawiera pusty ciąg (""). Jednak te funkcje sprawdzania poprawności są nadal wywoływane, tam gdzie jest to konieczne, aby określić prawidłowość zarówno serwera, jak i klienta. Aby uzyskać dostęp do wartości w celu sprawdzenia poprawności, należy programowo odwoływać się do kontrolki wejściowej, która ma zostać zweryfikowana, a następnie pobrać wartość z odpowiedniej właściwości. Na przykład, aby sprawdzić poprawność <xref:System.Web.UI.WebControls.CheckBox> formantu na serwerze, nie <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> ustawiaj właściwości kontrolki walidacji i użyj następującego kodu <xref:System.Web.UI.WebControls.CustomValidator.ServerValidate> dla programu obsługi zdarzenia.  
  
```vb  
Sub ServerValidation (source As object, args As ServerValidateEventArgs)  
    args.IsValid = (CheckBox1.Checked = True)  
 End Sub  
```  
  
```csharp  
void ServerValidation (object source, ServerValidateEventArgs args)  
 {  
    args.IsValid = (CheckBox1.Checked == true);  
 }  
```  
  
 Aby uzyskać więcej informacji na temat kontrolek <xref:System.Web.UI.WebControls.BaseValidator>walidacji, zobacz.  
  
## <a name="accessibility"></a>Ułatwienia dostępu  
 Aby uzyskać informacje o sposobie konfigurowania tego formantu tak, aby generował znaczniki, które są zgodne ze standardami dostępności, zobacz [ułatwienia dostępu w programie Visual Studio oraz formanty ASP.NET](https://msdn.microsoft.com/library/7e3ce9c4-6b7d-4fb1-94b5-72cf2a44fe13) i [ASP.NET i ułatwienia dostępu](https://msdn.microsoft.com/library/847a37e3-ce20-41da-b0d3-7dfb0fdae9a0).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak utworzyć formant po stronie <xref:System.Web.UI.WebControls.CustomValidator> serwera.  
  
> [!IMPORTANT]
>  Ten przykład zawiera pole tekstowe akceptujące dane wejściowe użytkownika, które jest potencjalnym zagrożeniem bezpieczeństwa. Domyślnie strony sieci Web ASP.NET sprawdzają, czy dane wejściowe użytkownika nie obejmują elementów skryptu ani HTML. Aby uzyskać więcej informacji, zobacz [Omówienie luk](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)w zabezpieczeniach.  
  
 [!code-aspx-csharp[CustomValidatorServerValidate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomValidatorServerValidate/CS/customvalidatorservervalidatecs.aspx#1)]
 [!code-aspx-vb[CustomValidatorServerValidate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomValidatorServerValidate/VB/customvalidatorservervalidatevb.aspx#1)]  
  
 Poniższy przykład kodu demonstruje sposób tworzenia kontrolki po stronie <xref:System.Web.UI.WebControls.CustomValidator> klienta.  
  
 [!code-aspx-csharp[CustomValidatorClient#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomValidatorClient/CS/customvalidatorclientcs.aspx#1)]
 [!code-aspx-vb[CustomValidatorClient#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomValidatorClient/VB/customvalidatorclientvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.BaseValidator" />
    <altmember cref="T:System.Web.UI.WebControls.RequiredFieldValidator" />
    <altmember cref="P:System.Web.UI.WebControls.CustomValidator.ClientValidationFunction" />
    <altmember cref="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" />
    <altmember cref="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" />
    <altmember cref="T:System.Web.UI.WebControls.ServerValidateEventArgs" />
    <altmember cref="P:System.Web.UI.WebControls.ServerValidateEventArgs.Value" />
    <altmember cref="P:System.Web.UI.WebControls.ServerValidateEventArgs.IsValid" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CustomValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CustomValidator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CustomValidator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.WebControls.CustomValidator" /> klasy.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.WebControls.BaseValidator" />
        <altmember cref="T:System.Web.UI.WebControls.RequiredFieldValidator" />
        <altmember cref="P:System.Web.UI.WebControls.CustomValidator.ClientValidationFunction" />
        <altmember cref="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" />
        <altmember cref="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" />
        <altmember cref="T:System.Web.UI.WebControls.ServerValidateEventArgs" />
        <altmember cref="P:System.Web.UI.WebControls.ServerValidateEventArgs.Value" />
        <altmember cref="P:System.Web.UI.WebControls.ServerValidateEventArgs.IsValid" />
      </Docs>
    </Member>
    <Member MemberName="AddAttributesToRender">
      <MemberSignature Language="C#" Value="protected override void AddAttributesToRender (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddAttributesToRender(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CustomValidator.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub AddAttributesToRender (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void AddAttributesToRender(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.AddAttributesToRender : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="customValidator.AddAttributesToRender writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter" /> , który zawiera strumień wyjściowy do renderowania na kliencie.</param>
        <summary>Dodaje właściwości <see cref="T:System.Web.UI.WebControls.CustomValidator" /> kontrolki do strumienia wyjściowego w celu renderowania na kliencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje, <xref:System.Web.UI.WebControls.CustomValidator.AddAttributesToRender%2A> jak zastąpić metodę w niestandardowym formancie serwera, aby <xref:System.Web.UI.WebControls.CustomValidator> komunikat o błędzie był zawsze wyświetlany pogrubioną czcionką.  
  
> [!IMPORTANT]
>  Ten przykład zawiera pole tekstowe akceptujące dane wejściowe użytkownika, które jest potencjalnym zagrożeniem bezpieczeństwa. Domyślnie strony sieci Web ASP.NET sprawdzają, czy dane wejściowe użytkownika nie obejmują elementów skryptu ani HTML. Aby uzyskać więcej informacji, zobacz [Omówienie luk](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)w zabezpieczeniach.  
  
 [!code-aspx-csharp[CustomCustomValidatorAddAttributesToRender#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorAddAttributesToRender/CS/custom_customvalidator_addattributestorendercs.aspx#1)]
 [!code-aspx-vb[CustomCustomValidatorAddAttributesToRender#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorAddAttributesToRender/VB/custom_customvalidator_addattributestorendervb.aspx#1)]  
[!code-csharp[CustomCustomValidatorAddAttributesToRender#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorAddAttributesToRender/CS/custom_customvalidator_addattributestorender.cs#2)]
[!code-vb[CustomCustomValidatorAddAttributesToRender#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorAddAttributesToRender/VB/custom_customvalidator_addattributestorender.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientValidationFunction">
      <MemberSignature Language="C#" Value="public string ClientValidationFunction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ClientValidationFunction" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.CustomValidator.ClientValidationFunction" />
      <MemberSignature Language="VB.NET" Value="Public Property ClientValidationFunction As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ClientValidationFunction { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ClientValidationFunction : string with get, set" Usage="System.Web.UI.WebControls.CustomValidator.ClientValidationFunction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę niestandardowej funkcji skryptu po stronie klienta używanej na potrzeby walidacji.</summary>
        <value>Nazwa niestandardowej funkcji skryptu klienta używanej do walidacji. Wartość domyślna to <see cref="F:System.String.Empty" />, co oznacza, że ta właściwość nie jest ustawiona.  
  
 <block subset="none" type="note"><para>  
 Nazwa funkcji nie powinna zawierać żadnych nawiasów ani parametrów.  
  
</para></block></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ustaw tę właściwość na nazwę funkcji, która wykonuje walidację po stronie klienta.  
  
 Ponieważ funkcja walidacji klienta jest uruchamiana w przeglądarce docelowej, funkcja musi być zapisywana przy użyciu języka skryptów obsługiwanego przez przeglądarkę, takiego jak JScript lub VBScript.  
  
 Tej właściwości nie można ustawić za pomocą motywów lub motywów arkuszy stylów. Aby uzyskać więcej informacji, <xref:System.Web.UI.ThemeableAttribute> Zobacz temat i [ASP.NET motywy i karnacje](https://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, <xref:System.Web.UI.WebControls.CustomValidator.ClientValidationFunction%2A> jak użyć właściwości, aby określić nazwę funkcji, która wykonuje walidację po stronie klienta. Funkcja walidacji sprawdza liczby parzyste. Opis parametrów funkcji znajduje się w sekcji <xref:System.Web.UI.WebControls.CustomValidator>uwagi w temacie.  
  
> [!IMPORTANT]
>  Ten przykład zawiera pole tekstowe akceptujące dane wejściowe użytkownika, które jest potencjalnym zagrożeniem bezpieczeństwa. Domyślnie strony sieci Web ASP.NET sprawdzają, czy dane wejściowe użytkownika nie obejmują elementów skryptu ani HTML. Aby uzyskać więcej informacji, zobacz [Omówienie luk](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)w zabezpieczeniach.  
  
 [!code-aspx-csharp[CustomValidatorClient#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomValidatorClient/CS/customvalidatorclientcs.aspx#1)]
 [!code-aspx-vb[CustomValidatorClient#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomValidatorClient/VB/customvalidatorclientvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.String.Empty" />
      </Docs>
    </Member>
    <Member MemberName="ControlPropertiesValid">
      <MemberSignature Language="C#" Value="protected override bool ControlPropertiesValid ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ControlPropertiesValid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CustomValidator.ControlPropertiesValid" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ControlPropertiesValid () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool ControlPropertiesValid();" />
      <MemberSignature Language="F#" Value="override this.ControlPropertiesValid : unit -&gt; bool" Usage="customValidator.ControlPropertiesValid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sprawdza właściwości kontrolki pod kątem prawidłowych wartości.</summary>
        <returns><see langword="true" />Jeśli właściwości kontrolki są prawidłowe; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.UI.WebControls.CustomValidator.ControlPropertiesValid%2A> jak zastąpić metodę w niestandardowym formancie serwera, aby zawsze zwracała wartość właściwości Visible, o <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> ile Właściwość <xref:System.Web.UI.WebControls.CustomValidator> kontrolki znajduje się na stronie i zawiera Właściwości walidacji.  
  
 [!code-aspx-csharp[CustomCustomValidatorControlPropertiesValid#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorControlPropertiesValid/CS/custom_customvalidator_controlpropertiesvalidcs.aspx#1)]
 [!code-aspx-vb[CustomCustomValidatorControlPropertiesValid#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorControlPropertiesValid/VB/custom_customvalidator_controlpropertiesvalidvb.aspx#1)]  
[!code-csharp[CustomCustomValidatorControlPropertiesValid#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorControlPropertiesValid/CS/custom_customvalidator_controlpropertiesvalid.cs#2)]
[!code-vb[CustomCustomValidatorControlPropertiesValid#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorControlPropertiesValid/VB/custom_customvalidator_controlpropertiesvalid.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EvaluateIsValid">
      <MemberSignature Language="C#" Value="protected override bool EvaluateIsValid ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool EvaluateIsValid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CustomValidator.EvaluateIsValid" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function EvaluateIsValid () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool EvaluateIsValid();" />
      <MemberSignature Language="F#" Value="override this.EvaluateIsValid : unit -&gt; bool" Usage="customValidator.EvaluateIsValid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="M:System.Web.UI.MobileControls.BaseValidator.EvaluateIsValid" /> Zastępuje metodę.</summary>
        <returns><see langword="true" />Jeśli wartość w kontrolce wejściowej jest prawidłowa; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje, <xref:System.Web.UI.WebControls.CustomValidator.EvaluateIsValid%2A> jak zastąpić metodę w niestandardowej kontrolce serwera.  
  
> [!IMPORTANT]
>  Ten przykład zawiera pole tekstowe akceptujące dane wejściowe użytkownika, które jest potencjalnym zagrożeniem bezpieczeństwa. Domyślnie strony sieci Web ASP.NET sprawdzają, czy dane wejściowe użytkownika nie obejmują elementów skryptu ani HTML. Aby uzyskać więcej informacji, zobacz [Omówienie luk](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)w zabezpieczeniach.  
  
 [!code-aspx-csharp[CustomCustomValidatorEvaluateIsValid#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorEvaluateIsValid/CS/custom_customvalidator_evaluateisvalidcs.aspx#1)]
 [!code-aspx-vb[CustomCustomValidatorEvaluateIsValid#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorEvaluateIsValid/VB/custom_customvalidator_evaluateisvalidvb.aspx#1)]  
[!code-csharp[CustomCustomValidatorEvaluateIsValid#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorEvaluateIsValid/CS/custom_customvalidator_evaluateisvalid.cs#2)]
[!code-vb[CustomCustomValidatorEvaluateIsValid#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorEvaluateIsValid/VB/custom_customvalidator_evaluateisvalid.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnServerValidate">
      <MemberSignature Language="C#" Value="protected virtual bool OnServerValidate (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnServerValidate(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnServerValidate (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnServerValidate(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnServerValidate : string -&gt; bool&#xA;override this.OnServerValidate : string -&gt; bool" Usage="customValidator.OnServerValidate value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Wartość do zweryfikowania.</param>
        <summary><see cref="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" /> Podnosi zdarzenie <see cref="T:System.Web.UI.WebControls.CustomValidator" /> dla kontrolki.</summary>
        <returns><see langword="true" />Jeśli wartość określona przez parametr zostanie <paramref name="value" /> przekazana walidacji; w <see langword="false" />przeciwnym razie,.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.CustomValidator.ServerValidate> Zdarzenie jest zgłaszane w przypadku wykonywania walidacji na serwerze.  
  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Obsługa i](~/docs/standard/events/index.md)wywoływanie zdarzeń.  
  
 <xref:System.Web.UI.WebControls.CustomValidator.OnServerValidate%2A> Metoda umożliwia również klasom pochodnym obsłużenia zdarzenia bez dołączania delegata. Jest to preferowana technika obsługi zdarzenia w klasie pochodnej.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak określić i zakodować procedurę obsługi dla kontrolki po <xref:System.Web.UI.WebControls.CustomValidator> stronie serwera.  
  
> [!IMPORTANT]
>  Ten przykład zawiera pole tekstowe akceptujące dane wejściowe użytkownika, które jest potencjalnym zagrożeniem bezpieczeństwa. Domyślnie strony sieci Web ASP.NET sprawdzają, czy dane wejściowe użytkownika nie obejmują elementów skryptu ani HTML. Aby uzyskać więcej informacji, zobacz [Omówienie luk](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)w zabezpieczeniach.  
  
 [!code-aspx-csharp[CustomValidatorServerValidate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomValidatorServerValidate/CS/customvalidatorservervalidatecs.aspx#1)]
 [!code-aspx-vb[CustomValidatorServerValidate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomValidatorServerValidate/VB/customvalidatorservervalidatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Podczas zastępowania <see cref="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" /> klasy pochodnej należy wywołać <see cref="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" /> metodę klasy bazowej, aby zarejestrowani delegowani odbierał zdarzenie.</para></block>
        <altmember cref="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" />
      </Docs>
    </Member>
    <Member MemberName="ServerValidate">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ServerValidateEventHandler ServerValidate;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ServerValidateEventHandler ServerValidate" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ServerValidate As ServerValidateEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ServerValidateEventHandler ^ ServerValidate;" />
      <MemberSignature Language="F#" Value="member this.ServerValidate : System.Web.UI.WebControls.ServerValidateEventHandler " Usage="member this.ServerValidate : System.Web.UI.WebControls.ServerValidateEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ServerValidateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy Walidacja jest przeprowadzana na serwerze.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.CustomValidator.ServerValidate> Zdarzenie jest zgłaszane w przypadku wykonywania walidacji na serwerze. To zdarzenie służy do dostarczania niestandardowej procedury walidacji dla kontrolki wprowadzania, takiej jak <xref:System.Web.UI.WebControls.TextBox> kontrolka.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Obsługa i](~/docs/standard/events/index.md)wywoływanie zdarzeń.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak określić i zakodować procedurę obsługi dla kontrolki po <xref:System.Web.UI.WebControls.CustomValidator> stronie serwera. Tworzy niestandardową procedurę walidacji, sprawdza poprawność wartości <xref:System.Web.UI.WebControls.TextBox> kontrolki dla liczby parzystej, a następnie wyświetla wynik walidacji.  
  
> [!IMPORTANT]
>  Ten przykład zawiera pole tekstowe akceptujące dane wejściowe użytkownika, które jest potencjalnym zagrożeniem bezpieczeństwa. Domyślnie strony sieci Web ASP.NET sprawdzają, czy dane wejściowe użytkownika nie obejmują elementów skryptu ani HTML. Aby uzyskać więcej informacji, zobacz [Omówienie luk](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)w zabezpieczeniach.  
  
 [!code-aspx-csharp[CustomValidatorServerValidate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomValidatorServerValidate/CS/customvalidatorservervalidatecs.aspx#1)]
 [!code-aspx-vb[CustomValidatorServerValidate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomValidatorServerValidate/VB/customvalidatorservervalidatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" />
        <altmember cref="T:System.Web.UI.WebControls.ServerValidateEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="ValidateEmptyText">
      <MemberSignature Language="C#" Value="public bool ValidateEmptyText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidateEmptyText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.CustomValidator.ValidateEmptyText" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidateEmptyText As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ValidateEmptyText { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ValidateEmptyText : bool with get, set" Usage="System.Web.UI.WebControls.CustomValidator.ValidateEmptyText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość logiczną wskazującą, czy pusty tekst powinien być zweryfikowany.</summary>
        <value><see langword="true" />Jeśli pusty tekst powinien być zweryfikowany; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każdy moduł sprawdzania poprawności można skojarzyć z kontrolką dodaną. W poprzednich wersjach .NET Framework, jeśli formant Target miał pustą wartość ciągu, taką jak <xref:System.Web.UI.WebControls.TextBox.Text%2A> właściwość o <xref:System.String.Empty?displayProperty=nameWithType>wartości, <xref:System.Web.UI.WebControls.RequiredFieldValidator> moduł walidacji (z wyjątkiem modułu sprawdzania poprawności) nie oceni kontrolowanej kontrolki i po prostu zwróci, że Walidacja zakończono pomyślnie.  
  
 <xref:System.Web.UI.WebControls.CustomValidator.ValidateEmptyText%2A> Właściwość jest nowa dla .NET Framework w wersji 2,0.  Jeśli <xref:System.Web.UI.WebControls.CustomValidator.ValidateEmptyText%2A> jest ustawiona na `true`, moduł walidacji oblicza wartość kontrolki (przy użyciu kryteriów określonych dla <xref:System.Web.UI.WebControls.CustomValidator> kontrolki) i zwraca wyniki walidacji. Ta właściwość pozwala deweloperom oszacować wyniki <xref:System.Web.UI.WebControls.CustomValidator> kontrolki niezależnie od wartości kontrolki wskazywanej.  
  
 Tej właściwości nie można ustawić za pomocą motywów lub motywów arkuszy stylów. Aby uzyskać więcej informacji, <xref:System.Web.UI.ThemeableAttribute> Zobacz temat i [ASP.NET motywy i karnacje](https://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.BaseValidator" />
        <altmember cref="T:System.Web.UI.WebControls.RequiredFieldValidator" />
      </Docs>
    </Member>
  </Members>
</Type>
