<Type Name="BaseCompareValidator" FullName="System.Web.UI.WebControls.BaseCompareValidator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="642c17fb955ea5ca44497ba52239d63b98193508" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36583821" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class BaseCompareValidator : System.Web.UI.WebControls.BaseValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit BaseCompareValidator extends System.Web.UI.WebControls.BaseValidator" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.BaseCompareValidator" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class BaseCompareValidator&#xA;Inherits BaseValidator" />
  <TypeSignature Language="C++ CLI" Value="public ref class BaseCompareValidator abstract : System::Web::UI::WebControls::BaseValidator" />
  <TypeSignature Language="F#" Value="type BaseCompareValidator = class&#xA;    inherit BaseValidator" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.BaseValidator</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Służy jako abstrakcyjna klasa podstawowa dla formantów sprawdzania poprawności, przeprowadzających maszynowy porównania.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.BaseCompareValidator> Klasy jest dziedziczona przez formanty walidacji, pozwalające porównać wartości, takich jak <xref:System.Web.UI.WebControls.CompareValidator> i <xref:System.Web.UI.WebControls.RangeValidator> formantów, aby zapewnić podstawowe funkcje wspólnej.  
  
 Użyj <xref:System.Web.UI.WebControls.BaseCompareValidator.Type%2A> typu właściwości w celu określenia danych, czy wartości są konwertowane na przed porównywane.  
  
> [!NOTE]
>  Wartości wejściowe formantu w trakcie walidacji nie można przekonwertować na określony typ danych, uwierzytelnienie nie powiedzie się. <xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A> Ma ustawioną właściwość formantu weryfikacji `false`.  
  
 <xref:System.Web.UI.WebControls.BaseCompareValidator> Klasa zawiera także kilka właściwości i metod statycznych, które są przydatne podczas wykonywania operacji sprawdzania poprawności porównania. Można określić, czy dany ciąg można przekonwertować na typ danych przy użyciu <xref:System.Web.UI.WebControls.BaseCompareValidator.CanConvert%2A> metody. Maksymalny rok, który może być reprezentowany przez rokiem dwucyfrowym znajduje się w <xref:System.Web.UI.WebControls.BaseCompareValidator.CutoffYear%2A> właściwości. <xref:System.Web.UI.WebControls.BaseCompareValidator.GetFullYear%2A> Metoda pozwala konwertować z rokiem czterocyfrowym rokiem dwucyfrowym.  
  
> [!NOTE]
>  Jeśli używasz kontrolki modułu sprawdzania poprawności, pochodzących z <xref:System.Web.UI.WebControls.BaseCompareValidator> kontrolować wewnątrz <xref:System.Web.UI.UpdatePanel> sterowania, upewnij się, że formantem modułu sprawdzania poprawności i skojarzonej z nim są na tym samym panelu. Aby uzyskać więcej informacji o korzystaniu z <xref:System.Web.UI.UpdatePanel> kontrolować aktualizacje stron częściowych, zobacz [omówienie renderowania stron częściowych](http://msdn.microsoft.com/library/5c12736d-d9e9-464a-9388-3fe0f9f49e49).  
  
 Aby uzyskać więcej informacji o weryfikacji formantów, zobacz <xref:System.Web.UI.WebControls.BaseValidator>.  
  
## <a name="accessibility"></a>Ułatwienia dostępu  
 Znaczników renderowania domyślnie dla tego formantu nie mogą być zgodne ze standardami ułatwień dostępu, takich jak wytyczne o priorytecie 1 interfejsów sieci Web zawartości dostępności wytyczne 1.0 (WCAG). Aby uzyskać szczegółowe informacje dotyczące obsługi ułatwień dostępu dla tego formantu, zobacz [kontrolki ASP.NET i dostępności](http://msdn.microsoft.com/library/847a37e3-ce20-41da-b0d3-7dfb0fdae9a0).  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.CompareValidator" />
    <altmember cref="T:System.Web.UI.WebControls.RangeValidator" />
    <altmember cref="T:System.Web.UI.WebControls.BaseValidator" />
    <altmember cref="P:System.Web.UI.WebControls.BaseCompareValidator.Type" />
    <altmember cref="M:System.Web.UI.WebControls.BaseCompareValidator.CanConvert(System.String,System.Web.UI.WebControls.ValidationDataType)" />
    <altmember cref="P:System.Web.UI.WebControls.BaseCompareValidator.CutoffYear" />
    <altmember cref="M:System.Web.UI.WebControls.BaseCompareValidator.GetFullYear(System.Int32)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected BaseCompareValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseCompareValidator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; BaseCompareValidator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.WebControls.BaseCompareValidator" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponieważ <xref:System.Web.UI.WebControls.BaseCompareValidator> klasa jest abstrakcyjna, nie można utworzyć <xref:System.Web.UI.WebControls.BaseCompareValidator> obiekt bezpośrednio. Ten konstruktor jest popularnie określany przez konstruktora klasy pochodnej w celu zainicjowania właściwości zdefiniowane w <xref:System.Web.UI.WebControls.BaseCompareValidator> klasy.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.CompareValidator" />
        <altmember cref="T:System.Web.UI.WebControls.RangeValidator" />
      </Docs>
    </Member>
    <Member MemberName="AddAttributesToRender">
      <MemberSignature Language="C#" Value="protected override void AddAttributesToRender (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddAttributesToRender(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseCompareValidator.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub AddAttributesToRender (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void AddAttributesToRender(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.AddAttributesToRender : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="baseCompareValidator.AddAttributesToRender writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.Web.UI.HtmlTextWriter" /> Reprezentujący strumienia wyjściowego do renderowania elementów HTML zawartości na kliencie.</param>
        <summary>Dodaje atrybuty HTML i style, które należy do renderowania kontrolki na określony <see cref="T:System.Web.UI.HtmlTextWriter" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.BaseCompareValidator.AddAttributesToRender%2A> Metody jest używany do renderowania atrybutów formantu w tagu HTML dla formantu. Ta metoda jest zwykle zastępowana kontroli deweloperom w klasach pochodnych Wstaw odpowiednie atrybuty i style do <xref:System.Web.UI.HtmlTextWriter> strumień wyjściowy dla formantu.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>W przypadku przesłaniania <see cref="M:System.Web.UI.WebControls.BaseCompareValidator.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" /> metody należy wywołać odpowiedniej metody w klasie podstawowej. W przeciwnym razie nie będzie renderowany atrybutów, zawarte w klasie podstawowej.</para>
        </block>
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CanConvert">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Określa, czy określony ciąg można przekonwertować na określony typ danych.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CanConvert">
      <MemberSignature Language="C#" Value="public static bool CanConvert (string text, System.Web.UI.WebControls.ValidationDataType type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CanConvert(string text, valuetype System.Web.UI.WebControls.ValidationDataType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseCompareValidator.CanConvert(System.String,System.Web.UI.WebControls.ValidationDataType)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CanConvert (text As String, type As ValidationDataType) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool CanConvert(System::String ^ text, System::Web::UI::WebControls::ValidationDataType type);" />
      <MemberSignature Language="F#" Value="static member CanConvert : string * System.Web.UI.WebControls.ValidationDataType -&gt; bool" Usage="System.Web.UI.WebControls.BaseCompareValidator.CanConvert (text, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="type" Type="System.Web.UI.WebControls.ValidationDataType" />
      </Parameters>
      <Docs>
        <param name="text">Ciąg do testowania.</param>
        <param name="type">Jeden z <see cref="T:System.Web.UI.WebControls.ValidationDataType" /> wartości.</param>
        <summary>Określa, czy określony ciąg można przekonwertować na określony typ danych. Ta wersja waluty testy przeciążonej metody, double i wartości daty w formacie używane przez bieżącej kultury.</summary>
        <returns>
          <see langword="true" /> Jeśli określone dane ciągu można przekonwertować na określony typ danych; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.BaseCompareValidator.CanConvert%28System.String%2CSystem.Web.UI.WebControls.ValidationDataType%29> metodę, aby określić, czy określony ciąg można przekonwertować na określony typ danych. Ta metoda jest zwykle używana do sprawdzenia, czy ciąg można przekonwertować na typ danych zgodne przed wykonaniem operacji, która zależy od typu danych.  
  
 Ta wersja metody testy wartość przy użyciu formatu używanego przez bieżącej kultury. Aby przetestować wartości przy użyciu formatu niezależny od kultury, użyj <xref:System.Web.UI.WebControls.BaseCompareValidator.CanConvert%28System.String%2CSystem.Web.UI.WebControls.ValidationDataType%2CSystem.Boolean%29?displayProperty=nameWithType> przeciążony wersji tej metody.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, przy użyciu <xref:System.Web.UI.WebControls.BaseCompareValidator.CanConvert%2A> metody do porównywania dwóch wartości całkowite i ustalić, czy można przekonwertować druga liczba całkowita.  
  
 [!code-aspx-csharp[BaseCompareValidatorCanConvert#1](~/samples/snippets/csharp/VS_Snippets_WebNet/BaseCompareValidatorCanConvert/CS/basecomparevalidatorcanconvertcs.aspx#1)]
 [!code-aspx-vb[BaseCompareValidatorCanConvert#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/BaseCompareValidatorCanConvert/VB/basecomparevalidatorcanconvertvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.ValidationDataType" />
        <altmember cref="P:System.Web.UI.WebControls.BaseCompareValidator.CultureInvariantValues" />
        <altmember cref="Overload:System.Web.UI.WebControls.BaseCompareValidator.Convert" />
      </Docs>
    </Member>
    <Member MemberName="CanConvert">
      <MemberSignature Language="C#" Value="public static bool CanConvert (string text, System.Web.UI.WebControls.ValidationDataType type, bool cultureInvariant);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CanConvert(string text, valuetype System.Web.UI.WebControls.ValidationDataType type, bool cultureInvariant) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseCompareValidator.CanConvert(System.String,System.Web.UI.WebControls.ValidationDataType,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CanConvert (text As String, type As ValidationDataType, cultureInvariant As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool CanConvert(System::String ^ text, System::Web::UI::WebControls::ValidationDataType type, bool cultureInvariant);" />
      <MemberSignature Language="F#" Value="static member CanConvert : string * System.Web.UI.WebControls.ValidationDataType * bool -&gt; bool" Usage="System.Web.UI.WebControls.BaseCompareValidator.CanConvert (text, type, cultureInvariant)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="type" Type="System.Web.UI.WebControls.ValidationDataType" />
        <Parameter Name="cultureInvariant" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">Ciąg do testowania.</param>
        <param name="type">Jeden z <see cref="T:System.Web.UI.WebControls.ValidationDataType" /> wartości wyliczenia.</param>
        <param name="cultureInvariant">
          <see langword="true" /> Aby przetestować wartości przy użyciu formatu niezależny od kultury; w przeciwnym razie <see langword="false" />.</param>
        <summary>Określa, czy określony ciąg można przekonwertować na określony typ danych. Ta wersja przeciążonej metody umożliwia określenie, czy wartości są testowane przy użyciu formatu niezależny od kultury.</summary>
        <returns>
          <see langword="true" /> Jeśli określone dane ciągu można przekonwertować na określony typ danych; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.BaseCompareValidator.CanConvert%28System.String%2CSystem.Web.UI.WebControls.ValidationDataType%2CSystem.Boolean%29> metodę, aby określić, czy określony ciąg można przekonwertować na określony typ danych. Ta metoda jest zwykle używana do sprawdzenia, czy ciąg można przekonwertować na typ danych zgodne przed wykonaniem operacji, która zależy od typu danych. Aby wskazać, że wartości powinny być testowane za pomocą format niezależny od kultury, Przekaż `true` dla `cultureInvariant` parametru; w przeciwnym razie wartość. wartości są testowane przy użyciu formatu używanego przez bieżącej kultury. Podczas testowania wartość przy użyciu formatu używanego przez bieżącej kultury, należy rozważyć użycie <xref:System.Web.UI.WebControls.BaseCompareValidator.CanConvert%28System.String%2CSystem.Web.UI.WebControls.ValidationDataType%29?displayProperty=nameWithType> przeciążony wersji tej metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.ValidationDataType" />
        <altmember cref="P:System.Web.UI.WebControls.BaseCompareValidator.CultureInvariantValues" />
        <altmember cref="Overload:System.Web.UI.WebControls.BaseCompareValidator.Convert" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Compare">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Porównuje dwa ciągi, przy użyciu określonego operatora i typ sprawdzania poprawności danych.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="protected static bool Compare (string leftText, string rightText, System.Web.UI.WebControls.ValidationCompareOperator op, System.Web.UI.WebControls.ValidationDataType type);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig bool Compare(string leftText, string rightText, valuetype System.Web.UI.WebControls.ValidationCompareOperator op, valuetype System.Web.UI.WebControls.ValidationDataType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseCompareValidator.Compare(System.String,System.String,System.Web.UI.WebControls.ValidationCompareOperator,System.Web.UI.WebControls.ValidationDataType)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function Compare (leftText As String, rightText As String, op As ValidationCompareOperator, type As ValidationDataType) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static bool Compare(System::String ^ leftText, System::String ^ rightText, System::Web::UI::WebControls::ValidationCompareOperator op, System::Web::UI::WebControls::ValidationDataType type);" />
      <MemberSignature Language="F#" Value="static member Compare : string * string * System.Web.UI.WebControls.ValidationCompareOperator * System.Web.UI.WebControls.ValidationDataType -&gt; bool" Usage="System.Web.UI.WebControls.BaseCompareValidator.Compare (leftText, rightText, op, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leftText" Type="System.String" />
        <Parameter Name="rightText" Type="System.String" />
        <Parameter Name="op" Type="System.Web.UI.WebControls.ValidationCompareOperator" />
        <Parameter Name="type" Type="System.Web.UI.WebControls.ValidationDataType" />
      </Parameters>
      <Docs>
        <param name="leftText">Wartość po lewej stronie operatora.</param>
        <param name="rightText">Wartość po prawej stronie operatora.</param>
        <param name="op">Jeden z <see cref="T:System.Web.UI.WebControls.ValidationCompareOperator" /> wartości.</param>
        <param name="type">Jeden z <see cref="T:System.Web.UI.WebControls.ValidationDataType" /> wartości.</param>
        <summary>Porównuje dwa ciągi, przy użyciu określonego operatora i typu danych. Ta wersja waluty porównuje przeciążonej metody, double i wartości daty w formacie używane przez bieżącej kultury.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="leftValue" /> parametr odnosi się do <paramref name="rightValue" /> parametru w sposób określony przez <paramref name="op" /> parametru; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.BaseCompareValidator.Compare%28System.String%2CSystem.String%2CSystem.Web.UI.WebControls.ValidationCompareOperator%2CSystem.Web.UI.WebControls.ValidationDataType%29> Metody używany do sprawdzania, czy wartość `leftText` parametr odnosi się do wartości `rightText` parametru w sposób określony przez `op` parametru. `type` Parametr określa typ danych wartości są porównywane.  
  
> [!NOTE]
>  Jeśli `op` ustawiono parametr `ValidationCompareOperator.DataTypeCheck`, ta metoda sprawdza tylko wartość `leftText` parametr dla typu danych określonego przez `type` parametru. `rightText` Parametr jest ignorowany.  
  
 Ta wersja metoda porównuje wartości przy użyciu formatu używanego przez bieżącej kultury. Aby porównać wartości, przy użyciu formatu niezależny od kultury, użyj <xref:System.Web.UI.WebControls.BaseCompareValidator.Compare%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Boolean%2CSystem.Web.UI.WebControls.ValidationCompareOperator%2CSystem.Web.UI.WebControls.ValidationDataType%29?displayProperty=nameWithType> przeciążony wersji tej metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.ValidationCompareOperator" />
        <altmember cref="T:System.Web.UI.WebControls.ValidationDataType" />
        <altmember cref="M:System.Web.UI.WebControls.BaseCompareValidator.Convert(System.String,System.Web.UI.WebControls.ValidationDataType,System.Object@)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="protected static bool Compare (string leftText, bool cultureInvariantLeftText, string rightText, bool cultureInvariantRightText, System.Web.UI.WebControls.ValidationCompareOperator op, System.Web.UI.WebControls.ValidationDataType type);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig bool Compare(string leftText, bool cultureInvariantLeftText, string rightText, bool cultureInvariantRightText, valuetype System.Web.UI.WebControls.ValidationCompareOperator op, valuetype System.Web.UI.WebControls.ValidationDataType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseCompareValidator.Compare(System.String,System.Boolean,System.String,System.Boolean,System.Web.UI.WebControls.ValidationCompareOperator,System.Web.UI.WebControls.ValidationDataType)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function Compare (leftText As String, cultureInvariantLeftText As Boolean, rightText As String, cultureInvariantRightText As Boolean, op As ValidationCompareOperator, type As ValidationDataType) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static bool Compare(System::String ^ leftText, bool cultureInvariantLeftText, System::String ^ rightText, bool cultureInvariantRightText, System::Web::UI::WebControls::ValidationCompareOperator op, System::Web::UI::WebControls::ValidationDataType type);" />
      <MemberSignature Language="F#" Value="static member Compare : string * bool * string * bool * System.Web.UI.WebControls.ValidationCompareOperator * System.Web.UI.WebControls.ValidationDataType -&gt; bool" Usage="System.Web.UI.WebControls.BaseCompareValidator.Compare (leftText, cultureInvariantLeftText, rightText, cultureInvariantRightText, op, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leftText" Type="System.String" />
        <Parameter Name="cultureInvariantLeftText" Type="System.Boolean" />
        <Parameter Name="rightText" Type="System.String" />
        <Parameter Name="cultureInvariantRightText" Type="System.Boolean" />
        <Parameter Name="op" Type="System.Web.UI.WebControls.ValidationCompareOperator" />
        <Parameter Name="type" Type="System.Web.UI.WebControls.ValidationDataType" />
      </Parameters>
      <Docs>
        <param name="leftText">Wartość po lewej stronie operatora.</param>
        <param name="cultureInvariantLeftText">
          <see langword="true" /> można przekonwertować wartości lewej strony na format niezależny od kultury; w przeciwnym razie <see langword="false" />.</param>
        <param name="rightText">Wartość po prawej stronie operatora.</param>
        <param name="cultureInvariantRightText">
          <see langword="true" /> Aby przekonwertować wartość po prawej stronie format niezależny od kultury; w przeciwnym razie <see langword="false" />.</param>
        <param name="op">Jeden z <see cref="T:System.Web.UI.WebControls.ValidationCompareOperator" /> wartości.</param>
        <param name="type">Jeden z <see cref="T:System.Web.UI.WebControls.ValidationDataType" /> wartości.</param>
        <summary>Porównuje dwa ciągi, przy użyciu określonego operatora i typ sprawdzania poprawności danych. Ta wersja przeciążenie umożliwia określenie, czy wartości są porównywane przy użyciu formatu niezależny od kultury.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="leftValue" /> parametr odnosi się do <paramref name="rightValue" /> parametru w sposób określony przez <paramref name="op" /> parametru; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.BaseCompareValidator.Compare%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Boolean%2CSystem.Web.UI.WebControls.ValidationCompareOperator%2CSystem.Web.UI.WebControls.ValidationDataType%29> Metody używany do sprawdzania, czy wartość `leftText` parametr odnosi się do wartości `rightText` parametru w sposób określony przez `op` parametru. `type` Parametr określa typ danych wartości są porównywane.  
  
> [!NOTE]
>  Jeśli `op` ustawiono parametr `ValidationCompareOperator.DataTypeCheck`, ta metoda sprawdza tylko wartość `leftText` parametr dla typu danych określonego przez `type` parametru. `rightText` Parametr jest ignorowany.  
  
 Aby wskazać, że należy porównać wartości przy użyciu formatu niezależny od kultury, Przekaż `true` dla `cultureInvariantLeftText` i `cultureInvariantRightText` parametrów; w przeciwnym razie wartość. wartości są porównywane przy użyciu formatu używanego przez bieżącej kultury. Porównując wartości przy użyciu formatu używanego przez bieżącej kultury, należy rozważyć użycie <xref:System.Web.UI.WebControls.BaseCompareValidator.Compare%28System.String%2CSystem.String%2CSystem.Web.UI.WebControls.ValidationCompareOperator%2CSystem.Web.UI.WebControls.ValidationDataType%29?displayProperty=nameWithType> przeciążony wersji tej metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.ValidationCompareOperator" />
        <altmember cref="T:System.Web.UI.WebControls.ValidationDataType" />
        <altmember cref="M:System.Web.UI.WebControls.BaseCompareValidator.Convert(System.String,System.Web.UI.WebControls.ValidationDataType,System.Object@)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Convert">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje określony tekst obiektu określonego typu danych.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="protected static bool Convert (string text, System.Web.UI.WebControls.ValidationDataType type, out object value);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig bool Convert(string text, valuetype System.Web.UI.WebControls.ValidationDataType type, [out] object&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseCompareValidator.Convert(System.String,System.Web.UI.WebControls.ValidationDataType,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function Convert (text As String, type As ValidationDataType, ByRef value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static bool Convert(System::String ^ text, System::Web::UI::WebControls::ValidationDataType type, [Runtime::InteropServices::Out] System::Object ^ % value);" />
      <MemberSignature Language="F#" Value="static member Convert : string * System.Web.UI.WebControls.ValidationDataType *  -&gt; bool" Usage="System.Web.UI.WebControls.BaseCompareValidator.Convert (text, type, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="type" Type="System.Web.UI.WebControls.ValidationDataType" />
        <Parameter Name="value" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="text">Tekst do konwersji.</param>
        <param name="type">Jeden z <see cref="T:System.Web.UI.WebControls.ValidationDataType" /> wartości.</param>
        <param name="value">Po powrocie z tej metody zawiera obiekt z wynikiem konwersji. Ten parametr jest przekazywany niezainicjowany.</param>
        <summary>Konwertuje określony tekst obiektu określonego typu danych. Ta wersja przeciążona metoda konwertuje waluty, double i wartości daty w formacie używane przez bieżącej kultury.</summary>
        <returns>
          <see langword="true" /> Jeśli konwersja zakończy się pomyślnie; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.BaseCompareValidator.Convert%28System.String%2CSystem.Web.UI.WebControls.ValidationDataType%2CSystem.Object%40%29> Metoda jest używana do konwertowania tekstu do obiektu określonego typu danych. Mimo że metoda zwraca `true` lub `false` wskaż, czy konwersja powiodła się, skonwertowana wartość znajduje się w `value` `out` parametru.  
  
> [!NOTE]
>  Jeśli konwersja zakończy się niepowodzeniem, `value` ustawiono parametr `null`.  
  
 Ta wersja metoda konwertuje wartości przy użyciu formatu używanego przez bieżącej kultury. Aby dokonać konwersji wartości przy użyciu formatu niezależny od kultury, użyj <xref:System.Web.UI.WebControls.BaseCompareValidator.Convert%28System.String%2CSystem.Web.UI.WebControls.ValidationDataType%2CSystem.Boolean%2CSystem.Object%40%29?displayProperty=nameWithType> przeciążony wersji tej metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.ValidationDataType" />
        <altmember cref="M:System.Web.UI.WebControls.BaseCompareValidator.Compare(System.String,System.String,System.Web.UI.WebControls.ValidationCompareOperator,System.Web.UI.WebControls.ValidationDataType)" />
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="protected static bool Convert (string text, System.Web.UI.WebControls.ValidationDataType type, bool cultureInvariant, out object value);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig bool Convert(string text, valuetype System.Web.UI.WebControls.ValidationDataType type, bool cultureInvariant, [out] object&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseCompareValidator.Convert(System.String,System.Web.UI.WebControls.ValidationDataType,System.Boolean,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function Convert (text As String, type As ValidationDataType, cultureInvariant As Boolean, ByRef value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static bool Convert(System::String ^ text, System::Web::UI::WebControls::ValidationDataType type, bool cultureInvariant, [Runtime::InteropServices::Out] System::Object ^ % value);" />
      <MemberSignature Language="F#" Value="static member Convert : string * System.Web.UI.WebControls.ValidationDataType * bool *  -&gt; bool" Usage="System.Web.UI.WebControls.BaseCompareValidator.Convert (text, type, cultureInvariant, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="type" Type="System.Web.UI.WebControls.ValidationDataType" />
        <Parameter Name="cultureInvariant" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="text">Tekst do konwersji.</param>
        <param name="type">Jeden z <see cref="T:System.Web.UI.WebControls.ValidationDataType" /> wartości.</param>
        <param name="cultureInvariant">
          <see langword="true" /> do konwersji wartości na format niezależny od kultury; w przeciwnym razie <see langword="false" />.</param>
        <param name="value">Po powrocie z tej metody zawiera obiekt z wynikiem konwersji. Ten parametr jest przekazywany niezainicjowany.</param>
        <summary>Konwertuje określony tekst obiektu określonego typu danych. Ta wersja przeciążonej metody umożliwia określenie, czy wartości są konwertowane przy użyciu formatu niezależny od kultury.</summary>
        <returns>
          <see langword="true" /> Jeśli konwersja zakończy się pomyślnie; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.BaseCompareValidator.Convert%28System.String%2CSystem.Web.UI.WebControls.ValidationDataType%2CSystem.Boolean%2CSystem.Object%40%29> Metoda jest używana do konwertowania tekstu do obiektu określonego typu danych. Mimo że metoda zwraca `true` lub `false` wskaż, czy konwersja powiodła się, skonwertowana wartość znajduje się w `value` `out` parametru.  
  
> [!NOTE]
>  Jeśli konwersja zakończy się niepowodzeniem, `value` ustawiono parametr `null`.  
  
 Aby wskazać, że wartości powinny być konwertowane przy użyciu formatu niezależny od kultury, Przekaż `true` dla `cultureInvariant` parametru; w przeciwnym razie wartość. wartości są konwertowane przy użyciu formatu używanego przez bieżącej kultury. Podczas konwertowania wartości przy użyciu formatu używanego przez bieżącej kultury, należy rozważyć użycie <xref:System.Web.UI.WebControls.BaseCompareValidator.Convert%28System.String%2CSystem.Web.UI.WebControls.ValidationDataType%2CSystem.Object%40%29?displayProperty=nameWithType> przeciążony wersji tej metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.ValidationDataType" />
        <altmember cref="M:System.Web.UI.WebControls.BaseCompareValidator.Compare(System.String,System.String,System.Web.UI.WebControls.ValidationCompareOperator,System.Web.UI.WebControls.ValidationDataType)" />
      </Docs>
    </Member>
    <Member MemberName="CultureInvariantValues">
      <MemberSignature Language="C#" Value="public bool CultureInvariantValues { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CultureInvariantValues" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseCompareValidator.CultureInvariantValues" />
      <MemberSignature Language="VB.NET" Value="Public Property CultureInvariantValues As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CultureInvariantValues { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CultureInvariantValues : bool with get, set" Usage="System.Web.UI.WebControls.BaseCompareValidator.CultureInvariantValues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy wartości są konwertowane na format niezależny od kultury przed porównywane.</summary>
        <value>
          <see langword="true" /> do konwersji wartości na format niezależny od kultury, przed ich porównaniem; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy <xref:System.Web.UI.WebControls.BaseCompareValidator.CultureInvariantValues%2A> właściwość jest ustawiona na `true`, właściwości formantu, które nie są silnie typizowane są konwertowane na format niezależny od kultury przed porównywane. Jeśli ta właściwość jest równa `false`, wartości są konwertowane na format bieżącej kultury. <xref:System.Web.UI.WebControls.BaseCompareValidator.CultureInvariantValues%2A> Właściwość nie ma wpływu na wartości, które są wprowadzane przez użytkowników kontrolki na stronie sieci Web.  
  
 Nie można ustawić tej właściwości, kompozycje lub motywów arkusza stylów. Aby uzyskać więcej informacji, zobacz <xref:System.Web.UI.ThemeableAttribute> i [kompozycji ASP.NET i karnacji](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrentInfo" />
      </Docs>
    </Member>
    <Member MemberName="CutoffYear">
      <MemberSignature Language="C#" Value="protected static int CutoffYear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CutoffYear" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseCompareValidator.CutoffYear" />
      <MemberSignature Language="VB.NET" Value="Protected Shared ReadOnly Property CutoffYear As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static property int CutoffYear { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CutoffYear : int" Usage="System.Web.UI.WebControls.BaseCompareValidator.CutoffYear" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera maksymalny rok, który może być reprezentowany przez rokiem dwucyfrowym.</summary>
        <value>Maksymalny rok, który może być reprezentowany przez rokiem dwucyfrowym.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.BaseCompareValidator.CutoffYear%2A> właściwości, aby określić maksymalny rok, który może być reprezentowany przez dwucyfrowe zakresu 100 roku. Na przykład, jeśli ta właściwość ma wartość `2029`, może reprezentować lat 1930 do 2029 przy użyciu rokiem dwucyfrowym. Dwucyfrowe 30 jest interpretowany jako 1930, podczas gdy 29 jest interpretowana jako 2029. Wartość tej właściwości nie można zmienić bezpośrednio; można jednak zmienić maksymalny rok, który może być reprezentowany przez rokiem dwucyfrowym przez ustawienie <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="P:System.Globalization.Calendar.TwoDigitYearMax" />
      </Docs>
    </Member>
    <Member MemberName="DetermineRenderUplevel">
      <MemberSignature Language="C#" Value="protected override bool DetermineRenderUplevel ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool DetermineRenderUplevel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseCompareValidator.DetermineRenderUplevel" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function DetermineRenderUplevel () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool DetermineRenderUplevel();" />
      <MemberSignature Language="F#" Value="override this.DetermineRenderUplevel : unit -&gt; bool" Usage="baseCompareValidator.DetermineRenderUplevel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Określa, czy formant weryfikacji ma być renderowany do nowszej wersji przeglądarki ("wyższej").</summary>
        <returns>
          <see langword="true" /> Jeśli formant weryfikacji ma być renderowany dla przeglądarki "wyższej"; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.BaseCompareValidator.DetermineRenderUplevel%2A> Metoda jest używana głównie przez funkcję Pomocnika <xref:System.Web.UI.WebControls.BaseValidator.RenderUplevel%2A> właściwości w celu określenia, czy przeglądarka klienta obsługuje renderowanie "wyższej" (renderowania w przeglądarce nowszej). <xref:System.Web.UI.WebControls.BaseCompareValidator> Klasa zastępuje tę metodę, aby zwrócić `false` Jeżeli z systemem innym niż kalendarza gregoriańskiego - używa bieżącej kultury.  
  
> [!NOTE]
>  Ta metoda jest używana głównie przez deweloperów formantu.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>W przypadku przesłaniania <see cref="M:System.Web.UI.WebControls.BaseCompareValidator.DetermineRenderUplevel" /> metody należy wywołać odpowiedniej metody w klasie podstawowej. W przeciwnym razie będzie pomijana warunki zdefiniowane w klasie podstawowej.</para>
        </block>
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.RenderUplevel" />
      </Docs>
    </Member>
    <Member MemberName="GetDateElementOrder">
      <MemberSignature Language="C#" Value="protected static string GetDateElementOrder ();" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig string GetDateElementOrder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseCompareValidator.GetDateElementOrder" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function GetDateElementOrder () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::String ^ GetDateElementOrder();" />
      <MemberSignature Language="F#" Value="static member GetDateElementOrder : unit -&gt; string" Usage="System.Web.UI.WebControls.BaseCompareValidator.GetDateElementOrder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Określa porządek, w którym dzień, miesiąc i rok są wyświetlane w polu wartość daty dla bieżącej kultury.</summary>
        <returns>Ciąg, który reprezentuje kolejność dzień, miesiąc i rok w wartości daty dla bieżącej kultury.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dzień, miesiąc i rok z wartości daty może występować w różnej kolejności, w zależności od bieżącego ustawienia kultury. <xref:System.Web.UI.WebControls.BaseCompareValidator.GetDateElementOrder%2A> Metoda służy do określania kolejności wyświetlania tych wartości. W poniższej tabeli przedstawiono różne wartości zwracane przez tę metodę.  
  
|Data kolejności elementów|Wartość zwracana|  
|------------------------|------------------|  
|Dzień, miesiąc, rok|"dmy"|  
|Miesiąc, dzień, rok|"mdy"|  
|Rok, miesiąc, dzień|"ymd"|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.DateTime" />
        <altmember cref="P:System.Web.UI.WebControls.BaseCompareValidator.CutoffYear" />
        <altmember cref="M:System.Web.UI.WebControls.BaseCompareValidator.GetFullYear(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetFullYear">
      <MemberSignature Language="C#" Value="protected static int GetFullYear (int shortYear);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig int32 GetFullYear(int32 shortYear) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseCompareValidator.GetFullYear(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function GetFullYear (shortYear As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static int GetFullYear(int shortYear);" />
      <MemberSignature Language="F#" Value="static member GetFullYear : int -&gt; int" Usage="System.Web.UI.WebControls.BaseCompareValidator.GetFullYear shortYear" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shortYear" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="shortYear">Rokiem dwucyfrowym.</param>
        <summary>Generuje czterocyfrowy rok reprezentację określonego rokiem dwucyfrowym.</summary>
        <returns>Lata czterocyfrowe reprezentację określonego rokiem dwucyfrowym.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.BaseCompareValidator.GetFullYear%2A> metody do wygenerowania czterocyfrowy rok reprezentację określonego rokiem dwucyfrowym. Reprezentacja czterocyfrowy rok zależy od wartości <xref:System.Web.UI.WebControls.BaseCompareValidator.CutoffYear%2A> właściwości, która zawiera maksymalny rok, który może być reprezentowany przez dwucyfrowe zakresu 100 roku. Na przykład jeśli <xref:System.Web.UI.WebControls.BaseCompareValidator.CutoffYear%2A> właściwość zawiera wartość `2029`, <xref:System.Web.UI.WebControls.BaseCompareValidator.GetFullYear%2A> metoda zwraca roku 1930 2029. Dwucyfrowe 30 jest interpretowany jako 1930, podczas gdy 29 jest interpretowana jako 2029. Można zmienić maksymalny rok, który może być reprezentowany przez rokiem dwucyfrowym przez ustawienie <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> właściwości.  
  
> [!NOTE]
>  Ponieważ ta metoda jest `static`, służy bez tworzenia wystąpienia klasy przez kwalifikowanie nazwę metody wraz z nazwą klasy — na przykład `BaseCompareValidator.GetFullYear`.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BaseCompareValidator.CutoffYear" />
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="P:System.Globalization.Calendar.TwoDigitYearMax" />
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ValidationDataType Type { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.ValidationDataType Type" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseCompareValidator.Type" />
      <MemberSignature Language="VB.NET" Value="Public Property Type As ValidationDataType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ValidationDataType Type { System::Web::UI::WebControls::ValidationDataType get(); void set(System::Web::UI::WebControls::ValidationDataType value); };" />
      <MemberSignature Language="F#" Value="member this.Type : System.Web.UI.WebControls.ValidationDataType with get, set" Usage="System.Web.UI.WebControls.BaseCompareValidator.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ValidationDataType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia typ danych wartości są porównywane są konwertowane na przed dokonaniem porównania.</summary>
        <value>Jeden z <see cref="T:System.Web.UI.WebControls.ValidationDataType" /> wartości wyliczenia. Wartość domyślna to <see langword="String" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.BaseCompareValidator.Type%2A> właściwość, aby określić typ danych używany do porównania. <xref:System.Web.UI.WebControls.BaseCompareValidator.Type%2A> Jest używana inaczej przez różne formanty walidacji porównania.  
  
> [!IMPORTANT]
>  Gdy <xref:System.Web.UI.WebControls.BaseCompareValidator.Type%2A> właściwość jest ustawiona na <xref:System.Web.UI.WebControls.ValidationDataType.Date> i bieżący typ kalendarza jest innych niż gregoriański, że moduł sprawdzania poprawności po stronie serwera tylko. Moduł sprawdzania poprawności skryptu klienta obsługuje tylko gregoriańskiego.  
  
 Na przykład w <xref:System.Web.UI.WebControls.RangeValidator> kontroli, wszystkie wartości są porównywane (górna granica dolna granica i wartości wejściowe formantu) są konwertowane na określony typ danych, przed wykonaniem dowolnej porównania. Jednak jeśli używasz <xref:System.Web.UI.WebControls.CompareValidator> kontroli i ustawić jej <xref:System.Web.UI.WebControls.CompareValidator.Operator%2A> właściwości `ValidationCompareOperator.DataTypeCheck`, tylko wartości wejściowe formantu jest konwertowana na określony typ danych.  
  
> [!NOTE]
>  Wartości wejściowe formantu skojarzony z formantem sprawdzania poprawności nie można przekonwertować na określony typ danych, uwierzytelnienie nie powiedzie się. <xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A> Ma ustawioną właściwość formantu weryfikacji `false`.  
  
 W poniższej tabeli wymieniono wartości, które można użyć dla <xref:System.Web.UI.WebControls.BaseCompareValidator.Type%2A> właściwości.  
  
|Typ danych|Opis|  
|---------------|-----------------|  
|`String`|Określa typ danych ciągu.|  
|`Integer`|Określa typ danych 32-bitowej liczby całkowitej ze znakiem.|  
|`Double`|Określa podwójnej precyzji zmiennoprzecinkowe dane numeryczne.|  
|`Date`|Określa typ danych Data.|  
|`Currency`|Określa typ danych finansowe.|  
  
 Nie można ustawić tej właściwości kompozycji lub motywów arkusza stylów. Aby uzyskać więcej informacji, zobacz <xref:System.Web.UI.ThemeableAttribute> i [kompozycji ASP.NET i karnacji](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób użycia <xref:System.Web.UI.WebControls.BaseCompareValidator.Type%2A> właściwości w celu określenia typu danych, które wartości są porównywane są konwertowane na przed dokonaniem porównania.  
  
 [!code-aspx-csharp[Classic CompareValidator Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic CompareValidator Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic CompareValidator Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic CompareValidator Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Określony typ danych nie jest jednym z <see cref="T:System.Web.UI.WebControls.ValidationDataType" /> wartości.</exception>
        <altmember cref="T:System.Web.UI.WebControls.ValidationDataType" />
      </Docs>
    </Member>
  </Members>
</Type>