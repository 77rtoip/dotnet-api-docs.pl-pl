<Type Name="FileUpload" FullName="System.Web.UI.WebControls.FileUpload">
  <Metadata><Meta Name="ms.openlocfilehash" Value="29976c50aa2e70e1adcd3ba21e2c26c7b684fa9e" /><Meta Name="ms.sourcegitcommit" Value="634678f7ccd2928c6b2cf792a301b079b63639af" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="07/26/2019" /><Meta Name="ms.locfileid" Value="68542522" /></Metadata><TypeSignature Language="C#" Value="public class FileUpload : System.Web.UI.WebControls.WebControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FileUpload extends System.Web.UI.WebControls.WebControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.FileUpload" />
  <TypeSignature Language="VB.NET" Value="Public Class FileUpload&#xA;Inherits WebControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileUpload : System::Web::UI::WebControls::WebControl" />
  <TypeSignature Language="F#" Value="type FileUpload = class&#xA;    inherit WebControl" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.PreviewControlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ControlValueProperty("FileBytes")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ValidationProperty("FileName")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.PreviewControlDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Wyświetla kontrolkę pole tekstowe i przycisk Przeglądaj, który umożliwia użytkownikom wybieranie pliku do przekazania na serwer.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W tym temacie:  
  
-   [Wprowadzenie](#introduction)  
  
-   [Zapisywanie przekazanych plików](#saving_uploaded_files)  
  
-   [Zagadnienia dotyczące bezpieczeństwa](#security_considerations)  
  
-   [Ograniczenia pamięci](#memory_limitations)  
  
-   [Używanie formantu FileUpload z kontrolką UpdatePanel](#using_the_FileUpload_Control_with_the_UpdatePanel_control)  
  
-   [Składnia deklaracyjne](#DeclarativeSyntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Wprowadzenie  
 <xref:System.Web.UI.WebControls.FileUpload> Klasa wyświetla kontrolkę pole tekstowe i przycisk Przeglądaj, który umożliwia użytkownikom wybieranie pliku na kliencie i przekazywanie go na serwer sieci Web. Użytkownik określa plik do przekazania, wprowadzając pełną ścieżkę pliku na komputerze lokalnym (na przykład **C:\MyFiles\TestFile.txt**) w polu tekstowym kontrolki. Alternatywnie użytkownik może wybrać plik, klikając przycisk **Przeglądaj** , a następnie lokalizując go w oknie dialogowym **Wybierz plik** .  
  
 Użyj właściwości <xref:System.Web.UI.WebControls.FileUpload.FileName%2A> , aby uzyskać nazwę pliku na kliencie do przekazania przy <xref:System.Web.UI.WebControls.FileUpload> użyciu formantu. Nazwa pliku zwracana przez tę właściwość nie obejmuje ścieżki pliku na komputerze klienckim.  
  
 <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> Właściwość<xref:System.IO.Stream> pobiera obiekt, który wskazuje plik do przekazania. Użyj tej właściwości, aby uzyskać dostęp do zawartości pliku jako bajtów. Na przykład można użyć <xref:System.IO.Stream> obiektu, który jest zwracany <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> przez właściwość, aby odczytać zawartość pliku jako bajty i zapisać je w tablicy bajtów. Alternatywnie można użyć <xref:System.Web.UI.WebControls.FileUpload.FileBytes%2A> właściwości, aby pobrać wszystkie bajty w pliku.  
  
 Właściwość pobiera obiekt źródłowy <xref:System.Web.HttpPostedFile> pliku do przekazania. <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> Ta właściwość służy do uzyskiwania dostępu do dodatkowych właściwości pliku. <xref:System.Web.HttpPostedFile.ContentLength%2A> Właściwość pobiera długość pliku. <xref:System.Web.HttpPostedFile.ContentType%2A> Właściwość pobiera typ zawartości MIME dla pliku. Ponadto można użyć <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> właściwości, aby <xref:System.Web.HttpPostedFile.FileName%2A> uzyskać dostęp do właściwości, <xref:System.Web.HttpPostedFile.InputStream%2A> właściwości i <xref:System.Web.HttpPostedFile.SaveAs%2A> metody. Jednak te same funkcje są udostępniane przez <xref:System.Web.UI.WebControls.FileUpload.FileName%2A> Właściwość <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> , właściwość i <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> metodę.  
  
<a name="saving_uploaded_files"></a>   
## <a name="saving-uploaded-files"></a>Zapisywanie przekazanych plików  
 <xref:System.Web.UI.WebControls.FileUpload> Formant nie zapisuje automatycznie pliku na serwerze, gdy użytkownik wybierze plik do przekazania. Musisz jawnie udostępnić formant lub mechanizm pozwalający użytkownikowi na przesłanie określonego pliku. Na przykład możesz podać przycisk, który użytkownik klika, aby przekazać plik. Kod, który można zapisać w celu zapisania określonego pliku powinien wywołać <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> metodę, która zapisuje zawartość pliku do określonej ścieżki na serwerze. <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> Zazwyczaj Metoda jest wywoływana w metodzie obsługi zdarzeń dla zdarzenia, które generuje wpis z powrotem do serwera. Na przykład jeśli podajesz przycisk do przesyłania pliku, możesz dołączyć kod, aby zapisać plik w metodzie obsługi zdarzeń dla zdarzenia kliknięcia.  
  
 Przed wywołaniem <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> metody w celu zapisania pliku na serwerze <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> Użyj <xref:System.Web.UI.WebControls.FileUpload> właściwości, aby sprawdzić, czy kontrolka zawiera plik. <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> Jeśli zwraca `true`, wywołaj <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> metodę. Jeśli zwróci `false`, wyświetli komunikat dla użytkownika informującego, że formant nie zawiera pliku. Nie sprawdzaj <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> właściwości, aby określić, czy plik do przekazania istnieje, ponieważ domyślnie ta właściwość zawiera 0 bajtów. W efekcie nawet gdy <xref:System.Web.UI.WebControls.FileUpload> kontrolka jest pusta <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> , właściwość zwraca wartość różną od null.  
  
<a name="security_considerations"></a>   
## <a name="security-considerations"></a>Zagadnienia dotyczące zabezpieczeń  
 Po wywołaniu <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> metody należy określić pełną ścieżkę do katalogu, w którym ma zostać zapisany przekazany plik. Jeśli nie określisz jawnie ścieżki w kodzie aplikacji, wyjątek jest zgłaszany, gdy użytkownik próbuje przekazać plik. Takie zachowanie pomaga zachować bezpieczeństwo plików na serwerze, uniemożliwiając użytkownikom możliwość zapisu w dowolnych lokalizacjach w strukturze katalogów aplikacji, a także uniemożliwia dostęp do poufnych katalogów głównych.  
  
 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> Metoda zapisuje przekazany plik do określonego katalogu. W związku z tym aplikacja ASP.NET musi mieć dostęp do zapisu w katalogu na serwerze. Istnieją dwa sposoby, aby aplikacja mogła uzyskać dostęp do zapisu. Dostęp do zapisu można jawnie udzielić kontu, w którym jest uruchomiona aplikacja, w katalogu, w którym zostaną zapisane przekazane pliki. Alternatywnie można zwiększyć poziom zaufania przyznany aplikacji ASP.NET. Aby uzyskać dostęp do zapisu do katalogu wykonawczego dla aplikacji, do aplikacji musi być przyznany <xref:System.Web.AspNetHostingPermission> obiekt z poziomem zaufania ustawionym <xref:System.Web.AspNetHostingPermissionLevel.Medium?displayProperty=nameWithType> na wartość. Zwiększenie poziomu zaufania zwiększa dostęp aplikacji do zasobów na serwerze. Należy zauważyć, że nie jest to bezpieczne podejście, ponieważ złośliwy użytkownik, który uzyskuje kontrolę nad aplikacją, będzie również mógł działać w ramach tego wyższego poziomu zaufania. Najlepszym rozwiązaniem jest uruchomienie aplikacji ASP.NET w kontekście użytkownika z minimalnymi uprawnieniami, które są wymagane do uruchomienia aplikacji. Aby uzyskać więcej informacji o zabezpieczeniach w aplikacjach ASP.NET, zobacz [Podstawowe rozwiązania w zakresie zabezpieczeń dotyczące aplikacji sieci Web](https://msdn.microsoft.com/library/3eeeee9e-b09f-4c7f-8ce5-d9ca1f9322ad) oraz [poziomów zaufania ASP.NET i plików zasad](https://msdn.microsoft.com/library/f897c794-10d3-414c-86b7-59b66564bbf1).  
  
<a name="memory_limitations"></a>   
## <a name="memory-limitations"></a>Ograniczenia pamięci  
 Jednym ze sposobów ochrony przed atakami typu "odmowa usługi" jest ograniczenie rozmiaru plików, które można przekazać przy użyciu <xref:System.Web.UI.WebControls.FileUpload> formantu. Należy ustawić limit rozmiaru odpowiedni dla typów plików, które powinny być przekazane. Domyślny limit rozmiaru to 4096 kilobajtów (KB) lub 4 megabajtów (MB). Można zezwolić na przekazywanie większych plików przez ustawienie `maxRequestLength` atrybutu elementu [httpRuntime](https://msdn.microsoft.com/library/e9b81350-8aaf-47cc-9843-5f7d0c59f369) . Aby zwiększyć maksymalny dozwolony rozmiar pliku dla całej aplikacji, należy ustawić `maxRequestLength` atrybut w pliku Web. config. Aby zwiększyć maksymalny dozwolony rozmiar pliku dla określonej strony, należy ustawić `maxRequestLength` atrybut `location` wewnątrz elementu w pliku Web. config. Aby zapoznać się z przykładem, zobacz [element Location (ASP.NET Settings Schema)](https://msdn.microsoft.com/library/922ef7d5-da38-4661-b1c6-5b9e5ceda1d5).  
  
 Podczas przekazywania dużych plików użytkownik może również otrzymać następujący komunikat o błędzie:  
  
 `aspnet_wp.exe (PID: 1520) was recycled because memory consumption exceeded 460 MB (60 percent of available RAM).`  
  
 Jeśli użytkownicy napotkają ten komunikat o błędzie, należy zwiększyć wartość `memoryLimit` atrybutu w [processModel](https://msdn.microsoft.com/library/4b8fe20e-74c8-4566-b72c-ce5f83c8e32d) elementu w pliku Web. config dla aplikacji. Ten `memoryLimit` atrybut określa maksymalną ilość pamięci, która może być używana przez proces roboczy. Jeśli proces roboczy przekroczy `memoryLimit` wartość, zostanie utworzony nowy proces, aby go zastąpić, a wszystkie bieżące żądania zostaną ponownie przypisane do nowego procesu.  
  
 Aby kontrolować, czy plik do przekazania jest tymczasowo przechowywany w pamięci lub na serwerze podczas przetwarzania żądania, ustaw `requestLengthDiskThreshold` atrybut elementu [httpRuntime](https://msdn.microsoft.com/library/e9b81350-8aaf-47cc-9843-5f7d0c59f369) . Ten atrybut umożliwia zarządzanie rozmiarem buforu strumienia wejściowego. Wartość domyślna to 256 bajtów. Określona wartość nie powinna przekraczać wartości określonej dla `maxRequestLength` atrybutu.  
  
<a name="using_the_FileUpload_Control_with_the_UpdatePanel_control"></a>   
## <a name="using-the-fileupload-control-with-the-updatepanel-control"></a>Używanie formantu FileUpload z kontrolką UpdatePanel  
 <xref:System.Web.UI.WebControls.FileUpload> Kontrolka jest przeznaczona do użycia tylko w scenariuszach ogłaszania zwrotnego, a nie w scenariuszach asynchronicznego ogłaszania zwrotnego podczas renderowania częściowej strony. Gdy używasz <xref:System.Web.UI.WebControls.FileUpload> kontrolki <xref:System.Web.UI.UpdatePanel> wewnątrz kontrolki, plik musi być przekazywany przy użyciu kontrolki, która jest <xref:System.Web.UI.PostBackTrigger> obiektem panelu. <xref:System.Web.UI.UpdatePanel>kontrolki służą do aktualizowania wybranych regionów strony zamiast aktualizowania całej strony przy użyciu ogłaszania zwrotnego. Aby uzyskać więcej informacji, zobacz temat [formant UpdatePanel — Omówienie](https://msdn.microsoft.com/library/29a2265d-9674-4c19-b70e-e5560ee9689a) i [Przegląd renderowania części strony](https://msdn.microsoft.com/library/5c12736d-d9e9-464a-9388-3fe0f9f49e49).  
  
<a name="DeclarativeSyntax"></a>   
## <a name="declarative-syntax"></a>Składnia deklaracyjna  
  
```  
<asp:FileUpload  
    AccessKey="string"  
    BackColor="color name|#dddddd"  
    BorderColor="color name|#dddddd"  
    BorderStyle="NotSet|None|Dotted|Dashed|Solid|Double|Groove|Ridge|  
        Inset|Outset"  
    BorderWidth="size"  
    CssClass="string"  
    Enabled="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    Font-Bold="True|False"  
    Font-Italic="True|False"  
    Font-Names="string"  
    Font-Overline="True|False"  
    Font-Size="string|Smaller|Larger|XX-Small|X-Small|Small|Medium|  
        Large|X-Large|XX-Large"  
    Font-Strikeout="True|False"  
    Font-Underline="True|False"  
    ForeColor="color name|#dddddd"  
    Height="size"  
    ID="string"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnUnload="Unload event handler"  
    runat="server"  
    SkinID="string"  
    Style="string"  
    TabIndex="integer"  
    ToolTip="string"  
    Visible="True|False"  
    Width="size"  
/>  
```  
  
   
  
## Examples  
 Projekt witryny sieci Web programu Visual Studio z kodem źródłowym jest dostępny do załączenia do tego tematu: [Pobierz](https://go.microsoft.com/fwlink/?LinkId=191897).  
  
 Ta sekcja zawiera cztery przykłady:  
  
-   W pierwszym przykładzie pokazano, jak utworzyć <xref:System.Web.UI.WebControls.FileUpload> formant, który zapisuje pliki w ścieżce określonej w kodzie.  
  
-   W drugim przykładzie pokazano, jak utworzyć <xref:System.Web.UI.WebControls.FileUpload> formant, który zapisuje pliki w określonym katalogu w systemie plików dla aplikacji.  
  
-   Trzeci przykład ilustruje sposób tworzenia <xref:System.Web.UI.WebControls.FileUpload> kontrolki, która zapisuje pliki w określonej ścieżce i ogranicza rozmiar pliku, który można przekazać.  
  
-   W czwartym przykładzie pokazano, jak utworzyć <xref:System.Web.UI.WebControls.FileUpload> formant, który zapisuje pliki w określonej ścieżce i zezwala na przekazywanie tylko plików z rozszerzeniami. doc lub. xls.  
  
> [!CAUTION]
>  W tych przykładach przedstawiono podstawową składnię <xref:System.Web.UI.WebControls.FileUpload> kontrolki, ale nie są one zademonstrowane przed zapisaniem pliku. Aby zapoznać się z bardziej kompletnym <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>przykładem, zobacz.  
  
 Poniższy przykład pokazuje, jak utworzyć <xref:System.Web.UI.WebControls.FileUpload> formant, który zapisuje pliki w ścieżce określonej w kodzie. <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> Metoda jest wywoływana w celu zapisania pliku w określonej ścieżce na serwerze.  
  
 [!code-aspx-csharp[FileUploadClass1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadClass1/cs/fileuploadclass1cs.aspx#1)]
 [!code-aspx-vb[FileUploadClass1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadClass1/VB/fileuploadclass1vb.aspx#1)]  
  
 Poniższy przykład pokazuje, jak utworzyć <xref:System.Web.UI.WebControls.FileUpload> kontrolkę, która zapisuje pliki w określonym katalogu w systemie plików dla aplikacji. <xref:System.Web.HttpRequest.PhysicalApplicationPath%2A?displayProperty=nameWithType> Właściwość służy do uzyskiwania fizycznej ścieżki systemu plików katalogu głównego dla aktualnie wykonywanej aplikacji serwera. <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> Metoda jest wywoływana w celu zapisania pliku w określonej ścieżce na serwerze.  
  
 [!code-aspx-csharp[FileUploadClass2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadClass2/cs/fileuploadclass2cs.aspx#1)]
 [!code-aspx-vb[FileUploadClass2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadClass2/VB/fileuploadclass2vb.aspx#1)]  
  
 Poniższy przykład pokazuje, jak utworzyć <xref:System.Web.UI.WebControls.FileUpload> formant, który zapisuje pliki w ścieżce określonej w kodzie. Formant ogranicza rozmiar pliku, który można przekazać do 2 MB. Właściwość służy do uzyskiwania dostępu do właściwości podstawowej <xref:System.Web.HttpPostedFile.ContentLength%2A> i zwraca rozmiar pliku. <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> Jeśli rozmiar pliku do przekazania jest mniejszy niż 2 MB, <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> Metoda jest wywoływana w celu zapisania pliku w określonej ścieżce na serwerze. Oprócz sprawdzania maksymalnego rozmiaru pliku w kodzie aplikacji, można ustawić `maxRequestLength` atrybut elementu [httpRuntime](https://msdn.microsoft.com/library/e9b81350-8aaf-47cc-9843-5f7d0c59f369) na maksymalny dozwolony rozmiar w pliku konfiguracyjnym aplikacji.  
  
 [!code-aspx-csharp[FileUploadClass3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadClass3/cs/fileuploadclass3cs.aspx#1)]
 [!code-aspx-vb[FileUploadClass3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadClass3/VB/fileuploadclass3vb.aspx#1)]  
  
 Poniższy przykład pokazuje, jak utworzyć <xref:System.Web.UI.WebControls.FileUpload> formant, który zapisuje pliki w ścieżce określonej w kodzie. Ten przykład umożliwia przekazywanie tylko plików z rozszerzeniem nazwy pliku doc lub xls. <xref:System.IO.Path.GetExtension%2A?displayProperty=nameWithType> Metoda jest wywoływana w celu zwrócenia rozszerzenia pliku do przekazania. Jeśli plik ma rozszerzenie nazwy pliku doc lub xls, <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> Metoda jest wywoływana w celu zapisania pliku w określonej ścieżce na serwerze.  
  
 [!code-aspx-csharp[FileUploadClass4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadClass4/cs/fileuploadclass4cs.aspx#1)]
 [!code-aspx-vb[FileUploadClass4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadClass4/VB/fileuploadclass4vb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Web.UI.WebControls.FileUpload.SaveAs(System.String)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileUpload ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FileUpload.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileUpload();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.WebControls.FileUpload" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj konstruktora, aby zainicjować nowe wystąpienie <xref:System.Web.UI.WebControls.FileUpload> klasy. <xref:System.Web.UI.WebControls.FileUpload.%23ctor%2A> <xref:System.Web.UI.WebControls.FileUpload> Formant nie zapisuje automatycznie pliku na serwerze, gdy użytkownik wybierze plik do przekazania. Musisz jawnie udostępnić formant lub mechanizm pozwalający użytkownikowi na przesłanie określonego pliku. Na przykład możesz podać przycisk, który użytkownik klika, aby przekazać plik.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, jak zainicjować nowe wystąpienie <xref:System.Web.UI.WebControls.FileUpload> klasy. Należy zauważyć, że ten przykład ilustruje składnię konstruktora, ale nie dodaje funkcji do formantu po jego utworzeniu.  
  
 Ten przykład jest częścią większego przykładu dostarczonego dla <xref:System.Web.UI.WebControls.FileUpload> klasy.  
  
 [!code-aspx-vb[FileUploadCstr#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadCstr/VB/fileuploadcstrvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAttributesToRender">
      <MemberSignature Language="C#" Value="protected override void AddAttributesToRender (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddAttributesToRender(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FileUpload.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub AddAttributesToRender (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void AddAttributesToRender(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.AddAttributesToRender : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="fileUpload.AddAttributesToRender writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Reprezentuje strumień wyjściowy, aby renderować zawartość HTML na kliencie. <see cref="T:System.Web.UI.HtmlTextWriter" /></param>
        <summary>Dodaje atrybuty HTML i style <see cref="T:System.Web.UI.WebControls.FileUpload" /> kontrolki do renderowania do określonego <see cref="T:System.Web.UI.HtmlTextWriter" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda jest używana głównie przez deweloperów kontrolujących do wstawiania odpowiednich atrybutów i stylów <xref:System.Web.UI.HtmlTextWriter?displayProperty=nameWithType> do strumienia wyjściowego dla <xref:System.Web.UI.WebControls.FileUpload> kontrolki. <xref:System.Web.UI.WebControls.FileUpload.AddAttributesToRender%2A> <xref:System.Web.UI.WebControls.FileUpload.AddAttributesToRender%2A> Metoda<xref:System.Web.UI.WebControls.WebControl.AddAttributesToRender%2A?displayProperty=nameWithType> przesłania metodę.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
        <altmember cref="M:System.Web.UI.WebControls.WebControl.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="AllowMultiple">
      <MemberSignature Language="C#" Value="public virtual bool AllowMultiple { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowMultiple" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.AllowMultiple" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property AllowMultiple As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool AllowMultiple { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowMultiple : bool with get, set" Usage="System.Web.UI.WebControls.FileUpload.AllowMultiple" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą, czy można wybrać wiele plików do przekazania.</summary>
        <value><see langword="true" />Jeśli można wybrać wiele plików; w przeciwnym razie. <see langword="false" /></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FileBytes">
      <MemberSignature Language="C#" Value="public byte[] FileBytes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] FileBytes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.FileBytes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileBytes As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ FileBytes { cli::array &lt;System::Byte&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FileBytes : byte[]" Usage="System.Web.UI.WebControls.FileUpload.FileBytes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera tablicę bajtów w pliku, który jest określony za pomocą <see cref="T:System.Web.UI.WebControls.FileUpload" /> kontrolki.</summary>
        <value><see cref="T:System.Byte" /> Tablica, która zawiera zawartość określonego pliku.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FileUpload> Formant nie odczytuje automatycznie pliku z klienta. Musisz jawnie udostępnić formant lub mechanizm pozwalający użytkownikowi na przesłanie określonego pliku. Na przykład możesz podać przycisk, który użytkownik może kliknąć, aby przekazać plik. Kod, który można zapisać w celu zapisania określonego pliku, może wywołać <xref:System.Web.UI.WebControls.FileUpload.FileBytes%2A> właściwość, która zwraca zawartość pliku.  
  
 Przed wywołaniem <xref:System.Web.UI.WebControls.FileUpload.FileBytes%2A> właściwości należy <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> użyć <xref:System.Web.UI.WebControls.FileUpload> właściwości, aby sprawdzić, czy kontrolka zawiera plik do przekazania. <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> Jeśli zwraca `true`, wywołaj <xref:System.Web.UI.WebControls.FileUpload.FileBytes%2A> właściwość. Jeśli zwróci `false`, wyświetli komunikat dla użytkownika informującego, że formant nie zawiera pliku. Jeśli nie podasz kodu obsługi błędu w celu sprawdzenia, czy plik istnieje, próba zapisania nieistniejącego pliku zgłasza <xref:System.Web.HttpException> wyjątek.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, <xref:System.Web.UI.WebControls.FileUpload> jak utworzyć formant. Gdy użytkownik kliknie przycisk **Przekaż plik** , zawartość pliku zostanie wyświetlona jako bajty w polu tekstowym na stronie. Ten przykład używa właściwości <xref:System.Web.UI.WebControls.FileUpload.FileBytes%2A> , aby przekazać cały plik.  
  
 [!code-aspx-csharp[FileUploadFileBytes#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadFileBytes/CS/FileUploadFileBytesCS.aspx#1)]
 [!code-aspx-vb[FileUploadFileBytes#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadFileBytes/VB/FileUploadFileBytesVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Nie można odczytać całego pliku.</exception>
        <altmember cref="P:System.Web.UI.WebControls.FileUpload.HasFile" />
      </Docs>
    </Member>
    <Member MemberName="FileContent">
      <MemberSignature Language="C#" Value="public System.IO.Stream FileContent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream FileContent" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.FileContent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileContent As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Stream ^ FileContent { System::IO::Stream ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FileContent : System.IO.Stream" Usage="System.Web.UI.WebControls.FileUpload.FileContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt, który wskazuje plik do przekazania <see cref="T:System.Web.UI.WebControls.FileUpload" /> przy użyciu formantu. <see cref="T:System.IO.Stream" /></summary>
        <value>Wskazuje plik do przekazania <see cref="T:System.Web.UI.WebControls.FileUpload" />przy użyciu. <see cref="T:System.IO.Stream" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość pobiera obiekt, który wskazuje plik <xref:System.Web.UI.WebControls.FileUpload> do przekazania przy użyciu formantu. <xref:System.IO.Stream> <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> Użyj właściwości, aby uzyskać dostęp do zawartości pliku. Na przykład można użyć <xref:System.IO.Stream> obiektu, który jest zwracany przez tę właściwość, aby odczytać zawartość pliku jako bajty i zapisać je w tablicy bajtów.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, <xref:System.Web.UI.WebControls.FileUpload> jak utworzyć formant. <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> Właściwość służy do odczytywania zawartości pliku w tablicy bajtów. Gdy użytkownik kliknie przycisk **Przekaż plik** , zawartość pliku zostanie wyświetlona jako bajty w polu tekstowym na stronie.  
  
 [!code-aspx-csharp[FileUpload.FileContent#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUpload.FileContent/cs/fileupload.filecontentcs.aspx#1)]
 [!code-aspx-vb[FileUpload.FileContent#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUpload.FileContent/VB/fileupload.filecontentvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="M:System.Web.UI.WebControls.FileUpload.SaveAs(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="FileName">
      <MemberSignature Language="C#" Value="public string FileName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FileName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.FileName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FileName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FileName : string" Usage="System.Web.UI.WebControls.FileUpload.FileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę pliku na kliencie do przekazania przy użyciu <see cref="T:System.Web.UI.WebControls.FileUpload" /> kontrolki.</summary>
        <value>Ciąg określający nazwę pliku na kliencie do przekazania przy użyciu <see cref="T:System.Web.UI.WebControls.FileUpload" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pobiera nazwę pliku na kliencie do przekazania przy użyciu <xref:System.Web.UI.WebControls.FileUpload> kontrolki. Nazwa pliku zwracana przez <xref:System.Web.UI.WebControls.FileUpload.FileName%2A> właściwość nie obejmuje ścieżki pliku na kliencie.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak utworzyć <xref:System.Web.UI.WebControls.FileUpload> formant, który zapisuje pliki w ścieżce określonej w kodzie. <xref:System.Web.UI.WebControls.FileUpload.FileName%2A> Właściwość służy do pobierania nazwy pliku do przekazania. <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> Metoda jest wywoływana w celu zapisania pliku w określonej ścieżce na serwerze, przy użyciu nazwy pliku na komputerze klienckim. Należy zauważyć, że w tym przykładzie pokazano podstawową składnię dla tej kontrolki, ale nie przedstawiono wszystkich niezbędnych operacji sprawdzania błędów, które należy wykonać przed zapisaniem pliku. Aby zapoznać się z bardziej kompletnym <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>przykładem, zobacz.  
  
 [!code-aspx-csharp[FileUploadClass1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadClass1/cs/fileuploadclass1cs.aspx#1)]
 [!code-aspx-vb[FileUploadClass1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadClass1/VB/fileuploadclass1vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.FileUpload.SaveAs(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="HasFile">
      <MemberSignature Language="C#" Value="public bool HasFile { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.HasFile" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasFile As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasFile { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasFile : bool" Usage="System.Web.UI.WebControls.FileUpload.HasFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy <see cref="T:System.Web.UI.WebControls.FileUpload" /> kontrolka zawiera plik.</summary>
        <value><see langword="true" />Jeśli zawiera plik; w przeciwnym razie <see langword="false" />. <see cref="T:System.Web.UI.WebControls.FileUpload" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość pobiera wartość wskazującą, <xref:System.Web.UI.WebControls.FileUpload> czy kontrolka zawiera plik do przekazania. <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> Użyj tej właściwości, aby sprawdzić, czy plik do przekazania istnieje przed wykonaniem operacji na pliku. Na przykład przed wywołaniem <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> metody, aby zapisać plik na dysku, <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> Użyj właściwości, aby sprawdzić, czy plik istnieje. Jeśli <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> zwraca `true`, wywołaj metodę. Jeśli zwróci `false`, wyświetli komunikat dla użytkownika informującego, że formant nie zawiera pliku.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak utworzyć <xref:System.Web.UI.WebControls.FileUpload> formant, który przeprowadza sprawdzanie błędów. Przed zapisaniem pliku <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> Metoda jest wywoływana w celu sprawdzenia, czy kontrolka zawiera plik do przekazania. Ponadto <xref:System.IO.File.Exists%2A?displayProperty=nameWithType> Metoda jest wywoływana w celu sprawdzenia, czy plik o tej samej nazwie występuje już w ścieżce. Jeśli tak, nazwa pliku do przekazania jest poprzedzona znakiem podkreślenia przed <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> wywołaniem metody. Zapobiega to zastępowaniu istniejącego pliku.  
  
 [!code-aspx-csharp[FileUpload.SaveAs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUpload.SaveAs/cs/fileupload.saveascs.aspx#1)]
 [!code-aspx-vb[FileUpload.SaveAs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUpload.SaveAs/VB/fileupload.saveasvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.FileUpload.SaveAs(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="HasFiles">
      <MemberSignature Language="C#" Value="public bool HasFiles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasFiles" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.HasFiles" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasFiles As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasFiles { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasFiles : bool" Usage="System.Web.UI.WebControls.FileUpload.HasFiles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy zostały przekazane wszystkie pliki.</summary>
        <value><see langword="true" />Jeśli wszystkie pliki zostały przekazane; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda zwraca również `false` wartość, jeśli zostanie przekazany pusty plik (zero bajtów).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected internal override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FileUpload.OnPreRender(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnPreRender (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnPreRender(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnPreRender : EventArgs -&gt; unit" Usage="fileUpload.OnPreRender e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.EventArgs" /> Obiekt, który zawiera dane zdarzenia.</param>
        <summary><see cref="E:System.Web.UI.Control.PreRender" /> Podnosi zdarzenie <see cref="T:System.Web.UI.WebControls.FileUpload" /> dla kontrolki.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FileUpload.OnPreRender%2A> Metoda powiadamia<xref:System.Web.UI.WebControls.FileUpload> formant, aby wykonywał wszystkie niezbędne kroki przed renderowaniem, przed zapisaniem stanu widoku i renderowania zawartości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PostedFile">
      <MemberSignature Language="C#" Value="public System.Web.HttpPostedFile PostedFile { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpPostedFile PostedFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.PostedFile" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PostedFile As HttpPostedFile" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::HttpPostedFile ^ PostedFile { System::Web::HttpPostedFile ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PostedFile : System.Web.HttpPostedFile" Usage="System.Web.UI.WebControls.FileUpload.PostedFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.HttpPostedFile</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt źródłowy <see cref="T:System.Web.HttpPostedFile" /> dla pliku, który jest przekazywany przy <see cref="T:System.Web.UI.WebControls.FileUpload" /> użyciu formantu.</summary>
        <value>Dla pliku przekazanego przy <see cref="T:System.Web.UI.WebControls.FileUpload" />użyciu. <see cref="T:System.Web.HttpPostedFile" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość pobiera obiekt źródłowy <xref:System.Web.HttpPostedFile> dla pliku, który <xref:System.Web.UI.WebControls.FileUpload> jest przekazywany przy użyciu formantu. <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> Użyj tej właściwości, aby uzyskać dostęp do dodatkowych właściwości przekazanego pliku.  
  
 Możesz użyć <xref:System.Web.HttpPostedFile.ContentLength%2A> właściwości, aby uzyskać długość pliku. Możesz użyć <xref:System.Web.HttpPostedFile.ContentType%2A> właściwości, aby pobrać typ zawartości MIME dla pliku. Ponadto można użyć <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> właściwości, aby <xref:System.Web.HttpPostedFile.FileName%2A> uzyskać dostęp do właściwości, <xref:System.Web.HttpPostedFile.InputStream%2A> właściwości i <xref:System.Web.HttpPostedFile.SaveAs%2A> metody. Jednak te same funkcje są udostępniane przez <xref:System.Web.UI.WebControls.FileUpload.FileName%2A> Właściwość <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> , właściwość i <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> metodę.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, <xref:System.Web.UI.WebControls.FileUpload> jak utworzyć formant. Gdy użytkownik kliknie przycisk **Przekaż plik** , zawartość pliku zostanie wyświetlona jako bajty w polu tekstowym na stronie. Ten przykład używa właściwości <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> , aby <xref:System.Web.HttpPostedFile.ContentLength%2A?displayProperty=nameWithType> uzyskać dostęp do właściwości. <xref:System.Web.HttpPostedFile.ContentLength%2A> Właściwość służy do określenia długości pliku przed skopiowaniem zawartości pliku do tablicy bajtów.  
  
 [!code-aspx-csharp[FileUpload.FileContent#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUpload.FileContent/cs/fileupload.filecontentcs.aspx#1)]
 [!code-aspx-vb[FileUpload.FileContent#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUpload.FileContent/VB/fileupload.filecontentvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.HttpPostedFile" />
      </Docs>
    </Member>
    <Member MemberName="PostedFiles">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Web.HttpPostedFile&gt; PostedFiles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Web.HttpPostedFile&gt; PostedFiles" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.PostedFiles" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PostedFiles As IList(Of HttpPostedFile)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::Web::HttpPostedFile ^&gt; ^ PostedFiles { System::Collections::Generic::IList&lt;System::Web::HttpPostedFile ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PostedFiles : System.Collections.Generic.IList&lt;System.Web.HttpPostedFile&gt;" Usage="System.Web.UI.WebControls.FileUpload.PostedFiles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Web.HttpPostedFile&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję załadowanych plików.</summary>
        <value>Kolekcja załadowanych plików.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FileUpload.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.Render : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="fileUpload.Render writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Obiekt, który <see cref="T:System.Web.UI.WebControls.FileUpload" /> odbiera zawartość kontrolki. <see cref="T:System.Web.UI.HtmlTextWriter" /></param>
        <summary><see cref="T:System.Web.UI.HtmlTextWriter" /> Wysyła zawartość <see cref="T:System.Web.UI.WebControls.FileUpload" /> kontrolki do określonego obiektu, który zapisuje zawartość do renderowania na kliencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda wysyła zawartość kontrolki<xref:System.Web.UI.HtmlTextWriter?displayProperty=nameWithType> do określonego obiektu, który zapisuje zawartość do renderowania na kliencie. <xref:System.Web.UI.WebControls.FileUpload> <xref:System.Web.UI.WebControls.FileUpload.Render%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
      </Docs>
    </Member>
    <Member MemberName="SaveAs">
      <MemberSignature Language="C#" Value="public void SaveAs (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SaveAs(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FileUpload.SaveAs(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveAs (filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SaveAs(System::String ^ filename);" />
      <MemberSignature Language="F#" Value="member this.SaveAs : string -&gt; unit" Usage="fileUpload.SaveAs filename" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">Ciąg określający pełną ścieżkę lokalizacji serwera, na którym ma zostać zapisany przekazany plik.</param>
        <summary>Zapisuje zawartość przekazanego pliku do określonej ścieżki na serwerze sieci Web.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> Metoda zapisuje zawartość przekazanego pliku do określonej ścieżki na serwerze sieci Web.  
  
 <xref:System.Web.UI.WebControls.FileUpload> Formant nie zapisuje automatycznie pliku na serwerze, gdy użytkownik wybierze plik do przekazania. Musisz jawnie udostępnić formant lub mechanizm pozwalający użytkownikowi na przesłanie określonego pliku. Na przykład możesz podać przycisk, który użytkownik klika, aby przekazać plik. Kod, który można zapisać w celu zapisania określonego pliku powinien wywołać <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> metodę, która zapisuje zawartość pliku do określonej ścieżki na serwerze. <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> Zazwyczaj Metoda jest wywoływana w metodzie obsługi zdarzeń dla zdarzenia, które generuje wpis z powrotem do serwera. Na przykład, jeśli podajesz przycisk do przesyłania pliku, kod umożliwiający zapisanie pliku na serwerze może zostać uwzględniony w metodzie obsługi zdarzeń dla zdarzenia kliknięcia.  
  
 Po wywołaniu <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> metody należy określić pełną ścieżkę katalogu na serwerze, w którym ma zostać zapisany przekazany plik. Jeśli nie określisz jawnie ścieżki w kodzie aplikacji, <xref:System.Web.HttpException> wyjątek jest zgłaszany, gdy użytkownik próbuje przekazać plik. Takie zachowanie pomaga zachować bezpieczeństwo plików na serwerze, uniemożliwiając użytkownikom określenie ścieżki, w której mają zostać zapisane przekazane pliki.  
  
 Przed wywołaniem <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> metody należy <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> użyć <xref:System.Web.UI.WebControls.FileUpload> właściwości, aby sprawdzić, czy kontrolka zawiera plik do przekazania. <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> Jeśli zwraca `true`, wywołaj <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> metodę. Jeśli zwróci `false`, wyświetli komunikat dla użytkownika informującego, że formant nie zawiera pliku. Jeśli nie podasz kodu obsługi błędu w celu sprawdzenia, czy plik istnieje, próba zapisania nieistniejącego pliku zgłasza <xref:System.Web.HttpException> wyjątek.  
  
 Aby wywołanie <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> do działało, aplikacja ASP.NET musi mieć dostęp do zapisu w katalogu na serwerze. Istnieją dwa sposoby, aby aplikacja mogła uzyskać dostęp do zapisu. Dostęp do zapisu można jawnie udzielić kontu, w którym jest uruchomiona aplikacja, w katalogu, w którym zostaną zapisane przekazane pliki. Alternatywnie można zwiększyć poziom zaufania przyznany aplikacji ASP.NET. Aby uzyskać dostęp do zapisu do katalogu wykonawczego dla aplikacji, do aplikacji musi być przyznany <xref:System.Web.AspNetHostingPermission> obiekt z poziomem zaufania ustawionym <xref:System.Web.AspNetHostingPermissionLevel.Medium?displayProperty=nameWithType> na wartość. Zwiększenie poziomu zaufania zwiększa dostęp aplikacji do zasobów na serwerze. Należy zauważyć, że nie jest to bezpieczne podejście, ponieważ złośliwy użytkownik, który uzyskuje kontrolę nad aplikacją, będzie również mógł działać w ramach tego wyższego poziomu zaufania. Najlepszym rozwiązaniem jest uruchomienie aplikacji ASP.NET w kontekście użytkownika, który ma minimalne uprawnienia wymagane do uruchomienia aplikacji. Aby uzyskać więcej informacji o zabezpieczeniach w aplikacjach ASP.NET, zobacz [Podstawowe rozwiązania w zakresie zabezpieczeń dotyczące aplikacji sieci Web](https://msdn.microsoft.com/library/3eeeee9e-b09f-4c7f-8ce5-d9ca1f9322ad) oraz [poziomów zaufania ASP.NET i plików zasad](https://msdn.microsoft.com/library/f897c794-10d3-414c-86b7-59b66564bbf1).  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak utworzyć <xref:System.Web.UI.WebControls.FileUpload> formant, który przeprowadza sprawdzanie błędów. Przed zapisaniem <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> pliku Metoda jest wywoływana w celu sprawdzenia, czy istnieje plik do przekazania. Ponadto <xref:System.IO.File.Exists%2A?displayProperty=nameWithType> Metoda jest wywoływana w celu sprawdzenia, czy plik o tej samej nazwie już istnieje w ścieżce. Jeśli tak, nazwa pliku do przekazania jest poprzedzona liczbą przed <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> wywołaniem metody. Zapobiega to zastępowaniu istniejącego pliku.  
  
 [!code-aspx-csharp[FileUpload.SaveAs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUpload.SaveAs/cs/fileupload.saveascs.aspx#1)]
 [!code-aspx-vb[FileUpload.SaveAs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUpload.SaveAs/VB/fileupload.saveasvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException"><paramref name="filename" />nie jest pełną ścieżką.</exception>
        <altmember cref="P:System.Web.UI.WebControls.FileUpload.HasFile" />
        <related type="Article" href="https://msdn.microsoft.com/library/3eeeee9e-b09f-4c7f-8ce5-d9ca1f9322ad">Podstawowe rozwiązania w zakresie zabezpieczeń dla aplikacji sieci Web</related>
      </Docs>
    </Member>
  </Members>
</Type>