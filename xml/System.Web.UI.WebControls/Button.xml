<Type Name="Button" FullName="System.Web.UI.WebControls.Button">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="425e8160fd5105238c932694979f8a76688c675d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30691610" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Button : System.Web.UI.WebControls.WebControl, System.Web.UI.IPostBackEventHandler, System.Web.UI.WebControls.IButtonControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Button extends System.Web.UI.WebControls.WebControl implements class System.Web.UI.IPostBackEventHandler, class System.Web.UI.WebControls.IButtonControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.Button" />
  <TypeSignature Language="VB.NET" Value="Public Class Button&#xA;Inherits WebControl&#xA;Implements IButtonControl, IPostBackEventHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class Button : System::Web::UI::WebControls::WebControl, System::Web::UI::IPostBackEventHandler, System::Web::UI::WebControls::IButtonControl" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.IPostBackEventHandler</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.WebControls.IButtonControl</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Click")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Text")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.ButtonDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.DataBindingHandler("System.Web.UI.Design.TextDataBindingHandler, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.SupportsEventValidation</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ToolboxData("&lt;{0}:Button runat="server" Text="Button"&gt;&lt;/{0}:Button&gt;")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Wyświetla formant przycisku polecenia, na stronie sieci Web.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W tym temacie:  
  
-   [Wprowadzenie](#Introduction)  
  
-   [Przycisk odświeżania strony zachowanie i zdarzeń serwera](#ButtonPostbackBehaviorandServerEvents)  
  
-   [Obsługa zdarzeń przycisku w skrypt po stronie klienta](#HandlingButtonEventsinClientScript)  
  
-   [Formanty przycisków i sprawdzania poprawności](#ButtonControlsAndValidation)  
  
-   [Przyciski w formantach danych](#ButtonsInDataControls)  
  
-   [Wiązanie danych do formantów](#BindingDataToTheControls)  
  
-   [Za pomocą przycisków z formantami UpdatePanel](#UsingButtonsWithUpdatePanelControls)  
  
-   [Składni deklaratywnej](#DeclarativeSyntax)  
  
<a name="Introduction"></a>   
## <a name="introduction"></a>Wprowadzenie  
 Użyj <xref:System.Web.UI.WebControls.Button> formantu, aby utworzyć przycisku na stronie sieci Web umożliwiająca użytkownikom po stronie do serwera. Formant wyzwala zdarzenie w kodzie serwera, który może obsługiwać odpowiedzieć ogłaszania zwrotnego. Może też wiązać zdarzenia w skrypcie klienta, który może obsługiwać przed strona jest przesyłana lub który Uruchom, a następnie Anuluj przesłanie strony.  
  
> [!NOTE]
>  Program ASP.NET zawiera kilka rodzajów kontrolek przycisku, z których każdy występuje na stronach sieci Web. Są one <xref:System.Web.UI.WebControls.Button> formantu, który renderuje jako przycisk polecenia; <xref:System.Web.UI.WebControls.LinkButton> formant, który renderuje jako łącze; i <xref:System.Web.UI.WebControls.ImageButton> formantu, który renderuje jako obraz; i <xref:System.Web.UI.WebControls.ImageMap> kontroli, która umożliwia tworzenie grafikę, która zawiera punkty aktywne czy użytkownicy mogą kliknąć. Domyślnie wszystkich kontrolek przycisku Prześlij strony po kliknięciu. Można również użyć <xref:System.Web.UI.HtmlControls.HtmlButton> i <xref:System.Web.UI.HtmlControls.HtmlInputButton> kontrolki do tworzenia przycisków na stronie, których programowalnych w kodzie serwera. Aby uzyskać więcej informacji o różnicach między formantami serwera sieci Web i HTML, zobacz [omówienie kontrolek serwera sieci Web programu ASP.NET](http://msdn.microsoft.com/library/0d4854a3-6e79-4b7b-a27f-ac57cd9c2a84).  
  
 Domyślnie <xref:System.Web.UI.WebControls.Button> formant jest przycisk przesyłania. Przycisk przesyłania nie ma nazwy polecenia (określonego przez <xref:System.Web.UI.WebControls.Button.CommandName%2A> właściwości) związanych z przycisku i po prostu wpisów strony sieci Web z powrotem do serwera. Możesz podać programu obsługi zdarzeń dla <xref:System.Web.UI.WebControls.Button.Click> zdarzeń na potrzeby programistycznego sterowania akcje wykonywane po kliknięciu przycisku Prześlij.  
  
 Przycisk polecenia ma nazwę polecenia skojarzony z przyciskiem, takich jak `Sort`, ustawiając <xref:System.Web.UI.WebControls.Button.CommandName%2A> właściwości. Dzięki temu można utworzyć wiele <xref:System.Web.UI.WebControls.Button> formantów w sieci Web i programowo określenie <xref:System.Web.UI.WebControls.Button> formant zostanie kliknięty. Można również użyć <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> właściwości z przycisku polecenia, aby podać dodatkowe informacje dotyczące polecenia do wykonania, takich jak `Ascending`. Możesz podać programu obsługi zdarzeń dla <xref:System.Web.UI.WebControls.Button.Command> zdarzeń na potrzeby programistycznego sterowania akcje wykonywane po kliknięciu przycisku polecenia.  
  
<a name="ButtonPostbackBehaviorandServerEvents"></a>   
## <a name="button-postback-behavior-and-server-events"></a>Przycisk odświeżania strony zachowanie i zdarzeń serwera  
 Gdy użytkownik kliknie dowolnego przycisku kontrolki serwera sieci Web, strony są wysyłane do serwera. Powoduje to strony sieci Web do przetworzenia oraz wszelkie oczekujące zdarzenia do wywołania w kodzie oparte na serwerze. Po zakończeniu wszystkich strony i kontrolki przetwarzania strony renderowany w przeglądarce ponownie.  
  
 Przyciski może wiązać się z własnych <xref:System.Web.UI.WebControls.Button.Click> zdarzenia lub <xref:System.Web.UI.WebControls.Button.Command> zdarzenie, które można obsługiwać przy użyciu kodu na serwerze. Różni się od zdarzenia w tradycyjnych stron HTML lub w aplikacji sieci Web opartą na kliencie, gdy przycisk `onclick` zdarzenie jest obsługiwane przy użyciu języka JavaScript w kliencie. Aby uzyskać więcej informacji, zobacz [Model kontroli zdarzeń serwera formularzy sieci Web ASP.NET](http://msdn.microsoft.com/library/6304bff7-1b0e-4641-8acb-6d3b0badc4a3).  
  
 Gdy użytkownik kliknie przycisk formantu, strona jest przesyłana z powrotem do serwera. Domyślnie strona jest przesyłana z powrotem do samej siebie,  
  
 Można skonfigurować przyciski publikowania bieżącej strony do innej strony. Może to być przydatne do tworzenia formularzy wiele stron. Aby uzyskać więcej informacji, zobacz [między stronami księgowe w formularzach sieci Web ASP.NET](http://msdn.microsoft.com/library/fedf234e-b7c4-4644-a9e8-c1c0870b043b).  
  
<a name="HandlingButtonEventsinClientScript"></a>   
## <a name="handling-button-events-in-client-script"></a>Obsługa zdarzeń przycisku w skrypt po stronie klienta  
 Formanty przycisków podnieść zarówno serwera zdarzenia i klienta. Serwer zdarzenia występują po odświeżeniu strony i są obsługiwane w kodzie po stronie serwera, który zapisać strony. Zdarzenia klienta są obsługiwane w skrypt po stronie klienta, zwykle ECMAScript (JavaScript) i są wywoływane przed przesłaniem strony. Dodając zdarzeń po stronie klienta do kontrolki przycisku ASP.NET, wykonywanie zadań takich jak wyświetlanie okien dialogowych potwierdzenia przed przesłaniem strony i potencjalnie anulowanie przesyłania. Aby uzyskać więcej informacji, zobacz [skrypt po stronie klienta w programie ASP.NET Web Pages](http://msdn.microsoft.com/library/13edb6b9-2dea-43c6-b8c1-a47207de19aa) i [porady: odpowiadanie na zdarzenia kontrolki serwera sieci Web przycisku w skrypcie klienta](http://msdn.microsoft.com/library/1ab97f0b-1c38-4897-85b0-ac915f6a182b).  
  
 Można także <xref:System.Web.UI.WebControls.Button> formantu, aby używać skryptu klienta do wykonywania ogłaszania zwrotnego (a nie po prostu wykonywania operacji HTTP POST). Może to być przydatne, jeśli chcesz programowo manipulować ogłaszania zwrotnego, takie jak dołączeniu go do innych elementów na stronie. Można ustawić <xref:System.Web.UI.WebControls.Button> formantu <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> właściwości `true` spowodować <xref:System.Web.UI.WebControls.Button> odświeżania strony na podstawie formantu skryptu klienta.  
  
<a name="ButtonControlsAndValidation"></a>   
## <a name="button-controls-and-validation"></a>Formanty przycisków i sprawdzania poprawności  
 Jeśli strona zawiera kontrolki modułu sprawdzania poprawności ASP.NET, domyślnie, klikając kontrolkę przycisku powoduje, że formant modułu sprawdzania poprawności jej sprawdzania. Po włączeniu weryfikacji po stronie klienta dla kontrolki modułu walidacji strony nie jest przesłane, jeśli sprawdzanie poprawności nie powiodło się.  
  
 W poniższej tabeli opisano właściwości obsługiwanych przez formanty przycisków, które umożliwiają bardziej precyzyjne kontrolowanie procesu weryfikacji.  
  
|Właściwość|Opis|  
|--------------|-----------------|  
|<xref:System.Web.UI.WebControls.Button.CausesValidation%2A>|Określa, czy kliknięcie przycisku również jest wykonywane sprawdzanie poprawności. Ta właściwość jest ustawiana `false` zapobiegające sprawdzenia poprawności.|  
|<xref:System.Web.UI.WebControls.Button.ValidationGroup%2A>|Umożliwia określenie, które moduły weryfikacji na stronie są wywoływane po kliknięciu przycisku. Jeśli żadne grupy weryfikacji są nawiązane, kliknij przycisk wywołuje wszystkie moduły weryfikacji, które znajdują się na stronie.|  
  
 Aby uzyskać więcej informacji, zobacz [sprawdzanie poprawności danych wejściowych użytkownika w programie ASP.NET Web Pages](http://msdn.microsoft.com/library/4ad3dacb-89e0-4cee-89ac-40a3f2a85461).  
  
<a name="ButtonsInDataControls"></a>   
## <a name="buttons-in-data-controls"></a>Przyciski w formantach danych  
 Formanty serwera sieci Web przycisk są często używane w formantach danych, takich jak w <xref:System.Web.UI.WebControls.DataList>, <xref:System.Web.UI.WebControls.GridView>, i <xref:System.Web.UI.WebControls.Repeater> listy kontrolek. W takich przypadkach możesz zwykle nie odpowiadają bezpośrednio na przycisku kliknij zdarzenie. Zamiast tego przycisku wewnątrz formantu danych zgłasza zdarzenie, specyficzne dla formantu danych. Na przykład w <xref:System.Web.UI.WebControls.DataList> formantu przycisku może podnieść <xref:System.Web.UI.WebControls.DataList> formantu <xref:System.Web.UI.WebControls.DataList.ItemCommand> zdarzeń zamiast wywoływanie <xref:System.Web.UI.WebControls.Button> formantu <xref:System.Web.UI.WebControls.Button.Click> zdarzeń.  
  
 Formanty powiązane z danymi listy może zawierać wiele przycisków, można ustawić przycisku <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> właściwości w celu określenia wartości przekazywane w ramach zdarzenia. Następnie można przetestować dla tego argumentu zobaczyć, który przycisk został kliknięty.  
  
<a name="BindingDataToTheControls"></a>   
## <a name="binding-data-to-the-controls"></a>Wiązanie danych do formantów  
 Kontrolki serwera sieci Web przycisku można powiązać ze źródłem danych, aby kontrolować ustawienia ich właściwości dynamicznie. Na przykład można ustawić element button <xref:System.Web.UI.WebControls.Button.Text%2A> właściwości przy użyciu wiązania z danymi.  
  
<a name="UsingButtonsWithUpdatePanelControls"></a>   
## <a name="using-buttons-with-updatepanel-controls"></a>Za pomocą przycisków z formantami UpdatePanel  
 Częściowego renderowania strony umożliwia odświeżanie części strony bez odświeżania strony. <xref:System.Web.UI.UpdatePanel> Formanty umożliwiają oznaczenie części strony, które uczestniczą w czasie renderowania stron częściowych. Domyślnie zachowanie formanty <xref:System.Web.UI.UpdatePanel> sterować tym <xref:System.Web.UI.WebControls.Button> kontrolki, jest wykonanie asynchronicznego ogłaszania zwrotnego zamiast odświeżania strony. Spowoduje to odświeżenie tylko zawartość <xref:System.Web.UI.UpdatePanel> kontrolować, z którego pochodzi ogłaszania zwrotnego.  
  
 Oprócz tego scenariusza z <xref:System.Web.UI.WebControls.Button> formant, który znajduje się wewnątrz <xref:System.Web.UI.UpdatePanel> sterowania, można użyć <xref:System.Web.UI.WebControls.Button> formanty z <xref:System.Web.UI.UpdatePanel> formantów w następujących scenariuszach:  
  
-   Definiowanie <xref:System.Web.UI.WebControls.Button> formant, który znajduje się poza <xref:System.Web.UI.UpdatePanel> kontrolować jako <xref:System.Web.UI.AsyncPostBackTrigger> kontroli dla danego panelu. Po kliknięciu przycisku wykonuje asynchronicznego ogłaszania zwrotnego i odświeża zawartość panelu.  
  
-   Definiowanie <xref:System.Web.UI.WebControls.Button> formant, który znajduje się wewnątrz <xref:System.Web.UI.UpdatePanel> kontrolować jako <xref:System.Web.UI.PostBackTrigger> panelu. Po kliknięciu przycisku wykonuje odświeżenie strony, mimo że znajduje się wewnątrz <xref:System.Web.UI.UpdatePanel> formantu.  
  
 Aby uzyskać więcej informacji na temat stron częściowych renderowania i przy użyciu <xref:System.Web.UI.UpdatePanel> formantów, zobacz [informacje o formancie UpdatePanel](http://msdn.microsoft.com/library/29a2265d-9674-4c19-b70e-e5560ee9689a) i [omówienie renderowania stron częściowych](http://msdn.microsoft.com/library/5c12736d-d9e9-464a-9388-3fe0f9f49e49).  
  
<a name="DeclarativeSyntax"></a>   
## <a name="declarative-syntax"></a>Składnia deklaracyjna  
  
```  
<asp:Button  
    AccessKey="string"  
    BackColor="color name|#dddddd"  
    BorderColor="color name|#dddddd"  
    BorderStyle="NotSet|None|Dotted|Dashed|Solid|Double|Groove|Ridge|  
        Inset|Outset"  
    BorderWidth="size"  
    CausesValidation="True|False"  
    CommandArgument="string"  
    CommandName="string"  
    CssClass="string"  
    Enabled="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    Font-Bold="True|False"  
    Font-Italic="True|False"  
    Font-Names="string"  
    Font-Overline="True|False"  
    Font-Size="string|Smaller|Larger|XX-Small|X-Small|Small|Medium|  
        Large|X-Large|XX-Large"  
    Font-Strikeout="True|False"  
    Font-Underline="True|False"  
    ForeColor="color name|#dddddd"  
    Height="size"  
    ID="string"  
    OnClick="Click event handler"  
    OnClientClick="string"  
    OnCommand="Command event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnUnload="Unload event handler"  
    PostBackUrl="uri"  
    runat="server"  
    SkinID="string"  
    Style="string"  
    TabIndex="integer"  
    Text="string"  
    ToolTip="string"  
    UseSubmitBehavior="True|False"  
    ValidationGroup="string"  
    Visible="True|False"  
    Width="size"  
/>  
```  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób tworzenia Prześlij <xref:System.Web.UI.WebControls.Button> formant, który zapisuje zawartość na serwer strony sieci Web.  
  
 [!code-aspx-csharp[Classic Button Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic Button Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic Button Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic Button Example/VB/sourcevb.aspx#1)]  
  
 W poniższym przykładzie pokazano, jak utworzyć polecenie <xref:System.Web.UI.WebControls.Button> formant, który sortuje listę.  
  
 [!code-aspx-csharp[ButtonCommandNameArgument#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCommandNameArgument/CS/buttoncommandnamecs.aspx#1)]
 [!code-aspx-vb[ButtonCommandNameArgument#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCommandNameArgument/VB/buttoncommandnamevb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Web.UI.WebControls.Button.CommandName" />
    <altmember cref="P:System.Web.UI.WebControls.Button.CommandArgument" />
    <altmember cref="E:System.Web.UI.WebControls.Button.Click" />
    <altmember cref="E:System.Web.UI.WebControls.Button.Command" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Button ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Button();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.WebControls.Button" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor umożliwia tworzenie i zainicjować nowe wystąpienie klasy <xref:System.Web.UI.WebControls.Button> klasy.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób tworzenia i zainicjować nowe wystąpienie klasy <xref:System.Web.UI.WebControls.Button> klasy.  
  
 [!code-aspx-csharp[ButtonCtor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCtor/CS/buttonctorcs.aspx#1)]
 [!code-aspx-vb[ButtonCtor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCtor/VB/buttonctorvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAttributesToRender">
      <MemberSignature Language="C#" Value="protected override void AddAttributesToRender (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddAttributesToRender(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub AddAttributesToRender (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void AddAttributesToRender(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.Web.UI.HtmlTextWriter" /> Zawierający strumienia wyjściowego do renderowania na kliencie.</param>
        <summary>Dodaje atrybuty <see cref="T:System.Web.UI.WebControls.Button" /> formantu do strumienia wyjściowego do renderowania na kliencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższym przykładzie pokazano, jak zastąpić <xref:System.Web.UI.WebControls.Button.AddAttributesToRender%2A> metody w przypadku formantu niestandardowego serwera, aby <xref:System.Web.UI.WebControls.Button> zawsze wyświetlany w czerwony.  
  
 [!code-aspx-csharp[CustomButtonAddAttributesToRender#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomButtonAddAttributesToRender/CS/custombuttonaddattributestorendercs.aspx#1)]
 [!code-aspx-vb[CustomButtonAddAttributesToRender#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomButtonAddAttributesToRender/VB/custombuttonaddattributestorendervb.aspx#1)]  
[!code-csharp[CustomButtonAddAttributesToRender#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomButtonAddAttributesToRender/CS/custombuttonaddattributestorender.cs#2)]
[!code-vb[CustomButtonAddAttributesToRender#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomButtonAddAttributesToRender/VB/custombuttonaddattributestorender.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CausesValidation">
      <MemberSignature Language="C#" Value="public virtual bool CausesValidation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CausesValidation" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Button.CausesValidation" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CausesValidation As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CausesValidation { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.IButtonControl.CausesValidation</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy Weryfikacja jest przeprowadzana po <see cref="T:System.Web.UI.WebControls.Button" /> formant zostanie kliknięty.</summary>
        <value>
          <see langword="true" /> Jeśli weryfikacja jest przeprowadzana po <see cref="T:System.Web.UI.WebControls.Button" /> formant jest klikniętej; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie strony weryfikacji podczas <xref:System.Web.UI.WebControls.Button> formant zostanie kliknięty. Sprawdzanie poprawności strony określa, czy kontrolki wejściowe skojarzone z formantem sprawdzania poprawności na stronie Przekaż wszystkie reguły sprawdzania poprawności określonego przez formant sprawdzania poprawności.  
  
 Można określić lub określić, czy Weryfikacja jest przeprowadzana na kliencie i serwerze po <xref:System.Web.UI.WebControls.Button> formant zostanie kliknięty przy użyciu <xref:System.Web.UI.WebControls.Button.CausesValidation%2A> właściwości. Aby zapobiec sprawdzanie poprawności jest wykonywane, ustaw <xref:System.Web.UI.WebControls.Button.CausesValidation%2A> właściwości `false`.  
  
> [!NOTE]
>  Należy ustawić <xref:System.Web.UI.WebControls.Button.CausesValidation%2A> właściwości `false` podczas, używania <xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> właściwości ogłosić innej strony. Sprawdzania poprawności należy sprawdzić jawnie, gdy ogłoszenie do innej strony. Na przykład, zobacz sekcję uwag <xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> właściwości.  
  
 Ta właściwość jest zwykle ustawioną `false` dla `reset` lub `clear` przycisk, aby zapobiec weryfikację z wykonywane po kliknięciu przycisku.  
  
 Gdy wartość <xref:System.Web.UI.WebControls.Button.CausesValidation%2A> właściwość jest ustawiona na `true`, można również użyć <xref:System.Web.UI.WebControls.Button.ValidationGroup%2A> właściwości w celu określenia Nazwa grupy walidacji, dla którego <xref:System.Web.UI.WebControls.Button> formant powoduje sprawdzania poprawności.  
  
 Nie można ustawić tej właściwości kompozycji lub motywów arkusza stylów. Aby uzyskać więcej informacji, zobacz <xref:System.Web.UI.ThemeableAttribute> i [kompozycji ASP.NET i karnacji](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.WebControls.Button.CausesValidation%2A> właściwość, aby zapobiec Walidacja strony wystąpienia. Należy pamiętać, że <xref:System.Web.UI.WebControls.BaseValidator.Validate%2A> metody aktywuje każdego formantu weryfikacji niezależnie.  
  
> [!IMPORTANT]
>  W tym przykładzie ma pola tekstowego, który akceptuje dane wejściowe użytkownika, który jest potencjalnym zagrożeniem dla bezpieczeństwa. Domyślnie strony sieci Web ASP.NET zweryfikować, czy dane wejściowe użytkownika nie obejmuje skrypt lub elementów HTML. Aby uzyskać więcej informacji, zobacz [Przegląd wykorzystuje skryptu](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[ButtonControlCausesValidation#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonControlCausesValidation/CS/buttoncausesvalidationcs.aspx#1)]
 [!code-aspx-vb[ButtonControlCausesValidation#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonControlCausesValidation/VB/buttoncausesvalidationvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.Validate" />
        <altmember cref="P:System.Web.UI.WebControls.Button.ValidationGroup" />
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event EventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Click" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.Button.Click" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Click As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ Click;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Web.UI.WebControls.IButtonControl.Click</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy <see cref="T:System.Web.UI.WebControls.Button" /> formant zostanie kliknięty.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Button.Click> Zdarzenie jest zgłaszane, gdy <xref:System.Web.UI.WebControls.Button> formant zostanie kliknięty. To zdarzenie jest często używana nazwa polecenia, nie jest skojarzony z <xref:System.Web.UI.WebControls.Button> formantu (na przykład o przycisk Prześlij).  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, jak określić i kodu programu obsługi zdarzeń dla <xref:System.Web.UI.WebControls.Button.Click> strony zdarzeń, aby wyświetlić wiadomości w sieci Web, gdy <xref:System.Web.UI.WebControls.Button> formant zostanie kliknięty.  
  
 [!code-aspx-csharp[ButtonClickText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonClickText/cs/ButtonClickCS.aspx#1)]
 [!code-aspx-vb[ButtonClickText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonClickText/vb/ButtonClickVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.Button.OnClick(System.EventArgs)" />
        <altmember cref="T:System.Web.UI.WebControls.CommandEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.CommandEventHandler Command;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.CommandEventHandler Command" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.Button.Command" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Command As CommandEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Web::UI::WebControls::CommandEventHandler ^ Command;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Web.UI.WebControls.IButtonControl.Command</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.CommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy <see cref="T:System.Web.UI.WebControls.Button" /> formant zostanie kliknięty.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Button.Command> Zdarzenie jest zgłaszane, gdy <xref:System.Web.UI.WebControls.Button> formant zostanie kliknięty. To zdarzenie jest często używana nazwa polecenia, takich jak `Sort`, jest skojarzone z <xref:System.Web.UI.WebControls.Button> formantu. Dzięki temu można utworzyć wiele <xref:System.Web.UI.WebControls.Button> formantów w sieci Web i programowo określenie <xref:System.Web.UI.WebControls.Button> formant zostanie kliknięty.  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.Button.Command> Zdarzenie jest wywoływane przez hierarchię formantu w postaci `BubbleEvent`.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [NIB: Korzystanie z zdarzenia](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, jak określić i kodu programu obsługi zdarzeń dla <xref:System.Web.UI.WebControls.Button.Command> zdarzeń, aby posortować listę podczas <xref:System.Web.UI.WebControls.Button> formant zostanie kliknięty. W tym przykładzie określa program obsługi zdarzeń deklaratywnie, przy użyciu <xref:System.Web.UI.WebControls.Button.OnClick%2A> właściwość <xref:System.Web.UI.WebControls.Button> formantu.  
  
 [!code-aspx-csharp[ButtonCommandNameArgument#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCommandNameArgument/CS/buttoncommandnamecs.aspx#1)]
 [!code-aspx-vb[ButtonCommandNameArgument#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCommandNameArgument/VB/buttoncommandnamevb.aspx#1)]  
  
 Poniższy przykładowy kod przedstawia sposób określania obsługi zdarzenia i programowo Dodaj go do tego zdarzenia w `Page_Load` metody.  
  
 [!code-aspx-csharp[ButtonCommand#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCommand/CS/buttoncommandcs.aspx#1)]
 [!code-aspx-vb[ButtonCommand#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCommand/VB/buttoncommandvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.Button.OnCommand(System.Web.UI.WebControls.CommandEventArgs)" />
        <altmember cref="T:System.Web.UI.WebControls.CommandEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="CommandArgument">
      <MemberSignature Language="C#" Value="public string CommandArgument { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CommandArgument" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Button.CommandArgument" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandArgument As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CommandArgument { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.IButtonControl.CommandArgument</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia opcjonalny parametr przekazany do <see cref="E:System.Web.UI.WebControls.Button.Command" /> zdarzeń oraz skojarzone <see cref="P:System.Web.UI.WebControls.Button.CommandName" />.</summary>
        <value>Opcjonalny parametr przekazany do <see cref="E:System.Web.UI.WebControls.Button.Command" /> zdarzeń oraz skojarzone <see cref="P:System.Web.UI.WebControls.Button.CommandName" />. Wartość domyślna to <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> właściwości w celu określenia parametr, który pozdrowienia <xref:System.Web.UI.WebControls.Button.CommandName%2A> właściwości.  
  
> [!NOTE]
>  Mimo że można ustawić <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> właściwości samodzielnie, jest zwykle używana tylko w przypadku <xref:System.Web.UI.WebControls.Button.CommandName%2A> także ustawienia właściwości.  
  
 <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> Uzupełnia właściwości <xref:System.Web.UI.WebControls.Button.CommandName%2A> właściwości, umożliwiając znajdują się dodatkowe informacje na temat polecenia do wykonania. Na przykład jeśli ustawisz <xref:System.Web.UI.WebControls.Button.CommandName%2A> właściwości `Sort` i <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> właściwości `Ascending`, należy określić polecenie do sortowania w porządku rosnącym.  
  
 Nie można ustawić tej właściwości kompozycji lub motywów arkusza stylów. Aby uzyskać więcej informacji, zobacz <xref:System.Web.UI.ThemeableAttribute> i [kompozycji ASP.NET i karnacji](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> właściwość, aby utworzyć <xref:System.Web.UI.WebControls.Button> formant, który sortuje listę w kolejności rosnącej.  
  
 [!code-aspx-csharp[ButtonCommandNameArgument#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCommandNameArgument/CS/buttoncommandnamecs.aspx#1)]
 [!code-aspx-vb[ButtonCommandNameArgument#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCommandNameArgument/VB/buttoncommandnamevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.Button.Command" />
        <altmember cref="M:System.Web.UI.WebControls.Button.OnCommand(System.Web.UI.WebControls.CommandEventArgs)" />
        <altmember cref="P:System.Web.UI.WebControls.Button.CommandName" />
      </Docs>
    </Member>
    <Member MemberName="CommandName">
      <MemberSignature Language="C#" Value="public string CommandName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CommandName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Button.CommandName" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CommandName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.IButtonControl.CommandName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę polecenia skojarzony z <see cref="T:System.Web.UI.WebControls.Button" /> formant, który jest przekazywany do <see cref="E:System.Web.UI.WebControls.Button.Command" /> zdarzeń.</summary>
        <value>Nazwa polecenia <see cref="T:System.Web.UI.WebControls.Button" /> formantu. Wartość domyślna to <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli masz wiele <xref:System.Web.UI.WebControls.Button> formantów na stronie sieci Web, użyj <xref:System.Web.UI.WebControls.Button.CommandName%2A> właściwości do określania nazwy polecenia skojarzone z każdym <xref:System.Web.UI.WebControls.Button> formantu. Można ustawić <xref:System.Web.UI.WebControls.Button.CommandName%2A> właściwości z każdym ciągiem, który identyfikuje polecenie do wykonania. Następnie można programowo określić nazwę polecenia <xref:System.Web.UI.WebControls.Button> kontroli i wykonać odpowiednie działania.  
  
 Dodatkowe informacje na temat polecenia, takich jak `Ascending`, można określić za pomocą <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> właściwości.  
  
 Nie można ustawić tej właściwości kompozycji lub motywów arkusza stylów. Aby uzyskać więcej informacji, zobacz <xref:System.Web.UI.ThemeableAttribute> i [kompozycji ASP.NET i karnacji](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.WebControls.Button.CommandName%2A> właściwość, aby utworzyć <xref:System.Web.UI.WebControls.Button> formant, który sortuje listę.  
  
 [!code-aspx-csharp[ButtonCommandNameArgument#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCommandNameArgument/CS/buttoncommandnamecs.aspx#1)]
 [!code-aspx-vb[ButtonCommandNameArgument#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCommandNameArgument/VB/buttoncommandnamevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.Button.Command" />
        <altmember cref="M:System.Web.UI.WebControls.Button.OnCommand(System.Web.UI.WebControls.CommandEventArgs)" />
        <altmember cref="P:System.Web.UI.WebControls.Button.CommandArgument" />
      </Docs>
    </Member>
    <Member MemberName="GetPostBackOptions">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.PostBackOptions GetPostBackOptions ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.PostBackOptions GetPostBackOptions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.GetPostBackOptions" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetPostBackOptions () As PostBackOptions" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::PostBackOptions ^ GetPostBackOptions();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.PostBackOptions</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy <see cref="T:System.Web.UI.PostBackOptions" /> obiekt, który reprezentuje <see cref="T:System.Web.UI.WebControls.Button" /> zachowania odświeżania strony formantu.</summary>
        <returns>A <see cref="T:System.Web.UI.PostBackOptions" /> reprezentujący <see cref="T:System.Web.UI.WebControls.Button" /> zachowania odświeżania strony formantu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Button.GetPostBackOptions%2A> Metoda tworzy <xref:System.Web.UI.PostBackOptions> obiekt, który reprezentuje <xref:System.Web.UI.WebControls.Button> zachowania odświeżania strony formantu. <xref:System.Web.UI.PostBackOptions> Obiektu zwykle są następnie przekazywane do <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%29?displayProperty=nameWithType> metodę, która jest używana do uzyskiwania odwołanie do funkcji skryptu po stronie klienta, gdy została wywołana, powoduje, że serwer post wróć do strony.  
  
 Ta metoda jest używana głównie przez deweloperów sterowania podczas rozszerzania <xref:System.Web.UI.WebControls.Button> klasy.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Można zastąpić <see cref="M:System.Web.UI.WebControls.Button.GetPostBackOptions" /> metody w klasie pochodnej, aby zmodyfikować opcje odświeżania strony formantu przycisku lub wywołać skryptu po stronie klienta, gdy przycisk zostanie kliknięty. Pamiętaj wywołać klasy podstawowej <see cref="M:System.Web.UI.WebControls.Button.GetPostBackOptions" /> metody, dzięki czemu standardowe opcje odświeżania strony są ustawione.</para>
        </block>
        <altmember cref="T:System.Web.UI.PostBackOptions" />
      </Docs>
    </Member>
    <Member MemberName="OnClick">
      <MemberSignature Language="C#" Value="protected virtual void OnClick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClick(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.OnClick(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClick (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClick(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dane dotyczące zdarzenia.</param>
        <summary>Zgłasza <see cref="E:System.Web.UI.WebControls.Button.Click" /> zdarzenie <see cref="T:System.Web.UI.WebControls.Button" /> formantu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Button.Click> Zdarzenie jest zgłaszane, gdy <xref:System.Web.UI.WebControls.Button> formant zostanie kliknięty. To zdarzenie jest często używana nazwa polecenia, nie jest skojarzony z <xref:System.Web.UI.WebControls.Button> formantu (na przykład o przycisk Prześlij).  
  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).  
  
 <xref:System.Web.UI.WebControls.Button.OnClick%2A> Metoda umożliwia również klas pochodnych do obsługi zdarzenia bez dołączanie delegata. Jest to preferowana metoda obsługi zdarzeń w klasie pochodnej.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, jak określić i kodu programu obsługi zdarzeń dla <xref:System.Web.UI.WebControls.Button.Click> zdarzeń, aby wyświetlić komunikat prostego na stronie sieci Web.  
  
 [!code-aspx-csharp[ButtonClickText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonClickText/cs/ButtonClickCS.aspx#1)]
 [!code-aspx-vb[ButtonClickText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonClickText/vb/ButtonClickVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>W przypadku przesłaniania <see cref="M:System.Web.UI.WebControls.Button.OnClick(System.EventArgs)" /> w klasie pochodnej, należy wywołać klasy podstawowej <see cref="M:System.Web.UI.WebControls.Button.OnClick(System.EventArgs)" /> metody, które zarejestrowane delegatów odbierać zdarzenia.</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.Button.Click" />
        <altmember cref="T:System.EventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnClientClick">
      <MemberSignature Language="C#" Value="public virtual string OnClientClick { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OnClientClick" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Button.OnClientClick" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property OnClientClick As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ OnClientClick { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia skrypt po stronie klienta, który jest wykonywany kiedy <see cref="T:System.Web.UI.WebControls.Button" /> formantu <see cref="E:System.Web.UI.WebControls.Button.Click" /> zdarzenia.</summary>
        <value>Skrypt po stronie klienta, który jest wykonywany kiedy <see cref="T:System.Web.UI.WebControls.Button" /> formantu <see cref="E:System.Web.UI.WebControls.Button.Click" /> zdarzenia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.Button.OnClientClick%2A> właściwości w celu określenia dodatkowych skrypt po stronie klienta, który wykonuje kiedy <xref:System.Web.UI.WebControls.Button> formantu <xref:System.Web.UI.WebControls.Button.Click> zdarzenia. Skrypt umożliwiający określenie dla tej właściwości jest renderowany w <xref:System.Web.UI.WebControls.Button> formantu `OnClick` atrybutu oprócz formantu wstępnie zdefiniowane skryptu po stronie klienta.  
  
 Nie można ustawić tej właściwości kompozycji lub motywów arkusza stylów. Aby uzyskać więcej informacji, zobacz <xref:System.Web.UI.ThemeableAttribute> i [kompozycji ASP.NET i karnacji](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Projekt programu Visual Studio Web lokacji z kodem źródłowym jest dostępna powiązany z tym tematem: [Pobierz](http://go.microsoft.com/fwlink/?LinkId=192871).  
  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.WebControls.Button.OnClientClick%2A> właściwości w celu określenia dodatkowych skrypt po stronie klienta, który wykonuje kiedy <xref:System.Web.UI.WebControls.Button> formant zostanie kliknięty.  
  
 [!code-aspx-csharp[Button.OnClientClick#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Button.OnClientClick/cs/button.onclientclickcs.aspx#1)]
 [!code-aspx-vb[Button.OnClientClick#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Button.OnClientClick/vb/button.onclientclickvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.Button.Click" />
      </Docs>
    </Member>
    <Member MemberName="OnCommand">
      <MemberSignature Language="C#" Value="protected virtual void OnCommand (System.Web.UI.WebControls.CommandEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCommand(class System.Web.UI.WebControls.CommandEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.OnCommand(System.Web.UI.WebControls.CommandEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCommand (e As CommandEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCommand(System::Web::UI::WebControls::CommandEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.CommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dane dotyczące zdarzenia.</param>
        <summary>Zgłasza <see cref="E:System.Web.UI.WebControls.Button.Command" /> zdarzenie <see cref="T:System.Web.UI.WebControls.Button" /> formantu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Button.Command> Zdarzenie jest zgłaszane, gdy <xref:System.Web.UI.WebControls.Button> formant zostanie kliknięty. To zdarzenie jest często używana nazwa polecenia, takich jak `Sort`, jest skojarzone z <xref:System.Web.UI.WebControls.Button> formantu. Dzięki temu można utworzyć wiele <xref:System.Web.UI.WebControls.Button> formantów w sieci Web i programowo określenie <xref:System.Web.UI.WebControls.Button> formant zostanie kliknięty.  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.Button.Command> Zdarzenie jest wywoływane przez hierarchię formantu w postaci `BubbleEvent`.  
  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).  
  
 <xref:System.Web.UI.WebControls.Button.OnCommand%2A> Metoda umożliwia również klas pochodnych do obsługi zdarzenia bez dołączanie delegata. Jest to preferowana metoda obsługi zdarzeń w klasie pochodnej.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, jak określić i kodu programu obsługi zdarzeń dla <xref:System.Web.UI.WebControls.Button.Command> zdarzeń, aby posortować listę podczas <xref:System.Web.UI.WebControls.Button> formant zostanie kliknięty. W tym przykładzie określa program obsługi zdarzeń deklaratywnie, przy użyciu <xref:System.Web.UI.WebControls.Button.OnClick%2A> właściwość <xref:System.Web.UI.WebControls.Button> formantu.  
  
 [!code-aspx-csharp[ButtonCommandNameArgument#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCommandNameArgument/CS/buttoncommandnamecs.aspx#1)]
 [!code-aspx-vb[ButtonCommandNameArgument#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCommandNameArgument/VB/buttoncommandnamevb.aspx#1)]  
  
 Poniższy przykładowy kod przedstawia sposób określania obsługi zdarzenia i programowo Dodaj go do tego zdarzenia w `Page_Load` metody.  
  
 [!code-aspx-csharp[ButtonCommand#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCommand/CS/buttoncommandcs.aspx#1)]
 [!code-aspx-vb[ButtonCommand#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCommand/VB/buttoncommandvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>W przypadku przesłaniania <see cref="M:System.Web.UI.WebControls.Button.OnCommand(System.Web.UI.WebControls.CommandEventArgs)" /> w klasie pochodnej, należy wywołać klasy podstawowej <see cref="M:System.Web.UI.WebControls.Button.OnCommand(System.Web.UI.WebControls.CommandEventArgs)" /> metody, które zarejestrowane delegatów odbierać zdarzenia.</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.Button.Command" />
        <altmember cref="T:System.Web.UI.WebControls.CommandEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected internal override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.OnPreRender(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnPreRender (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnPreRender(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dane dotyczące zdarzenia.</param>
        <summary>Określa, czy przycisk został kliknięty przed renderowaniem na kliencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Button.OnPreRender%2A> Metoda jest używana głównie przez deweloperów sterowania podczas tworzenia klasy pochodnej z klasy niestandardowej <xref:System.Web.UI.WebControls.Button> formantu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PostBackUrl">
      <MemberSignature Language="C#" Value="public virtual string PostBackUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PostBackUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Button.PostBackUrl" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property PostBackUrl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ PostBackUrl { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.IButtonControl.PostBackUrl</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty("*.aspx")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia adres URL strony do wysłania do z bieżącej strony, gdy <see cref="T:System.Web.UI.WebControls.Button" /> formant zostanie kliknięty.</summary>
        <value>Adres URL strony sieci Web do wysłania do z bieżącej strony, gdy <see cref="T:System.Web.UI.WebControls.Button" /> formant zostanie kliknięty. Wartość domyślna to ciąg pusty (""), co powoduje, że strona publikowania do samej siebie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> Właściwości umożliwia wykonywanie post przy użyciu między stronami <xref:System.Web.UI.WebControls.Button> formantu.  
  
> [!NOTE]
>  Tylko prawidłowo określonych ścieżek działać z tą właściwością. Na przykład ścieżek względnych (Test/default.aspx), ścieżki bezwzględne (https://localhost/WebApp/default.aspx) i wirtualnych (~ \Test\default.aspx) działają poprawnie. Nieprawidłowo sformatowana ścieżek, takich jak "/ Test/default.aspx" lub "\Test\default.aspx" nie działają. Zobacz [ścieżki projektu sieci Web ASP.NET](http://msdn.microsoft.com/library/2447f50c-b849-483c-8093-85ed53e7a5bd) Aby uzyskać informacje na temat tworzenia prawidłowe ścieżki.  
  
 Ustaw <xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> właściwość adres URL strony sieci Web można opublikować when <xref:System.Web.UI.WebControls.Button> formant zostanie kliknięty. Na przykład określenie `Page2.aspx` powoduje, że strony zawierającej <xref:System.Web.UI.WebControls.Button> formantu do wysłania do `Page2.aspx`. Jeśli nie określisz wartości <xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> właściwości, strona dokonuje ogłoszenia samej siebie.  
  
> [!IMPORTANT]
>  Podczas odświeżania strony między stronami z formantami z weryfikacji po stronie serwera, należy sprawdzić, które strony <xref:System.Web.UI.Page.IsValid%2A> właściwość jest `true` przed przetworzeniem ogłaszania zwrotnego. W przypadku odświeżania strony między stronami, jest stronę, aby sprawdzić <xref:System.Web.UI.Page.PreviousPage%2A>. Poniższy kod VB przedstawia, jak to zrobić:  
  
```  
Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load  
        If Page.PreviousPage.IsValid Then  
            ' Handle the post back  
        Else  
            Response.Write("Invalid")  
        End If  
End Sub  
```  
  
 Aby uzyskać więcej informacji o technikach publikowanie między stronami, zobacz [między stronami księgowe w formularzach sieci Web ASP.NET](http://msdn.microsoft.com/library/fedf234e-b7c4-4644-a9e8-c1c0870b043b).  
  
 Nie można ustawić tej właściwości kompozycji lub motywów arkusza stylów. Aby uzyskać więcej informacji, zobacz <xref:System.Web.UI.ThemeableAttribute> i [kompozycji ASP.NET i karnacji](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> właściwości do wykonania po między stronami. Po kliknięciu przez użytkownika <xref:System.Web.UI.WebControls.Button> formantu strony zapisuje wartość wprowadzona w polu tekstowym do strony docelowej, określone przez <xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> właściwości. Aby uruchomić ten przykład, należy także utworzyć plik strony docelowej w tym samym katalogu co w tym przykładzie kodu. Kod dla strony docelowej znajduje się w następnym przykładzie.  
  
 [!code-aspx-csharp[Button.PostBackUrlProperty#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Button.PostBackUrlProperty/CS/button.postbackurlpropertycs.aspx#1)]
 [!code-aspx-vb[Button.PostBackUrlProperty#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Button.PostBackUrlProperty/VB/button.postbackurlpropertyvb.aspx#1)]  
  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.Page.PreviousPage%2A?displayProperty=nameWithType> właściwości dostęp wartość, która była umieszczona z innej strony przy użyciu <xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> właściwości. Ta strona pobiera ciąg, który został zaksięgowany z poprzedniej strony i wyświetla dla użytkownika. Próba uruchomienia tego przykładu kodu bezpośrednio otrzymasz błąd, ponieważ wartość `text` pole będzie `null`. Użyj tego kodu do tworzenia strony docelowej i umieścić go w tym samym katalogu co w poprzednim przykładzie kodu. Nazwa pliku musi odpowiadać wartości określonej dla <xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> właściwości w poprzednim przykładzie. Po uruchomieniu kodu w poprzednim przykładzie, ta strona zostanie wykonany automatycznie, gdy występuje post między stronami.  
  
> [!IMPORTANT]
>  W tym przykładzie ma pola tekstowego, który akceptuje dane wejściowe użytkownika, który jest potencjalnym zagrożeniem dla bezpieczeństwa. Domyślnie strony sieci Web ASP.NET zweryfikować, czy dane wejściowe użytkownika nie obejmuje skrypt lub elementów HTML. Aby uzyskać więcej informacji, zobacz [Przegląd wykorzystuje skryptu](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[Button.PostBackUrlPage2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Button.PostBackUrlPage2/CS/button.postbackurlpage2cs.aspx#1)]
 [!code-aspx-vb[Button.PostBackUrlPage2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Button.PostBackUrlPage2/VB/button.postbackurlpage2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Page.PreviousPage" />
      </Docs>
    </Member>
    <Member MemberName="RaisePostBackEvent">
      <MemberSignature Language="C#" Value="protected virtual void RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.RaisePostBackEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub RaisePostBackEvent (eventArgument As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void RaisePostBackEvent(System::String ^ eventArgument);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">Argument zdarzenia.</param>
        <summary>Informuje o zdarzeniach dla <see cref="T:System.Web.UI.WebControls.Button" /> kontroli, gdy ogłoszenia na serwerze.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie jest używana wewnętrznie przez <xref:System.Web.UI.WebControls.Button> kontroli, po kliknięciu, aby podnieść <xref:System.Web.UI.WebControls.Button.Click> zdarzenia i jeśli zdefiniowane, <xref:System.Web.UI.WebControls.Button.Command> zdarzeń.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.Button.Click" />
        <altmember cref="E:System.Web.UI.WebControls.Button.Command" />
      </Docs>
    </Member>
    <Member MemberName="RenderContents">
      <MemberSignature Language="C#" Value="protected internal override void RenderContents (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void RenderContents(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.RenderContents(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub RenderContents (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void RenderContents(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter" /> obiekt, który reprezentuje strumienia wyjściowego do renderowania elementów HTML zawartości na kliencie.</param>
        <summary>Renderuje zawartość formantu w określonym składniku zapisywania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższym przykładzie pokazano, jak zastąpić <xref:System.Web.UI.WebControls.Button.RenderContents%2A> metoda niestandardowego serwera kontroli tak, aby zawsze wyświetlany tekst niestandardowy <xref:System.Web.UI.WebControls.Button> kontrolki serwera.  
  
 [!code-aspx-csharp[CustomButtonRenderContents#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomButtonRenderContents/CS/custombuttonrendercontentscs.aspx#1)]
 [!code-aspx-vb[CustomButtonRenderContents#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomButtonRenderContents/VB/custombuttonrendercontentsvb.aspx#1)]  
[!code-csharp[CustomButtonRenderContents#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomButtonRenderContents/CS/custombuttonrendercontents.cs#2)]
[!code-vb[CustomButtonRenderContents#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomButtonRenderContents/VB/custombuttonrendercontents.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackEventHandler.RaisePostBackEvent">
      <MemberSignature Language="C#" Value="void IPostBackEventHandler.RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.System#Web#UI#IPostBackEventHandler#RaisePostBackEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub RaisePostBackEvent (eventArgument As String) Implements IPostBackEventHandler.RaisePostBackEvent" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(System::String ^ eventArgument) = System::Web::UI::IPostBackEventHandler::RaisePostBackEvent;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">Argument zdarzenia.</param>
        <summary>Informuje o zdarzeniach dla <see cref="T:System.Web.UI.WebControls.Button" /> kontroli, gdy ogłoszenia na serwerze.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie jest używana wewnętrznie przez <xref:System.Web.UI.WebControls.Button> kontroli, po kliknięciu, aby podnieść <xref:System.Web.UI.WebControls.Button.Click> zdarzenia i jeśli zdefiniowane, <xref:System.Web.UI.WebControls.Button.Command> zdarzeń.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, jak zastąpić <xref:System.Web.UI.WebControls.Button.System%23Web%23UI%23IPostBackEventHandler%23RaisePostBackEvent%2A> metody, aby zawsze zgłasza <xref:System.Web.UI.WebControls.Button.OnClick%2A> zdarzenia w niestandardowej <xref:System.Web.UI.WebControls.Button> formantu.  
  
 [!code-csharp[CustomButtonRaisePostBackEvent#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomButtonRaisePostBackEvent/CS/custombuttonraisepostbackevent.cs#2)]
 [!code-vb[CustomButtonRaisePostBackEvent#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomButtonRaisePostBackEvent/VB/custombuttonraisepostbackevent.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.Button.Click" />
        <altmember cref="E:System.Web.UI.WebControls.Button.Command" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Button.Text" />
      <MemberSignature Language="VB.NET" Value="Public Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.IButtonControl.Text</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia podpis tekstowy wyświetlany w <see cref="T:System.Web.UI.WebControls.Button" /> formantu.</summary>
        <value>Podpis tekstowy wyświetlany w <see cref="T:System.Web.UI.WebControls.Button" /> formantu. Wartość domyślna to <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.Button.Text%2A> właściwości do określania podpis do wyświetlenia w <xref:System.Web.UI.WebControls.Button> formantu.  
  
 Wartość tej właściwości, gdy są ustawione, można zapisać automatycznie plik zasobów przy użyciu narzędzia Projektant. Aby uzyskać więcej informacji, zobacz <xref:System.ComponentModel.LocalizableAttribute> i [lokalizacja i globalizacja](http://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.WebControls.Button.Text%2A> właściwości w celu określenia Podpis wyświetlany w <xref:System.Web.UI.WebControls.Button> formantu.  
  
 [!code-aspx-csharp[ButtonClickText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonClickText/cs/ButtonClickCS.aspx#1)]
 [!code-aspx-vb[ButtonClickText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonClickText/vb/ButtonClickVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.String.Empty" />
      </Docs>
    </Member>
    <Member MemberName="UseSubmitBehavior">
      <MemberSignature Language="C#" Value="public virtual bool UseSubmitBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseSubmitBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Button.UseSubmitBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property UseSubmitBehavior As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool UseSubmitBehavior { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą czy <see cref="T:System.Web.UI.WebControls.Button" /> kontrola korzysta klient przeglądarki przesłać mechanizm lub mechanizmu odświeżania strony programu ASP.NET.</summary>
        <value>
          <see langword="true" /> Jeśli w przeglądarce klienta używa kontrolki przesłać mechanizmu; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> właściwości w celu określenia czy <xref:System.Web.UI.WebControls.Button> kontrola korzysta klient przeglądarki przesłać mechanizm lub mechanizmu odświeżania strony programu ASP.NET. Domyślna wartość tej właściwości jest `true`, powodując <xref:System.Web.UI.WebControls.Button> mechanizmu przesłać kontroli korzystanie z przeglądarki. Jeśli określisz `false`, architekturę stron ASP.NET dodaje skryptu po stronie klienta do strony, aby post formularza do serwera.  
  
 Gdy <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> właściwość jest `false`, kontroli deweloperzy mogą używać <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> metodę, aby zwrócić klienta ogłaszanie zdarzeń dla <xref:System.Web.UI.WebControls.Button>. Długość ciągu zwróconego przez <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> metoda zawiera tekst wywołania funkcji klienta i można wstawiać do obsługi zdarzeń po stronie klienta.  
  
 Nie można ustawić tej właściwości kompozycji lub motywów arkusza stylów. Aby uzyskać więcej informacji, zobacz <xref:System.Web.UI.ThemeableAttribute> i [kompozycji ASP.NET i karnacji](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> właściwości w celu określenia mechanizm przesyłania który <xref:System.Web.UI.WebControls.Button> kontroli używa podczas zapisuje go na serwer. <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> Właściwość jest ustawiona na `false`, powoduje, aby używać programu ASP.NET ogłaszanie mechanizmu. Wyświetlenie kodu źródłowego dla renderowanej strony za pomocą polecenia Wyświetl źródło w przeglądarce pojawi się, czy skrypt po stronie klienta został dodany przez platformę ASP.NET strony w celu post formularza do serwera.  
  
 [!code-aspx-csharp[Button.UseSubmitBehavior#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Button.UseSubmitBehavior/CS/button.usesubmitbehaviorcs.aspx#1)]
 [!code-aspx-vb[Button.UseSubmitBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Button.UseSubmitBehavior/VB/button.usesubmitbehaviorvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.GetPostBackEventReference" />
      </Docs>
    </Member>
    <Member MemberName="ValidationGroup">
      <MemberSignature Language="C#" Value="public virtual string ValidationGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ValidationGroup" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Button.ValidationGroup" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ValidationGroup As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ValidationGroup { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.IButtonControl.ValidationGroup</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia grupy formantów, dla którego <see cref="T:System.Web.UI.WebControls.Button" /> formant powoduje sprawdzania poprawności, gdy ogłasza go do serwera.</summary>
        <value>Grupa formantów, dla którego <see cref="T:System.Web.UI.WebControls.Button" /> formant powoduje sprawdzania poprawności, gdy ogłasza go do serwera. Wartością domyślną jest ciąg pusty ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sprawdzanie poprawności grupy umożliwiają przypisywanie weryfikacji formantów na stronie do jednej konkretnej kategorii. Każda grupa sprawdzania poprawności można zweryfikować niezależnie od innych grup sprawdzania poprawności na stronie. Użyj <xref:System.Web.UI.WebControls.Button.ValidationGroup%2A> właściwości w celu określenia Nazwa grupy walidacji, dla którego <xref:System.Web.UI.WebControls.Button> formant powoduje sprawdzania poprawności, gdy ogłasza go do serwera.  
  
 Ta właściwość ma zastosowanie tylko wtedy, gdy wartość <xref:System.Web.UI.WebControls.Button.CausesValidation%2A> właściwość jest ustawiona na `true`. Po określeniu wartość <xref:System.Web.UI.WebControls.Button.ValidationGroup%2A> są tylko formanty weryfikacji, które należą do określonej grupy właściwości, sprawdzania poprawności, gdy <xref:System.Web.UI.WebControls.Button> kontroli ogłoszenia na serwerze. Jeśli nie określisz wartości dla tej właściwości i <xref:System.Web.UI.WebControls.Button.CausesValidation%2A> właściwość jest ustawiona na `true`, wszystkie formanty walidacji na stronie, które nie są przypisane do grupy sprawdzania poprawności są weryfikowane, gdy formant ogłasza do serwera.  
  
 Nie można ustawić tej właściwości kompozycji lub motywów arkusza stylów. Aby uzyskać więcej informacji, zobacz <xref:System.Web.UI.ThemeableAttribute> i [kompozycji ASP.NET i karnacji](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.WebControls.Button.ValidationGroup%2A> właściwości w celu określenia służy do sprawdzania poprawności, gdy <xref:System.Web.UI.WebControls.Button> kontroli ogłoszenia na serwerze. Strona zawiera trzy pola tekstowe do przechwycenia danych użytkownika i trzy <xref:System.Web.UI.WebControls.RequiredFieldValidator> formantów, aby upewnić się, że użytkownik nie wypełniaj pola tekstowego. <xref:System.Web.UI.WebControls.RequiredFieldValidator> Kontrolki dla pól tekstowych dwóch pierwszych znajdują się w `PersonalInfoGroup` grupy sprawdzania poprawności i <xref:System.Web.UI.WebControls.RequiredFieldValidator> kontrolować trzecie pole tekstowe jest `LocationInfoGroup` grupy sprawdzania poprawności. Gdy `Button1` zostanie kliknięty tylko formanty w grupie weryfikacji `PersonalInfoGroup` są weryfikowane. Gdy `Button2` kliknięciu formantu w grupie weryfikacji `LocationInfoGroup` sprawdzania poprawności.  
  
> [!IMPORTANT]
>  W tym przykładzie ma pola tekstowego, który akceptuje dane wejściowe użytkownika, który jest potencjalnym zagrożeniem dla bezpieczeństwa. Domyślnie strony sieci Web ASP.NET zweryfikować, czy dane wejściowe użytkownika nie obejmuje skrypt lub elementów HTML. Aby uzyskać więcej informacji, zobacz [Przegląd wykorzystuje skryptu](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[Button.ValidationGroup#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Button.ValidationGroup/CS/button.validationgroupcs.aspx#1)]
 [!code-aspx-vb[Button.ValidationGroup#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Button.ValidationGroup/VB/button.validationgroupvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Button.CausesValidation" />
        <altmember cref="T:System.Web.UI.WebControls.RequiredFieldValidator" />
      </Docs>
    </Member>
  </Members>
</Type>