<Type Name="BaseValidator" FullName="System.Web.UI.WebControls.BaseValidator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="857f98a43ffd80e764520effd4dff0282709e51f" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69393837" /></Metadata><TypeSignature Language="C#" Value="public abstract class BaseValidator : System.Web.UI.WebControls.Label, System.Web.UI.IValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit BaseValidator extends System.Web.UI.WebControls.Label implements class System.Web.UI.IValidator" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.BaseValidator" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class BaseValidator&#xA;Inherits Label&#xA;Implements IValidator" />
  <TypeSignature Language="C++ CLI" Value="public ref class BaseValidator abstract : System::Web::UI::WebControls::Label, System::Web::UI::IValidator" />
  <TypeSignature Language="F#" Value="type BaseValidator = class&#xA;    inherit Label&#xA;    interface IValidator" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.Label</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.IValidator</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("ErrorMessage")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.BaseValidatorDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.BaseValidatorDesigner, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.BaseValidatorDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Służy jako abstrakcyjna klasa bazowa dla kontrolek walidacji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.BaseValidator> Klasa zawiera podstawowe implementacje dla wszystkich kontrolek walidacji. Kontrolki walidacji służą do sprawdzania poprawności danych wejściowych użytkownika w skojarzonej kontrolce wejściowej. Gdy użytkownik wprowadzi wartość, która kończy się niepowodzeniem walidacji, w kontrolce walidacji zostanie wyświetlony komunikat o błędzie. Ponieważ kontrolka walidacji jest oddzielona od kontrolki wejściowej, można umieścić komunikat o błędzie w dowolnym miejscu na stronie względem kontrolki wejściowej. ASP.NET zapewnia kilka kontrolek weryfikacji, które wykonują określone typy walidacji. W poniższej tabeli opisano te kontrolki.  
  
|Kontrolka walidacji|Opis|  
|------------------------|-----------------|  
|<xref:System.Web.UI.WebControls.CompareValidator>|Sprawdza poprawność wartości wprowadzonej w innej kontrolce wejściowej, względem wartości stałej lub dla odpowiedniego typu danych przez ustawienie <xref:System.Web.UI.WebControls.CompareValidator.Operator%2A?displayProperty=nameWithType> właściwości na. <xref:System.Web.UI.WebControls.ValidationCompareOperator.DataTypeCheck?displayProperty=nameWithType>|  
|<xref:System.Web.UI.WebControls.CustomValidator>|Sprawdza poprawność wartości przy użyciu procedury niestandardowego sprawdzania poprawności dostarczonej przez użytkownika.|  
|<xref:System.Web.UI.WebControls.RangeValidator>|Sprawdza, czy wartość znajduje się w zakresie wartości.|  
|<xref:System.Web.UI.WebControls.RegularExpressionValidator>|Sprawdza poprawność wartości przy użyciu wyrażenia regularnego.|  
|<xref:System.Web.UI.WebControls.RequiredFieldValidator>|Sprawdza, czy wartość została wprowadzona w wymaganym polu.|  
  
 Kontrolki walidacji zawsze sprawdzają poprawność skojarzonej kontroli danych wejściowych na serwerze. Kontrolki walidacji zawierają również kompletną implementację po stronie klienta, która umożliwia wykonywanie walidacji na kliencie przy użyciu przeglądarek z obsługą skryptów (takich jak program Microsoft Internet Explorer w wersji 4,0 lub nowszej). Weryfikacja po stronie klienta usprawnia proces weryfikacji, sprawdzając dane wejściowe użytkownika przed wysłaniem ich do serwera. Pozwala to na wykrycie błędów na kliencie przed przesłaniem formularza, unikając rundy informacji niezbędnych do weryfikacji po stronie serwera.  
  
 Aby sprawdzić inne kryteria, można użyć wielu kontrolek sprawdzania poprawności. Na przykład można zastosować wiele kontrolek walidacji w <xref:System.Web.UI.WebControls.TextBox> formancie. Możesz użyć <xref:System.Web.UI.WebControls.RangeValidator> kontrolki, aby upewnić się, że wartość wprowadzona <xref:System.Web.UI.WebControls.TextBox> w kontrolce znajduje się w <xref:System.Web.UI.WebControls.RequiredFieldValidator> określonym zakresie, i kontrolce, aby upewnić się, że użytkownik wprowadzi wartość.  
  
 ASP.NET zapewnia wiele kontrolek, które mogą publikować z powrotem na serwerze. Jeśli jedna z tych kontrolek ma `CausesValidation` ustawioną właściwość `true`na, walidacja jest wykonywana, gdy sterowanie zostanie odesłane na serwer. Następujące kontrolki umożliwiają publikowanie z powrotem na serwerze:  
  
-   <xref:System.Web.UI.WebControls.BulletedList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.Button?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.CheckBox?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.CheckBoxList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.DropDownList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlButton?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputButton?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputImage?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.ImageButton?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.LinkButton?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.ListBox?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.RadioButtonList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.TextBox?displayProperty=nameWithType>  
  
> [!NOTE]
>  Niektóre z tych kontrolek ogłaszają się z powrotem do serwera `AutoPostBack` tylko wtedy, gdy `true`właściwość jest ustawiona na.  
  
 Każdy z tych formantów ma `ValidationGroup` właściwość, która po ustawieniu sprawdza tylko kontrolki walidacji w określonej grupie, gdy kontrolka wyzwala wpis z powrotem na serwerze. Aby grupować kontrolki walidacji, <xref:System.Web.UI.WebControls.BaseValidator.ValidationGroup%2A> należy ustawić tę samą wartość właściwości każdej kontrolki walidacji.  
  
 Aby skojarzyć kontrolkę wejściową z kontrolką walidacji, <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> Użyj właściwości. Aby określić tekst, który ma być wyświetlany w kontrolce walidacji, gdy Walidacja nie powiedzie się, użyj <xref:System.Web.UI.WebControls.BaseValidator.Text%2A> właściwości. Możesz również wyświetlić podsumowanie wszystkich formantów, które nie powiodą się walidacją na stronie przy użyciu <xref:System.Web.UI.WebControls.ValidationSummary> kontrolki. Aby określić tekst, który ma być wyświetlany <xref:System.Web.UI.WebControls.ValidationSummary> w kontrolce, <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> Użyj właściwości.  
  
> [!NOTE]
>  Jeśli ustawisz <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> Właściwość bez <xref:System.Web.UI.WebControls.BaseValidator.Text%2A> ustawiania właściwości <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> , wartość właściwości zostanie również wyświetlona w kontrolce walidacji.  
  
 W przypadku korzystania z formantów walidatora zawsze należy sprawdzać wyniki weryfikacji po stronie serwera przed wykonaniem jakiegokolwiek przetwarzania. Po zakończeniu ogłaszania zwrotnego, ale przed wywołaniem metod zdarzenia, Strona wywołuje kontrolki walidacji i agreguje ich <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> wyniki do właściwości. (Można również wywołać kontrolki walidacji jawnie za pomocą `Validate` metody). W swoim własnym kodzie należy sprawdzić, czy <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> Właściwość zwraca `true` przed przetwarzaniem danych wejściowych. Mimo że przeglądarki z obsługą skryptów mogą uniemożliwić ogłaszanie zwrotne na kliencie, jeśli sprawdzanie poprawności zakończy się niepowodzeniem, należy również <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> zaewidencjonować kod serwera przed przetworzeniem zweryfikowanych danych.  
  
 Możesz również ręcznie przeprowadzić walidację. Aby sprawdzić poprawność wszystkich kontrolek weryfikacji na stronie <xref:System.Web.UI.Page.Validate%2A?displayProperty=nameWithType> , użyj metody. Poszczególne kontrolki weryfikacji można zweryfikować przy użyciu <xref:System.Web.UI.WebControls.BaseValidator.Validate%2A> metody kontrolki.  
  
> [!NOTE]
>  Jeśli używasz <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> właściwości `Page_Load` w metodzie, <xref:System.Web.UI.Page.Validate%2A?displayProperty=nameWithType> musisz najpierw jawnie wywołać metodę. Ponieważ Walidacja jest wykonywana <xref:System.Web.UI.Control.Load?displayProperty=nameWithType> po zdarzeniu dla strony, ale przed zajściem `Click` zdarzenia lub `Command` <xref:System.Web.UI.Page.Validate%2A?displayProperty=nameWithType> , <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> właściwość nie jest aktualizowana do momentu wywołania metody. Alternatywnie można umieścić kod w procedurze obsługi zdarzeń dla `Click` zdarzenia lub `Command` zamiast `Page_Load` metody.  
  
 Nie wszystkie formanty serwera sieci Web obsługują kontrolki walidacji. Standardowe kontrolki, które mogą być zweryfikowane przy użyciu kontrolki walidacji, są następujące:  
  
-   <xref:System.Web.UI.WebControls.DropDownList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.FileUpload?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.ListBox?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.RadioButtonList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.TextBox?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputFile?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputPassword?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputText?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlSelect?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlTextArea?displayProperty=nameWithType>  
  
> [!NOTE]
>  Aby kontrolka wejściowa została sprawdzona, <xref:System.Web.UI.ValidationPropertyAttribute?displayProperty=nameWithType> należy zastosować atrybut do kontrolki.  
  
> [!NOTE]
>  W przypadku korzystania z formantów modułu sprawdzania poprawności <xref:System.Web.UI.WebControls.BaseValidator> , które <xref:System.Web.UI.UpdatePanel> pochodzą z wewnątrz kontrolki, upewnij się, że kontrolka walidacji i kontrolka, z którą jest skojarzona, znajdują się na tym samym panelu. Aby uzyskać więcej informacji o używaniu <xref:System.Web.UI.UpdatePanel> kontrolki do aktualizacji częściowej strony, zobacz [częściowe Omówienie renderowania strony](https://msdn.microsoft.com/library/5c12736d-d9e9-464a-9388-3fe0f9f49e49).  
  
 Gdy Walidacja nie powiedzie się, można ustawić fokus na skojarzonej kontrolce wejściowej, `true`ustawiając <xref:System.Web.UI.WebControls.BaseValidator.SetFocusOnError%2A> właściwość na.  
  
 Aby uzyskać listę początkowych wartości właściwości dla wystąpienia <xref:System.Web.UI.WebControls.BaseValidator>, <xref:System.Web.UI.WebControls.BaseValidator.%23ctor%2A> Zobacz Konstruktor.  
  
## <a name="accessibility"></a>Ułatwienia dostępu  
 Aby uzyskać informacje o sposobie konfigurowania tego formantu tak, aby generował znaczniki, które są zgodne ze standardami dostępności, zobacz [ułatwienia dostępu w programie Visual Studio oraz formanty ASP.NET](https://msdn.microsoft.com/library/7e3ce9c4-6b7d-4fb1-94b5-72cf2a44fe13) i [ASP.NET i ułatwienia dostępu](https://msdn.microsoft.com/library/847a37e3-ce20-41da-b0d3-7dfb0fdae9a0).  
  
   
  
## Examples  
 Poniższy przykład kodu ilustruje sposób używania wielu kontrolek weryfikacji, aby sprawdzić, czy użytkownik wprowadza prawidłową wartość w <xref:System.Web.UI.WebControls.TextBox> kontrolce.  
  
> [!IMPORTANT]
>  Ten przykład zawiera pole tekstowe akceptujące dane wejściowe użytkownika, które jest potencjalnym zagrożeniem bezpieczeństwa. Domyślnie strony sieci Web ASP.NET sprawdzają, czy dane wejściowe użytkownika nie obejmują elementów skryptu ani HTML. Aby uzyskać więcej informacji, zobacz [Omówienie luk](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)w zabezpieczeniach.  
  
 [!code-aspx-csharp[Classic BaseValidator Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic BaseValidator Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic BaseValidator Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic BaseValidator Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>W przypadku dziedziczenia z <see cref="T:System.Web.UI.WebControls.BaseValidator" /> klasy należy zastąpić następujący element członkowski:. <see cref="M:System.Web.UI.WebControls.BaseValidator.EvaluateIsValid" /></para></block>
    <altmember cref="T:System.Web.UI.WebControls.CompareValidator" />
    <altmember cref="T:System.Web.UI.WebControls.CustomValidator" />
    <altmember cref="T:System.Web.UI.WebControls.RangeValidator" />
    <altmember cref="T:System.Web.UI.WebControls.RegularExpressionValidator" />
    <altmember cref="T:System.Web.UI.WebControls.RequiredFieldValidator" />
    <altmember cref="T:System.Web.UI.WebControls.ValidationSummary" />
    <altmember cref="P:System.Web.UI.WebControls.IButtonControl.CausesValidation" />
    <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ErrorMessage" />
    <altmember cref="P:System.Web.UI.WebControls.BaseValidator.Text" />
    <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ValidationGroup" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected BaseValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; BaseValidator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.WebControls.BaseValidator" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor nie jest wywoływany bezpośrednio. Kontrolki walidacji dziedziczące z tej klasy mogą wywoływać tego konstruktora z własnych konstruktorów w celu zainicjowania właściwości podstawowych.  
  
 W poniższej tabeli przedstawiono początkowe wartości właściwości dla wystąpienia <xref:System.Web.UI.WebControls.BaseValidator>.  
  
|Właściwość|Wartość początkowa|  
|--------------|-------------------|  
|<xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A>|`true`|  
|<xref:System.Web.UI.WebControls.BaseValidator.ForeColor%2A>|<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>|  
|<xref:System.Web.UI.WebControls.BaseValidator.PropertiesValid%2A>|`true`|  
|<xref:System.Web.UI.WebControls.BaseValidator.RenderUplevel%2A>|`false`|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.CompareValidator.#ctor" />
        <altmember cref="M:System.Web.UI.WebControls.CustomValidator.#ctor" />
        <altmember cref="M:System.Web.UI.WebControls.RangeValidator.#ctor" />
        <altmember cref="M:System.Web.UI.WebControls.RegularExpressionValidator.#ctor" />
        <altmember cref="M:System.Web.UI.WebControls.RequiredFieldValidator.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="AddAttributesToRender">
      <MemberSignature Language="C#" Value="protected override void AddAttributesToRender (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddAttributesToRender(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub AddAttributesToRender (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void AddAttributesToRender(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.AddAttributesToRender : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="baseValidator.AddAttributesToRender writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Reprezentuje strumień wyjściowy, aby renderować zawartość HTML na kliencie. <see cref="T:System.Web.UI.HtmlTextWriter" /></param>
        <summary>Dodaje atrybuty HTML i style, które muszą być renderowane dla formantu do określonego <see cref="T:System.Web.UI.HtmlTextWriter" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.BaseValidator.AddAttributesToRender%2A> Metoda jest używana do renderowania atrybutów formantu w tagu HTML dla formantu. Ta metoda jest zwykle zastępowana przez deweloperów formantów w klasach pochodnych do wstawiania odpowiednich atrybutów i stylów do <xref:System.Web.UI.HtmlTextWriter> strumienia wyjściowego dla kontrolki.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Podczas zastępowania <see cref="M:System.Web.UI.WebControls.BaseValidator.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" /> metody należy wywołać odpowiednią metodę w klasie bazowej. W przeciwnym razie atrybuty zawarte w klasie bazowej nie będą renderowane.</para></block>
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
      </Docs>
    </Member>
    <Member MemberName="AssociatedControlID">
      <MemberSignature Language="C#" Value="public override string AssociatedControlID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssociatedControlID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.AssociatedControlID" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property AssociatedControlID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ AssociatedControlID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AssociatedControlID : string with get, set" Usage="System.Web.UI.WebControls.BaseValidator.AssociatedControlID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ta właściwość nie jest obsługiwana.</summary>
        <value>Ta właściwość nie jest obsługiwana i zawsze zgłasza <see cref="T:System.NotSupportedException" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość nie jest obsługiwana. Ta właściwość jest obsługiwana tylko w klasie bazowej <xref:System.Web.UI.WebControls.Label> .  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Podjęto próbę ustawienia tej właściwości.</exception>
        <altmember cref="P:System.Web.UI.WebControls.Label.AssociatedControlID" />
      </Docs>
    </Member>
    <Member MemberName="CheckControlValidationProperty">
      <MemberSignature Language="C#" Value="protected void CheckControlValidationProperty (string name, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void CheckControlValidationProperty(string name, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.CheckControlValidationProperty(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub CheckControlValidationProperty (name As String, propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void CheckControlValidationProperty(System::String ^ name, System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.CheckControlValidationProperty : string * string -&gt; unit" Usage="baseValidator.CheckControlValidationProperty (name, propertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Kontrolka do zweryfikowania.</param>
        <param name="propertyName">Dodatkowy tekst opisujący Źródło wyjątku, jeśli wyjątek jest zgłaszany za pomocą tej metody.</param>
        <summary>Sprawdza, czy określony formant znajduje się na stronie i zawiera właściwości walidacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda jest metodą pomocnika używaną głównie <xref:System.Web.UI.WebControls.BaseValidator.ControlPropertiesValid%2A> przez metodę w celu sprawdzenia, czy określony formant znajduje się na stronie i zawiera właściwości walidacji. <xref:System.Web.UI.WebControls.BaseValidator.CheckControlValidationProperty%2A> Ta metoda nie zwraca wartości, aby zgłosić wynik. Zamiast tego zgłasza wyjątek, gdy weryfikacja nie powiedzie się.  
  
> [!NOTE]
>  Ta metoda jest używana głównie przez deweloperów kontroli.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Nie znaleziono określonej kontrolki.  
  
—lub— 
Określony formant nie ma <see cref="T:System.Web.UI.ValidationPropertyAttribute" /> skojarzonego z nim atrybutu; w związku z tym nie można go zweryfikować przy użyciu kontrolki walidacji.</exception>
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.ControlPropertiesValid" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.PropertiesValid" />
        <altmember cref="T:System.Web.UI.ValidationPropertyAttribute" />
      </Docs>
    </Member>
    <Member MemberName="ControlPropertiesValid">
      <MemberSignature Language="C#" Value="protected virtual bool ControlPropertiesValid ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ControlPropertiesValid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.ControlPropertiesValid" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ControlPropertiesValid () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ControlPropertiesValid();" />
      <MemberSignature Language="F#" Value="abstract member ControlPropertiesValid : unit -&gt; bool&#xA;override this.ControlPropertiesValid : unit -&gt; bool" Usage="baseValidator.ControlPropertiesValid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Określa, czy formant określony przez <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> właściwość jest prawidłowym formantem.</summary>
        <returns><see langword="true" />Jeśli formant określony przez <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> jest prawidłowym formantem; w przeciwnym razie,. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda jest metodą pomocnika, która jest używana głównie <xref:System.Web.UI.WebControls.BaseValidator.PropertiesValid%2A> przez <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> właściwość w celu ustalenia, czy właściwość zawiera prawidłową kontrolkę wejściową. <xref:System.Web.UI.WebControls.BaseValidator.ControlPropertiesValid%2A> Aby była prawidłową kontrolą wejściową, <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> właściwość musi być ustawiona na wartość i musi być kontrolką na stronie, która obsługuje walidację.  
  
> [!NOTE]
>  Ta metoda jest używana głównie przez deweloperów kontroli.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Nie określono <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> wartości właściwości.  
  
—lub— 
Na stronie nie znaleziono kontrolki <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> wejściowej określonej przez właściwość.  
  
—lub— 
Kontrolka wejściowa określona przez <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> właściwość nie <see cref="T:System.Web.UI.ValidationPropertyAttribute" /> ma skojarzonego z nią atrybutu; w związku z tym nie można jej zweryfikować przy użyciu kontrolki walidacji.</exception>
        <altmember cref="T:System.Web.UI.ValidationPropertyAttribute" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.PropertiesValid" />
      </Docs>
    </Member>
    <Member MemberName="ControlToValidate">
      <MemberSignature Language="C#" Value="public string ControlToValidate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ControlToValidate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />
      <MemberSignature Language="VB.NET" Value="Public Property ControlToValidate As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ControlToValidate { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ControlToValidate : string with get, set" Usage="System.Web.UI.WebControls.BaseValidator.ControlToValidate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.WebControls.ValidatedControlConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.IDReferenceProperty</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia kontrolkę wejściową do walidacji.</summary>
        <value>Kontrolka wejściowa do zweryfikowania. Wartość domyślna to <see cref="F:System.String.Empty" />, co oznacza, że ta właściwość nie jest ustawiona.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> Użyj właściwości, aby określić kontrolkę wejściową do zweryfikowania. Ta właściwość musi być ustawiona na identyfikator kontrolki wprowadzania dla wszystkich kontrolek weryfikacji z wyjątkiem <xref:System.Web.UI.WebControls.CustomValidator> kontrolki, które mogą pozostać puste. Jeśli nie określisz prawidłowej kontrolki wejściowej, zostanie zgłoszony wyjątek podczas renderowania strony. Identyfikator musi odwoływać się do kontrolki w tym samym kontenerze, w którym znajduje się kontrolka walidacji. Musi znajdować się na tej samej stronie lub kontrolce użytkownika lub musi znajdować się w tym samym szablonie kontrolki z szablonem.  
  
 Standardowe kontrolki, które można sprawdzić, to:  
  
-   <xref:System.Web.UI.WebControls.DropDownList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.FileUpload?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.ListBox?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.RadioButtonList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.TextBox?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputFile?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputPassword?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputText?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlSelect?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlTextArea?displayProperty=nameWithType>  
  
> [!NOTE]
>  Aby kontrolka wejściowa została sprawdzona, <xref:System.Web.UI.ValidationPropertyAttribute?displayProperty=nameWithType> należy zastosować atrybut do kontrolki.  
  
 Wszystkie kontrolki walidacji, <xref:System.Web.UI.WebControls.RequiredFieldValidator> z wyjątkiem kontrolki, przekazują sprawdzanie poprawności, Jeśli kontrolka wejściowa określona <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> przez właściwość nie zawiera tekstu. Jeśli używasz <xref:System.Web.UI.WebControls.CustomValidator> formantu, funkcje walidacji po stronie klienta i po stronie serwera nie są wywoływane.  
  
 Tej właściwości nie można ustawić za pomocą motywów lub motywów arkuszy stylów. Aby uzyskać więcej informacji, <xref:System.Web.UI.ThemeableAttribute> Zobacz temat i [ASP.NET motywy i karnacje](https://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak użyć <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> właściwości, aby określić kontrolkę wejściową do zweryfikowania.  
  
 [!code-aspx-csharp[Classic BaseValidator Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic BaseValidator Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic BaseValidator Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic BaseValidator Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.String.Empty" />
        <altmember cref="T:System.Web.UI.ValidationPropertyAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.RequiredFieldValidator" />
        <altmember cref="T:System.Web.UI.WebControls.CustomValidator" />
      </Docs>
    </Member>
    <Member MemberName="DetermineRenderUplevel">
      <MemberSignature Language="C#" Value="protected virtual bool DetermineRenderUplevel ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool DetermineRenderUplevel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.DetermineRenderUplevel" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function DetermineRenderUplevel () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool DetermineRenderUplevel();" />
      <MemberSignature Language="F#" Value="abstract member DetermineRenderUplevel : unit -&gt; bool&#xA;override this.DetermineRenderUplevel : unit -&gt; bool" Usage="baseValidator.DetermineRenderUplevel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Określa, czy kontrolka walidacji może wykonywać walidację po stronie klienta.</summary>
        <returns><see langword="true" />Jeśli kontrolka walidacji może wykonać walidację po stronie klienta; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda jest funkcją pomocnika, która jest używana głównie <xref:System.Web.UI.WebControls.BaseValidator.RenderUplevel%2A> przez właściwość w celu określenia, czy przeglądarka klienta obsługuje skrypt klienta. <xref:System.Web.UI.WebControls.BaseValidator.DetermineRenderUplevel%2A> Aby ta właściwość zwracała `true`się, muszą być spełnione następujące warunki:  
  
-   W przeglądarce włączono skrypt klienta.  
  
-   Właściwość obiektu, który jest przechowywany we właściwości,to1lubnowszy.<xref:System.Web.HttpRequest.Browser%2A?displayProperty=nameWithType> <xref:System.Web.HttpBrowserCapabilitiesBase> <xref:System.Web.HttpBrowserCapabilitiesBase.W3CDomVersion%2A>  
  
-   Właściwość obiektu, który <xref:System.Web.HttpBrowserCapabilitiesBase> jest przechowywany we właściwości,to1,2lubnowsza.<xref:System.Web.HttpRequest.Browser%2A?displayProperty=nameWithType> <xref:System.Web.Configuration.HttpCapabilitiesBase.EcmaScriptVersion%2A>  
  
    > [!NOTE]
    >  Ta metoda jest używana głównie przez deweloperów kontroli.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.RenderUplevel" />
      </Docs>
    </Member>
    <Member MemberName="Display">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ValidatorDisplay Display { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.ValidatorDisplay Display" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.Display" />
      <MemberSignature Language="VB.NET" Value="Public Property Display As ValidatorDisplay" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ValidatorDisplay Display { System::Web::UI::WebControls::ValidatorDisplay get(); void set(System::Web::UI::WebControls::ValidatorDisplay value); };" />
      <MemberSignature Language="F#" Value="member this.Display : System.Web.UI.WebControls.ValidatorDisplay with get, set" Usage="System.Web.UI.WebControls.BaseValidator.Display" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ValidatorDisplay</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia zachowanie wyświetlania komunikatu o błędzie w kontrolce walidacji.</summary>
        <value>Jedna z <see cref="T:System.Web.UI.WebControls.ValidatorDisplay" /> wartości. Wartość domyślna to <see langword="Static" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.BaseValidator.Display%2A> Użyj właściwości, aby określić zachowanie wyświetlania komunikatu o błędzie w kontrolce walidacji. W poniższej tabeli wymieniono różne wartości, których można użyć.  
  
|Zachowanie wyświetlania|Opis|  
|----------------------|-----------------|  
|`None`|Komunikat weryfikacji nigdy nie jest wyświetlany w tekście.|  
|`Static`|Miejsce na komunikat weryfikacyjny jest przypisywany w układzie strony.|  
|`Dynamic`|Jeśli walidacja nie powiedzie się, zostanie ona dynamicznie dodana do strony.|  
  
> [!NOTE]
>  Zachowanie wyświetlania jest zależne od tego, czy jest wykonywane Walidacja po stronie klienta. Jeśli walidacja po stronie klienta nie jest aktywna (ponieważ przeglądarka nie <xref:System.Web.UI.Page.ClientTarget%2A?displayProperty=nameWithType> obsługuje tej funkcji lub została wyłączona za pomocą dyrektywy lub <xref:System.Web.UI.WebControls.BaseValidator.EnableClientScript%2A> właściwości strony), `ValidatorDisplay.Static` i `ValidatorDisplay.Dynamic` zachowuje się tak samo: komunikat o błędzie trwa spacja tylko wtedy, gdy jest wyświetlana. Możliwość dynamicznego przydzielania miejsca na komunikat, gdy nie jest wyświetlany (`ValidatorDisplay.Dynamic`) działa tylko z walidacją po stronie klienta.  
  
 Tej właściwości nie można ustawić za pomocą motywów lub motywów arkuszy stylów. Aby uzyskać więcej informacji, <xref:System.Web.UI.ThemeableAttribute> Zobacz temat i [ASP.NET motywy i karnacje](https://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak użyć <xref:System.Web.UI.WebControls.BaseValidator.Display%2A> właściwości, aby określić, że miejsce na komunikat weryfikacyjny jest dodawane do strony sieci Web dynamicznie, gdy Walidacja nie powiedzie się.  
  
> [!IMPORTANT]
>  Ten przykład zawiera pole tekstowe akceptujące dane wejściowe użytkownika, które jest potencjalnym zagrożeniem bezpieczeństwa. Domyślnie strony sieci Web ASP.NET sprawdzają, czy dane wejściowe użytkownika nie obejmują elementów skryptu ani HTML. Aby uzyskać więcej informacji, zobacz [Omówienie luk](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)w zabezpieczeniach.  
  
 [!code-aspx-csharp[Classic BaseValidator Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic BaseValidator Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic BaseValidator Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic BaseValidator Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Określona wartość nie jest jedną z <see cref="T:System.Web.UI.WebControls.ValidatorDisplay" /> wartości.</exception>
        <altmember cref="T:System.Web.UI.WebControls.ValidatorDisplay" />
      </Docs>
    </Member>
    <Member MemberName="EnableClientScript">
      <MemberSignature Language="C#" Value="public bool EnableClientScript { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableClientScript" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.EnableClientScript" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableClientScript As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableClientScript { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableClientScript : bool with get, set" Usage="System.Web.UI.WebControls.BaseValidator.EnableClientScript" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy jest włączona Walidacja po stronie klienta.</summary>
        <value><see langword="true" />Jeśli sprawdzanie poprawności po stronie klienta jest włączone; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj właściwości <xref:System.Web.UI.WebControls.BaseValidator.EnableClientScript%2A> , aby określić, czy sprawdzanie poprawności po stronie klienta jest włączone.  
  
 Kontrolki walidacji zawsze sprawdzają poprawność na serwerze. Mają także kompletną implementację po stronie klienta, która umożliwia przeglądarkom obsługiwanym przez język DHTML (na przykład program Microsoft Internet Explorer 4,0 i nowsze) wykonywanie walidacji na kliencie. Weryfikacja po stronie klienta usprawnia proces weryfikacji, sprawdzając dane wejściowe użytkownika przed wysłaniem ich do serwera. Pozwala to na wykrycie błędów na kliencie przed przesłaniem formularza, unikając rundy informacji niezbędnych do weryfikacji po stronie serwera.  
  
 Domyślnie ta wartość jest ustawiona na `true`, co umożliwia sprawdzanie poprawności po stronie klienta, jeśli jest ona obsługiwana przez przeglądarkę. Można wyłączyć weryfikację po stronie klienta na zasadzie kontrolki kontroli. Jest to przydatne, jeśli aktualizacja dynamiczna na kliencie tworzy problemy z układem strony lub jeśli chcesz wykonać kod serwera przed rozpoczęciem walidacji.  
  
 Tej właściwości nie można ustawić za pomocą motywów lub motywów arkuszy stylów. Aby uzyskać więcej informacji, <xref:System.Web.UI.ThemeableAttribute> Zobacz temat i [ASP.NET motywy i karnacje](https://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób użycia <xref:System.Web.UI.WebControls.BaseValidator.EnableClientScript%2A> właściwości, aby wyłączyć weryfikację po stronie klienta, dzięki czemu można generować liczby losowe na serwerze.  
  
> [!IMPORTANT]
>  Ten przykład zawiera pole tekstowe akceptujące dane wejściowe użytkownika, które jest potencjalnym zagrożeniem bezpieczeństwa. Domyślnie strony sieci Web ASP.NET sprawdzają, czy dane wejściowe użytkownika nie obejmują elementów skryptu ani HTML. Aby uzyskać więcej informacji, zobacz [Omówienie luk](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)w zabezpieczeniach.  
  
 [!code-aspx-csharp[Classic BaseValidator Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic BaseValidator Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic BaseValidator Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic BaseValidator Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.DetermineRenderUplevel" />
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.RegisterValidatorCommonScript" />
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.RegisterValidatorDeclaration" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.RenderUplevel" />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public override bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Web.UI.WebControls.BaseValidator.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy kontrolka walidacji jest włączona.</summary>
        <value><see langword="true" />Jeśli kontrolka walidacji jest włączona; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.BaseValidator.Enabled%2A> Użyj właściwości, aby określić, czy kontrolka walidacji jest włączona. Można wyłączyć kontrolę walidacji, ustawiając tę właściwość na `false`.  
  
 <xref:System.Web.UI.Control.Visible%2A?displayProperty=nameWithType> Ustawienie właściwości<xref:System.Web.UI.WebControls.BaseValidator.Enabled%2A> lub na `false` wartość uniemożliwi wykonywanie walidacji. Powoduje to, <xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A> że właściwość zawsze będzie `true`Szacowana.  
  
 Właściwość różni się nieco <xref:System.Web.UI.Control.Visible%2A?displayProperty=nameWithType> od właściwości. <xref:System.Web.UI.WebControls.BaseValidator.Enabled%2A> Jeśli właściwość dla kontrolki walidacji jest ustawiona na `true`, ale <xref:System.Web.UI.WebControls.BaseValidator.Enabled%2A> właściwość jest ustawiona na `false`, formant walidacji jest nadal renderowany dla weryfikacji po stronie klienta, ale w stanie wyłączonym. <xref:System.Web.UI.Control.Visible%2A?displayProperty=nameWithType> Następnie można ponownie włączyć kontrolę weryfikacji na kliencie przy użyciu skryptu DHTML.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak używać <xref:System.Web.UI.WebControls.BaseValidator.Enabled%2A> właściwości do włączania lub wyłączania kontrolek weryfikacji na stronie sieci Web przy użyciu kodu po stronie serwera.  
  
> [!IMPORTANT]
>  Ten przykład zawiera pole tekstowe akceptujące dane wejściowe użytkownika, które jest potencjalnym zagrożeniem bezpieczeństwa. Domyślnie strony sieci Web ASP.NET sprawdzają, czy dane wejściowe użytkownika nie obejmują elementów skryptu ani HTML. Aby uzyskać więcej informacji, zobacz [Omówienie luk](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)w zabezpieczeniach.  
  
 [!code-aspx-csharp[Classic BaseValidator.Enabled Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic BaseValidator.Enabled Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic BaseValidator.Enabled Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic BaseValidator.Enabled Example/VB/sourcevb.aspx#1)]  
  
 Poniższy przykład kodu demonstruje, jak używać <xref:System.Web.UI.WebControls.BaseValidator.Enabled%2A> właściwości do włączania lub wyłączania kontrolek weryfikacji na stronie sieci Web przy użyciu kodu po stronie klienta.  
  
<!-- TODO: review snippet reference  [!CODE [Classic BaseValidator.Enabled Example2#1](Classic BaseValidator.Enabled Example2#1)]  -->  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ErrorMessage">
      <MemberSignature Language="C#" Value="public string ErrorMessage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ErrorMessage" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.ErrorMessage" />
      <MemberSignature Language="VB.NET" Value="Public Property ErrorMessage As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ErrorMessage { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ErrorMessage : string with get, set" Usage="System.Web.UI.WebControls.BaseValidator.ErrorMessage" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IValidator.ErrorMessage</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia tekst komunikatu o błędzie wyświetlanego w <see cref="T:System.Web.UI.WebControls.ValidationSummary" /> kontrolce, gdy Walidacja nie powiedzie się.</summary>
        <value>Komunikat o błędzie wyświetlany w kontrolce, <see cref="T:System.Web.UI.WebControls.ValidationSummary" /> gdy Walidacja nie powiedzie się. Wartość domyślna to ciąg pusty (""), który wskazuje, że ta właściwość nie jest ustawiona.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przy użyciu <xref:System.Web.UI.WebControls.ValidationSummary> kontrolki, <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> Użyj właściwości, aby określić <xref:System.Web.UI.WebControls.ValidationSummary> tekst do wyświetlenia w kontrolce, gdy Walidacja nie powiedzie się dla bieżącej kontrolki walidacji. Aby określić tekst, który ma być wyświetlany w kontrolce walidacji, <xref:System.Web.UI.WebControls.BaseValidator.Text%2A> Użyj właściwości.  
  
> [!NOTE]
>  Jeśli ustawisz <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> Właściwość bez <xref:System.Web.UI.WebControls.BaseValidator.Text%2A> ustawiania właściwości <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> , wartość właściwości zostanie również wyświetlona w kontrolce walidacji.  
  
 Wartość tej właściwości, po ustawieniu, może być automatycznie zapisywana w pliku zasobów przy użyciu narzędzia projektanta. Aby uzyskać więcej informacji, <xref:System.ComponentModel.LocalizableAttribute> Zobacz i [ASP.NET globalizację i lokalizację](https://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d).  
  
   
  
## Examples  
 Poniższy przykład <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> kodu demonstruje, jak użyć właściwości, aby określić różne komunikaty <xref:System.Web.UI.WebControls.ValidationSummary> dla formantu oraz <xref:System.Web.UI.WebControls.RequiredFieldValidator> kontrolki i <xref:System.Web.UI.WebControls.CompareValidator> .  
  
> [!IMPORTANT]
>  Ten przykład zawiera pole tekstowe akceptujące dane wejściowe użytkownika, które jest potencjalnym zagrożeniem bezpieczeństwa. Domyślnie strony sieci Web ASP.NET sprawdzają, czy dane wejściowe użytkownika nie obejmują elementów skryptu ani HTML. Aby uzyskać więcej informacji, zobacz [Omówienie luk](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)w zabezpieczeniach.  
  
 [!code-aspx-csharp[Classic BaseValidator Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic BaseValidator Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic BaseValidator Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic BaseValidator Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.ValidationSummary" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.Text" />
      </Docs>
    </Member>
    <Member MemberName="EvaluateIsValid">
      <MemberSignature Language="C#" Value="protected abstract bool EvaluateIsValid ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool EvaluateIsValid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.EvaluateIsValid" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function EvaluateIsValid () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool EvaluateIsValid();" />
      <MemberSignature Language="F#" Value="abstract member EvaluateIsValid : unit -&gt; bool" Usage="baseValidator.EvaluateIsValid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gdy jest zastępowany w klasie pochodnej, ta metoda zawiera kod, aby określić, czy wartość w kontrolce wejściowej jest prawidłowa.</summary>
        <returns><see langword="true" />Jeśli wartość w kontrolce wejściowej jest prawidłowa; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody <xref:System.Web.UI.WebControls.BaseValidator.EvaluateIsValid%2A> , aby określić, czy wartość w kontrolce wejściowej określonej <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> przez właściwość jest prawidłowa.  
  
> [!NOTE]
>  Ta metoda jest używana głównie przez deweloperów kontroli.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Musisz zaimplementować tę metodę w klasie pochodnej, aby zwrócić, czy wartość w kontrolce wejściowej jest prawidłowa.</para></block>
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.IsValid" />
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.Validate" />
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.ForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ForeColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color ForeColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.ForeColor : System.Drawing.Color with get, set" Usage="System.Web.UI.WebControls.BaseValidator.ForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "Red")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia kolor komunikatu wyświetlanego, gdy Walidacja nie powiedzie się.</summary>
        <value><see cref="T:System.Drawing.Color" /> Reprezentuje kolor komunikatu wyświetlanego, gdy Walidacja nie powiedzie się. Wartość domyślna to <see cref="P:System.Drawing.Color.Red" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj właściwości <xref:System.Web.UI.WebControls.BaseValidator.ForeColor%2A> , aby określić niestandardowy kolor tekstu dla komunikatu wyświetlanego w kontrolce walidacji, gdy Walidacja nie powiedzie się.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak użyć <xref:System.Web.UI.WebControls.BaseValidator.ForeColor%2A> właściwości, aby wyświetlić komunikat weryfikacyjny na niebiesko.  
  
> [!IMPORTANT]
>  Ten przykład zawiera pole tekstowe akceptujące dane wejściowe użytkownika, które jest potencjalnym zagrożeniem bezpieczeństwa. Domyślnie strony sieci Web ASP.NET sprawdzają, czy dane wejściowe użytkownika nie obejmują elementów skryptu ani HTML. Aby uzyskać więcej informacji, zobacz [Omówienie luk](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)w zabezpieczeniach.  
  
 [!code-aspx-csharp[Classic BaseValidator.ForeColor Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic BaseValidator.ForeColor Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic BaseValidator.ForeColor Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic BaseValidator.ForeColor Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Color" />
      </Docs>
    </Member>
    <Member MemberName="GetControlRenderID">
      <MemberSignature Language="C#" Value="protected string GetControlRenderID (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string GetControlRenderID(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.GetControlRenderID(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetControlRenderID (name As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ GetControlRenderID(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.GetControlRenderID : string -&gt; string" Usage="baseValidator.GetControlRenderID name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nazwa kontrolki, z której ma zostać pobrany identyfikator klienta.</param>
        <summary>Pobiera identyfikator klienta określonej kontrolki.</summary>
        <returns>Identyfikator klienta podanej kontrolki.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.BaseValidator.GetControlRenderID%2A> Użyj metody, aby uzyskać identyfikator klienta określonej kontrolki. Aby uzyskać więcej informacji, zobacz <xref:System.Web.UI.Control.ClientID%2A>.  
  
> [!NOTE]
>  Ta metoda jest używana głównie przez deweloperów kontroli.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.ClientID" />
      </Docs>
    </Member>
    <Member MemberName="GetControlValidationValue">
      <MemberSignature Language="C#" Value="protected string GetControlValidationValue (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string GetControlValidationValue(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.GetControlValidationValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetControlValidationValue (name As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ GetControlValidationValue(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.GetControlValidationValue : string -&gt; string" Usage="baseValidator.GetControlValidationValue name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nazwa kontrolki wejściowej, z której ma zostać pobrana wartość.</param>
        <summary>Pobiera wartość skojarzoną z określoną kontrolką wejściową.</summary>
        <returns>Wartość skojarzona z określoną kontrolką wejściową.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.BaseValidator.GetControlValidationValue%2A> Użyj metody, aby uzyskać wartość skojarzoną z określoną kontrolką wejściową, niezależnie od typu formantu. Na przykład można użyć tej metody, aby uzyskać wartość w <xref:System.Web.UI.WebControls.TextBox> kontrolce, a także wartość wybranego elementu <xref:System.Web.UI.WebControls.ListBox> z kontrolki. Jeśli nie można znaleźć określonej kontrolki, `null` jest zwracana.  
  
> [!NOTE]
>  Ta metoda jest używana głównie przez deweloperów kontroli.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.GetValidationProperty(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetValidationProperty">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.PropertyDescriptor GetValidationProperty (object component);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.PropertyDescriptor GetValidationProperty(object component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.GetValidationProperty(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetValidationProperty (component As Object) As PropertyDescriptor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::PropertyDescriptor ^ GetValidationProperty(System::Object ^ component);" />
      <MemberSignature Language="F#" Value="static member GetValidationProperty : obj -&gt; System.ComponentModel.PropertyDescriptor" Usage="System.Web.UI.WebControls.BaseValidator.GetValidationProperty component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="component"><see cref="T:System.Object" /> Reprezentuje kontrolkę, aby uzyskać Właściwość walidacji.</param>
        <summary>Określa właściwość walidacji kontrolki (jeśli istnieje).</summary>
        <returns>A <see cref="T:System.ComponentModel.PropertyDescriptor" /> , który zawiera właściwość walidacji formantu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.BaseValidator.GetValidationProperty%2A> Metoda jest funkcją pomocnika, która pobiera właściwość walidacji określonej kontrolki wejściowej.  
  
> [!NOTE]
>  Ta metoda jest używana głównie przez deweloperów kontroli.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.PropertyDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="IsUnobtrusive">
      <MemberSignature Language="C#" Value="protected bool IsUnobtrusive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUnobtrusive" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.IsUnobtrusive" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property IsUnobtrusive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsUnobtrusive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsUnobtrusive : bool" Usage="System.Web.UI.WebControls.BaseValidator.IsUnobtrusive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy formant generuje niezauważalny kod JavaScript.</summary>
        <value><see langword="true" />Jeśli formant generuje niezauważalne środowisko JavaScript; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość zwraca `false` wartość, <xref:System.Web.UI.Page.UnobtrusiveValidationMode%2A> Jeśli właściwość jest <xref:System.Web.UI.UnobtrusiveValidationMode.None>; w przeciwnym razie ta `true` Właściwość zwraca.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public bool IsValid { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValid" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.IsValid" />
      <MemberSignature Language="VB.NET" Value="Public Property IsValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValid { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsValid : bool with get, set" Usage="System.Web.UI.WebControls.BaseValidator.IsValid" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IValidator.IsValid</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy skojarzona kontrolka wejściowa przechodzi do walidacji.</summary>
        <value><see langword="true" />Jeśli skojarzona kontrolka wejściowa przejdzie do walidacji; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj właściwości <xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A> , aby określić, czy skojarzona kontrolka wejściowa przechodzi do walidacji.  
  
> [!CAUTION]
>  Ponieważ domyślna wartość tej właściwości to `true`, zostanie zwrócona `true` w przypadku wykonania zapytania względem tej właściwości przed wykonaniem walidacji. Na przykład może się to zdarzyć w przypadku próby użycia tej właściwości w <xref:System.Web.UI.Control.Load?displayProperty=nameWithType> zdarzeniu strony.  
  
 Właściwość jest oceniana tylko wtedy, <xref:System.Web.UI.WebControls.BaseValidator.Validate%2A> gdy wywoływana jest metoda. <xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A> Możesz wywołać <xref:System.Web.UI.WebControls.BaseValidator.Validate%2A> metodę dla każdej kontrolki walidacji na stronie pojedynczo lub wywoływać wszystkie z nich przy <xref:System.Web.UI.Page.Validate%2A?displayProperty=nameWithType> użyciu metody. Kontrolki przycisków z `CausesValidation` ich właściwością `true` ustawioną na również <xref:System.Web.UI.Page.Validate%2A?displayProperty=nameWithType> spowodują wywołanie metody.  
  
> [!NOTE]
>  Wartość tej właściwości można zmienić ręcznie po przeprowadzeniu walidacji. Pozwala to na przesłonięcie wyniku walidacji, w razie potrzeby.  
  
 Właściwość strony jest ustawiona na `true` wartość tylko wtedy, <xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A> gdy właściwość dla każdej `true`kontrolki walidacji na stronie ma ustawioną wartość. <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType>  
  
 Tej właściwości nie można ustawić za pomocą motywów lub motywów arkuszy stylów. Aby uzyskać więcej informacji, <xref:System.Web.UI.ThemeableAttribute> Zobacz temat i [ASP.NET motywy i karnacje](https://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak użyć właściwości, <xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A> aby określić, czy skojarzona kontrolka wejściowa przechodzi walidację.  
  
> [!IMPORTANT]
>  Ten przykład zawiera pole tekstowe akceptujące dane wejściowe użytkownika, które jest potencjalnym zagrożeniem bezpieczeństwa. Domyślnie strony sieci Web ASP.NET sprawdzają, czy dane wejściowe użytkownika nie obejmują elementów skryptu ani HTML. Aby uzyskać więcej informacji, zobacz [Omówienie luk](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)w zabezpieczeniach.  
  
 [!code-aspx-csharp[BaseValidatorIsValid#1](~/samples/snippets/csharp/VS_Snippets_WebNet/BaseValidatorIsValid/CS/basevalidatorisvalidcs.aspx#1)]
 [!code-aspx-vb[BaseValidatorIsValid#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/BaseValidatorIsValid/VB/basevalidatorisvalidvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />
        <altmember cref="E:System.Web.UI.Control.Load" />
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.Validate" />
        <altmember cref="M:System.Web.UI.Page.Validate" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.IsValid" />
        <altmember cref="P:System.Web.UI.Page.IsValid" />
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnInit : EventArgs -&gt; unit" Usage="baseValidator.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.EventArgs" /> , który zawiera dane zdarzenia.</param>
        <summary><see cref="E:System.Web.UI.Control.Init" /> Podnosi zdarzenie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy ta metoda wywoła <xref:System.Web.UI.Control.OnInit%2A> metodę formantu podstawowego, <xref:System.Web.UI.WebControls.WebControl.ForeColor%2A> ustawia właściwość na <xref:System.Drawing.Color.Red%2A> , jeśli spełnione są następujące warunki:  
  
-   <xref:System.Web.UI.WebControls.WebControl.ForeColor%2A> Właściwość nie została już ustawiona.  
  
-   Właściwość wskazuje wersję ASP.NET wcześniejszą niż `4.0`. <xref:System.Web.UI.Control.RenderingCompatibility%2A> Domyślnie w kontrolkach modułu sprawdzania poprawności w ASP.NET 4 i nowszych wersjach nie są wyświetlane błędy w kolorze czerwonym. Aby uzyskać informacje o sposobach kontrolowania wyglądu formantów modułu sprawdzania poprawności, zobacz [Sprawdzanie poprawności danych wejściowych użytkownika na stronach sieci Web ASP.NET](https://msdn.microsoft.com/library/4ad3dacb-89e0-4cee-89ac-40a3f2a85461).  
  
 Ta metoda rejestruje także kontrolę walidacji na stronie.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Podczas zastępowania <see cref="M:System.Web.UI.WebControls.BaseValidator.OnInit(System.EventArgs)" /> klasy pochodnej należy wywołać <see cref="M:System.Web.UI.WebControls.BaseValidator.OnInit(System.EventArgs)" /> metodę klasy bazowej, aby zarejestrowani delegowani odbierał zdarzenie.</para></block>
        <altmember cref="E:System.Web.UI.Control.Init" />
        <altmember cref="M:System.Web.UI.Control.OnInit(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected internal override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.OnPreRender(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnPreRender (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnPreRender(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnPreRender : EventArgs -&gt; unit" Usage="baseValidator.OnPreRender e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.EventArgs" /> , który zawiera dane zdarzenia.</param>
        <summary><see cref="E:System.Web.UI.Control.PreRender" /> Podnosi zdarzenie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda została zastąpiona w celu sprawdzenia przeglądarki klienta i skonfigurowania kontroli weryfikacji zgodności przed renderowaniem.  
  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Obsługa i](~/docs/standard/events/index.md)wywoływanie zdarzeń.  
  
 <xref:System.Web.UI.WebControls.BaseValidator.OnPreRender%2A> Metoda umożliwia również klasom pochodnym obsłużenia zdarzenia bez dołączania delegata. Jest to preferowana technika obsługi zdarzenia w klasie pochodnej.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Podczas zastępowania <see cref="M:System.Web.UI.WebControls.BaseValidator.OnPreRender(System.EventArgs)" /> klasy pochodnej należy wywołać <see cref="M:System.Web.UI.WebControls.BaseValidator.OnPreRender(System.EventArgs)" /> metodę klasy bazowej, aby zarejestrowani delegowani odbierał zdarzenie.</para></block>
        <altmember cref="E:System.Web.UI.Control.PreRender" />
        <altmember cref="M:System.Web.UI.Control.OnPreRender(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnUnload">
      <MemberSignature Language="C#" Value="protected internal override void OnUnload (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnUnload(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.OnUnload(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnUnload (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnUnload(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnUnload : EventArgs -&gt; unit" Usage="baseValidator.OnUnload e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.EventArgs" /> , który zawiera dane zdarzenia.</param>
        <summary><see cref="E:System.Web.UI.Control.Unload" /> Podnosi zdarzenie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda została zastąpiona, aby wyrejestrować kontrolkę walidacji na stronie.  
  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Obsługa i](~/docs/standard/events/index.md)wywoływanie zdarzeń.  
  
 <xref:System.Web.UI.WebControls.BaseValidator.OnUnload%2A> Metoda umożliwia również klasom pochodnym obsłużenia zdarzenia bez dołączania delegata. Jest to preferowana technika obsługi zdarzenia w klasie pochodnej.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Podczas zastępowania <see cref="M:System.Web.UI.WebControls.BaseValidator.OnUnload(System.EventArgs)" /> klasy pochodnej należy wywołać <see cref="M:System.Web.UI.WebControls.BaseValidator.OnUnload(System.EventArgs)" /> metodę klasy bazowej, aby zarejestrowani delegowani odbierał zdarzenie.</para></block>
        <altmember cref="E:System.Web.UI.Control.Unload" />
        <altmember cref="M:System.Web.UI.Control.OnUnload(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="PropertiesValid">
      <MemberSignature Language="C#" Value="protected bool PropertiesValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PropertiesValid" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.PropertiesValid" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property PropertiesValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool PropertiesValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.PropertiesValid : bool" Usage="System.Web.UI.WebControls.BaseValidator.PropertiesValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy formant określony przez <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> właściwość jest prawidłowym formantem.</summary>
        <value><see langword="true" />Jeśli formant określony przez <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> jest prawidłowym formantem; w przeciwnym razie,. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj właściwości <xref:System.Web.UI.WebControls.BaseValidator.PropertiesValid%2A> , aby określić, <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> czy właściwość zawiera prawidłową kontrolkę wejściową. Aby była prawidłową kontrolą wejściową, <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> właściwość musi być ustawiona na kontrolkę na stronie.  
  
> [!NOTE]
>  Ta właściwość jest używana głównie przez deweloperów kontroli.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Nie określono wartości we <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> właściwości.  
  
—lub— 
Na stronie nie znaleziono kontrolki <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> wejściowej określonej przez właściwość.</exception>
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.ControlPropertiesValid" />
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.CheckControlValidationProperty(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterValidatorCommonScript">
      <MemberSignature Language="C#" Value="protected void RegisterValidatorCommonScript ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RegisterValidatorCommonScript() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.RegisterValidatorCommonScript" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RegisterValidatorCommonScript ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RegisterValidatorCommonScript();" />
      <MemberSignature Language="F#" Value="member this.RegisterValidatorCommonScript : unit -&gt; unit" Usage="baseValidator.RegisterValidatorCommonScript " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rejestruje kod na stronie na potrzeby weryfikacji po stronie klienta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody <xref:System.Web.UI.WebControls.BaseValidator.RegisterValidatorCommonScript%2A> , aby zarejestrować kod na stronie w celu przeprowadzenia walidacji po stronie klienta.  
  
> [!NOTE]
>  Ta metoda jest używana głównie przez deweloperów kontroli.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Wywołaj tę metodę w <see cref="E:System.Web.UI.Control.PreRender" /> procedurze obsługi zdarzeń klasy pochodnej, aby zarejestrować kod, który wykonuje walidację po stronie klienta.</para></block>
        <altmember cref="E:System.Web.UI.Control.PreRender" />
      </Docs>
    </Member>
    <Member MemberName="RegisterValidatorDeclaration">
      <MemberSignature Language="C#" Value="protected virtual void RegisterValidatorDeclaration ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RegisterValidatorDeclaration() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.RegisterValidatorDeclaration" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub RegisterValidatorDeclaration ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void RegisterValidatorDeclaration();" />
      <MemberSignature Language="F#" Value="abstract member RegisterValidatorDeclaration : unit -&gt; unit&#xA;override this.RegisterValidatorDeclaration : unit -&gt; unit" Usage="baseValidator.RegisterValidatorDeclaration " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rejestruje deklarację tablicową ECMAScript przy użyciu nazwy <see langword="Page_Validators" />tablicy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody w celu zarejestrowania deklaracji tablicy ECMAScript przy użyciu nazwy `Page_Validators`tablicy. <xref:System.Web.UI.WebControls.BaseValidator.RegisterValidatorDeclaration%2A>  
  
> [!NOTE]
>  Ta metoda jest używana głównie przez deweloperów kontroli.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.RegisterArrayDeclaration(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.Render : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="baseValidator.Render writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter" /> , który zawiera strumień wyjściowy do renderowania na kliencie.</param>
        <summary>Wyświetla kontrolkę na kliencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.BaseValidator.Render%2A> Metoda służy do generowania znaczników HTML dla kontrolki walidacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
        <altmember cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="RenderUplevel">
      <MemberSignature Language="C#" Value="protected bool RenderUplevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RenderUplevel" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.RenderUplevel" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property RenderUplevel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool RenderUplevel { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.RenderUplevel : bool" Usage="System.Web.UI.WebControls.BaseValidator.RenderUplevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy przeglądarka klienta obsługuje renderowanie "na poziomie".</summary>
        <value><see langword="true" />Jeśli przeglądarka obsługuje renderowanie "na poziomie"; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj właściwości <xref:System.Web.UI.WebControls.BaseValidator.RenderUplevel%2A> , aby określić, czy przeglądarka klienta obsługuje renderowanie "na poziomie". Aby przeglądarka obsługiwała renderowanie "na poziomie", musi obsługiwać program Microsoft Internet Explorer Document Object Model (DOM) w wersji 4 lub nowszej oraz język ECMAScript w wersji 1,2 lub nowszej.  
  
> [!NOTE]
>  Ta właściwość jest używana głównie przez deweloperów kontroli.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.DetermineRenderUplevel" />
      </Docs>
    </Member>
    <Member MemberName="SetFocusOnError">
      <MemberSignature Language="C#" Value="public bool SetFocusOnError { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SetFocusOnError" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.SetFocusOnError" />
      <MemberSignature Language="VB.NET" Value="Public Property SetFocusOnError As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SetFocusOnError { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SetFocusOnError : bool with get, set" Usage="System.Web.UI.WebControls.BaseValidator.SetFocusOnError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy fokus jest ustawiony na kontrolkę określoną przez właściwość, <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> gdy Walidacja nie powiedzie się.</summary>
        <value><see langword="true" />Aby ustawić fokus na formancie określonym przez, <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> gdy Walidacja nie powiedzie <see langword="false" />się; w przeciwnym razie. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj właściwości <xref:System.Web.UI.WebControls.BaseValidator.SetFocusOnError%2A> , aby określić, czy fokus jest automatycznie ustawiany na kontrolkę określoną przez <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> właściwość, gdy ta kontrolka walidacji nie powiedzie się. Dzięki temu użytkownik może szybko zaktualizować odpowiednią kontrolę.  
  
 Jeśli wiele kontrolek walidacji zakończy się niepowodzeniem `true`, a ta właściwość jest ustawiona <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> na, formant określony we właściwości dla pierwszej kontrolki walidacji otrzymuje fokus.  
  
 Tej właściwości nie można ustawić za pomocą motywów lub motywów arkuszy stylów. Aby uzyskać więcej informacji, <xref:System.Web.UI.ThemeableAttribute> Zobacz temat i [ASP.NET motywy i karnacje](https://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.Text" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Web.UI.WebControls.BaseValidator.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerDefaultProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia tekst wyświetlany w kontrolce walidacji, gdy Walidacja nie powiedzie się.</summary>
        <value>Tekst wyświetlany w kontrolce walidacji, gdy Walidacja nie powiedzie się. Wartość domyślna to ciąg pusty (""), który wskazuje, że ta właściwość nie jest ustawiona.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj właściwości <xref:System.Web.UI.WebControls.BaseValidator.Text%2A> , aby określić tekst, który ma być wyświetlany w kontrolce walidacji, gdy Walidacja nie powiedzie się. Możesz również wyświetlić podsumowanie wszystkich formantów, które nie powiodą się walidacją na stronie przy użyciu <xref:System.Web.UI.WebControls.ValidationSummary> kontrolki. Aby określić tekst, który ma być wyświetlany <xref:System.Web.UI.WebControls.ValidationSummary> w kontrolce, <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> Użyj właściwości.  
  
> [!NOTE]
>  Jeśli ustawisz <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> Właściwość bez <xref:System.Web.UI.WebControls.BaseValidator.Text%2A> ustawiania właściwości <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> , wartość właściwości zostanie również wyświetlona w kontrolce walidacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.ValidationSummary" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ErrorMessage" />
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.Validate" />
      <MemberSignature Language="VB.NET" Value="Public Sub Validate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Validate();" />
      <MemberSignature Language="F#" Value="abstract member Validate : unit -&gt; unit&#xA;override this.Validate : unit -&gt; unit" Usage="baseValidator.Validate " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IValidator.Validate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wykonuje walidację skojarzonej kontrolki wejściowej i <see cref="P:System.Web.UI.WebControls.BaseValidator.IsValid" /> aktualizuje właściwość.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody <xref:System.Web.UI.WebControls.BaseValidator.Validate%2A> , aby przeprowadzić walidację skojarzonej kontrolki wejściowej. Ta metoda umożliwia programowe wykonywanie walidacji kontroli danych wejściowych. <xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A> Właściwość jest automatycznie aktualizowana o wyniki walidacji.  
  
   
  
## Examples  
 Przykład <xref:System.Web.UI.WebControls.BaseValidator.Validate%2A> metody używanej w klasie pochodnej można <xref:System.Web.UI.WebControls.CompareValidator> znaleźć w temacie Omówienie klasy.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.IsValid" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ValidationGroup" />
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.EvaluateIsValid" />
      </Docs>
    </Member>
    <Member MemberName="ValidationGroup">
      <MemberSignature Language="C#" Value="public virtual string ValidationGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ValidationGroup" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.ValidationGroup" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ValidationGroup As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ValidationGroup { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ValidationGroup : string with get, set" Usage="System.Web.UI.WebControls.BaseValidator.ValidationGroup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę grupy sprawdzania poprawności, do której należy ta kontrolka walidacji.</summary>
        <value>Nazwa grupy sprawdzania poprawności, do której należy ta kontrolka walidacji. Wartość domyślna to ciąg pusty (""), który wskazuje, że ta właściwość nie jest ustawiona.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET zapewnia wiele kontrolek, które mogą publikować z powrotem na serwerze. Jeśli jedna z tych kontrolek ma `CausesValidation` ustawioną właściwość `true`na, walidacja jest wykonywana, gdy formant zostanie odesłany do serwera. Następujące kontrolki umożliwiają publikowanie z powrotem na serwerze:  
  
-   <xref:System.Web.UI.WebControls.BulletedList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.Button?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.CheckBox?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.CheckBoxList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.DropDownList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlButton?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputButton?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputImage?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.ImageButton?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.LinkButton?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.ListBox?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.RadioButtonList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.TextBox?displayProperty=nameWithType>  
  
> [!NOTE]
>  Niektóre z tych kontrolek ogłaszają się z powrotem do serwera `AutoPostBack` tylko wtedy, gdy `true`właściwość jest ustawiona na.  
  
 Każdy z tych formantów ma `ValidationGroup` właściwość, która po ustawieniu sprawdza tylko kontrolki walidacji w określonej grupie, gdy kontrolka wyzwala wpis z powrotem na serwerze. Użyj właściwości <xref:System.Web.UI.WebControls.BaseValidator.ValidationGroup%2A> , aby przypisać kontrolkę walidacji do grupy walidacji. Klasa udostępnia również <xref:System.Web.UI.Page.Validate%2A>metodęi metodę, która akceptuje <xref:System.Web.UI.WebControls.BaseValidator.ValidationGroup%2A> parametr wejściowy. <xref:System.Web.UI.Page.GetValidators%2A> <xref:System.Web.UI.Page>  
  
 Tej właściwości nie można ustawić za pomocą motywów lub motywów arkuszy stylów. Aby uzyskać więcej informacji, <xref:System.Web.UI.ThemeableAttribute> Zobacz temat i [ASP.NET motywy i karnacje](https://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, <xref:System.Web.UI.WebControls.BaseValidator.ValidationGroup%2A> jak używać właściwości do przypisywania kontrolki walidacji do grupy.  
  
> [!IMPORTANT]
>  Ten przykład zawiera pole tekstowe akceptujące dane wejściowe użytkownika, które jest potencjalnym zagrożeniem bezpieczeństwa. Domyślnie strony sieci Web ASP.NET sprawdzają, czy dane wejściowe użytkownika nie obejmują elementów skryptu ani HTML. Aby uzyskać więcej informacji, zobacz [Omówienie luk](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)w zabezpieczeniach.  
  
 [!code-aspx-csharp[BaseValidatorValidationGroup#1](~/samples/snippets/csharp/VS_Snippets_WebNet/BaseValidatorValidationGroup/CS/BaseValidatorValidationGroupcs.aspx#1)]
 [!code-aspx-vb[BaseValidatorValidationGroup#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/BaseValidatorValidationGroup/VB/BaseValidatorValidationGroupvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.IButtonControl.CausesValidation" />
        <altmember cref="P:System.Web.UI.WebControls.IButtonControl.ValidationGroup" />
        <altmember cref="M:System.Web.UI.Page.Validate" />
        <altmember cref="M:System.Web.UI.Page.GetValidators(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>
