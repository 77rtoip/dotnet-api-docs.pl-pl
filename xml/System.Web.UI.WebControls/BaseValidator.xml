<Type Name="BaseValidator" FullName="System.Web.UI.WebControls.BaseValidator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a6819f582da64eec67c49fb38717408297f71ce4" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30691688" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class BaseValidator : System.Web.UI.WebControls.Label, System.Web.UI.IValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit BaseValidator extends System.Web.UI.WebControls.Label implements class System.Web.UI.IValidator" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.BaseValidator" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class BaseValidator&#xA;Inherits Label&#xA;Implements IValidator" />
  <TypeSignature Language="C++ CLI" Value="public ref class BaseValidator abstract : System::Web::UI::WebControls::Label, System::Web::UI::IValidator" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.Label</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.IValidator</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("ErrorMessage")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.BaseValidatorDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Służy jako abstrakcyjna klasa bazowa dla kontrolek sprawdzania poprawności.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.BaseValidator> Klasa udostępnia implementację core dla wszystkich kontrolek sprawdzania poprawności. Formanty walidacji są używane do sprawdzania poprawności danych wejściowych użytkownika w skojarzonym formancie wejściowego. Gdy użytkownik wprowadzi wartość, która kończy się niepowodzeniem sprawdzania poprawności, kontroli poprawności wyświetla komunikat o błędzie. Ponieważ formant sprawdzania poprawności jest oddzielony od kontrolki wprowadzania, komunikat o błędzie można umieścić dowolne miejsce na stronie kontrolki wprowadzania. Program ASP.NET udostępnia kilka formantów sprawdzania poprawności, wykonujących określone typy sprawdzania poprawności. W poniższej tabeli opisano tych kontrolek.  
  
|Sprawdzanie poprawności formantu|Opis|  
|------------------------|-----------------|  
|<xref:System.Web.UI.WebControls.CompareValidator>|Sprawdza poprawność wartości z wartością w innym formancie wejściowych przed wartością stałą lub względem typu odpowiednie dane przez ustawienie <xref:System.Web.UI.WebControls.CompareValidator.Operator%2A?displayProperty=nameWithType> właściwości <xref:System.Web.UI.WebControls.ValidationCompareOperator.DataTypeCheck?displayProperty=nameWithType>.|  
|<xref:System.Web.UI.WebControls.CustomValidator>|Weryfikuje wartość przy użyciu procedury dostarczane przez użytkownika niestandardowego sprawdzania poprawności.|  
|<xref:System.Web.UI.WebControls.RangeValidator>|Sprawdza, czy wartość znajduje się w zakresie wartości.|  
|<xref:System.Web.UI.WebControls.RegularExpressionValidator>|Weryfikuje wartość przy użyciu wyrażenia regularnego.|  
|<xref:System.Web.UI.WebControls.RequiredFieldValidator>|Sprawdza, czy wartość nie została wprowadzona wymaganego pola.|  
  
 Formanty walidacji sprawdzanie poprawności skojarzone kontrolki wprowadzania na serwerze. Formanty walidacji również mieć pełną implementację po stronie klienta, która umożliwia włączone skryptu przeglądarki (np. program Microsoft Internet Explorer w wersji 4.0 i nowsze) do wykonywania sprawdzania poprawności na kliencie. Sprawdzanie poprawności klienta podnosi poziom proces weryfikacji, sprawdzanie danych wejściowych użytkownika przed ich wysłaniem do serwera. Dzięki temu błędów zostało wykryte na komputerze klienckim przed przesłaniem formularza, unikając obiegu informacji niezbędnych do weryfikacji po stronie serwera.  
  
 Wiele formantów sprawdzania poprawności można z poszczególnych kontrolki wprowadzania do sprawdzania poprawności różnych kryteriów. Na przykład można zastosować wiele formantów sprawdzania poprawności na <xref:System.Web.UI.WebControls.TextBox> formantu. Można użyć <xref:System.Web.UI.WebControls.RangeValidator> sterowania upewnij się, że wartość wprowadzona w <xref:System.Web.UI.WebControls.TextBox> formant znajduje się w zakresie zestawu, a <xref:System.Web.UI.WebControls.RequiredFieldValidator> sterowania, aby upewnić się, że użytkownik wprowadzi wartość.  
  
 Program ASP.NET udostępnia wiele formantów, które mają możliwość publikowania na serwer. Jeśli jeden z tych kontrolek zawiera jego `CausesValidation` ustawioną właściwość `true`, sprawdzanie poprawności jest wykonywane, gdy formant ogłasza do serwera. Następujące formanty mają możliwość publikowania na serwerze:  
  
-   <xref:System.Web.UI.WebControls.BulletedList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.Button?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.CheckBox?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.CheckBoxList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.DropDownList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlButton?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputButton?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputImage?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.ImageButton?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.LinkButton?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.ListBox?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.RadioButtonList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.TextBox?displayProperty=nameWithType>  
  
> [!NOTE]
>  Niektóre z tych zabezpieczeń post do serwera tylko wtedy, gdy `AutoPostBack` właściwość jest ustawiona na `true`.  
  
 Te każdy formantów ma `ValidationGroup` właściwości, gdy są ustawione, weryfikuje tylko formanty walidacji w ramach określonej grupy, gdy kontrolka wyzwala post do serwera. Grupowanie formantów sprawdzania poprawności, ustaw <xref:System.Web.UI.WebControls.BaseValidator.ValidationGroup%2A> właściwości każdego formantu sprawdzania poprawności na tę samą wartość.  
  
 Aby skojarzyć kontrolki wprowadzania z formantem weryfikacji, użyj <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> właściwości. Aby określić tekst do wyświetlenia w formancie weryfikacji w przypadku niepowodzenia weryfikacji, użyj <xref:System.Web.UI.WebControls.BaseValidator.Text%2A> właściwości. Można również wyświetlić podsumowanie wszystkich kontrolek, które niepowodzenie sprawdzania poprawności na stronie przy użyciu <xref:System.Web.UI.WebControls.ValidationSummary> formantu. Aby określić tekst do wyświetlenia w <xref:System.Web.UI.WebControls.ValidationSummary> kontrolować, użyj <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> właściwości.  
  
> [!NOTE]
>  Jeśli ustawisz <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> właściwości bez ustawienia <xref:System.Web.UI.WebControls.BaseValidator.Text%2A> właściwości, wartość <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> właściwości jest także wyświetlany w formancie sprawdzania poprawności.  
  
 Używanie formantów modułu sprawdzania poprawności, należy zawsze sprawdzić wyniki weryfikacji po stronie serwera przed wykonaniem jakiegokolwiek przetwarzania. Po odświeżania strony ale przed metody zdarzenia są nazywane, strony wywołuje kontrolki modułu sprawdzania poprawności i agreguje wyniki do <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> właściwości. (Możesz także wywołać jawnie za pomocą kontrolki modułu sprawdzania poprawności `Validate` metody.) W swoim własnym kodem powinien sprawdzić, czy <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> zwraca `true` przed rozpoczęciem przetwarzania danych wejściowych. Mimo że przeglądarkami z włączoną skryptu może uniemożliwić występujących na kliencie, jeśli sprawdzanie poprawności nie powiodło się, należy zawsze także sprawdzić odświeżania strony <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> w kodzie serwera przed przetworzeniem zatwierdzonych danych.  
  
 Można też ręcznie wykonać sprawdzania poprawności. Aby sprawdzić wszystkie formanty walidacji na tej stronie, należy użyć <xref:System.Web.UI.Page.Validate%2A?displayProperty=nameWithType> metody. Formanty walidacji poszczególnych mogą być sprawdzone za pomocą <xref:System.Web.UI.WebControls.BaseValidator.Validate%2A> metody formantu.  
  
> [!NOTE]
>  Jeśli używasz <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> właściwości w `Page_Load` metody, najpierw musisz jawnie wywołać <xref:System.Web.UI.Page.Validate%2A?displayProperty=nameWithType> metody. Ponieważ Weryfikacja odbywa się po <xref:System.Web.UI.Control.Load?displayProperty=nameWithType> zdarzenia dla strony, ale przed jego programu obsługi zdarzeń dla `Click` lub `Command` zdarzenia, <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> właściwości jest aktualizowana dopiero <xref:System.Web.UI.Page.Validate%2A?displayProperty=nameWithType> metoda jest wywoływana. Alternatywnie, można umieścić kodu do obsługi zdarzeń dla `Click` lub `Command` zdarzeń zamiast `Page_Load` metody.  
  
 Nie wszystkie kontrolki serwera sieci Web obsługuje formanty walidacji. Czy na standardowych formantów, które mogą być sprawdzone za pomocą formantu sprawdzania poprawności:  
  
-   <xref:System.Web.UI.WebControls.DropDownList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.FileUpload?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.ListBox?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.RadioButtonList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.TextBox?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputFile?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputPassword?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputText?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlSelect?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlTextArea?displayProperty=nameWithType>  
  
> [!NOTE]
>  Dla kontrolki wprowadzania do sprawdzenia poprawności <xref:System.Web.UI.ValidationPropertyAttribute?displayProperty=nameWithType> musi zostać zastosowany atrybut do formantu.  
  
> [!NOTE]
>  Jeśli używasz kontrolki modułu sprawdzania poprawności, pochodzących z <xref:System.Web.UI.WebControls.BaseValidator> wewnątrz <xref:System.Web.UI.UpdatePanel> sterowania, upewnij się, że formantem modułu sprawdzania poprawności i skojarzonej z nim są na tym samym panelu. Aby uzyskać więcej informacji o korzystaniu z <xref:System.Web.UI.UpdatePanel> kontrolować aktualizacje stron częściowych, zobacz [omówienie renderowania stron częściowych](http://msdn.microsoft.com/library/5c12736d-d9e9-464a-9388-3fe0f9f49e49).  
  
 Podczas sprawdzania poprawności zakończy się niepowodzeniem, fokus można ustawić w skojarzonym formancie wejściowych przez ustawienie <xref:System.Web.UI.WebControls.BaseValidator.SetFocusOnError%2A> właściwości `true`.  
  
 Aby uzyskać listę początkowe wartości właściwości dla wystąpienia <xref:System.Web.UI.WebControls.BaseValidator>, zobacz <xref:System.Web.UI.WebControls.BaseValidator.%23ctor%2A> konstruktora.  
  
## <a name="accessibility"></a>Ułatwienia dostępu  
 Aby uzyskać informacje o sposobie konfigurowania tego formantu, dzięki czemu generuje kod znaczników, który jest zgodny ze standardami ułatwień dostępu, zobacz [ułatwień dostępu w Visual Studio i ASP.NET](http://msdn.microsoft.com/library/7e3ce9c4-6b7d-4fb1-94b5-72cf2a44fe13) i [kontrolki ASP.NET i dostępności](http://msdn.microsoft.com/library/847a37e3-ce20-41da-b0d3-7dfb0fdae9a0).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia wielu formantów weryfikacji można sprawdzić, czy użytkownik musi wprowadzić prawidłową wartość w <xref:System.Web.UI.WebControls.TextBox> formantu.  
  
> [!IMPORTANT]
>  W tym przykładzie ma pola tekstowego, który akceptuje dane wejściowe użytkownika, który jest potencjalnym zagrożeniem dla bezpieczeństwa. Domyślnie strony sieci Web ASP.NET zweryfikować, czy dane wejściowe użytkownika nie obejmuje skrypt lub elementów HTML. Aby uzyskać więcej informacji, zobacz [Przegląd wykorzystuje skryptu](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[Classic BaseValidator Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic BaseValidator Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic BaseValidator Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic BaseValidator Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Przy dziedziczeniu z <see cref="T:System.Web.UI.WebControls.BaseValidator" /> klasy, konieczne jest przesłonięcie następującego elementu członkowskiego: <see cref="M:System.Web.UI.WebControls.BaseValidator.EvaluateIsValid" />.</para>
    </block>
    <altmember cref="T:System.Web.UI.WebControls.CompareValidator" />
    <altmember cref="T:System.Web.UI.WebControls.CustomValidator" />
    <altmember cref="T:System.Web.UI.WebControls.RangeValidator" />
    <altmember cref="T:System.Web.UI.WebControls.RegularExpressionValidator" />
    <altmember cref="T:System.Web.UI.WebControls.RequiredFieldValidator" />
    <altmember cref="T:System.Web.UI.WebControls.ValidationSummary" />
    <altmember cref="P:System.Web.UI.WebControls.IButtonControl.CausesValidation" />
    <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ErrorMessage" />
    <altmember cref="P:System.Web.UI.WebControls.BaseValidator.Text" />
    <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ValidationGroup" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected BaseValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; BaseValidator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.WebControls.BaseValidator" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor nie jest wywoływany bezpośrednio. Formanty walidacji, które dziedziczą z tej klasy można wywołać konstruktora z własnych konstruktorów zainicjować podstawowych właściwości.  
  
 W poniższej tabeli przedstawiono początkowe wartości właściwości dla wystąpienia <xref:System.Web.UI.WebControls.BaseValidator>.  
  
|Właściwość|Wartość początkowa|  
|--------------|-------------------|  
|<xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A>|`true`|  
|<xref:System.Web.UI.WebControls.BaseValidator.ForeColor%2A>|<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>|  
|<xref:System.Web.UI.WebControls.BaseValidator.PropertiesValid%2A>|`true`|  
|<xref:System.Web.UI.WebControls.BaseValidator.RenderUplevel%2A>|`false`|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.CompareValidator.#ctor" />
        <altmember cref="M:System.Web.UI.WebControls.CustomValidator.#ctor" />
        <altmember cref="M:System.Web.UI.WebControls.RangeValidator.#ctor" />
        <altmember cref="M:System.Web.UI.WebControls.RegularExpressionValidator.#ctor" />
        <altmember cref="M:System.Web.UI.WebControls.RequiredFieldValidator.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="AddAttributesToRender">
      <MemberSignature Language="C#" Value="protected override void AddAttributesToRender (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddAttributesToRender(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub AddAttributesToRender (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void AddAttributesToRender(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.Web.UI.HtmlTextWriter" /> Reprezentujący strumienia wyjściowego do renderowania elementów HTML zawartości na kliencie.</param>
        <summary>Dodaje atrybuty HTML i style, które należy do renderowania kontrolki na określony <see cref="T:System.Web.UI.HtmlTextWriter" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.BaseValidator.AddAttributesToRender%2A> Metody jest używany do renderowania atrybutów formantu w tagu HTML dla formantu. Ta metoda jest zwykle zastępowana kontroli deweloperom w klasach pochodnych Wstaw odpowiednie atrybuty i style do <xref:System.Web.UI.HtmlTextWriter> strumień wyjściowy dla formantu.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>W przypadku przesłaniania <see cref="M:System.Web.UI.WebControls.BaseValidator.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" /> metody należy wywołać odpowiedniej metody w klasie podstawowej. W przeciwnym razie nie będzie renderowany atrybutów, zawarte w klasie podstawowej.</para>
        </block>
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
      </Docs>
    </Member>
    <Member MemberName="AssociatedControlID">
      <MemberSignature Language="C#" Value="public override string AssociatedControlID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssociatedControlID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.AssociatedControlID" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property AssociatedControlID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ AssociatedControlID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ta właściwość nie jest obsługiwana.</summary>
        <value>Ta właściwość nie jest obsługiwana i zawsze zwraca <see cref="T:System.NotSupportedException" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość nie jest obsługiwana. Ta właściwość jest obsługiwana tylko w podstawowym <xref:System.Web.UI.WebControls.Label> klasy.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Próbowano ustawić tę właściwość.</exception>
        <altmember cref="P:System.Web.UI.WebControls.Label.AssociatedControlID" />
      </Docs>
    </Member>
    <Member MemberName="CheckControlValidationProperty">
      <MemberSignature Language="C#" Value="protected void CheckControlValidationProperty (string name, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void CheckControlValidationProperty(string name, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.CheckControlValidationProperty(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub CheckControlValidationProperty (name As String, propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void CheckControlValidationProperty(System::String ^ name, System::String ^ propertyName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Formant, który można zweryfikować.</param>
        <param name="propertyName">Dodatkowy tekst opisujący źródło wyjątek, jeśli używana jest ta metoda jest zgłaszany wyjątek.</param>
        <summary>Sprawdza, czy określony formant znajduje się na stronie i zawiera właściwości sprawdzania poprawności.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.BaseValidator.CheckControlValidationProperty%2A> Metoda jest używana głównie przez metodę Pomocnika <xref:System.Web.UI.WebControls.BaseValidator.ControlPropertiesValid%2A> metody, aby sprawdzić, czy określony formant znajduje się na stronie i zawiera właściwości sprawdzania poprawności. Ta metoda nie zwraca wartości zgłosić wyniku. Zamiast tego zgłasza wyjątek podczas weryfikacji nie powiedzie się.  
  
> [!NOTE]
>  Ta metoda jest używana głównie przez deweloperów formantu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Nie odnaleziono określonego formantu.  
  
 \- lub -  
  
 Określony formant nie ma <see cref="T:System.Web.UI.ValidationPropertyAttribute" /> atrybut skojarzony z nim; w związku z tym nie można zweryfikować za pomocą formantu sprawdzania poprawności.</exception>
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.ControlPropertiesValid" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.PropertiesValid" />
        <altmember cref="T:System.Web.UI.ValidationPropertyAttribute" />
      </Docs>
    </Member>
    <Member MemberName="ControlPropertiesValid">
      <MemberSignature Language="C#" Value="protected virtual bool ControlPropertiesValid ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ControlPropertiesValid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.ControlPropertiesValid" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ControlPropertiesValid () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ControlPropertiesValid();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Określa, czy formant określone przez <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> właściwości jest nieprawidłowa.</summary>
        <returns>
          <see langword="true" /> Jeśli formant określony przez <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> jest prawidłowy; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.BaseValidator.ControlPropertiesValid%2A> Metoda jest używana głównie przez metodę Pomocnika <xref:System.Web.UI.WebControls.BaseValidator.PropertiesValid%2A> umożliwia określenie, czy <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> właściwość zawiera nieprawidłowy kontrolki wprowadzania. Jako prawidłowy kontrolki wprowadzania <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> właściwość musi mieć ustawioną wartość niektórych i ta wartość musi być formantem strony, który obsługuje sprawdzanie poprawności.  
  
> [!NOTE]
>  Ta metoda jest używana głównie przez deweloperów formantu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Nie określono wartości dla <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> właściwości.  
  
 \- lub -  
  
 Kontrolki wprowadzania określony przez <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> na stronie nie odnaleziono właściwości.  
  
 \- lub -  
  
 Kontrolki wprowadzania określony przez <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> właściwość nie ma <see cref="T:System.Web.UI.ValidationPropertyAttribute" /> atrybut skojarzony z nim; w związku z tym nie można zweryfikować za pomocą formantu sprawdzania poprawności.</exception>
        <altmember cref="T:System.Web.UI.ValidationPropertyAttribute" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.PropertiesValid" />
      </Docs>
    </Member>
    <Member MemberName="ControlToValidate">
      <MemberSignature Language="C#" Value="public string ControlToValidate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ControlToValidate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />
      <MemberSignature Language="VB.NET" Value="Public Property ControlToValidate As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ControlToValidate { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.WebControls.ValidatedControlConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.IDReferenceProperty</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia kontrolki wprowadzania do sprawdzania poprawności.</summary>
        <value>Kontrolki wprowadzania do sprawdzania poprawności. Wartość domyślna to <see cref="F:System.String.Empty" />, co oznacza, że ta właściwość nie jest ustawiona.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> właściwości w celu określenia kontrolki wprowadzania do sprawdzania poprawności. Ta właściwość musi być ustawiona na identyfikator kontrolki wprowadzania dla wszystkich kontrolek weryfikacji z wyjątkiem <xref:System.Web.UI.WebControls.CustomValidator> formant, który może być puste. Jeśli nie określisz prawidłowy kontrolki wprowadzania, zostanie wygenerowany wyjątek podczas renderowania strony. Identyfikator musi odwoływać się do formantu w tym samym kontenerze jako formant sprawdzania poprawności. Musi być w tej samej stronie lub kontrolki użytkownika lub musi być w tym samym szablonie kontrolki z szablonem.  
  
 Formanty standardowe, które można sprawdzić poprawności są:  
  
-   <xref:System.Web.UI.WebControls.DropDownList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.FileUpload?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.ListBox?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.RadioButtonList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.TextBox?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputFile?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputPassword?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputText?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlSelect?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlTextArea?displayProperty=nameWithType>  
  
> [!NOTE]
>  Dla kontrolki wprowadzania do sprawdzenia poprawności <xref:System.Web.UI.ValidationPropertyAttribute?displayProperty=nameWithType> musi zostać zastosowany atrybut do formantu.  
  
 Wszystkie formanty walidacji, z wyjątkiem <xref:System.Web.UI.WebControls.RequiredFieldValidator> kontrolować, przeszedł sprawdzania poprawności, jeśli określony kontrolki wprowadzania przez <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> właściwości nie zawiera tekstu. Jeśli używasz <xref:System.Web.UI.WebControls.CustomValidator> funkcje sprawdzania poprawności kontroli, po stronie klienta i po stronie serwera nie są nazywane albo.  
  
 Nie można ustawić tej właściwości kompozycji lub motywów arkusza stylów. Aby uzyskać więcej informacji, zobacz <xref:System.Web.UI.ThemeableAttribute> i [kompozycji ASP.NET i karnacji](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> właściwości w celu określenia kontrolki wprowadzania do sprawdzania poprawności.  
  
 [!code-aspx-csharp[Classic BaseValidator Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic BaseValidator Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic BaseValidator Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic BaseValidator Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.String.Empty" />
        <altmember cref="T:System.Web.UI.ValidationPropertyAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.RequiredFieldValidator" />
        <altmember cref="T:System.Web.UI.WebControls.CustomValidator" />
      </Docs>
    </Member>
    <Member MemberName="DetermineRenderUplevel">
      <MemberSignature Language="C#" Value="protected virtual bool DetermineRenderUplevel ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool DetermineRenderUplevel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.DetermineRenderUplevel" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function DetermineRenderUplevel () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool DetermineRenderUplevel();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Określa, czy formant sprawdzania poprawności można wykonywać weryfikacji po stronie klienta.</summary>
        <returns>
          <see langword="true" /> Jeśli formant sprawdzania poprawności można wykonać walidacji po stronie klienta; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.BaseValidator.DetermineRenderUplevel%2A> Metoda jest funkcji pomocnika, która jest używana głównie przez <xref:System.Web.UI.WebControls.BaseValidator.RenderUplevel%2A> właściwości w celu określenia, czy przeglądarka klienta obsługuje skrypt po stronie klienta. Dla tej właściwości zwrócić `true`, muszą być spełnione następujące warunki:  
  
-   Przeglądarka ma włączono skrypt po stronie klienta.  
  
-   <xref:System.Web.HttpBrowserCapabilitiesBase.W3CDomVersion%2A> Właściwość <xref:System.Web.HttpBrowserCapabilitiesBase> obiekt, który jest przechowywany w <xref:System.Web.HttpRequest.Browser%2A?displayProperty=nameWithType> właściwość jest 1 lub nowszym.  
  
-   <xref:System.Web.Configuration.HttpCapabilitiesBase.EcmaScriptVersion%2A> Właściwość <xref:System.Web.HttpBrowserCapabilitiesBase> obiekt, który jest przechowywany w <xref:System.Web.HttpRequest.Browser%2A?displayProperty=nameWithType> właściwość jest 1.2 lub nowszej.  
  
    > [!NOTE]
    >  Ta metoda jest używana głównie przez deweloperów formantu.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.RenderUplevel" />
      </Docs>
    </Member>
    <Member MemberName="Display">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ValidatorDisplay Display { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.ValidatorDisplay Display" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.Display" />
      <MemberSignature Language="VB.NET" Value="Public Property Display As ValidatorDisplay" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ValidatorDisplay Display { System::Web::UI::WebControls::ValidatorDisplay get(); void set(System::Web::UI::WebControls::ValidatorDisplay value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ValidatorDisplay</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia zachowanie wyświetlania komunikatu o błędzie w formancie sprawdzania poprawności.</summary>
        <value>Jeden z <see cref="T:System.Web.UI.WebControls.ValidatorDisplay" /> wartości. Wartość domyślna to <see langword="Static" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.BaseValidator.Display%2A> właściwości w celu określenia zachowania wyświetlania komunikatu o błędzie w formancie sprawdzania poprawności. W poniższej tabeli wymieniono różne wartości, które mogą być używane.  
  
|Zachowanie wyświetlania|Opis|  
|----------------------|-----------------|  
|`None`|Komunikat weryfikacji nigdy nie jest wyświetlane.|  
|`Static`|Miejsce dla komunikatu weryfikacji jest przydzielane w układ strony.|  
|`Dynamic`|Miejsca dla komunikatu weryfikacji dynamicznie jest dodany do strony, jeśli weryfikacja zakończy się niepowodzeniem.|  
  
> [!NOTE]
>  Zachowanie wyświetlania zależy od tego, czy jest przeprowadzana weryfikacja po stronie klienta. Jeśli weryfikacja po stronie klienta nie jest aktywne (ponieważ przeglądarka nie obsługuje lub została wyłączona za pomocą <xref:System.Web.UI.Page.ClientTarget%2A?displayProperty=nameWithType> dyrektywie strony lub <xref:System.Web.UI.WebControls.BaseValidator.EnableClientScript%2A> właściwości), `ValidatorDisplay.Static` i `ValidatorDisplay.Dynamic` działają tak samo: pobiera komunikat o błędzie zapasowej miejsca tylko wtedy, gdy jest on wyświetlany. Zdolność do dynamicznego przydzielania miejsca dla wiadomości, gdy nie jest wyświetlany (`ValidatorDisplay.Dynamic`) działa tylko z weryfikacji po stronie klienta.  
  
 Nie można ustawić tej właściwości kompozycji lub motywów arkusza stylów. Aby uzyskać więcej informacji, zobacz <xref:System.Web.UI.ThemeableAttribute> i [kompozycji ASP.NET i karnacji](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.WebControls.BaseValidator.Display%2A> właściwości w celu określenia miejsca dla komunikatu weryfikacji jest dodawana do strony sieci Web dynamicznie podczas sprawdzania poprawności zakończy się niepowodzeniem.  
  
> [!IMPORTANT]
>  W tym przykładzie ma pola tekstowego, który akceptuje dane wejściowe użytkownika, który jest potencjalnym zagrożeniem dla bezpieczeństwa. Domyślnie strony sieci Web ASP.NET zweryfikować, czy dane wejściowe użytkownika nie obejmuje skrypt lub elementów HTML. Aby uzyskać więcej informacji, zobacz [Przegląd wykorzystuje skryptu](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[Classic BaseValidator Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic BaseValidator Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic BaseValidator Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic BaseValidator Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Określona wartość nie jest jednym z <see cref="T:System.Web.UI.WebControls.ValidatorDisplay" /> wartości.</exception>
        <altmember cref="T:System.Web.UI.WebControls.ValidatorDisplay" />
      </Docs>
    </Member>
    <Member MemberName="EnableClientScript">
      <MemberSignature Language="C#" Value="public bool EnableClientScript { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableClientScript" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.EnableClientScript" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableClientScript As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableClientScript { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy włączona jest weryfikacja po stronie klienta.</summary>
        <value>
          <see langword="true" /> Jeśli włączona jest weryfikacja po stronie klienta; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.BaseValidator.EnableClientScript%2A> właściwości w celu określenia, czy włączona jest weryfikacja po stronie klienta.  
  
 Formanty walidacji zawsze wykonują sprawdzanie poprawności na serwerze. Mają one również pełną implementację po stronie klienta, która umożliwia przeglądarek obsługiwanych DHTML (takich jak Microsoft Internet Explorer w wersji 4.0 i nowsze) do wykonywania sprawdzania poprawności na kliencie. Sprawdzanie poprawności klienta podnosi poziom proces weryfikacji, sprawdzanie danych wejściowych użytkownika przed ich wysłaniem do serwera. Dzięki temu błędów zostało wykryte na komputerze klienckim przed przesłaniem formularza, unikając obiegu informacji niezbędnych do weryfikacji po stronie serwera.  
  
 Domyślnie ta wartość jest równa `true`, co pozwala weryfikacji po stronie klienta, jeśli przeglądarka obsługuje tę funkcję. Można wyłączyć sprawdzania poprawności po stronie klienta na podstawie kontroli przez formant. Jest to przydatne, jeśli dynamiczne aktualizowanie na kliencie stwarza problemy z układ strony lub jeśli chcesz wykonać kod serwera przed dokonaniem sprawdzania poprawności.  
  
 Nie można ustawić tej właściwości kompozycji lub motywów arkusza stylów. Aby uzyskać więcej informacji, zobacz <xref:System.Web.UI.ThemeableAttribute> i [kompozycji ASP.NET i karnacji](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.WebControls.BaseValidator.EnableClientScript%2A> właściwość, aby wyłączyć weryfikację po stronie klienta, tak aby liczb losowych można wygenerować na serwerze.  
  
> [!IMPORTANT]
>  W tym przykładzie ma pola tekstowego, który akceptuje dane wejściowe użytkownika, który jest potencjalnym zagrożeniem dla bezpieczeństwa. Domyślnie strony sieci Web ASP.NET zweryfikować, czy dane wejściowe użytkownika nie obejmuje skrypt lub elementów HTML. Aby uzyskać więcej informacji, zobacz [Przegląd wykorzystuje skryptu](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[Classic BaseValidator Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic BaseValidator Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic BaseValidator Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic BaseValidator Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.DetermineRenderUplevel" />
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.RegisterValidatorCommonScript" />
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.RegisterValidatorDeclaration" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.RenderUplevel" />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public override bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Enabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy formant sprawdzania poprawności jest włączony.</summary>
        <value>
          <see langword="true" /> Po włączeniu formantu weryfikacji; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.BaseValidator.Enabled%2A> właściwości w celu określenia, czy formant sprawdzania poprawności jest włączony. Przez ustawienie dla tej właściwości można wyłączyć kontroli poprawności `false`.  
  
 Ustawienie albo <xref:System.Web.UI.Control.Visible%2A?displayProperty=nameWithType> lub <xref:System.Web.UI.WebControls.BaseValidator.Enabled%2A> właściwości `false` uniemożliwi sprawdzanie poprawności jest wykonywane. Powoduje to <xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A> właściwość, aby zawsze `true`.  
  
 <xref:System.Web.UI.WebControls.BaseValidator.Enabled%2A> Właściwość jest nieco inne niż <xref:System.Web.UI.Control.Visible%2A?displayProperty=nameWithType> właściwości. Jeśli <xref:System.Web.UI.Control.Visible%2A?displayProperty=nameWithType> ma ustawioną wartość właściwości kontrolki sprawdzania poprawności `true`, ale <xref:System.Web.UI.WebControls.BaseValidator.Enabled%2A> właściwość jest ustawiona na `false`, sprawdzanie poprawności nadal renderowania formantu weryfikacji po stronie klienta, ale w stanie wyłączenia. Następnie można ponownie włączyć kontroli poprawności na kliencie przy użyciu skryptu DHTML.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.WebControls.BaseValidator.Enabled%2A> właściwości, aby włączyć lub wyłączyć formanty walidacji na stronie sieci Web przy użyciu kodu po stronie serwera.  
  
> [!IMPORTANT]
>  W tym przykładzie ma pola tekstowego, który akceptuje dane wejściowe użytkownika, który jest potencjalnym zagrożeniem dla bezpieczeństwa. Domyślnie strony sieci Web ASP.NET zweryfikować, czy dane wejściowe użytkownika nie obejmuje skrypt lub elementów HTML. Aby uzyskać więcej informacji, zobacz [Przegląd wykorzystuje skryptu](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[Classic BaseValidator.Enabled Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic BaseValidator.Enabled Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic BaseValidator.Enabled Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic BaseValidator.Enabled Example/VB/sourcevb.aspx#1)]  
  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.WebControls.BaseValidator.Enabled%2A> właściwości, aby włączyć lub wyłączyć formanty walidacji na stronie sieci Web przy użyciu kodu po stronie klienta.  
  
<!-- TODO: review snippet reference  [!CODE [Classic BaseValidator.Enabled Example2#1](Classic BaseValidator.Enabled Example2#1)]  -->  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ErrorMessage">
      <MemberSignature Language="C#" Value="public string ErrorMessage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ErrorMessage" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.ErrorMessage" />
      <MemberSignature Language="VB.NET" Value="Public Property ErrorMessage As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ErrorMessage { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IValidator.ErrorMessage</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia tekst wyświetlony komunikat o błędzie w <see cref="T:System.Web.UI.WebControls.ValidationSummary" /> kontrolować, jeśli Weryfikacja nie powiedzie się.</summary>
        <value>Komunikat o błędzie wyświetlany w <see cref="T:System.Web.UI.WebControls.ValidationSummary" /> kontrolować, jeśli Weryfikacja nie powiedzie się. Wartość domyślna to ciąg pusty (""), co oznacza, że ta właściwość nie jest ustawiona.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Korzystając z <xref:System.Web.UI.WebControls.ValidationSummary> kontrolować, użyj <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> właściwości w celu określenia tekst do wyświetlenia w <xref:System.Web.UI.WebControls.ValidationSummary> kontrolować, jeśli Weryfikacja nie powiedzie się dla bieżącego formantu sprawdzania poprawności. Aby określić tekst do wyświetlenia w samej kontrolce weryfikacji, użyj <xref:System.Web.UI.WebControls.BaseValidator.Text%2A> właściwości.  
  
> [!NOTE]
>  Jeśli ustawisz <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> właściwości bez ustawienia <xref:System.Web.UI.WebControls.BaseValidator.Text%2A> właściwości, wartość <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> właściwości jest także wyświetlany w formancie sprawdzania poprawności.  
  
 Wartość tej właściwości, gdy są ustawione, można zapisać automatycznie plik zasobów przy użyciu narzędzia Projektant. Aby uzyskać więcej informacji, zobacz <xref:System.ComponentModel.LocalizableAttribute> i [lokalizacja i globalizacja platformy ASP.NET](http://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> właściwości w celu określenia różnych komunikatów dla <xref:System.Web.UI.WebControls.ValidationSummary> kontroli i <xref:System.Web.UI.WebControls.RequiredFieldValidator> i <xref:System.Web.UI.WebControls.CompareValidator> kontrolki.  
  
> [!IMPORTANT]
>  W tym przykładzie ma pola tekstowego, który akceptuje dane wejściowe użytkownika, który jest potencjalnym zagrożeniem dla bezpieczeństwa. Domyślnie strony sieci Web ASP.NET zweryfikować, czy dane wejściowe użytkownika nie obejmuje skrypt lub elementów HTML. Aby uzyskać więcej informacji, zobacz [Przegląd wykorzystuje skryptu](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[Classic BaseValidator Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic BaseValidator Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic BaseValidator Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic BaseValidator Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.ValidationSummary" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.Text" />
      </Docs>
    </Member>
    <Member MemberName="EvaluateIsValid">
      <MemberSignature Language="C#" Value="protected abstract bool EvaluateIsValid ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool EvaluateIsValid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.EvaluateIsValid" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function EvaluateIsValid () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool EvaluateIsValid();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>W przypadku przesłonięcia w klasie pochodnej, ta metoda zawiera kod, aby ustalić, czy wartość formantu wejściowy jest nieprawidłowy.</summary>
        <returns>
          <see langword="true" /> Jeśli wartość w formancie wejściowy jest nieprawidłowy; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.BaseValidator.EvaluateIsValid%2A> metodę, aby określić, czy określona wartość w kontrolki wprowadzania przez <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> właściwości jest nieprawidłowa.  
  
> [!NOTE]
>  Ta metoda jest używana głównie przez deweloperów formantu.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Należy zaimplementować tę metodę w klasie pochodnej do zwrócenia, czy wartość w formancie wejściowej jest prawidłowa.</para>
        </block>
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.IsValid" />
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.Validate" />
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.ForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ForeColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color ForeColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "Red")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia kolor komunikat wyświetlany w przypadku niepowodzenia weryfikacji.</summary>
        <value>A <see cref="T:System.Drawing.Color" /> reprezentujący kolor komunikat wyświetlany w przypadku niepowodzenia weryfikacji. Wartość domyślna to <see cref="P:System.Drawing.Color.Red" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.BaseValidator.ForeColor%2A> właściwości w celu określenia kolor tekstu niestandardowego komunikat wyświetlany w formancie sprawdzania poprawności w przypadku niepowodzenia weryfikacji.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.WebControls.BaseValidator.ForeColor%2A> właściwości do wyświetlenia komunikatu weryfikacji w kolorze niebieskim.  
  
> [!IMPORTANT]
>  W tym przykładzie ma pola tekstowego, który akceptuje dane wejściowe użytkownika, który jest potencjalnym zagrożeniem dla bezpieczeństwa. Domyślnie strony sieci Web ASP.NET zweryfikować, czy dane wejściowe użytkownika nie obejmuje skrypt lub elementów HTML. Aby uzyskać więcej informacji, zobacz [Przegląd wykorzystuje skryptu](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[Classic BaseValidator.ForeColor Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic BaseValidator.ForeColor Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic BaseValidator.ForeColor Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic BaseValidator.ForeColor Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Color" />
      </Docs>
    </Member>
    <Member MemberName="GetControlRenderID">
      <MemberSignature Language="C#" Value="protected string GetControlRenderID (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string GetControlRenderID(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.GetControlRenderID(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetControlRenderID (name As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ GetControlRenderID(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nazwa formantu, aby uzyskać identyfikator klienta z.</param>
        <summary>Pobiera identyfikator klienta określony formant.</summary>
        <returns>Identyfikator klienta określony formant.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.BaseValidator.GetControlRenderID%2A> metody, aby uzyskać identyfikator klienta określony formant. Aby uzyskać więcej informacji, zobacz <xref:System.Web.UI.Control.ClientID%2A>.  
  
> [!NOTE]
>  Ta metoda jest używana głównie przez deweloperów formantu.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.ClientID" />
      </Docs>
    </Member>
    <Member MemberName="GetControlValidationValue">
      <MemberSignature Language="C#" Value="protected string GetControlValidationValue (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string GetControlValidationValue(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.GetControlValidationValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetControlValidationValue (name As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ GetControlValidationValue(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nazwa kontrolki wprowadzania do pobrana wartość.</param>
        <summary>Pobiera wartość skojarzoną z określonym kontrolki wprowadzania.</summary>
        <returns>Wartość skojarzoną z określonym kontrolki wprowadzania.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.BaseValidator.GetControlValidationValue%2A> metodę, aby pobrać wartość skojarzoną z określonym kontrolki wprowadzania, niezależnie od typu formantu. Na przykład służy tej metody można uzyskać wartość <xref:System.Web.UI.WebControls.TextBox> kontroli, jak również wartość wybranego elementu z <xref:System.Web.UI.WebControls.ListBox> formantu. Jeśli nie można odnaleźć określonego formantu, `null` jest zwracany.  
  
> [!NOTE]
>  Ta metoda jest używana głównie przez deweloperów formantu.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.GetValidationProperty(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetValidationProperty">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.PropertyDescriptor GetValidationProperty (object component);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.PropertyDescriptor GetValidationProperty(object component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.GetValidationProperty(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetValidationProperty (component As Object) As PropertyDescriptor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::PropertyDescriptor ^ GetValidationProperty(System::Object ^ component);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="component">A <see cref="T:System.Object" /> reprezentujący formantu można pobrać właściwości weryfikacji.</param>
        <summary>Określa właściwość walidacji formantu (jeśli istnieje).</summary>
        <returns>A <see cref="T:System.ComponentModel.PropertyDescriptor" /> zawiera właściwość walidacji formantu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.BaseValidator.GetValidationProperty%2A> Metoda jest funkcji pomocnika, która pobiera właściwość sprawdzania poprawności określonej kontrolki wprowadzania.  
  
> [!NOTE]
>  Ta metoda jest używana głównie przez deweloperów formantu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.PropertyDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="IsUnobtrusive">
      <MemberSignature Language="C#" Value="protected bool IsUnobtrusive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUnobtrusive" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.IsUnobtrusive" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property IsUnobtrusive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsUnobtrusive { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy formant generuje dyskretny kod JavaScript.</summary>
        <value>
          <see langword="true" /> Jeśli formant generuje dyskretnego kodu JavaScript; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość zwraca `false` Jeśli <xref:System.Web.UI.Page.UnobtrusiveValidationMode%2A> wartość właściwości jest <xref:System.Web.UI.UnobtrusiveValidationMode.None>; w przeciwnym razie ta właściwość zwraca `true` .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public bool IsValid { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValid" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.IsValid" />
      <MemberSignature Language="VB.NET" Value="Public Property IsValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValid { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IValidator.IsValid</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy skojarzony kontrolki wprowadzania pozytywnej weryfikacji.</summary>
        <value>
          <see langword="true" /> Jeśli skojarzona kontrolki wprowadzania pozytywnej weryfikacji; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A> właściwości w celu określenia, czy skojarzony kontrolki wprowadzania pozytywnej weryfikacji.  
  
> [!CAUTION]
>  Ponieważ wartość domyślna tej właściwości to `true`, zwróci `true` po wykonaniu tej właściwości zapytania przed weryfikacji. Na przykład, taka sytuacja może wystąpić przy próbie używają tej właściwości w <xref:System.Web.UI.Control.Load?displayProperty=nameWithType> zdarzeń strony.  
  
 <xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A> Właściwości jest oceniane tylko wtedy, gdy <xref:System.Web.UI.WebControls.BaseValidator.Validate%2A> metoda jest wywoływana. Możesz wywołać <xref:System.Web.UI.WebControls.BaseValidator.Validate%2A> metodę sprawdzania poprawności każdego kontrolowania na stronie indywidualnie lub wszystkie z nich na raz wywołać przy użyciu <xref:System.Web.UI.Page.Validate%2A?displayProperty=nameWithType> metody. Przycisk kontrolki z ich `CausesValidation` ustawioną właściwość `true` spowoduje również wywołania <xref:System.Web.UI.Page.Validate%2A?displayProperty=nameWithType> metody.  
  
> [!NOTE]
>  Istnieje możliwość zmiany wartości tej właściwości ręcznie po przeprowadzeniu sprawdzania poprawności. Dzięki temu można zastąpić wynik weryfikacji w razie potrzeby.  
  
 <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> Właściwości dla strony ustawiono `true` tylko wtedy, gdy <xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A> również ustawiono właściwość dla każdego formantu sprawdzania poprawności na stronie `true`.  
  
 Nie można ustawić tej właściwości kompozycji lub motywów arkusza stylów. Aby uzyskać więcej informacji, zobacz <xref:System.Web.UI.ThemeableAttribute> i [kompozycji ASP.NET i karnacji](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A> właściwości w celu określenia, czy skojarzony kontrolki wprowadzania pozytywnej weryfikacji.  
  
> [!IMPORTANT]
>  W tym przykładzie ma pola tekstowego, który akceptuje dane wejściowe użytkownika, który jest potencjalnym zagrożeniem dla bezpieczeństwa. Domyślnie strony sieci Web ASP.NET zweryfikować, czy dane wejściowe użytkownika nie obejmuje skrypt lub elementów HTML. Aby uzyskać więcej informacji, zobacz [Przegląd wykorzystuje skryptu](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[BaseValidatorIsValid#1](~/samples/snippets/csharp/VS_Snippets_WebNet/BaseValidatorIsValid/CS/basevalidatorisvalidcs.aspx#1)]
 [!code-aspx-vb[BaseValidatorIsValid#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/BaseValidatorIsValid/VB/basevalidatorisvalidvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />
        <altmember cref="E:System.Web.UI.Control.Load" />
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.Validate" />
        <altmember cref="M:System.Web.UI.Page.Validate" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.IsValid" />
        <altmember cref="P:System.Web.UI.Page.IsValid" />
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.EventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Zgłasza <see cref="E:System.Web.UI.Control.Init" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po ta metoda wywołuje kontrolki podstawowej <xref:System.Web.UI.Control.OnInit%2A> metody, ustawia <xref:System.Web.UI.WebControls.WebControl.ForeColor%2A> właściwości <xref:System.Drawing.Color.Red%2A> , jeśli są spełnione następujące warunki:  
  
-   <xref:System.Web.UI.WebControls.WebControl.ForeColor%2A> Właściwość nie jest już ustawiona.  
  
-   <xref:System.Web.UI.Control.RenderingCompatibility%2A> Właściwość wskazuje ASP.NET w wersji starszej niż `4.0`. Domyślnie formantów modułu sprawdzania poprawności w technologii ASP.NET 4 i nowsze wersje nie są wyświetlane błędy kolorem czerwonym. Aby uzyskać informacje o sposobie kontrolowania wygląd kontrolki modułu sprawdzania poprawności, zobacz [sprawdzanie poprawności danych wejściowych użytkownika w programie ASP.NET Web Pages](http://msdn.microsoft.com/library/4ad3dacb-89e0-4cee-89ac-40a3f2a85461).  
  
 Ta metoda rejestruje także kontroli poprawności na stronie.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>W przypadku przesłaniania <see cref="M:System.Web.UI.WebControls.BaseValidator.OnInit(System.EventArgs)" /> w klasie pochodnej, należy wywołać klasy podstawowej <see cref="M:System.Web.UI.WebControls.BaseValidator.OnInit(System.EventArgs)" /> metody, które zarejestrowane delegatów odbierać zdarzenia.</para>
        </block>
        <altmember cref="E:System.Web.UI.Control.Init" />
        <altmember cref="M:System.Web.UI.Control.OnInit(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected internal override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.OnPreRender(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnPreRender (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnPreRender(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.EventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Zgłasza <see cref="E:System.Web.UI.Control.PreRender" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda została zastąpiona można sprawdzić w przeglądarce klienta i skonfigurować kontrolę weryfikacji zgodności przed renderowaniem.  
  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).  
  
 <xref:System.Web.UI.WebControls.BaseValidator.OnPreRender%2A> Metoda umożliwia również klas pochodnych do obsługi zdarzenia bez dołączanie delegata. Jest to preferowana metoda obsługi zdarzeń w klasie pochodnej.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>W przypadku przesłaniania <see cref="M:System.Web.UI.WebControls.BaseValidator.OnPreRender(System.EventArgs)" /> w klasie pochodnej, należy wywołać klasy podstawowej <see cref="M:System.Web.UI.WebControls.BaseValidator.OnPreRender(System.EventArgs)" /> metody, które zarejestrowane delegatów odbierać zdarzenia.</para>
        </block>
        <altmember cref="E:System.Web.UI.Control.PreRender" />
        <altmember cref="M:System.Web.UI.Control.OnPreRender(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnUnload">
      <MemberSignature Language="C#" Value="protected internal override void OnUnload (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnUnload(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.OnUnload(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnUnload (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnUnload(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.EventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Zgłasza <see cref="E:System.Web.UI.Control.Unload" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda została zastąpiona wyrejestrować formantu sprawdzania poprawności na stronie.  
  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).  
  
 <xref:System.Web.UI.WebControls.BaseValidator.OnUnload%2A> Metoda umożliwia również klas pochodnych do obsługi zdarzenia bez dołączanie delegata. Jest to preferowana metoda obsługi zdarzeń w klasie pochodnej.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>W przypadku przesłaniania <see cref="M:System.Web.UI.WebControls.BaseValidator.OnUnload(System.EventArgs)" /> w klasie pochodnej, należy wywołać klasy podstawowej <see cref="M:System.Web.UI.WebControls.BaseValidator.OnUnload(System.EventArgs)" /> metody, które zarejestrowane delegatów odbierać zdarzenia.</para>
        </block>
        <altmember cref="E:System.Web.UI.Control.Unload" />
        <altmember cref="M:System.Web.UI.Control.OnUnload(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="PropertiesValid">
      <MemberSignature Language="C#" Value="protected bool PropertiesValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PropertiesValid" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.PropertiesValid" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property PropertiesValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool PropertiesValid { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy formant określone przez <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> właściwości jest nieprawidłowa.</summary>
        <value>
          <see langword="true" /> Jeśli formant określony przez <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> jest prawidłowy; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.BaseValidator.PropertiesValid%2A> umożliwia określenie, czy <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> właściwość zawiera nieprawidłowy kontrolki wprowadzania. Jako prawidłowy kontrolki wprowadzania <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> musi być ustawiona właściwość do formantu na stronie.  
  
> [!NOTE]
>  Ta właściwość jest używana głównie przez deweloperów formantu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Nie określono wartości w <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> właściwości.  
  
 \- lub -  
  
 Kontrolki wprowadzania określony przez <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> na stronie nie odnaleziono właściwości.</exception>
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.ControlPropertiesValid" />
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.CheckControlValidationProperty(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterValidatorCommonScript">
      <MemberSignature Language="C#" Value="protected void RegisterValidatorCommonScript ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RegisterValidatorCommonScript() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.RegisterValidatorCommonScript" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RegisterValidatorCommonScript ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RegisterValidatorCommonScript();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rejestruje kod na stronie weryfikacji po stronie klienta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.BaseValidator.RegisterValidatorCommonScript%2A> metody do rejestrowania kodu na stronie, aby przeprowadzić weryfikacji po stronie klienta.  
  
> [!NOTE]
>  Ta metoda jest używana głównie przez deweloperów formantu.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Wywołanie tej metody <see cref="E:System.Web.UI.Control.PreRender" /> obsługi zdarzeń klasy pochodnej, aby zarejestrować kod, który przeprowadza weryfikację po stronie klienta.</para>
        </block>
        <altmember cref="E:System.Web.UI.Control.PreRender" />
      </Docs>
    </Member>
    <Member MemberName="RegisterValidatorDeclaration">
      <MemberSignature Language="C#" Value="protected virtual void RegisterValidatorDeclaration ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RegisterValidatorDeclaration() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.RegisterValidatorDeclaration" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub RegisterValidatorDeclaration ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void RegisterValidatorDeclaration();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rejestruje ECMAScript deklaracja tablicy przy użyciu nazwy tablicy <see langword="Page_Validators" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.BaseValidator.RegisterValidatorDeclaration%2A> metody do rejestrowania przy użyciu nazwy tablicy deklarację tablicy ECMAScript `Page_Validators`.  
  
> [!NOTE]
>  Ta metoda jest używana głównie przez deweloperów formantu.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.RegisterArrayDeclaration(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter" /> zawierający strumienia wyjściowego do renderowania na kliencie.</param>
        <summary>Wyświetla formant na kliencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.BaseValidator.Render%2A> Metoda służy do generowania kod znaczników HTML dla formantu sprawdzania poprawności.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
        <altmember cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="RenderUplevel">
      <MemberSignature Language="C#" Value="protected bool RenderUplevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RenderUplevel" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.RenderUplevel" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property RenderUplevel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool RenderUplevel { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy przeglądarka klienta obsługuje renderowanie "wyższej".</summary>
        <value>
          <see langword="true" /> Jeśli przeglądarka obsługuje renderowanie "wyższej"; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.BaseValidator.RenderUplevel%2A> właściwości w celu określenia, czy przeglądarka klienta obsługuje renderowanie "wyższej". W przeglądarce do obsługi renderowania "wyższej" musi obsługiwać Microsoft Internet Explorer modelu DOM (Document Object) w wersji 4 lub nowszej i ECMAScript w wersji 1.2 lub nowszej.  
  
> [!NOTE]
>  Ta właściwość jest używana głównie przez deweloperów formantu.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.DetermineRenderUplevel" />
      </Docs>
    </Member>
    <Member MemberName="SetFocusOnError">
      <MemberSignature Language="C#" Value="public bool SetFocusOnError { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SetFocusOnError" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.SetFocusOnError" />
      <MemberSignature Language="VB.NET" Value="Public Property SetFocusOnError As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SetFocusOnError { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy fokus jest ustawiony do formantu określony przez <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> właściwości w przypadku niepowodzenia weryfikacji.</summary>
        <value>
          <see langword="true" /> można ustawić fokus na określone przez formant <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> przypadku niepowodzenia weryfikacji; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.BaseValidator.SetFocusOnError%2A> właściwości w celu określenia, czy fokus jest automatycznie ustawiana określony przez formant <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> właściwości, gdy ten formant weryfikacji nie powiedzie się. Dzięki temu użytkownikowi na szybkie aktualizowanie właściwej opcji kontroli.  
  
 Wiele formantów Weryfikacja się nie powieść, jeśli ta właściwość jest ustawiona na `true`, formantu określony w <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> właściwości dla pierwszego formantu weryfikacji uzyskuje fokus.  
  
 Nie można ustawić tej właściwości kompozycji lub motywów arkusza stylów. Aby uzyskać więcej informacji, zobacz <xref:System.Web.UI.ThemeableAttribute> i [kompozycji ASP.NET i karnacji](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.Text" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerDefaultProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia tekst wyświetlany w formancie sprawdzania poprawności w przypadku niepowodzenia weryfikacji.</summary>
        <value>Tekst wyświetlany w formancie sprawdzania poprawności w przypadku niepowodzenia weryfikacji. Wartość domyślna to ciąg pusty (""), co oznacza, że ta właściwość nie jest ustawiona.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.BaseValidator.Text%2A> właściwości w celu określenia tekst do wyświetlenia w formancie weryfikacji w przypadku niepowodzenia weryfikacji. Można również wyświetlić podsumowanie wszystkich kontrolek, które niepowodzenie sprawdzania poprawności na stronie przy użyciu <xref:System.Web.UI.WebControls.ValidationSummary> formantu. Aby określić tekst do wyświetlenia w <xref:System.Web.UI.WebControls.ValidationSummary> kontrolować, użyj <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> właściwości.  
  
> [!NOTE]
>  Jeśli ustawisz <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> właściwości bez ustawienia <xref:System.Web.UI.WebControls.BaseValidator.Text%2A> właściwości, wartość <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> właściwości jest także wyświetlany w formancie sprawdzania poprawności.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.ValidationSummary" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ErrorMessage" />
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.Validate" />
      <MemberSignature Language="VB.NET" Value="Public Sub Validate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Validate();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IValidator.Validate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sprawdza poprawność skojarzone kontrolki wprowadzania i aktualizacje <see cref="P:System.Web.UI.WebControls.BaseValidator.IsValid" /> właściwości.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.BaseValidator.Validate%2A> metodę w celu weryfikacji w skojarzonym formancie wejściowego. Ta metoda umożliwia programowo wykonywać walidację na kontrolki wprowadzania. <xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A> Właściwość zostanie automatycznie zaktualizowana wyniki sprawdzania poprawności.  
  
   
  
## Examples  
 Przykład <xref:System.Web.UI.WebControls.BaseValidator.Validate%2A> zobacz metodę w klasie pochodnej <xref:System.Web.UI.WebControls.CompareValidator> Przegląd klasy.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.IsValid" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ValidationGroup" />
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.EvaluateIsValid" />
      </Docs>
    </Member>
    <Member MemberName="ValidationGroup">
      <MemberSignature Language="C#" Value="public virtual string ValidationGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ValidationGroup" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.ValidationGroup" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ValidationGroup As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ValidationGroup { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę grupy walidacji, do której należy ten formant sprawdzania poprawności.</summary>
        <value>Nazwa grupy walidacji, do której należy ten formant sprawdzania poprawności. Wartość domyślna to ciąg pusty (""), co oznacza, że ta właściwość nie jest ustawiona.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Program ASP.NET udostępnia wiele formantów, które mają możliwość publikowania na serwer. Jeśli jeden z tych kontrolek zawiera jego `CausesValidation` ustawioną właściwość `true`, sprawdzanie poprawności jest wykonywane, gdy formant dokonuje ogłoszenia serwera. Następujące formanty mają możliwość publikowania na serwerze:  
  
-   <xref:System.Web.UI.WebControls.BulletedList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.Button?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.CheckBox?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.CheckBoxList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.DropDownList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlButton?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputButton?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputImage?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.ImageButton?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.LinkButton?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.ListBox?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.RadioButtonList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.TextBox?displayProperty=nameWithType>  
  
> [!NOTE]
>  Niektóre z tych zabezpieczeń post do serwera tylko wtedy, gdy `AutoPostBack` właściwość jest ustawiona na `true`.  
  
 Te każdy formantów ma `ValidationGroup` właściwości, gdy są ustawione, weryfikuje tylko formanty walidacji w ramach określonej grupy, gdy kontrolka wyzwala post do serwera. Użyj <xref:System.Web.UI.WebControls.BaseValidator.ValidationGroup%2A> właściwość do przypisania formantu weryfikacji do grupy sprawdzania poprawności. <xref:System.Web.UI.Page> Klasy również ujawnia <xref:System.Web.UI.Page.GetValidators%2A> — metoda i <xref:System.Web.UI.Page.Validate%2A> metody, które akceptują <xref:System.Web.UI.WebControls.BaseValidator.ValidationGroup%2A> parametru wejściowego.  
  
 Nie można ustawić tej właściwości kompozycji lub motywów arkusza stylów. Aby uzyskać więcej informacji, zobacz <xref:System.Web.UI.ThemeableAttribute> i [kompozycji ASP.NET i karnacji](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.WebControls.BaseValidator.ValidationGroup%2A> właściwość do przypisania do grupy formantu sprawdzania poprawności.  
  
> [!IMPORTANT]
>  W tym przykładzie ma pola tekstowego, który akceptuje dane wejściowe użytkownika, który jest potencjalnym zagrożeniem dla bezpieczeństwa. Domyślnie strony sieci Web ASP.NET zweryfikować, czy dane wejściowe użytkownika nie obejmuje skrypt lub elementów HTML. Aby uzyskać więcej informacji, zobacz [Przegląd wykorzystuje skryptu](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[BaseValidatorValidationGroup#1](~/samples/snippets/csharp/VS_Snippets_WebNet/BaseValidatorValidationGroup/CS/BaseValidatorValidationGroupcs.aspx#1)]
 [!code-aspx-vb[BaseValidatorValidationGroup#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/BaseValidatorValidationGroup/VB/BaseValidatorValidationGroupvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.IButtonControl.CausesValidation" />
        <altmember cref="P:System.Web.UI.WebControls.IButtonControl.ValidationGroup" />
        <altmember cref="M:System.Web.UI.Page.Validate" />
        <altmember cref="M:System.Web.UI.Page.GetValidators(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>