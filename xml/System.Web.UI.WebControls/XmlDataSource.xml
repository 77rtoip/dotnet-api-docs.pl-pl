<Type Name="XmlDataSource" FullName="System.Web.UI.WebControls.XmlDataSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e80040e0b6f88a7b20d337228c83fb1384c6a83f" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69399201" /></Metadata><TypeSignature Language="C#" Value="public class XmlDataSource : System.Web.UI.HierarchicalDataSourceControl, System.ComponentModel.IListSource, System.Web.UI.IDataSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlDataSource extends System.Web.UI.HierarchicalDataSourceControl implements class System.ComponentModel.IListSource, class System.Web.UI.IDataSource" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.XmlDataSource" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlDataSource&#xA;Inherits HierarchicalDataSourceControl&#xA;Implements IDataSource, IListSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlDataSource : System::Web::UI::HierarchicalDataSourceControl, System::ComponentModel::IListSource, System::Web::UI::IDataSource" />
  <TypeSignature Language="F#" Value="type XmlDataSource = class&#xA;    inherit HierarchicalDataSourceControl&#xA;    interface IDataSource&#xA;    interface IListSource" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.HierarchicalDataSourceControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IDataSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Transforming")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("DataFile")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.XmlDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.XmlDataSource))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.XmlDataSourceDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje źródło danych XML do formantów powiązanych z danymi.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W tym temacie:  
  
-   [Wprowadzenie](#introduction)  
  
-   [Źródła danych XML](#source_of_xml_data)  
  
-   [Aktualizowanie danych XML](#updating_xml_data)  
  
-   [Określanie XSL Transformation](#specifying_an_xsl_transformation)  
  
-   [Filtrowanie przy użyciu wyrażenia XPath](#filtering_using_an_xpath_expression)  
  
-   [Buforowanie](#caching)  
  
-   [Dodatkowe funkcje](#additional_features)  
  
-   [Obiekt widoku danych](#data_view_object)  
  
-   [Składnia deklaracyjne](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Wprowadzenie  
 <xref:System.Web.UI.WebControls.XmlDataSource> Kontrolka jest formantem źródła danych, który przedstawia dane XML w formantach powiązanych z danymi. <xref:System.Web.UI.WebControls.XmlDataSource> Kontrolka może być używana przez kontrolki powiązane z danymi, aby wyświetlać zarówno dane hierarchiczne, jak i tabelaryczne. <xref:System.Web.UI.WebControls.XmlDataSource> Kontrolka jest zwykle używana do wyświetlania hierarchicznych danych XML w scenariuszach tylko do odczytu. <xref:System.Web.UI.WebControls.XmlDataSource> Ponieważ formant<xref:System.Web.UI.HierarchicalDataSourceControl> rozszerza klasę, działa z danymi hierarchicznymi. Kontrolka implementuje również interfejs i współpracuje ze tabelarycznym lub stylem listy. <xref:System.Web.UI.IDataSource> <xref:System.Web.UI.WebControls.XmlDataSource>  
  
> [!NOTE]
>  Ze względów bezpieczeństwa żadna z <xref:System.Web.UI.WebControls.XmlDataSource> właściwości kontrolki nie jest przechowywana w stanie widoku. Ponieważ jest technicznie możliwe, aby zdekodować zawartość stanu widoku na kliencie, przechowywanie poufnych informacji o strukturze danych lub jego zawartości może ujawnić zagrożenie ujawnieniem informacji. Należy pamiętać, że jeśli konieczne będzie przechowywanie informacji, <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> takich jak właściwość w stanie widoku, można włączyć szyfrowanie, aby chronić zawartość przez <xref:System.Web.UI.Page.ViewStateEncryptionMode%2A> ustawienie w `@ Page` dyrektywie.  
  
 Deweloperzy stron używają <xref:System.Web.UI.WebControls.XmlDataSource> kontrolki do wyświetlania danych XML przy użyciu formantów powiązanych z danymi.  
  
<a name="source_of_xml_data"></a>   
## <a name="sources-of-xml-data"></a>Źródła danych XML  
 Zwykle ładuje dane XML z pliku XML, który jest określony <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> przez właściwość. <xref:System.Web.UI.WebControls.XmlDataSource> Dane XML mogą być również przechowywane bezpośrednio przez formant źródła danych w postaci ciągu przy użyciu <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> właściwości. Jeśli chcesz przekształcić dane XML przed wyświetleniem ich przez kontrolkę powiązaną z danymi, możesz udostępnić arkusz stylów Extensible Stylesheet Language (XSL) dla transformacji. Podobnie jak w przypadku danych XML, zazwyczaj załadujesz arkusz stylów z pliku, który jest wskazywany przez <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> właściwość, ale można go również przechowywać w postaci ciągów bezpośrednio <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> przy użyciu właściwości.  
  
<a name="updating_xml_data"></a>   
## <a name="updating-xml-data"></a>Aktualizowanie danych XML  
 <xref:System.Web.UI.WebControls.XmlDataSource> Kontrolka jest często używana w scenariuszach danych tylko do odczytu, w których formant powiązany z danymi wyświetla dane XML. Można jednak również edytować dane XML przy <xref:System.Web.UI.WebControls.XmlDataSource> użyciu kontrolki. Aby edytować dane XML, wywołaj <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> metodę, aby <xref:System.Xml.XmlDataDocument> pobrać obiekt, który jest reprezentacją danych XML w pamięci. Można użyć modelu obiektów uwidocznionego przez obiekty i <xref:System.Xml.XmlDataDocument> <xref:System.Xml.XmlNode> , które zawiera, lub użyć wyrażenia filtrowania XPath do manipulowania danymi w dokumencie. Gdy wprowadzono zmiany w reprezentacji danych XML w pamięci, możesz zapisać je na dysku, wywołując <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> metodę.  
  
 Istnieją pewne ograniczenia dotyczące możliwości <xref:System.Web.UI.WebControls.XmlDataSource> edycji formantu:  
  
-   Dane XML muszą zostać załadowane z pliku XML, który jest wskazywany przez <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> właściwość, a nie z wbudowanego kodu XML <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> określonego we właściwości.  
  
-   We <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> właściwościach lub <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> nie można określić transformacji XSLT.  
  
-   <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> Metoda nie obsługuje współbieżnych operacji zapisu przez różne żądania. Jeśli więcej niż jeden użytkownik edytuje plik XML za pomocą programu <xref:System.Web.UI.WebControls.XmlDataSource>, nie ma gwarancji, że wszyscy użytkownicy pracują z tymi samymi danymi. Istnieje również możliwość <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> , że operacja nie powiedzie się z powodu tych samych problemów współbieżności.  
  
<a name="specifying_an_xsl_transformation"></a>   
## <a name="specifying-an-xsl-transformation"></a>Określanie XSL Transformation  
 Typowa Operacja wykonywana z danymi XML jest przekształcana z jednego zestawu danych XML na inny. Kontrolka obsługuje przekształcenia XML <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> z właściwościami <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> i, które określają arkusz stylów XSL, który ma zostać zastosowany do danych XML przed przekazaniem do formantu powiązanego z danymi <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> , i właściwość, która umożliwia <xref:System.Web.UI.WebControls.XmlDataSource> Podaj dynamiczne argumenty arkusza stylów XSLT, które mają być używane przez arkusz stylów XSL podczas przekształcania. Jeśli określisz wyrażenie filtrowania XPath przy użyciu <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> właściwości, zostanie ono zastosowane po przekształceniu.  
  
> [!NOTE]
>  Klasa używa przestarzałej klasy do wykonywania transformacji XSL. <xref:System.Xml.Xsl.XslTransform> <xref:System.Web.UI.WebControls.XmlDataSource> Jeśli chcesz użyć funkcji arkusza stylów, które zostały wprowadzone po <xref:System.Xml.Xsl.XslTransform> zaniechaniu klasy, Zastosuj transformacje ręcznie przy <xref:System.Xml.Xsl.XslCompiledTransform> użyciu klasy.  
  
<a name="filtering_using_an_xpath_expression"></a>   
## <a name="filtering-using-an-xpath-expression"></a>Filtrowanie przy użyciu wyrażenia XPath  
 Domyślnie <xref:System.Web.UI.WebControls.XmlDataSource> formant ładuje wszystkie dane XML w pliku XML identyfikowanym <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> przez właściwość <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> lub znalezione wewnętrznie we właściwości, ale można filtrować dane przy użyciu wyrażenia XPath. <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> Właściwość obsługuje filtr składni XPath, który jest stosowany po załadowaniu i przekształcaniu danych XML.  
  
<a name="caching"></a>   
## <a name="caching"></a>Buforowanie  
 W celu zapewnienia wydajności buforowanie jest domyślnie włączone dla <xref:System.Web.UI.WebControls.XmlDataSource> kontrolki. Otwieranie i odczytywanie pliku XML na serwerze za każdym razem, gdy żądana strona może zmniejszyć wydajność aplikacji. Buforowanie pozwala zmniejszyć obciążenie przetwarzaniem na serwerze kosztem pamięci na serwerze sieci Web; w większości przypadków jest to dobry handel. Automatycznie buforuje dane, <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> gdy właściwość jest <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> ustawiona na `true`, a właściwość jest ustawiona na liczbę sekund, w ciągu których dane są przechowywane w pamięci podręcznej przed unieważnieniem pamięci podręcznej. <xref:System.Web.UI.WebControls.XmlDataSource> Możesz użyć, <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> aby dokładniej dostosować zachowanie pamięci podręcznej kontroli źródła danych.  
  
<a name="additional_features"></a>   
## <a name="additional-features"></a>Dodatkowe funkcje  
 W poniższej tabeli wymieniono dodatkowe funkcje, które są obsługiwane <xref:System.Web.UI.WebControls.XmlDataSource> przez formant.  
  
|Możliwość|Opis|  
|----------------|-----------------|  
|Sortowanie|Nieobsługiwane przez <xref:System.Web.UI.WebControls.XmlDataSource> formant.|  
|Filtrowanie|<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> Właściwość może służyć do filtrowania danych XML przy użyciu odpowiedniego wyrażenia XPath.|  
|Stronicowanie|Nieobsługiwane przez <xref:System.Web.UI.WebControls.XmlDataSource> formant.|  
|Aktualizowanie|Obsługiwane przez manipulowanie <xref:System.Xml.XmlDataDocument> bezpośrednio, a następnie <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> wywołaniem metody.|  
|Usunąć|Obsługiwane przez manipulowanie <xref:System.Xml.XmlDataDocument> bezpośrednio, a następnie <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> wywołaniem metody.|  
|Wstawieniu|Obsługiwane przez manipulowanie <xref:System.Xml.XmlDataDocument> bezpośrednio, a następnie <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> wywołaniem metody.|  
|Buforowanie|Domyślnie włączone, z <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> właściwością ustawioną na 0 (nieskończoną) <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> i właściwością ustawioną na <xref:System.Web.UI.DataSourceCacheExpiry.Absolute>.|  
  
<a name="data_view_object"></a>   
## <a name="data-view-object"></a>Obiekt widoku danych  
 <xref:System.Web.UI.WebControls.XmlDataSource> Ponieważ kontrolka obsługuje kontrolki powiązane z danymi, które wyświetlają dane hierarchiczne, a także kontrolki, które wyświetlają dane tabelaryczne, formant źródła danych obsługuje wiele typów obiektów widoku źródła danych na swoich źródłowych danych XML. Kontrolka pobiera pojedynczy nazwany <xref:System.Web.UI.WebControls.XmlDataSourceView> obiekt, gdy jest używany z kontrolką powiązaną z danymi, która wyświetla dane tabelaryczne. <xref:System.Web.UI.WebControls.XmlDataSource> <xref:System.Web.UI.IDataSource.GetViewNames%2A> Metoda identyfikuje ten pojedynczy nazwany widok. Gdy jest używany z kontrolką powiązaną z danymi, która wyświetla dane hierarchiczne, <xref:System.Web.UI.WebControls.XmlDataSource> formant <xref:System.Web.UI.WebControls.XmlHierarchicalDataSourceView> pobiera dla każdej unikatowej ścieżki <xref:System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView%2A> hierarchicznej przesłanej do metody.  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>Składnia deklaracyjna  
  
```  
<asp:XmlDataSource  
    CacheDuration="string|Infinite"  
    CacheExpirationPolicy="Absolute|Sliding"  
    CacheKeyDependency="string"  
    DataFile="string"  
    EnableCaching="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    ID="string"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnTransforming="Transforming event handler"  
    OnUnload="Unload event handler"  
    runat="server"  
    SkinID="string"  
    TransformArgumentList="string"  
    TransformFile="string"  
    Visible="True|False"  
    XPath="string"  
>  
    <Data>string</Data>  
    <Transform>string</Transform>  
</asp:XmlDataSource>  
```  
  
   
  
## Examples  
 Ten rozdział zawiera dwa przykłady kodu. Pierwszy przykład kodu demonstruje, jak używać <xref:System.Web.UI.WebControls.XmlDataSource> kontrolki <xref:System.Web.UI.WebControls.TreeView> z kontrolką do wyświetlania danych XML z przykładowego pliku XML. Drugi przykład ilustruje sposób używania <xref:System.Web.UI.WebControls.XmlDataSource> kontrolki z <xref:System.Web.UI.WebControls.Repeater> formantem z szablonem do wyświetlania danych XML.  
  
 Poniższy przykład kodu ilustruje sposób używania <xref:System.Web.UI.WebControls.XmlDataSource> kontrolki <xref:System.Web.UI.WebControls.TreeView> z kontrolką do wyświetlania danych XML. Ładuje dane XML z pliku XML identyfikowanego <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> przez właściwość. <xref:System.Web.UI.WebControls.XmlDataSource>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/CS/xmlds1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/VB/xmlds1vb.aspx#1)]  
  
 Plik XML w przykładzie kodu zawiera następujące dane:  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 Poniższy przykład kodu ilustruje sposób używania <xref:System.Web.UI.WebControls.XmlDataSource> kontrolki z <xref:System.Web.UI.WebControls.Repeater> formantem z szablonem do wyświetlania danych XML. Kontrolka używa wyrażenia powiązania danych XPath <xref:System.Web.UI.WebControls.XmlDataSource> , aby powiązać elementy danych w dokumencie XML, który reprezentuje. <xref:System.Web.UI.WebControls.Repeater> Aby uzyskać więcej informacji `XPath` na `XPathSelect` temat składni i <xref:System.Web.UI.XPathBinder> powiązania danych, zobacz Klasa.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_14#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_14/CS/xmlds14cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_14#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_14/VB/xmlds14vb.aspx#1)]  
  
 Plik XML w przykładzie kodu zawiera następujące dane:  
  
```  
<?xml version="1.0" encoding="iso-8859-1"?>  
 <orders>  
   <order>  
     <customer id="12345" />  
     <customername>  
         <firstn>John</firstn>  
         <lastn>Smith</lastn>  
     </customername>  
     <transaction id="12345" />  
     <shipaddress>  
         <address1>1234 Tenth Avenue</address1>  
         <city>Bellevue</city>  
         <state>Washington</state>  
         <zip>98001</zip>  
     </shipaddress>  
     <summary>  
         <item dept="tools">screwdriver</item>  
         <item dept="tools">hammer</item>  
         <item dept="plumbing">fixture</item>  
     </summary>  
   </order>  
</orders>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Web.UI.IDataSource.GetViewNames" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlDataSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Tworzy nowe wystąpienie <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheDuration">
      <MemberSignature Language="C#" Value="public virtual int CacheDuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CacheDuration" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheDuration" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheDuration As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int CacheDuration { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CacheDuration : int with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.CacheDuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.DataSourceCacheDurationConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia długość czasu (w sekundach), przez który formant źródła danych buforuje pobrane dane.</summary>
        <value>Liczba sekund, przez jaką <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> formant buforuje wyniki operacji pobierania danych. Wartość domyślna to 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.XmlDataSource> Formant automatycznie buforuje dane, gdy mają zastosowanie następujące czynności:  
  
-   Właściwość jest ustawiona na `true`. <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A>  
  
-   <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> Właściwość jest ustawiona na wartość większą niż 0, która wskazuje liczbę sekund przechowywania danych przez pamięć podręczną przed unieważnieniem pamięci podręcznej.  
  
 Wszelkie zmiany <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> właściwości lub zawartości pliku, który zawiera dane XML, powodują unieważnienie pamięci podręcznej.  
  
 Domyślnie <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> właściwość jest ustawiona na 0, co oznacza nieokreśloną pamięć podręczną, a źródło danych będzie buforować dane do momentu zmiany pliku XML, od którego zależy.  
  
 Zachowanie pamięci podręcznej podlega kombinacji czasu trwania i <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> ustawienia. Jeśli <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> jest ustawiona na <xref:System.Web.UI.DataSourceCacheExpiry.Absolute>, <xref:System.Web.UI.WebControls.XmlDataSource> formant buforuje dane przy pierwszej operacji pobierania danych, przechowuje ją w pamięci przez czas określony przez <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>i unieważnia po upływie czasu. Pamięć podręczna jest następnie odświeżana podczas następnej operacji. Jeśli <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> jest ustawiona na <xref:System.Web.UI.DataSourceCacheExpiry.Sliding>, kontrola źródła danych buforuje dane przy pierwszej operacji pobierania danych, ale resetuje przedział czasu, który przechowuje pamięć podręczną dla każdej kolejnej operacji. Pamięć podręczna będzie wygasać tylko wtedy, gdy nie ma żadnych działań, które <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> są równe od czasu ostatniego pobierania danych.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak włączyć buforowanie przy użyciu <xref:System.Web.UI.WebControls.XmlDataSource> kontrolki do wyświetlania danych zawartych w pliku XML. Buforowanie jest włączone, gdy <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> właściwość jest ustawiona na `true` i <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> jest ustawiona na liczbę sekund, przez które dane są buforowane przez kontrolę źródła danych.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/CS/xmlds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/VB/xmlds16vb.aspx#1)]  
  
 Plik XML w przykładzie kodu zawiera następujące dane:  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="CacheExpirationPolicy">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheExpirationPolicy As DataSourceCacheExpiry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::DataSourceCacheExpiry CacheExpirationPolicy { System::Web::UI::DataSourceCacheExpiry get(); void set(System::Web::UI::DataSourceCacheExpiry value); };" />
      <MemberSignature Language="F#" Value="member this.CacheExpirationPolicy : System.Web.UI.DataSourceCacheExpiry with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceCacheExpiry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia zasady wygasania pamięci podręcznej, które są połączone z czasem trwania pamięci podręcznej, aby opisać zachowanie pamięci podręcznej używanej przez kontrolę źródła danych.</summary>
        <value>Jedna z <see cref="T:System.Web.UI.DataSourceCacheExpiry" /> wartości. Domyślne ustawienie zasad wygasania pamięci podręcznej to <see cref="F:System.Web.UI.DataSourceCacheExpiry.Absolute" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zachowanie pamięci podręcznej podlega kombinacji <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> ustawień i. <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> Jeśli jest ustawiona na <xref:System.Web.UI.DataSourceCacheExpiry.Absolute>, <xref:System.Web.UI.WebControls.XmlDataSource> pamięć podręczna danych podczas pierwszej operacji pobierania danych przechowuje ją w pamięci przez czas określony przez <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>i unieważnia po upływie czasu. <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> Pamięć podręczna jest następnie odświeżana podczas następnej operacji. Jeśli jest ustawiona na <xref:System.Web.UI.DataSourceCacheExpiry.Sliding>, kontrola źródła danych buforuje dane przy pierwszej operacji pobierania danych, ale resetuje przedział czasu, który przechowuje pamięć podręczną dla każdej kolejnej operacji. <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> Pamięć podręczna wygaśnie tylko wtedy, gdy nie ma żadnych działań, które <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> są równe od czasu ostatniego pobierania danych.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak włączyć buforowanie przy użyciu <xref:System.Web.UI.WebControls.XmlDataSource> kontrolki do wyświetlania danych zawartych w pliku XML. Buforowanie jest włączone, gdy <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> właściwość jest ustawiona na `true` i <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> jest ustawiona na liczbę sekund, przez które dane są buforowane przez kontrolę źródła danych.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/CS/xmlds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/VB/xmlds16vb.aspx#1)]  
  
 Plik XML w przykładzie kodu zawiera następujące dane:  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="CacheKeyContext">
      <MemberSignature Language="C#" Value="public virtual string CacheKeyContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CacheKeyContext" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyContext" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheKeyContext As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CacheKeyContext { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CacheKeyContext : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.CacheKeyContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość klucza pamięci podręcznej kontroli źródła danych z stanu widoku lub dodaje klucz pamięci podręcznej w celu wyświetlenia stanu.</summary>
        <value>Wartość klucza pamięci podręcznej lub pusty ciąg, jeśli klucz pamięci podręcznej nie jest w stanie widoku.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość pozwala na ręczne utworzenie klucza pamięci podręcznej <xref:System.Web.UI.WebControls.XmlDataSource> dla kontrolki. <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyContext%2A> Jest to wymagane tylko wtedy, gdy przypiszesz obiekt zawierający dane XML lub XSLT do kontrolki zamiast określać plik, który zawiera dane. Po przypisaniu danych do kontrolki dane nie są używane do generowania klucza pamięci podręcznej. Zamiast tego należy ręcznie wygenerować unikatowy klucz pamięci podręcznej, jeśli planujesz zaktualizować obiekt danych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheKeyDependency">
      <MemberSignature Language="C#" Value="public virtual string CacheKeyDependency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CacheKeyDependency" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheKeyDependency As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CacheKeyDependency { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CacheKeyDependency : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia zależność klucza zdefiniowanego przez użytkownika, która jest połączona ze wszystkimi obiektami pamięci podręcznej danych utworzonymi przez formant źródła danych. Wszystkie obiekty pamięci podręcznej są jawnie wygasane po wygaśnięciu klucza.</summary>
        <value>Klucz, który identyfikuje wszystkie obiekty pamięci podręcznej <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> utworzone przez formant.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.XmlDataSource> Kontrolka obsługuje buforowanie danych. Gdy dane są buforowane, <xref:System.Web.UI.WebControls.XmlDataSource> pobiera dane z pamięci podręcznej, a nie z pliku danych źródłowych. Po wygaśnięciu pamięci podręcznej program pobiera dane z pliku bazowego i ponownie buforuje dane.  
  
 Można ustawić <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A> właściwość, aby utworzyć zależność między wszystkimi wpisami pamięci podręcznej utworzonymi <xref:System.Web.UI.WebControls.XmlDataSource> przez formant i klucz. Można programowo unieważnić wszystkie wpisy pamięci podręcznej w dowolnym momencie, zmieniając klucz.  
  
 Ze względu na właściwości używane do tworzenia <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A>, istnieje możliwość, że wiele <xref:System.Web.UI.WebControls.XmlDataSource> kontrolek może korzystać z tej samej pamięci podręcznej w scenariuszach, w których ładują te same dane z tego samego pliku XML <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> i plików transformacji, i mają takie same i <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>Ustaw.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public virtual string Data { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Data" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.Data" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Data As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Data { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Data : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.ComponentModel.MultilineStringConverter,System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.ComponentModel.MultilineStringConverter,System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia blok danych XML, które są powiązane z formantem źródła danych.</summary>
        <value>Ciąg osadzonych danych XML, z którymi <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> jest powiązane sterowanie. Wartość domyślna to <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W scenariuszach <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> deklaratywnych właściwość jest określona jako wielowierszowa Właściwość <xref:System.Web.UI.WebControls.XmlDataSource> wewnętrzna obiektu. Właściwość wewnętrzna jest zgodna z danymi XML, ponieważ umożliwia formatowanie danych XML w dowolny sposób i ignorowanie problemów z uzupełnieniem znaków, takich jak uzupełnianie znaków cudzysłowu.  
  
 <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> Jeśli właściwości i są ustawione, <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> właściwość ma pierwszeństwo, a dane w pliku XML są używane zamiast danych XML określonych we właściwości. <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>  
  
 Jeśli zmienisz wartość <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> właściwości <xref:System.Web.UI.IDataSource.DataSourceChanged> , zdarzenie zostanie zgłoszone. Jeśli buforowanie jest włączone i zmienisz wartość <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>, pamięć podręczna jest unieważniona.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak używać <xref:System.Web.UI.WebControls.XmlDataSource> kontrolki do wyświetlania wbudowanych danych XML zawartych <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> przez właściwość z <xref:System.Web.UI.WebControls.TreeView> kontrolką.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_10#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_10/CS/xmlds10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_10#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_10/VB/xmlds10vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Trwa ładowanie dokumentu.</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="DataFile">
      <MemberSignature Language="C#" Value="public virtual string DataFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DataFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DataFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataFile : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.DataFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.XmlDataFileEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.XmlDataFileEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Określa nazwę pliku XML, z którym jest powiązane źródło danych.</summary>
        <value>Bezwzględna ścieżka fizyczna lub względna ścieżka pliku XML, który zawiera dane <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> reprezentowane przez formant. Wartość domyślna to <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> Jeśli właściwości i są ustawione, <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> właściwość ma pierwszeństwo, a dane w pliku XML są używane zamiast danych XML określonych we właściwości. <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>  
  
 Jeśli zmienisz wartość <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> właściwości <xref:System.Web.UI.IDataSource.DataSourceChanged> , zdarzenie zostanie zgłoszone. Jeśli buforowanie jest włączone i zmienisz wartość <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>, pamięć podręczna jest unieważniona.  
  
   
  
## Examples  
 Poniższy przykład kodu ilustruje sposób używania <xref:System.Web.UI.WebControls.XmlDataSource> kontrolki do wyświetlania danych XML zawartych w pliku <xref:System.Web.UI.WebControls.TreeView> z kontrolką.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/CS/xmlds1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/VB/xmlds1vb.aspx#1)]  
  
 Plik XML w przykładzie kodu zawiera następujące dane:  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Trwa ładowanie dokumentu.</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Data" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="EnableCaching">
      <MemberSignature Language="C#" Value="public virtual bool EnableCaching { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCaching" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property EnableCaching As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EnableCaching { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableCaching : bool with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy w <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> kontrolce włączono buforowanie danych.</summary>
        <value><see langword="true" />Jeśli buforowanie danych jest włączone dla kontroli źródła danych; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Formant automatycznie buforuje dane, <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> gdy właściwość jest ustawiona na `true`. <xref:System.Web.UI.WebControls.XmlDataSource> Domyślnie <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> właściwość jest ustawiona na 0, co oznacza nieokreśloną pamięć podręczną, a źródło danych będzie buforować dane do momentu zmiany pliku XML, od którego zależy. Jeśli <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> właściwość zostanie ustawiona na wartość większą niż 0, pamięć podręczna przechowuje dane przez wiele sekund przed pobraniem nowego zestawu.  
  
 Jeśli właściwość jest ustawiona na `true` , a <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> właściwość jest ustawiona, wpisy pamięci podręcznej nie są automatycznie unieważnione po zmianie parametrów na liście argumentów transformacji. <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> W takim przypadku należy napisać kod, aby unieważnić pamięć podręczną przez ustawienie <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak włączyć buforowanie przy użyciu <xref:System.Web.UI.WebControls.XmlDataSource> kontrolki do wyświetlania danych zawartych w pliku XML. Buforowanie jest włączone, gdy <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> właściwość jest ustawiona na `true` i <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> jest ustawiona na liczbę sekund, przez które dane są buforowane przez kontrolę źródła danych.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/CS/xmlds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/VB/xmlds16vb.aspx#1)]  
  
 Plik XML w przykładzie kodu zawiera następujące dane:  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" />
      </Docs>
    </Member>
    <Member MemberName="GetHierarchicalView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.HierarchicalDataSourceView GetHierarchicalView (string viewPath);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.HierarchicalDataSourceView GetHierarchicalView(string viewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetHierarchicalView (viewPath As String) As HierarchicalDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::HierarchicalDataSourceView ^ GetHierarchicalView(System::String ^ viewPath);" />
      <MemberSignature Language="F#" Value="override this.GetHierarchicalView : string -&gt; System.Web.UI.HierarchicalDataSourceView" Usage="xmlDataSource.GetHierarchicalView viewPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HierarchicalDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewPath">Wyrażenie XPath, które identyfikuje węzeł, z którego jest zbudowany bieżący widok hierarchiczny.</param>
        <summary>Pobiera obiekt widoku źródła danych dla <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> kontrolki. <paramref name="viewPath" /> Parametr może być wyrażeniem XPath.</summary>
        <returns>Zwraca obiekt, który reprezentuje pojedynczy widok danych, zaczynając od węzła danych identyfikowanego przez <paramref name="viewPath" />. <see cref="T:System.Web.UI.WebControls.XmlHierarchicalDataSourceView" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz wywołać metodę, <xref:System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView%2A> aby <xref:System.Web.UI.WebControls.XmlHierarchicalDataSourceView> pobrać obiekt skojarzony z <xref:System.Web.UI.WebControls.XmlDataSource> formantem. Jeśli określisz `viewPath` wartość <xref:System.Web.UI.WebControls.XmlDataSource> , kontrolka zwróci obiekt widoku źródła danych, który reprezentuje widok w węźle identyfikowanym przez `viewPath`, wraz ze wszystkimi węzłami podrzędnymi. Jeśli ustawisz `viewPath` na <xref:System.String.Empty?displayProperty=nameWithType> ,formant<xref:System.Web.UI.WebControls.XmlDataSource> sprawdza Właściwość,abyokreślićwęzełgłówny,zktóregomazostaćskompilowanywidokźródładanych.<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> Jeśli właściwość jest ustawiona <xref:System.Web.UI.WebControls.XmlDataSource> , formant używa jej do zwrócenia widoku źródła danych w taki sam sposób jak w `viewPath` przypadku użycia wyrażenia. <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> Jeśli właściwość nie jest ustawiona <xref:System.Web.UI.WebControls.XmlDataSource> , kontrolka zwróci widok wszystkich węzłów danych w danych XML. <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXmlDocument">
      <MemberSignature Language="C#" Value="public System.Xml.XmlDocument GetXmlDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlDocument GetXmlDocument() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument" />
      <MemberSignature Language="VB.NET" Value="Public Function GetXmlDocument () As XmlDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlDocument ^ GetXmlDocument();" />
      <MemberSignature Language="F#" Value="member this.GetXmlDocument : unit -&gt; System.Xml.XmlDocument" Usage="xmlDataSource.GetXmlDocument " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDocument</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ładuje dane XML do pamięci, bezpośrednio z bazowego magazynu danych lub z pamięci podręcznej, i zwraca je w postaci <see cref="T:System.Xml.XmlDataDocument" /> obiektu.</summary>
        <returns>Obiekt, który reprezentuje kod XML określony <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> we właściwości lub w pliku identyfikowanym przez <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> właściwość, z wszelkimi przekształceniami <see cref="P:System.Web.UI.WebControls.XmlDataSource.XPath" /> i zapytaniami. <see cref="T:System.Xml.XmlDataDocument" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> Użyj metody bezpośredniego dostępu do reprezentacji danych XML w pamięci.  
  
 Można manipulować zwracanym <xref:System.Xml.XmlDataDocument> obiektem, a następnie <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> wywołać, aby zachować zmiany w pliku <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> XML określonym przez właściwość. Przed pomyślnym zapisaniem <xref:System.Xml.XmlDataDocument> obiektu należy spełnić kilka wymagań. Aby uzyskać więcej informacji, zobacz <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> metodę.  
  
   
  
## Examples  
 Ten rozdział zawiera dwa przykłady kodu. Pierwszy przykład ilustruje sposób używania <xref:System.Web.UI.WebControls.XmlDataSource> kontrolki <xref:System.Web.UI.WebControls.TreeView> z kontrolką do wyświetlania i edytowania danych XML zawartych w pliku XML. Drugi przykład ilustruje sposób użycia <xref:System.Web.UI.WebControls.XmlDataSource> formantu z <xref:System.Web.UI.WebControls.Repeater> kontrolką z szablonem do wyświetlania i edytowania danych XML zawartych w pliku XML.  
  
 Poniższy przykład kodu demonstruje, jak używać <xref:System.Web.UI.WebControls.XmlDataSource> kontrolki <xref:System.Web.UI.WebControls.TreeView> z kontrolką do wyświetlania i edytowania danych XML zawartych w pliku XML. Dane są manipulowane w pamięci przy użyciu <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> metody za każdym razem, gdy <xref:System.Web.UI.WebControls.TreeView> wybierasz węzeł, i są zapisywane w pliku XML. Na koniec <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> jest wywoływana na kontrolce,abyodświeżyćdane,któresąwyświetlane.<xref:System.Web.UI.WebControls.TreeView>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/CS/xmlds17cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/VB/xmlds17vb.aspx#1)]  
  
 Poniższy przykład kodu ilustruje sposób używania <xref:System.Web.UI.WebControls.XmlDataSource> kontrolki z <xref:System.Web.UI.WebControls.Repeater> formantem z szablonem do wyświetlania i edytowania danych XML zawartych w pliku XML. Podobnie jak w poprzednim przykładzie, dane są manipulowane w pamięci za pomocą <xref:System.Xml.XmlDataDocument> pobrane <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> przez metodę. Na koniec <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> jest wywoływana na kontrolce,abyodświeżyćdane,któresąwyświetlane.<xref:System.Web.UI.WebControls.TreeView>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/CS/xmlds18cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/VB/xmlds18vb.aspx#1)]  
  
 Plik XML w przykładach kodu zawiera następujące dane:  
  
```  
<?xml version="1.0" encoding="utf-8"?>  
 <bookstore xmlns:bk="urn:samples">  
   <book genre="novel" publicationdate="1999" bk:ISBN="0000000000">  
     <title>Secrets of Silicon Valley</title>  
     <author>  
       <first-name>Sheryl</first-name>  
       <last-name>Hunter</last-name>  
     </author>  
     <price>24.95</price>"   
     </book>  
   <book genre="novel" publicationdate="1985" bk:ISBN="1111111111">  
     <title>Straight Talk About Computers</title>  
     <author>  
       <first-name>Dean</first-name>  
       <last-name>Straight</last-name>  
     </author>  
     <price>29.95</price>  
   </book>  
</bookstore>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Dla <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> właściwości określono adres URL, jednak <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> formant nie ma odpowiednich uprawnień do zasobu sieci Web.</exception>
        <exception cref="T:System.NotSupportedException">Dla <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> właściwości określono adres URL, ale nie jest to adres URL oparty na protokole HTTP.  
  
—lub— 
Ścieżka względna czasu projektowania nie została prawidłowo zamapowana przez projektanta przed użyciem <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> formantu.  
  
—lub— 
Włączona jest zarówno funkcja buforowania, jak i Personifikacja klienta. <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> Formant nie obsługuje buforowania, gdy Personifikacja klienta jest włączona.</exception>
        <exception cref="T:System.Web.HttpException">Odmowa dostępu do ścieżki określonej dla <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> właściwości.</exception>
        <altmember cref="M:System.Web.UI.WebControls.XmlDataSource.Save" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />
      </Docs>
    </Member>
    <Member MemberName="OnTransforming">
      <MemberSignature Language="C#" Value="protected virtual void OnTransforming (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTransforming(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTransforming (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTransforming(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTransforming : EventArgs -&gt; unit&#xA;override this.OnTransforming : EventArgs -&gt; unit" Usage="xmlDataSource.OnTransforming e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.EventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Podnosi zdarzenie <see cref="E:System.Web.UI.WebControls.XmlDataSource.Transforming" /> , <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> zanim formant przeprowadzi transformację XSLT na danych XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji o sposobie obsługi zdarzeń, zobacz [Obsługa i](~/docs/standard/events/index.md)wywoływanie zdarzeń.  
  
 <xref:System.Web.UI.WebControls.XmlDataSource.OnTransforming%2A> Metoda umożliwia również klasom pochodnym obsłużenia zdarzenia bez dołączania delegata. Jest to preferowana technika obsługi zdarzenia w klasie pochodnej.  
  
   
  
## Examples  
 Poniższy przykład kodu ilustruje sposób używania <xref:System.Web.UI.WebControls.XmlDataSource> kontrolki <xref:System.Web.UI.WebControls.TreeView> z kontrolką do wyświetlania przekształconych danych XML. Przekształcanie kodu XML odbywa się przy użyciu arkusza stylów wskazywanego <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> przez właściwość. Ponadto arkusz stylów używa argumentów transformacji, które są przekazane do kontrolki źródła danych w <xref:System.Xml.Xsl.XsltArgumentList> obiekcie w czasie wykonywania. W przykładzie kodu pokazano, jak przekazać <xref:System.Xml.Xsl.XsltArgumentList> obiekt do kontroli źródła danych przez <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> obsługę zdarzenia z niestandardowym programem obsługi zdarzeń, który jest identyfikowany przez nazwę metody ustawioną dla <xref:System.Web.UI.WebControls.XmlDataSource.OnTransforming%2A> metody.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/CS/xmlds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/VB/xmlds9vb.aspx#1)]  
  
 Plik XML w przykładzie kodu zawiera następujące dane:  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 Przekształcanie kodu XML odbywa się przy użyciu poniższego arkusza stylów.  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:param name="purchdate"/>  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
       Price: <xsl:value-of select="price"/>  
           15% discount if purchased by: <xsl:value-of select="$purchdate"/>        
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Podczas zastępowania <see cref="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" /> klasy pochodnej należy <see cref="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" /> wywołać metodę klasy bazowej, aby zarejestrowani delegowani odbierał zdarzenie.</para></block>
        <altmember cref="E:System.Web.UI.WebControls.XmlDataSource.Transforming" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.Save" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save();" />
      <MemberSignature Language="F#" Value="member this.Save : unit -&gt; unit" Usage="xmlDataSource.Save " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje dane XML znajdujące się obecnie w pamięci przez <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> formant do dysku, <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> Jeśli właściwość jest ustawiona.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chociaż formant jest zazwyczaj używany w scenariuszach powiązania danych tylko do odczytu, można <xref:System.Web.UI.WebControls.XmlDataSource> użyć kontrolki do edytowania danych XML w źródłowym pliku danych XML. <xref:System.Web.UI.WebControls.XmlDataSource> W tych scenariuszach dane XML są ładowane z pliku XML przez <xref:System.Web.UI.WebControls.XmlDataSource> formant. Należy zmodyfikować <xref:System.Xml.XmlDataDocument> w pamięci <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> za pomocą metody, a następnie zapisać w pliku <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> danych XML przez wywołanie metody. Ten edytowalny scenariusz XML jest możliwy w przypadku spełnienia następujących warunków:  
  
-   Dane XML są ładowane z pliku XML wskazywanego przez <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> właściwość, a nie z wbudowanych danych XML określonych <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> we właściwości.  
  
-   We <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> właściwościach lub <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> nie określono transformacji XSLT.  
  
 <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> Metoda nie obsługuje współbieżnych operacji zapisu przez różne żądania. Jeśli więcej niż jeden użytkownik edytuje plik XML za pomocą <xref:System.Web.UI.WebControls.XmlDataSource> kontrolki, nie ma gwarancji, że wszyscy użytkownicy pracują z tymi samymi danymi. Istnieje również możliwość <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> , że operacja nie powiedzie się z powodu tych samych problemów współbieżności.  
  
   
  
## Examples  
 Ten rozdział zawiera dwa przykłady kodu. Pierwszy przykład kodu demonstruje, jak używać <xref:System.Web.UI.WebControls.XmlDataSource> kontrolki <xref:System.Web.UI.WebControls.TreeView> z kontrolką do wyświetlania i edytowania danych XML zawartych w pliku XML. Drugi przykład kodu demonstruje, jak używać <xref:System.Web.UI.WebControls.XmlDataSource> formantu z <xref:System.Web.UI.WebControls.Repeater> kontrolką z szablonem do wyświetlania i edytowania danych XML zawartych w pliku XML.  
  
 Poniższy przykład kodu demonstruje, jak używać <xref:System.Web.UI.WebControls.XmlDataSource> kontrolki <xref:System.Web.UI.WebControls.TreeView> z kontrolką do wyświetlania i edytowania danych XML zawartych w pliku XML. Dane są manipulowane w pamięci przy użyciu <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> metody za każdym razem, gdy <xref:System.Web.UI.WebControls.TreeView> wybierasz węzeł, i są zapisywane w pliku XML. Na koniec <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> jest wywoływana na kontrolce,abyodświeżyćdane,któresąwyświetlane.<xref:System.Web.UI.WebControls.TreeView>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/CS/xmlds17cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/VB/xmlds17vb.aspx#1)]  
  
 Poniższy przykład kodu ilustruje sposób używania <xref:System.Web.UI.WebControls.XmlDataSource> kontrolki z <xref:System.Web.UI.WebControls.Repeater> formantem z szablonem do wyświetlania i edytowania danych XML zawartych w pliku XML. Podobnie jak w poprzednim przykładzie, dane są manipulowane w pamięci przy użyciu <xref:System.Xml.XmlDataDocument> obiektu pobranego <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> przez metodę. Na koniec <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> jest wywoływana na kontrolce,abyodświeżyćdane,któresąwyświetlane.<xref:System.Web.UI.WebControls.TreeView>  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/CS/xmlds18cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/VB/xmlds18vb.aspx#1)]  
  
 Plik XML w przykładach kodu zawiera następujące dane:  
  
```  
<?xml version="1.0" encoding="utf-8"?>  
 <bookstore xmlns:bk="urn:samples">  
   <book genre="novel" publicationdate="1999" bk:ISBN="0000000000">  
     <title>Secrets of Silicon Valley</title>  
     <author>  
       <first-name>Sheryl</first-name>  
       <last-name>Hunter</last-name>  
     </author>  
     <price>24.95</price>"   
     </book>  
   <book genre="novel" publicationdate="1985" bk:ISBN="1111111111">  
     <title>Straight Talk About Computers</title>  
     <author>  
       <first-name>Dean</first-name>  
       <last-name>Straight</last-name>  
     </author>  
     <price>29.95</price>  
   </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Dane XML zostały załadowane przy <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> użyciu właściwości zamiast <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> właściwości.  
  
—lub— 
Dla <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> właściwości określono adres URL, jednak <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> formant nie ma odpowiednich uprawnień do zasobu sieci Web.</exception>
        <exception cref="T:System.NotSupportedException">Dla <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> właściwości określono adres URL, ale nie jest to adres URL oparty na protokole HTTP.  
  
—lub— 
Ścieżka względna czasu projektowania nie została prawidłowo zamapowana przez projektanta przed użyciem <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> formantu.</exception>
        <exception cref="T:System.Web.HttpException">Odmowa dostępu do ścieżki określonej dla <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> właściwości.</exception>
        <altmember cref="M:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#ContainsListCollection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ContainsListCollection As Boolean Implements IListSource.ContainsListCollection" />
      <MemberSignature Language="C++ CLI" Value="property bool System::ComponentModel::IListSource::ContainsListCollection { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ComponentModel.IListSource.ContainsListCollection</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Aby uzyskać opis tego elementu członkowskiego, <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />Zobacz.</summary>
        <value><see langword="true" />Jeśli kolekcja jest kolekcją <see cref="T:System.Collections.IList" /> obiektów; <see langword="false" />w przeciwnym razie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Może być używany tylko wtedy, <xref:System.Web.UI.WebControls.XmlDataSource> gdy wystąpienie jest rzutowane <xref:System.ComponentModel.IListSource> do interfejsu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.IListSource" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.GetList">
      <MemberSignature Language="C#" Value="System.Collections.IList IListSource.GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IList System.ComponentModel.IListSource.GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#GetList" />
      <MemberSignature Language="VB.NET" Value="Function GetList () As IList Implements IListSource.GetList" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IList ^ System.ComponentModel.IListSource.GetList() = System::ComponentModel::IListSource::GetList;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.IListSource.GetList</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Aby uzyskać opis tego elementu członkowskiego, <see cref="M:System.ComponentModel.IListSource.GetList" />Zobacz.</summary>
        <returns>Obiekt implementujący <see cref="T:System.Collections.IList" /> , który można powiązać ze źródłem danych.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Może być używany tylko wtedy, <xref:System.Web.UI.WebControls.XmlDataSource> gdy wystąpienie jest rzutowane <xref:System.ComponentModel.IListSource> do interfejsu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.IListSource" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataSource.DataSourceChanged">
      <MemberSignature Language="C#" Value="event EventHandler System.Web.UI.IDataSource.DataSourceChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler System.Web.UI.IDataSource.DataSourceChanged" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#DataSourceChanged" />
      <MemberSignature Language="VB.NET" Value="Custom Event DataSourceChanged As EventHandler Implements System.Web.UI.IDataSource" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Web.UI.IDataSource.DataSourceChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Aby uzyskać opis tego elementu członkowskiego, <see cref="E:System.Web.UI.IDataSource.DataSourceChanged" />Zobacz.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Może być używany tylko wtedy, <xref:System.Web.UI.WebControls.XmlDataSource> gdy wystąpienie jest rzutowane <xref:System.Web.UI.IDataSource> do interfejsu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IDataSource" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataSource.GetView">
      <MemberSignature Language="C#" Value="System.Web.UI.DataSourceView IDataSource.GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Web.UI.DataSourceView System.Web.UI.IDataSource.GetView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function GetView (viewName As String) As DataSourceView Implements IDataSource.GetView" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Web::UI::DataSourceView ^ System.Web.UI.IDataSource.GetView(System::String ^ viewName) = System::Web::UI::IDataSource::GetView;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetView(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewName">Nazwa widoku do pobrania. Jeśli <see cref="F:System.String.Empty" /> jest określony, zostanie pobrany domyślny widok <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> dla kontrolki.</param>
        <summary>Pobiera nazwany widok źródła danych skojarzony z formantem źródła danych.</summary>
        <returns>Zwraca nazwany <see cref="T:System.Web.UI.WebControls.XmlDataSourceView" /> obiekt skojarzony <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> z kontrolką.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.IDataSource.GetViewNames" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataSource.GetViewNames">
      <MemberSignature Language="C#" Value="System.Collections.ICollection IDataSource.GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.ICollection System.Web.UI.IDataSource.GetViewNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetViewNames" />
      <MemberSignature Language="VB.NET" Value="Function GetViewNames () As ICollection Implements IDataSource.GetViewNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::ICollection ^ System.Web.UI.IDataSource.GetViewNames() = System::Web::UI::IDataSource::GetViewNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetViewNames</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Aby uzyskać opis tego elementu członkowskiego, <see cref="M:System.Web.UI.IDataSource.GetViewNames" />Zobacz.</summary>
        <returns>Obiekt implementujący <see cref="T:System.Collections.ICollection" /> nazwy zawierające listę obiektów widoku skojarzonych <see cref="T:System.Web.UI.IDataSource" /> z obiektem.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Może być używany tylko wtedy, <xref:System.Web.UI.WebControls.XmlDataSource> gdy wystąpienie jest rzutowane <xref:System.Web.UI.IDataSource> do interfejsu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IDataSource" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public virtual string Transform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Transform" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Transform As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Transform { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Transform : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.Transform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.ComponentModel.MultilineStringConverter,System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.ComponentModel.MultilineStringConverter,System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia blok danych Extensible Stylesheet Language (XSL) definiujący transformację XSLT, która ma być wykonywana na danych XML zarządzanych przez <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> formant.</summary>
        <value>Ciąg wbudowanego kodu XSL, który definiuje transformację XML do wykonania na danych zawartych we <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> właściwościach lub. <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> Wartość domyślna to <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W scenariuszach <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> deklaratywnych właściwość jest określona jako wielowierszowa Właściwość <xref:System.Web.UI.WebControls.XmlDataSource> wewnętrzna obiektu. Właściwość wewnętrzna jest zgodna z danymi arkusza stylów XSL, ponieważ umożliwia formatowanie arkusza stylów w dowolny sposób i ignorowanie problemów z uzupełnieniem znaków, takich jak uzupełnianie znaków cudzysłowu.  
  
 <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> Jeśli właściwości i są ustawione, <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> właściwość ma pierwszeństwo, a dane w pliku arkusza stylów XSL (. xsl) są używane zamiast elementów arkusza stylów określonych we właściwości. <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> Jeśli wyrażenie XPath jest ustawione przy użyciu <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> właściwości, zostanie zastosowane po przeprowadzeniu przekształcenia danych XML.  
  
 Jeśli zmienisz wartość <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> właściwości <xref:System.Web.UI.IDataSource.DataSourceChanged> , zdarzenie zostanie zgłoszone. Jeśli buforowanie jest włączone i zmienisz wartość <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>, pamięć podręczna jest unieważniona.  
  
> [!NOTE]
>  Klasa używa przestarzałej klasy do wykonywania transformacji XSL. <xref:System.Xml.Xsl.XslTransform> <xref:System.Web.UI.WebControls.XmlDataSource> Jeśli chcesz użyć funkcji arkusza stylów, które zostały wprowadzone po <xref:System.Xml.Xsl.XslTransform> zaniechaniu klasy, Zastosuj transformacje ręcznie przy <xref:System.Xml.Xsl.XslCompiledTransform> użyciu klasy.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak używać <xref:System.Web.UI.WebControls.XmlDataSource> formantu z <xref:System.Web.UI.WebControls.Repeater> kontrolką z szablonem do wyświetlania przekształconych danych XML. Arkusz stylów, który wykonuje transformację, jest zdefiniowany w tekście <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> przez właściwość kontrolki źródła danych.  
  
  
  
 Plik XML w przykładzie kodu zawiera następujące dane:  
  
```  
<?xml version="1.0" encoding="iso-8859-1"?>  
 <orders>  
   <order>  
     <customer id="12345" />  
     <customername>  
         <firstn>Todd</firstn>  
         <lastn>Rowe</lastn>  
     </customername>  
     <transaction id="12345" />  
     <shipaddress>  
         <address1>1234 Tenth Avenue</address1>  
         <city>Bellevue</city>  
         <state>Washington</state>  
         <zip>98001</zip>  
     </shipaddress>  
     <summary>  
         <item dept="tools">screwdriver</item>  
         <item dept="tools">hammer</item>  
         <item dept="plumbing">fixture</item>  
     </summary>  
   </order>  
</orders>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Trwa ładowanie dokumentu.</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="TransformArgumentList">
      <MemberSignature Language="C#" Value="public virtual System.Xml.Xsl.XsltArgumentList TransformArgumentList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Xsl.XsltArgumentList TransformArgumentList" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property TransformArgumentList As XsltArgumentList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::Xsl::XsltArgumentList ^ TransformArgumentList { System::Xml::Xsl::XsltArgumentList ^ get(); void set(System::Xml::Xsl::XsltArgumentList ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TransformArgumentList : System.Xml.Xsl.XsltArgumentList with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.TransformArgumentList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Xsl.XsltArgumentList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zawiera listę argumentów XSLT, które są używane z arkuszem stylów zdefiniowanym przez <see cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" /> lub <see cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" /> właściwości, aby wykonać transformację danych XML.</summary>
        <value>Obiekt, który zawiera parametry i obiekty XSLT, które mają być stosowane do danych XML podczas ładowania <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> przez formant. <see cref="T:System.Xml.Xsl.XsltArgumentList" /> Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ustaw właściwość <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> , <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> gdy zdarzenie jest wywoływane, aby upewnić się, że parametry XSLT są dostępne w momencie zastosowania transformacji XSLT do danych XML.  
  
 Jeśli właściwość jest ustawiona na `true` , a <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> właściwość jest ustawiona, wpisy pamięci podręcznej nie są automatycznie unieważnione po zmianie parametrów na liście argumentów transformacji. <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> W takim przypadku należy napisać kod, aby unieważnić pamięć podręczną przez ustawienie <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład kodu ilustruje sposób używania <xref:System.Web.UI.WebControls.XmlDataSource> <xref:System.Web.UI.WebControls.TreeView> kontrolki z kontrolką do wyświetlania przekształconych danych XML. Przekształcanie kodu XML odbywa się przy użyciu arkusza stylów wskazywanego <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> przez właściwość. Ponadto arkusz stylów używa argumentów transformacji, które są przekazane do kontrolki źródła danych w <xref:System.Xml.Xsl.XsltArgumentList> obiekcie w czasie wykonywania. W przykładzie kodu pokazano, <xref:System.Xml.Xsl.XsltArgumentList> jak przekazać do kontrolki źródła danych, <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> obsługując zdarzenie przy użyciu niestandardowego programu obsługi zdarzeń.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/CS/xmlds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/VB/xmlds9vb.aspx#1)]  
  
 Plik XML w przykładzie kodu zawiera następujące dane:  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 Przekształcanie danych XML jest wykonywane z następującym arkuszem stylów.  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:param name="purchdate"/>  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
       Price: <xsl:value-of select="price"/>  
           15% discount if purchased by: <xsl:value-of select="$purchdate"/>        
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.XmlDataSource.Transforming" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
      </Docs>
    </Member>
    <Member MemberName="TransformFile">
      <MemberSignature Language="C#" Value="public virtual string TransformFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TransformFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property TransformFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ TransformFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TransformFile : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.TransformFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.XslTransformFileEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.XslTransformFileEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Określa nazwę pliku Extensible Stylesheet Language (XSL), który definiuje transformację XSLT do wykonania na danych XML zarządzanych przez <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> formant.</summary>
        <value>Bezwzględna ścieżka fizyczna lub względna ścieżka pliku arkusza stylów XSL, który definiuje transformację XML do wykonania na danych zawartych we <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> właściwościach lub. <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> Wartość domyślna to <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> Jeśli właściwości i są ustawione, <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> właściwość ma pierwszeństwo, a dane w pliku arkusza stylów XSL (. xsl) są używane zamiast elementów arkusza stylów określonych we właściwości. <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> Jeśli wyrażenie XPath jest ustawione przy użyciu <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> właściwości, zostanie zastosowane po przeprowadzeniu przekształcenia danych XML.  
  
 Jeśli zmienisz wartość <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> właściwości <xref:System.Web.UI.IDataSource.DataSourceChanged> , zdarzenie zostanie zgłoszone. Jeśli buforowanie jest włączone i zmienisz wartość <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>, pamięć podręczna jest unieważniona.  
  
> [!NOTE]
>  Klasa używa przestarzałej klasy do wykonywania transformacji XSL. <xref:System.Xml.Xsl.XslTransform> <xref:System.Web.UI.WebControls.XmlDataSource> Jeśli chcesz użyć funkcji arkusza stylów, które zostały wprowadzone po <xref:System.Xml.Xsl.XslTransform> zaniechaniu klasy, Zastosuj transformacje ręcznie przy <xref:System.Xml.Xsl.XslCompiledTransform> użyciu klasy.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje <xref:System.Web.UI.WebControls.XmlDataSource> <xref:System.Web.UI.WebControls.TreeView> , jak używać kontrolki i kontrolki do wyświetlania przekształconych danych XML w formularzu sieci Web. Przekształcanie odbywa się przy użyciu arkusza stylów wskazywanego przez <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> właściwość. Opcjonalnie możesz podać argumenty transformacji arkusza stylów przy użyciu <xref:System.Xml.Xsl.XsltArgumentList>. Aby uzyskać więcej informacji, zobacz <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> właściwość.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_5#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_5/CS/xmlds5cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_5#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_5/VB/xmlds5vb.aspx#1)]  
  
 Plik XML w przykładzie kodu zawiera następujące dane:  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 Arkusz stylów XSL, który wykonuje transformację XML, ma następującą strukturę:  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
     </xsl:attribute>  
     <xsl:attribute name="price">  
       <xsl:value-of select="price"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Trwa ładowanie dokumentu.</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="Transforming">
      <MemberSignature Language="C#" Value="public event EventHandler Transforming;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Transforming" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.XmlDataSource.Transforming" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Transforming As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Transforming;" />
      <MemberSignature Language="F#" Value="member this.Transforming : EventHandler " Usage="member this.Transforming : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, zanim arkusz stylów zdefiniowany przez <see cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" /> właściwość lub określony <see cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" /> przez właściwość zostanie zastosowany do danych XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obsłuż <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> zdarzenie, aby <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> ustawić właściwość z <xref:System.Xml.Xsl.XsltArgumentList> obiektem, <xref:System.Web.UI.WebControls.XmlDataSource> zanim kontrolka przeprowadzi transformację XML.  
  
 Aby uzyskać więcej informacji o sposobie obsługi zdarzeń, zobacz [Obsługa i](~/docs/standard/events/index.md)wywoływanie zdarzeń.  
  
   
  
## Examples  
 Poniższy przykład kodu ilustruje sposób używania <xref:System.Web.UI.WebControls.XmlDataSource> kontrolki <xref:System.Web.UI.WebControls.TreeView> z kontrolką do wyświetlania przekształconych danych XML. Przekształcanie kodu XML odbywa się przy użyciu arkusza stylów wskazywanego <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> przez właściwość. Ponadto arkusz stylów używa argumentów transformacji, które są przekazane do kontrolki źródła danych w <xref:System.Xml.Xsl.XsltArgumentList> czasie wykonywania. W przykładzie kodu pokazano, <xref:System.Xml.Xsl.XsltArgumentList> jak przekazać obiekt do kontrolki źródła danych przez <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> obsługę zdarzenia przy użyciu niestandardowego programu obsługi zdarzeń.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/CS/xmlds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/VB/xmlds9vb.aspx#1)]  
  
 Plik XML w przykładzie kodu zawiera następujące dane:  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 Przekształcanie danych XML jest wykonywane z następującym arkuszem stylów:  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:param name="purchdate"/>  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
       Price: <xsl:value-of select="price"/>  
           15% discount if purchased by: <xsl:value-of select="$purchdate"/>        
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="XPath">
      <MemberSignature Language="C#" Value="public virtual string XPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.XPath" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property XPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ XPath { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XPath : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.XPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Określa wyrażenie XPath, które ma zostać zastosowane do danych XML zawartych <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> w właściwości lub przez plik XML wskazywany <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> przez właściwość.</summary>
        <value>Ciąg reprezentujący wyrażenie XPath, którego można użyć do filtrowania danych zawartych przez <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> właściwość lub pliku XML wskazywanego <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> przez właściwość. Wartość domyślna to <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat wyrażeń powiązania danych XPath, zobacz [Powiązywanie kontrolki tabelarycznej z kontrolką XmlDataSource](https://msdn.microsoft.com/library/d6bf202f-6454-45fd-9424-e17f6c7eafe8).  
  
   
  
## Examples  
 Poniższy przykład kodu ilustruje sposób używania <xref:System.Web.UI.WebControls.XmlDataSource> kontrolki z <xref:System.Web.UI.WebControls.Repeater> formantem z szablonem do wyświetlania danych XML, które zostały przefiltrowane przy użyciu wyrażenia XPath. W tym przykładzie składnia XPath służy do filtrowania danych XML po <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> ustawieniu właściwości kontroli źródła danych, a także powiązania elementów <xref:System.Web.UI.WebControls.Repeater> szablonu formantu z danymi XML.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_8/CS/xmlds8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_8/VB/xmlds8vb.aspx#1)]  
  
 Plik XML w przykładzie kodu zawiera następujące dane:  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Trwa ładowanie dokumentu.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
