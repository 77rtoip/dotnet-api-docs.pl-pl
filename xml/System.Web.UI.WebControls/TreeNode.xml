<Type Name="TreeNode" FullName="System.Web.UI.WebControls.TreeNode">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6cbde0deb371d4a9355f146f20d3da857ccb2113" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30691850" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TreeNode : ICloneable, System.Web.UI.IStateManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TreeNode extends System.Object implements class System.ICloneable, class System.Web.UI.IStateManager" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.TreeNode" />
  <TypeSignature Language="VB.NET" Value="Public Class TreeNode&#xA;Implements ICloneable, IStateManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class TreeNode : ICloneable, System::Web::UI::IStateManager" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IStateManager</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true, "ChildNodes")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje węzeł w <see cref="T:System.Web.UI.WebControls.TreeView" /> formantu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.TreeView> Kontroli składa się z węzłów. Każdy wpis w drzewie węzeł i jest reprezentowana przez <xref:System.Web.UI.WebControls.TreeNode> obiektu. Węzeł, który zawiera inne węzły jest nazywany *węzła nadrzędnego*. Węzeł, który jest zawarty w innym węźle jest nazywany *podrzędnym*. Węzeł, który nie ma podrzędnych węzłów jest nazywany *węzeł liścia*. Węzeł, który nie jest zawarty w innym węźle, ale jest elementem nadrzędnym dla wszystkich innych węzłów jest *węzła głównego*. Węzeł może być nadrzędną podrzędny, ale głównego i nadrzędnym, a węzłów liści wzajemnie się wykluczają. Kilka właściwości visual i behawioralnych węzłów zależą od tego, czy węzeł jest *głównego*, *nadrzędnej*, lub *liścia* węzła.  
  
 Mimo że typowe drzewa ma tylko jeden węzeł główny, <xref:System.Web.UI.WebControls.TreeView> formantu można dodawać wiele węzłów głównych do struktury drzewa. Jest to przydatne, jeśli chcesz wyświetlić listy elementów bez wyświetlania jednego głównego węzła, tak jak listę kategorii produktów.  
  
 Węzeł głównie przechowuje dane w dwóch właściwości <xref:System.Web.UI.WebControls.TreeNode.Text%2A> właściwości i <xref:System.Web.UI.WebControls.TreeNode.Value%2A> właściwości. Wartość <xref:System.Web.UI.WebControls.TreeNode.Text%2A> właściwość jest wyświetlana w <xref:System.Web.UI.WebControls.TreeView> kontroli i <xref:System.Web.UI.WebControls.TreeNode.Value%2A> właściwość jest używana do przechowywania wszelkich dodatkowych danych dotyczących tego węzła, takich jak dane używane na potrzeby obsługi zdarzenia odświeżania strony. Węzeł przechowuje także ścieżki z węzła do węzła głównego w <xref:System.Web.UI.WebControls.TreeNode.ValuePath%2A> właściwości. <xref:System.Web.UI.WebControls.TreeNode.ValuePath%2A> Właściwość wskazuje pozycję węzła węzła głównego.  
  
> [!NOTE]
>  Węzły na tym samym poziomie musi mieć unikatową wartość <xref:System.Web.UI.WebControls.TreeNode.Value%2A> właściwości; <xref:System.Web.UI.WebControls.TreeView> formantu nie można rozróżnić różnych węzłów na tym samym poziomie, które mają taką samą wartość. W tym scenariuszu, gdy użytkownik kliknie węzeł, który ma zduplikowaną wartość węzła który znajduje się w <xref:System.Web.UI.WebControls.TreeView> formant jest zaznaczony.  
  
 A <xref:System.Web.UI.WebControls.TreeNode> obiektu składają się następujące cztery elementów interfejsu użytkownika (UI), które mogą zostać dostosowany lub ukryte:  
  
-   Ikona wskaźnika węzeł Rozszerzenia używane do wyświetlania, czy węzeł jest rozwinięty, zwinięte lub nie można rozwijać.  
  
-   Opcjonalne pola wyboru skojarzone z węzłem.  
  
-   Węzeł opcjonalny obraz.  
  
-   Tekst węzła.  
  
 Można określić niestandardowego obrazu dla wskaźników rozwijania zwijanej i nie można rozwijać węzła ustawiając <xref:System.Web.UI.WebControls.TreeView.ExpandImageUrl%2A>, <xref:System.Web.UI.WebControls.TreeView.CollapseImageUrl%2A>, i <xref:System.Web.UI.WebControls.TreeView.NoExpandImageUrl%2A> właściwości <xref:System.Web.UI.WebControls.TreeView> klasy. Nawet można ukryć ikony wskaźnika węzeł rozszerzenia całkowicie przez ustawienie <xref:System.Web.UI.WebControls.TreeView.ShowExpandCollapse%2A> właściwość <xref:System.Web.UI.WebControls.TreeView> klasy do `false`.  
  
 Aby wyświetlić pole wyboru obok węzła, ustaw <xref:System.Web.UI.WebControls.TreeView.ShowCheckBoxes%2A> właściwość <xref:System.Web.UI.WebControls.TreeView> klasy. Gdy <xref:System.Web.UI.WebControls.TreeView.ShowCheckBoxes%2A> wartość właściwości jest równa wartości innych niż `TreeNodeType.Node`, są wyświetlane pola wyboru obok typu określonego węzła. Pole wyboru węzła poszczególnych selektywnie można zastąpić przez ustawienie węzła <xref:System.Web.UI.WebControls.TreeNode.ShowCheckBox%2A> właściwości. Gdy pole wyboru jest wyświetlane, użyj <xref:System.Web.UI.WebControls.TreeNode.Checked%2A> właściwości w celu określenia, czy pole wyboru jest zaznaczone.  
  
 Obraz można wyświetlić w węźle przez ustawienie <xref:System.Web.UI.WebControls.TreeNode.ImageUrl%2A> właściwości. Ten obraz jest wyświetlany obok tekstu węzła.  
  
 Tekst węzła w <xref:System.Web.UI.WebControls.TreeView> formant może być w jednym z dwóch trybów: trybu wyboru lub nawigacji. Domyślnie węzeł jest w trybie wyboru. Aby ustawić węzła trybu nawigacji, ustaw węzła <xref:System.Web.UI.WebControls.TreeNode.NavigateUrl%2A> właściwości na wartość inną niż ciąg pusty (""). Aby przełączyć węzła do trybu wyboru, ustaw węzła <xref:System.Web.UI.WebControls.TreeNode.NavigateUrl%2A> właściwości na pusty ciąg.  
  
> [!NOTE]
>  Niektóre przeglądarki internetowe ma ograniczenie, które mogą wpłynąć na wydajność <xref:System.Web.UI.WebControls.TreeView> formantu. Na przykład program Microsoft Internet Explorer 6.0 ma limit znaków adresu URL 2067 znaki, które go zapisuje. Jeśli liczba znaków w adresie URL węzła jest większy niż ten numer, rozwinięcie tego węzła zakończy się niepowodzeniem i nie jest wyjątek.  
  
 Domyślnie, klikając węzeł, który jest w trybie wyboru ogłoszeń strony serwera i zgłasza <xref:System.Web.UI.WebControls.TreeView.SelectedNodeChanged> zdarzeń. Opcjonalnie można określić różne zdarzenia warunków zgłaszania przez ustawienie węzła `SelectAction` właściwości. Aby uzyskać więcej informacji, zobacz <xref:System.Web.UI.WebControls.TreeNode.SelectAction%2A>. Aby określić, który węzeł został kliknięty w trybie wyboru, użyj <xref:System.Web.UI.WebControls.TreeView.SelectedNode%2A> właściwość <xref:System.Web.UI.WebControls.TreeView> formantu.  
  
 Gdy węzeł jest w trybie nawigacji, wszystkie zdarzenia wyboru są wyłączone dla tego węzła. Kliknięcie węzła w trybie nawigacji kieruje użytkownika pod określony adres URL. Opcjonalnie możesz ustawić <xref:System.Web.UI.WebControls.TreeNode.Target%2A> właściwości w celu określenia okna lub ramki, w której do wyświetlania połączonej zawartości.  
  
 <xref:System.Web.UI.WebControls.TreeNode> Klasa zawiera kilka właściwości, które są używane do przechowywania stanu węzła. Użyj <xref:System.Web.UI.WebControls.TreeNode.Selected%2A> właściwości w celu określenia, czy węzeł jest zaznaczone. Aby określić, czy węzeł jest rozwinięty, użyj <xref:System.Web.UI.WebControls.TreeNode.Expanded%2A> właściwości. <xref:System.Web.UI.WebControls.TreeNode.DataBound%2A> Właściwość jest używana do określenia, czy węzeł jest powiązany z danymi. Gdy węzeł jest powiązany z danymi, uzyskiwania dostępu do podstawowego elementu danych, za pomocą <xref:System.Web.UI.WebControls.TreeNode.DataItem%2A> właściwości.  
  
 Ta klasa dostarcza kilka właściwości, które ułatwiają ustalenie Pozycja węzła względem innych węzłów w drzewie. Użyj <xref:System.Web.UI.WebControls.TreeNode.Depth%2A> właściwości w celu określenia głębokości węzła. Uzyskaniem rozdzielanej listy węzłów z bieżącego węzła do węzła głównego przy użyciu <xref:System.Web.UI.WebControls.TreeNode.ValuePath%2A> właściwości. Aby określić węzeł nadrzędny węzła, użyj <xref:System.Web.UI.WebControls.TreeNode.Parent%2A> właściwości. Węzły podrzędne są dostępne przy użyciu <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> kolekcji.  
  
 Czasami nie jest praktyczne statycznie wstępnie struktury drzewa ze względu na rozmiar danych lub niestandardowych zawartość, która jest zależna od danych wejściowych użytkownika. W związku z tym <xref:System.Web.UI.WebControls.TreeView> sterowanie obsługuje populacji dynamiczne węzła. Węzeł mogą być umieszczane w czasie wykonywania, gdy jest rozwinięta. Należy pamiętać, można uzyskać nieoczekiwane zachowanie jeśli będą się powtarzać asynchronicznie utworzony węzłów. Na przykład użycie wątku w tle proces roboczy do asynchronicznego wypełniania węzłów, węzeł drzewa może nie można wypełnić natychmiast że formant będzie kontynuowane z resztą cyklu życia strony. Strony Tworzenie opóźnionych węzłów może spowodować problemy, gdy stan widoku formantu jest załadowane, ale nie zostanie całkowicie wypełnione węzła drzewa.  Uzyskać więcej informacji dotyczących populacji węzła dynamicznej, zobacz <xref:System.Web.UI.WebControls.TreeNode.PopulateOnDemand%2A> właściwości.  
  
 Aby uzyskać listę początkowe wartości właściwości dla wystąpienia <xref:System.Web.UI.WebControls.TreeNode>, zobacz <xref:System.Web.UI.WebControls.TreeNode.%23ctor%2A> konstruktora.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak skonfigurować ramek dla w następnym przykładzie kodu.  
  
 [!code-aspx-csharp[TreeViewFrameSet#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeViewFrameSet/CS/framecs.aspx#1)]
 [!code-aspx-vb[TreeViewFrameSet#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeViewFrameSet/VB/framevb.aspx#1)]  
  
 Poniższy przykład kodu pokazuje, jak używać składni deklaratywnej do tworzenia <xref:System.Web.UI.WebControls.TreeNode> obiekty w <xref:System.Web.UI.WebControls.TreeView> formantu. W tym przykładzie jest używana w zestawie ramek poprzedni przykład do wyświetlania spisu treści.  
  
 [!code-aspx-csharp[TreeViewFrameExample#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeViewFrameExample/CS/treeviewframecs.aspx#1)]
 [!code-aspx-vb[TreeViewFrameExample#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeViewFrameExample/VB/treeviewframevb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.TreeView" />
    <altmember cref="P:System.Web.UI.WebControls.TreeNode.ChildNodes" />
    <altmember cref="P:System.Web.UI.WebControls.TreeNode.ImageUrl" />
    <altmember cref="P:System.Web.UI.WebControls.TreeNode.NavigateUrl" />
    <altmember cref="P:System.Web.UI.WebControls.TreeView.Nodes" />
    <altmember cref="P:System.Web.UI.WebControls.TreeNode.Parent" />
    <altmember cref="P:System.Web.UI.WebControls.TreeNode.PopulateOnDemand" />
    <altmember cref="P:System.Web.UI.WebControls.TreeNode.Target" />
    <altmember cref="P:System.Web.UI.WebControls.TreeNode.Text" />
    <altmember cref="P:System.Web.UI.WebControls.TreeNode.Value" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.WebControls.TreeNode" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TreeNode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TreeNode();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.WebControls.TreeNode" /> klasy bez tekstu lub wartości.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tego konstruktora zainicjować nowe wystąpienie klasy <xref:System.Web.UI.WebControls.TreeNode> przy użyciu wartości domyślnych.  
  
> [!NOTE]
>  Gdy ten konstruktor jest używany, wszystkie właściwości w <xref:System.Web.UI.WebControls.TreeNode> obiektu są ustawione na wartości domyślne. Pamiętaj ustawić właściwości, w razie potrzeby, po utworzeniu obiektu.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób używania tego konstruktora do dynamicznego dodawania węzła do <xref:System.Web.UI.WebControls.TreeView> formantu.  
  
 [!code-aspx-csharp[TreeNodeCtor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCtor/CS/treenodectorcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCtor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCtor/VB/treenodectorvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.Nodes" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.ChildNodes" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TreeNode (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TreeNode(System::String ^ text);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Tekst, który jest wyświetlany w <see cref="T:System.Web.UI.WebControls.TreeView" /> kontroli dla węzła.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.WebControls.TreeNode" /> przy użyciu określonego tekstu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tego konstruktora zainicjować nowe wystąpienie klasy <xref:System.Web.UI.WebControls.TreeNode> przy użyciu tekstu określonego przez `text` parametru.  
  
 W poniższej tabeli przedstawiono wartości początkowej właściwości dla wystąpienia <xref:System.Web.UI.WebControls.TreeNode>.  
  
|Właściwość|Wartość początkowa|  
|--------------|-------------------|  
|<xref:System.Web.UI.WebControls.TreeNode.Text%2A>|Wartość `text` parametru.|  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób używania tego konstruktora do dynamicznego dodawania węzła do <xref:System.Web.UI.WebControls.TreeView> formantu.  
  
 [!code-aspx-csharp[TreeNodeCtor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCtor/CS/treenodectorcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCtor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCtor/VB/treenodectorvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.Text" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.Nodes" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.ChildNodes" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TreeNode (string text, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TreeNode(System::String ^ text, System::String ^ value);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Tekst, który jest wyświetlany w <see cref="T:System.Web.UI.WebControls.TreeView" /> kontroli dla węzła.</param>
        <param name="value">Dodatkowe dane skojarzone z węzłem, takich jak dane używane na potrzeby obsługi zdarzenia odświeżania strony.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.WebControls.TreeNode" /> przy użyciu określonego tekstu i wartość.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tego konstruktora zainicjować nowe wystąpienie klasy <xref:System.Web.UI.WebControls.TreeNode> przy użyciu tekstu i wartość określoną przez `text` i `value` parametry, odpowiednio.  
  
 W poniższej tabeli przedstawiono początkowe wartości właściwości dla wystąpienia <xref:System.Web.UI.WebControls.TreeNode>.  
  
|Właściwość|Wartość początkowa|  
|--------------|-------------------|  
|<xref:System.Web.UI.WebControls.TreeNode.Text%2A>|Wartość `text` parametru.|  
|<xref:System.Web.UI.WebControls.TreeNode.Value%2A>|Wartość `value` parametru.|  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób używania tego konstruktora do dynamicznego dodawania węzła do <xref:System.Web.UI.WebControls.TreeView> formantu.  
  
 [!code-aspx-csharp[TreeNodeCtor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCtor/CS/treenodectorcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCtor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCtor/VB/treenodectorvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.Text" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.Value" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.Nodes" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.ChildNodes" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal TreeNode (System.Web.UI.WebControls.TreeView owner, bool isRoot);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.WebControls.TreeView owner, bool isRoot) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.#ctor(System.Web.UI.WebControls.TreeView,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub New (owner As TreeView, isRoot As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; TreeNode(System::Web::UI::WebControls::TreeView ^ owner, bool isRoot);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="System.Web.UI.WebControls.TreeView" />
        <Parameter Name="isRoot" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="owner">
          <see cref="T:System.Web.UI.WebControls.TreeView" /> Który będzie zawierał nowy <see cref="T:System.Web.UI.WebControls.TreeNode" />.</param>
        <param name="isRoot">
          <see langword="true" /> Jeśli <see cref="T:System.Web.UI.WebControls.TreeNode" /> jest węzłem głównym; w przeciwnym razie <see langword="false" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.WebControls.TreeNode" /> przy użyciu określonego właściciela.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeNodeTypes" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TreeNode (string text, string value, string imageUrl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, string value, string imageUrl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.#ctor(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String, value As String, imageUrl As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TreeNode(System::String ^ text, System::String ^ value, System::String ^ imageUrl);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="imageUrl" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Tekst, który jest wyświetlany w <see cref="T:System.Web.UI.WebControls.TreeView" /> kontroli dla węzła.</param>
        <param name="value">Dodatkowe dane skojarzone z węzłem, takich jak dane używane na potrzeby obsługi zdarzenia odświeżania strony.</param>
        <param name="imageUrl">Adres URL obrazu, który jest wyświetlany obok węzła.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.WebControls.TreeNode" /> przy użyciu określonego tekstu wartości i adres URL.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tego konstruktora zainicjować nowe wystąpienie klasy <xref:System.Web.UI.WebControls.TreeNode> przy użyciu tekstu, wartość i adres URL określony przez `text`, `value`, i `imageUrl` parametry, odpowiednio.  
  
 W poniższej tabeli przedstawiono początkowe wartości właściwości dla wystąpienia <xref:System.Web.UI.WebControls.TreeNode>.  
  
|Właściwość|Wartość początkowa|  
|--------------|-------------------|  
|<xref:System.Web.UI.WebControls.TreeNode.Text%2A>|Wartość `text` parametru.|  
|<xref:System.Web.UI.WebControls.TreeNode.Value%2A>|Wartość `value` parametru.|  
|<xref:System.Web.UI.WebControls.TreeNode.ImageUrl%2A>|Wartość `imageUrl` parametru.|  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób używania tego konstruktora do dynamicznego dodawania węzła do <xref:System.Web.UI.WebControls.TreeView> formantu.  
  
 [!code-aspx-csharp[TreeNodeCtor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCtor/CS/treenodectorcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCtor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCtor/VB/treenodectorvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.Text" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.Value" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.ImageUrl" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.Nodes" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.ChildNodes" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TreeNode (string text, string value, string imageUrl, string navigateUrl, string target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, string value, string imageUrl, string navigateUrl, string target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.#ctor(System.String,System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String, value As String, imageUrl As String, navigateUrl As String, target As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TreeNode(System::String ^ text, System::String ^ value, System::String ^ imageUrl, System::String ^ navigateUrl, System::String ^ target);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="imageUrl" Type="System.String" />
        <Parameter Name="navigateUrl" Type="System.String" />
        <Parameter Name="target" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Tekst, który jest wyświetlany w <see cref="T:System.Web.UI.WebControls.TreeView" /> kontroli dla węzła.</param>
        <param name="value">Dodatkowe dane skojarzone z węzłem, takich jak dane używane na potrzeby obsługi zdarzenia odświeżania strony.</param>
        <param name="imageUrl">Adres URL obrazu, który jest wyświetlany obok węzła.</param>
        <param name="navigateUrl">Adres URL do odesłania do, gdy węzeł zostanie kliknięty.</param>
        <param name="target">Docelowego okna lub ramki, w którym można wyświetlić zawartości strony sieci Web połączona, gdy węzeł zostanie kliknięty.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.WebControls.TreeNode" /> przy użyciu określonego tekstu, wartość, adres URL obrazu, adres URL nawigacji i obiekt docelowy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tego konstruktora zainicjować nowe wystąpienie klasy <xref:System.Web.UI.WebControls.TreeNode> przy użyciu adresów URL tekstu, wartość, obrazu i nawigacji i wyświetlić docelowy określony przez `text`, `value`, `imageUrl`, `navigateUrl`, i `target` Parametry, odpowiednio.  
  
 W poniższej tabeli przedstawiono początkowe wartości właściwości dla wystąpienia <xref:System.Web.UI.WebControls.TreeNode>.  
  
|Właściwość|Wartość początkowa|  
|--------------|-------------------|  
|<xref:System.Web.UI.WebControls.TreeNode.Text%2A>|Wartość `text` parametru.|  
|<xref:System.Web.UI.WebControls.TreeNode.Value%2A>|Wartość `value` parametru.|  
|<xref:System.Web.UI.WebControls.TreeNode.ImageUrl%2A>|Wartość `imageUrl` parametru.|  
|<xref:System.Web.UI.WebControls.TreeNode.NavigateUrl%2A>|Wartość `navigateUrl` parametru.|  
|<xref:System.Web.UI.WebControls.TreeNode.Target%2A>|Wartość `target` parametru.|  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób używania tego konstruktora do dynamicznego dodawania węzła do <xref:System.Web.UI.WebControls.TreeView> formantu.  
  
 [!code-aspx-csharp[TreeNodeCtor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCtor/CS/treenodectorcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCtor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCtor/VB/treenodectorvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.Text" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.Value" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.ImageUrl" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.NavigateUrl" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.Target" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.Nodes" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.ChildNodes" />
      </Docs>
    </Member>
    <Member MemberName="Checked">
      <MemberSignature Language="C#" Value="public bool Checked { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Checked" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.Checked" />
      <MemberSignature Language="VB.NET" Value="Public Property Checked As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Checked { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy zaznaczone jest pole wyboru węzła.</summary>
        <value>
          <see langword="true" /> Jeśli zaznaczono pole wyboru węzła; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy węzeł Wyświetla pole wyboru, <xref:System.Web.UI.WebControls.TreeNode.Checked%2A> jest często używana do określenia, czy pole wyboru jest zaznaczone. Zaznaczenie pola wyboru skojarzone z węzłem węzeł jest automatycznie dodawany do <xref:System.Web.UI.WebControls.TreeView.CheckedNodes%2A> Kolekcja <xref:System.Web.UI.WebControls.TreeView> formantu. <xref:System.Web.UI.WebControls.TreeNode.Checked%2A> Właściwości można również określić, czy pole wyboru jest zaznaczone.  
  
> [!NOTE]
>  Jest bardziej popularne, aby określić węzły, które w <xref:System.Web.UI.WebControls.TreeView> formant ma swoich pól wyboru wybranych przez iteracja <xref:System.Web.UI.WebControls.TreeView.CheckedNodes%2A> kolekcji.  
  
 Wartość tej właściwości jest przechowywany w stanie widoku.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.WebControls.TreeNode.Checked%2A> właściwości w celu określenia, czy zaznaczone jest pole wyboru węzła. Inicjuje jej pola wyboru węzłów o głębi je do wybranego stanu. W tym przykładzie działał prawidłowo należy skopiować przykładowe dane XML poniżej w pliku o nazwie Newsgroup.xml.  
  
 [!code-aspx-csharp[TreeNodeChecked#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeChecked/CS/treenodecheckedcs.aspx#1)]
 [!code-aspx-vb[TreeNodeChecked#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeChecked/VB/treenodecheckedvb.aspx#1)]  
  
 Następujący kod jest przykładowe dane XML w poprzednim przykładzie.  
  
```  
<category name="news.microsoft.com">  
    <group name="microsoft.public.dotnet.framework.aspnet"/>  
    <group name="microsoft.public.dotnet.framework.aspnet.mobile"/>  
    <group name="microsoft.public.dotnet.framework.aspnet.webservices"/>  
</category>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.CheckedNodes" />
      </Docs>
    </Member>
    <Member MemberName="ChildNodes">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TreeNodeCollection ChildNodes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TreeNodeCollection ChildNodes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.ChildNodes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ChildNodes As TreeNodeCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::TreeNodeCollection ^ ChildNodes { System::Web::UI::WebControls::TreeNodeCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerDefaultProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TreeNodeCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> kolekcji, która zawiera węzły podrzędne pierwszego stopnia bieżącego węzła.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> zawiera węzły podrzędne pierwszego stopnia, bieżącego węzła.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> właściwości do pobrania <xref:System.Web.UI.WebControls.TreeNodeCollection> kolekcji, która zawiera węzły podrzędne pierwszego stopnia bieżącego węzła. Ta kolekcja to powszechnie używane Iterowanie wszystkich węzłów podrzędnych pierwszego stopnia lub uzyskać dostępu do określonych pierwszego stopnia podrzędnym bieżącego węzła.  
  
 <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> Właściwości mogą służyć do programowego zarządzania węzłów podrzędnych pierwszego stopnia bieżącego węzła. Można dodać, wstawianie, Usuń i pobrać <xref:System.Web.UI.WebControls.TreeNode> obiektów z kolekcji. Wszystkie aktualizacje w kolekcji automatycznie zostaną odzwierciedlone w <xref:System.Web.UI.WebControls.TreeView> kontrolować po następnym odświeżeniu strony.  
  
 Aby uzyskać dostęp do węzłów podrzędnych dalsze niżej na drzewie, użyj <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> właściwości węzła podrzędnego następnego poziomu przechodzenia z poziomu węzła.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> właściwości przechodzenia drzewa.  
  
 [!code-aspx-csharp[TreeNodeCollectionCount#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionCount/CS/treenodecollectioncountcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionCount#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionCount/VB/treenodecollectioncountvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNodeCollection" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.Parent" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.Nodes" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="protected virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.Clone" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ Clone();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy nowe wystąpienie klasy <see cref="T:System.Web.UI.WebControls.TreeNode" /> klasy przy użyciu właściwości bieżącego <see cref="T:System.Web.UI.WebControls.TreeNode" /> wystąpienia.</summary>
        <returns>Nowe wystąpienie klasy <see cref="T:System.Web.UI.WebControls.TreeNode" /> z właściwości bieżącego <see cref="T:System.Web.UI.WebControls.TreeNode" /> wystąpienia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest to metoda pomocnika obsługującą <xref:System.ICloneable> interfejs implementowany przez <xref:System.Web.UI.WebControls.TreeNode>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ICloneable" />
      </Docs>
    </Member>
    <Member MemberName="Collapse">
      <MemberSignature Language="C#" Value="public void Collapse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Collapse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.Collapse" />
      <MemberSignature Language="VB.NET" Value="Public Sub Collapse ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Collapse();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwija bieżącego węzła drzewa.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.TreeNode.Collapse%2A> metodę, aby łatwo zwinąć bieżącego węzła.  
  
> [!NOTE]
>  Alternatywnie, można również ustawić <xref:System.Web.UI.WebControls.TreeNode.Expanded%2A> właściwości `false`.  
  
 Zwiń bieżący węzeł i wszystkie węzły podrzędne, należy rozważyć użycie <xref:System.Web.UI.WebControls.TreeNode.CollapseAll%2A> metody.  
  
 <xref:System.Web.UI.WebControls.TreeView.CollapseAll%2A> zostanie zwijanie wszystkich węzłów w drzewie całego.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.WebControls.TreeNode.Collapse%2A> metodę programowo zwinąć węzeł w <xref:System.Web.UI.WebControls.TreeView> formantu. W tym przykładzie działał prawidłowo należy skopiować przykładowe dane XML poniżej w pliku o nazwie Book.xml.  
  
 [!code-aspx-csharp[TreeNodeExpand#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeExpand/CS/treenodeexpandcs.aspx#1)]
 [!code-aspx-vb[TreeNodeExpand#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeExpand/VB/treenodeexpandvb.aspx#1)]  
  
 Następujący kod jest przykładowe dane XML w poprzednim przykładzie.  
  
```  
<Book Title="Book Title">  
    <Chapter Heading="Chapter 1">  
        <Section Heading="Section 1">  
        </Section>  
        <Section Heading="Section 2">  
        </Section>  
    </Chapter>  
    <Chapter Heading="Chapter 2">  
        <Section Heading="Section 1">  
        </Section>  
    </Chapter>  
</Book>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.Expanded" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.CollapseAll" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.Expand" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.ExpandAll" />
        <altmember cref="M:System.Web.UI.WebControls.TreeView.CollapseAll" />
      </Docs>
    </Member>
    <Member MemberName="CollapseAll">
      <MemberSignature Language="C#" Value="public void CollapseAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CollapseAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.CollapseAll" />
      <MemberSignature Language="VB.NET" Value="Public Sub CollapseAll ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CollapseAll();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwija bieżący węzeł i wszystkich jego węzłów podrzędnych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.TreeNode.CollapseAll%2A> metodę, aby zwinąć wygodnie bieżącego węzła i wszystkich jego węzłów podrzędnych.  
  
> [!NOTE]
>  Alternatywnie, można również ustawić <xref:System.Web.UI.WebControls.TreeNode.Expanded%2A> właściwość bieżącego węzła i wszystkich jego węzłów podrzędnych można `false`.  
  
 Zwiń bieżący węzeł, należy rozważyć użycie <xref:System.Web.UI.WebControls.TreeNode.Collapse%2A> metody.  
  
 <xref:System.Web.UI.WebControls.TreeView.CollapseAll%2A> zostanie zwijanie wszystkich węzłów w drzewie całego.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.WebControls.TreeNode.CollapseAll%2A> metodę programowo zwinąć węzeł i jego węzły podrzędne w <xref:System.Web.UI.WebControls.TreeView> formantu. W tym przykładzie działał prawidłowo należy skopiować przykładowe dane XML poniżej w pliku o nazwie Book.xml.  
  
 [!code-aspx-csharp[TreeNodeExpandAll#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeExpandAll/CS/treenodeexpandallcs.aspx#1)]
 [!code-aspx-vb[TreeNodeExpandAll#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeExpandAll/VB/treenodeexpandallvb.aspx#1)]  
  
 Następujący kod jest przykładowe dane XML w poprzednim przykładzie.  
  
```  
<Book Title="Book Title">  
    <Chapter Heading="Chapter 1">  
        <Section Heading="Section 1">  
        </Section>  
        <Section Heading="Section 2">  
        </Section>  
    </Chapter>  
    <Chapter Heading="Chapter 2">  
        <Section Heading="Section 1">  
        </Section>  
    </Chapter>  
</Book>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.Expanded" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.Collapse" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.Expand" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.ExpandAll" />
        <altmember cref="M:System.Web.UI.WebControls.TreeView.CollapseAll" />
      </Docs>
    </Member>
    <Member MemberName="DataBound">
      <MemberSignature Language="C#" Value="public bool DataBound { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DataBound" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.DataBound" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DataBound As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DataBound { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy węzeł został utworzony za pośrednictwem powiązania danych.</summary>
        <value>
          <see langword="true" /> Jeśli węzeł został utworzony za pośrednictwem powiązania danych; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.TreeNode.DataBound%2A> Właściwość jest używana do programowane wyznaczanie, czy węzeł został utworzony za pośrednictwem powiązania danych. Ponieważ nie można łączyć zawartość dynamiczną i statyczną na tym samym węźle, ta właściwość jest często stosowany podczas wypełniania <xref:System.Web.UI.WebControls.TreeView> kontroli dynamicznie, aby określić, czy węzeł zawiera zawartość statyczną.  
  
 Wartość tej właściwości jest przechowywany w stanie widoku.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
      </Docs>
    </Member>
    <Member MemberName="DataItem">
      <MemberSignature Language="C#" Value="public object DataItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataItem" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.DataItem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DataItem As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataItem { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera element danych jest powiązane z formantem.</summary>
        <value>A <see cref="T:System.Object" /> reprezentujący element danych jest powiązane z formantem. Wartość domyślna to <see langword="null" />, co oznacza, że węzeł nie jest powiązany z dowolnego elementu danych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy <xref:System.Web.UI.WebControls.TreeView> kontrolka jest powiązana ze źródłem danych, takich jak <xref:System.Web.UI.WebControls.XmlDataSource> obiektu, ta właściwość jest ustawiona na element danych, który jest powiązany z tym określonego węzła. Ta właściwość jest często używana do wartości elementu danych.  
  
> [!NOTE]
>  Ta właściwość jest dostępna tylko wtedy, gdy podczas wiązania z danymi.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.XmlDataSource" />
      </Docs>
    </Member>
    <Member MemberName="DataPath">
      <MemberSignature Language="C#" Value="public string DataPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.DataPath" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DataPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataPath { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera ścieżkę do danych związane z węzłem.</summary>
        <value>Ścieżka do danych powiązane w węźle. Ta wartość pochodzi z danymi hierarchicznymi kontroli źródła, do którego <see cref="T:System.Web.UI.WebControls.TreeView" /> formantem. Wartością domyślną jest ciąg pusty ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.TreeNode.DataPath%2A> Wartość właściwości jest często używana przy wywoływaniu <xref:System.Web.UI.IHierarchicalDataSource.GetHierarchicalView%2A?displayProperty=nameWithType> metoda podać ścieżkę do danych powiązana z bieżącego węzła. Ta metoda zwraca <xref:System.Web.UI.HierarchicalDataSourceView?displayProperty=nameWithType> obiekt zawierający dane w określonej ścieżce.  
  
 Wartość tej właściwości jest przechowywany w stanie widoku.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="M:System.Web.UI.HierarchicalDataSourceControl.GetHierarchicalView(System.String)" />
        <altmember cref="T:System.Web.UI.HierarchicalDataSourceControl" />
      </Docs>
    </Member>
    <Member MemberName="Depth">
      <MemberSignature Language="C#" Value="public int Depth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Depth" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.Depth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Depth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Depth { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera głębokości węzła.</summary>
        <value>Głębokość węzła.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.TreeNode.Depth%2A> właściwości w celu określenia głębokości węzła. Głębokość reprezentuje liczbę poziomów hierarchii między węzłem a węzła głównego. Na przykład węzła głównego ma głębokość o wartości zero. Element podrzędny węzła głównego ma głębokość jedno i tak dalej.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak używać <xref:System.Web.UI.WebControls.TreeNode.Depth%2A> właściwości w celu określenia głębokość węzła. Konsument inicjuje wszystkie węzły o głębi je do wybranego stanu. W tym przykładzie działał prawidłowo należy skopiować przykładowe dane XML poniżej w pliku o nazwie Newsgroup.xml.  
  
 [!code-aspx-csharp[TreeNodeChecked#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeChecked/CS/treenodecheckedcs.aspx#1)]
 [!code-aspx-vb[TreeNodeChecked#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeChecked/VB/treenodecheckedvb.aspx#1)]  
  
 Następujący kod jest przykładowe dane XML w poprzednim przykładzie.  
  
```  
<category name="news.microsoft.com">  
    <group name="microsoft.public.dotnet.framework.aspnet"/>  
    <group name="microsoft.public.dotnet.framework.aspnet.mobile"/>  
    <group name="microsoft.public.dotnet.framework.aspnet.webservices"/>  
</category>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
      </Docs>
    </Member>
    <Member MemberName="Expand">
      <MemberSignature Language="C#" Value="public void Expand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Expand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.Expand" />
      <MemberSignature Language="VB.NET" Value="Public Sub Expand ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Expand();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rozwija bieżącego węzła drzewa.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.TreeNode.Expand%2A> metodę, aby łatwo rozszerzyć bieżącego węzła.  
  
> [!NOTE]
>  Alternatywnie, można również ustawić <xref:System.Web.UI.WebControls.TreeNode.Expanded%2A> właściwości `true`.  
  
 Aby rozszerzyć bieżącego węzła i jego węzły podrzędne, należy rozważyć użycie <xref:System.Web.UI.WebControls.TreeNode.ExpandAll%2A> metody.  
  
 <xref:System.Web.UI.WebControls.TreeView.ExpandAll%2A> rozwinie wszystkich węzłów w drzewie całego.  
  
 Wartość tej właściwości jest przechowywany w stanie widoku.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.WebControls.TreeNode.Expand%2A> metodę programowo rozwiń węzeł w <xref:System.Web.UI.WebControls.TreeView> formantu. W tym przykładzie działał prawidłowo należy skopiować przykładowe dane XML poniżej w pliku o nazwie Book.xml.  
  
 [!code-aspx-csharp[TreeNodeExpand#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeExpand/CS/treenodeexpandcs.aspx#1)]
 [!code-aspx-vb[TreeNodeExpand#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeExpand/VB/treenodeexpandvb.aspx#1)]  
  
 Następujący kod jest przykładowe dane XML w poprzednim przykładzie.  
  
```  
<Book Title="Book Title">  
    <Chapter Heading="Chapter 1">  
        <Section Heading="Section 1">  
        </Section>  
        <Section Heading="Section 2">  
        </Section>  
    </Chapter>  
    <Chapter Heading="Chapter 2">  
        <Section Heading="Section 1">  
        </Section>  
    </Chapter>  
</Book>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.Expanded" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.Collapse" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.CollapseAll" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.ExpandAll" />
        <altmember cref="M:System.Web.UI.WebControls.TreeView.ExpandAll" />
      </Docs>
    </Member>
    <Member MemberName="ExpandAll">
      <MemberSignature Language="C#" Value="public void ExpandAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExpandAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.ExpandAll" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExpandAll ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExpandAll();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rozwija bieżącego węzła i wszystkich jego węzłów podrzędnych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.TreeNode.ExpandAll%2A> — metoda rozszerzenia wygodnie bieżącego węzła i wszystkich jego węzłów podrzędnych.  
  
> [!NOTE]
>  Alternatywnie, można również ustawić <xref:System.Web.UI.WebControls.TreeNode.Expanded%2A> właściwość bieżącego węzła i wszystkich jego węzłów podrzędnych można `true`.  
  
 Aby rozszerzyć bieżącego węzła, należy rozważyć użycie <xref:System.Web.UI.WebControls.TreeNode.Expand%2A> metody.  
  
 <xref:System.Web.UI.WebControls.TreeView.ExpandAll%2A> rozwinie wszystkich węzłów w drzewie całego.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.WebControls.TreeNode.ExpandAll%2A> metodę programowo rozwiń węzeł i jego węzły podrzędne w <xref:System.Web.UI.WebControls.TreeView> formantu. W tym przykładzie działał prawidłowo należy skopiować przykładowe dane XML poniżej w pliku o nazwie Book.xml.  
  
 [!code-aspx-csharp[TreeNodeExpandAll#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeExpandAll/CS/treenodeexpandallcs.aspx#1)]
 [!code-aspx-vb[TreeNodeExpandAll#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeExpandAll/VB/treenodeexpandallvb.aspx#1)]  
  
 Następujący kod jest przykładowe dane XML w poprzednim przykładzie.  
  
```  
<Book Title="Book Title">  
    <Chapter Heading="Chapter 1">  
        <Section Heading="Section 1">  
        </Section>  
        <Section Heading="Section 2">  
        </Section>  
    </Chapter>  
    <Chapter Heading="Chapter 2">  
        <Section Heading="Section 1">  
        </Section>  
    </Chapter>  
</Book>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.Expanded" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.Collapse" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.CollapseAll" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.Expand" />
        <altmember cref="M:System.Web.UI.WebControls.TreeView.ExpandAll" />
      </Docs>
    </Member>
    <Member MemberName="Expanded">
      <MemberSignature Language="C#" Value="public Nullable&lt;bool&gt; Expanded { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;bool&gt; Expanded" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.Expanded" />
      <MemberSignature Language="VB.NET" Value="Public Property Expanded As Nullable(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;bool&gt; Expanded { Nullable&lt;bool&gt; get(); void set(Nullable&lt;bool&gt; value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Nullable`1&lt;System.Boolean&gt;), "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy węzeł jest rozwinięty.</summary>
        <value>
          <see langword="true" /> Jeśli węzeł jest rozwinięty, <see langword="false" /> Jeśli węzeł nie jest rozwinięty, lub <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.TreeNode.Expanded%2A> właściwości, aby określić lub określić, czy węzeł jest rozwinięty.  
  
 Można zwijać i rozwijać węzła wywołując <xref:System.Web.UI.WebControls.TreeNode.Expand%2A> i <xref:System.Web.UI.WebControls.TreeNode.Collapse%2A> metod, odpowiednio. Można również rozwinąć i zwinąć węzeł i wszystkie węzły podrzędne, wywołując <xref:System.Web.UI.WebControls.TreeNode.ExpandAll%2A> i <xref:System.Web.UI.WebControls.TreeNode.CollapseAll%2A> metod, odpowiednio.  
  
 Ponieważ <xref:System.Web.UI.WebControls.TreeNode.Expanded%2A> poniższy fragment kodu C# powoduje błąd kompilacji, właściwość jest właściwością trzy stanowy:  
  
```  
protected void TreeView1_SelectedNodeChanged(object sender, EventArgs e)  
{  
if (TreeView1.Nodes[0].Expanded)  
{  
// some work here   
}  
}  
```  
  
 Gdy VB.Net niejawnie rzutuje `Boolean` do wartości `NullableBoolean`, C# nie obsługuje. W związku z tym jest najlepszym rozwiązaniem jest jawnie Sprawdź stan właściwości. Na przykład następujący przykładowy kod w języku Visual Basic i C# jawnie testowania wartości <xref:System.Web.UI.WebControls.TreeNode.Expanded%2A> właściwości.  
  
 Poniższy przykład kodu języka Visual Basic jawnie testów wartość <xref:System.Web.UI.WebControls.TreeNode.Expanded%2A> właściwości. W tym przykładzie testów, jeśli <xref:System.Web.UI.WebControls.TreeNode.Expanded%2A> właściwość jest ustawiona na `True`; w związku z tym `Nothing` i `False` przechodzić `If` instrukcji.  
  
```  
If TreeView1.Nodes(0).Expanded = True Then 'some work hereEnd IF  
```  
  
 W tym przykładzie kodu C# jawnie testów wartość <xref:System.Web.UI.WebControls.TreeNode.Expanded%2A> właściwości. W tym przykładzie testów, jeśli <xref:System.Web.UI.WebControls.TreeNode.Expanded%2A> właściwość jest ustawiona na `True`; w związku z tym `Null` i `False` przechodzić `If` instrukcji.  
  
```  
if( TreeView1.Nodes[0].Expanded == true ) { //some work here}  
```  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.WebControls.TreeNode.Expanded%2A> właściwości programowo rozwinąć węzeł. Inicjuje on wszystkie węzły o głębi co do stanu rozwinięte. Należy zauważyć, że po rozwinięciu węzła głównego węzły podrzędne są już rozwinięte. W tym przykładzie działał prawidłowo należy skopiować przykładowe dane XML poniżej w pliku o nazwie Book.xml.  
  
 [!code-aspx-csharp[TreeNodeExpanded#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeExpanded/CS/treenodeexpandedcs.aspx#1)]
 [!code-aspx-vb[TreeNodeExpanded#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeExpanded/VB/treenodeexpandedvb.aspx#1)]  
  
 Następujący kod jest przykładowe dane XML w poprzednim przykładzie.  
  
```  
<Book Title="Book Title">  
    <Chapter Heading="Chapter 1">  
        <Section Heading="Section 1">  
        </Section>  
        <Section Heading="Section 2">  
        </Section>  
    </Chapter>  
    <Chapter Heading="Chapter 2">  
        <Section Heading="Section 1">  
        </Section>  
    </Chapter>  
</Book>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.ExpandDepth" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.Collapse" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.CollapseAll" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.Expand" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.ExpandAll" />
        <altmember cref="M:System.Web.UI.WebControls.TreeView.ExpandAll" />
        <altmember cref="M:System.Web.UI.WebControls.TreeView.CollapseAll" />
      </Docs>
    </Member>
    <Member MemberName="ImageToolTip">
      <MemberSignature Language="C#" Value="public string ImageToolTip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ImageToolTip" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.ImageToolTip" />
      <MemberSignature Language="VB.NET" Value="Public Property ImageToolTip As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ImageToolTip { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia tekst etykietki narzędzia obrazu wyświetlanego obok węzła.</summary>
        <value>Tekst etykietki narzędzia obrazu wyświetlanego obok węzła. Wartość domyślna to ciąg pusty (""), co oznacza, że ta właściwość nie jest ustawiona.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy obraz jest wyświetlany obok węzła (gdy <xref:System.Web.UI.WebControls.TreeNode.ImageUrl%2A> ustawiono właściwość), użyj <xref:System.Web.UI.WebControls.TreeNode.ImageToolTip%2A> właściwości w celu określenia etykietka narzędzia wyświetlana, gdy użytkownik umieszcza wskaźnik myszy nad obrazem. Określony tekst zawiera urządzenia ułatwianiem opis obrazu, który może służyć do udostępnić formantu.  
  
 Wartość tej właściwości jest przechowywany w stanie widoku.  
  
 Wartość tej właściwości, gdy są ustawione, można zapisać automatycznie plik zasobów przy użyciu narzędzia Projektant. Aby uzyskać więcej informacji, zobacz <xref:System.ComponentModel.LocalizableAttribute> i [lokalizacja i globalizacja](http://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.WebControls.TreeNode.ImageToolTip%2A> właściwości w celu określenia tekst etykietki narzędzia dla obraz wyświetlany obok węzła. W tym przykładzie działał prawidłowo należy podać własne obrazy.  
  
 [!code-aspx-csharp[TreeNodeImageToolTip#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeImageToolTip/CS/treenodeimagetooltipcs.aspx#1)]
 [!code-aspx-vb[TreeNodeImageToolTip#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeImageToolTip/VB/treenodeimagetooltipvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.ImageUrl" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.ToolTip" />
      </Docs>
    </Member>
    <Member MemberName="ImageUrl">
      <MemberSignature Language="C#" Value="public string ImageUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ImageUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.ImageUrl" />
      <MemberSignature Language="VB.NET" Value="Public Property ImageUrl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ImageUrl { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia adres URL obrazu, który jest wyświetlany obok węzła.</summary>
        <value>Adres URL niestandardowego obrazu, który jest wyświetlany obok węzła. Wartość domyślna to ciąg pusty (""), co oznacza, że ta właściwość nie jest ustawiona.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.TreeNode.ImageUrl%2A> właściwości w celu określenia niestandardowego obrazu dla bieżącego węzła w <xref:System.Web.UI.WebControls.TreeView> formantu. Ten obraz jest wyświetlany obok węzła i można w dowolnym formacie pliku (jpg, GIF, bmp i tak dalej), tak długo, jak przeglądarka klienta obsługuje tego formatu.  
  
 Wartość tej właściwości jest przechowywany w stanie widoku.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.WebControls.TreeNode.ImageUrl%2A> właściwość, aby podać niestandardowy obraz dla węzła. W tym przykładzie działał prawidłowo należy skopiować przykładowe dane XML poniżej w pliku o nazwie Book.xml.  
  
 [!code-aspx-csharp[TreeViewTreeNodeDataBound#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeViewTreeNodeDataBound/CS/treeviewtreenodedataboundcs.aspx#1)]
 [!code-aspx-vb[TreeViewTreeNodeDataBound#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeViewTreeNodeDataBound/VB/treeviewtreenodedataboundvb.aspx#1)]  
  
 Następujący kod jest przykładowe dane XML w poprzednim przykładzie.  
  
```  
<Book Title="Book Title">  
    <Chapter Heading="Chapter 1">  
        <Section Heading="Section 1">  
        </Section>  
        <Section Heading="Section 2">  
        </Section>  
    </Chapter>  
    <Chapter Heading="Chapter 2">  
        <Section Heading="Section 1">  
        </Section>  
    </Chapter>  
</Book>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.ImageSet" />
      </Docs>
    </Member>
    <Member MemberName="IsTrackingViewState">
      <MemberSignature Language="C#" Value="protected bool IsTrackingViewState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTrackingViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.IsTrackingViewState" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property IsTrackingViewState As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsTrackingViewState { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IStateManager.IsTrackingViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy węzeł jest zapisywanie zmian stanu widoku.</summary>
        <value>
          <see langword="true" /> Jeśli formant jest oznaczony do zapisania stanu; w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Web.UI.IStateManager.IsTrackingViewState" />
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected virtual void LoadViewState (object state);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void LoadViewState(object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub LoadViewState (state As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void LoadViewState(System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.LoadViewState(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="state">
          <see cref="T:System.Object" /> Reprezentujący stan węzła.</param>
        <summary>Ładuje wcześniej zapisany widok stanu węzła.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.TreeNode.LoadViewState%2A> metoda pomocnika służy do załadować uprzednio zapisanego widok stanu węzła  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.IStateManager.LoadViewState(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="NavigateUrl">
      <MemberSignature Language="C#" Value="public string NavigateUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NavigateUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.NavigateUrl" />
      <MemberSignature Language="VB.NET" Value="Public Property NavigateUrl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NavigateUrl { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia adres URL nawigacji po kliknięciu węzła.</summary>
        <value>Adres URL nawigacji po kliknięciu węzła. Wartość domyślna to ciąg pusty (""), co oznacza, że ta właściwość nie jest ustawiona.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tekst węzła może być w jednym z dwóch trybów: trybu wyboru lub nawigacji. Domyślnie węzeł jest w trybie wyboru. Aby ustawić węzła trybu nawigacji, ustaw węzła <xref:System.Web.UI.WebControls.TreeNode.NavigateUrl%2A> właściwości na wartość inną niż ciąg pusty.  
  
 Gdy węzeł jest w trybie nawigacji, wszystkie zdarzenia wyboru są wyłączone dla tego węzła. Kliknięcie węzła w trybie nawigacji użytkownik łączy się z określonym adresem URL. Opcjonalnie możesz ustawić <xref:System.Web.UI.WebControls.TreeNode.Target%2A> właściwości w celu określenia okna lub ramki, w której do wyświetlania połączonej zawartości.  
  
 Wartość tej właściwości jest przechowywany w stanie widoku.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak skonfigurować ramek dla w następnym przykładzie kodu.  
  
 [!code-aspx-csharp[TreeViewFrameSet#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeViewFrameSet/CS/framecs.aspx#1)]
 [!code-aspx-vb[TreeViewFrameSet#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeViewFrameSet/VB/framevb.aspx#1)]  
  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.WebControls.TreeNode.NavigateUrl%2A> właściwości, aby określić adres URL, aby utworzyć link do, gdy węzeł zostanie kliknięty. W tym przykładzie jest używana w zestawie ramek poprzedni przykład do wyświetlania spisu treści.  
  
 [!code-aspx-csharp[TreeViewFrameExample#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeViewFrameExample/CS/treeviewframecs.aspx#1)]
 [!code-aspx-vb[TreeViewFrameExample#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeViewFrameExample/VB/treeviewframevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.Target" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.SelectAction" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TreeNode Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TreeNode Parent" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::TreeNode ^ Parent { System::Web::UI::WebControls::TreeNode ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TreeNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera węzła nadrzędnego bieżącego węzła.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.TreeNode" /> reprezentujący węzła nadrzędnego bieżącego węzła.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.TreeNode.Parent%2A> Zwraca <xref:System.Web.UI.WebControls.TreeNode> obiekt, który reprezentuje węzła nadrzędnego bieżącego węzła. To powszechnie używane, aby określić węzeł nadrzędny lub uzyskać dostęp do właściwości węzła nadrzędnego.  
  
> [!NOTE]
>  Węzeł główny nie ma węzła nadrzędnego.  
  
 Aby uzyskać dostęp do węzłów podrzędnych w bieżącym węźle, należy użyć <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.WebControls.TreeNode.Parent%2A> właściwości, aby uzyskać dostęp do <xref:System.Web.UI.WebControls.TreeNode.Text%2A> właściwości węzła nadrzędnego bieżącego węzła.  
  
 [!code-aspx-csharp[TreeNodeParent#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeParent/CS/treenodeparentcs.aspx#1)]
 [!code-aspx-vb[TreeNodeParent#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeParent/VB/treenodeparentvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.ChildNodes" />
      </Docs>
    </Member>
    <Member MemberName="PopulateOnDemand">
      <MemberSignature Language="C#" Value="public bool PopulateOnDemand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PopulateOnDemand" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.PopulateOnDemand" />
      <MemberSignature Language="VB.NET" Value="Public Property PopulateOnDemand As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PopulateOnDemand { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy węzeł jest wypełniana dynamicznie.</summary>
        <value>
          <see langword="true" /> Aby wypełnić węzeł dynamicznie; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Czasami nie jest praktyczne statycznie wstępnie struktury drzewa ze względu na rozmiar danych lub niestandardowych zawartość, która jest zależna od danych wejściowych użytkownika. W związku z tym <xref:System.Web.UI.WebControls.TreeView> sterowanie obsługuje populacji dynamiczne węzła. Gdy węzeł <xref:System.Web.UI.WebControls.TreeNode.PopulateOnDemand%2A> właściwość jest ustawiona na `true`, ten węzeł jest wypełniana w czasie wykonywania za pośrednictwem zdarzenia odświeżania strony, gdy węzeł jest rozwinięty. Aby wypełnić węzła dynamicznie, metody obsługi zdarzeń, która wypełnia węzeł musi być zdefiniowana dla <xref:System.Web.UI.WebControls.TreeView.TreeNodePopulate> zdarzeń.  
  
 Obsługiwane przeglądarki można również korzystać z populacji węzła po stronie klienta. Po włączeniu umożliwia to <xref:System.Web.UI.WebControls.TreeView> formantu dynamicznie wypełnienia węzła na kliencie, gdy ten węzeł jest rozwinięty, co zapobiega konieczności post do serwera. Aby uzyskać więcej informacji dotyczących populacji węzła po stronie klienta, zobacz <xref:System.Web.UI.WebControls.TreeView.PopulateNodesFromClient%2A>.  
  
 Wartość tej właściwości jest przechowywany w stanie widoku.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.WebControls.TreeNode.PopulateOnDemand%2A> właściwości, aby wskazać, że węzeł jest wypełniana dynamicznie.  
  
 [!code-aspx-csharp[TreeViewPopulateNodesFromClient#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeViewPopulateNodesFromClient/CS/treeviewpopulatenodesfromclientcs.aspx#1)]
 [!code-aspx-vb[TreeViewPopulateNodesFromClient#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeViewPopulateNodesFromClient/VB/treeviewpopulatenodesfromclientvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="E:System.Web.UI.WebControls.TreeView.TreeNodePopulate" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.PopulateNodesFromClient" />
      </Docs>
    </Member>
    <Member MemberName="RenderPostText">
      <MemberSignature Language="C#" Value="protected virtual void RenderPostText (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RenderPostText(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.RenderPostText(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub RenderPostText (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void RenderPostText(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.Web.UI.HtmlTextWriter" /> Reprezentujący strumienia wyjściowego używana podczas zapisu zawartości strony sieci Web.</param>
        <summary>Umożliwia deweloperom kontroli dodać dodatkowe renderowania do tego węzła.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda może zostać przesłonięta przez deweloperów formantu można dodać dodatkowe renderowania po węzeł jest renderowany.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.RenderPreText(System.Web.UI.HtmlTextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="RenderPreText">
      <MemberSignature Language="C#" Value="protected virtual void RenderPreText (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RenderPreText(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.RenderPreText(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub RenderPreText (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void RenderPreText(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.Web.UI.HtmlTextWriter" /> Reprezentujący strumienia wyjściowego używana podczas zapisu zawartości strony sieci Web.</param>
        <summary>Umożliwia deweloperom kontroli dodać dodatkowe renderowania do tego węzła.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda może zostać przesłonięta przez deweloperów formantu można dodać dodatkowe renderowania, przed wyświetleniem tego węzła.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.RenderPreText(System.Web.UI.HtmlTextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected virtual object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function SaveViewState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ SaveViewState();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.SaveViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje bieżący stan widoku węzła.</summary>
        <returns>
          <see cref="T:System.Object" /> Zawierającego zapisany stan węzła.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.TreeNode.SaveViewState%2A> Metoda jest metodą pomocnika wywoływane przez węzeł, aby zapisać jej stan.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.IStateManager.SaveViewState" />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public void Select ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Select() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.Select" />
      <MemberSignature Language="VB.NET" Value="Public Sub Select ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Select();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wybiera bieżącego węzła w <see cref="T:System.Web.UI.WebControls.TreeView" /> formantu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.TreeNode.Select%2A> metoda, aby wybrać bieżącego węzła w <xref:System.Web.UI.WebControls.TreeView> formantu.  
  
 **Uwaga** Alternatywnie, można wybrać bieżącego węzła ustawiając <xref:System.Web.UI.WebControls.TreeNode.Selected%2A> właściwości `true`.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.WebControls.TreeNode.Select%2A> metody, aby wybrać węzeł w <xref:System.Web.UI.WebControls.TreeView> formantu.  
  
 [!code-aspx-csharp[TreeNodeSelected2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeSelected2/CS/treenodeselected2cs.aspx#1)]
 [!code-aspx-vb[TreeNodeSelected2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeSelected2/VB/treenodeselected2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.Selected" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.SelectedNode" />
      </Docs>
    </Member>
    <Member MemberName="SelectAction">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TreeNodeSelectAction SelectAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.TreeNodeSelectAction SelectAction" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.SelectAction" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectAction As TreeNodeSelectAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::TreeNodeSelectAction SelectAction { System::Web::UI::WebControls::TreeNodeSelectAction get(); void set(System::Web::UI::WebControls::TreeNodeSelectAction value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TreeNodeSelectAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia zdarzenie lub zdarzenia, aby wywołać po wybraniu węzła.</summary>
        <value>Jeden z <see cref="T:System.Web.UI.WebControls.TreeNodeSelectAction" /> wartości. Wartość domyślna to <see langword="TreeNodeSelectAction.Select" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tekst węzła w <xref:System.Web.UI.WebControls.TreeView> formant może być w jednym z dwóch trybów: trybu wyboru lub nawigacji. Domyślnie węzeł jest w trybie wyboru. Aby ustawić węzła trybu nawigacji, ustaw węzła <xref:System.Web.UI.WebControls.TreeNode.NavigateUrl%2A> właściwości na wartość inną niż ciąg pusty (""). Aby przełączyć węzła do trybu wyboru, ustaw węzła <xref:System.Web.UI.WebControls.TreeNode.NavigateUrl%2A> właściwości na pusty ciąg.  
  
> [!NOTE]
>  Gdy węzeł jest w trybie nawigacji, wybór zdarzenia są wyłączone dla tego węzła. Klikając węzeł kieruje użytkownika do określonego adresu URL, zamiast zamieszczając strony do serwera i wywoływanie zdarzeń.  
  
 Gdy węzeł jest w trybie wyboru, użyj <xref:System.Web.UI.WebControls.TreeNode.SelectAction%2A> właściwości w celu określenia, które zdarzenie lub zdarzenia wywoływane po wybraniu węzła. W poniższej tabeli wymieniono dostępne opcje.  
  
|Wybór działania|Opis|  
|----------------------|-----------------|  
|`TreeNodeSelectAction.Expand`|Przełącza węzeł między rozwinięty i zwinięty. Zgłasza <xref:System.Web.UI.WebControls.TreeView.TreeNodeExpanded> zdarzenia lub <xref:System.Web.UI.WebControls.TreeView.TreeNodeCollapsed> zdarzeń zależnie od potrzeb.|  
|`TreeNodeSelectAction.None`|Zgłasza brak zdarzeń po wybraniu węzła.|  
|`TreeNodeSelectAction.Select`|Zgłasza <xref:System.Web.UI.WebControls.TreeView.SelectedNodeChanged> zdarzeń po wybraniu węzła.|  
|`TreeNodeSelectAction.SelectExpand`|Zgłasza zarówno <xref:System.Web.UI.WebControls.TreeView.SelectedNodeChanged> i <xref:System.Web.UI.WebControls.TreeView.TreeNodeExpanded> zdarzeń po wybraniu węzła. Węzły są tylko rozwinięte, nigdy nie jest zwinięty.|  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.TreeView.HoverNodeStyle%2A> Właściwości nie są odtwarzane dla węzła z jego <xref:System.Web.UI.WebControls.TreeNode.SelectAction%2A> ustawioną właściwość `TreeNodeSelectAction.None`.  
  
 Wartość tej właściwości jest przechowywany w stanie widoku.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.WebControls.TreeNode.SelectAction%2A> właściwości w celu określenia, które zdarzenie jest wywoływane, gdy węzeł zostanie kliknięty.  
  
 [!code-aspx-csharp[TreeViewPopulateNodesFromClient#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeViewPopulateNodesFromClient/CS/treeviewpopulatenodesfromclientcs.aspx#1)]
 [!code-aspx-vb[TreeViewPopulateNodesFromClient#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeViewPopulateNodesFromClient/VB/treeviewpopulatenodesfromclientvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNodeSelectAction" />
        <altmember cref="E:System.Web.UI.WebControls.TreeView.SelectedNodeChanged" />
        <altmember cref="E:System.Web.UI.WebControls.TreeView.TreeNodeExpanded" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.NavigateUrl" />
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public bool Selected { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Selected" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.Selected" />
      <MemberSignature Language="VB.NET" Value="Public Property Selected As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Selected { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy węzeł jest zaznaczone.</summary>
        <value>
          <see langword="true" /> Jeśli wybrano węzeł; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.TreeNode.Selected%2A> właściwości, aby określić lub określić, czy węzeł jest zaznaczone.  
  
> [!NOTE]
>  Mimo że właściwość może służyć do określenia, czy węzeł jest zaznaczone, jest bardziej popularne, aby użyć <xref:System.Web.UI.WebControls.TreeView.SelectedNode%2A> właściwości.  
  
 Można wybrać tylko jeden węzeł w danym momencie <xref:System.Web.UI.WebControls.TreeView> sterować przy użyciu tej właściwości.  
  
> [!NOTE]
>  Alternatywnie, można wybrać węzła przy użyciu <xref:System.Web.UI.WebControls.TreeNode.Select%2A> metody.  
  
 Wartość tej właściwości jest przechowywany w stanie widoku.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.WebControls.TreeNode.Selected%2A> właściwości, aby wybrać węzeł w <xref:System.Web.UI.WebControls.TreeView> formantu.  
  
 [!code-aspx-csharp[TreeNodeSelected2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeSelected2/CS/treenodeselected2cs.aspx#1)]
 [!code-aspx-vb[TreeNodeSelected2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeSelected2/VB/treenodeselected2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.Select" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.SelectedNode" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.ShowCheckBoxes" />
      </Docs>
    </Member>
    <Member MemberName="ShowCheckBox">
      <MemberSignature Language="C#" Value="public Nullable&lt;bool&gt; ShowCheckBox { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;bool&gt; ShowCheckBox" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.ShowCheckBox" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowCheckBox As Nullable(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;bool&gt; ShowCheckBox { Nullable&lt;bool&gt; get(); void set(Nullable&lt;bool&gt; value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Nullable`1&lt;System.Boolean&gt;), "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy pole wyboru jest wyświetlany obok węzła.</summary>
        <value>
          <see langword="true" /> Aby wyświetlić pole wyboru. w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.TreeView> Sterowanie umożliwia wyświetlanie pole wyboru obok obrazu węzła. Użyj <xref:System.Web.UI.WebControls.TreeNode.ShowCheckBox%2A> właściwości, aby pokazać lub ukryć pole wyboru dla bieżącego węzła.  
  
 Mimo że <xref:System.Web.UI.WebControls.TreeNode.ShowCheckBox%2A> właściwość może być używana do wyświetlania pola wyboru, częściej do użycia są <xref:System.Web.UI.WebControls.TreeView.ShowCheckBoxes%2A?displayProperty=nameWithType> właściwość <xref:System.Web.UI.WebControls.TreeView> formantu. <xref:System.Web.UI.WebControls.TreeView.ShowCheckBoxes%2A?displayProperty=nameWithType> Właściwości, jednak wpływa na każdy typ węzła określoną przez właściwość; w związku z tym <xref:System.Web.UI.WebControls.TreeNode.ShowCheckBox%2A?displayProperty=nameWithType> jest często używana do zastąpienia tego ustawienia dla oddzielnego węzła.  
  
 Ponieważ <xref:System.Web.UI.WebControls.TreeView.ShowCheckBoxes%2A?displayProperty=nameWithType> poniższy fragment kodu C# powoduje błąd kompilacji, właściwość jest właściwością trzy stanowy:  
  
```  
protected void TreeView1_SelectedNodeChanged(object sender, EventArgs e)  
{  
if (TreeView1.Nodes[0].Expanded)  
{  
// some work here   
}  
}  
```  
  
 Gdy VB.Net niejawnie rzutuje `Boolean` do wartości `NullableBoolean`, C# nie obsługuje. W związku z tym jest najlepszym rozwiązaniem jest jawnie Sprawdź stan właściwości. Na przykład następujący przykładowy kod w języku Visual Basic i C# jawnie testowania wartości <xref:System.Web.UI.WebControls.TreeNode.Expanded%2A> właściwości.  
  
 Poniższy przykład kodu języka Visual Basic jawnie testów wartość <xref:System.Web.UI.WebControls.TreeNode.Expanded%2A> właściwości. W tym przykładzie testów, jeśli <xref:System.Web.UI.WebControls.TreeNode.Expanded%2A> właściwość jest ustawiona na `True`; w związku z tym `Nothing` i `False` przechodzić `If` instrukcji.  
  
```  
If TreeView1.Nodes(0).Expanded = True Then 'some work hereEnd IF  
```  
  
 W tym przykładzie kodu C# jawnie testów wartość <xref:System.Web.UI.WebControls.TreeNode.Expanded%2A> właściwości. W tym przykładzie testów, jeśli <xref:System.Web.UI.WebControls.TreeNode.Expanded%2A> właściwość jest ustawiona na `True`; w związku z tym `Null` i `False` przechodzić `If` instrukcji.  
  
```  
if( TreeView1.Nodes[0].Expanded == true ) { //some work here}  
```  
  
 Wartość tej właściwości jest przechowywany w stanie widoku.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.WebControls.TreeNode.ShowCheckBox%2A> właściwości programowo pokazać lub ukryć pole wyboru dla węzła w <xref:System.Web.UI.WebControls.TreeView> formantu. W tym przykładzie działał prawidłowo należy skopiować przykładowe dane XML poniżej w pliku o nazwie Book.xml.  
  
 [!code-aspx-csharp[TreeNodeShowCheckBox#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeShowCheckBox/CS/treenodeshowcheckboxcs.aspx#1)]
 [!code-aspx-vb[TreeNodeShowCheckBox#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeShowCheckBox/VB/treenodeshowcheckboxvb.aspx#1)]  
  
 Następujący kod jest przykładowe dane XML w poprzednim przykładzie.  
  
```  
<Book Title="Book Title">  
    <Chapter Heading="Chapter 1">  
        <Section Heading="Section 1">  
        </Section>  
        <Section Heading="Section 2">  
        </Section>  
    </Chapter>  
    <Chapter Heading="Chapter 2">  
        <Section Heading="Section 1">  
        </Section>  
    </Chapter>  
</Book>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.ShowCheckBoxes" />
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ICloneable.Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.System#ICloneable#Clone" />
      <MemberSignature Language="VB.NET" Value="Function Clone () As Object Implements ICloneable.Clone" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.ICloneable.Clone() = ICloneable::Clone;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy kopię <see cref="T:System.Web.UI.WebControls.TreeNode" /> obiektu.</summary>
        <returns>
          <see cref="T:System.Object" /> Reprezentujący kopię <see cref="T:System.Web.UI.WebControls.TreeNode" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.TreeNode.System%23ICloneable%23Clone%2A> Metoda jest używana przez <xref:System.Web.UI.WebControls.TreeNode> klasy do skopiowania siebie samego.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ICloneable.Clone" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.IsTrackingViewState">
      <MemberSignature Language="C#" Value="bool System.Web.UI.IStateManager.IsTrackingViewState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Web.UI.IStateManager.IsTrackingViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.System#Web#UI#IStateManager#IsTrackingViewState" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsTrackingViewState As Boolean Implements IStateManager.IsTrackingViewState" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Web.UI.IStateManager.IsTrackingViewState { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IStateManager.IsTrackingViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Opis tego elementu członkowskiego, zobacz <see cref="P:System.Web.UI.IStateManager.IsTrackingViewState" />.</summary>
        <value>Wartość, która wskazuje, czy węzeł jest zapisywanie zmian stanu widoku.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Web.UI.WebControls.TreeNode> wystąpienia jest rzutowane na <xref:System.Web.UI.IStateManager> interfejsu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IStateManager" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.LoadViewState">
      <MemberSignature Language="C#" Value="void IStateManager.LoadViewState (object state);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IStateManager.LoadViewState(object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.System#Web#UI#IStateManager#LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub LoadViewState (state As Object) Implements IStateManager.LoadViewState" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IStateManager.LoadViewState(System::Object ^ state) = System::Web::UI::IStateManager::LoadViewState;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.LoadViewState(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="state">A <see cref="T:System.Object" /> zawierający wartości stanu zapisanego widoku.</param>
        <summary>Ładunki węzła wcześniej zapisany stan widoku.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.StateBag" />
        <altmember cref="T:System.Web.UI.StateItem" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.SaveViewState">
      <MemberSignature Language="C#" Value="object IStateManager.SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Web.UI.IStateManager.SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.System#Web#UI#IStateManager#SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Function SaveViewState () As Object Implements IStateManager.SaveViewState" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.Web.UI.IStateManager.SaveViewState() = System::Web::UI::IStateManager::SaveViewState;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.SaveViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje zmiany stanu widoku <see cref="T:System.Object" />.</summary>
        <returns>
          <see cref="T:System.Object" /> Zawierający zmian stanu widoku.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.StateBag" />
        <altmember cref="T:System.Web.UI.StateItem" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.TrackViewState">
      <MemberSignature Language="C#" Value="void IStateManager.TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IStateManager.TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.System#Web#UI#IStateManager#TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Sub TrackViewState () Implements IStateManager.TrackViewState" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IStateManager.TrackViewState() = System::Web::UI::IStateManager::TrackViewState;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.TrackViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Powoduje, że <see cref="T:System.Web.UI.WebControls.TreeNode" /> obiektu do śledzenia zmian stanu widoku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po wywołaniu tej metody w formancie serwera <xref:System.Web.UI.Control.IsTrackingViewState%2A> zwraca właściwość `true`.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.StateBag" />
        <altmember cref="T:System.Web.UI.StateItem" />
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="public string Target { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Target" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.Target" />
      <MemberSignature Language="VB.NET" Value="Public Property Target As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Target { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia docelowego okna lub ramki, w którym można wyświetlić zawartości strony sieci Web skojarzony z węzłem.</summary>
        <value>Docelowego okna lub ramki, w której można wyświetlić zawartości połączonej strony sieci Web. Wartości muszą zaczynać się literą, w zakresie A do Z, które są (bez uwzględniania wielkości liter), z wyjątkiem niektórych wartości specjalne, które zaczynają się od podkreślenia, jak pokazano w poniższej tabeli.  
  
 <list type="table"><listheader><term> Wartość docelowa  
  
 </term><description> Opis elementu  
  
 </description></listheader><item><term><see langword="_blank" /></term><description> Renderuje zawartość w nowym oknie bez ramek.  
  
 </description></item><item><term><see langword="_parent" /></term><description> Renderuje zawartość w obiekcie nadrzędnym natychmiastowego ramek.  
  
 </description></item><item><term><see langword="_search" /></term><description> Renderuje zawartość w okienku wyszukiwania.  
  
 </description></item><item><term><see langword="_self" /></term><description> Renderuje zawartość w ramce z fokusem.  
  
 </description></item><item><term><see langword="_top" /></term><description> Renderuje zawartość w oknie pełny bez ramek.  
  
 </description></item></list><block subset="none" type="note"><para>  
 Zajrzyj do dokumentacji przeglądarki, aby określić, czy <see langword="_search" /> wartość jest obsługiwana. Na przykład program Microsoft Internet Explorer w wersji 5.0 i nowszej obsługują <see langword="_search" /> wartość docelowa.  
  
</para></block>  
  
 Wartość domyślna to ciąg pusty (""), który odświeża okna lub ramki z fokusem.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.TreeNode.Target%2A> właściwości w celu określenia okna lub ramki, w której można wyświetlić zawartość sieci Web powiązany węzeł po kliknięciu tego węzła.  
  
> [!NOTE]
>  Ta właściwość zastępuje ustawienie <xref:System.Web.UI.WebControls.TreeView.Target%2A> właściwość <xref:System.Web.UI.WebControls.TreeView> formantu.  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.TreeNode.Target%2A> Właściwości renderuje jako `target` atrybutu. `target` Atrybutu `anchor` elementów nie jest dozwolona w definicji typu dokumentu XHTML 1.1. Nie ustawiaj <xref:System.Web.UI.WebControls.TreeNode.Target%2A> właściwości Jeśli przetworzonych wyników dla <xref:System.Web.UI.WebControls.TreeNode> obiekt musi być XHTML 1.1 zgodne. Aby uzyskać więcej informacji, zobacz [standardów XHTML w Visual Studio i ASP.NET](http://msdn.microsoft.com/library/1b78d416-66bb-43a5-ac77-c703aab55b97).  
>   
>  Podczas tworzenia stron sieci Web z ułatwieniami dostępu, zdecydowanie zaleca się należy unikać <xref:System.Web.UI.WebControls.TreeNode.Target%2A> właściwości pod kątem inne okno. Aby uzyskać więcej informacji, zobacz [NIB: dostępność ASP.NET](http://msdn.microsoft.com/library/9b5f3e05-e88d-4248-a5f4-9e64850fa0ae).  
  
 Wartość tej właściwości jest przechowywany w stanie widoku.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak skonfigurować ramki w następnym przykładzie.  
  
 [!code-aspx-csharp[TreeViewFrameSet#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeViewFrameSet/CS/framecs.aspx#1)]
 [!code-aspx-vb[TreeViewFrameSet#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeViewFrameSet/VB/framevb.aspx#1)]  
  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.WebControls.TreeNode.Target%2A> właściwości w celu określenia ramki, w której do wyświetlania połączonej zawartości. W tym przykładzie jest używana w zestawie ramek poprzedni przykład do wyświetlania spisu treści.  
  
 [!code-aspx-csharp[TreeViewFrameExample#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeViewFrameExample/CS/treeviewframecs.aspx#1)]
 [!code-aspx-vb[TreeViewFrameExample#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeViewFrameExample/VB/treeviewframevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.Target" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.NavigateUrl" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.Text" />
      <MemberSignature Language="VB.NET" Value="Public Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia tekst wyświetlany w węźle w <see cref="T:System.Web.UI.WebControls.TreeView" /> formantu.</summary>
        <value>Tekst wyświetlany w węźle w <see cref="T:System.Web.UI.WebControls.TreeView" /> formantu. Wartością domyślną jest ciąg pusty ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.TreeNode.Text%2A> właściwości do określania tekst, który jest wyświetlany dla węzła w <xref:System.Web.UI.WebControls.TreeView> formantu.  
  
> [!NOTE]
>  Jeśli <xref:System.Web.UI.WebControls.TreeNode.Text%2A> właściwość zawiera `null`, `get` akcesor zwraca wartość <xref:System.Web.UI.WebControls.TreeNode.Value%2A> właściwości. Jeśli <xref:System.Web.UI.WebControls.TreeNode.Value%2A> właściwość, z kolei zawiera `null`, <xref:System.String.Empty> jest zwracany.  
  
 Wartość tej właściwości jest przechowywany w stanie widoku.  
  
 Wartość tej właściwości, gdy są ustawione, można zapisać automatycznie plik zasobów przy użyciu narzędzia Projektant. Aby uzyskać więcej informacji, zobacz <xref:System.ComponentModel.LocalizableAttribute> i [lokalizacja i globalizacja](http://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.WebControls.TreeNode.Text%2A> właściwości w celu określenia tekstu węzła.  
  
 [!code-aspx-csharp[TreeViewFrameExample#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeViewFrameExample/CS/treeviewframecs.aspx#1)]
 [!code-aspx-vb[TreeViewFrameExample#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeViewFrameExample/VB/treeviewframevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.Value" />
      </Docs>
    </Member>
    <Member MemberName="ToggleExpandState">
      <MemberSignature Language="C#" Value="public void ToggleExpandState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ToggleExpandState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.ToggleExpandState" />
      <MemberSignature Language="VB.NET" Value="Public Sub ToggleExpandState ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ToggleExpandState();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Przełącza między rozwinięte i zwinięte stan węzła.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.TreeNode.ToggleExpandState%2A> metodę przełącza między rozwinięte i zwinięte stanu dla węzła. Na przykład, jeśli węzeł jest zwinięte, wywoływania <xref:System.Web.UI.WebControls.TreeNode.ToggleExpandState%2A> metody rozwija węzeł i na odwrót.  
  
> [!NOTE]
>  Alternatywnie, można ustawić <xref:System.Web.UI.WebControls.TreeNode.Expanded%2A> właściwości bezpośrednio.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.WebControls.TreeNode.ToggleExpandState%2A> metodę do alternatywnego między rozwinięte i stan zwinięcia węzeł główny <xref:System.Web.UI.WebControls.TreeView> formantu.  
  
 [!code-aspx-csharp[TreeNodeToggleExpandState#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeToggleExpandState/CS/treenodetoggleexpandstatecs.aspx#1)]
 [!code-aspx-vb[TreeNodeToggleExpandState#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeToggleExpandState/VB/treenodetoggleexpandstatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.Expanded" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.Collapse" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.CollapseAll" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.Expand" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.ExpandAll" />
      </Docs>
    </Member>
    <Member MemberName="ToolTip">
      <MemberSignature Language="C#" Value="public string ToolTip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ToolTip" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.ToolTip" />
      <MemberSignature Language="VB.NET" Value="Public Property ToolTip As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ToolTip { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia tekst etykietki narzędzia dla węzła.</summary>
        <value>Tekst etykietki narzędzia dla węzła. Wartością domyślną jest ciąg pusty ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.WebControls.TreeNode.ToolTip%2A> właściwości w celu określenia tekst etykietki narzędzia dla węzła. Tekst etykietki narzędzia jest wyświetlane, gdy wskaźnik myszy znajduje się nad węzłem.  
  
 Wartość tej właściwości, gdy są ustawione, można zapisać automatycznie plik zasobów przy użyciu narzędzia Projektant. Aby uzyskać więcej informacji, zobacz <xref:System.ComponentModel.LocalizableAttribute> i [lokalizacja i globalizacja](http://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.WebControls.TreeNode.ToolTip%2A> właściwości, aby zapewnić etykietki narzędzi dla węzłów w <xref:System.Web.UI.WebControls.TreeView> formantu.  
  
 [!code-aspx-csharp[TreeNodeToolTip#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeToolTip/CS/treenodetooltipcs.aspx#1)]
 [!code-aspx-vb[TreeNodeToolTip#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeToolTip/VB/treenodetooltipvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.ImageToolTip" />
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Sub TrackViewState ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void TrackViewState();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.TrackViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Oznacza punkt początkowy, od której ma rozpocząć śledzenie i Zapisywanie stanu widoku zmian do węzła.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.IStateManager.TrackViewState" />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.Value" />
      <MemberSignature Language="VB.NET" Value="Public Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Value { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartości niewyświetlanej używany do przechowywania wszelkich dodatkowych danych dotyczących tego węzła, takich jak dane używane na potrzeby obsługi zdarzenia odświeżania strony.</summary>
        <value>Dodatkowe dane dotyczące węzła, który nie jest wyświetlany. Wartością domyślną jest ciąg pusty ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.TreeNode.Value%2A> Właściwość jest używana do uzupełnienia <xref:System.Web.UI.WebControls.TreeNode.Text%2A> właściwości przechowując wszelkie dodatkowe dane skojarzone z węzłem. Ta wartość nie jest wyświetlana w formancie i jest najczęściej używany do przechowywania danych obsługi zdarzenia odświeżania strony.  
  
> [!NOTE]
>  Jeśli <xref:System.Web.UI.WebControls.TreeNode.Value%2A> właściwość zawiera `null`, `get` akcesor zwraca wartość <xref:System.Web.UI.WebControls.TreeNode.Text%2A> właściwości. Jeśli <xref:System.Web.UI.WebControls.TreeNode.Text%2A> właściwość, z kolei zawiera `null`, <xref:System.String.Empty> jest zwracany.  
  
> [!NOTE]
>  Węzły na tym samym poziomie musi mieć unikatową wartość <xref:System.Web.UI.WebControls.TreeNode.Value%2A> właściwości; <xref:System.Web.UI.WebControls.TreeView> formantu nie można rozróżnić różnych węzłów na tym samym poziomie, które mają taką samą wartość. W tym scenariuszu, gdy użytkownik kliknie węzeł, który ma zduplikowaną wartość węzła który znajduje się w <xref:System.Web.UI.WebControls.TreeView> formant jest zaznaczony.  
  
 Wartość tej właściwości jest przechowywany w stanie widoku.  
  
 Wartość tej właściwości, gdy są ustawione, można zapisać automatycznie plik zasobów przy użyciu narzędzia Projektant. Aby uzyskać więcej informacji, zobacz <xref:System.ComponentModel.LocalizableAttribute> i [lokalizacja i globalizacja](http://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.WebControls.TreeNode.Value%2A> właściwości do przechowywania pole klucza.  
  
 [!code-aspx-csharp[TreeViewPopulateNodesFromClient#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeViewPopulateNodesFromClient/CS/treeviewpopulatenodesfromclientcs.aspx#1)]
 [!code-aspx-vb[TreeViewPopulateNodesFromClient#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeViewPopulateNodesFromClient/VB/treeviewpopulatenodesfromclientvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.Text" />
      </Docs>
    </Member>
    <Member MemberName="ValuePath">
      <MemberSignature Language="C#" Value="public string ValuePath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ValuePath" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.ValuePath" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValuePath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ValuePath { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera ścieżkę od węzła głównego do bieżącego węzła.</summary>
        <value>Listę oddzielonych ogranicznik, w węźle wartości, które tworzą ścieżkę od węzła głównego do bieżącego węzła.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.TreeNode.ValuePath%2A> Właściwość zawiera listę rozdzielonych ogranicznikami węzeł wartości, które tworzą ścieżkę od węzła głównego do bieżącego węzła. Użyj <xref:System.Web.UI.WebControls.TreeView.PathSeparator%2A> właściwości w celu określenia znak ogranicznika używany do rozdzielania wartości węzła. Ta wartość jest zazwyczaj używana podczas analizowania listy wartości pojedynczych lub jako argument do <xref:System.Web.UI.WebControls.TreeView.FindNode%2A> metody <xref:System.Web.UI.WebControls.TreeView> klasy.  
  
 W zależności od wartości wyświetlanej w <xref:System.Web.UI.WebControls.TreeView> znak ogranicznika kontroli, może być konieczne zmiany, aby uniknąć konfliktów. Na przykład jeśli ustawisz znak ogranicznika przecinka wyświetlanych wartość nie powinna zawierać żadnych przecinki; w przeciwnym razie nie można prawidłowo przeanalizować <xref:System.Web.UI.WebControls.TreeNode.ValuePath%2A> właściwości.  
  
> [!NOTE]
>  Węzły na tym samym poziomie musi mieć unikatową wartość <xref:System.Web.UI.WebControls.TreeNode.Value%2A> właściwości; <xref:System.Web.UI.WebControls.TreeView> formantu nie można rozróżnić różnych węzłów na tym samym poziomie, które mają taką samą wartość. W tym scenariuszu, gdy użytkownik kliknie węzeł, który ma zduplikowaną wartość węzła który znajduje się w <xref:System.Web.UI.WebControls.TreeView> formant jest zaznaczony.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak można przeanalizować <xref:System.Web.UI.WebControls.TreeNode.ValuePath%2A> właściwości.  
  
 [!code-aspx-csharp[TreeViewPathSeparator2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeViewPathSeparator2/CS/treeviewpathseparatorcs.aspx#1)]
 [!code-aspx-vb[TreeViewPathSeparator2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeViewPathSeparator2/VB/treeviewpathseparatorvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.PathSeparator" />
        <altmember cref="M:System.Web.UI.WebControls.TreeView.FindNode(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>