<Type Name="WebServiceHost" FullName="System.ServiceModel.Web.WebServiceHost">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4e5b223bfd9f46abcc241854c338d8a7c11eb173" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69258300" /></Metadata><TypeSignature Language="C#" Value="public class WebServiceHost : System.ServiceModel.ServiceHost" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebServiceHost extends System.ServiceModel.ServiceHost" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Web.WebServiceHost" />
  <TypeSignature Language="VB.NET" Value="Public Class WebServiceHost&#xA;Inherits ServiceHost" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebServiceHost : System::ServiceModel::ServiceHost" />
  <TypeSignature Language="F#" Value="type WebServiceHost = class&#xA;    inherit ServiceHost" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Web</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ServiceModel.ServiceHost</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Klasa <see cref="T:System.ServiceModel.ServiceHost" /> pochodna, która odnosi się do modelu programowania REST w Windows Communication Foundation (WCF).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.ServiceModel.Web.WebServiceHost> w opisie usługi nie znaleziono żadnych punktów końcowych, program automatycznie tworzy domyślny punkt końcowy na adresie podstawowym usługi dla adresów http i https. Punkt końcowy nie jest tworzony automatycznie, jeśli użytkownik skonfigurował punkt końcowy jawnie pod adresem podstawowym. <xref:System.ServiceModel.Web.WebServiceHost>Program automatycznie konfiguruje powiązanie punktu końcowego do pracy ze skojarzonymi ustawieniami zabezpieczeń Internet Information Services (IIS), jeśli są używane w bezpiecznym katalogu wirtualnym.  
  
 Podczas tworzenia domyślnego punktu końcowego http program wyłącza <xref:System.ServiceModel.Web.WebServiceHost> również stronę pomocy http i funkcję pobierania Web Services Description Language (WSDL), dzięki czemu punkt końcowy metadanych nie zakłóca domyślnego punktu końcowego http.  
  
 Ponadto <xref:System.ServiceModel.Web.WebServiceHost> Klasa <xref:System.ServiceModel.Configuration.WebMessageEncodingElement>dodaje do wszystkich punktów końcowych, które nie mają jeszcze zachowania i które mają. <xref:System.ServiceModel.Description.WebHttpBehavior> Jeśli wszystkie operacje w usłudze mają puste treści żądania HTTP lub zajmuje się treścią żądania HTTP jako strumień, <xref:System.ServiceModel.Web.WebServiceHost> automatycznie skonfiguruje odpowiednie mapowanie typu zawartości dla powiązania.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, <xref:System.ServiceModel.Web.WebServiceHost> jak używać klasy do hostowania usługi, która korzysta z modelu programowania REST WCF.  
  
 [!code-csharp[WebServiceHost#0](~/samples/snippets/csharp/VS_Snippets_CFX/webservicehost/cs/program.cs#0)]
 [!code-vb[WebServiceHost#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/webservicehost/vb/program.vb#0)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.ServiceModel.Web.WebServiceHost" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebServiceHost ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Web.WebServiceHost.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebServiceHost();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.ServiceModel.Web.WebServiceHost" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebServiceHost (object singletonInstance, params Uri[] baseAddresses);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object singletonInstance, class System.Uri[] baseAddresses) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Web.WebServiceHost.#ctor(System.Object,System.Uri[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (singletonInstance As Object, ParamArray baseAddresses As Uri())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebServiceHost(System::Object ^ singletonInstance, ... cli::array &lt;Uri ^&gt; ^ baseAddresses);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.Web.WebServiceHost : obj * Uri[] -&gt; System.ServiceModel.Web.WebServiceHost" Usage="new System.ServiceModel.Web.WebServiceHost (singletonInstance, baseAddresses)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="singletonInstance" Type="System.Object" />
        <Parameter Name="baseAddresses" Type="System.Uri[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.5">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="singletonInstance">Wystąpienie usługi, które ma być używane jako pojedyncze wystąpienie.</param>
        <param name="baseAddresses">Adres podstawowy usługi.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.ServiceModel.Web.WebServiceHost" /> klasy z określonym wystąpieniem pojedynczego serwera i adresem podstawowym.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `baseAddresses` Parametr może składać się z co najmniej jednego adresu podstawowego.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak wywołać ten Konstruktor.  
  
 [!code-csharp[WebServiceHost#1](~/samples/snippets/csharp/VS_Snippets_CFX/webservicehost/cs/snippets.cs#1)]
 [!code-vb[WebServiceHost#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/webservicehost/vb/snippets.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebServiceHost (Type serviceType, params Uri[] baseAddresses);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type serviceType, class System.Uri[] baseAddresses) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Web.WebServiceHost.#ctor(System.Type,System.Uri[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (serviceType As Type, ParamArray baseAddresses As Uri())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebServiceHost(Type ^ serviceType, ... cli::array &lt;Uri ^&gt; ^ baseAddresses);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.Web.WebServiceHost : Type * Uri[] -&gt; System.ServiceModel.Web.WebServiceHost" Usage="new System.ServiceModel.Web.WebServiceHost (serviceType, baseAddresses)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="baseAddresses" Type="System.Uri[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.5">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="serviceType">Typ usługi.</param>
        <param name="baseAddresses">Adres podstawowy usługi.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.ServiceModel.Web.WebServiceHost" /> klasy z określonym typem usługi i adresem podstawowym.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `baseAddresses` Parametr może składać się z co najmniej jednego adresu podstawowego.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak wywołać ten Konstruktor.  
  
 [!code-csharp[WebServiceHost#2](~/samples/snippets/csharp/VS_Snippets_CFX/webservicehost/cs/snippets.cs#2)]
 [!code-vb[WebServiceHost#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/webservicehost/vb/snippets.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnOpening">
      <MemberSignature Language="C#" Value="protected override void OnOpening ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnOpening() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Web.WebServiceHost.OnOpening" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnOpening ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnOpening();" />
      <MemberSignature Language="F#" Value="override this.OnOpening : unit -&gt; unit" Usage="webServiceHost.OnOpening " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wywoływana, <see cref="T:System.ServiceModel.Web.WebServiceHost" /> gdy zostanie otwarte wystąpienie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli ta metoda jest wywoływana, występuje następująca wartość:  
  
1.  Jeśli <xref:System.ServiceModel.Web.WebServiceHost> w opisie usługi nie znaleziono żadnych punktów końcowych, program tworzy domyślny punkt końcowy na adresie podstawowym usługi. <xref:System.ServiceModel.Web.WebServiceHost>automatycznie wyłącza stronę pomocy HTTP i funkcję pobierania WSDL, tak aby punkt końcowy metadanych nie zakłóca domyślnego punktu końcowego HTTP.  
  
2.  <xref:System.ServiceModel.Web.WebServiceHost>sprawdza wszystkie punkty końcowe, w <xref:System.ServiceModel.WebHttpBinding> których jest używany program, aby sprawdzić <xref:System.ServiceModel.Description.WebHttpBehavior>, czy są one wymagane. Jeśli nie istnieje, <xref:System.ServiceModel.Web.WebServiceHost> program <xref:System.ServiceModel.Description.WebHttpBehavior> dodaje do punktu końcowego.  
  
3.  <xref:System.ServiceModel.Web.WebServiceHost>umożliwia skonfigurowanie powiązania punktu końcowego do pracy ze skojarzonymi ustawieniami zabezpieczeń usług IIS, gdy jest używany w bezpiecznym katalogu wirtualnym.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
