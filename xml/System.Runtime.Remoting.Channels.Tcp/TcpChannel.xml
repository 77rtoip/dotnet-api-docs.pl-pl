<Type Name="TcpChannel" FullName="System.Runtime.Remoting.Channels.Tcp.TcpChannel">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="38d2a9967752dd1183d1c92a5cdc5f8a68105b7a" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37468030" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TcpChannel : System.Runtime.Remoting.Channels.IChannel, System.Runtime.Remoting.Channels.IChannelReceiver, System.Runtime.Remoting.Channels.IChannelSender, System.Runtime.Remoting.Channels.ISecurableChannel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TcpChannel extends System.Object implements class System.Runtime.Remoting.Channels.IChannel, class System.Runtime.Remoting.Channels.IChannelReceiver, class System.Runtime.Remoting.Channels.IChannelSender, class System.Runtime.Remoting.Channels.ISecurableChannel" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Remoting.Channels.Tcp.TcpChannel" />
  <TypeSignature Language="VB.NET" Value="Public Class TcpChannel&#xA;Implements IChannel, IChannelReceiver, IChannelSender, ISecurableChannel" />
  <TypeSignature Language="C++ CLI" Value="public ref class TcpChannel : System::Runtime::Remoting::Channels::IChannel, System::Runtime::Remoting::Channels::IChannelReceiver, System::Runtime::Remoting::Channels::IChannelSender, System::Runtime::Remoting::Channels::ISecurableChannel" />
  <TypeSignature Language="F#" Value="type TcpChannel = class&#xA;    interface IChannelReceiver&#xA;    interface IChannel&#xA;    interface IChannelSender&#xA;    interface ISecurableChannel" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Remoting</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Remoting.Channels.IChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Remoting.Channels.IChannelReceiver</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Remoting.Channels.IChannelSender</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Remoting.Channels.ISecurableChannel</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Dostarcza implementację kanału, który korzysta z protokołu TCP do przesyłania komunikatów.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kanały transportu wiadomości w granicach komunikacji zdalnej (na przykład między komputerami w domenach aplikacji). <xref:System.Runtime.Remoting.Channels.Tcp.TcpChannel> Klasa jest klasą wygodne łączenie funkcji <xref:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel> klasy i <xref:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel> klasy.  
  
 Kanały są używane przez infrastrukturę komunikacji zdalnej programu .NET Framework w celu transportu wywołań zdalnych. Gdy klient wysyła wywołania do zdalnego obiektu, wywołanie jest serializowana na komunikat, który jest wysyłany przez kanału klienta i odbierane przez kanał firmowy serwer. Jest następnie przeprowadzona i przetwarzane. Wszystkie wartości zwracane są przekazywane przez kanał serwera i odbierane przez kanał klienta.  
  
 Aby wykonać dodatkowe przetwarzanie komunikatów, można określić implementacje <xref:System.Runtime.Remoting.Channels.IClientChannelSinkProvider> i <xref:System.Runtime.Remoting.Channels.IServerChannelSinkProvider> za pośrednictwem której wszystkie komunikaty przetwarzane przez <xref:System.Runtime.Remoting.Channels.Tcp.TcpChannel> są przekazywane.  
  
 A <xref:System.Runtime.Remoting.Channels.Tcp.TcpChannel> obiektu skojarzonej właściwości konfiguracji, które mogą być ustawione na czas wykonywania, albo w pliku konfiguracji (przez wywołanie statycznego <xref:System.Runtime.Remoting.RemotingConfiguration.Configure%2A?displayProperty=nameWithType> metoda) lub programowo (przez przekazanie <xref:System.Collections.IDictionary> kolekcję, aby <xref:System.Runtime.Remoting.Channels.Tcp.TcpChannel.%23ctor%2A> Konstruktor). Aby uzyskać więcej informacji na temat właściwości konfiguracji kanału, zobacz [kanału i właściwości konfiguracji programu formatującego](http://msdn.microsoft.com/library/226ecf74-ebbd-4ea0-a701-dcf4441deefe).  
  
> [!NOTE]
>  Jeśli na komputerze serwera jest uruchomiona Windows 95/98/Me, serwer <xref:System.Runtime.Remoting.Channels.Tcp.TcpChannel> nie może być określone jako bezpieczne.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Runtime.Remoting.Channels.Tcp.TcpChannel> do skonfigurowania serwera usług zdalnych i jego klienta. Przykład zawiera trzy części, serwera, klienta i używane przez serwer i klient obiektu zdalnego.  
  
 W poniższym przykładzie kodu przedstawiono serwer:  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Tcp.TcpChannel#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Tcp.TcpChannel/CPP/server.cpp#1)]
 [!code-csharp[System.Runtime.Remoting.Channels.Tcp.TcpChannel#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Tcp.TcpChannel/CS/server.cs#1)]  
  
 Poniższy przykład kodu pokazuje klienta dla tego serwera:  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Tcp.TcpChannel#10](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Tcp.TcpChannel/CPP/client.cpp#10)]
 [!code-csharp[System.Runtime.Remoting.Channels.Tcp.TcpChannel#10](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Tcp.TcpChannel/CS/client.cs#10)]  
  
 Poniższy przykład kodu pokazuje obiektu zdalnego używany przez serwer i klienta:  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Tcp.TcpChannel#20](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Tcp.TcpChannel/CPP/common.cpp#20)]
 [!code-csharp[System.Runtime.Remoting.Channels.Tcp.TcpChannel#20](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Tcp.TcpChannel/CS/common.cs#20)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpChannel" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpChannel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Tcp.TcpChannel.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpChannel();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpChannel" /> klasy, aktywacja kanału klienta, a nie kanału serwera.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Konstruktor domyślny inicjuje wszystkie pola do wartości domyślnych. Jeśli używany jest domyślny konstruktor, kanał działa tylko jako kanału klienta i nie będzie nasłuchiwać na żadnych portów.  
  
   
  
## Examples  
 W poniższym przykładzie kodu pokazano, jak można użyć tego konstruktora.  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Tcp.TcpChannel#11](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Tcp.TcpChannel/CPP/client.cpp#11)]
 [!code-csharp[System.Runtime.Remoting.Channels.Tcp.TcpChannel#11](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Tcp.TcpChannel/CS/client.cs#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpChannel (int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Tcp.TcpChannel.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpChannel(int port);" />
      <MemberSignature Language="F#" Value="new System.Runtime.Remoting.Channels.Tcp.TcpChannel : int -&gt; System.Runtime.Remoting.Channels.Tcp.TcpChannel" Usage="new System.Runtime.Remoting.Channels.Tcp.TcpChannel port" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="port">Port, na którym nasłuchuje serwer kanału.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpChannel" /> klasy z kanałem serwera, która nasłuchuje na określonym porcie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby zażądać, których remoting system wyboru otwartego portu w Twoim imieniu, należy określić port 0 (zero). Spowoduje to utworzenie <xref:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel> wystąpienia do nasłuchiwania żądań przy użyciu portu przypisywany dynamicznie. Jest to zazwyczaj wykonywane na komputerze klienckim, aby upewnić się, że <xref:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel> nasłuchuje metody wywołania zwrotnego.  
  
 Jeśli 0 jest przekazywana do konstruktora <xref:System.Runtime.Remoting.Channels.Tcp.TcpChannel> zostanie uruchomiony, by używał portu bezpłatna.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, przy użyciu tej metody. Aby zażądać dynamicznego przypisania dostępny port, należy ustawić `port` parametru na wartość zero.  
  
 [!code-cpp[RemotingConfiguration.ServerActivation#2](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation/CPP/server.cpp#2)]
 [!code-csharp[RemotingConfiguration.ServerActivation#2](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation/CS/server.cs#2)]
 [!code-vb[RemotingConfiguration.ServerActivation#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation/VB/server.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpChannel (System.Collections.IDictionary properties, System.Runtime.Remoting.Channels.IClientChannelSinkProvider clientSinkProvider, System.Runtime.Remoting.Channels.IServerChannelSinkProvider serverSinkProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IDictionary properties, class System.Runtime.Remoting.Channels.IClientChannelSinkProvider clientSinkProvider, class System.Runtime.Remoting.Channels.IServerChannelSinkProvider serverSinkProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Tcp.TcpChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IClientChannelSinkProvider,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (properties As IDictionary, clientSinkProvider As IClientChannelSinkProvider, serverSinkProvider As IServerChannelSinkProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpChannel(System::Collections::IDictionary ^ properties, System::Runtime::Remoting::Channels::IClientChannelSinkProvider ^ clientSinkProvider, System::Runtime::Remoting::Channels::IServerChannelSinkProvider ^ serverSinkProvider);" />
      <MemberSignature Language="F#" Value="new System.Runtime.Remoting.Channels.Tcp.TcpChannel : System.Collections.IDictionary * System.Runtime.Remoting.Channels.IClientChannelSinkProvider * System.Runtime.Remoting.Channels.IServerChannelSinkProvider -&gt; System.Runtime.Remoting.Channels.Tcp.TcpChannel" Usage="new System.Runtime.Remoting.Channels.Tcp.TcpChannel (properties, clientSinkProvider, serverSinkProvider)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.IDictionary" />
        <Parameter Name="clientSinkProvider" Type="System.Runtime.Remoting.Channels.IClientChannelSinkProvider" />
        <Parameter Name="serverSinkProvider" Type="System.Runtime.Remoting.Channels.IServerChannelSinkProvider" />
      </Parameters>
      <Docs>
        <param name="properties">A <see cref="T:System.Collections.IDictionary" /> kolekcji, która określa wartości dla właściwości konfiguracji ma być używany przez kanały klienta i serwera.</param>
        <param name="clientSinkProvider">
          <see cref="T:System.Runtime.Remoting.Channels.IClientChannelSinkProvider" /> Wdrożenia, który będzie używany przez kanału klienta.</param>
        <param name="serverSinkProvider">
          <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> Implementacji, który będzie używany przez kanał serwera.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpChannel" /> klasy przy użyciu określonej konfiguracji właściwości i ujścia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat właściwości konfiguracji kanału, zobacz [kanału i właściwości konfiguracji programu formatującego](http://msdn.microsoft.com/library/226ecf74-ebbd-4ea0-a701-dcf4441deefe).  
  
> [!NOTE]
>  Jeśli na komputerze serwera jest uruchomiona Windows 95/98/Me, serwer <xref:System.Runtime.Remoting.Channels.Tcp.TcpChannel> nie może być określone jako bezpieczne.  
  
 Ujścia kanału stanowią punkt wtyczki, który umożliwia dostęp do podstawowych komunikaty przepływają przez kanał, a także strumień używany przez mechanizm transportu do wysyłania komunikatów do obiektu zdalnego. Kanał ujść odpowiadają również za przesyłania wiadomości między klientem a serwerem. Kanał ujścia są połączone ze sobą w łańcuchu, a wszystkie kanału przepływ komunikatów przez tego łańcucha ujścia, zanim wiadomości na koniec jest serializowana, a transportowane. Jeśli nie jest wymagane funkcje ujścia, ustaw `clientSinkProvider` i `serverSinkProvider` parametry `null`.  
  
   
  
## Examples  
 W poniższym przykładzie kodu pokazano, jak można użyć tego konstruktora.  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Tcp.TcpChannel2#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Tcp.TcpChannel2/CPP/server.cpp#1)]
 [!code-csharp[System.Runtime.Remoting.Channels.Tcp.TcpChannel2#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Tcp.TcpChannel2/CS/server.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Właściwość podanego kanał został nieprawidłowo sformatowany.</exception>
      </Docs>
    </Member>
    <Member MemberName="ChannelData">
      <MemberSignature Language="C#" Value="public object ChannelData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ChannelData" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.Tcp.TcpChannel.ChannelData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ChannelData As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ChannelData { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ChannelData : obj" Usage="System.Runtime.Remoting.Channels.Tcp.TcpChannel.ChannelData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera dane specyficzne dla kanału.</summary>
        <value>A <see cref="T:System.Runtime.Remoting.Channels.ChannelDataStore" /> wystąpienia, które zawiera dane specyficzne dla kanału.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mimo że zwracane jako wystąpienie <xref:System.Object?displayProperty=nameWithType>, wartość tej właściwości może być rzutowany na wystąpienie <xref:System.Runtime.Remoting.Channels.ChannelDataStore> opisujące kanał, do którego <xref:System.Runtime.Remoting.Channels.Http.HttpServerChannel> obiektu nasłuchuje.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak używać tej właściwości.  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Tcp.TcpChannel#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Tcp.TcpChannel/CPP/server.cpp#5)]
 [!code-csharp[System.Runtime.Remoting.Channels.Tcp.TcpChannel#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Tcp.TcpChannel/CS/server.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChannelName">
      <MemberSignature Language="C#" Value="public string ChannelName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ChannelName" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.Tcp.TcpChannel.ChannelName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ChannelName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ChannelName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ChannelName : string" Usage="System.Runtime.Remoting.Channels.Tcp.TcpChannel.ChannelName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę bieżącego kanału.</summary>
        <value>Element <see cref="T:System.String" /> zawierający nazwę kanału.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każdy zarejestrowany kanał ma unikatową nazwę. Nazwa jest używana do pobrania określonego kanału podczas wywoływania <xref:System.Runtime.Remoting.Channels.ChannelServices.GetChannel%2A>. Aby ustawić <xref:System.Runtime.Remoting.Channels.Tcp.TcpChannel.ChannelName%2A> właściwość, przypisz wartość "name" indeksowana właściwość w słowniku, który został przekazany do <xref:System.Runtime.Remoting.Channels.Tcp.TcpChannel.%23ctor%28System.Collections.IDictionary%2CSystem.Runtime.Remoting.Channels.IClientChannelSinkProvider%2CSystem.Runtime.Remoting.Channels.IServerChannelSinkProvider%29> konstruktora.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak używać tej właściwości.  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Tcp.TcpChannel#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Tcp.TcpChannel/CPP/server.cpp#3)]
 [!code-csharp[System.Runtime.Remoting.Channels.Tcp.TcpChannel#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Tcp.TcpChannel/CS/server.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChannelPriority">
      <MemberSignature Language="C#" Value="public int ChannelPriority { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ChannelPriority" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.Tcp.TcpChannel.ChannelPriority" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ChannelPriority As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ChannelPriority { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ChannelPriority : int" Usage="System.Runtime.Remoting.Channels.Tcp.TcpChannel.ChannelPriority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera priorytet bieżącego kanału.</summary>
        <value>Liczba całkowita, która reprezentuje priorytetu przypisanego do kanału.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje, jak używać tej właściwości.  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Tcp.TcpChannel#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Tcp.TcpChannel/CPP/server.cpp#4)]
 [!code-csharp[System.Runtime.Remoting.Channels.Tcp.TcpChannel#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Tcp.TcpChannel/CS/server.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMessageSink">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.Messaging.IMessageSink CreateMessageSink (string url, object remoteChannelData, out string objectURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.Messaging.IMessageSink CreateMessageSink(string url, object remoteChannelData, [out] string&amp; objectURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Tcp.TcpChannel.CreateMessageSink(System.String,System.Object,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateMessageSink (url As String, remoteChannelData As Object, ByRef objectURI As String) As IMessageSink" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::Messaging::IMessageSink ^ CreateMessageSink(System::String ^ url, System::Object ^ remoteChannelData, [Runtime::InteropServices::Out] System::String ^ % objectURI);" />
      <MemberSignature Language="F#" Value="abstract member CreateMessageSink : string * obj *  -&gt; System.Runtime.Remoting.Messaging.IMessageSink&#xA;override this.CreateMessageSink : string * obj *  -&gt; System.Runtime.Remoting.Messaging.IMessageSink" Usage="tcpChannel.CreateMessageSink (url, remoteChannelData, objectURI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Messaging.IMessageSink</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="remoteChannelData" Type="System.Object" />
        <Parameter Name="objectURI" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="url">Adres URL, do której nowy obiekt sink powinien dostarczania wiadomości. Może być <see langword="null" />.</param>
        <param name="remoteChannelData">Obiekt danych kanału zdalnego hosta, do której nowy obiekt sink powinien dostarczania wiadomości. Może być <see langword="null" />.</param>
        <param name="objectURI">Po powrocie z tej metody zawiera identyfikator URI nowego ujścia kanał komunikatów dostarcza komunikaty do określonego adresu URL lub obiektu danych kanału. Ten parametr jest przekazywany niezainicjowany.</param>
        <summary>Zwraca obiekt sink komunikat kanału, który dostarcza komunikaty do określonego obiektu danych adresu URL lub kanał.</summary>
        <returns>Ujścia komunikat kanału, który dostarcza komunikaty do określonego obiektu danych adresu URL lub kanału.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.Remoting.Channels.Tcp.TcpChannel.CreateMessageSink%2A> Metoda zwraca obiekt sink komunikat kanału, który dostarcza komunikaty do albo określony adres URL lub kanał obiekt danych. Jeśli `uri` parametr jest `null`, `remoteChannelData` jest używany jako obiekt docelowy dla ujścia. Albo `url` lub `remoteChannelData` parametry mogą być `null`, ale nie oba jednocześnie.  
  
 Ujścia kanału stanowią punkt wtyczki, który umożliwia dostęp do podstawowych komunikaty przepływają przez kanał, a także strumień używany przez mechanizm transportu do wysyłania komunikatów do obiektu zdalnego. Kanał ujścia są połączone ze sobą w łańcuchu `ChannelSinkProviders` i wszystkich kanałów przepływ komunikatów przez tego łańcucha ujść przed wiadomości na koniec jest serializowana, a transportowane.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak użyć tej metody.  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Tcp.TcpChannel#12](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Tcp.TcpChannel/CPP/client.cpp#12)]
 [!code-csharp[System.Runtime.Remoting.Channels.Tcp.TcpChannel#12](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Tcp.TcpChannel/CS/client.cs#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUrlsForUri">
      <MemberSignature Language="C#" Value="public string[] GetUrlsForUri (string objectURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetUrlsForUri(string objectURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Tcp.TcpChannel.GetUrlsForUri(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUrlsForUri (objectURI As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::String ^&gt; ^ GetUrlsForUri(System::String ^ objectURI);" />
      <MemberSignature Language="F#" Value="abstract member GetUrlsForUri : string -&gt; string[]&#xA;override this.GetUrlsForUri : string -&gt; string[]" Usage="tcpChannel.GetUrlsForUri objectURI" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="objectURI">Identyfikator URI obiektu, dla którego adresy URL są wymagane.</param>
        <summary>Zwraca tablicę wszystkich adresów URL dla obiektu przy użyciu określonego identyfikatora URI w serwisie bieżącego <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpChannel" />.</summary>
        <returns>Tablicę adresów URL dla obiektu, przy użyciu określonego identyfikatora URI w serwisie bieżącego <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpChannel" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest używana przez <xref:System.Runtime.Remoting.Channels.ChannelServices.GetUrlsForObject%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak użyć tej metody.  
  
 [!code-cpp[TcpChannel.GetUrlsForUri#1](~/samples/snippets/cpp/VS_Snippets_Remoting/TcpChannel.GetUrlsForUri/CPP/class1.cpp#1)]
 [!code-csharp[TcpChannel.GetUrlsForUri#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpChannel.GetUrlsForUri/CS/class1.cs#1)]
 [!code-vb[TcpChannel.GetUrlsForUri#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpChannel.GetUrlsForUri/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSecured">
      <MemberSignature Language="C#" Value="public bool IsSecured { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecured" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.Tcp.TcpChannel.IsSecured" />
      <MemberSignature Language="VB.NET" Value="Public Property IsSecured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSecured { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsSecured : bool with get, set" Usage="System.Runtime.Remoting.Channels.Tcp.TcpChannel.IsSecured" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość logiczną wskazującą, czy ten kanał jest bezpieczna.</summary>
        <value>Wartość logiczna wskazująca, czy bieżące wystąpienie jest bezpieczne.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Należy nie można ustawić tej właściwości jawnie, ponieważ jest wystarczające, aby ustawić dla parametru ensureSecurity <xref:System.Runtime.Remoting.RemotingConfiguration.Configure%28System.String%2CSystem.Boolean%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public string Parse (string url, out string objectURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Parse(string url, [out] string&amp; objectURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Tcp.TcpChannel.Parse(System.String,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Function Parse (url As String, ByRef objectURI As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ Parse(System::String ^ url, [Runtime::InteropServices::Out] System::String ^ % objectURI);" />
      <MemberSignature Language="F#" Value="abstract member Parse : string *  -&gt; string&#xA;override this.Parse : string *  -&gt; string" Usage="tcpChannel.Parse (url, objectURI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="objectURI" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="url">Adres URL, z którego mają zostać wyodrębnione identyfikator URI obiektu dobrze znanych zdalnego.</param>
        <param name="objectURI">Po powrocie z tej metody zawiera <see cref="T:System.String" /> zawierający identyfikator URI obiektu dobrze znanych zdalnego. Ten parametr jest przekazywany niezainicjowany.</param>
        <summary>Wyodrębnianie identyfikatora URI kanału i zdalnego obiektu dobrze znanego identyfikatora URI z określonego adresu URL.</summary>
        <returns>Identyfikator URI bieżącego kanału.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikator URI obiektu jest wartością, która jednoznacznie identyfikuje wystąpienie określonego obiektu.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak użyć tej metody.  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Tcp.TcpChannel#6](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Tcp.TcpChannel/CPP/server.cpp#6)]
 [!code-csharp[System.Runtime.Remoting.Channels.Tcp.TcpChannel#6](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Tcp.TcpChannel/CS/server.cs#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Uri" />
      </Docs>
    </Member>
    <Member MemberName="StartListening">
      <MemberSignature Language="C#" Value="public void StartListening (object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartListening(object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Tcp.TcpChannel.StartListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartListening (data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void StartListening(System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member StartListening : obj -&gt; unit&#xA;override this.StartListening : obj -&gt; unit" Usage="tcpChannel.StartListening data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">Informacje o opcjonalnych inicjowania.</param>
        <summary>Powoduje, że kanał bieżący rozpocząć nasłuchiwania żądań.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie jest to konieczne wywołać tę metodę, aby rozpocząć nasłuchiwania w nowo utworzonym kanału.  
  
 Ta metoda służy do ponownego uruchomienia nasłuchiwanie na kanale po <xref:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.StopListening%2A> została wywołana metoda.  
  
 Jeśli kanał używa numeru portu przypisywany dynamicznie, numer portu mogą ulec zmianie po ponownym uruchomieniu nasłuchiwania.  
  
 `data` Parametru może służyć do przekazania do stanu inicjowania określonych do kanału. Jeśli nie chcesz przekazać z określonym stanem do kanału, ustaw `data` do `null`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StopListening">
      <MemberSignature Language="C#" Value="public void StopListening (object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopListening(object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Tcp.TcpChannel.StopListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StopListening (data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void StopListening(System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member StopListening : obj -&gt; unit&#xA;override this.StopListening : obj -&gt; unit" Usage="tcpChannel.StopListening data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">Informacje o stanie opcjonalne dla kanału.</param>
        <summary>Powoduje, że ten kanał można zatrzymać nasłuchiwanie żądań.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda umożliwia przestawaj słuchać w kanale. Aby ponownie uruchomić nasłuchiwania, należy użyć <xref:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.StartListening%2A> metody.  
  
 Jeśli kanał używa numeru portu przypisywany dynamicznie, numer portu mogą ulec zmianie po ponownym uruchomieniu nasłuchiwania.  
  
 `data` Parametru może służyć do przekazania do stanu inicjowania określonych do kanału. Jeśli nie chcesz przekazać z określonym stanem do kanału, ustaw `data` do `null`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>