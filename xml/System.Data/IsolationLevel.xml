<Type Name="IsolationLevel" FullName="System.Data.IsolationLevel">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fd1598b6f019ec4266a4507137cb374b09d7767b" />
    <Meta Name="ms.sourcegitcommit" Value="df6cf590aa3087f6c7c202712eee781c6a3c8f96" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="05/07/2018" />
    <Meta Name="ms.locfileid" Value="33679395" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum IsolationLevel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed IsolationLevel extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Data.IsolationLevel" />
  <TypeSignature Language="VB.NET" Value="Public Enum IsolationLevel" />
  <TypeSignature Language="C++ CLI" Value="public enum class IsolationLevel" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>Określa zachowanie blokowanie transakcji dla połączenia.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.IsolationLevel> Wartości są używane przez dostawcę danych .NET Framework podczas wykonywania transakcji.  
  
 <xref:System.Data.IsolationLevel> Nadal obowiązują do momentu jawnie zmieniony, ale można ją zmienić w dowolnym momencie. Nowa wartość jest używana w czasie wykonywania nie czas analizy. Po zmianie podczas transakcji, oczekiwane zachowanie serwera jest zastosowanie nowy poziom blokowania instrukcje wszystkich pozostałych.  
  
   
  
## Examples  
 Ta aplikacja przedstawiono sposób użycia <xref:System.Data.IsolationLevel> w <xref:System.Data.Common.DbTransaction>. Przykładowe pokazują, które z poniższych zachowań są dozwolone w izolacji różnych poziomów:  
  
-   Odczytów.  
  
-   Odczytuje non powtarzalne.  
  
-   Fantomów.  
  
 Ta aplikacja będzie wykonywany w następujących poziomów izolacji:  
  
-   ReadUncommitted  
  
-   Wartość ReadCommitted  
  
-   RepeatableRead  
  
-   Możliwy do serializacji  
  
-   Migawka  
  
 Klasa PhantomReadThreads pokazuje umożliwia zachowanie odczytu Fantom, jeśli określonej transakcji. Jeśli transakcja umożliwia zachowanie, wątki będzie działać w następującej kolejności:  
  
-   W pierwszym wątkiem wybierz products(All).  
  
-   W drugim wątku wstawić nowego produktu.  
  
-   Zatwierdzić transakcji w drugim wątku.  
  
-   Wybierz produkty, ponownie.  
  
-   Zatwierdzić transakcji w pierwszym wątkiem.  
  
 Jeśli transakcja umożliwia zachowanie, tych dwóch operacji Select otrzyma różne wyniki.  
  
 Klasa NonrepeatableReadThreads pokazuje umożliwia zachowanie zanieczyszczonych odczytu, jeśli określonej transakcji. Jeśli transakcja umożliwia zachowanie, wątki będzie działać w następującej kolejności:  
  
-   W pierwszym wątkiem wybierz product(ProductId=1).  
  
-   W drugim wątku zaktualizuj value(ProductId=1) ilość.  
  
-   Zatwierdzić transakcji w drugim wątku.  
  
-   Wybierz ponownie produkt.  
  
-   Zatwierdzić transakcji w pierwszym wątkiem.  
  
 Jeśli transakcja umożliwia zachowanie, tych dwóch operacji Select otrzyma różne wyniki.  
  
 Klasa ExchangeValuesThreads pokazano różnicę między transakcji Serializable i migawki. Dla transakcji serializacji wątków będzie działać w następującej kolejności:  
  
-   W pierwszym wątkiem uzyskać ceny product(ProductId=2) i przechowywać w zmiennej.  
  
-   W pierwszym wątkiem Zaktualizuj cenę product(ProductId=1) cenę product(ProductId=2).  
  
-   Zatwierdzić transakcji w pierwszym wątkiem.  
  
-   W drugim wątku Pobierz cenę product(ProductId=1) i magazynu w zmiennej.  
  
-   W drugim wątku Zaktualizuj cenę product(ProductId=2) cena product(ProductId=1).  
  
-   Zatwierdzić transakcji w drugim wątku.  
  
 Teraz wartości ceny (ProductId = 1 i ProductId = 2) są jako takie same jak oryginalne cen Product(ProductId=2).  
  
 Dla transakcji migawki wątków będzie działać w następującej kolejności:  
  
-   W pierwszym wątkiem uzyskać ceny product(ProductId=2) i przechowywać w zmiennej;  
  
-   W pierwszym wątkiem Zaktualizuj cenę product(ProductId=1) cenę product(ProductId=2).  
  
-   W drugim wątku Pobierz ceny product(ProductId=1) z migawki i przechowywać w zmiennej.  
  
-   W drugim wątku Zaktualizuj cenę product(ProductId=2) cena product(ProductId=1).  
  
-   Zatwierdzić transakcji w drugim wątku.  
  
-   Zatwierdzić transakcji w pierwszym wątkiem.  
  
 Teraz wymiany ceny produktów (ProductId = 1 i ProductId = 2).  
  
 Klasa DirtyReadThreads pokazuje umożliwia zachowanie odczytu z zanieczyszczeniu, jeśli określonej transakcji. Jeśli transakcja umożliwia zachowanie, wątki będzie działać w następującej kolejności:  
  
-   W pierwszym wątkiem rozpocząć transakcji, a następnie dodaj value(ProductId=1) ilość.  
  
-   W drugim wątku odczytać wartości ilości, a następnie ponownie Dodaj wartość.  
  
-   Zatwierdzić transakcji w drugim wątku.  
  
-   Wycofywanie transakcji w pierwszym wątkiem.  
  
 Transakcja umożliwia zachowanie, dwukrotnie zostaną dodane ilości wartości.  
  
 C# i Visual Basic projektów z tym przykładowym kodzie można znaleźć w [przykłady kodu dewelopera](https://code.msdn.microsoft.com/site/search?query=How%20to%20use%20IsolationLevel%20Enumeration%20in%20DbTransaction&f%5B0%5D.Value=How%20to%20use%20IsolationLevel%20Enumeration%20in%20DbTransaction&f%5B0%5D.Type=SearchText&ac=4).  
  
 [!code-csharp[system_data_IsolationLevel#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/system_data_isolationlevel/cs/source.cs#1)]
 [!code-vb[system_data_IsolationLevel#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/system_data_isolationlevel/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Chaos">
      <MemberSignature Language="C#" Value="Chaos" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel Chaos = int32(16)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.Chaos" />
      <MemberSignature Language="VB.NET" Value="Chaos" />
      <MemberSignature Language="C++ CLI" Value="Chaos" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>16</MemberValue>
      <Docs>
        <summary>Nie można zastąpić oczekiwanie na więcej wysokiej izolowanych transakcji.</summary>
      </Docs>
    </Member>
    <Member MemberName="ReadCommitted">
      <MemberSignature Language="C#" Value="ReadCommitted" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel ReadCommitted = int32(4096)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.ReadCommitted" />
      <MemberSignature Language="VB.NET" Value="ReadCommitted" />
      <MemberSignature Language="C++ CLI" Value="ReadCommitted" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>4096</MemberValue>
      <Docs>
        <summary>Udostępnione blokady są przechowywane dane są odczytywane w celu uniknięcia odczytów, ale dane można zmienić przed zakończeniem transakcji-powtarzalne odczyty lub fantomu danych.</summary>
      </Docs>
    </Member>
    <Member MemberName="ReadUncommitted">
      <MemberSignature Language="C#" Value="ReadUncommitted" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel ReadUncommitted = int32(256)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.ReadUncommitted" />
      <MemberSignature Language="VB.NET" Value="ReadUncommitted" />
      <MemberSignature Language="C++ CLI" Value="ReadUncommitted" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>256</MemberValue>
      <Docs>
        <summary>Odczyt niezatwierdzonych jest to możliwe, co oznacza, że nie blokady współużytkowane są wydawane i są honorowane nie blokady na wyłączność.</summary>
      </Docs>
    </Member>
    <Member MemberName="RepeatableRead">
      <MemberSignature Language="C#" Value="RepeatableRead" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel RepeatableRead = int32(65536)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.RepeatableRead" />
      <MemberSignature Language="VB.NET" Value="RepeatableRead" />
      <MemberSignature Language="C++ CLI" Value="RepeatableRead" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>65536</MemberValue>
      <Docs>
        <summary>Blokady są umieszczane na wszystkie dane, które jest używane w zapytaniu, uniemożliwia innym użytkownikom aktualizowanie danych. Zapobiega-powtarzalnego odczytu, ale fantom wiersze są nadal możliwe.</summary>
      </Docs>
    </Member>
    <Member MemberName="Serializable">
      <MemberSignature Language="C#" Value="Serializable" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel Serializable = int32(1048576)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.Serializable" />
      <MemberSignature Language="VB.NET" Value="Serializable" />
      <MemberSignature Language="C++ CLI" Value="Serializable" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>1048576</MemberValue>
      <Docs>
        <summary>Zakres jest zablokować <see cref="T:System.Data.DataSet" />, inni użytkownicy z aktualizacji lub wstawianie wierszy do zestawu danych, aż do ukończenia transakcji.</summary>
      </Docs>
    </Member>
    <Member MemberName="Snapshot">
      <MemberSignature Language="C#" Value="Snapshot" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel Snapshot = int32(16777216)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.Snapshot" />
      <MemberSignature Language="VB.NET" Value="Snapshot" />
      <MemberSignature Language="C++ CLI" Value="Snapshot" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>16777216</MemberValue>
      <Docs>
        <summary>Zmniejsza blokuje dzięki przechowywaniu wersji danych jednej aplikacji mogą odczytywać, podczas gdy inny jest zmodyfikowanie tych samych danych. Wskazuje, że z jednej transakcji nie może zostać wyświetlone zmiany wprowadzone w innych transakcjach nawet wtedy, gdy użytkownik requery.</summary>
      </Docs>
    </Member>
    <Member MemberName="Unspecified">
      <MemberSignature Language="C#" Value="Unspecified" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel Unspecified = int32(-1)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.Unspecified" />
      <MemberSignature Language="VB.NET" Value="Unspecified" />
      <MemberSignature Language="C++ CLI" Value="Unspecified" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>-1</MemberValue>
      <Docs>
        <summary>Poziom izolacji inny niż określony jest używany, ale nie może być określony poziom.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Korzystając z <xref:System.Data.Odbc.OdbcTransaction>, jeśli nie ustawisz <xref:System.Data.IsolationLevel> lub możesz ustawić <xref:System.Data.IsolationLevel> do `Unspecified`, transakcja jest wykonywana zgodnie z poziomu izolacji, który jest określany przez sterownik, który jest używany.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>