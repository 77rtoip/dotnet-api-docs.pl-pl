<Type Name="DataTableExtensions" FullName="System.Data.DataTableExtensions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2eb2acee0ac49f203ce99088dd7b97e323a75cb0" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69122433" /></Metadata><TypeSignature Language="C#" Value="public static class DataTableExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit DataTableExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.DataTableExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module DataTableExtensions" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataTableExtensions abstract sealed" />
  <TypeSignature Language="F#" Value="type DataTableExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Definiuje metody rozszerzające do <see cref="T:System.Data.DataTable" /> klasy. <see cref="T:System.Data.DataTableExtensions" />jest klasą statyczną.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AsDataView">
      <MemberSignature Language="C#" Value="public static System.Data.DataView AsDataView (this System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.DataView AsDataView(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.AsDataView(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsDataView (table As DataTable) As DataView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::DataView ^ AsDataView(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="static member AsDataView : System.Data.DataTable -&gt; System.Data.DataView" Usage="System.Data.DataTableExtensions.AsDataView table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" RefType="this" Index="0" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="table">Źródło <see cref="T:System.Data.DataTable" /> , z którego jest tworzony składnik LINQ <see cref="T:System.Data.DataView" /> -Enabled.</param>
        <summary>Tworzy i zwraca obiekt obsługujący <see cref="T:System.Data.DataView" /> LINQ.</summary>
        <returns>Obiekt obsługujący <see cref="T:System.Data.DataView" /> LINQ.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataView>Włącza scenariusze powiązań danych dla [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] i można je utworzyć na podstawie <xref:System.Data.DataTable>typu lub typów, dostarczając widok domyślny tej tabeli. Filtrowanie i sortowanie można ustawić na <xref:System.Data.DataView> podstawie po utworzeniu utworzonego elementu <xref:System.Data.DataTable>z. Następnie jest powiązany z kontrolką interfejsu użytkownika, taką <xref:System.Windows.Forms.DataGrid> jak lub a <xref:System.Windows.Forms.DataGridView>, zapewniając prosty model powiązań danych. <xref:System.Data.DataView>  
  
 Aby uzyskać więcej informacji i przykładów, zobacz [Tworzenie obiektu DataView](~/docs/framework/data/adonet/creating-a-dataview-object-linq-to-dataset.md).  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Data.DataView> z tabeli SalesOrderDetail i ustawia ją jako źródło <xref:System.Windows.Forms.BindingSource> danych obiektu, który działa <xref:System.Windows.Forms.DataGridView> jako serwer proxy dla kontrolki:  
  
 [!code-csharp[DP DataView Samples#CreateLDVFromTable](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DP DataView Samples/CS/Form1.cs#createldvfromtable)]
 [!code-vb[DP DataView Samples#CreateLDVFromTable](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP DataView Samples/VB/Form1.vb#createldvfromtable)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsDataView&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Data.DataView AsDataView&lt;T&gt; (this System.Data.EnumerableRowCollection&lt;T&gt; source) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.DataView AsDataView&lt;(class System.Data.DataRow) T&gt;(class System.Data.EnumerableRowCollection`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.AsDataView``1(System.Data.EnumerableRowCollection{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsDataView(Of T As DataRow) (source As EnumerableRowCollection(Of T)) As DataView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::DataView ^ AsDataView(System::Data::EnumerableRowCollection&lt;T&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member AsDataView : System.Data.EnumerableRowCollection&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; -&gt; System.Data.DataView (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.AsDataView source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataView</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Data.EnumerableRowCollection&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T">Typ obiektów w sekwencji źródłowej, zazwyczaj <see cref="T:System.Data.DataRow" />.</typeparam>
        <param name="source">Kwerenda źródłowa [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] , z której <see cref="T:System.Data.DataView" /> jest tworzony składnik LINQ.</param>
        <summary>Tworzy i zwraca obiekt obsługujący <see cref="T:System.Data.DataView" /> LINQ [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] reprezentujący zapytanie.</summary>
        <returns>Obiekt obsługujący <see cref="T:System.Data.DataView" /> LINQ.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataView>Włącza scenariusze powiązań danych dla [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] i można je utworzyć na [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] podstawie zapytania. <xref:System.Data.DataView> Reprezentuje kwerendę i nie jest widokiem na górze zapytania. Nowo utworzone <xref:System.Data.DataView> wnioskują informacje o filtrowaniu i sortowaniu z zapytania, z którego zostało utworzone. Następnie jest powiązany z kontrolką interfejsu użytkownika, taką <xref:System.Windows.Forms.DataGrid> jak lub a <xref:System.Windows.Forms.DataGridView>, dostarczając prosty model powiązań danych. <xref:System.Data.DataView>  
  
 Parametr `T` <xref:System.Data.DataRow> <xref:System.Data.DataRow>wejściowy może być tylko typu lub typu pochodnego od. `source`  
  
 Następujące operatory zapytań, tylko, są obsługiwane w zapytaniu użytym do utworzenia <xref:System.Data.DataView>:  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.Cast%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.OrderBy%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.OrderByDescending%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.Select%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.ThenBy%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.ThenByDescending%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.Where%2A>  
  
 Aby uzyskać więcej informacji i przykładów, zobacz [Tworzenie obiektu DataView](~/docs/framework/data/adonet/creating-a-dataview-object-linq-to-dataset.md).  
  
   
  
## Examples  
 W poniższym przykładzie jest <xref:System.Data.DataView> tworzone zamówienie online uporządkowane według łącznego terminu:  
  
 [!code-csharp[DP DataView Samples#CreateLDVFromQuery1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DP DataView Samples/CS/Form1.cs#createldvfromquery1)]
 [!code-vb[DP DataView Samples#CreateLDVFromQuery1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP DataView Samples/VB/Form1.vb#createldvfromquery1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsEnumerable">
      <MemberSignature Language="C#" Value="public static System.Data.EnumerableRowCollection&lt;System.Data.DataRow&gt; AsEnumerable (this System.Data.DataTable source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.EnumerableRowCollection`1&lt;class System.Data.DataRow&gt; AsEnumerable(class System.Data.DataTable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.AsEnumerable(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsEnumerable (source As DataTable) As EnumerableRowCollection(Of DataRow)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::EnumerableRowCollection&lt;System::Data::DataRow ^&gt; ^ AsEnumerable(System::Data::DataTable ^ source);" />
      <MemberSignature Language="F#" Value="static member AsEnumerable : System.Data.DataTable -&gt; System.Data.EnumerableRowCollection&lt;System.Data.DataRow&gt;" Usage="System.Data.DataTableExtensions.AsEnumerable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.EnumerableRowCollection&lt;System.Data.DataRow&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Data.DataTable" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">Źródło <see cref="T:System.Data.DataTable" /> , które ma zostać wyliczalne.</param>
        <summary>Zwraca obiekt, gdzie parametr <paramref name="T" /> generyczny to <see cref="T:System.Data.DataRow" />. <see cref="T:System.Collections.Generic.IEnumerable`1" /> Ten obiekt może być używany w [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] zapytaniu wyrażenia lub metody.</summary>
        <returns>Obiekt, gdzie parametr <paramref name="T" /> generyczny jest <see cref="T:System.Data.DataRow" />. <see cref="T:System.Collections.Generic.IEnumerable`1" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[vbteclinqext](~/includes/vbteclinqext-md.md)]zapytania pracują ze źródłami danych, <xref:System.Collections.Generic.IEnumerable%601> które implementują <xref:System.Linq.IQueryable> interfejs lub interfejs.  <xref:System.Data.DataTable> <xref:System.Data.DataTableExtensions.AsEnumerable%2A> [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] `From` Klasa nie implementuje żadnego interfejsu, dlatego należy wywołać metodę, aby użyć jako źródła w klauzuli zapytania. <xref:System.Data.DataTable> Możesz również uzyskać niestandardowe operatory specyficzne dla domeny, takie jak <xref:System.Data.DataTableExtensions.CopyToDataTable%2A>, <xref:System.Collections.Generic.IEnumerable%601> zwracając obiekt.  
  
 Wyliczalny obiekt zwrócony przez <xref:System.Data.DataTableExtensions.AsEnumerable%2A> metodę jest trwale powiązany <xref:System.Data.DataTable> z, który go utworzył. Wiele wywołań <xref:System.Data.DataTableExtensions.AsEnumerable%2A> metody zwróci wiele niezależnych obiektów queryable, które są powiązane ze źródłem <xref:System.Data.DataTable>.  
  
   
  
## Examples  
 W poniższym przykładzie `DisplayProducts` Metoda otrzymuje element DataTable, który zawiera kolumnę danych o nazwie `ProductName`, wyodrębnia `ProductName` wartości, a następnie drukuje wartości.  
  
 [!code-csharp[system.data.DataTableExtensions.AsEnumerable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.data.datatableextensions.asenumerable/cs/source.cs#1)]
 [!code-vb[system.data.DataTableExtensions.AsEnumerable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.data.datatableextensions.asenumerable/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Źródło <see cref="T:System.Data.DataTable" /> to .<see langword="null" /></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyToDataTable&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca obiekt, <see cref="T:System.Data.DataRow" /> <see cref="T:System.Collections.Generic.IEnumerable`1" /> który zawiera kopie obiektów, przy użyciu obiektu wejściowego. <see cref="T:System.Data.DataTable" /></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyToDataTable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Data.DataTable CopyToDataTable&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.DataTable CopyToDataTable&lt;(class System.Data.DataRow) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CopyToDataTable(Of T As DataRow) (source As IEnumerable(Of T)) As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::DataTable ^ CopyToDataTable(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member CopyToDataTable : seq&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; -&gt; System.Data.DataTable (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.CopyToDataTable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">Typ obiektów w sekwencji źródłowej, zazwyczaj <see cref="T:System.Data.DataRow" />.</typeparam>
        <param name="source">Sekwencja źródłowa <see cref="T:System.Collections.Generic.IEnumerable`1" /> .</param>
        <summary><see cref="T:System.Data.DataRow" /> <paramref name="T" /> <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zwraca obiekt, <see cref="T:System.Data.DataRow" /> który zawiera kopie obiektów, z uwzględnieniem obiektu wejściowego, w którym parametr generyczny jest. <see cref="T:System.Data.DataTable" /></summary>
        <returns>A <see cref="T:System.Data.DataTable" /> , który zawiera sekwencję wejściową jako <see cref="T:System.Data.DataRow" /> typ obiektów.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parametr `T` <xref:System.Data.DataRow> <xref:System.Data.DataRow>wejściowy może być tylko typu lub typu pochodnego od. `source`  
  
 Sekwencja wejściowa może być dowolnym <xref:System.Collections.Generic.IEnumerable%601> źródłem, nie tylko zapytania lub zapytania <xref:System.Data.DataTable>w. Należy pamiętać, że jeśli sekwencja źródłowa jest kwerendą, wywołanie tego operatora spowoduje wymuszenie natychmiastowego wykonania. Wyliczenie sekwencji źródłowej może również spowodować wyrzucanie wyjątków.  
  
 Schemat tabeli docelowej jest oparty na schemacie pierwszego <xref:System.Data.DataRow> wiersza w sekwencji źródłowej. Metadane tabeli są wyodrębniane z <xref:System.Data.DataRow> metadanych i wartości tabel z wartości <xref:System.Data.DataRow>kolumn. Dla typu, typy nie są zachowywane. <xref:System.Data.DataTable> Dane i schemat są transferowane, ale wynikowe wiersze tabeli wyjściowej nie <xref:System.Data.DataRow> będą typu Type. <xref:System.Data.DataRow> <xref:System.Data.DataTable>Właściwości i nie<xref:System.Data.DataRow.RowError%2A> są zachowywane podczas kopiowania ze źródła do zwracanego. <xref:System.Data.DataRow.RowState%2A>  
  
 Gdy w źródle <xref:System.Data.DataRow>znaleziono odwołanie o **wartości null** lub typ dopuszczający wartość **null** , ta metoda zastępuje wartość w miejscu docelowym <xref:System.Data.DataTable> wartością <xref:System.DBNull.Value>.  
  
 Wygenerowana tabela zwrócona przez metodę ma domyślną nazwę tabeli. Jeśli chcesz nazwać <xref:System.Data.DataTable>, dołączyć ją <xref:System.Data.DataSet>do lub wykonać inną <xref:System.Data.DataTable> konkretną operację, należy to zrobić po utworzeniu i zwróceniu tabeli.  
  
 Aby uzyskać więcej informacji, zobacz [Tworzenie elementu DataTable na podstawie zapytania](~/docs/framework/data/adonet/creating-a-datatable-from-a-query-linq-to-dataset.md).  
  
   
  
## Examples  
 Poniższy przykład wysyła zapytanie do tabeli SalesOrderHeader dla zamówień po 8 sierpnia 2001 i używa <xref:System.Data.DataTableExtensions.CopyToDataTable%2A> metody do <xref:System.Data.DataTable> utworzenia z tego zapytania. Następnie jest powiązany <xref:System.Windows.Forms.BindingSource>z, który <xref:System.Windows.Forms.DataGridView>działa jako serwer proxy dla. <xref:System.Data.DataTable>  
  
 [!code-csharp[DP LINQ to DataSet Examples#CopyToDataTable1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DP LINQ to DataSet Examples/CS/Program.cs#copytodatatable1)]
 [!code-vb[DP LINQ to DataSet Examples#CopyToDataTable1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP LINQ to DataSet Examples/VB/Module1.vb#copytodatatable1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Sekwencja źródłowa <see cref="T:System.Collections.Generic.IEnumerable`1" /> jest <see langword="null" /> i nie można utworzyć nowej tabeli.</exception>
        <exception cref="T:System.InvalidOperationException">W sekwencji źródłowej ma <see cref="F:System.Data.DataRowState.Deleted" />stan. <see cref="T:System.Data.DataRow" />  
  
Sekwencja źródłowa nie zawiera żadnych <see cref="T:System.Data.DataRow" /> obiektów.  
  
W sekwencji źródłowej to <see langword="null" />. <see cref="T:System.Data.DataRow" /></exception>
      </Docs>
    </Member>
    <Member MemberName="CopyToDataTable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void CopyToDataTable&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source, System.Data.DataTable table, System.Data.LoadOption options) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyToDataTable&lt;(class System.Data.DataRow) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source, class System.Data.DataTable table, valuetype System.Data.LoadOption options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub CopyToDataTable(Of T As DataRow) (source As IEnumerable(Of T), table As DataTable, options As LoadOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static void CopyToDataTable(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source, System::Data::DataTable ^ table, System::Data::LoadOption options);" />
      <MemberSignature Language="F#" Value="static member CopyToDataTable : seq&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; * System.Data.DataTable * System.Data.LoadOption -&gt; unit (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.CopyToDataTable (source, table, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="options" Type="System.Data.LoadOption" />
      </Parameters>
      <Docs>
        <typeparam name="T">Typ obiektów w sekwencji źródłowej, zazwyczaj <see cref="T:System.Data.DataRow" />.</typeparam>
        <param name="source">Sekwencja źródłowa <see cref="T:System.Collections.Generic.IEnumerable`1" /> .</param>
        <param name="table">Miejsce docelowe <see cref="T:System.Data.DataTable" />.</param>
        <param name="options"><see cref="T:System.Data.LoadOption" /> Wyliczenie określające<see cref="T:System.Data.DataTable" /> opcje ładowania.</param>
        <summary>Kopiuje <see cref="T:System.Data.DataRow" /> obiekty do określonego <see cref="T:System.Data.DataTable" />, przy użyciu obiektu wejściowego <see cref="T:System.Collections.Generic.IEnumerable`1" /> , w którym jest <paramref name="T" /> <see cref="T:System.Data.DataRow" />parametr generyczny.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parametr `T` <xref:System.Data.DataRow> <xref:System.Data.DataRow>wejściowy może być tylko typu lub typu pochodnego od. `source`  
  
 Sekwencja wejściowa może być dowolnym <xref:System.Collections.Generic.IEnumerable%601> źródłem, nie tylko zapytaniem <xref:System.Data.DataTable>w. Należy pamiętać, że jeśli sekwencja źródłowa jest kwerendą, wywołanie tego operatora spowoduje wymuszenie natychmiastowego wykonania. Wyliczenie sekwencji źródłowej może również spowodować wyrzucanie wyjątków.  
  
 Schemat tabeli docelowej jest oparty na schemacie pierwszego <xref:System.Data.DataRow> wiersza w sekwencji źródłowej. Metadane tabeli są wyodrębniane z <xref:System.Data.DataRow> metadanych i wartości tabel z wartości <xref:System.Data.DataRow>kolumn. Dla typu, typy nie są zachowywane. <xref:System.Data.DataTable> Dane i schemat są transferowane, ale wynikowe wiersze tabeli wyjściowej nie <xref:System.Data.DataRow> będą typu Type. <xref:System.Data.DataRow> <xref:System.Data.DataTable>Właściwości i nie<xref:System.Data.DataRow.RowError%2A> są zachowywane podczas kopiowania ze źródła do zwracanego. <xref:System.Data.DataRow.RowState%2A>  
  
 Gdy w źródle <xref:System.Data.DataRow>znaleziono odwołanie o **wartości null** lub typ dopuszczający wartość **null** , ta metoda zastępuje wartość w miejscu docelowym <xref:System.Data.DataTable> wartością <xref:System.DBNull.Value>.  
  
 Wygenerowana tabela zwrócona przez metodę ma domyślną nazwę tabeli. Jeśli chcesz nazwać <xref:System.Data.DataTable>, dołączyć ją <xref:System.Data.DataSet>do lub wykonać inną <xref:System.Data.DataTable> konkretną operację, należy to zrobić po utworzeniu i zwróceniu tabeli.  
  
 Aby uzyskać więcej informacji, zobacz [Tworzenie elementu DataTable na podstawie zapytania](~/docs/framework/data/adonet/creating-a-datatable-from-a-query-linq-to-dataset.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Skopiowane <see cref="T:System.Data.DataRow" /> obiekty nie mieszczą się w schemacie docelowej <see cref="T:System.Data.DataTable" />.</exception>
        <exception cref="T:System.ArgumentNullException">Sekwencja źródłowa <see cref="T:System.Collections.Generic.IEnumerable`1" /> jest <see langword="null" /> lub lokalizacją <see cref="T:System.Data.DataTable" /> docelową <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">W sekwencji źródłowej ma <see cref="F:System.Data.DataRowState.Deleted" />stan. <see cref="T:System.Data.DataRow" />  
  
Sekwencja źródłowa nie zawiera żadnych <see cref="T:System.Data.DataRow" /> obiektów.  
  
W sekwencji źródłowej to <see langword="null" />. <see cref="T:System.Data.DataRow" /></exception>
      </Docs>
    </Member>
    <Member MemberName="CopyToDataTable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void CopyToDataTable&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source, System.Data.DataTable table, System.Data.LoadOption options, System.Data.FillErrorEventHandler errorHandler) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyToDataTable&lt;(class System.Data.DataRow) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source, class System.Data.DataTable table, valuetype System.Data.LoadOption options, class System.Data.FillErrorEventHandler errorHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub CopyToDataTable(Of T As DataRow) (source As IEnumerable(Of T), table As DataTable, options As LoadOption, errorHandler As FillErrorEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static void CopyToDataTable(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source, System::Data::DataTable ^ table, System::Data::LoadOption options, System::Data::FillErrorEventHandler ^ errorHandler);" />
      <MemberSignature Language="F#" Value="static member CopyToDataTable : seq&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; * System.Data.DataTable * System.Data.LoadOption * System.Data.FillErrorEventHandler -&gt; unit (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.CopyToDataTable (source, table, options, errorHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="options" Type="System.Data.LoadOption" />
        <Parameter Name="errorHandler" Type="System.Data.FillErrorEventHandler" />
      </Parameters>
      <Docs>
        <typeparam name="T">Typ obiektów w sekwencji źródłowej, zazwyczaj <see cref="T:System.Data.DataRow" />.</typeparam>
        <param name="source">Sekwencja źródłowa <see cref="T:System.Collections.Generic.IEnumerable`1" /> .</param>
        <param name="table">Miejsce docelowe <see cref="T:System.Data.DataTable" />.</param>
        <param name="options"><see cref="T:System.Data.LoadOption" /> Wyliczenie określające<see cref="T:System.Data.DataTable" /> opcje ładowania.</param>
        <param name="errorHandler"><see cref="T:System.Data.FillErrorEventHandler" /> Delegat reprezentujący metodę, która będzie obsługiwać błąd.</param>
        <summary>Kopiuje <see cref="T:System.Data.DataRow" /> obiekty do określonego <see cref="T:System.Data.DataTable" />, przy użyciu obiektu wejściowego <see cref="T:System.Collections.Generic.IEnumerable`1" /> , w którym jest <paramref name="T" /> <see cref="T:System.Data.DataRow" />parametr generyczny.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parametr `T` <xref:System.Data.DataRow> <xref:System.Data.DataRow>wejściowy może być tylko typu lub typu pochodnego od. `source`  
  
 Sekwencja wejściowa może być dowolnym <xref:System.Collections.Generic.IEnumerable%601> źródłem, nie tylko zapytaniem <xref:System.Data.DataTable>w. Należy pamiętać, że jeśli sekwencja źródłowa jest kwerendą, wywołanie tego operatora spowoduje wymuszenie natychmiastowego wykonania. Wyliczenie sekwencji źródłowej może również spowodować wyrzucanie wyjątków.  
  
 Schemat tabeli docelowej jest oparty na schemacie pierwszego <xref:System.Data.DataRow> wiersza w sekwencji źródłowej. Metadane tabeli są wyodrębniane z <xref:System.Data.DataRow> metadanych i wartości tabel z wartości <xref:System.Data.DataRow>kolumn. Dla typu, typy nie są zachowywane. <xref:System.Data.DataTable> Dane i schemat są transferowane, ale wynikowe wiersze tabeli wyjściowej nie <xref:System.Data.DataRow> będą typu Type. <xref:System.Data.DataRow> <xref:System.Data.DataTable>Właściwości i nie<xref:System.Data.DataRow.RowError%2A> są zachowywane podczas kopiowania ze źródła do zwracanego. <xref:System.Data.DataRow.RowState%2A>  
  
 Gdy w źródle <xref:System.Data.DataRow>znaleziono odwołanie o **wartości null** lub typ dopuszczający wartość **null** , ta metoda zastępuje wartość w miejscu docelowym <xref:System.Data.DataTable> wartością <xref:System.DBNull.Value>.  
  
 Wygenerowana tabela zwrócona przez metodę ma domyślną nazwę tabeli. Jeśli chcesz nazwać <xref:System.Data.DataTable>, dołączyć ją <xref:System.Data.DataSet>do lub wykonać inną <xref:System.Data.DataTable> konkretną operację, należy to zrobić po utworzeniu i zwróceniu tabeli.  
  
 Jeśli wyjątek jest zgłaszany podczas kopiowania wiersza danych do tabeli docelowej, na przykład wyjątek ograniczenia, `errorHandler` obiekt delegowany jest wywoływany. Element <xref:System.Data.FillErrorEventArgs> jest przesyłany `errorHandler` do delegata o następujących wartościach:  
  
-   <xref:System.Data.FillErrorEventArgs.Values%2A> Właściwość jest ustawiona na kopię danych źródłowych.  
  
-   Właściwość jest ustawiona na wartość docelową <xref:System.Data.DataTable>. <xref:System.Data.FillErrorEventArgs.DataTable%2A>  
  
-   <xref:System.Data.FillErrorEventArgs.Errors%2A> Właściwość jest ustawiona na przechwycony wyjątek.  
  
 <xref:System.Data.FillErrorEventArgs.Continue%2A> Właściwość jest odczytywana po powrocie wywołania delegata. Jeśli właściwość jest `true`, sekwencja źródłowa jest nadal wyliczana i ładowana do tabeli danych. <xref:System.Data.FillErrorEventArgs.Continue%2A> Jeśli właściwość ma `false`wartość, oryginalny <xref:System.Data.DataTableExtensions.CopyToDataTable%2A> wyjątek jest generowany z metody. <xref:System.Data.FillErrorEventArgs.Continue%2A>  
  
 Aby uzyskać więcej informacji, zobacz [Tworzenie elementu DataTable na podstawie zapytania](~/docs/framework/data/adonet/creating-a-datatable-from-a-query-linq-to-dataset.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Skopiowane <see cref="T:System.Data.DataRow" /> obiekty nie mieszczą się w schemacie docelowej <see cref="T:System.Data.DataTable" />.</exception>
        <exception cref="T:System.ArgumentNullException">Sekwencja źródłowa <see cref="T:System.Collections.Generic.IEnumerable`1" /> jest <see langword="null" /> lub lokalizacją <see cref="T:System.Data.DataTable" /> docelową <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">W sekwencji źródłowej ma <see cref="F:System.Data.DataRowState.Deleted" />stan. <see cref="T:System.Data.DataRow" />  
  
—lub— 
Sekwencja źródłowa nie zawiera żadnych <see cref="T:System.Data.DataRow" /> obiektów.  
  
—lub— 
W sekwencji źródłowej to <see langword="null" />. <see cref="T:System.Data.DataRow" /></exception>
      </Docs>
    </Member>
  </Members>
</Type>
