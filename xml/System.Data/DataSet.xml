<Type Name="DataSet" FullName="System.Data.DataSet">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b5163c85e237deab0787c49304ed679533645c57" /><Meta Name="ms.sourcegitcommit" Value="bc24a3ba616ee1df8b858f9400cae4f058ea3a7e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="06/19/2019" /><Meta Name="ms.locfileid" Value="67239970" /></Metadata><TypeSignature Language="C#" Value="public class DataSet : System.ComponentModel.MarshalByValueComponent, System.ComponentModel.IListSource, System.ComponentModel.ISupportInitializeNotification, System.Runtime.Serialization.ISerializable, System.Xml.Serialization.IXmlSerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit DataSet extends System.ComponentModel.MarshalByValueComponent implements class System.ComponentModel.IListSource, class System.ComponentModel.ISupportInitialize, class System.ComponentModel.ISupportInitializeNotification, class System.Runtime.Serialization.ISerializable, class System.Xml.Serialization.IXmlSerializable" />
  <TypeSignature Language="DocId" Value="T:System.Data.DataSet" />
  <TypeSignature Language="VB.NET" Value="Public Class DataSet&#xA;Inherits MarshalByValueComponent&#xA;Implements IListSource, ISerializable, ISupportInitializeNotification, IXmlSerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataSet : System::ComponentModel::MarshalByValueComponent, System::ComponentModel::IListSource, System::ComponentModel::ISupportInitializeNotification, System::Runtime::Serialization::ISerializable, System::Xml::Serialization::IXmlSerializable" />
  <TypeSignature Language="F#" Value="type DataSet = class&#xA;    inherit MarshalByValueComponent&#xA;    interface IListSource&#xA;    interface IXmlSerializable&#xA;    interface ISupportInitializeNotification&#xA;    interface ISerializable&#xA;    interface ISupportInitialize" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.MarshalByValueComponent</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitializeNotification</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Xml.Serialization.IXmlSerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
      <AttributeName>System.ComponentModel.DefaultProperty("DataSetName")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinmac-3.0">
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinmac-3.0">
      <AttributeName>System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-3.0">
      <AttributeName>System.Xml.Serialization.XmlRoot("DataSet")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
      <AttributeName>System.Xml.Serialization.XmlSchemaProvider("GetDataSetSchema")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.0;netstandard-2.1">
      <AttributeName>System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=7.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=7.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje w pamięci podręcznej informacje o danych.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet>, Czyli w pamięci podręcznej informacje o danych pobranych ze źródła danych jest głównym architektury ADO.NET. <xref:System.Data.DataSet> Składa się z kolekcją <xref:System.Data.DataTable> obiekty powiązane ze sobą za pomocą <xref:System.Data.DataRelation> obiektów. Można również wymusić integralności danych w przypadku <xref:System.Data.DataSet> przy użyciu <xref:System.Data.UniqueConstraint> i <xref:System.Data.ForeignKeyConstraint> obiektów. Aby uzyskać więcej informacji na temat pracy z usługą <xref:System.Data.DataSet> obiekty, zobacz [DataSet, DataTable i DataView](~/docs/framework/data/adonet/dataset-datatable-dataview/index.md).  
  
 Natomiast <xref:System.Data.DataTable> obiekty zawierają dane, <xref:System.Data.DataRelationCollection> umożliwia jednak nawigować po hierarchii tabeli. Tabele są zawarte w <xref:System.Data.DataTableCollection> dostępne za pośrednictwem <xref:System.Data.DataSet.Tables%2A> właściwości. Podczas uzyskiwania dostępu do <xref:System.Data.DataTable> obiektów, należy pamiętać, że są one warunkowo z uwzględnieniem wielkości liter. Na przykład, jeśli taki <xref:System.Data.DataTable> nosi nazwę "mydatatable" i innego nosi nazwę "Mydatatable", ciąg używany do wyszukiwania dla jednej z tabel, jest traktowany jako wielkość liter. Jednak jeśli "Mydatatable" nie istnieje "mydatatable", ciąg wyszukiwania jest traktowany bez uwzględniania wielkości liter. Aby uzyskać więcej informacji na temat pracy z usługą <xref:System.Data.DataTable> obiekty, zobacz [Tworzenie elementu DataTable](~/docs/framework/data/adonet/dataset-datatable-dataview/creating-a-datatable.md).  
  
 A <xref:System.Data.DataSet> mogą odczytywać i zapisywać danych i schematu jako dokumentów XML. Schemat i dane można być transportowane przez HTTP i używane przez dowolną aplikację, na dowolnej platformie, która ma włączoną obsługę XML. Schemat można zapisać jako schematu XML z <xref:System.Data.DataSet.WriteXmlSchema%2A> metody, a schemat i dane można zapisać przy użyciu <xref:System.Data.DataSet.WriteXml%2A> metody. Aby odczytać dokumentu XML, która obejmuje zarówno schematu, jak i dane, należy użyć <xref:System.Data.DataSet.ReadXml%2A> metody.  
  
 W Typowa implementacja n warstwowych kroki służące do tworzenia i odświeżanie <xref:System.Data.DataSet>, i z kolei aktualizowanie oryginalnych danych:  
  
1.  Tworzenie i wypełnij każdego <xref:System.Data.DataTable> w <xref:System.Data.DataSet> danymi ze źródła danych przy użyciu <xref:System.Data.Common.DataAdapter>.  
  
2.  Zmień dane w poszczególnych <xref:System.Data.DataTable> obiektów przez dodawanie, aktualizowanie lub usuwanie <xref:System.Data.DataRow> obiektów.  
  
3.  Wywoływanie <xref:System.Data.DataSet.GetChanges%2A> metodę w celu utworzenia drugiej <xref:System.Data.DataSet> , zawiera tylko zmiany dotyczące danych.  
  
4.  Wywołaj <xref:System.Data.Common.DataAdapter.Update%2A> metody <xref:System.Data.Common.DataAdapter>, przekazując drugi <xref:System.Data.DataSet> jako argument.  
  
5.  Wywoływanie <xref:System.Data.DataSet.Merge%2A> metoda próby scalenia zmian z drugiego <xref:System.Data.DataSet> do pierwszej.  
  
6.  Wywoływanie <xref:System.Data.DataSet.AcceptChanges%2A> na <xref:System.Data.DataSet>. Alternatywnie wywołania <xref:System.Data.DataSet.RejectChanges%2A> Aby anulować zmiany.  
  
> [!NOTE]
>  <xref:System.Data.DataSet> i <xref:System.Data.DataTable> obiekty dziedziczyć <xref:System.ComponentModel.MarshalByValueComponent>i obsługuje <xref:System.Runtime.Serialization.ISerializable> interfejs do komunikacji zdalnej. Są to jedyne obiekty ADO.NET, które mogą być w węzłach.  
  
> [!NOTE]
>  Odziedziczone po klasach <xref:System.Data.DataSet> zostały zakończone przez moduł odśmiecania pamięci, ponieważ finalizator został pominięty w <xref:System.Data.DataSet>. Klasa pochodna może wywołać <xref:System.GC.ReRegisterForFinalize%2A> metody w jego konstruktorze, aby umożliwić klasy, która ma zostać opracowane przez moduł odśmiecania pamięci.  
  
   
  
## Examples  
 Poniższy przykład obejmuje kilka metod, które w połączeniu, Utwórz i wypełnij <xref:System.Data.DataSet> z **Northwind** bazy danych.  
  
 [!code-csharp[Classic WebData DataSet Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Ten typ jest bezpieczne dla operacji wielowątkowych odczytu. Należy zsynchronizować wszystkie operacje zapisu.</threadsafe>
    <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.DataSet" /> klasy.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataSet ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataSet();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.DataSet" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja <xref:System.Data.DataSet> Konstruktor nie przyjmuje żadnych parametrów i tworzy nazwę domyślną "NewDataSet," nowego wystąpienia.  
  
 Nazwę <xref:System.Data.DataSet> jest wymagany do zapewnienia, że reprezentacja XML <xref:System.Data.DataSet> zawsze ma nazwę element dokumentu, który jest elementem najwyższego poziomu w definicji schematu.  
  
   
  
## Examples  
 Poniższy przykład tworzy nowy <xref:System.Data.DataSet>i dodaje dwie <xref:System.Data.DataTable> obiekty do niego.  
  
 [!code-vb[Classic WebData DataSet.DataSet Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.DataSet Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.DataTableCollection" />
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataSet (string dataSetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string dataSetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dataSetName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataSet(System::String ^ dataSetName);" />
      <MemberSignature Language="F#" Value="new System.Data.DataSet : string -&gt; System.Data.DataSet" Usage="new System.Data.DataSet dataSetName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dataSetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSetName">Nazwa <see cref="T:System.Data.DataSet" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.DataSet" /> klasy o podanej nazwie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nazwę <xref:System.Data.DataSet> jest wymagany do zapewnienia, że reprezentacja XML <xref:System.Data.DataSet> zawsze ma nazwę element dokumentu, który jest elementem najwyższego poziomu w definicji schematu.  
  
   
  
## Examples  
 Poniższy przykład tworzy nowy <xref:System.Data.DataSet>, do których dwóch <xref:System.Data.DataTable> obiekty zostaną dodane.  
  
 [!code-vb[Classic WebData DataSet.DataSet1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.DataSet1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataSet.DataSetName" />
        <altmember cref="T:System.Data.DataTableCollection" />
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DataSet (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DataSet(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new System.Data.DataSet : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; System.Data.DataSet" Usage="new System.Data.DataSet (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">Dane potrzebne do serializacji lub deserializacji obiektu.</param>
        <param name="context">Źródło i miejsce docelowe danego strumienia serializacji.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.DataSet" /> klasy, która ma informacje o danym serializacji i kontekstu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
[!INCLUDE [untrusted-data-instance-note](~/includes/untrusted-data-instance-note.md)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DataSet (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context, bool ConstructSchema);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context, bool ConstructSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext, ConstructSchema As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DataSet(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context, bool ConstructSchema);" />
      <MemberSignature Language="F#" Value="new System.Data.DataSet : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext * bool -&gt; System.Data.DataSet" Usage="new System.Data.DataSet (info, context, ConstructSchema)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="ConstructSchema" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo" /> Obiektu.</param>
        <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext" /> Obiektu.</param>
        <param name="ConstructSchema">Wartość logiczna.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.DataSet" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
[!INCLUDE [untrusted-data-instance-note](~/includes/untrusted-data-instance-note.md)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptChanges">
      <MemberSignature Language="C#" Value="public void AcceptChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcceptChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.AcceptChanges" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcceptChanges ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcceptChanges();" />
      <MemberSignature Language="F#" Value="member this.AcceptChanges : unit -&gt; unit" Usage="dataSet.AcceptChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zatwierdza wszystkie zmiany wprowadzone w tym <see cref="T:System.Data.DataSet" /> od momentu załadowania lub od czasu ostatniego <see cref="M:System.Data.DataSet.AcceptChanges" /> została wywołana.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zarówno <xref:System.Data.DataRow> i <xref:System.Data.DataTable> klasy mają <xref:System.Data.DataSet.AcceptChanges%2A> metody. Wywoływanie <xref:System.Data.DataTable.AcceptChanges%2A> na <xref:System.Data.DataTable> poziomu powoduje, że <xref:System.Data.DataRow.AcceptChanges%2A> metody dla każdego <xref:System.Data.DataRow> do wywołania. Podobnie jest wywoływania <xref:System.Data.DataSet.AcceptChanges%2A> na <xref:System.Data.DataSet> powoduje, że <xref:System.Data.DataTable.AcceptChanges%2A> ma być wywoływana dla każdej tabeli na <xref:System.Data.DataSet>. W ten sposób można mieć wiele poziomów, w których może być wywołana metoda. Wywoływanie <xref:System.Data.DataSet.AcceptChanges%2A> z <xref:System.Data.DataSet> można wywołać metody dla wszystkich obiektów podrzędnych (na przykład, tabele i wiersze) za pomocą jednego wywołania.  
  
 Gdy wywołujesz `AcceptChanges` na `DataSet`, any <xref:System.Data.DataRow> obiekty nadal w trybie edycji pomyślnie zakończyć swoje zmiany. <xref:System.Data.DataRow.RowState%2A> Właściwości każdego <xref:System.Data.DataRow> zmienia także; `Added` i `Modified` wierszy stają się `Unchanged`, i `Deleted` wiersze zostaną usunięte.  
  
 Jeśli `DataSet` zawiera <xref:System.Data.ForeignKeyConstraint> obiektów i wywoływania `AcceptChanges` metoda również powoduje, że <xref:System.Data.ForeignKeyConstraint.AcceptRejectRule%2A> zostaną wymuszone.  
  
> [!NOTE]
>  `AcceptChanges` i `RejectChanges` dotyczą tylko `DataRow` powiązanych zmian, (oznacza to, Dodaj, Usuń, usuwanie i modyfikowanie). Nie mają zastosowania do schematu lub zmian strukturalnych.  
>   
>  Wywołaniem funkcji AcceptChanges nie będzie replikować tych zmian do źródła danych, jeśli zestaw danych został wypełniony przy użyciu elementu DataAdapter. W takiej sytuacji należy wywołać <xref:System.Data.Common.DataAdapter.Update%2A> zamiast tego. Zobacz [aktualizowanie źródeł danych za pomocą elementów DataAdapters](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md) Aby uzyskać więcej informacji.  
  
   
  
## Examples  
 W poniższym przykładzie dodano <xref:System.Data.DataRow> do <xref:System.Data.DataTable> w <xref:System.Data.DataSet>. <xref:System.Data.DataSet.AcceptChanges%2A> Wywoływana jest metoda następnie <xref:System.Data.DataSet>, które kaskady, do wszystkich <xref:System.Data.DataTable> obiektów, które zawiera.  
  
 [!code-csharp[Classic WebData DataSet.AcceptChanges#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.AcceptChanges/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.AcceptChanges#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.AcceptChanges/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberSignature Language="F#" Value="abstract member BeginInit : unit -&gt; unit&#xA;override this.BeginInit : unit -&gt; unit" Usage="dataSet.BeginInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rozpoczyna się inicjowanie <see cref="T:System.Data.DataSet" /> który jest używany w formularzu lub używany przez inny składnik. Inicjowanie odbywa się w czasie wykonywania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Środowisku projektowym programu Visual Studio .NET używa tej metody, aby rozpocząć inicjowanie składnik, który jest używany w formularzu lub używany przez inny składnik. <xref:System.Data.DataSet.EndInit%2A> Metoda kończy się inicjowanie. Za pomocą <xref:System.Data.DataSet.BeginInit%2A> i <xref:System.Data.DataSet.EndInit%2A> metody zapobiega używana przed pełnym zainicjowaniem formantu.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CaseSensitive">
      <MemberSignature Language="C#" Value="public bool CaseSensitive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CaseSensitive" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.CaseSensitive" />
      <MemberSignature Language="VB.NET" Value="Public Property CaseSensitive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CaseSensitive { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CaseSensitive : bool with get, set" Usage="System.Data.DataSet.CaseSensitive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetCaseSensitiveDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą czy ciągów porównań, w ramach <see cref="T:System.Data.DataTable" /> obiektów jest rozróżniana wielkość liter.</summary>
        <value><see langword="true" /> Jeśli w porównaniach ciągów jest rozróżniana wielkość liter; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet.CaseSensitive%2A> Właściwość ma wpływ na sposób sortowanie, wyszukiwanie i filtrowanie operacje są wykonywane na każdym <xref:System.Data.DataTable> obiekt znajdujący się w <xref:System.Data.DataSet> przy użyciu <xref:System.Data.DataTable.Select%2A> metody.  
  
 Domyślnie ustawienie <xref:System.Data.DataSet.CaseSensitive%2A> właściwość <xref:System.Data.DataSet> ustawia również <xref:System.Data.DataTable.CaseSensitive%2A> właściwości każdego skojarzone <xref:System.Data.DataTable> taką samą wartość.  
  
   
  
## Examples  
 W poniższym przykładzie <xref:System.Data.DataSet.CaseSensitive%2A> właściwości.  
  
 [!code-vb[Classic WebData DataSet.CaseSensitive Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.CaseSensitive Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="dataSet.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Czyści <see cref="T:System.Data.DataSet" /> dowolnych danych przez usunięcie wszystkich wierszy we wszystkich tabelach.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Data.DataSet> jest powiązany z <xref:System.Xml.XmlDataDocument>, wywoływania <xref:System.Data.DataSet.Clear%2A?displayProperty=nameWithType> lub <xref:System.Data.DataTable.Clear%2A?displayProperty=nameWithType> zgłasza <xref:System.NotSupportedException>. Aby uniknąć tej sytuacji, przechodzić każdej tabeli, usuwanie każdego wiersza, jeden w danym momencie.  
  
   
  
## Examples  
 Poniższy przykład czyści <xref:System.Data.DataSet> wszystkich wierszy we wszystkich tabelach.  
  
 [!code-csharp[Classic WebData DataSet.Clear Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Clear Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Clear Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Clear Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual System.Data.DataSet Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.DataSet Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Data::DataSet ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; System.Data.DataSet&#xA;override this.Clone : unit -&gt; System.Data.DataSet" Usage="dataSet.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Kopiuje strukturę <see cref="T:System.Data.DataSet" />, łącznie ze wszystkimi <see cref="T:System.Data.DataTable" /> schematów, relacje i ograniczenia. Kopiuje wszystkie dane.</summary>
        <returns>Nowy <see cref="T:System.Data.DataSet" /> przy użyciu tego samego schematu jako bieżący <see cref="T:System.Data.DataSet" />, ale żadne dane.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Jeśli podklasy klasy te klonu będą się również z tego samego podklas.  
  
   
  
## Examples  
 Poniższy przykład obejmuje tworzenie własnego klonu <xref:System.Data.DataSet> schemacie obiektu.  
  
 [!code-csharp[Classic WebData DataSet.Clone Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Clone Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Clone Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Clone Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataSet.Copy" />
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Data.DataSet Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataSet Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy () As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataSet ^ Copy();" />
      <MemberSignature Language="F#" Value="member this.Copy : unit -&gt; System.Data.DataSet" Usage="dataSet.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Kopiuje struktury i danych w tym <see cref="T:System.Data.DataSet" />.</summary>
        <returns>Nowy <see cref="T:System.Data.DataSet" /> z taką samą strukturę (schematów tabel, relacje i ograniczenia) oraz dane ponieważ <see cref="T:System.Data.DataSet" />.  
  
 <block subset="none" type="note"><para>  
 Jeśli podklasy klasy te kopii będzie się również z tego samego podklas.  
  
</para></block></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Data.DataSet.Copy%2A> metodę, aby utworzyć kopię oryginału <xref:System.Data.DataSet>.  
  
 [!code-csharp[Classic WebData DataSet.Copy Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Copy Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Copy Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Copy Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataSet.Clone" />
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateDataReader">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca <see cref="T:System.Data.DataTableReader" /> z jednego wyniku ustawiana dla poszczególnych <see cref="T:System.Data.DataTable" />w sekwencji takie same jak tabele są wyświetlane <see cref="P:System.Data.DataSet.Tables" /> kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W celu zapewnienia kolejność zestawów wyników w ciągu zwracanym <xref:System.Data.DataTableReader>, jeśli <xref:System.Data.DataTable> w ramach <xref:System.Data.DataSet> jest pusta, jego będą reprezentowane przez puste zestawu wyników w ciągu zwracanym `DataTableReader`.  
  
   
  
## Examples  
 Przykład aplikacji konsoli, tworzy trzy <xref:System.Data.DataTable> wystąpień i dodaje do <xref:System.Data.DataSet>. Przykład wywołuje <xref:System.Data.DataSet.CreateDataReader%2A> metody i wyświetla zawartość zwracanego <xref:System.Data.DataTableReader>. Należy zauważyć, że kolejność wyniku ustawia w `DataTableReader` jest kontrolowany przez z `DataTable` wystąpień przekazywane jako parametry.  
  
> [!NOTE]
>  W tym przykładzie pokazano, jak użyć jednej z przeciążone wersje `CreateDataReader`. Inne przykłady, które mogą być dostępne znajduje się w tematach poszczególnych przeciążeń.  
  
 [!code-csharp[DataWorks DataSet.CreateDataReader#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.CreateDataReader/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.CreateDataReader#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.CreateDataReader/VB/source.vb#1)]  
  
 Poniższy kod w przykładzie są wyświetlane w oknie konsoli:  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateDataReader">
      <MemberSignature Language="C#" Value="public System.Data.DataTableReader CreateDataReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTableReader CreateDataReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.CreateDataReader" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateDataReader () As DataTableReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataTableReader ^ CreateDataReader();" />
      <MemberSignature Language="F#" Value="member this.CreateDataReader : unit -&gt; System.Data.DataTableReader" Usage="dataSet.CreateDataReader " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTableReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca <see cref="T:System.Data.DataTableReader" /> z jednego wyniku ustawiana dla poszczególnych <see cref="T:System.Data.DataTable" />w sekwencji takie same jak tabele są wyświetlane <see cref="P:System.Data.DataSet.Tables" /> kolekcji.</summary>
        <returns>A <see cref="T:System.Data.DataTableReader" /> zawierający zestawów wyników, odpowiadający <see cref="T:System.Data.DataTable" /> wystąpień znajdujących się w źródle <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W celu zapewnienia kolejność zestawów wyników w ciągu zwracanym <xref:System.Data.DataTableReader>, jeśli <xref:System.Data.DataTable> w ramach <xref:System.Data.DataSet> jest pusta, jest reprezentowana przez pustego zestawu wyników w ciągu zwracanym `DataTableReader`.  
  
   
  
## Examples  
 Poniższy przykład tworzy trzy <xref:System.Data.DataTable> wystąpień i dodaje do <xref:System.Data.DataSet>. Następnie przykład przekazuje wypełniony `DataSet` do procedury, która wywołuje <xref:System.Data.DataSet.CreateDataReader%2A> metoda i przychody do iterowania po wszystkich zawartych w zestawach wyników <xref:System.Data.DataTableReader>. Przykład wyświetla wyniki w oknie konsoli.  
  
 [!code-csharp[DataWorks DataSet.DataTableReader#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.DataTableReader/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.DataTableReader#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.DataTableReader/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CreateDataReader">
      <MemberSignature Language="C#" Value="public System.Data.DataTableReader CreateDataReader (params System.Data.DataTable[] dataTables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTableReader CreateDataReader(class System.Data.DataTable[] dataTables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.CreateDataReader(System.Data.DataTable[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateDataReader (ParamArray dataTables As DataTable()) As DataTableReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataTableReader ^ CreateDataReader(... cli::array &lt;System::Data::DataTable ^&gt; ^ dataTables);" />
      <MemberSignature Language="F#" Value="member this.CreateDataReader : System.Data.DataTable[] -&gt; System.Data.DataTableReader" Usage="dataSet.CreateDataReader dataTables" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTableReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTables" Type="System.Data.DataTable[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-2.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="dataTables">Ustawia tablicę DataTable, zapewniając kolejność wyniku, ma zostać zwrócone w <see cref="T:System.Data.DataTableReader" />.</param>
        <summary>Zwraca <see cref="T:System.Data.DataTableReader" /> z jednego wyniku ustawiana dla poszczególnych <see cref="T:System.Data.DataTable" />.</summary>
        <returns>A <see cref="T:System.Data.DataTableReader" /> zawierający zestawów wyników, odpowiadający <see cref="T:System.Data.DataTable" /> wystąpień znajdujących się w źródle <see cref="T:System.Data.DataSet" />. Zestawy wyników zwrócone znajdują się w kolejności określonej przez <paramref name="dataTables" /> parametru.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W celu zapewnienia, że kolejność wyniku ustawia w zwracanym <xref:System.Data.DataTableReader>, jeśli <xref:System.Data.DataTable> w ramach <xref:System.Data.DataSet> jest pusta, jest reprezentowana przez pustego zestawu wyników w ciągu zwracanym `DataTableReader`. Ponieważ ta wersja przeciążona pozwala podać listę `DataTable` wystąpienia jako parametry, można określić kolejność wyświetlania zestawów wyników w ciągu zwracanym `DataTableReader`.  
  
   
  
## Examples  
 Przykład aplikacji konsoli, tworzy trzy <xref:System.Data.DataTable> wystąpień i dodaje do <xref:System.Data.DataSet>. Przykład wywołuje <xref:System.Data.DataSet.CreateDataReader%2A> metody i wyświetla zawartość zwracanego <xref:System.Data.DataTableReader>. Należy zauważyć, że kolejność wyniku ustawia w `DataTableReader` jest kontrolowany przez z `DataTable` wystąpień przekazywane jako parametry. Przykład wyświetla wyniki w oknie konsoli.  
  
 [!code-csharp[DataWorks DataSet.DataTableReaderTables#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.DataTableReaderTables/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.DataTableReaderTables#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.DataTableReaderTables/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="DataSetName">
      <MemberSignature Language="C#" Value="public string DataSetName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataSetName" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.DataSetName" />
      <MemberSignature Language="VB.NET" Value="Public Property DataSetName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataSetName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataSetName : string with get, set" Usage="System.Data.DataSet.DataSetName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetDataSetNameDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę bieżącego <see cref="T:System.Data.DataSet" />.</summary>
        <value>Nazwa <see cref="T:System.Data.DataSet" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład tworzy nowy <xref:System.Data.DataSet> z danym <xref:System.Data.DataSet.DataSetName%2A>.  
  
 [!code-csharp[Classic WebData DataSet.DataSetName Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.DataSetName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.DataSetName Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.DataSetName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="DefaultViewManager">
      <MemberSignature Language="C#" Value="public System.Data.DataViewManager DefaultViewManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataViewManager DefaultViewManager" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.DefaultViewManager" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultViewManager As DataViewManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataViewManager ^ DefaultViewManager { System::Data::DataViewManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultViewManager : System.Data.DataViewManager" Usage="System.Data.DataSet.DefaultViewManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetDefaultViewDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataViewManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera niestandardowy widok danych zawartych w <see cref="T:System.Data.DataSet" /> umożliwia filtrowanie, wyszukiwanie i nawigowania za pomocą niestandardowego <see cref="T:System.Data.DataViewManager" />.</summary>
        <value>Element <see cref="T:System.Data.DataViewManager" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataViewManager> Zwrócone przez <xref:System.Data.DataSet.DefaultViewManager%2A> Właściwość pozwala utworzyć ustawienia niestandardowe dla każdego <xref:System.Data.DataTable> w <xref:System.Data.DataSet>.  
  
 Podczas uzyskiwania <xref:System.Data.DataView> z <xref:System.Data.DataTable>, kolejność sortowania, filtrowania i <xref:System.Data.DataViewRowState> są skonfigurowane zgodnie z ustawieniami <xref:System.Data.DataSet.DefaultViewManager%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład pobiera domyślny <xref:System.Data.DataViewManager> dla <xref:System.Data.DataSet>i dodaje <xref:System.Data.DataTable> do <xref:System.Data.DataTableCollection>.  
  
 [!code-vb[Classic WebData DataSet.DefaultViewManager Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.DefaultViewManager Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DetermineSchemaSerializationMode">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Określa <see cref="P:System.Data.DataSet.SchemaSerializationMode" /> dla <see cref="T:System.Data.DataSet" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tę metodę można wywołać podczas deserializacji wpisane <xref:System.Data.DataSet> ustalenie jego <xref:System.Data.DataSet.SchemaSerializationMode%2A>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="DetermineSchemaSerializationMode">
      <MemberSignature Language="C#" Value="protected System.Data.SchemaSerializationMode DetermineSchemaSerializationMode (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Data.SchemaSerializationMode DetermineSchemaSerializationMode(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.DetermineSchemaSerializationMode(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Protected Function DetermineSchemaSerializationMode (reader As XmlReader) As SchemaSerializationMode" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Data::SchemaSerializationMode DetermineSchemaSerializationMode(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.DetermineSchemaSerializationMode : System.Xml.XmlReader -&gt; System.Data.SchemaSerializationMode" Usage="dataSet.DetermineSchemaSerializationMode reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SchemaSerializationMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader"><see cref="T:System.Xml.XmlReader" /> Wystąpienia, który jest przekazywany podczas deserializacji obiektu danych <see cref="T:System.Data.DataSet" />.</param>
        <summary>Określa <see cref="P:System.Data.DataSet.SchemaSerializationMode" /> dla <see cref="T:System.Data.DataSet" />.</summary>
        <returns><see cref="T:System.Data.SchemaSerializationMode" /> Wyliczenie wskazujące, czy informacje o schemacie została pominięta z ładunku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tę metodę można wywołać podczas deserializacji wpisane <xref:System.Data.DataSet> ustalenie jego <xref:System.Data.DataSet.SchemaSerializationMode%2A>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="DetermineSchemaSerializationMode">
      <MemberSignature Language="C#" Value="protected System.Data.SchemaSerializationMode DetermineSchemaSerializationMode (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Data.SchemaSerializationMode DetermineSchemaSerializationMode(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Function DetermineSchemaSerializationMode (info As SerializationInfo, context As StreamingContext) As SchemaSerializationMode" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Data::SchemaSerializationMode DetermineSchemaSerializationMode(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="member this.DetermineSchemaSerializationMode : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; System.Data.SchemaSerializationMode" Usage="dataSet.DetermineSchemaSerializationMode (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SchemaSerializationMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo" /> , <see langword="DataSet" />Użytkownika chroniony Konstruktor <see cref="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> jest wywoływana z podczas deserializacji w scenariuszach komunikacji zdalnej.</param>
        <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext" /> , <see langword="DataSet" />Użytkownika chroniony Konstruktor <see cref="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> jest wywoływana z podczas deserializacji w scenariuszach komunikacji zdalnej.</param>
        <summary>Określa <see cref="P:System.Data.DataSet.SchemaSerializationMode" /> dla <see cref="T:System.Data.DataSet" />.</summary>
        <returns><see cref="T:System.Data.SchemaSerializationMode" /> Wyliczenie wskazujące, czy informacje o schemacie została pominięta z ładunku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tę metodę można wywołać podczas deserializacji wpisane <xref:System.Data.DataSet> ustalenie jego <xref:System.Data.DataSet.SchemaSerializationMode%2A>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberSignature Language="F#" Value="abstract member EndInit : unit -&gt; unit&#xA;override this.EndInit : unit -&gt; unit" Usage="dataSet.EndInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Kończy się inicjowanie <see cref="T:System.Data.DataSet" /> który jest używany w formularzu lub używany przez inny składnik. Inicjowanie odbywa się w czasie wykonywania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Środowisko projektowania programu Visual Studio .NET używa tej metody, aby zakończyć inicjowanie składnik, który jest używany w formularzu lub używany przez inny składnik. <xref:System.Data.DataSet.BeginInit%2A> Metoda uruchamia inicjowania. Za pomocą <xref:System.Data.DataSet.BeginInit%2A> i <xref:System.Data.DataSet.EndInit%2A> metody zapobiega używana przed pełnym zainicjowaniem formantu.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="EnforceConstraints">
      <MemberSignature Language="C#" Value="public bool EnforceConstraints { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnforceConstraints" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.EnforceConstraints" />
      <MemberSignature Language="VB.NET" Value="Public Property EnforceConstraints As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnforceConstraints { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnforceConstraints : bool with get, set" Usage="System.Data.DataSet.EnforceConstraints" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetEnforceConstraintsDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy reguły ograniczenia zostaną wykonane prawidłowo, podczas próby wykonania operacji żadnych aktualizacji.</summary>
        <value><see langword="true" /> Jeśli zasady są wymuszane; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ograniczenia są ustawione na poziomie <xref:System.Data.DataTable> poziom (<xref:System.Data.DataTable.Constraints%2A> właściwości). Aby uzyskać więcej informacji o tworzeniu ograniczeń, zobacz [ograniczenia elementu DataTable](~/docs/framework/data/adonet/dataset-datatable-dataview/datatable-constraints.md).  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Data.DataSet> z jednej tabeli, jedną kolumnę, pięć wierszy i jeden <xref:System.Data.UniqueConstraint>. <xref:System.Data.DataSet.EnforceConstraints%2A> Właściwość jest ustawiona na `false` i wartości każdego wiersza są ustawiane na tę samą wartość. Gdy <xref:System.Data.DataSet.EnforceConstraints%2A> właściwość jest resetowana do `true`, <xref:System.Data.ConstraintException> jest generowany.  
  
 [!code-csharp[Classic WebData DataSet.EnforceConstraints Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.EnforceConstraints Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.EnforceConstraints Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.EnforceConstraints Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.ConstraintException">Nie można wymusić co najmniej jedno ograniczenie.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ExtendedProperties">
      <MemberSignature Language="C#" Value="public System.Data.PropertyCollection ExtendedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.PropertyCollection ExtendedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.ExtendedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExtendedProperties As PropertyCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::PropertyCollection ^ ExtendedProperties { System::Data::PropertyCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExtendedProperties : System.Data.PropertyCollection" Usage="System.Data.DataSet.ExtendedProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("ExtendedPropertiesDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.PropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję niestandardowych informacji o użytkowników skojarzonych z <see langword="DataSet" />.</summary>
        <value>A <see cref="T:System.Data.PropertyCollection" /> wszystkie informacje użytkownika niestandardowego.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet.ExtendedProperties%2A> Właściwość pozwala do przechowywania informacji niestandardowych o `DataSet`. Na przykład może przechowywać czas, kiedy należy odświeżyć dane.  
  
 Właściwości rozszerzone musi być typu <xref:System.String> należy je utrwalone po <xref:System.Data.DataSet> jest zapisywane w formacie XML.  
  
   
  
## Examples  
 Poniższy przykład dodaje właściwość niestandardową do <xref:System.Data.PropertyCollection> zwrócone przez <xref:System.Data.DataColumn.ExtendedProperties%2A> właściwości. Drugi przykład pobiera właściwości niestandardowej.  
  
 [!code-csharp[Classic WebData DataColumn.ExtendedProperties Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ExtendedProperties Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ExtendedProperties Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ExtendedProperties Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChanges">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera kopię <see cref="T:System.Data.DataSet" /> zawierający wszystkie zmiany wprowadzone od czasu ostatniego załadowania lub od <see cref="M:System.Data.DataSet.AcceptChanges" /> została wywołana.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChanges">
      <MemberSignature Language="C#" Value="public System.Data.DataSet GetChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataSet GetChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetChanges" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChanges () As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataSet ^ GetChanges();" />
      <MemberSignature Language="F#" Value="member this.GetChanges : unit -&gt; System.Data.DataSet" Usage="dataSet.GetChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera kopię <see cref="T:System.Data.DataSet" /> zawierający wszystkie zmiany wprowadzone od momentu załadowania lub od momentu <see cref="M:System.Data.DataSet.AcceptChanges" /> ostatnio została wywołana.</summary>
        <returns>Kopiowanie zmian z tego <see cref="T:System.Data.DataSet" /> mają akcje wykonywane w nim, a później można scalić w przy użyciu <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" />. Jeśli nie zostaną znalezione nie zmienionych wierszy, metoda zwraca <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tworzy nową <xref:System.Data.DataSet> zawierający kopię wszystkich wierszy w oryginalnym <xref:System.Data.DataSet> , które mają oczekujące zmiany. Ograniczenia relacji może spowodować, że dodatkowe wiersze bez zmian do dodania do nowej <xref:System.Data.DataSet> Jeśli niezmienione wiersze zawierają klucze podstawowe odpowiadający klucze obce w zmienionych wierszy. Metoda ta zwraca `null` , jeśli nie ma żadnych wierszy w oryginalnym <xref:System.Data.DataSet> , które mają oczekujące zmiany.  
  
   
  
## Examples  
 Poniższy przykład tworzy prostą <xref:System.Data.DataSet> z jednej tabeli, dwóch kolumn i dziesięć wierszy. Dwie wartości są zmieniane i dodaniu jeden wiersz. Podzestaw zmienionych danych jest tworzona przy użyciu <xref:System.Data.DataSet.GetChanges%2A> metody. Po uzgodnieniu błędy, nowa kolumna zostanie dodana do podzbioru zmiana schematu. Gdy <xref:System.Data.DataSet.Merge%2A> metoda jest wywoływana z `missingSchemaAction` równa `MissingSchemaAction.Add`, nowa kolumna zostanie dodana do oryginalnego <xref:System.Data.DataSet> schemacie obiektu.  
  
 [!code-csharp[Classic WebData DataSet.GetChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataSet.HasChanges" />
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetChanges">
      <MemberSignature Language="C#" Value="public System.Data.DataSet GetChanges (System.Data.DataRowState rowStates);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataSet GetChanges(valuetype System.Data.DataRowState rowStates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetChanges(System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChanges (rowStates As DataRowState) As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataSet ^ GetChanges(System::Data::DataRowState rowStates);" />
      <MemberSignature Language="F#" Value="member this.GetChanges : System.Data.DataRowState -&gt; System.Data.DataSet" Usage="dataSet.GetChanges rowStates" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowStates" Type="System.Data.DataRowState" />
      </Parameters>
      <Docs>
        <param name="rowStates">Jedną z <see cref="T:System.Data.DataRowState" /> wartości.</param>
        <summary>Pobiera kopię <see cref="T:System.Data.DataSet" /> zawierający wszystkie zmiany wprowadzone od czasu ostatniego załadowania lub od <see cref="M:System.Data.DataSet.AcceptChanges" /> była wywoływana, przefiltrowane przez <see cref="T:System.Data.DataRowState" />.</summary>
        <returns>Filtrowane kopię <see cref="T:System.Data.DataSet" /> mają akcje wykonywane na nim, a następnie zostać scalone w użyciu <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" />. Jeśli nie wiersze żądaną <see cref="T:System.Data.DataRowState" /> zostaną znalezione, metoda zwraca <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet.GetChanges%2A> Metoda jest używana w celu utworzenia drugiej <xref:System.Data.DataSet> obiekt, który zawiera tylko zmiany wprowadzone do oryginalnego. Użyj `rowStates` argumentu, aby określić typ zmiany powinien zawierać nowy obiekt.  
  
 Ta wartość zwracana kopiowania zaprojektowano w celu scalenia w tym oryginalnego <xref:System.Data.DataSet>. Ograniczenia relacji może spowodować, że wiersze nadrzędne oznaczone `Unchanged` do uwzględnienia. Jeśli nie wiersze żądaną <xref:System.Data.DataRowState> zostaną znalezione, <xref:System.Data.DataSet.GetChanges%2A> metoda zwraca `null`.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Data.DataSet.GetChanges%2A> metodę w celu utworzenia drugiej <xref:System.Data.DataSet> obiektu, który jest następnie używany do aktualizacji źródła danych.  
  
 [!code-csharp[Classic WebData DataSet.GetChanges1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetChanges1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetDataSetSchema">
      <MemberSignature Language="C#" Value="public static System.Xml.Schema.XmlSchemaComplexType GetDataSetSchema (System.Xml.Schema.XmlSchemaSet schemaSet);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Schema.XmlSchemaComplexType GetDataSetSchema(class System.Xml.Schema.XmlSchemaSet schemaSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDataSetSchema (schemaSet As XmlSchemaSet) As XmlSchemaComplexType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Schema::XmlSchemaComplexType ^ GetDataSetSchema(System::Xml::Schema::XmlSchemaSet ^ schemaSet);" />
      <MemberSignature Language="F#" Value="static member GetDataSetSchema : System.Xml.Schema.XmlSchemaSet -&gt; System.Xml.Schema.XmlSchemaComplexType" Usage="System.Data.DataSet.GetDataSetSchema schemaSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaComplexType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaSet" Type="System.Xml.Schema.XmlSchemaSet" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="schemaSet">Zestaw określony schemat.</param>
        <summary>Pobiera kopię <see cref="T:System.Xml.Schema.XmlSchemaSet" /> dla zestawu danych.</summary>
        <returns>Kopię <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="dataSet.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> przechowuje serializowane dane skojarzone z <see cref="T:System.Data.DataSet" />.</param>
        <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> zawierający źródło i miejsce docelowe serializowanym strumieniu skojarzonych z <see cref="T:System.Data.DataSet" />.</param>
        <summary>Wypełnia obiekt informacji o serializacji dane potrzebne do serializacji <see cref="T:System.Data.DataSet" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="info" /> Parametr <see langword="null" />.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetSchemaSerializable">
      <MemberSignature Language="C#" Value="protected virtual System.Xml.Schema.XmlSchema GetSchemaSerializable ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xml.Schema.XmlSchema GetSchemaSerializable() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetSchemaSerializable" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetSchemaSerializable () As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xml::Schema::XmlSchema ^ GetSchemaSerializable();" />
      <MemberSignature Language="F#" Value="abstract member GetSchemaSerializable : unit -&gt; System.Xml.Schema.XmlSchema&#xA;override this.GetSchemaSerializable : unit -&gt; System.Xml.Schema.XmlSchema" Usage="dataSet.GetSchemaSerializable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca serializacji <see cref="T:System.Xml.Schema.XmlSchema" /> wystąpienia.</summary>
        <returns><see cref="T:System.Xml.Schema.XmlSchema" /> Wystąpienia.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSerializationData">
      <MemberSignature Language="C#" Value="protected void GetSerializationData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void GetSerializationData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub GetSerializationData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void GetSerializationData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="member this.GetSerializationData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="dataSet.GetSerializationData (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo" /> Wystąpienia.</param>
        <param name="context">Kontekst strumieniowy.</param>
        <summary>Deserializuje dane w tabeli z pliku binarnego lub strumienia XML.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXml">
      <MemberSignature Language="C#" Value="public string GetXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetXml" />
      <MemberSignature Language="VB.NET" Value="Public Function GetXml () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetXml();" />
      <MemberSignature Language="F#" Value="member this.GetXml : unit -&gt; string" Usage="dataSet.GetXml " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca reprezentację XML danych przechowywanych w <see cref="T:System.Data.DataSet" />.</summary>
        <returns>Ciąg, oznacza to reprezentacja danych przechowywanych w <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołanie tej metody jest taka sama jak wywołanie <xref:System.Data.DataSet.WriteXml%2A> z <xref:System.Data.XmlWriteMode> równa <xref:System.Data.XmlWriteMode.IgnoreSchema>.  
  
 <xref:System.Data.DataSet.GetXml%2A> Zwraca kod XML jako ciąg i dlatego wymaga większe obciążenie niż <xref:System.Data.DataSet.WriteXml%2A> do zapisu w pliku XML.  
  
 W przypadku tworzenia <xref:System.Data.DataSet> przy użyciu wnioskowania schematu i serializować ją przy użyciu usług sieci Web lub XML, kolejność kolumn mogą ulec zmianie.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Data.DataSet> i <xref:System.Data.DataTable>, dodaje przykładowe dane i wyświetla dane w formacie XML.  
  
 [!code-csharp[Classic WebData DataSet.GetXml Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetXml Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetXml Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetXml Example/VB/source.vb#1)]  
  
 W tym przykładzie przedstawiono sposób zapisywania danych do pliku XML z zestawu danych i odczytywanie danych do zestawu danych z pliku XML. W tym przykładzie utworzysz jeden zestaw danych z dwoma tabelami, użyj dwa sposoby eksportowania zestawu danych w plikach XML (WriteXml i getxml —) i użyj dwa sposoby (ReadXml i InferXmlSchema), aby zaimportować zestaw danych z plików XML.  
  
 Aby skompilować i uruchomić przykład, należy utworzyć cztery pliki XML w katalogu próbki. Najpierw utwórz ElementsWithAttributes.xml:  
  
```xml  
<MySchool>  
  <Course CourseID="C1045" Year="2012"  Title="Calculus" Credits="4" DepartmentID="7">New</Course>  
  <Course CourseID="C1061" Year="2012"  Title="Physics" Credits="4" DepartmentID="1" />  
  <Department DepartmentID="1" Name="Engineering" Budget="350000" StartDate="2007-09-01T00:00:00+08:00" Administrator="2" />  
  <Department DepartmentID="7" Name="Mathematics" Budget="250024" StartDate="2007-09-01T00:00:00+08:00" Administrator="3">Cancelled</Department>  
</MySchool>  
```  
  
 Next, create ElementsWithChildElementsxml.xml:  
  
```xml  
<MySchool>  
  <Course>  
    <CourseID>C1045</CourseID>  
    <Year>2012</Year>  
    <Title>Calculus</Title>  
    <Credits>4</Credits>  
    <DepartmentID>7</DepartmentID>  
  </Course>  
  <Course>  
    <CourseID>C1061</CourseID>  
    <Year>2012</Year>  
    <Title>Physics</Title>  
    <Credits>4</Credits>  
    <DepartmentID>1</DepartmentID>  
  </Course>  
  <Course>  
    <CourseID>C2021</CourseID>  
    <Year>2012</Year>  
    <Title>Composition</Title>  
    <Credits>3</Credits>  
    <DepartmentID>2</DepartmentID>  
  </Course>  
  <Course>  
    <CourseID>C2042</CourseID>  
    <Year>2012</Year>  
    <Title>Literature</Title>  
    <Credits>4</Credits>  
    <DepartmentID>2</DepartmentID>  
  </Course>  
  <Department>  
    <DepartmentID>1</DepartmentID>  
    <Name>Engineering</Name>  
    <Budget>350000</Budget>  
    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  
    <Administrator>2</Administrator>  
  </Department>  
  <Department>  
    <DepartmentID>2</DepartmentID>  
    <Name>English</Name>  
    <Budget>120000</Budget>  
    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  
    <Administrator>6</Administrator>  
  </Department>  
  <Department>  
    <DepartmentID>4</DepartmentID>  
    <Name>Economics</Name>  
    <Budget>200000</Budget>  
    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  
    <Administrator>4</Administrator>  
  </Department>  
  <Department>  
    <DepartmentID>7</DepartmentID>  
    <Name>Mathematics</Name>  
    <Budget>250024</Budget>  
    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  
    <Administrator>3</Administrator>  
  </Department>  
</MySchool>  
```  
  
 Teraz Utwórz ElementsWithOnlyAttributes.xml:  
  
```xml
<MySchool>  
  <Course CourseID="C1045" Year="2012"  Title="Calculus" Credits="4" DepartmentID="7" />  
  <Course CourseID="C1061" Year="2012"  Title="Physics" Credits="4" DepartmentID="1" />  
  <Department DepartmentID="1" Name="Engineering" Budget="350000" StartDate="2007-09-01T00:00:00+08:00" Administrator="2" />  
  <Department DepartmentID="7" Name="Mathematics" Budget="250024" StartDate="2007-09-01T00:00:00+08:00" Administrator="3" />  
</MySchool>  
```  
  
 A na koniec Utwórz RepeatingElements.xml:  
  
```xml
<MySchool>  
  <Course>C1045</Course>  
  <Course>C1061</Course>  
  <Department>Engineering</Department>   
  <Department>Mathematics</Department>  
</MySchool>  
```  
  
 Teraz możesz skompilować i uruchom następujący kod źródłowy.  [Jak Store danych z zestawu danych do pliku XML](https://code.msdn.microsoft.com/How-to-Store-Data-of-7b9710f3) ma projektów Visual Basic i C# dla tego przykładu.  
  
```csharp
using System;  
using System.Data;  
using System.IO;  
using System.Text;  
using System.Xml;  
  
// Use WriteXml method to export the dataset.  
static class DataTableHelper {  
   public static void WriteDataSetToXML(DataSet dataset, String xmlFileName) {  
      using (FileStream fsWriterStream = new FileStream(xmlFileName, FileMode.Create)) {  
         using (XmlTextWriter xmlWriter = new XmlTextWriter(fsWriterStream, Encoding.Unicode)) {  
            dataset.WriteXml(xmlWriter, XmlWriteMode.WriteSchema);  
            Console.WriteLine("Write {0} to the File {1}.", dataset.DataSetName, xmlFileName);  
            Console.WriteLine();  
         }  
      }  
   }  
  
   // Use GetXml method to get the XML data of the dataset and then export to the file.  
   public static void GetXMLFromDataSet(DataSet dataset, String xmlFileName) {  
      using (StreamWriter writer = new StreamWriter(xmlFileName)) {  
         writer.WriteLine(dataset.GetXml());  
         Console.WriteLine("Get Xml data from {0} and write to the File {1}.", dataset.DataSetName, xmlFileName);  
         Console.WriteLine();  
      }  
   }  
  
   // Use ReadXml method to import the dataset from the dataset.  
   public static void ReadXmlIntoDataSet(DataSet newDataSet, String xmlFileName) {  
      using (FileStream fsReaderStream = new FileStream(xmlFileName, FileMode.Open)) {  
         using (XmlTextReader xmlReader = new XmlTextReader(fsReaderStream)) {  
            newDataSet.ReadXml(xmlReader, XmlReadMode.ReadSchema);  
         }  
      }  
   }  
  
   // Display the columns and value of DataSet.  
   public static void ShowDataSet(DataSet dataset) {  
      foreach (DataTable table in dataset.Tables) {  
         Console.WriteLine("Table {0}:", table.TableName);  
         ShowDataTable(table);  
      }  
   }  
  
   // Display the columns and value of DataTable.  
   private static void ShowDataTable(DataTable table) {  
      foreach (DataColumn col in table.Columns) {  
         Console.Write("{0,-14}", col.ColumnName);  
      }  
      Console.WriteLine("{0,-14}", "");  
  
      foreach (DataRow row in table.Rows) {  
         if (row.RowState == DataRowState.Deleted) {  
            foreach (DataColumn col in table.Columns) {  
               if (col.DataType.Equals(typeof(DateTime))) {  
                  Console.Write("{0,-14:d}", row[col, DataRowVersion.Original]);  
               }  
               else if (col.DataType.Equals(typeof(Decimal))) {  
                  Console.Write("{0,-14:C}", row[col, DataRowVersion.Original]);  
               }  
               else {  
                  Console.Write("{0,-14}", row[col, DataRowVersion.Original]);  
               }  
            }  
         }  
         else {  
            foreach (DataColumn col in table.Columns) {  
               if (col.DataType.Equals(typeof(DateTime))) {  
                  Console.Write("{0,-14:d}", row[col]);  
               }  
               else if (col.DataType.Equals(typeof(Decimal))) {  
                  Console.Write("{0,-14:C}", row[col]);  
               }  
               else {  
                  Console.Write("{0,-14}", row[col]);  
               }  
            }  
         }  
         Console.WriteLine("{0,-14}", "");  
      }  
   }  
  
   // Display the columns of DataSet.  
   public static void ShowDataSetSchema(DataSet dataSet) {  
      Console.WriteLine("{0} contains the following tables:", dataSet.DataSetName);  
      foreach (DataTable table in dataSet.Tables) {  
         Console.WriteLine("   Table {0} contains the following columns:", table.TableName);  
         ShowDataTableSchema(table);  
      }  
   }  
  
   // Display the columns of DataTable  
   private static void ShowDataTableSchema(DataTable table) {  
      String columnString = "";  
      foreach (DataColumn col in table.Columns) {  
         columnString += col.ColumnName + "   ";  
      }  
      Console.WriteLine(columnString);  
   }  
}  
  
class Program {  
   static void Main(string[] args) {  
      // Create the DataSet  
      DataSet school = new DataSet("MySchool");  
      DataTable course = CreateCourse();  
      DataTable department = CreateDepartment();  
      school.Tables.Add(course);  
      school.Tables.Add(department);  
  
      // Define the constraint between the tables.  
      ForeignKeyConstraint courseDepartFK = new ForeignKeyConstraint("CourseDepartFK", department.Columns["DepartmentID"], course.Columns["DepartmentID"]);  
      courseDepartFK.DeleteRule = Rule.Cascade;  
      courseDepartFK.UpdateRule = Rule.Cascade;  
      courseDepartFK.AcceptRejectRule = AcceptRejectRule.None;  
      course.Constraints.Add(courseDepartFK);  
  
      InsertDepartments(department);  
      InsertCourses(course);  
  
      // Export the dataset to the XML file.  
      Console.WriteLine("Data of the whole DataSet {0}", school.DataSetName);  
      DataTableHelper.ShowDataSet(school);  
  
      String xmlWithSchemaFileName = "WriterXMLWithSchema.xml";  
      String xmlGetDataFileName = "GetXML.xml";  
  
      // Use two ways to export the dataset to the Xml file.  
      DataTableHelper.WriteDataSetToXML(school, xmlWithSchemaFileName);  
      DataTableHelper.GetXMLFromDataSet(school, xmlGetDataFileName);  
  
      // Import the dataset from the XML file.  
      // Use two ways to import the dataset from the Xml file.  
      Console.WriteLine("Read Xml document into a new DataSet:");  
      DataSet newSchool = new DataSet("NewSchool");  
      DataTableHelper.ReadXmlIntoDataSet(newSchool, xmlWithSchemaFileName);  
      DataTableHelper.ShowDataSetSchema(newSchool);  
      Console.WriteLine();  
  
      Console.WriteLine("Infer a schema for a DataSet from an XML document:");  
      InferDataSetSchemaFromXml();  
  
      Console.WriteLine("Press any key to exit.");  
      Console.ReadKey();  
   }  
  
   static DataTable CreateCourse() {  
      DataTable course = new DataTable("Course");  
      DataColumn[] cols ={  
                              new DataColumn("CourseID",typeof(String)),  
                              new DataColumn("Year",typeof(Int32)),  
                              new DataColumn("Title",typeof(String)),  
                              new DataColumn("Credits",typeof(Int32)),  
                              new DataColumn("DepartmentID",typeof(Int32))};  
      course.Columns.AddRange(cols);  
  
      course.PrimaryKey = new DataColumn[] { course.Columns["CourseID"], course.Columns["Year"] };  
  
      return course;  
   }  
  
   static DataTable CreateDepartment() {  
      DataTable department = new DataTable("Department");  
      DataColumn[] cols = {   
                                new DataColumn("DepartmentID", typeof(Int32)),  
                                new DataColumn("Name",typeof(String)),  
                                new DataColumn("Budget",typeof(Decimal)),  
                                new DataColumn("StartDate",typeof(DateTime)),  
                                new DataColumn("Administrator",typeof(Int32))};  
      department.Columns.AddRange(cols);  
  
      department.PrimaryKey = new DataColumn[] { department.Columns["DepartmentID"] };  
  
      return department;  
   }  
  
   static void InsertDepartments(DataTable department) {  
      Object[] rows = {   
                            new Object[]{1,"Engineering",350000.00,new DateTime(2007,9,1),2},  
                            new Object[]{2,"English",120000.00,new DateTime(2007,9,1),6},  
                            new Object[]{4,"Economics",200000.00,new DateTime(2007,9,1),4},  
                            new Object[]{7,"Mathematics",250024.00,new DateTime(2007,9,1),3}};  
  
      foreach (Object[] row in rows) {  
         department.Rows.Add(row);  
      }  
   }  
  
   static void InsertCourses(DataTable course) {  
      Object[] rows ={  
                               new Object[]{"C1045",2012,"Calculus",4,7},  
                               new Object[]{"C1061",2012,"Physics",4,1},  
                               new Object[]{"C2021",2012,"Composition",3,2},  
                               new Object[]{"C2042",2012,"Literature",4,2}};  
  
      foreach (Object[] row in rows) {  
         course.Rows.Add(row);  
      }  
   }  
  
   // Display the results of inferring schema from four types of XML structures  
   private static void InferDataSetSchemaFromXml() {  
      String[] xmlFileNames = {   
  
                                    @"ElementsWithOnlyAttributes.xml",   
                                    @"ElementsWithAttributes.xml",  
                                    @"RepeatingElements.xml",   
                                    @"ElementsWithChildElements.xml" };  
  
      foreach (String xmlFileName in xmlFileNames) {  
         Console.WriteLine("Result of {0}", Path.GetFileNameWithoutExtension(xmlFileName));  
         DataSet newSchool = new DataSet();  
         newSchool.InferXmlSchema(xmlFileName, null);  
         DataTableHelper.ShowDataSetSchema(newSchool);  
         Console.WriteLine();  
      }  
   }  
}  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetXmlSchema">
      <MemberSignature Language="C#" Value="public string GetXmlSchema ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetXmlSchema() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetXmlSchema" />
      <MemberSignature Language="VB.NET" Value="Public Function GetXmlSchema () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetXmlSchema();" />
      <MemberSignature Language="F#" Value="member this.GetXmlSchema : unit -&gt; string" Usage="dataSet.GetXmlSchema " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca schemat XML Reprezentacja XML danych przechowywanych w <see cref="T:System.Data.DataSet" />.</summary>
        <returns>Ciąg znaków schemat XML Reprezentacja XML danych przechowywanych w <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołanie tej metody jest taka sama jak wywołania <xref:System.Data.DataSet.WriteXmlSchema%2A>, z tą różnicą, że tylko podstawowy schemat jest zapisywany.  
  
 <xref:System.Data.DataSet.GetXmlSchema%2A> Zwraca kod XML jako ciąg i dlatego wymaga większe obciążenie niż <xref:System.Data.DataSet.WriteXmlSchema%2A> do zapisu w pliku XML.  
  
 W przypadku tworzenia <xref:System.Data.DataSet> przy użyciu wnioskowania schematu i serializować ją przy użyciu usług sieci Web lub XML, kolejność kolumn mogą ulec zmianie.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Data.DataSet> i <xref:System.Data.DataTable>, a następnie wyświetla schematu w formacie XML.  
  
 [!code-csharp[Classic WebData DataSet.GetXmlSchema Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetXmlSchema Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetXmlSchema Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetXmlSchema Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="HasChanges">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera wartość wskazującą czy <see cref="T:System.Data.DataSet" /> zawiera zmiany, w tym nowe, usunięte lub zmodyfikowane wiersze.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="HasChanges">
      <MemberSignature Language="C#" Value="public bool HasChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.HasChanges" />
      <MemberSignature Language="VB.NET" Value="Public Function HasChanges () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasChanges();" />
      <MemberSignature Language="F#" Value="member this.HasChanges : unit -&gt; bool" Usage="dataSet.HasChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera wartość wskazującą czy <see cref="T:System.Data.DataSet" /> zawiera zmiany, w tym nowe, usunięte lub zmodyfikowane wiersze.</summary>
        <returns><see langword="true" /> Jeśli <see cref="T:System.Data.DataSet" /> wprowadzono zmiany, a w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Data.DataSet.GetChanges%2A> metodę w celu utworzenia drugiej <xref:System.Data.DataSet> obiekt, który jest następnie używany do aktualizacji źródła danych.  
  
 [!code-csharp[Classic WebData DataSet.HasChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.HasChanges Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.HasChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.HasChanges Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="HasChanges">
      <MemberSignature Language="C#" Value="public bool HasChanges (System.Data.DataRowState rowStates);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasChanges(valuetype System.Data.DataRowState rowStates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.HasChanges(System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasChanges (rowStates As DataRowState) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasChanges(System::Data::DataRowState rowStates);" />
      <MemberSignature Language="F#" Value="member this.HasChanges : System.Data.DataRowState -&gt; bool" Usage="dataSet.HasChanges rowStates" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowStates" Type="System.Data.DataRowState" />
      </Parameters>
      <Docs>
        <param name="rowStates">Jedną z <see cref="T:System.Data.DataRowState" /> wartości.</param>
        <summary>Pobiera wartość wskazującą czy <see cref="T:System.Data.DataSet" /> zawiera zmiany, w tym nowe, usunięte lub zmodyfikowane wiersze filtrowane według <see cref="T:System.Data.DataRowState" />.</summary>
        <returns><see langword="true" /> Jeśli <see cref="T:System.Data.DataSet" /> wprowadzono zmiany, a w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sprawdź <xref:System.Data.DataSet.HasChanges%2A> właściwość `DataSet` przed wywołaniem <xref:System.Data.DataSet.GetChanges%2A> metody.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Data.DataSet.GetChanges%2A> metodę w celu utworzenia drugiej <xref:System.Data.DataSet> obiektu, który jest następnie używany do aktualizacji źródła danych.  
  
 [!code-csharp[Classic WebData DataSet.GetChanges1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetChanges1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="HasErrors">
      <MemberSignature Language="C#" Value="public bool HasErrors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasErrors" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.HasErrors" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasErrors As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasErrors { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasErrors : bool" Usage="System.Data.DataSet.HasErrors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetHasErrorsDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy istnieją błędy w jednym z <see cref="T:System.Data.DataTable" /> obiektów w ramach tej <see cref="T:System.Data.DataSet" />.</summary>
        <value><see langword="true" /> Jeśli każda tabela zawiera błąd; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każdy <xref:System.Data.DataTable> w <xref:System.Data.DataSet> ma również <xref:System.Data.DataTable.HasErrors%2A> właściwości. Użyj `HasErrors` właściwość `DataSet` pierwszy, aby ustalić, czy każda tabela ma błędy przed sprawdzeniem poszczególnych <xref:System.Data.DataTable> obiektów. Jeśli `DataTable` zawiera błędy, <xref:System.Data.DataTable.GetErrors%2A> metoda zwraca tablicę <xref:System.Data.DataRow> obiektów zawierające błędy.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Data.DataSet.HasErrors%2A> właściwości, aby określić, czy <xref:System.Data.DataSet> obiekt zawiera błędy. Jeśli tak, błędy dla każdego <xref:System.Data.DataRow> w każdym <xref:System.Data.DataTable> są drukowane.  
  
 [!code-csharp[Classic WebData DataSet.HasErrors Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.HasErrors Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.HasErrors Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.HasErrors Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="InferXmlSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Stosuje schematu XML do <see cref="T:System.Data.DataSet" />.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="InferXmlSchema">
      <MemberSignature Language="C#" Value="public void InferXmlSchema (System.IO.Stream stream, string[] nsArray);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InferXmlSchema(class System.IO.Stream stream, string[] nsArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.InferXmlSchema(System.IO.Stream,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InferXmlSchema(System::IO::Stream ^ stream, cli::array &lt;System::String ^&gt; ^ nsArray);" />
      <MemberSignature Language="F#" Value="member this.InferXmlSchema : System.IO.Stream * string[] -&gt; unit" Usage="dataSet.InferXmlSchema (stream, nsArray)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="nsArray" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="stream"><see langword="Stream" /> z którego można odczytać schematu.</param>
        <param name="nsArray">Tablica ciągów identyfikator (URI) przestrzeni nazw mają być wykluczone z wnioskowania schematu.</param>
        <summary>Stosuje schematu XML z określonego <see cref="T:System.IO.Stream" /> do <see cref="T:System.Data.DataSet" />.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="InferXmlSchema">
      <MemberSignature Language="C#" Value="public void InferXmlSchema (System.IO.TextReader reader, string[] nsArray);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InferXmlSchema(class System.IO.TextReader reader, string[] nsArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.InferXmlSchema(System.IO.TextReader,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub InferXmlSchema (reader As TextReader, nsArray As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InferXmlSchema(System::IO::TextReader ^ reader, cli::array &lt;System::String ^&gt; ^ nsArray);" />
      <MemberSignature Language="F#" Value="member this.InferXmlSchema : System.IO.TextReader * string[] -&gt; unit" Usage="dataSet.InferXmlSchema (reader, nsArray)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
        <Parameter Name="nsArray" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="reader"><see langword="TextReader" /> z którego można odczytać schematu.</param>
        <param name="nsArray">Tablica ciągów identyfikator (URI) przestrzeni nazw mają być wykluczone z wnioskowania schematu.</param>
        <summary>Stosuje schematu XML z określonego <see cref="T:System.IO.TextReader" /> do <see cref="T:System.Data.DataSet" />.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="InferXmlSchema">
      <MemberSignature Language="C#" Value="public void InferXmlSchema (string fileName, string[] nsArray);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InferXmlSchema(string fileName, string[] nsArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.InferXmlSchema(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub InferXmlSchema (fileName As String, nsArray As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InferXmlSchema(System::String ^ fileName, cli::array &lt;System::String ^&gt; ^ nsArray);" />
      <MemberSignature Language="F#" Value="member this.InferXmlSchema : string * string[] -&gt; unit" Usage="dataSet.InferXmlSchema (fileName, nsArray)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="nsArray" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="fileName">Nazwa pliku (łącznie ze ścieżką), z którego można odczytać schematu.</param>
        <param name="nsArray">Tablica ciągów identyfikator (URI) przestrzeni nazw mają być wykluczone z wnioskowania schematu.</param>
        <summary>Stosuje schematu XML z określonego pliku do <see cref="T:System.Data.DataSet" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException"><see cref="T:System.Security.Permissions.FileIOPermission" /> Nie ustawiono <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">do odczytywania i zapisywania plików. Powiązane wartość typu wyliczeniowego: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" />.</permission>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="InferXmlSchema">
      <MemberSignature Language="C#" Value="public void InferXmlSchema (System.Xml.XmlReader reader, string[] nsArray);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InferXmlSchema(class System.Xml.XmlReader reader, string[] nsArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.InferXmlSchema(System.Xml.XmlReader,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub InferXmlSchema (reader As XmlReader, nsArray As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InferXmlSchema(System::Xml::XmlReader ^ reader, cli::array &lt;System::String ^&gt; ^ nsArray);" />
      <MemberSignature Language="F#" Value="member this.InferXmlSchema : System.Xml.XmlReader * string[] -&gt; unit" Usage="dataSet.InferXmlSchema (reader, nsArray)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="nsArray" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="reader"><see langword="XMLReader" /> z którego można odczytać schematu.</param>
        <param name="nsArray">Tablica ciągów identyfikator (URI) przestrzeni nazw mają być wykluczone z wnioskowania schematu.</param>
        <summary>Stosuje schematu XML z określonego <see cref="T:System.Xml.XmlReader" /> do <see cref="T:System.Data.DataSet" />.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Initialized">
      <MemberSignature Language="C#" Value="public event EventHandler Initialized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Initialized" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataSet.Initialized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Initialized As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ Initialized;" />
      <MemberSignature Language="F#" Value="member this.Initialized : EventHandler " Usage="member this.Initialized : System.EventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.ComponentModel.ISupportInitializeNotification.Initialized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po <see cref="T:System.Data.DataSet" /> został zainicjowany.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji, zobacz <xref:System.Data.DataSet.IsInitialized%2A>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="InitializeDerivedDataSet">
      <MemberSignature Language="C#" Value="protected virtual void InitializeDerivedDataSet ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializeDerivedDataSet() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.InitializeDerivedDataSet" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub InitializeDerivedDataSet ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void InitializeDerivedDataSet();" />
      <MemberSignature Language="F#" Value="abstract member InitializeDerivedDataSet : unit -&gt; unit&#xA;override this.InitializeDerivedDataSet : unit -&gt; unit" Usage="dataSet.InitializeDerivedDataSet " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Deserializuje wszystkie dane tabel zestawu danych z pliku binarnego lub strumienia XML.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBinarySerialized">
      <MemberSignature Language="C#" Value="protected bool IsBinarySerialized (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsBinarySerialized(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsBinarySerialized (info As SerializationInfo, context As StreamingContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsBinarySerialized(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="member this.IsBinarySerialized : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; bool" Usage="dataSet.IsBinarySerialized (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo" /> Obiektu.</param>
        <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext" /> Obiektu.</param>
        <summary>Sprawdza format serializacji reprezentacja <see langword="DataSet" />.</summary>
        <returns><see langword="true" /> Jeśli określony <see cref="T:System.Runtime.Serialization.SerializationInfo" /> reprezentuje <see langword="DataSet" /> zserializowane w jego format binarny <see langword="false" /> inaczej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element członkowski obsługuje infrastrukturę programu .NET Framework i nie jest przeznaczony do użycia bezpośrednio w kodzie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInitialized">
      <MemberSignature Language="C#" Value="public bool IsInitialized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInitialized" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.IsInitialized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInitialized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInitialized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInitialized : bool" Usage="System.Data.DataSet.IsInitialized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ComponentModel.ISupportInitializeNotification.IsInitialized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy <see cref="T:System.Data.DataSet" /> został zainicjowany.</summary>
        <value><see langword="true" /> Aby wskazać składnik ma ukończyła inicjowanie; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwraca stan <xref:System.Data.DataSet> podczas jego jest budowany, na przykład przez program Visual Studio. <xref:System.Data.DataSet.BeginInit%2A> Metody ustawia ją na `false` i <xref:System.Data.DataSet.EndInit%2A> metody ustawia ją na `true`.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wypełnia <see cref="T:System.Data.DataSet" /> wartościami ze źródła danych za pomocą podane <see cref="T:System.Data.IDataReader" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.Load%2A> Metoda zapewnia technikę do wypełniania pojedynczej <xref:System.Data.DataTable> z danymi, pobierane <xref:System.Data.IDataReader> wystąpienia. Ta metoda zapewnia taką samą funkcjonalność, ale umożliwia ładowanie wielu zestawów wyników z `IDataReader` do wielu tabel w `DataSet`.  
  
 Jeśli `DataSet` już zawiera wiersze, przychodzących danych ze źródła danych jest scalany z istniejących wierszy.  
  
 `Load` Metoda może być używana w kilku typowych scenariuszy, wszystkie wyśrodkowany wokół pobierania danych z określonego źródła danych i dodanie go do bieżącego kontenera danych (w tym przypadku `DataSet`). Scenariusze te opisują użycie standardowego `DataSet`opisujące jego aktualizacji i scalenia zachowanie.  
  
 A `DataSet` synchronizuje lub aktualizacji z pojedynczego podstawowego źródła danych. `DataSet` Śledzi zmiany, dzięki czemu synchronizacji z podstawowego źródła danych. Ponadto `DataSet` może akceptować dane przyrostowe z co najmniej jedno źródło danych pomocniczych. `DataSet` Nie jest odpowiedzialny za śledzenie zmian w celu umożliwienia synchronizacji z pomocnicze źródło danych.  
  
 Biorąc pod uwagę te dwa źródła danych hipotetyczny, użytkownik prawdopodobnie Wymagaj jednej z następujących problemów:  
  
-   Inicjowanie `DataSet` z podstawowego źródła danych. W tym scenariuszu użytkownik chce, aby zainicjować pustą `DataSet` wartościami z podstawowego źródła danych. Co najmniej jeden DataTable zawartości są modyfikowane. Później użytkownik zamierza propagujące zmiany do podstawowego źródła danych.  
  
-   Zachowaj zmiany i przeprowadź ponowną synchronizację z podstawowego źródła danych. W tym scenariuszu użytkownik chce wykonać `DataSet` wypełnione w poprzednim scenariuszu i wykonywać synchronizację przyrostową z podstawowego źródła danych, zmiany dokonane w zachowaniu `DataSet`.  
  
-   Dane przyrostowe źródła danych ze źródeł danych pomocniczych. W tym scenariuszu użytkownik chce scalenie zmian z co najmniej jedno źródło danych pomocniczych i przenosić je ponownie do podstawowego źródła danych.  
  
 `Load` Metody sprawia, że wszystkie te scenariusze są możliwe. Ta metoda umożliwia określenie parametru opcja obciążenia, wskazującą, jak wiersze już <xref:System.Data.DataTable> łączenie wierszy ładowany. W poniższej tabeli opisano opcje ładowania trzy, dostarczone przez <xref:System.Data.LoadOption> wyliczenia. W każdym przypadku opis wskazuje zachowanie, gdy klucz podstawowy wiersza w danych przychodzących jest zgodna z klucza podstawowego istniejącego wiersza.  
  
|Opcja ładowanie|Opis|  
|-----------------|-----------------|  
|`PreserveChanges` (ustawienie domyślne)|Aktualizuje oryginalną wersję wiersz o wartości przychodzących wiersza.|  
|`OverwriteChanges`|Bieżąca i oryginalna wersja wiersz zostaje zaktualizowana o wartości przychodzących wiersza.|  
|`Upsert`|Bieżąca wersja wiersz zostaje zaktualizowana o wartości przychodzących wiersza.|  
  
 Ogólnie rzecz biorąc `PreserveChanges` i `OverwriteChanges` opcje są przeznaczone dla scenariuszy, w którym użytkownik musi zsynchronizować `DataSet` i jego zmian za pomocą podstawowego źródła danych. `Upsert` Opcja ułatwia agregację zmian z co najmniej jedno źródło danych pomocniczych.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, params System.Data.DataTable[] tables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Data.IDataReader reader, valuetype System.Data.LoadOption loadOption, class System.Data.DataTable[] tables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Data::IDataReader ^ reader, System::Data::LoadOption loadOption, ... cli::array &lt;System::Data::DataTable ^&gt; ^ tables);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Data.IDataReader * System.Data.LoadOption * System.Data.DataTable[] -&gt; unit" Usage="dataSet.Load (reader, loadOption, tables)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="loadOption" Type="System.Data.LoadOption" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="tables" Type="System.Data.DataTable[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-2.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="reader"><see cref="T:System.Data.IDataReader" /> Zawierający jeden lub więcej zestawów wyników.</param>
        <param name="loadOption">Wartość z zakresu od <see cref="T:System.Data.LoadOption" /> wyliczenia, która wskazuje, jak już wiersze <see cref="T:System.Data.DataTable" /> wystąpień <see cref="T:System.Data.DataSet" /> zostanie połączony z przychodzącego wierszy, które współużytkują ten sam klucz podstawowy.</param>
        <param name="tables">Tablica <see cref="T:System.Data.DataTable" /> wystąpienia, z którego <see cref="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])" /> metoda pobiera informacje o nazwie i przestrzeni nazw. Każdą z tych tabel musi być członkiem <see cref="T:System.Data.DataTableCollection" /> zawarty w tym <see cref="T:System.Data.DataSet" />.</param>
        <summary>Wypełnia <see cref="T:System.Data.DataSet" /> wartościami ze źródła danych za pomocą podane <see cref="T:System.Data.IDataReader" />, użycie tablicy <see cref="T:System.Data.DataTable" /> wystąpienia, aby podać informacje dotyczące schematu i przestrzeni nazw.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.Load%2A> Metoda zapewnia technikę do wypełniania pojedynczej <xref:System.Data.DataTable> z danymi, pobierane <xref:System.Data.IDataReader> wystąpienia. Ta metoda zapewnia taką samą funkcjonalność, ale umożliwia ładowanie wielu zestawów wyników z <xref:System.Data.IDataReader> do wielu tabel w <xref:System.Data.DataSet>.  
  
> [!NOTE]
>  Niepowodzenie operacji ładowania <xref:System.InvalidOperationException> ewentualnej kolumny źródła danych z przychodzącego `reader` kolumn obliczanych.  
  
 `loadOption` Parametr umożliwia określenie, jak mają zaimportowane dane do interakcji z istniejącymi danymi i może być dowolną z wartości z <xref:System.Data.LoadOption> wyliczenia. Zobacz dokumentację <xref:System.Data.DataTable> <xref:System.Data.DataTable.Load%2A> metody, aby uzyskać więcej informacji na temat korzystania z tego parametru.  
  
 `tables` Parametr umożliwia określenie tablicę <xref:System.Data.DataTable> wystąpień, określającą kolejność, tabel, odpowiadający każdego zestawu wyników załadowane z czytnika. <xref:System.Data.DataSet.Load%2A> Metoda wypełnienia każdy dostarczony <xref:System.Data.DataTable> wystąpienia przy użyciu danych z jednego zestawu wyników z czytnika danych źródłowych. Po każdy zestaw wyników <xref:System.Data.DataSet.Load%2A> metoda przechodzi do następnego wyniku, ustaw w ramach czytnika, aż nie wystąpią żadne zestawy wyników.  
  
 Schemat rozpoznawanie nazwy dla tej metody jest taka sama jak następuje <xref:System.Data.Common.DbDataAdapter.Fill%2A> metody <xref:System.Data.Common.DbDataAdapter> klasy.  
  
   
  
## Examples  
 Poniższy przykład tworzy nowy <xref:System.Data.DataSet>, dodaje dwa <xref:System.Data.DataTable> wystąpień do <xref:System.Data.DataSet>, a następnie wypełnia <xref:System.Data.DataSet> przy użyciu <xref:System.Data.DataSet.Load%2A> metody pobierania danych z <xref:System.Data.DataTableReader> zawierający dwa zestawy wyników. Na koniec przykład wyświetla zawartości tabel w oknie konsoli.  
  
 [!code-csharp[DataWorks DataSet.LoadTables#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.LoadTables/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.LoadTables#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.LoadTables/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, params string[] tables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Data.IDataReader reader, valuetype System.Data.LoadOption loadOption, string[] tables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Data::IDataReader ^ reader, System::Data::LoadOption loadOption, ... cli::array &lt;System::String ^&gt; ^ tables);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Data.IDataReader * System.Data.LoadOption * string[] -&gt; unit" Usage="dataSet.Load (reader, loadOption, tables)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="loadOption" Type="System.Data.LoadOption" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="tables" Type="System.String[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-2.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="reader"><see cref="T:System.Data.IDataReader" /> Zawierający jeden lub więcej zestawów wyników.</param>
        <param name="loadOption">Wartość z zakresu od <see cref="T:System.Data.LoadOption" /> wyliczenia, która wskazuje, jak już wiersze <see cref="T:System.Data.DataTable" /> wystąpień <see langword="DataSet" /> zostanie połączony z przychodzącego wierszy, które współużytkują ten sam klucz podstawowy.</param>
        <param name="tables">Tablica ciągów, z którego <see langword="Load" /> metoda pobiera informacje o nazwie tabeli.</param>
        <summary>Wypełnia <see cref="T:System.Data.DataSet" /> wartościami ze źródła danych za pomocą podane <see cref="T:System.Data.IDataReader" />, przy użyciu tablicy ciągów podawać nazwy tabel w <see langword="DataSet" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.Load%2A> Metoda zapewnia technikę do wypełniania pojedynczej <xref:System.Data.DataTable> z danymi, pobierane <xref:System.Data.IDataReader> wystąpienia. Ta metoda zapewnia taką samą funkcjonalność, ale umożliwia ładowanie wielu zestawów wyników z `IDataReader` do wielu tabel w `DataSet`.  
  
> [!NOTE]
>  Niepowodzenie operacji ładowania <xref:System.InvalidOperationException> ewentualnej kolumny źródła danych z przychodzącego `reader` kolumn obliczanych.  
  
 `loadOption` Parametr umożliwia określenie, jak mają zaimportowane dane do interakcji z istniejącymi danymi i może być dowolną z wartości z <xref:System.Data.LoadOption> wyliczenia. Zobacz dokumentację <xref:System.Data.DataTable.Load%2A> metody, aby uzyskać więcej informacji na temat korzystania z tego parametru.  
  
 `tables` Parametr umożliwia określenie tablicę nazw tabel, określającą kolejność, tabel, odpowiadający każdego zestawu wyników załadowane z czytnika. `Load` Metoda próbuje odnaleźć tabeli w ramach `DataSet` zgodnych z nazwą znalezione w tablicy nazwy tabeli, w kolejności. Jeśli zostanie znaleziony zgodnej tabeli, tabeli jest ładowany z zawartością bieżący zestaw wyników. Jeśli brak pasującego tabeli zostanie znaleziony, jest tabela utworzona przy użyciu nazwa podana w tablicy nazwy tabel i nową tabelę schematu jest wnioskowany z zestawu wyników. Po każdy zestaw wyników `Load` metoda przechodzi do następnego wyniku, ustaw w ramach czytnika, aż nie wystąpią żadne zestawy wyników.  
  
 Domyślny obszar nazw skojarzonych z `DataSet`, jeśli istnieje, jest skojarzone z każdym nowo utworzony `DataTable`. Schemat rozpoznawanie nazwy dla tej metody jest taka sama jak następuje <xref:System.Data.Common.DbDataAdapter.Fill%2A> metody <xref:System.Data.Common.DbDataAdapter> klasy.  
  
   
  
## Examples  
 W poniższym przykładzie aplikacja konsoli, najpierw tworzy tabele i ładuje dane z czytnika w <xref:System.Data.DataSet>przy użyciu `Load` metody. W przykładzie dodano następnie tabel <xref:System.Data.DataSet> i polegające na próbie wypełnienia tabel przy użyciu danych z <xref:System.Data.DataTableReader>. W tym przykładzie ponieważ parametry przekazywane do `Load` metoda wskazuje nazwę tabeli, która nie istnieje, `Load` metoda tworzy nową tabelę do dopasowania nazwy przekazany jako parametr. Po załadowaniu danych przykład wyświetla zawartość wszystkich jej tabel w oknie konsoli.  
  
 [!code-csharp[DataWorks DataSet.LoadString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.LoadString/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.LoadString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.LoadString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public virtual void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, System.Data.FillErrorEventHandler errorHandler, params System.Data.DataTable[] tables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load(class System.Data.IDataReader reader, valuetype System.Data.LoadOption loadOption, class System.Data.FillErrorEventHandler errorHandler, class System.Data.DataTable[] tables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Load(System::Data::IDataReader ^ reader, System::Data::LoadOption loadOption, System::Data::FillErrorEventHandler ^ errorHandler, ... cli::array &lt;System::Data::DataTable ^&gt; ^ tables);" />
      <MemberSignature Language="F#" Value="abstract member Load : System.Data.IDataReader * System.Data.LoadOption * System.Data.FillErrorEventHandler * System.Data.DataTable[] -&gt; unit&#xA;override this.Load : System.Data.IDataReader * System.Data.LoadOption * System.Data.FillErrorEventHandler * System.Data.DataTable[] -&gt; unit" Usage="dataSet.Load (reader, loadOption, errorHandler, tables)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="loadOption" Type="System.Data.LoadOption" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="errorHandler" Type="System.Data.FillErrorEventHandler" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="tables" Type="System.Data.DataTable[]" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-2.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="reader"><see cref="T:System.Data.IDataReader" /> Zawierający jeden lub więcej zestawów wyników.</param>
        <param name="loadOption">Wartość z zakresu od <see cref="T:System.Data.LoadOption" /> wyliczenia, która wskazuje, jak już wiersze <see cref="T:System.Data.DataTable" /> wystąpień <see cref="T:System.Data.DataSet" /> zostanie połączony z przychodzącego wierszy, które współużytkują ten sam klucz podstawowy.</param>
        <param name="errorHandler">A <see cref="T:System.Data.FillErrorEventHandler" /> pełnomocnika do wywołania po wystąpieniu błędu podczas ładowania danych.</param>
        <param name="tables">Tablica <see cref="T:System.Data.DataTable" /> wystąpienia, z którego <see cref="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])" /> metoda pobiera informacje o nazwie i przestrzeni nazw.</param>
        <summary>Wypełnia <see cref="T:System.Data.DataSet" /> wartościami ze źródła danych za pomocą podane <see cref="T:System.Data.IDataReader" />, użycie tablicy <see cref="T:System.Data.DataTable" /> wystąpienia, aby podać informacje dotyczące schematu i przestrzeni nazw.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.Load%2A> Metoda zapewnia technikę do wypełniania pojedynczej <xref:System.Data.DataTable> z danymi, pobierane <xref:System.Data.IDataReader> wystąpienia. Ta metoda zapewnia taką samą funkcjonalność, ale umożliwia ładowanie wielu zestawów wyników z <xref:System.Data.IDataReader> do wielu tabel w <xref:System.Data.DataSet>.  
  
> [!NOTE]
>  Niepowodzenie operacji ładowania <xref:System.InvalidOperationException> ewentualnej kolumny źródła danych z przychodzącego `reader` kolumn obliczanych.  
  
 `loadOption` Parametr umożliwia określenie, jak mają zaimportowane dane do interakcji z istniejącymi danymi i może być dowolną z wartości z <xref:System.Data.LoadOption> wyliczenia. Zobacz dokumentację <xref:System.Data.DataTable> <xref:System.Data.DataTable.Load%2A> metody, aby uzyskać więcej informacji na temat korzystania z tego parametru.  
  
 `errorHandler` Parametr <xref:System.Data.FillErrorEventHandler> delegata, która odwołuje się do procedury, która jest wywoływana, gdy wystąpi błąd podczas ładowania danych. <xref:System.Data.FillErrorEventArgs> Parametr przekazany do procedury udostępnia właściwości, które umożliwiają pobieranie informacji o błędzie, który wystąpił, bieżący wiersz danych, a <xref:System.Data.DataTable> są wypełnione. Za pomocą tego mechanizmu delegata, zamiast prostsze bloku try/catch, pozwala na ustalenie tego błędu, obsługiwać tę sytuację i kontynuować przetwarzanie, jeśli chcesz. <xref:System.Data.FillErrorEventArgs> Parametr dostarcza <xref:System.Data.FillErrorEventArgs.Continue%2A> właściwości: Ustaw tę właściwość na `true` do wskazania, że mają obsługiwany błąd i chcesz kontynuować przetwarzanie; ustaw właściwość `false` do wskazania, że chcesz zatrzymanie przetwarzania. Należy pamiętać, że ustawienie dla właściwości `false` powoduje, że kod, który wyzwolił problem, aby zgłosić wyjątek.  
  
 `tables` Parametr umożliwia określenie tablicę <xref:System.Data.DataTable> wystąpień, określającą kolejność, tabel, odpowiadający każdego zestawu wyników załadowane z czytnika. <xref:System.Data.DataSet.Load%2A> Metoda wypełnienia każdy dostarczony <xref:System.Data.DataTable> wystąpienia przy użyciu danych z jednego zestawu wyników z czytnika danych źródłowych. Po każdy zestaw wyników <xref:System.Data.DataSet.Load%2A> metoda przechodzi do następnego wyniku, ustaw w ramach czytnika, aż nie wystąpią żadne zestawy wyników.  
  
 Schemat rozpoznawanie nazwy dla tej metody jest taka sama jak następuje <xref:System.Data.Common.DbDataAdapter.Fill%2A> metody <xref:System.Data.Common.DbDataAdapter> klasy.  
  
   
  
## Examples  
 Poniższy przykład umożliwia dodanie tabeli do <xref:System.Data.DataSet>, a następnie próbuje użyć <xref:System.Data.DataSet.Load%2A> metodę, aby załadować dane z <xref:System.Data.DataTableReader> zawierający schemat jest niezgodny. Zamiast generują pułapki błędu, w tym przykładzie użyto <xref:System.Data.FillErrorEventHandler> delegata w celu zbadania i obsłużyć błąd. Dane wyjściowe są wyświetlane w oknie konsoli.  
  
 [!code-csharp[DataWorks DataSet.Load#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.Load/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.Load#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.Load/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Locale">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Locale { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Locale" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Locale" />
      <MemberSignature Language="VB.NET" Value="Public Property Locale As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Locale { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Locale : System.Globalization.CultureInfo with get, set" Usage="System.Data.DataSet.Locale" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetLocaleDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia informacje dotyczące ustawień regionalnych używany do porównywania ciągów znaków w tabeli.</summary>
        <value>Element <see cref="T:System.Globalization.CultureInfo" /> zawierający dane dotyczące ustawień regionalnych komputera użytkownika. Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet.Locale%2A> Właściwości określa ustawienia regionalne do sortowania, która ma zastosowanie.  
  
 Domyślnie ustawienie <xref:System.Data.DataSet.Locale%2A> dla <xref:System.Data.DataSet> ustawia również <xref:System.Data.DataSet.Locale%2A> dla każdego <xref:System.Data.DataTable> obiekt w tym `DataSet` taką samą wartość.  
  
> [!NOTE]
>  W kolumnach, które zawierają wyrażenia <xref:System.StringComparison.InvariantCulture> jest używany. <xref:System.StringComparison.CurrentCulture> Jest ignorowana.  
  
   
  
## Examples  
 Poniższy przykład pobiera <xref:System.Globalization.CultureInfo> dla <xref:System.Data.DataSet> i drukuje <xref:System.Globalization.CultureInfo.DisplayName%2A> i <xref:System.Globalization.CultureInfo.EnglishName%2A> właściwości.  
  
 [!code-vb[Classic WebData DataSet.Locale Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Locale Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Merge">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Scala określoną <see cref="T:System.Data.DataSet" />, <see cref="T:System.Data.DataTable" />, tablica lub <see cref="T:System.Data.DataRow" /> obiektów na bieżącej <see langword="DataSet" /> lub <see langword="DataTable" />.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataRow[] rows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataRow[] rows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Merge (rows As DataRow())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(cli::array &lt;System::Data::DataRow ^&gt; ^ rows);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataRow[] -&gt; unit" Usage="dataSet.Merge rows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" />
      </Parameters>
      <Docs>
        <param name="rows">Tablica <see langword="DataRow" /> obiektów scalona <see langword="DataSet" />.</param>
        <summary>Scala tablicę <see cref="T:System.Data.DataRow" /> obiektów na bieżącej <see cref="T:System.Data.DataSet" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet.Merge%2A> Metoda jest używana, aby scalić dwa <xref:System.Data.DataSet> obiektów, które mają w dużej mierze podobny schematów. Scalanie jest zazwyczaj używany w aplikacji klienckiej do włączenie najnowsze zmiany ze źródła danych do istniejącego <xref:System.Data.DataSet>. Dzięki temu aplikacja kliencka odświeżyć <xref:System.Data.DataSet> przy użyciu najnowszych danych ze źródła danych.  
  
 <xref:System.Data.DataSet.Merge%2A> Metoda jest zwykle nazywany na końcu szereg procedur, które obejmują sprawdzanie poprawności zmian, uzgadnianie błędy, aktualizowanie źródła danych za pomocą zmian i na koniec odświeżanie istniejącego <xref:System.Data.DataSet>.  
  
 W aplikacji klienckiej jest często mają jednego przycisku, który użytkownik może kliknąć zbiera dane zmienione, a następnie zweryfikuje go przed wysłaniem ich do składnika warstwy środkowej. W tym scenariuszu <xref:System.Data.DataSet.GetChanges%2A> wywołaniu metody. Metoda zwraca wartość sekund <xref:System.Data.DataSet> zoptymalizowane pod kątem sprawdzania poprawności i scalania. To drugie <xref:System.Data.DataSet> obiekt zawiera tylko <xref:System.Data.DataTable> i <xref:System.Data.DataRow> obiektów, które zostały zmienione, wynikające z podzbioru oryginalny <xref:System.Data.DataSet>. Podzbiór ten jest ogólnie mniejsze i w związku z tym wydajniej przesłany do składnika warstwy środkowej. Składnik warstwy środkowej następnie aktualizuje oryginalnego źródła danych zmian za pomocą procedur składowanych. Warstwy środkowej można wysłać kopii albo nową <xref:System.Data.DataSet> zawierającego oryginalne dane i najnowszych danych ze źródła danych (przez ponowne uruchomienie oryginalnego zapytania) lub Wyślij ponownie podzbioru ze wszystkimi zmianami, które zostały wprowadzone do niej ze źródła danych. (Na przykład, jeśli źródło danych automatycznie tworzy unikatowe wartości klucza podstawowego, te wartości mogą być propagowany z powrotem do aplikacji klienckiej.) W obu przypadkach zwrócona <xref:System.Data.DataSet> mogą być scalone oryginalny aplikacja kliencka <xref:System.Data.DataSet> z <xref:System.Data.DataSet.Merge%2A> metody.  
  
 Gdy <xref:System.Data.DataSet.Merge%2A> metoda jest wywoływana, schematy dwa <xref:System.Data.DataSet> obiekty są porównywane, ponieważ istnieje możliwość, że schematy mogły zostać zmienione. Na przykład w scenariuszu business-to-business, nowych kolumn może zostały dodane do schematu XML przez zautomatyzowany proces. Jeśli źródło <xref:System.Data.DataSet> zawiera elementy schematu (dodano <xref:System.Data.DataColumn> obiektów) Brak w elemencie docelowym, elementy schematu można dodać do obiektu docelowego, ustawiając `missingSchemaAction` argument `MissingSchemaAction.Add`. W takim przypadku scalonych <xref:System.Data.DataSet> zawiera dodano schemat i dane.  
  
 Po scaleniu schematów, dane są scalane.  
  
 Podczas scalania nowe źródło <xref:System.Data.DataSet> do obiektu docelowego, dowolnego źródła wierszy z <xref:System.Data.DataRowState> wartość `Unchanged`, `Modified`, lub `Deleted` są dopasowywane do docelowego wiersze z tej samej wartości klucza podstawowego. Wiersze ze źródła <xref:System.Data.DataRowState> wartość `Added` są dopasowywane do nowych wierszy docelowych przy użyciu tej samej wartości klucza podstawowego jako nowych wierszy źródłowych.  
  
 Ograniczenia są wyłączone podczas scalania. Jeśli wszystkie ograniczenia, nie można włączyć na końcu scalania <xref:System.Data.ConstraintException> jest generowany i scalone dane są zachowywane podczas ograniczenia są wyłączone. W tym przypadku <xref:System.Data.DataSet.EnforceConstraints%2A> właściwość jest ustawiona na `false`, i błąd zaznaczone wszystkie wiersze, które są nieprawidłowe. Błędy muszą zostać rozwiązane przed podjęciem próby zresetowania <xref:System.Data.DataSet.EnforceConstraints%2A> właściwość `true`.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataSet -&gt; unit" Usage="dataSet.Merge dataSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet"><see langword="DataSet" /> Którego danych i schemat zostaną scalone.</param>
        <summary>Scala określoną <see cref="T:System.Data.DataSet" /> i jego schemat do bieżącego <see langword="DataSet" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet.Merge%2A> Metoda jest używana, aby scalić dwa <xref:System.Data.DataSet> obiektów, które mają w dużej mierze podobny schematów. Scalanie jest zazwyczaj używany w aplikacji klienckiej do włączenie najnowsze zmiany ze źródła danych do istniejącego <xref:System.Data.DataSet>. Dzięki temu aplikacja kliencka odświeżyć <xref:System.Data.DataSet> przy użyciu najnowszych danych ze źródła danych.  
  
 <xref:System.Data.DataSet.Merge%2A> Metoda jest zwykle nazywany na końcu szereg procedur, które obejmują sprawdzanie poprawności zmian, uzgadnianie błędy, aktualizowanie źródła danych za pomocą zmian i na koniec odświeżanie istniejącego <xref:System.Data.DataSet>.  
  
 W aplikacji klienckiej jest często mają jednego przycisku, który użytkownik może kliknąć zbiera dane zmienione, a następnie zweryfikuje go przed wysłaniem ich do składnika warstwy środkowej. W tym scenariuszu <xref:System.Data.DataSet.GetChanges%2A> wywołaniu metody. Metoda zwraca wartość sekund <xref:System.Data.DataSet> zoptymalizowane pod kątem sprawdzania poprawności i scalania. To drugie <xref:System.Data.DataSet> obiekt zawiera tylko <xref:System.Data.DataTable> i <xref:System.Data.DataRow> obiektów, które zostały zmienione, wynikające z podzbioru oryginalny <xref:System.Data.DataSet>. Ten podzbiór jest zwykle mniejsze i dlatego więcej efektywnie przekazywany z powrotem do składnika warstwy środkowej. Składnik warstwy środkowej następnie aktualizuje oryginalnego źródła danych zmian za pomocą procedur składowanych. Warstwy środkowej można wysłać kopii albo nową <xref:System.Data.DataSet> zawierającego oryginalne dane i najnowszych danych ze źródła danych (przez ponowne uruchomienie oryginalnego zapytania) lub Wyślij ponownie podzbioru ze wszystkimi zmianami, które zostały wprowadzone do niej ze źródła danych. (Na przykład, jeśli źródło danych automatycznie tworzy unikatowe wartości klucza podstawowego, te wartości mogą być propagowany z powrotem do aplikacji klienckiej.) W obu przypadkach zwrócona <xref:System.Data.DataSet> mogą być scalone oryginalny aplikacja kliencka <xref:System.Data.DataSet> z <xref:System.Data.DataSet.Merge%2A> metody.  
  
 Gdy <xref:System.Data.DataSet.Merge%2A> metoda jest wywoływana, schematy dwa <xref:System.Data.DataSet> obiekty są porównywane, ponieważ istnieje możliwość, że schematy mogły zostać zmienione. Na przykład w scenariuszu business-to-business, nowych kolumn może zostały dodane do schematu XML przez zautomatyzowany proces. Jeśli źródło <xref:System.Data.DataSet> zawiera elementy schematu (dodano <xref:System.Data.DataColumn> obiektów) Brak w elemencie docelowym, elementy schematu można dodać do obiektu docelowego, ustawiając `missingSchemaAction` argument `MissingSchemaAction.Add`. W takim przypadku scalonych <xref:System.Data.DataSet> zawiera dodano schemat i dane.  
  
 Po scaleniu schematów, dane są scalane.  
  
 Podczas scalania nowe źródło <xref:System.Data.DataSet> do obiektu docelowego, dowolnego źródła wierszy z <xref:System.Data.DataRowState> wartość `Unchanged`, `Modified`, lub `Deleted` są dopasowywane do docelowego wiersze z tej samej wartości klucza podstawowego. Wiersze ze źródła `DataRowState` wartość `Added` są dopasowywane do nowych wierszy docelowych przy użyciu tej samej wartości klucza podstawowego jako nowych wierszy źródłowych.  
  
 Ograniczenia są wyłączone podczas scalania. Jeśli wszystkie ograniczenia, nie można włączyć na końcu scalania, <xref:System.Data.ConstraintException> jest generowany i scalone dane są zachowywane podczas ograniczenia są wyłączone. W tym przypadku <xref:System.Data.DataSet.EnforceConstraints%2A> właściwość jest ustawiona na `false`, i błąd zaznaczone wszystkie wiersze, które są nieprawidłowe. Błędy muszą zostać rozwiązane przed podjęciem próby zresetowania <xref:System.Data.DataSet.EnforceConstraints%2A> właściwość `true`.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Data.DataSet.GetChanges%2A>, aktualizacji i <xref:System.Data.DataSet.Merge%2A> metod <xref:System.Data.DataSet>.  
  
 [!code-csharp[Classic WebData DataSet.Merge Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Merge Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.ConstraintException">Nie można włączyć co najmniej jedno ograniczenie.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="dataSet" /> Jest <see langword="null" />.</exception>
        <altmember cref="T:System.Data.ForeignKeyConstraint" />
        <altmember cref="M:System.Data.DataSet.GetChanges" />
        <altmember cref="T:System.Data.UniqueConstraint" />
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Merge (table As DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataTable -&gt; unit" Usage="dataSet.Merge table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="table"><see cref="T:System.Data.DataTable" /> Którego danych i schemat zostaną scalone.</param>
        <summary>Scala określoną <see cref="T:System.Data.DataTable" /> i jego schemat do bieżącego <see cref="T:System.Data.DataSet" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet.Merge%2A> Metoda jest używana, aby scalić dwa <xref:System.Data.DataSet> obiektów, które mają w dużej mierze podobny schematów. Scalanie jest zazwyczaj używany w aplikacji klienckiej do włączenie najnowsze zmiany ze źródła danych do istniejącego <xref:System.Data.DataSet>. Dzięki temu aplikacja kliencka odświeżyć <xref:System.Data.DataSet> przy użyciu najnowszych danych ze źródła danych.  
  
 <xref:System.Data.DataSet.Merge%2A> Metoda jest zwykle nazywany na końcu szereg procedur, które obejmują sprawdzanie poprawności zmian, uzgadnianie błędy, aktualizowanie źródła danych za pomocą zmian i na koniec odświeżanie istniejącego <xref:System.Data.DataSet>.  
  
 W aplikacji klienckiej jest często mają jednego przycisku, który użytkownik może kliknąć zbiera dane zmienione, a następnie zweryfikuje go przed wysłaniem ich do składnika warstwy środkowej. W tym scenariuszu <xref:System.Data.DataSet.GetChanges%2A> wywołaniu metody. Metoda zwraca wartość sekund <xref:System.Data.DataSet> zoptymalizowane pod kątem sprawdzania poprawności i scalania. To drugie <xref:System.Data.DataSet> obiekt zawiera tylko <xref:System.Data.DataTable> i <xref:System.Data.DataRow> obiektów, które zostały zmienione, wynikające z podzbioru oryginalny <xref:System.Data.DataSet>. Ten podzbiór jest zwykle mniejsze i dlatego więcej efektywnie przekazywany z powrotem do składnika warstwy środkowej. Składnik warstwy środkowej następnie aktualizuje oryginalnego źródła danych zmian za pomocą procedur składowanych. Warstwy środkowej można wysłać kopii albo nową <xref:System.Data.DataSet> zawierającego oryginalne dane i najnowszych danych ze źródła danych (przez ponowne uruchomienie oryginalnego zapytania) lub Wyślij ponownie podzbioru ze wszystkimi zmianami, które zostały wprowadzone do niej ze źródła danych. (Na przykład, jeśli źródło danych automatycznie tworzy unikatowe wartości klucza podstawowego, te wartości mogą być propagowany z powrotem do aplikacji klienckiej.) W obu przypadkach zwrócona <xref:System.Data.DataSet> mogą być scalone oryginalny aplikacja kliencka <xref:System.Data.DataSet> z <xref:System.Data.DataSet.Merge%2A> metody.  
  
 Gdy <xref:System.Data.DataSet.Merge%2A> metoda jest wywoływana, schematy dwa <xref:System.Data.DataSet> obiekty są porównywane, ponieważ istnieje możliwość, że schematy mogły zostać zmienione. Na przykład w scenariuszu business-to-business, nowych kolumn może zostały dodane do schematu XML przez zautomatyzowany proces. Jeśli źródło <xref:System.Data.DataSet> zawiera elementy schematu (dodano <xref:System.Data.DataColumn> obiektów) Brak w elemencie docelowym, elementy schematu można dodać do obiektu docelowego, ustawiając `missingSchemaAction` argument `MissingSchemaAction.Add`. W takim przypadku scalonych <xref:System.Data.DataSet> zawiera dodano schemat i dane.  
  
 Po scaleniu schematów, dane są scalane.  
  
 Podczas scalania nowe źródło <xref:System.Data.DataSet> do obiektu docelowego, dowolnego źródła wierszy z <xref:System.Data.DataRowState> wartość `Unchanged`, `Modified`, lub `Deleted` są dopasowywane do docelowego wiersze z tej samej wartości klucza podstawowego. Wiersze ze źródła `DataRowState` wartość `Added` są dopasowywane do nowych wierszy docelowych przy użyciu tej samej wartości klucza podstawowego jako nowych wierszy źródłowych.  
  
 Ograniczenia są wyłączone podczas scalania. Jeśli wszystkie ograniczenia, nie można włączyć na końcu scalania, <xref:System.Data.ConstraintException> jest generowany i scalone dane są zachowywane podczas ograniczenia są wyłączone. W tym przypadku <xref:System.Data.DataSet.EnforceConstraints%2A> właściwość jest ustawiona na `false`, i błąd zaznaczone wszystkie wiersze, które są nieprawidłowe. Błędy muszą zostać rozwiązane przed podjęciem próby zresetowania <xref:System.Data.DataSet.EnforceConstraints%2A> właściwość `true`.  
  
   
  
## Examples  
 Poniższy przykład tworzy prostą <xref:System.Data.DataSet> z jednej tabeli, dwóch kolumn i dziesięć wierszy. Sekundy <xref:System.Data.DataTable> utworzeniu oznacza to taka sama jak pierwsza. Dwa wiersze są dodawane do drugiej tabeli, która następnie zostanie scalona <xref:System.Data.DataSet>.  
  
 [!code-csharp[Classic WebData DataSet.Merge3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Merge3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="table" /> Jest <see langword="null" />.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataSet dataSet, bool preserveChanges);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataSet dataSet, bool preserveChanges) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataSet ^ dataSet, bool preserveChanges);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataSet * bool -&gt; unit" Usage="dataSet.Merge (dataSet, preserveChanges)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="preserveChanges" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dataSet"><see langword="DataSet" /> Którego danych i schemat zostaną scalone.</param>
        <param name="preserveChanges"><see langword="true" /> Aby zachować zmiany w bieżącym <see langword="DataSet" />; w przeciwnym razie <see langword="false" />.</param>
        <summary>Scala określoną <see cref="T:System.Data.DataSet" /> i jego schemat do bieżącego <see langword="DataSet" />, zachowując lub odrzucenie zmian w tym <see langword="DataSet" /> zgodnie z podany argument.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet.Merge%2A> Metoda jest używana, aby scalić dwa <xref:System.Data.DataSet> obiektów, które mają w dużej mierze podobny schematów. Scalanie jest zazwyczaj używany w aplikacji klienckiej do włączenie najnowsze zmiany ze źródła danych do istniejącego <xref:System.Data.DataSet>. Dzięki temu aplikacja kliencka odświeżyć <xref:System.Data.DataSet> przy użyciu najnowszych danych ze źródła danych.  
  
 <xref:System.Data.DataSet.Merge%2A> Metoda jest zwykle nazywany na końcu szereg procedur, które obejmują sprawdzanie poprawności zmian, uzgadnianie błędy, aktualizowanie źródła danych za pomocą zmian i na koniec odświeżanie istniejącego <xref:System.Data.DataSet>.  
  
 W aplikacji klienckiej jest często mają jednego przycisku, który użytkownik może kliknąć zbiera dane zmienione, a następnie zweryfikuje go przed wysłaniem ich do składnika warstwy środkowej. W tym scenariuszu <xref:System.Data.DataSet.GetChanges%2A> wywołaniu metody. Metoda zwraca wartość sekund <xref:System.Data.DataSet> zoptymalizowane pod kątem sprawdzania poprawności i scalania. To drugie <xref:System.Data.DataSet> obiekt zawiera tylko <xref:System.Data.DataTable> i <xref:System.Data.DataRow> obiektów, które zostały zmienione, wynikające z podzbioru oryginalny <xref:System.Data.DataSet>. Ten podzbiór jest zwykle mniejsze i dlatego więcej efektywnie przekazywany z powrotem do składnika warstwy środkowej. Składnik warstwy środkowej następnie aktualizuje oryginalnego źródła danych zmian za pomocą procedur składowanych. Warstwy środkowej można wysłać kopii albo nową <xref:System.Data.DataSet> zawierającego oryginalne dane i najnowszych danych ze źródła danych (przez ponowne uruchomienie oryginalnego zapytania) lub Wyślij ponownie podzbioru ze wszystkimi zmianami, które zostały wprowadzone do niej ze źródła danych. (Na przykład, jeśli źródło danych automatycznie tworzy unikatowe wartości klucza podstawowego, te wartości mogą być propagowany z powrotem do aplikacji klienckiej.) W obu przypadkach zwrócona <xref:System.Data.DataSet> mogą być scalone oryginalny aplikacja kliencka <xref:System.Data.DataSet> z <xref:System.Data.DataSet.Merge%2A> metody.  
  
 Gdy <xref:System.Data.DataSet.Merge%2A> metoda jest wywoływana, schematy dwa <xref:System.Data.DataSet> obiekty są porównywane, ponieważ istnieje możliwość, że schematy mogły zostać zmienione. Na przykład w scenariuszu business-to-business, nowych kolumn może zostały dodane do schematu XML przez zautomatyzowany proces. Jeśli źródło <xref:System.Data.DataSet> zawiera elementy schematu (dodano <xref:System.Data.DataColumn> obiektów) Brak w elemencie docelowym, elementy schematu można dodać do obiektu docelowego, ustawiając `missingSchemaAction` argument `MissingSchemaAction.Add`. W takim przypadku scalonych <xref:System.Data.DataSet> zawiera dodano schemat i dane.  
  
 Po scaleniu schematów, dane są scalane.  
  
 Podczas scalania nowe źródło <xref:System.Data.DataSet> do obiektu docelowego, dowolnego źródła wierszy z <xref:System.Data.DataRowState> wartość `Unchanged`, `Modified`, lub `Deleted` są dopasowywane do docelowego wiersze z tej samej wartości klucza podstawowego. Wiersze ze źródła `DataRowState` wartość `Added` są dopasowywane do nowych wierszy docelowych przy użyciu tej samej wartości klucza podstawowego jako nowych wierszy źródłowych.  
  
 Ograniczenia są wyłączone podczas scalania. Jeśli wszystkie ograniczenia, nie można włączyć na końcu scalania, <xref:System.Data.ConstraintException> jest generowany i scalone dane są zachowywane podczas ograniczenia są wyłączone. W tym przypadku <xref:System.Data.DataSet.EnforceConstraints%2A> właściwość jest ustawiona na `false`, i błąd zaznaczone wszystkie wiersze, które są nieprawidłowe. Błędy muszą zostać rozwiązane przed podjęciem próby zresetowania <xref:System.Data.DataSet.EnforceConstraints%2A> właściwość `true`.  
  
   
  
## Examples  
 Poniższy przykład tworzy prostą <xref:System.Data.DataSet> z jednej tabeli, dwóch kolumn i dziesięć wierszy. Po dodaniu dziesięć wierszy, dwie wartości są zmieniane i dodaniu jeden wiersz. Podzestaw zmienionych danych jest tworzona przy użyciu <xref:System.Data.DataSet.GetChanges%2A> metody. Po uzgodnieniu błędy, podzbiór danych zostanie scalona z oryginalnym <xref:System.Data.DataSet>.  
  
 [!code-csharp[Classic WebData DataSet.GetChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.ForeignKeyConstraint" />
        <altmember cref="T:System.Data.UniqueConstraint" />
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataRow[] rows, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataRow[] rows, bool preserveChanges, valuetype System.Data.MissingSchemaAction missingSchemaAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(cli::array &lt;System::Data::DataRow ^&gt; ^ rows, bool preserveChanges, System::Data::MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataRow[] * bool * System.Data.MissingSchemaAction -&gt; unit" Usage="dataSet.Merge (rows, preserveChanges, missingSchemaAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" />
        <Parameter Name="preserveChanges" Type="System.Boolean" />
        <Parameter Name="missingSchemaAction" Type="System.Data.MissingSchemaAction" />
      </Parameters>
      <Docs>
        <param name="rows">Tablica <see cref="T:System.Data.DataRow" /> obiektów scalona <see langword="DataSet" />.</param>
        <param name="preserveChanges"><see langword="true" /> Aby zachować zmiany w <see langword="DataSet" />; w przeciwnym razie <see langword="false" />.</param>
        <param name="missingSchemaAction">Jedną z <see cref="T:System.Data.MissingSchemaAction" /> wartości.</param>
        <summary>Scala tablicę <see cref="T:System.Data.DataRow" /> obiektów na bieżącej <see cref="T:System.Data.DataSet" />, zachowując lub odrzucanie zmian w <see langword="DataSet" /> i obsługa niezgodny schemat, zgodnie z danym argumentów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet.Merge%2A> Metoda jest używana, aby scalić dwa <xref:System.Data.DataSet> obiektów, które mają w dużej mierze podobny schematów. Scalanie jest zazwyczaj używany w aplikacji klienckiej do włączenie najnowsze zmiany ze źródła danych do istniejącego <xref:System.Data.DataSet>. Dzięki temu aplikacja kliencka odświeżyć <xref:System.Data.DataSet> przy użyciu najnowszych danych ze źródła danych.  
  
 <xref:System.Data.DataSet.Merge%2A> Metoda jest zwykle nazywany na końcu szereg procedur, które obejmują sprawdzanie poprawności zmian, uzgadnianie błędy, aktualizowanie źródła danych za pomocą zmian i na koniec odświeżanie istniejącego <xref:System.Data.DataSet>.  
  
 W aplikacji klienckiej jest często mają jednego przycisku, który użytkownik może kliknąć zbiera dane zmienione, a następnie zweryfikuje go przed wysłaniem ich do składnika warstwy środkowej. W tym scenariuszu <xref:System.Data.DataSet.GetChanges%2A> wywołaniu metody. Metoda zwraca wartość sekund <xref:System.Data.DataSet> zoptymalizowane pod kątem sprawdzania poprawności i scalania. To drugie <xref:System.Data.DataSet> obiekt zawiera tylko <xref:System.Data.DataTable> i <xref:System.Data.DataRow> obiektów, które zostały zmienione, wynikające z podzbioru oryginalny <xref:System.Data.DataSet>. Ten podzbiór jest zwykle mniejsze i dlatego więcej efektywnie przekazywany z powrotem do składnika warstwy środkowej. Składnik warstwy środkowej następnie aktualizuje oryginalnego źródła danych zmian za pomocą procedur składowanych. Warstwy środkowej można wysłać kopii albo nową <xref:System.Data.DataSet> zawierającego oryginalne dane i najnowszych danych ze źródła danych (przez ponowne uruchomienie oryginalnego zapytania) lub Wyślij ponownie podzbioru ze wszystkimi zmianami, które zostały wprowadzone do niej ze źródła danych. (Na przykład, jeśli źródło danych automatycznie tworzy unikatowe wartości klucza podstawowego, te wartości mogą być propagowany z powrotem do aplikacji klienckiej.) W obu przypadkach zwrócona <xref:System.Data.DataSet> mogą być scalone oryginalny aplikacja kliencka <xref:System.Data.DataSet> z <xref:System.Data.DataSet.Merge%2A> metody.  
  
 Aby ułatwić omówienie <xref:System.Data.DataSet.Merge%2A> metody, używamy "target" oznaczającego bieżącego <xref:System.Data.DataSet>i "źródło" i nazwę drugiego (parametr) <xref:System.Data.DataSet>. Element docelowy <xref:System.Data.DataSet> jest więc o nazwie, ponieważ jest to obiekt, na którym występuje akcję (scalenie). Drugi <xref:System.Data.DataSet> jest nazywany "źródło", ponieważ informacje o nim nie zmienia się, ale zamiast tego zostanie scalona z bieżącą <xref:System.Data.DataSet>.  
  
 Gdy <xref:System.Data.DataSet.Merge%2A> metoda jest wywoływana, schematy dwa <xref:System.Data.DataSet> obiekty są porównywane, ponieważ istnieje możliwość, że schematy mogły zostać zmienione. Na przykład w scenariuszu business-to-business, nowych kolumn może zostały dodane do schematu XML przez zautomatyzowany proces. Jeśli źródło <xref:System.Data.DataSet> zawiera elementy schematu (dodano <xref:System.Data.DataColumn> obiektów) Brak w elemencie docelowym, elementy schematu można dodać do obiektu docelowego, ustawiając `missingSchemaAction` argument `MissingSchemaAction.Add`. W takim przypadku scalonych <xref:System.Data.DataSet> zawiera dodano schemat i dane.  
  
 Po scaleniu schematów, dane są scalane.  
  
 Podczas scalania nowe źródło <xref:System.Data.DataSet> do obiektu docelowego, dowolnego źródła wierszy z <xref:System.Data.DataRowState> wartość `Unchanged`, `Modified`, lub `Deleted` są dopasowywane do docelowego wiersze z tej samej wartości klucza podstawowego. Wiersze ze źródła `DataRowState` wartość `Added` są dopasowywane do nowych wierszy docelowych przy użyciu tej samej wartości klucza podstawowego jako nowych wierszy źródłowych.  
  
 Ograniczenia są wyłączone podczas scalania. Jeśli wszystkie ograniczenia, nie można włączyć na końcu scalania, <xref:System.Data.ConstraintException> jest generowany i scalone dane są zachowywane podczas ograniczenia są wyłączone. W tym przypadku <xref:System.Data.DataSet.EnforceConstraints%2A> właściwość jest ustawiona na `false`, i błąd zaznaczone wszystkie wiersze, które są nieprawidłowe. Błędy muszą zostać rozwiązane przed podjęciem próby zresetowania <xref:System.Data.DataSet.EnforceConstraints%2A> właściwość `true`.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataSet dataSet, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataSet dataSet, bool preserveChanges, valuetype System.Data.MissingSchemaAction missingSchemaAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataSet ^ dataSet, bool preserveChanges, System::Data::MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataSet * bool * System.Data.MissingSchemaAction -&gt; unit" Usage="dataSet.Merge (dataSet, preserveChanges, missingSchemaAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="preserveChanges" Type="System.Boolean" />
        <Parameter Name="missingSchemaAction" Type="System.Data.MissingSchemaAction" />
      </Parameters>
      <Docs>
        <param name="dataSet"><see langword="DataSet" /> Którego danych i schemat zostaną scalone.</param>
        <param name="preserveChanges"><see langword="true" /> Aby zachować zmiany w bieżącym <see langword="DataSet" />; w przeciwnym razie <see langword="false" />.</param>
        <param name="missingSchemaAction">Jedną z <see cref="T:System.Data.MissingSchemaAction" /> wartości.</param>
        <summary>Scala określoną <see cref="T:System.Data.DataSet" /> i jego schematu z bieżącymi <see langword="DataSet" />, zachowując lub odrzucanie zmian w bieżącym <see langword="DataSet" /> i obsługa niezgodny schemat, zgodnie z danym argumentów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet.Merge%2A> Metoda jest używana, aby scalić dwa <xref:System.Data.DataSet> obiektów, które mają w dużej mierze podobny schematów. Scalanie jest zazwyczaj używany w aplikacji klienckiej do włączenie najnowsze zmiany ze źródła danych do istniejącego <xref:System.Data.DataSet>. Dzięki temu aplikacja kliencka odświeżyć <xref:System.Data.DataSet> przy użyciu najnowszych danych ze źródła danych.  
  
 <xref:System.Data.DataSet.Merge%2A> Metoda jest zwykle nazywany na końcu szereg procedur, które obejmują sprawdzanie poprawności zmian, uzgadnianie błędy, aktualizowanie źródła danych za pomocą zmian i na koniec odświeżanie istniejącego <xref:System.Data.DataSet>.  
  
 W aplikacji klienckiej jest często mają jednego przycisku, który użytkownik może kliknąć zbiera dane zmienione, a następnie zweryfikuje go przed wysłaniem ich do składnika warstwy środkowej. W tym scenariuszu <xref:System.Data.DataSet.GetChanges%2A> wywołaniu metody. Metoda zwraca wartość sekund <xref:System.Data.DataSet> zoptymalizowane pod kątem sprawdzania poprawności i scalania. To drugie <xref:System.Data.DataSet> obiekt zawiera tylko <xref:System.Data.DataTable> i <xref:System.Data.DataRow> obiektów, które zostały zmienione, wynikające z podzbioru oryginalny <xref:System.Data.DataSet>. Ten podzbiór jest zwykle mniejsze i dlatego więcej efektywnie przekazywany z powrotem do składnika warstwy środkowej. Składnik warstwy środkowej następnie aktualizuje oryginalnego źródła danych zmian za pomocą procedur składowanych. Warstwy środkowej można wysłać kopii albo nową <xref:System.Data.DataSet> zawierającego oryginalne dane i najnowszych danych ze źródła danych (przez ponowne uruchomienie oryginalnego zapytania) lub Wyślij ponownie podzbioru ze wszystkimi zmianami, które zostały wprowadzone do niej ze źródła danych. (Na przykład, jeśli źródło danych automatycznie tworzy unikatowe wartości klucza podstawowego, te wartości mogą być propagowany z powrotem do aplikacji klienckiej.) W obu przypadkach zwrócona <xref:System.Data.DataSet> mogą być scalone oryginalny aplikacja kliencka <xref:System.Data.DataSet> z <xref:System.Data.DataSet.Merge%2A> metody.  
  
 Aby ułatwić omówienie <xref:System.Data.DataSet.Merge%2A> metody, używamy "target" oznaczającego bieżącego <xref:System.Data.DataSet>i "źródło" i nazwę drugiego (parametr) <xref:System.Data.DataSet>. Element docelowy <xref:System.Data.DataSet> jest więc o nazwie, ponieważ jest to obiekt, na którym występuje akcję (scalenie). Drugi <xref:System.Data.DataSet> jest nazywany "źródło", ponieważ informacje o nim nie zmienia się, ale zamiast tego zostanie scalona z bieżącą <xref:System.Data.DataSet>.  
  
 Gdy <xref:System.Data.DataSet.Merge%2A> metoda jest wywoływana, schematy dwa <xref:System.Data.DataSet> obiekty są porównywane, ponieważ istnieje możliwość, że schematy mogły zostać zmienione. Na przykład w scenariuszu business-to-business, nowych kolumn może zostały dodane do schematu XML przez zautomatyzowany proces. Jeśli źródło <xref:System.Data.DataSet> zawiera elementy schematu (dodano <xref:System.Data.DataColumn> obiektów) Brak w elemencie docelowym, elementy schematu można dodać do obiektu docelowego, ustawiając `missingSchemaAction` argument `MissingSchemaAction.Add`. W takim przypadku scalonych <xref:System.Data.DataSet> zawiera dodano schemat i dane.  
  
 Po scaleniu schematów, dane są scalane.  
  
 Podczas scalania nowe źródło <xref:System.Data.DataSet> do obiektu docelowego, dowolnego źródła wierszy z <xref:System.Data.DataRowState> wartość `Unchanged`, `Modified`, lub `Deleted` są dopasowywane do docelowego wiersze z tej samej wartości klucza podstawowego. Wiersze ze źródła `DataRowState` wartość `Added` są dopasowywane do nowych wierszy docelowych przy użyciu tej samej wartości klucza podstawowego jako nowych wierszy źródłowych.  
  
 Ograniczenia są wyłączone podczas scalania. Jeśli wszystkie ograniczenia, nie można włączyć na końcu scalania, <xref:System.Data.ConstraintException> jest generowany i scalone dane są zachowywane podczas ograniczenia są wyłączone. W tym przypadku <xref:System.Data.DataSet.EnforceConstraints%2A> właściwość jest ustawiona na `false`, i błąd zaznaczone wszystkie wiersze, które są nieprawidłowe. Błędy muszą zostać rozwiązane przed podjęciem próby zresetowania <xref:System.Data.DataSet.EnforceConstraints%2A> właściwość `true`.  
  
   
  
## Examples  
 Poniższy przykład tworzy prostą <xref:System.Data.DataSet> z jednej tabeli, dwóch kolumn i dziesięć wierszy. Dwie wartości są zmieniane i dodaniu jeden wiersz. Podzestaw zmienionych danych jest tworzona przy użyciu <xref:System.Data.DataSet.GetChanges%2A> metody. Po uzgodnieniu błędy, nowa kolumna zostanie dodana do podzbioru zmiana schematu. Gdy <xref:System.Data.DataSet.Merge%2A> metoda jest wywoływana z `missingSchemaAction` równa `MissingSchemaAction.Add`, nowa kolumna zostanie dodana do oryginalnego <xref:System.Data.DataSet> schemacie obiektu.  
  
 [!code-csharp[Classic WebData DataSet.Merge2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Merge2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="dataSet" /> Jest <see langword="null" />.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataTable table, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataTable table, bool preserveChanges, valuetype System.Data.MissingSchemaAction missingSchemaAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataTable ^ table, bool preserveChanges, System::Data::MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataTable * bool * System.Data.MissingSchemaAction -&gt; unit" Usage="dataSet.Merge (table, preserveChanges, missingSchemaAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="preserveChanges" Type="System.Boolean" />
        <Parameter Name="missingSchemaAction" Type="System.Data.MissingSchemaAction" />
      </Parameters>
      <Docs>
        <param name="table"><see langword="DataTable" /> Którego danych i schemat zostaną scalone.</param>
        <param name="preserveChanges">Jedną z <see cref="T:System.Data.MissingSchemaAction" /> wartości.</param>
        <param name="missingSchemaAction"><see langword="true" /> Aby zachować zmiany w <see langword="DataSet" />; w przeciwnym razie <see langword="false" />.</param>
        <summary>Scala określoną <see cref="T:System.Data.DataTable" /> i jego schemat do bieżącego <see langword="DataSet" />, zachowując lub odrzucanie zmian w <see langword="DataSet" /> i obsługa niezgodny schemat, zgodnie z danym argumentów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet.Merge%2A> Metoda jest używana, aby scalić dwa <xref:System.Data.DataSet> obiektów, które mają w dużej mierze podobny schematów. Scalanie jest zazwyczaj używany w aplikacji klienckiej do włączenie najnowsze zmiany ze źródła danych do istniejącego <xref:System.Data.DataSet>. Dzięki temu aplikacja kliencka odświeżyć <xref:System.Data.DataSet> przy użyciu najnowszych danych ze źródła danych.  
  
 <xref:System.Data.DataSet.Merge%2A> Metoda jest zwykle nazywany na końcu szereg procedur, które obejmują sprawdzanie poprawności zmian, uzgadnianie błędy, aktualizowanie źródła danych za pomocą zmian i na koniec odświeżanie istniejącego <xref:System.Data.DataSet>.  
  
 Jon aplikacja kliencka, jest często mają jednego przycisku, który użytkownik może kliknąć zbiera dane zmienione, a następnie zweryfikuje go przed wysłaniem ich do składnika warstwy środkowej. W tym scenariuszu <xref:System.Data.DataSet.GetChanges%2A> wywołaniu metody. Metoda zwraca wartość sekund <xref:System.Data.DataSet> zoptymalizowane pod kątem sprawdzania poprawności i scalania. To drugie <xref:System.Data.DataSet> obiekt zawiera tylko <xref:System.Data.DataTable> i <xref:System.Data.DataRow> obiektów, które zostały zmienione, wynikające z podzbioru oryginalny <xref:System.Data.DataSet>. Ten podzbiór jest zwykle mniejsze i dlatego więcej efektywnie przekazywany z powrotem do składnika warstwy środkowej. Składnik warstwy środkowej następnie aktualizuje oryginalnego źródła danych zmian za pomocą procedur składowanych. Warstwy środkowej można wysłać kopii albo nową <xref:System.Data.DataSet> zawierającego oryginalne dane i najnowszych danych ze źródła danych (przez ponowne uruchomienie oryginalnego zapytania) lub Wyślij ponownie podzbioru ze wszystkimi zmianami, które zostały wprowadzone do niej ze źródła danych. (Na przykład, jeśli źródło danych automatycznie tworzy unikatowe wartości klucza podstawowego, te wartości mogą być propagowany z powrotem do aplikacji klienckiej.) W obu przypadkach zwrócona <xref:System.Data.DataSet> mogą być scalone oryginalny aplikacja kliencka <xref:System.Data.DataSet> z <xref:System.Data.DataSet.Merge%2A> metody.  
  
 Gdy <xref:System.Data.DataSet.Merge%2A> metoda jest wywoływana, schematy dwa <xref:System.Data.DataSet> obiekty są porównywane, ponieważ istnieje możliwość, że schematy mogły zostać zmienione. Na przykład w scenariuszu business-to-business, nowych kolumn może zostały dodane do schematu XML przez zautomatyzowany proces. Jeśli źródło <xref:System.Data.DataSet> zawiera elementy schematu (dodano <xref:System.Data.DataColumn> obiektów) Brak w elemencie docelowym, elementy schematu można dodać do obiektu docelowego, ustawiając `missingSchemaAction` argument `MissingSchemaAction.Add`. W takim przypadku scalonych <xref:System.Data.DataSet> zawiera dodano schemat i dane.  
  
 Po scaleniu schematów, dane są scalane.  
  
 Podczas scalania nowe źródło <xref:System.Data.DataSet> do obiektu docelowego, dowolnego źródła wierszy z <xref:System.Data.DataRowState> wartość `Unchanged`, `Modified`, lub `Deleted` są dopasowywane do docelowego wiersze z tej samej wartości klucza podstawowego. Wiersze ze źródła `DataRowState` wartość `Added` są dopasowywane do nowych wierszy docelowych przy użyciu tej samej wartości klucza podstawowego jako nowych wierszy źródłowych.  
  
 Ograniczenia są wyłączone podczas scalania. Jeśli wszystkie ograniczenia, nie można włączyć na końcu scalania, <xref:System.Data.ConstraintException> jest generowany i scalone dane są zachowywane podczas ograniczenia są wyłączone. W tym przypadku <xref:System.Data.DataSet.EnforceConstraints%2A> właściwość jest ustawiona na `false`, i błąd zaznaczone wszystkie wiersze, które są nieprawidłowe. Błędy muszą zostać rozwiązane przed podjęciem próby zresetowania <xref:System.Data.DataSet.EnforceConstraints%2A> właściwość `true`.  
  
   
  
## Examples  
 Poniższy przykład tworzy prostą <xref:System.Data.DataSet> z jednej tabeli, dwóch kolumn i dziesięć wierszy. Sekundy <xref:System.Data.DataTable> utworzeniu oznacza to niemal identyczny z pierwszym z tą różnicą, że nowy `DataColumn` jest dodawane do tabeli. Dwa wiersze są dodawane do drugiej tabeli, która następnie zostanie scalona <xref:System.Data.DataSet> z `preserveChanges` argument wartość `false`i `missingSchemaAction` argument wartość `MissingSchemaAction.Add`.  
  
 [!code-csharp[Classic WebData DataSet.Merge4 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge4 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Merge4 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge4 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="dataSet" /> Jest <see langword="null" />.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="MergeFailed">
      <MemberSignature Language="C#" Value="public event System.Data.MergeFailedEventHandler MergeFailed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.MergeFailedEventHandler MergeFailed" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataSet.MergeFailed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MergeFailed As MergeFailedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::MergeFailedEventHandler ^ MergeFailed;" />
      <MemberSignature Language="F#" Value="member this.MergeFailed : System.Data.MergeFailedEventHandler " Usage="member this.MergeFailed : System.Data.MergeFailedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetMergeFailedDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.MergeFailedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy źródłowa i docelowa <see cref="T:System.Data.DataRow" /> mieć tej samej wartości klucza podstawowego, a <see cref="P:System.Data.DataSet.EnforceConstraints" /> jest ustawiona na wartość true.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Handling and Raising Events](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 W poniższym przykładzie pokazano użycie <xref:System.Data.DataSet.MergeFailed> zdarzeń.  
  
 [!code-csharp[Classic WebData DataSet.MergeFailed Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.MergeFailed Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.MergeFailed Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.MergeFailed Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.Data.DataSet.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetNamespaceDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia obszar nazw <see cref="T:System.Data.DataSet" />.</summary>
        <value>Przestrzeń nazw <see cref="T:System.Data.DataSet" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet.Namespace%2A> Właściwość jest używana podczas odczytywania i zapisywania pliku XML dokumentu do <xref:System.Data.DataSet> przy użyciu <xref:System.Data.DataSet.ReadXml%2A>, <xref:System.Data.DataSet.WriteXml%2A>, <xref:System.Data.DataSet.ReadXmlSchema%2A>, lub <xref:System.Data.DataSet.WriteXmlSchema%2A> metody.  
  
 Przestrzeń nazw w dokumencie XML jest używany do określania zakresu atrybutów XML i elementy, gdy odczytywany przez usługę <xref:System.Data.DataSet>. Na przykład jeśli <xref:System.Data.DataSet> zawiera schemat, została odczytana z dokumentu z przestrzenią nazw "Moja firma," i zostanie podjęta próba odczytu danych tylko z dokumentu z innej przestrzeni nazw, wszelkie dane, które nie odpowiadają istniejącego schematu zostanie zignorowany.  
  
   
  
## Examples  
 Poniższy przykład ustawia <xref:System.Data.DataSet.Prefix%2A> przed wywołaniem <xref:System.Data.DataSet.ReadXml%2A> metody.  
  
 [!code-csharp[Classic WebData DataSet.Namespace Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Namespace Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Namespace Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Namespace Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Przestrzeń nazw zawiera już dane.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanging(class System.ComponentModel.PropertyChangedEventArgs pcevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyChanging (pcevent As PropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPropertyChanging(System::ComponentModel::PropertyChangedEventArgs ^ pcevent);" />
      <MemberSignature Language="F#" Value="abstract member OnPropertyChanging : System.ComponentModel.PropertyChangedEventArgs -&gt; unit&#xA;override this.OnPropertyChanging : System.ComponentModel.PropertyChangedEventArgs -&gt; unit" Usage="dataSet.OnPropertyChanging pcevent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcevent" Type="System.ComponentModel.PropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="pcevent">Element <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Wywołuje <see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać przegląd, zobacz [Handling and Raising Events](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Podczas zastępowania <see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /> w klasie pochodnej, upewnij się wywołać klasy bazowej <see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /> metody.</para></block>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="OnRemoveRelation">
      <MemberSignature Language="C#" Value="protected virtual void OnRemoveRelation (System.Data.DataRelation relation);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRemoveRelation(class System.Data.DataRelation relation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.OnRemoveRelation(System.Data.DataRelation)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRemoveRelation (relation As DataRelation)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRemoveRelation(System::Data::DataRelation ^ relation);" />
      <MemberSignature Language="F#" Value="abstract member OnRemoveRelation : System.Data.DataRelation -&gt; unit&#xA;override this.OnRemoveRelation : System.Data.DataRelation -&gt; unit" Usage="dataSet.OnRemoveRelation relation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relation" Type="System.Data.DataRelation" />
      </Parameters>
      <Docs>
        <param name="relation"><see cref="T:System.Data.DataRelation" /> Usuwany.</param>
        <summary>Występuje, gdy <see cref="T:System.Data.DataRelation" /> obiekt zostanie usunięty z <see cref="T:System.Data.DataTable" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda powinna zostać zastąpiona przez podklasy ograniczyć Trwa usuwanie tabel  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="OnRemoveTable">
      <MemberSignature Language="C#" Value="protected internal virtual void OnRemoveTable (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnRemoveTable(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.OnRemoveTable(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnRemoveTable (table As DataTable)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnRemoveTable(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="abstract member OnRemoveTable : System.Data.DataTable -&gt; unit&#xA;override this.OnRemoveTable : System.Data.DataTable -&gt; unit" Usage="dataSet.OnRemoveTable table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="table"><see cref="T:System.Data.DataTable" /> Usuwany.</param>
        <summary>Występuje, gdy <see cref="T:System.Data.DataTable" /> zostanie usunięty z <see cref="T:System.Data.DataSet" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda może być zastąpiona przez podklasy, aby uniemożliwić usunięcie tabel.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano klasę pochodną <xref:System.Data.DataSet> z <xref:System.Data.DataSet.OnRemoveTable%2A> metoda przesłonięcia.  
  
 [!code-csharp[Classic WebData DataSet.OnRemoveTable Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.OnRemoveTable Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.OnRemoveTable Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.OnRemoveTable Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Prefix">
      <MemberSignature Language="C#" Value="public string Prefix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Prefix" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Prefix" />
      <MemberSignature Language="VB.NET" Value="Public Property Prefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Prefix { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Prefix : string with get, set" Usage="System.Data.DataSet.Prefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetPrefixDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia XML prefiks tego aliasów przestrzeni nazw <see cref="T:System.Data.DataSet" />.</summary>
        <value>Prefiks XML <see cref="T:System.Data.DataSet" /> przestrzeni nazw.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet.Prefix%2A> Właściwość jest używana w dokumencie XML, aby zidentyfikować elementy, które należą do przestrzeni nazw <xref:System.Data.DataSet> obiektu (jak ustawić przez <xref:System.Data.DataSet.Namespace%2A> właściwości).  
  
   
  
## Examples  
 Poniższy przykład ustawia <xref:System.Data.DataSet.Prefix%2A> przed wywołaniem <xref:System.Data.DataSet.ReadXml%2A> metody.  
  
 [!code-csharp[Classic WebData DataSet.Namespace Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Namespace Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Namespace Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Namespace Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="RaisePropertyChanging">
      <MemberSignature Language="C#" Value="protected internal void RaisePropertyChanging (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void RaisePropertyChanging(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.RaisePropertyChanging(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub RaisePropertyChanging (name As String)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void RaisePropertyChanging(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.RaisePropertyChanging : string -&gt; unit" Usage="dataSet.RaisePropertyChanging name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nazwa właściwości, która ma zostać zmieniona.</param>
        <summary>Wysyła powiadomienie określonego <see cref="T:System.Data.DataSet" /> właściwość ma zostać zmieniona.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadXml">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Odczytuje schemat XML i dane <see cref="T:System.Data.DataSet" />.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.IO.Stream -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">Obiekt, który pochodzi od klasy <see cref="T:System.IO.Stream" />.</param>
        <summary>Odczytuje schemat XML i dane <see cref="T:System.Data.DataSet" /> przy użyciu określonego <see cref="T:System.IO.Stream" />.</summary>
        <returns><see cref="T:System.Data.XmlReadMode" /> Używane do odczytywania danych.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet.ReadXml%2A> Metoda zapewnia sposób odczytać tylko dane lub zarówno danych i schemat w <xref:System.Data.DataSet> z dokumentu XML, natomiast <xref:System.Data.DataSet.ReadXmlSchema%2A> metoda odczytuje tylko schemat. Do odczytywania danych i schemat, użyj jednej z `ReadXML` przeciążenia, które obejmuje `mode` parametru i ustawić jej wartość na `ReadSchema`.  
  
 Należy pamiętać, że dotyczy to także <xref:System.Data.DataSet.WriteXml%2A> i <xref:System.Data.DataSet.WriteXmlSchema%2A> metod, odpowiednio. Aby zapisać dane XML, lub schemat i dane z `DataSet`, użyj `WriteXml` metody. Aby zapisać sam schemat, należy użyć `WriteXmlSchema` metody.  
  
> [!NOTE]
>  <xref:System.InvalidOperationException> Zostanie zgłoszony, jeśli typ kolumny w `DataRow` trwa od zapisu lub odczytu implementuje <xref:System.Dynamic.IDynamicMetaObjectProvider> implementuje <xref:System.Xml.Serialization.IXmlSerializable>.  
  
 Jeśli określono schemat w tekście, schemat w tekście jest używany rozszerzyć istniejącą strukturę relacyjnej przed załadowaniem danych. Jeśli występują konflikty (na przykład tej samej kolumny w tej samej tabeli, które są zdefiniowane przy użyciu różnych typów danych), zgłaszany jest wyjątek.  
  
 Jeśli jest określony żaden schemat w tekście, relacyjnej struktury został rozszerzony za pomocą wnioskowania, odpowiednio do potrzeb zgodnie z strukturę dokumentu XML. Jeśli schemat nie można rozszerzyć za pośrednictwem wnioskowania, aby udostępnić wszystkie dane, zgłaszany jest wyjątek.  
  
> [!NOTE]
>  `DataSet` Nie kojarzy — element XML z odpowiadającymi mu dostawcami `DataColumn` lub `DataTable` po prawne znaków XML, takich jak ("_") będą miały zmienione znaczenie w serializacji XML. `DataSet` Tylko specjalne niedozwolone znaki XML w nazwach elementów XML i dlatego mogą korzystać tylko takie same. Gdy prawidłowe znaki w nazwie elementu XML są poprzedzone znakiem zmiany znaczenia, element jest ignorowany podczas przetwarzania.  
  
 Jeśli schemat XML <xref:System.Data.DataSet> obejmuje `targetNamespace`, nie można odczytać danych i mogą wystąpić wyjątki podczas wywoływania <xref:System.Data.DataSet.ReadXml%2A> załadować <xref:System.Data.DataSet> za pomocą XML, który zawiera elementy z nie kwalifikującym się przestrzenią nazw. Aby odczytać elementy niekwalifikowane, należy ustawić `elementFormDefault` równa "kwalifikowany" schematów XML, tak jak pokazano w poniższym przykładzie.  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  Jeśli schemat usługi <xref:System.Data.DataSet> zawiera elementy o takiej samej nazwie, ale inny typ w tej samej przestrzeni nazw, zgłaszany jest wyjątek podczas próby odczytu schematu do <xref:System.Data.DataSet> z <xref:System.Data.DataSet.ReadXml%2A> , określając `XmlReadMode.ReadSchema`. Ten wyjątek nie występuje, jeśli używasz platformy .NET Framework w wersji 1.0.  
  
   
  
## Examples  
 Poniższy przykład najpierw tworzy prostą <xref:System.Data.DataSet> przy użyciu jednego <xref:System.Data.DataTable>, dwóch kolumn i dziesięć wierszy. <xref:System.Data.DataSet> Schemat i dane są zapisywane na dysku, wywołując <xref:System.Data.DataSet.WriteXml%2A> metody. Sekundy <xref:System.Data.DataSet> jest tworzony i <xref:System.Data.DataSet.ReadXml%2A> metoda jest używana do go wypełnić przy użyciu schematu i danych.  
  
 [!code-csharp[Classic WebData DataSet.ReadXml1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXml1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)" />
        <altmember cref="M:System.Data.DataSet.WriteXml(System.IO.Stream)" />
        <altmember cref="M:System.Data.DataSet.WriteXmlSchema(System.IO.Stream)" />
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.IO.TextReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.IO.TextReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (reader As TextReader) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::IO::TextReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.IO.TextReader -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="reader"><see langword="TextReader" /> z którego można odczytać schematu i danych.</param>
        <summary>Odczytuje schemat XML i dane <see cref="T:System.Data.DataSet" /> przy użyciu określonego <see cref="T:System.IO.TextReader" />.</summary>
        <returns><see cref="T:System.Data.XmlReadMode" /> Używane do odczytywania danych.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet.ReadXml%2A> Metoda zapewnia sposób odczytać tylko dane lub zarówno danych i schemat w <xref:System.Data.DataSet> z dokumentu XML, natomiast <xref:System.Data.DataSet.ReadXmlSchema%2A> metoda odczytuje tylko schemat. Do odczytywania danych i schemat, użyj jednej z `ReadXML` przeciążenia, które obejmuje `mode` parametru i ustawić jej wartość na `ReadSchema`.  
  
 Należy pamiętać, że dotyczy to także <xref:System.Data.DataSet.WriteXml%2A> i <xref:System.Data.DataSet.WriteXmlSchema%2A> metod, odpowiednio. Aby zapisać dane XML, lub schemat i dane z `DataSet`, użyj `WriteXml` metody. Aby zapisać sam schemat, należy użyć `WriteXmlSchema` metody.  
  
> [!NOTE]
>  <xref:System.InvalidOperationException> Zostanie zgłoszony, jeśli typ kolumny w `DataRow` trwa od zapisu lub odczytu implementuje <xref:System.Dynamic.IDynamicMetaObjectProvider> implementuje <xref:System.Xml.Serialization.IXmlSerializable>.  
  
 Jeśli określono schemat w tekście, schemat w tekście jest używany rozszerzyć istniejącą strukturę relacyjnej przed załadowaniem danych. Jeśli występują konflikty (na przykład tej samej kolumny w tej samej tabeli, które są zdefiniowane przy użyciu różnych typów danych), zgłaszany jest wyjątek.  
  
 Jeśli jest określony żaden schemat w tekście, relacyjnej struktury został rozszerzony za pomocą wnioskowania, odpowiednio do potrzeb zgodnie z strukturę dokumentu XML. Jeśli schemat nie można rozszerzyć za pośrednictwem wnioskowania, aby udostępnić wszystkie dane, zgłaszany jest wyjątek.  
  
> [!NOTE]
>  `DataSet` Nie kojarzy — element XML z odpowiadającymi mu dostawcami `DataColumn` lub `DataTable` po prawne znaków XML, takich jak ("_") będą miały zmienione znaczenie w serializacji XML. `DataSet` Tylko specjalne niedozwolone znaki XML w nazwach elementów XML i dlatego mogą korzystać tylko takie same. Gdy prawidłowe znaki w nazwie elementu XML są poprzedzone znakiem zmiany znaczenia, element jest ignorowany podczas przetwarzania.  
  
 Jeśli schemat XML <xref:System.Data.DataSet> obejmuje `targetNamespace`, nie można odczytać danych i mogą wystąpić wyjątki podczas wywoływania <xref:System.Data.DataSet.ReadXml%2A> załadować <xref:System.Data.DataSet> za pomocą XML, który zawiera elementy z nie kwalifikującym się przestrzenią nazw. Aby odczytać elementy niekwalifikowane, należy ustawić `elementFormDefault` równa "kwalifikowany" w schemacie XML tak jak pokazano w poniższym przykładzie.  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
 Klasy, które dziedziczą z <xref:System.IO.TextReader> zawierają klasy <xref:System.IO.StreamReader> i <xref:System.IO.StringReader> klasy.  
  
> [!NOTE]
>  Jeśli schemat usługi <xref:System.Data.DataSet> zawiera elementy o takiej samej nazwie, ale inny typ w tej samej przestrzeni nazw, zgłaszany jest wyjątek podczas próby odczytu schematu do <xref:System.Data.DataSet> z <xref:System.Data.DataSet.ReadXml%2A> , określając `XmlReadMode.ReadSchema`. Ten wyjątek nie występuje, jeśli używasz platformy .NET Framework w wersji 1.0.  
  
   
  
## Examples  
 Poniższy przykład najpierw tworzy prostą <xref:System.Data.DataSet> przy użyciu jednego <xref:System.Data.DataTable>, dwóch kolumn i dziesięć wierszy. <xref:System.Data.DataSet> Schemat i dane są zapisywane na dysku, wywołując <xref:System.Data.DataSet.WriteXml%2A> metody. Sekundy <xref:System.Data.DataSet> jest tworzony i <xref:System.Data.DataSet.ReadXml%2A> metoda jest używana do go wypełnić przy użyciu schematu i danych.  
  
 [!code-csharp[Classic WebData DataSet.ReadXml2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXml2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (fileName As String) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : string -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">Nazwa pliku (łącznie ze ścieżką) z którego można odczytać.</param>
        <summary>Odczytuje schemat XML i dane <see cref="T:System.Data.DataSet" /> przy użyciu określonego pliku.</summary>
        <returns><see langword="XmlReadMode" /> Używane do odczytywania danych.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet.ReadXml%2A> Metoda zapewnia sposób odczytać tylko dane lub zarówno danych i schemat w <xref:System.Data.DataSet> z dokumentu XML, natomiast <xref:System.Data.DataSet.ReadXmlSchema%2A> metoda odczytuje tylko schemat. Do odczytywania danych i schemat, użyj jednej z `ReadXML` przeciążenia, które obejmuje `mode` parametru i ustawić jej wartość na `ReadSchema`.  
  
 Należy pamiętać, że dotyczy to także <xref:System.Data.DataSet.WriteXml%2A> i <xref:System.Data.DataSet.WriteXmlSchema%2A> metod, odpowiednio. Aby zapisać dane XML, lub schemat i dane z `DataSet`, użyj `WriteXml` metody. Aby zapisać sam schemat, należy użyć `WriteXmlSchema` metody.  
  
> [!NOTE]
>  <xref:System.InvalidOperationException> Zostanie zgłoszony, jeśli typ kolumny w `DataRow` trwa od zapisu lub odczytu implementuje <xref:System.Dynamic.IDynamicMetaObjectProvider> implementuje <xref:System.Xml.Serialization.IXmlSerializable>.  
  
 Jeśli określono schemat w tekście, schemat w tekście jest używany rozszerzyć istniejącą strukturę relacyjnej przed załadowaniem danych. Jeśli występują konflikty (na przykład tej samej kolumny w tej samej tabeli, które są zdefiniowane przy użyciu różnych typów danych), zgłaszany jest wyjątek.  
  
 Jeśli jest określony żaden schemat w tekście, relacyjnej struktury został rozszerzony za pomocą wnioskowania, odpowiednio do potrzeb zgodnie z strukturę dokumentu XML. Jeśli schemat nie można rozszerzyć za pośrednictwem wnioskowania, aby udostępnić wszystkie dane, zgłaszany jest wyjątek.  
  
> [!NOTE]
>  `DataSet` Nie kojarzy — element XML z odpowiadającymi mu dostawcami `DataColumn` lub `DataTable` po prawne znaków XML, takich jak ("_") będą miały zmienione znaczenie w serializacji XML. `DataSet` Tylko specjalne niedozwolone znaki XML w nazwach elementów XML i dlatego mogą korzystać tylko takie same. Gdy prawidłowe znaki w nazwie elementu XML są poprzedzone znakiem zmiany znaczenia, element jest ignorowany podczas przetwarzania.  
  
 Jeśli schemat XML <xref:System.Data.DataSet> obejmuje `targetNamespace`, nie można odczytać danych i mogą wystąpić wyjątki podczas wywoływania <xref:System.Data.DataSet.ReadXml%2A> załadować <xref:System.Data.DataSet> za pomocą XML, który zawiera elementy z nie kwalifikującym się przestrzenią nazw. Aby odczytać elementy niekwalifikowane, należy ustawić `elementFormDefault` równa "kwalifikowany" w schemacie XML tak jak pokazano w poniższym przykładzie.  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  Jeśli schemat usługi <xref:System.Data.DataSet> zawiera elementy o takiej samej nazwie, ale inny typ w tej samej przestrzeni nazw, zgłaszany jest wyjątek podczas próby odczytu schematu do <xref:System.Data.DataSet> z <xref:System.Data.DataSet.ReadXml%2A> , określając `XmlReadMode.ReadSchema`. Ten wyjątek nie występuje, jeśli używasz platformy .NET Framework w wersji 1.0.  
  
   
  
## Examples  
 Poniższy przykład najpierw tworzy prostą <xref:System.Data.DataSet> przy użyciu jednego <xref:System.Data.DataTable>, dwóch kolumn i dziesięć wierszy. <xref:System.Data.DataSet> Schemat i dane są zapisywane na dysku, wywołując <xref:System.Data.DataSet.WriteXml%2A> metody. Sekundy <xref:System.Data.DataSet> jest tworzony i <xref:System.Data.DataSet.ReadXml%2A> metoda jest używana do go wypełnić przy użyciu schematu i danych.  
  
 [!code-csharp[Classic WebData DataSet.ReadXml3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXml3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><see cref="T:System.Security.Permissions.FileIOPermission" /> Nie ustawiono <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">do odczytywania i zapisywania plików. Wyliczenie skojarzone: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></permission>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (reader As XmlReader) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.Xml.XmlReader -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader"><see cref="T:System.Xml.XmlReader" /> z którego można odczytać.</param>
        <summary>Odczytuje schemat XML i dane <see cref="T:System.Data.DataSet" /> przy użyciu określonego <see cref="T:System.Xml.XmlReader" />.</summary>
        <returns><see langword="XmlReadMode" /> Używane do odczytywania danych.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet.ReadXml%2A> Metoda zapewnia sposób odczytać tylko dane lub zarówno danych i schemat w <xref:System.Data.DataSet> z dokumentu XML, natomiast <xref:System.Data.DataSet.ReadXmlSchema%2A> metoda odczytuje tylko schemat. Do odczytywania danych i schemat, użyj jednej z `ReadXML` przeciążenia, które obejmuje `mode` parametru i ustawić jej wartość na `ReadSchema`.  
  
 Należy pamiętać, że dotyczy to także <xref:System.Data.DataSet.WriteXml%2A> i <xref:System.Data.DataSet.WriteXmlSchema%2A> metod, odpowiednio. Aby zapisać dane XML, lub schemat i dane z `DataSet`, użyj `WriteXml` metody. Aby zapisać sam schemat, należy użyć `WriteXmlSchema` metody.  
  
> [!NOTE]
>  <xref:System.InvalidOperationException> Zostanie zgłoszony, jeśli typ kolumny w `DataRow` trwa od zapisu lub odczytu implementuje <xref:System.Dynamic.IDynamicMetaObjectProvider> implementuje <xref:System.Xml.Serialization.IXmlSerializable>.  
  
 Jeśli określono schemat w tekście, schemat w tekście jest używany rozszerzyć istniejącą strukturę relacyjnej przed załadowaniem danych. Jeśli występują konflikty (na przykład tej samej kolumny w tej samej tabeli, które są zdefiniowane przy użyciu różnych typów danych), zgłaszany jest wyjątek.  
  
 Jeśli jest określony żaden schemat w tekście, relacyjnej struktury został rozszerzony za pomocą wnioskowania, odpowiednio do potrzeb zgodnie z strukturę dokumentu XML. Jeśli schemat nie można rozszerzyć za pośrednictwem wnioskowania, aby udostępnić wszystkie dane, zgłaszany jest wyjątek.  
  
> [!NOTE]
>  `DataSet` Nie kojarzy — element XML z odpowiadającymi mu dostawcami `DataColumn` lub `DataTable` po prawne znaków XML, takich jak ("_") będą miały zmienione znaczenie w serializacji XML. `DataSet` Tylko specjalne niedozwolone znaki XML w nazwach elementów XML i dlatego mogą korzystać tylko takie same. Gdy prawidłowe znaki w nazwie elementu XML są poprzedzone znakiem zmiany znaczenia, element jest ignorowany podczas przetwarzania.  
  
 Jeśli schemat XML <xref:System.Data.DataSet> obejmuje `targetNamespace`, nie można odczytać danych i mogą wystąpić wyjątki podczas wywoływania <xref:System.Data.DataSet.ReadXml%2A> załadować <xref:System.Data.DataSet> za pomocą XML, który zawiera elementy z nie kwalifikującym się przestrzenią nazw. Aby odczytać elementy niekwalifikowane, należy ustawić `elementFormDefault` równa "kwalifikowany" w schemacie XML tak jak pokazano w poniższym przykładzie.  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
 <xref:System.Xml.XmlTextReader?displayProperty=nameWithType> dziedziczy <xref:System.Xml.XmlReader>.  
  
> [!NOTE]
>  Jeśli schemat usługi <xref:System.Data.DataSet> zawiera elementy o takiej samej nazwie, ale inny typ w tej samej przestrzeni nazw, zgłaszany jest wyjątek podczas próby odczytu schematu do <xref:System.Data.DataSet> z <xref:System.Data.DataSet.ReadXml%2A> , określając `XmlReadMode.ReadSchema`. Ten wyjątek nie występuje, jeśli używasz platformy .NET Framework w wersji 1.0.  
  
   
  
## Examples  
 Poniższy przykład najpierw tworzy prostą <xref:System.Data.DataSet> przy użyciu jednego <xref:System.Data.DataTable>, dwóch kolumn i dziesięć wierszy. <xref:System.Data.DataSet> Schemat i dane są zapisywane na dysku, wywołując <xref:System.Data.DataSet.WriteXml%2A> metody. Sekundy <xref:System.Data.DataSet> jest tworzony i <xref:System.Data.DataSet.ReadXml%2A> metoda jest używana do go wypełnić przy użyciu schematu i danych.  
  
 [!code-csharp[Classic WebData DataSet.ReadXml Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXml Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.IO.Stream stream, System.Data.XmlReadMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.IO.Stream stream, valuetype System.Data.XmlReadMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.IO.Stream,System.Data.XmlReadMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::IO::Stream ^ stream, System::Data::XmlReadMode mode);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.IO.Stream * System.Data.XmlReadMode -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml (stream, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="mode" Type="System.Data.XmlReadMode" />
      </Parameters>
      <Docs>
        <param name="stream"><see cref="T:System.IO.Stream" /> z którego można odczytać.</param>
        <param name="mode">Jedną z <see cref="T:System.Data.XmlReadMode" /> wartości.</param>
        <summary>Odczytuje schemat XML i dane <see cref="T:System.Data.DataSet" /> przy użyciu określonego <see cref="T:System.IO.Stream" /> i <see cref="T:System.Data.XmlReadMode" />.</summary>
        <returns><see langword="XmlReadMode" /> Używane do odczytywania danych.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet.ReadXml%2A> Metoda zapewnia sposób odczytać tylko dane lub zarówno danych i schemat w <xref:System.Data.DataSet> z dokumentu XML, natomiast <xref:System.Data.DataSet.ReadXmlSchema%2A> metoda odczytuje tylko schemat. Do odczytywania danych i schemat, użyj jednej z `ReadXML` przeciążenia, które obejmuje `mode` parametru i ustawić jej wartość na `ReadSchema`.  
  
 Dotyczy to także <xref:System.Data.DataSet.WriteXml%2A> i <xref:System.Data.DataSet.WriteXmlSchema%2A> metod, odpowiednio. Aby zapisać dane XML, lub schemat i dane z `DataSet`, użyj `WriteXml` metody. Aby zapisać sam schemat, należy użyć `WriteXmlSchema` metody.  
  
> [!NOTE]
>  Kiedy używasz <xref:System.Data.DataSet.ReadXml%2A> i ustawiasz <xref:System.Data.XmlReadMode> do `Diffgram`, zawartość elementu docelowego `DataSet` a oryginalny wskaźnik `DataSet` mogą się różnić z powodu jak generowane i przetwarzane w formacie diffgram. Aby uzyskać więcej informacji na temat DataSets, zobacz [DataSets](~/docs/framework/data/adonet/dataset-datatable-dataview/diffgrams.md).  
  
> [!NOTE]
>  <xref:System.InvalidOperationException> Zostanie zgłoszony, jeśli typ kolumny w `DataRow` trwa od zapisu lub odczytu implementuje <xref:System.Dynamic.IDynamicMetaObjectProvider> implementuje <xref:System.Xml.Serialization.IXmlSerializable>.  
  
 Jeśli określono schemat w tekście, schemat w tekście jest używany rozszerzyć istniejącą strukturę relacyjnej przed załadowaniem danych. Jeśli występują konflikty (na przykład tej samej kolumny w tej samej tabeli, które są zdefiniowane przy użyciu różnych typów danych), zgłaszany jest wyjątek.  
  
 Jeśli jest określony żaden schemat w tekście, relacyjnej struktury został rozszerzony za pomocą wnioskowania, odpowiednio do potrzeb zgodnie z strukturę dokumentu XML. Jeśli schemat nie można rozszerzyć za pośrednictwem wnioskowania, aby udostępnić wszystkie dane, zgłaszany jest wyjątek.  
  
> [!NOTE]
>  `DataSet` Nie kojarzy — element XML z odpowiadającymi mu dostawcami `DataColumn` lub `DataTable` po prawne znaków XML, takich jak ("_") będą miały zmienione znaczenie w serializacji XML. `DataSet` Tylko specjalne niedozwolone znaki XML w nazwach elementów XML i dlatego mogą korzystać tylko takie same. Gdy prawidłowe znaki w nazwie elementu XML są poprzedzone znakiem zmiany znaczenia, element jest ignorowany podczas przetwarzania.  
  
 Jeśli schemat XML <xref:System.Data.DataSet> obejmuje `targetNamespace`, nie można odczytać danych i mogą wystąpić wyjątki podczas wywoływania <xref:System.Data.DataSet.ReadXml%2A> załadować <xref:System.Data.DataSet> za pomocą XML, który zawiera elementy z nie kwalifikującym się przestrzenią nazw. Aby odczytać elementy niekwalifikowane, należy ustawić `elementFormDefault` równa "kwalifikowany" w schemacie XML tak jak pokazano w poniższym przykładzie.  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  Jeśli schemat usługi <xref:System.Data.DataSet> zawiera elementy o takiej samej nazwie, ale inny typ w tej samej przestrzeni nazw, zgłaszany jest wyjątek podczas próby odczytu schematu do <xref:System.Data.DataSet> z <xref:System.Data.DataSet.ReadXml%2A> , określając `XmlReadMode.ReadSchema`. Ten wyjątek nie występuje, jeśli używasz platformy .NET Framework w wersji 1.0.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.IO.TextReader reader, System.Data.XmlReadMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.IO.TextReader reader, valuetype System.Data.XmlReadMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.IO.TextReader,System.Data.XmlReadMode)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (reader As TextReader, mode As XmlReadMode) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::IO::TextReader ^ reader, System::Data::XmlReadMode mode);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.IO.TextReader * System.Data.XmlReadMode -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml (reader, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
        <Parameter Name="mode" Type="System.Data.XmlReadMode" />
      </Parameters>
      <Docs>
        <param name="reader"><see cref="T:System.IO.TextReader" /> z którego można odczytać.</param>
        <param name="mode">Jedną z <see cref="T:System.Data.XmlReadMode" /> wartości.</param>
        <summary>Odczytuje schemat XML i dane <see cref="T:System.Data.DataSet" /> przy użyciu określonego <see cref="T:System.IO.TextReader" /> i <see cref="T:System.Data.XmlReadMode" />.</summary>
        <returns><see langword="XmlReadMode" /> Używane do odczytywania danych.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet.ReadXml%2A> Metoda zapewnia sposób odczytać tylko dane lub zarówno danych i schemat w <xref:System.Data.DataSet> z dokumentu XML, natomiast <xref:System.Data.DataSet.ReadXmlSchema%2A> metoda odczytuje tylko schemat. Do odczytywania danych i schemat, użyj jednej z `ReadXML` przeciążenia, które obejmuje `mode` parametru i ustawić jej wartość na `ReadSchema`.  
  
 Należy pamiętać, że dotyczy to także <xref:System.Data.DataSet.WriteXml%2A> i <xref:System.Data.DataSet.WriteXmlSchema%2A> metod, odpowiednio. Aby zapisać dane XML, lub schemat i dane z `DataSet`, użyj `WriteXml` metody. Aby zapisać sam schemat, należy użyć `WriteXmlSchema` metody.  
  
> [!NOTE]
>  <xref:System.InvalidOperationException> Zostanie zgłoszony, jeśli typ kolumny w `DataRow` trwa od zapisu lub odczytu implementuje <xref:System.Dynamic.IDynamicMetaObjectProvider> implementuje <xref:System.Xml.Serialization.IXmlSerializable>.  
  
 Jeśli określono schemat w tekście, schemat w tekście jest używany rozszerzyć istniejącą strukturę relacyjnej przed załadowaniem danych. Jeśli występują konflikty (na przykład tej samej kolumny w tej samej tabeli, które są zdefiniowane przy użyciu różnych typów danych), zgłaszany jest wyjątek.  
  
 Jeśli jest określony żaden schemat w tekście, relacyjnej struktury został rozszerzony za pomocą wnioskowania, odpowiednio do potrzeb zgodnie z strukturę dokumentu XML. Jeśli schemat nie można rozszerzyć za pośrednictwem wnioskowania, aby udostępnić wszystkie dane, zgłaszany jest wyjątek.  
  
> [!NOTE]
>  `DataSet` Nie kojarzy — element XML z odpowiadającymi mu dostawcami `DataColumn` lub `DataTable` po prawne znaków XML, takich jak ("_") będą miały zmienione znaczenie w serializacji XML. `DataSet` Tylko specjalne niedozwolone znaki XML w nazwach elementów XML i dlatego mogą korzystać tylko takie same. Gdy prawidłowe znaki w nazwie elementu XML są poprzedzone znakiem zmiany znaczenia, element jest ignorowany podczas przetwarzania.  
  
 Jeśli schemat XML <xref:System.Data.DataSet> obejmuje `targetNamespace`, nie można odczytać danych i mogą wystąpić wyjątki podczas wywoływania <xref:System.Data.DataSet.ReadXml%2A> załadować <xref:System.Data.DataSet> za pomocą XML, który zawiera elementy z nie kwalifikującym się przestrzenią nazw. Aby odczytać elementy niekwalifikowane, należy ustawić `elementFormDefault` równa "kwalifikowany" w schemacie XML tak jak pokazano w poniższym przykładzie.  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  Jeśli schemat usługi <xref:System.Data.DataSet> zawiera elementy o takiej samej nazwie, ale inny typ w tej samej przestrzeni nazw, zgłaszany jest wyjątek podczas próby odczytu schematu do <xref:System.Data.DataSet> z <xref:System.Data.DataSet.ReadXml%2A> , określając `XmlReadMode.ReadSchema`. Ten wyjątek nie występuje, jeśli używasz platformy .NET Framework w wersji 1.0.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (string fileName, System.Data.XmlReadMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(string fileName, valuetype System.Data.XmlReadMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.String,System.Data.XmlReadMode)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (fileName As String, mode As XmlReadMode) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::String ^ fileName, System::Data::XmlReadMode mode);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : string * System.Data.XmlReadMode -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml (fileName, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="mode" Type="System.Data.XmlReadMode" />
      </Parameters>
      <Docs>
        <param name="fileName">Nazwa pliku (łącznie ze ścieżką) z którego można odczytać.</param>
        <param name="mode">Jedną z <see cref="T:System.Data.XmlReadMode" /> wartości.</param>
        <summary>Odczytuje schemat XML i dane <see cref="T:System.Data.DataSet" /> przy użyciu określonego pliku i <see cref="T:System.Data.XmlReadMode" />.</summary>
        <returns><see langword="XmlReadMode" /> Używane do odczytywania danych.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet.ReadXml%2A> Metoda zapewnia sposób odczytać tylko dane lub zarówno danych i schemat w <xref:System.Data.DataSet> z dokumentu XML, natomiast <xref:System.Data.DataSet.ReadXmlSchema%2A> metoda odczytuje tylko schemat. Do odczytywania danych i schemat, użyj jednej z `ReadXML` przeciążenia, które obejmuje `mode` parametru i ustawić jej wartość na `ReadSchema`.  
  
 Należy pamiętać, że dotyczy to także <xref:System.Data.DataSet.WriteXml%2A> i <xref:System.Data.DataSet.WriteXmlSchema%2A> metod, odpowiednio. Aby zapisać dane XML, lub schemat i dane z `DataSet`, użyj `WriteXml` metody. Aby zapisać sam schemat, należy użyć `WriteXmlSchema` metody.  
  
> [!NOTE]
>  <xref:System.InvalidOperationException> Zostanie zgłoszony, jeśli typ kolumny w `DataRow` trwa od zapisu lub odczytu implementuje <xref:System.Dynamic.IDynamicMetaObjectProvider> implementuje <xref:System.Xml.Serialization.IXmlSerializable>.  
  
 Jeśli określono schemat w tekście, schemat w tekście jest używany rozszerzyć istniejącą strukturę relacyjnej przed załadowaniem danych. Jeśli występują konflikty (na przykład tej samej kolumny w tej samej tabeli, które są zdefiniowane przy użyciu różnych typów danych), zgłaszany jest wyjątek.  
  
 Jeśli jest określony żaden schemat w tekście, relacyjnej struktury został rozszerzony za pomocą wnioskowania, odpowiednio do potrzeb zgodnie z strukturę dokumentu XML. Jeśli schemat nie można rozszerzyć za pośrednictwem wnioskowania, aby udostępnić wszystkie dane, zgłaszany jest wyjątek.  
  
> [!NOTE]
>  `DataSet` Nie kojarzy — element XML z odpowiadającymi mu dostawcami `DataColumn` lub `DataTable` po prawne znaków XML, takich jak ("_") będą miały zmienione znaczenie w serializacji XML. `DataSet` Tylko specjalne niedozwolone znaki XML w nazwach elementów XML i dlatego mogą korzystać tylko takie same. Gdy prawidłowe znaki w nazwie elementu XML są poprzedzone znakiem zmiany znaczenia, element jest ignorowany podczas przetwarzania.  
  
 Jeśli schemat XML <xref:System.Data.DataSet> obejmuje `targetNamespace`, nie można odczytać danych i mogą wystąpić wyjątki podczas wywoływania <xref:System.Data.DataSet.ReadXml%2A> załadować <xref:System.Data.DataSet> za pomocą XML, który zawiera elementy z nie kwalifikującym się przestrzenią nazw. Aby odczytać elementy niekwalifikowane, należy ustawić `elementFormDefault` równa "kwalifikowany" w schemacie XML tak jak pokazano w poniższym przykładzie.  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  Jeśli schemat usługi <xref:System.Data.DataSet> zawiera elementy o takiej samej nazwie, ale inny typ w tej samej przestrzeni nazw, zgłaszany jest wyjątek podczas próby odczytu schematu do <xref:System.Data.DataSet> z <xref:System.Data.DataSet.ReadXml%2A> , określając `XmlReadMode.ReadSchema`. Ten wyjątek nie występuje, jeśli używasz platformy .NET Framework w wersji 1.0.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><see cref="T:System.Security.Permissions.FileIOPermission" /> Nie ustawiono <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">do odczytywania i zapisywania plików. Wyliczenie skojarzone: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></permission>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.Xml.XmlReader reader, System.Data.XmlReadMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.Xml.XmlReader reader, valuetype System.Data.XmlReadMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (reader As XmlReader, mode As XmlReadMode) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::Xml::XmlReader ^ reader, System::Data::XmlReadMode mode);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.Xml.XmlReader * System.Data.XmlReadMode -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml (reader, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="mode" Type="System.Data.XmlReadMode" />
      </Parameters>
      <Docs>
        <param name="reader"><see cref="T:System.Xml.XmlReader" /> z którego można odczytać.</param>
        <param name="mode">Jedną z <see cref="T:System.Data.XmlReadMode" /> wartości.</param>
        <summary>Odczytuje schemat XML i dane <see cref="T:System.Data.DataSet" /> przy użyciu określonego <see cref="T:System.Xml.XmlReader" /> i <see cref="T:System.Data.XmlReadMode" />.</summary>
        <returns><see langword="XmlReadMode" /> Używane do odczytywania danych.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet.ReadXml%2A> Metoda zapewnia sposób odczytać tylko dane lub zarówno danych i schemat w <xref:System.Data.DataSet> z dokumentu XML, natomiast <xref:System.Data.DataSet.ReadXmlSchema%2A> metoda odczytuje tylko schemat. Do odczytywania danych i schemat, użyj jednej z `ReadXML` przeciążenia, które obejmuje `mode` parametru i ustawić jej wartość na `ReadSchema`.  
  
 Należy pamiętać, że dotyczy to także <xref:System.Data.DataSet.WriteXml%2A> i <xref:System.Data.DataSet.WriteXmlSchema%2A> metod, odpowiednio. Aby zapisać dane XML, lub schemat i dane z `DataSet`, użyj `WriteXml` metody. Aby zapisać sam schemat, należy użyć `WriteXmlSchema` metody.  
  
> [!NOTE]
>  <xref:System.InvalidOperationException> Zostanie zgłoszony, jeśli typ kolumny w `DataRow` trwa od zapisu lub odczytu implementuje <xref:System.Dynamic.IDynamicMetaObjectProvider> implementuje <xref:System.Xml.Serialization.IXmlSerializable>.  
  
 Jeśli określono schemat w tekście, schemat w tekście jest używany rozszerzyć istniejącą strukturę relacyjnej przed załadowaniem danych. Jeśli występują konflikty (na przykład tej samej kolumny w tej samej tabeli, które są zdefiniowane przy użyciu różnych typów danych), zgłaszany jest wyjątek.  
  
 Jeśli jest określony żaden schemat w tekście, relacyjnej struktury został rozszerzony za pomocą wnioskowania, odpowiednio do potrzeb zgodnie z strukturę dokumentu XML. Jeśli schemat nie można rozszerzyć za pośrednictwem wnioskowania, aby udostępnić wszystkie dane, zgłaszany jest wyjątek.  
  
> [!NOTE]
>  `DataSet` Nie kojarzy — element XML z odpowiadającymi mu dostawcami `DataColumn` lub `DataTable` po prawne znaków XML, takich jak ("_") będą miały zmienione znaczenie w serializacji XML. `DataSet` Tylko specjalne niedozwolone znaki XML w nazwach elementów XML i dlatego mogą korzystać tylko takie same. Gdy prawidłowe znaki w nazwie elementu XML są poprzedzone znakiem zmiany znaczenia, element jest ignorowany podczas przetwarzania.  
  
 Jeśli schemat XML <xref:System.Data.DataSet> obejmuje `targetNamespace`, nie można odczytać danych i mogą wystąpić wyjątki podczas wywoływania <xref:System.Data.DataSet.ReadXml%2A> załadować <xref:System.Data.DataSet> za pomocą XML, który zawiera elementy z nie kwalifikującym się przestrzenią nazw. Aby odczytać elementy niekwalifikowane, należy ustawić `elementFormDefault` równa "kwalifikowany" w schemacie XML tak jak pokazano w poniższym przykładzie.  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  Jeśli schemat usługi <xref:System.Data.DataSet> zawiera elementy o takiej samej nazwie, ale inny typ w tej samej przestrzeni nazw, zgłaszany jest wyjątek podczas próby odczytu schematu do <xref:System.Data.DataSet> z <xref:System.Data.DataSet.ReadXml%2A> , określając `XmlReadMode.ReadSchema`. Ten wyjątek nie występuje, jeśli używasz platformy .NET Framework w wersji 1.0.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadXmlSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Odczytuje schemat XML do <see cref="T:System.Data.DataSet" />.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXmlSchema(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadXmlSchema(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.ReadXmlSchema : System.IO.Stream -&gt; unit" Usage="dataSet.ReadXmlSchema stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><see cref="T:System.IO.Stream" /> z którego można odczytać.</param>
        <summary>Odczytuje schemat XML z określonego <see cref="T:System.IO.Stream" /> do <see cref="T:System.Data.DataSet" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Data.DataSet.ReadXmlSchema%2A> metodę, aby utworzyć schemat dla <xref:System.Data.DataSet>. Schemat zawiera definicje tabeli, relacji i ograniczenia. Aby zapisać schemat do dokumentu XML, należy użyć <xref:System.Data.DataSet.WriteXmlSchema%2A> metody.  
  
 Schemat XML są zapisywane przy użyciu standardu XSD.  
  
> [!NOTE]
>  Jeśli msdata:DataType i typy xs:type nie są zgodne, może spowodować uszkodzenie danych. Zostanie zgłoszony żaden wyjątek.  
  
 <xref:System.Data.DataSet.ReadXmlSchema%2A> Zazwyczaj wywoływana jest metoda przed wywołaniem <xref:System.Data.DataSet.ReadXml%2A> metodę, która jest używany do wypełniania <xref:System.Data.DataSet>.  
  
 Klasy, które wynikają z <xref:System.IO.Stream> zawierają klasy <xref:System.IO.BufferedStream>, <xref:System.IO.FileStream>, <xref:System.IO.MemoryStream>, i <xref:System.Net.Sockets.NetworkStream>.  
  
> [!NOTE]
>  Jeśli schemat usługi <xref:System.Data.DataSet> zawiera elementy o takiej samej nazwie, ale inny typ w tej samej przestrzeni nazw, jest zgłaszany wyjątek, gdy użytkownik podejmie próbę odczytu schematu do <xref:System.Data.DataSet> z <xref:System.Data.DataSet.ReadXmlSchema%2A>. Ten wyjątek nie występuje, jeśli używasz platformy .NET Framework w wersji 1.0.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.IO.FileStream> obiektu można odczytać schematu XML z, a następnie wywołuje <xref:System.Data.DataSet.ReadXmlSchema%2A> metody za pomocą obiektu.  
  
 [!code-csharp[Classic WebData DataSet.ReadXmlSchema1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXmlSchema1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (System.IO.TextReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(class System.IO.TextReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXmlSchema(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadXmlSchema (reader As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadXmlSchema(System::IO::TextReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.ReadXmlSchema : System.IO.TextReader -&gt; unit" Usage="dataSet.ReadXmlSchema reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="reader"><see cref="T:System.IO.TextReader" /> z którego można odczytać.</param>
        <summary>Odczytuje schemat XML z określonego <see cref="T:System.IO.TextReader" /> do <see cref="T:System.Data.DataSet" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Data.DataSet.ReadXmlSchema%2A> metodę, aby utworzyć schemat dla <xref:System.Data.DataSet>. Schemat zawiera definicje tabeli, relacji i ograniczenia. Aby zapisać schemat do dokumentu XML, należy użyć <xref:System.Data.DataSet.WriteXmlSchema%2A> metody.  
  
 Schemat XML są zapisywane przy użyciu standardu XSD.  
  
> [!NOTE]
>  Jeśli msdata:DataType i typy xs:type nie są zgodne, może spowodować uszkodzenie danych. Zostanie zgłoszony żaden wyjątek.  
  
 <xref:System.Data.DataSet.ReadXmlSchema%2A> Zazwyczaj wywoływana jest metoda przed wywołaniem <xref:System.Data.DataSet.ReadXml%2A> metodę, która jest używany do wypełniania <xref:System.Data.DataSet>.  
  
 Klasy, które dziedziczą z <xref:System.IO.TextReader> zawierają klasy <xref:System.IO.StreamReader> i <xref:System.IO.StringReader> klasy.  
  
> [!NOTE]
>  Jeśli schemat usługi <xref:System.Data.DataSet> zawiera elementy o takiej samej nazwie, ale inny typ w tej samej przestrzeni nazw, jest zgłaszany wyjątek, gdy użytkownik podejmie próbę odczytu schematu do <xref:System.Data.DataSet> z <xref:System.Data.DataSet.ReadXmlSchema%2A>. Ten wyjątek nie występuje, jeśli używasz platformy .NET Framework w wersji 1.0.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.IO.StreamReader> obiektu można odczytać schematu z, a następnie wywołuje <xref:System.Data.DataSet.ReadXmlSchema%2A> metody za pomocą obiektu.  
  
 [!code-csharp[Classic WebData DataSet.ReadXmlSchema2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXmlSchema2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXmlSchema(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadXmlSchema (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadXmlSchema(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.ReadXmlSchema : string -&gt; unit" Usage="dataSet.ReadXmlSchema fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">Pliku nazwa (łącznie ze ścieżką), z którego można odczytać.</param>
        <summary>Odczytuje schemat XML z określonego pliku do <see cref="T:System.Data.DataSet" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Data.DataSet.ReadXmlSchema%2A> metodę, aby utworzyć schemat dla <xref:System.Data.DataSet>. Schemat zawiera definicje tabeli, relacji i ograniczenia. Aby zapisać schemat do dokumentu XML, należy użyć <xref:System.Data.DataSet.WriteXmlSchema%2A> metody.  
  
 Schemat XML są zapisywane przy użyciu standardu XSD.  
  
> [!NOTE]
>  Jeśli msdata:DataType i typy xs:type nie są zgodne, może spowodować uszkodzenie danych. Zostanie zgłoszony żaden wyjątek.  
  
 <xref:System.Data.DataSet.ReadXmlSchema%2A> Zazwyczaj wywoływana jest metoda przed wywołaniem <xref:System.Data.DataSet.ReadXml%2A> metodę, która jest używany do wypełniania <xref:System.Data.DataSet>.  
  
> [!NOTE]
>  Jeśli schemat usługi <xref:System.Data.DataSet> zawiera elementy o takiej samej nazwie, ale inny typ w tej samej przestrzeni nazw, zgłaszany jest wyjątek podczas próby odczytu schematu do <xref:System.Data.DataSet> z <xref:System.Data.DataSet.ReadXmlSchema%2A>. Ten wyjątek nie występuje, jeśli używasz platformy .NET Framework w wersji 1.0.  
  
   
  
## Examples  
 [!code-csharp[Classic WebData DataSet.ReadXmlSchema3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXmlSchema3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><see cref="T:System.Security.Permissions.FileIOPermission" /> Nie ustawiono <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">do odczytywania i zapisywania plików. Wyliczenie skojarzone: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></permission>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadXmlSchema (reader As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadXmlSchema(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.ReadXmlSchema : System.Xml.XmlReader -&gt; unit" Usage="dataSet.ReadXmlSchema reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader"><see cref="T:System.Xml.XmlReader" /> z którego można odczytać.</param>
        <summary>Odczytuje schemat XML z określonego <see cref="T:System.Xml.XmlReader" /> do <see cref="T:System.Data.DataSet" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Data.DataSet.ReadXmlSchema%2A> metodę, aby utworzyć schemat dla <xref:System.Data.DataSet>. Schemat zawiera definicje tabeli, relacji i ograniczenia.  
  
 Schemat XML są zapisywane przy użyciu standardu XSD.  
  
> [!NOTE]
>  Jeśli msdata:DataType i typy xs:type nie są zgodne, może spowodować uszkodzenie danych. Zostanie zgłoszony żaden wyjątek.  
  
 <xref:System.Data.DataSet.ReadXmlSchema%2A> Zazwyczaj wywoływana jest metoda przed wywołaniem <xref:System.Data.DataSet.ReadXml%2A> metodę, która jest używany do wypełniania <xref:System.Data.DataSet>.  
  
 <xref:System.Xml.XmlReader?displayProperty=nameWithType> Klasa jest klasą abstrakcyjną. Klasa, która dziedziczy `XmlReader` jest <xref:System.Xml.XmlTextReader?displayProperty=nameWithType> klasy.  
  
> [!NOTE]
>  Jeśli schemat usługi <xref:System.Data.DataSet> zawiera elementy o takiej samej nazwie, ale inny typ w tej samej przestrzeni nazw, jest zgłaszany wyjątek, gdy użytkownik podejmie próbę odczytu schematu do <xref:System.Data.DataSet> z <xref:System.Data.DataSet.ReadXmlSchema%2A>. Ten wyjątek nie występuje, jeśli używasz platformy .NET Framework w wersji 1.0.  
  
   
  
## Examples  
 Poniższy przykład tworzy nowy <xref:System.Data.DataSet> i <xref:System.IO.FileStream?displayProperty=nameWithType> obiektu. <xref:System.IO.FileStream> Obiekt utworzony za pomocą ścieżki do pliku i nazwa pliku jest używany do tworzenia <xref:System.Xml.XmlTextReader?displayProperty=nameWithType> który jest przekazywany jako argument do <xref:System.Data.DataSet.ReadXmlSchema%2A> metody.  
  
 [!code-csharp[Classic WebData DataSet.ReadXmlSchema Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXmlSchema Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSerializable">
      <MemberSignature Language="C#" Value="protected virtual void ReadXmlSerializable (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ReadXmlSerializable(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXmlSerializable(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ReadXmlSerializable (reader As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ReadXmlSerializable(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="abstract member ReadXmlSerializable : System.Xml.XmlReader -&gt; unit&#xA;override this.ReadXmlSerializable : System.Xml.XmlReader -&gt; unit" Usage="dataSet.ReadXmlSerializable reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">Podany czytnik XML.</param>
        <summary>Ignoruje atrybutów, a następnie zwraca pusty zestaw danych.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RejectChanges">
      <MemberSignature Language="C#" Value="public virtual void RejectChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RejectChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.RejectChanges" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RejectChanges ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RejectChanges();" />
      <MemberSignature Language="F#" Value="abstract member RejectChanges : unit -&gt; unit&#xA;override this.RejectChanges : unit -&gt; unit" Usage="dataSet.RejectChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wycofuje wszystkie zmiany wprowadzone do <see cref="T:System.Data.DataSet" /> ponieważ został utworzony lub od czasu ostatniego <see cref="M:System.Data.DataSet.AcceptChanges" /> została wywołana.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywoływanie <xref:System.Data.DataSet.RejectChanges%2A?displayProperty=nameWithType> do wywołania <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=nameWithType> metody na wszystkich <xref:System.Data.DataTable> obiekty zawarte <xref:System.Data.DataSet>.  
  
 <xref:System.Data.DataRow> obiekty zawarte <xref:System.Data.DataSet> każdego można ustawić w trybie edycji za pomocą wywołania <xref:System.Data.DataRow.BeginEdit%2A?displayProperty=nameWithType> metody. Po wywołaniu <xref:System.Data.DataRow.EndEdit%2A?displayProperty=nameWithType> metody, zmiany mogą zostać odrzucone przez wywołanie metody <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=nameWithType> na <xref:System.Data.DataTable> do której <xref:System.Data.DataRow> obiekty należeć.  
  
 Gdy <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=nameWithType> metoda jest wywoływana, wszystkie wiersze w trybie edycji Anuluj ich edycji. Nowe wiersze są usuwane. Zmodyfikowane i usunięte wiersze wrócić do pierwotnego stanu (`DataRowState.Unchanged`).  
  
 Metody AcceptChanges i RejectChanges dotyczą tylko <xref:System.Data.DataRow> powiązanych zmian (czyli `Add`, `Remove`, `Delete`, i `Modify`). Nie mają zastosowania do schematu lub zmian strukturalnych.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano klasę pochodną <xref:System.Data.DataSet> klasy. <xref:System.Data.DataSet.RejectChanges%2A> Zdarzenie jest wywoływane w obrębie funkcji.  
  
 [!code-csharp[Classic WebData DataSet.RejectChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.RejectChanges Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.RejectChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.RejectChanges Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Relations">
      <MemberSignature Language="C#" Value="public System.Data.DataRelationCollection Relations { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataRelationCollection Relations" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Relations" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Relations As DataRelationCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataRelationCollection ^ Relations { System::Data::DataRelationCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Relations : System.Data.DataRelationCollection" Usage="System.Data.DataSet.Relations" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetRelationsDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataRelationCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję relacje, które tabele i umożliwić nawigacji z elementu nadrzędnego tabel do tabel podrzędnych.</summary>
        <value>A <see cref="T:System.Data.DataRelationCollection" /> zawiera zbiór <see cref="T:System.Data.DataRelation" /> obiektów. Pusta kolekcja jest zwracany, jeśli nie <see cref="T:System.Data.DataRelation" /> istnieją obiekty.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład drukuje nazwa kolumny wszystkie tabele podrzędne za pośrednictwem <xref:System.Data.DataSet.Relations%2A> właściwości.  
  
 [!code-vb[Classic WebData DataSet.Relations Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Relations Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="RemotingFormat">
      <MemberSignature Language="C#" Value="public System.Data.SerializationFormat RemotingFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.SerializationFormat RemotingFormat" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.RemotingFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property RemotingFormat As SerializationFormat" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SerializationFormat RemotingFormat { System::Data::SerializationFormat get(); void set(System::Data::SerializationFormat value); };" />
      <MemberSignature Language="F#" Value="member this.RemotingFormat : System.Data.SerializationFormat with get, set" Usage="System.Data.DataSet.RemotingFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SerializationFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Data.SerializationFormat" /> dla <see cref="T:System.Data.DataSet" /> używane podczas komunikacji zdalnej.</summary>
        <value>Element <see cref="T:System.Data.SerializationFormat" /> obiektu.</value>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public virtual void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="dataSet.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Czyści wszystkie tabele i usuwa wszystkie relacje, ograniczeń obcego i tabel z <see cref="T:System.Data.DataSet" />. Podklasy powinny przesłaniać <see cref="M:System.Data.DataSet.Reset" /> do przywrócenia <see cref="T:System.Data.DataSet" /> do stanu pierwotnego.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="SchemaSerializationMode">
      <MemberSignature Language="C#" Value="public virtual System.Data.SchemaSerializationMode SchemaSerializationMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.SchemaSerializationMode SchemaSerializationMode" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.SchemaSerializationMode" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property SchemaSerializationMode As SchemaSerializationMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::SchemaSerializationMode SchemaSerializationMode { System::Data::SchemaSerializationMode get(); void set(System::Data::SchemaSerializationMode value); };" />
      <MemberSignature Language="F#" Value="member this.SchemaSerializationMode : System.Data.SchemaSerializationMode with get, set" Usage="System.Data.DataSet.SchemaSerializationMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SchemaSerializationMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Data.SchemaSerializationMode" /> dla <see cref="T:System.Data.DataSet" />.</summary>
        <value>A <see cref="T:System.Data.SchemaSerializationMode" /> dla <see cref="T:System.Data.DataSet" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Data.DataSet> serializuje dane schematu i wystąpienie domyślnie w usługach sieci Web i scenariusze komunikacji zdalnej. Ustawienie <xref:System.Data.DataSet.SchemaSerializationMode%2A> właściwości typizowanej `DataSet` do <xref:System.Data.SchemaSerializationMode.ExcludeSchema> powoduje, że informacje o schemacie, które mają być wykluczone z ładunku serializacji.  
  
 <xref:System.Data.SchemaSerializationMode.ExcludeSchema> jest obsługiwana tylko w przypadku wpisane `DataSet`. Dla niezaznaczone wpisane `DataSet` tę właściwość można ustawić tylko <xref:System.Data.SchemaSerializationMode.IncludeSchema>.  
  
 <xref:System.Data.SchemaSerializationMode.ExcludeSchema> należy używać tylko w przypadkach, gdy wpisany informacji o schemacie elementu bazowego `DataTables`, `DataRelations` i `Constraints` nie został zmodyfikowany. Jeśli masz modyfikacje informacji o schemacie wystąpił, pełną powinien zostać Zserializowany za pomocą <xref:System.Data.SchemaSerializationMode.IncludeSchema>.  
  
 <xref:System.Data.SchemaSerializationMode.ExcludeSchema> jest obsługiwana w wersji 2.0 programu .NET Framework lub nowszej.  
  
 Gdy <xref:System.Data.SchemaSerializationMode.ExcludeSchema> jest ustawiona tylko najwyższego poziomu czasu wykonywania właściwości na <xref:System.Data.DataSet> są serializowane. Ponadto są one serializowane tylko wtedy, gdy wystąpią różnił się od wartości domyślne. Żaden z `Tables`, `Relations` lub `Constraints` są serializowane. Właściwości czasu wykonywania serializacji to <xref:System.Data.DataSet.DataSetName%2A>, <xref:System.Data.DataSet.Namespace%2A>, <xref:System.Data.DataSet.Prefix%2A>, <xref:System.Data.DataSet.Locale%2A>, <xref:System.Data.DataSet.EnforceConstraints%2A>, i <xref:System.Data.DataSet.CaseSensitive%2A>. Te właściwości są serializowane, aby upewnić się, że jest zachowywany runtime ogólną integralność danych.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeRelations">
      <MemberSignature Language="C#" Value="protected virtual bool ShouldSerializeRelations ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShouldSerializeRelations() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ShouldSerializeRelations" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ShouldSerializeRelations () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ShouldSerializeRelations();" />
      <MemberSignature Language="F#" Value="abstract member ShouldSerializeRelations : unit -&gt; bool&#xA;override this.ShouldSerializeRelations : unit -&gt; bool" Usage="dataSet.ShouldSerializeRelations " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera wartość wskazującą czy <see cref="P:System.Data.DataSet.Relations" /> właściwości powinny zostać utrwalone.</summary>
        <returns><see langword="true" /> Jeśli wartość właściwości została zmieniona z domyślnego; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zazwyczaj ta metoda albo w przypadku tworzenia projektanta na potrzeby <xref:System.Data.DataSet>, lub tworząc własne kontrolki dołączanie <xref:System.Data.DataSet>.  
  
   
  
## Examples  
 W poniższych przykładach pokazano klasę pochodną <xref:System.Data.DataSet> klasy. <xref:System.Data.DataSet.Reset%2A> i <xref:System.Data.DataSet.ShouldSerializeRelations%2A> metody są wywoływane w obrębie funkcji w klasie pochodnej.  
  
 [!code-csharp[Classic WebData DataSet.ShouldSerializeRelations Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ShouldSerializeRelations Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ShouldSerializeRelations Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ShouldSerializeRelations Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeTables">
      <MemberSignature Language="C#" Value="protected virtual bool ShouldSerializeTables ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShouldSerializeTables() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ShouldSerializeTables" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ShouldSerializeTables () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ShouldSerializeTables();" />
      <MemberSignature Language="F#" Value="abstract member ShouldSerializeTables : unit -&gt; bool&#xA;override this.ShouldSerializeTables : unit -&gt; bool" Usage="dataSet.ShouldSerializeTables " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera wartość wskazującą czy <see cref="P:System.Data.DataSet.Tables" /> właściwości powinny zostać utrwalone.</summary>
        <returns><see langword="true" /> Jeśli wartość właściwości została zmieniona z domyślnego; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zazwyczaj ta metoda tylko wtedy, gdy tworzysz albo projektanta na potrzeby <xref:System.Data.DataSet>, lub tworząc własne kontrolki dołączanie <xref:System.Data.DataSet>.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano klasę pochodną <xref:System.Data.DataSet> klasy. <xref:System.Data.DataSet.ShouldSerializeTables%2A> Metoda jest wywoływana z w obrębie funkcji w klasie pochodnej.  
  
 [!code-csharp[Classic WebData DataSet.ShouldSerializeTables Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ShouldSerializeTables Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ShouldSerializeTables Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ShouldSerializeTables Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Site" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Site As ISite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::ISite ^ Site { System::ComponentModel::ISite ^ get(); void set(System::ComponentModel::ISite ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Site : System.ComponentModel.ISite with get, set" Usage="System.Data.DataSet.Site" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.ComponentModel.ISite" /> dla <see cref="T:System.Data.DataSet" />.</summary>
        <value><see cref="T:System.ComponentModel.ISite" /> Dla <see cref="T:System.Data.DataSet" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Powiązania witryny <xref:System.ComponentModel.Component> do <xref:System.ComponentModel.Container> i umożliwić komunikację między nimi, a także umożliwiają kontener, aby zarządzać jego składniki.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ContainsListCollection As Boolean Implements IListSource.ContainsListCollection" />
      <MemberSignature Language="C++ CLI" Value="property bool System::ComponentModel::IListSource::ContainsListCollection { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ComponentModel.IListSource.ContainsListCollection</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Aby uzyskać opis tego elementu członkowskiego, zobacz <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />.</summary>
        <value>Aby uzyskać opis tego elementu członkowskiego, zobacz <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Mogą być używane tylko wtedy, gdy <xref:System.Data.DataSet> wystąpienia jest rzutowany na <xref:System.ComponentModel.IListSource> interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.GetList">
      <MemberSignature Language="C#" Value="System.Collections.IList IListSource.GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IList System.ComponentModel.IListSource.GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.System#ComponentModel#IListSource#GetList" />
      <MemberSignature Language="VB.NET" Value="Function GetList () As IList Implements IListSource.GetList" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IList ^ System.ComponentModel.IListSource.GetList() = System::ComponentModel::IListSource::GetList;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.IListSource.GetList</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Aby uzyskać opis tego elementu członkowskiego, zobacz <see cref="M:System.ComponentModel.IListSource.GetList" />.</summary>
        <returns>Aby uzyskać opis tego elementu członkowskiego, zobacz <see cref="M:System.ComponentModel.IListSource.GetList" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Mogą być używane tylko wtedy, gdy <xref:System.Data.DataSet> wystąpienia jest rzutowany na <xref:System.ComponentModel.IListSource> interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo" /> Do wypełniania danymi.</param>
        <param name="context">Miejsce docelowe (zobacz <see cref="T:System.Runtime.Serialization.StreamingContext" />) tej serializacji.</param>
        <summary>Wypełnia obiekt informacji o serializacji dane potrzebne do serializacji <see cref="T:System.Data.DataSet" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.GetSchema">
      <MemberSignature Language="C#" Value="System.Xml.Schema.XmlSchema IXmlSerializable.GetSchema ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Xml.Schema.XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema" />
      <MemberSignature Language="VB.NET" Value="Function GetSchema () As XmlSchema Implements IXmlSerializable.GetSchema" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Xml::Schema::XmlSchema ^ System.Xml.Serialization.IXmlSerializable.GetSchema() = System::Xml::Serialization::IXmlSerializable::GetSchema;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.GetSchema</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Aby uzyskać opis tego elementu członkowskiego, zobacz <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />.</summary>
        <returns>Aby uzyskać opis tego elementu członkowskiego, zobacz <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Mogą być używane tylko wtedy, gdy <xref:System.Data.DataSet> wystąpienia jest rzutowany na <xref:System.Xml.Serialization.IXmlSerializable> interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.ReadXml">
      <MemberSignature Language="C#" Value="void IXmlSerializable.ReadXml (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Xml.Serialization.IXmlSerializable.ReadXml(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Sub ReadXml (reader As XmlReader) Implements IXmlSerializable.ReadXml" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Xml.Serialization.IXmlSerializable.ReadXml(System::Xml::XmlReader ^ reader) = System::Xml::Serialization::IXmlSerializable::ReadXml;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">A <see cref="T:System.Xml.XmlReader" />.</param>
        <summary>Aby uzyskać opis tego elementu członkowskiego, zobacz <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Mogą być używane tylko wtedy, gdy <xref:System.Data.DataSet> wystąpienia jest rzutowany na <xref:System.Xml.Serialization.IXmlSerializable> interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.WriteXml">
      <MemberSignature Language="C#" Value="void IXmlSerializable.WriteXml (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Xml.Serialization.IXmlSerializable.WriteXml(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Sub WriteXml (writer As XmlWriter) Implements IXmlSerializable.WriteXml" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Xml.Serialization.IXmlSerializable.WriteXml(System::Xml::XmlWriter ^ writer) = System::Xml::Serialization::IXmlSerializable::WriteXml;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer">A <see cref="T:System.Xml.XmlWriter" />.</param>
        <summary>Aby uzyskać opis tego elementu członkowskiego, zobacz <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Mogą być używane tylko wtedy, gdy <xref:System.Data.DataSet> wystąpienia jest rzutowany na <xref:System.Xml.Serialization.IXmlSerializable> interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tables">
      <MemberSignature Language="C#" Value="public System.Data.DataTableCollection Tables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataTableCollection Tables" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Tables" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Tables As DataTableCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataTableCollection ^ Tables { System::Data::DataTableCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Tables : System.Data.DataTableCollection" Usage="System.Data.DataSet.Tables" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DataSetTablesDescr")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataTableCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję w tabelach zawartych w <see cref="T:System.Data.DataSet" />.</summary>
        <value><see cref="T:System.Data.DataTableCollection" /> Zawarty w tym <see cref="T:System.Data.DataSet" />. Pusta kolekcja jest zwracany, jeśli nie <see cref="T:System.Data.DataTable" /> istnieją obiekty.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby dodać tabele do kolekcji, użyj <xref:System.Data.DataTableCollection.Add%2A> metody <xref:System.Data.DataTableCollection>. Aby usunąć tabel, użyj <xref:System.Data.DataTableCollection.Remove%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład zwraca <xref:System.Data.DataSet> obiektu <xref:System.Data.DataTableCollection>i drukuje kolumn i wierszy w każdej tabeli.  
  
 [!code-csharp[Classic WebData DataSet.Tables Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Tables Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Tables Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Tables Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteXml">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje dane XML i opcjonalnie schemat z <see cref="T:System.Data.DataSet" />.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.IO.Stream -&gt; unit" Usage="dataSet.WriteXml stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">A <see cref="T:System.IO.Stream" /> obiekt używany do zapisywania do pliku.</param>
        <summary>Zapisuje bieżące dane dla <see cref="T:System.Data.DataSet" /> przy użyciu określonego <see cref="T:System.IO.Stream" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteXml` Metoda zapewnia byłby następujący zapis tylko dane lub zarówno dane i schemat z <xref:System.Data.DataSet> do dokumentu XML, natomiast <xref:System.Data.DataSet.WriteXmlSchema%2A> metoda zapisuje tylko schemat. Do zapisania danych i schemat, użyj jednego z przeciążeń, które obejmuje `mode` parametru i ustawić jej wartość na `WriteSchema`.  
  
 Należy pamiętać, że dotyczy to także <xref:System.Data.DataSet.ReadXml%2A> i <xref:System.Data.DataSet.ReadXmlSchema%2A> metod, odpowiednio. Do odczytywania danych XML lub schemat i dane `DataSet`, użyj `ReadXml` metody. Aby dowiedzieć się sam schemat, należy użyć `ReadXmlSchema` metody.  
  
> [!NOTE]
>  <xref:System.InvalidOperationException> Zostanie zgłoszony, jeśli typ kolumny w `DataRow` trwa od zapisu lub odczytu implementuje <xref:System.Dynamic.IDynamicMetaObjectProvider> implementuje <xref:System.Xml.Serialization.IXmlSerializable>.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.IO.FileStream?displayProperty=nameWithType> obiektu. Obiekt jest następnie używana <xref:System.Data.DataSet.WriteXml%2A> metodę, aby zapisać dokumentu XML.  
  
 [!code-csharp[Classic WebData DataSet.WriteXml Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXml Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.IO.TextWriter -&gt; unit" Usage="dataSet.WriteXml writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><see cref="T:System.IO.TextWriter" /> Obiektu, z którym mają zostać zapisane.</param>
        <summary>Zapisuje bieżące dane dla <see cref="T:System.Data.DataSet" /> przy użyciu określonego <see cref="T:System.IO.TextWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteXml` Metoda zapewnia byłby następujący zapis tylko dane lub zarówno dane i schemat z <xref:System.Data.DataSet> do dokumentu XML, natomiast <xref:System.Data.DataSet.WriteXmlSchema%2A> metoda zapisuje tylko schemat. Do zapisania danych i schemat, użyj jednego z przeciążeń, które obejmuje `mode` parametru i ustawić jej wartość na `WriteSchema`.  
  
 Należy pamiętać, że dotyczy to także <xref:System.Data.DataSet.ReadXml%2A> i <xref:System.Data.DataSet.ReadXmlSchema%2A> metod, odpowiednio. Do odczytywania danych XML lub schemat i dane `DataSet`, użyj `ReadXml` metody. Aby dowiedzieć się sam schemat, należy użyć `ReadXmlSchema` metody.  
  
> [!NOTE]
>  <xref:System.InvalidOperationException> Zostanie zgłoszony, jeśli typ kolumny w `DataRow` trwa od zapisu lub odczytu implementuje <xref:System.Dynamic.IDynamicMetaObjectProvider> implementuje <xref:System.Xml.Serialization.IXmlSerializable>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : string -&gt; unit" Usage="dataSet.WriteXml fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">Pliku nazwa (łącznie ze ścieżką), na którym mają zostać zapisane.</param>
        <summary>Zapisuje bieżące dane dla <see cref="T:System.Data.DataSet" /> do określonego pliku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteXml` Metoda zapewnia byłby następujący zapis tylko dane lub zarówno dane i schemat z <xref:System.Data.DataSet> do dokumentu XML, natomiast <xref:System.Data.DataSet.WriteXmlSchema%2A> metoda zapisuje tylko schemat. Do zapisania danych i schemat, użyj jednego z przeciążeń, które obejmuje `mode` parametru i ustawić jej wartość na `WriteSchema`.  
  
 Należy pamiętać, że dotyczy to także <xref:System.Data.DataSet.ReadXml%2A> i <xref:System.Data.DataSet.ReadXmlSchema%2A> metod, odpowiednio. Do odczytywania danych XML lub schemat i dane `DataSet`, użyj `ReadXml` metody. Aby dowiedzieć się sam schemat, należy użyć `ReadXmlSchema` metody.  
  
> [!NOTE]
>  <xref:System.InvalidOperationException> Zostanie zgłoszony, jeśli typ kolumny w `DataRow` trwa od zapisu lub odczytu implementuje <xref:System.Dynamic.IDynamicMetaObjectProvider> implementuje <xref:System.Xml.Serialization.IXmlSerializable>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><see cref="T:System.Security.Permissions.FileIOPermission" /> Nie ustawiono <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">do odczytywania i zapisywania plików. Wyliczenie skojarzone: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></permission>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::Xml::XmlWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.Xml.XmlWriter -&gt; unit" Usage="dataSet.WriteXml writer" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><see cref="T:System.Xml.XmlWriter" /> Za pomocą którego można zapisywać.</param>
        <summary>Zapisuje bieżące dane dla <see cref="T:System.Data.DataSet" /> określonej <see cref="T:System.Xml.XmlWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteXml` Metoda zapewnia byłby następujący zapis tylko dane lub zarówno dane i schemat z <xref:System.Data.DataSet> do dokumentu XML, natomiast <xref:System.Data.DataSet.WriteXmlSchema%2A> metoda zapisuje tylko schemat. Do zapisania danych i schemat, użyj jednego z przeciążeń, które obejmuje `mode` parametru i ustawić jej wartość na `WriteSchema`.  
  
 Należy pamiętać, że dotyczy to także <xref:System.Data.DataSet.ReadXml%2A> i <xref:System.Data.DataSet.ReadXmlSchema%2A> metod, odpowiednio. Do odczytywania danych XML lub schemat i dane `DataSet`, użyj `ReadXml` metody. Aby dowiedzieć się sam schemat, należy użyć `ReadXmlSchema` metody.  
  
> [!NOTE]
>  <xref:System.InvalidOperationException> Zostanie zgłoszony, jeśli typ kolumny w `DataRow` trwa od zapisu lub odczytu implementuje <xref:System.Dynamic.IDynamicMetaObjectProvider> implementuje <xref:System.Xml.Serialization.IXmlSerializable>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.Stream stream, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.Stream stream, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::Stream ^ stream, System::Data::XmlWriteMode mode);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.IO.Stream * System.Data.XmlWriteMode -&gt; unit" Usage="dataSet.WriteXml (stream, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="stream">A <see cref="T:System.IO.Stream" /> obiekt używany do zapisywania do pliku.</param>
        <param name="mode">Jedną z <see cref="T:System.Data.XmlWriteMode" /> wartości.</param>
        <summary>Zapisuje bieżące dane i opcjonalnie schemat dla <see cref="T:System.Data.DataSet" /> przy użyciu określonego <see cref="T:System.IO.Stream" /> i <see cref="T:System.Data.XmlWriteMode" />. Aby zapisać schemat, należy ustawić wartość <paramref name="mode" /> parametr <see langword="WriteSchema" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteXml` Metoda zapewnia byłby następujący zapis tylko dane lub zarówno dane i schemat z <xref:System.Data.DataSet> do dokumentu XML, natomiast <xref:System.Data.DataSet.WriteXmlSchema%2A> metoda zapisuje tylko schemat. Do zapisania danych i schemat, należy ustawić `mode` parametr `WriteSchema`.  
  
 Należy pamiętać, że dotyczy to także <xref:System.Data.DataSet.ReadXml%2A> i <xref:System.Data.DataSet.ReadXmlSchema%2A> metod, odpowiednio. Do odczytywania danych XML lub schemat i dane `DataSet`, użyj `ReadXml` metody. Aby dowiedzieć się sam schemat, należy użyć `ReadXmlSchema` metody.  
  
> [!NOTE]
>  <xref:System.InvalidOperationException> Zostanie zgłoszony, jeśli typ kolumny w `DataRow` trwa od zapisu lub odczytu implementuje <xref:System.Dynamic.IDynamicMetaObjectProvider> implementuje <xref:System.Xml.Serialization.IXmlSerializable>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.TextWriter writer, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.TextWriter writer, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As TextWriter, mode As XmlWriteMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::TextWriter ^ writer, System::Data::XmlWriteMode mode);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.IO.TextWriter * System.Data.XmlWriteMode -&gt; unit" Usage="dataSet.WriteXml (writer, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="writer">A <see cref="T:System.IO.TextWriter" /> obiekt używany do zapisywania dokumentu.</param>
        <param name="mode">Jedną z <see cref="T:System.Data.XmlWriteMode" /> wartości.</param>
        <summary>Zapisuje bieżące dane i opcjonalnie schemat dla <see cref="T:System.Data.DataSet" /> przy użyciu określonego <see cref="T:System.IO.TextWriter" /> i <see cref="T:System.Data.XmlWriteMode" />. Aby zapisać schemat, należy ustawić wartość <paramref name="mode" /> parametr <see langword="WriteSchema" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteXml` Metoda zapewnia byłby następujący zapis tylko dane lub zarówno dane i schemat z <xref:System.Data.DataSet> do dokumentu XML, natomiast <xref:System.Data.DataSet.WriteXmlSchema%2A> metoda zapisuje tylko schemat. Do zapisania danych i schemat, należy ustawić `mode` parametr `WriteSchema`.  
  
 Należy pamiętać, że dotyczy to także <xref:System.Data.DataSet.ReadXml%2A> i <xref:System.Data.DataSet.ReadXmlSchema%2A> metod, odpowiednio. Do odczytywania danych XML lub schemat i dane `DataSet`, użyj `ReadXml` metody. Aby dowiedzieć się sam schemat, należy użyć `ReadXmlSchema` metody.  
  
> [!NOTE]
>  <xref:System.InvalidOperationException> Zostanie zgłoszony, jeśli typ kolumny w `DataRow` trwa od zapisu lub odczytu implementuje <xref:System.Dynamic.IDynamicMetaObjectProvider> implementuje <xref:System.Xml.Serialization.IXmlSerializable>.  
  
   
  
## Examples  
 Poniższy przykład najpierw tworzy prostą <xref:System.Data.DataSet> przy użyciu jednego <xref:System.Data.DataTable>, dwóch kolumn i dziesięć wierszy. <xref:System.Data.DataSet> Schemat i dane są zapisywane na dysku, wywołując <xref:System.Data.DataSet.WriteXml%2A> metody. Sekundy <xref:System.Data.DataSet> jest tworzony i <xref:System.Data.DataSet.ReadXml%2A> metoda jest używana do go wypełnić przy użyciu schematu i danych.  
  
 [!code-csharp[Classic WebData DataSet.ReadXml2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXml2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (string fileName, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(string fileName, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.String,System.Data.XmlWriteMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (fileName As String, mode As XmlWriteMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::String ^ fileName, System::Data::XmlWriteMode mode);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : string * System.Data.XmlWriteMode -&gt; unit" Usage="dataSet.WriteXml (fileName, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="fileName">Pliku nazwa (łącznie ze ścieżką), na którym mają zostać zapisane.</param>
        <param name="mode">Jedną z <see cref="T:System.Data.XmlWriteMode" /> wartości.</param>
        <summary>Zapisuje bieżące dane i opcjonalnie schemat dla <see cref="T:System.Data.DataSet" /> do określonego pliku przy użyciu określonego <see cref="T:System.Data.XmlWriteMode" />. Aby zapisać schemat, należy ustawić wartość <paramref name="mode" /> parametr <see langword="WriteSchema" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteXml` Metoda zapewnia byłby następujący zapis tylko dane lub zarówno dane i schemat z <xref:System.Data.DataSet> do dokumentu XML, natomiast <xref:System.Data.DataSet.WriteXmlSchema%2A> metoda zapisuje tylko schemat. Do zapisania danych i schemat, należy ustawić `mode` parametr `WriteSchema`.  
  
 Należy pamiętać, że dotyczy to także <xref:System.Data.DataSet.ReadXml%2A> i <xref:System.Data.DataSet.ReadXmlSchema%2A> metod, odpowiednio. Do odczytywania danych XML lub schemat i dane `DataSet`, użyj `ReadXml` metody. Aby dowiedzieć się sam schemat, należy użyć `ReadXmlSchema` metody.  
  
> [!NOTE]
>  <xref:System.InvalidOperationException> Zostanie zgłoszony, jeśli typ kolumny w `DataRow` trwa od zapisu lub odczytu implementuje <xref:System.Dynamic.IDynamicMetaObjectProvider> implementuje <xref:System.Xml.Serialization.IXmlSerializable>.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Data.DataSet.WriteXml%2A> metodę, aby zapisać dokumentu XML.  
  
 [!code-csharp[Classic WebData DataSet.WriteXml7 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml7 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXml7 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml7 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><see cref="T:System.Security.Permissions.FileIOPermission" /> Nie ustawiono <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">do odczytywania i zapisywania plików. Wyliczenie skojarzone: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></permission>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.Xml.XmlWriter writer, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.Xml.XmlWriter writer, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As XmlWriter, mode As XmlWriteMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::Xml::XmlWriter ^ writer, System::Data::XmlWriteMode mode);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.Xml.XmlWriter * System.Data.XmlWriteMode -&gt; unit" Usage="dataSet.WriteXml (writer, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="writer"><see cref="T:System.Xml.XmlWriter" /> Za pomocą którego można zapisywać.</param>
        <param name="mode">Jedną z <see cref="T:System.Data.XmlWriteMode" /> wartości.</param>
        <summary>Zapisuje bieżące dane i opcjonalnie schemat dla <see cref="T:System.Data.DataSet" /> przy użyciu określonego <see cref="T:System.Xml.XmlWriter" /> i <see cref="T:System.Data.XmlWriteMode" />. Aby zapisać schemat, należy ustawić wartość <paramref name="mode" /> parametr <see langword="WriteSchema" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteXml` Metoda zapewnia byłby następujący zapis tylko dane lub zarówno dane i schemat z <xref:System.Data.DataSet> do dokumentu XML, natomiast <xref:System.Data.DataSet.WriteXmlSchema%2A> metoda zapisuje tylko schemat. Do zapisania danych i schemat, należy ustawić `mode` parametr `WriteSchema`.  
  
 Należy pamiętać, że dotyczy to także <xref:System.Data.DataSet.ReadXml%2A> i <xref:System.Data.DataSet.ReadXmlSchema%2A> metod, odpowiednio. Do odczytywania danych XML lub schemat i dane `DataSet`, użyj `ReadXml` metody. Aby dowiedzieć się sam schemat, należy użyć `ReadXmlSchema` metody.  
  
> [!NOTE]
>  <xref:System.InvalidOperationException> Zostanie zgłoszony, jeśli typ kolumny w `DataRow` trwa od zapisu lub odczytu implementuje <xref:System.Dynamic.IDynamicMetaObjectProvider> implementuje <xref:System.Xml.Serialization.IXmlSerializable>.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.IO.FileStream?displayProperty=nameWithType> obiekt, który jest używany do tworzenia nowego <xref:System.Xml.XmlTextWriter>. <xref:System.Xml.XmlTextWriter> Obiekt jest używany z <xref:System.Data.DataSet.WriteXml%2A> metodę, aby zapisać dokumentu XML.  
  
 [!code-csharp[Classic WebData DataSet.WriteXml6 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml6 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXml6 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml6 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteXmlSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje <see cref="T:System.Data.DataSet" /> struktury jako schematu XML.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.IO.Stream -&gt; unit" Usage="dataSet.WriteXmlSchema stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">A <see cref="T:System.IO.Stream" /> obiekt używany do zapisywania do pliku.</param>
        <summary>Zapisuje <see cref="T:System.Data.DataSet" /> struktury jako schematu XML do określonego <see cref="T:System.IO.Stream" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Data.DataSet.WriteXmlSchema%2A> metodę, aby zapisać schematu dla <xref:System.Data.DataSet> do dokumentu XML. Schemat zawiera definicje tabeli, relacji i ograniczenia. Aby zapisać schemat do dokumentu XML, należy użyć <xref:System.Data.DataSet.WriteXmlSchema%2A> metody.  
  
 Schemat XML są zapisywane przy użyciu standardu XSD.  
  
 Aby zapisać dane w dokumencie XML, należy użyć <xref:System.Data.DataSet.WriteXml%2A> metody.  
  
 Klasy, które wynikają z <xref:System.IO.Stream> zawierają klasy <xref:System.IO.BufferedStream>, <xref:System.IO.FileStream>, <xref:System.IO.MemoryStream>, i <xref:System.Net.Sockets.NetworkStream>.  
  
   
  
## Examples  
 Poniższy przykład tworzy nowy <xref:System.IO.FileStream> obiekt, który jest przekazywany do <xref:System.Data.DataSet.WriteXmlSchema%2A> metodę, aby zapisać schematu na dysku.  
  
 [!code-csharp[Classic WebData DataSet.WriteXmlSchema Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXmlSchema Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.IO.TextWriter -&gt; unit" Usage="dataSet.WriteXmlSchema writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><see cref="T:System.IO.TextWriter" /> Obiektu, z którym mają zostać zapisane.</param>
        <summary>Zapisuje <see cref="T:System.Data.DataSet" /> struktury jako schematu XML do określonego <see cref="T:System.IO.TextWriter" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Data.DataSet.WriteXmlSchema%2A> metodę, aby zapisać schematu dla <xref:System.Data.DataSet> do dokumentu XML. Schemat zawiera definicje tabeli, relacji i ograniczenia. Aby zapisać schemat do dokumentu XML, należy użyć <xref:System.Data.DataSet.WriteXmlSchema%2A> metody.  
  
 Schemat XML są zapisywane przy użyciu standardu XSD.  
  
 Aby zapisać dane w dokumencie XML, należy użyć <xref:System.Data.DataSet.WriteXml%2A> metody.  
  
 Klas pochodnych z <xref:System.IO.TextWriter?displayProperty=nameWithType> zawierają klasy <xref:System.Web.HttpWriter?displayProperty=nameWithType>, <xref:System.CodeDom.Compiler.IndentedTextWriter?displayProperty=nameWithType>, <xref:System.Web.UI.HtmlTextWriter?displayProperty=nameWithType>, <xref:System.IO.StreamWriter?displayProperty=nameWithType>, i <xref:System.IO.StringWriter?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Text.StringBuilder?displayProperty=nameWithType> obiekt ten jest używany do tworzenia nowego <xref:System.IO.StringWriter?displayProperty=nameWithType>. <xref:System.IO.StringWriter> Jest przekazywany do <xref:System.Data.DataSet.WriteXmlSchema%2A> metody, a wynikowy ciąg zostanie wydrukowany w oknie konsoli.  
  
 [!code-csharp[Classic WebData DataSet.WriteXmlSchema1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXmlSchema1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : string -&gt; unit" Usage="dataSet.WriteXmlSchema fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">Pliku nazwa (łącznie ze ścieżką), na którym mają zostać zapisane.</param>
        <summary>Zapisuje <see cref="T:System.Data.DataSet" /> struktury jako schematu XML do pliku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Data.DataSet.WriteXmlSchema%2A> metodę, aby zapisać schematu dla <xref:System.Data.DataSet> do dokumentu XML. Schemat zawiera definicje tabeli, relacji i ograniczenia. Aby zapisać schemat do dokumentu XML, należy użyć <xref:System.Data.DataSet.WriteXmlSchema%2A> metody.  
  
 Schemat XML są zapisywane przy użyciu standardu XSD.  
  
 Aby zapisać dane w dokumencie XML, należy użyć <xref:System.Data.DataSet.WriteXml%2A> metody.  
  
   
  
## Examples  
 [!code-csharp[Classic WebData DataSet.WriteXmlSchema3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXmlSchema3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><see cref="T:System.Security.Permissions.FileIOPermission" /> Nie ustawiono <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">do odczytywania i zapisywania plików. Wyliczenie skojarzone: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></permission>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::Xml::XmlWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.Xml.XmlWriter -&gt; unit" Usage="dataSet.WriteXmlSchema writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><see cref="T:System.Xml.XmlWriter" /> Do zapisu.</param>
        <summary>Zapisuje <see cref="T:System.Data.DataSet" /> struktury jako schematu XML do <see cref="T:System.Xml.XmlWriter" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Data.DataSet.WriteXmlSchema%2A> metodę, aby zapisać schematu dla <xref:System.Data.DataSet> do dokumentu XML. Schemat zawiera definicje tabeli, relacji i ograniczenia. Aby zapisać schemat do dokumentu XML, należy użyć <xref:System.Data.DataSet.WriteXmlSchema%2A> metody.  
  
 Schemat XML są zapisywane przy użyciu standardu XSD.  
  
 Aby zapisać dane w dokumencie XML, należy użyć <xref:System.Data.DataSet.WriteXml%2A> metody.  
  
 Jedna klasa, która dziedziczy po elemencie <xref:System.Xml.XmlWriter?displayProperty=nameWithType> klasa jest <xref:System.Xml.XmlTextWriter> klasy.  
  
   
  
## Examples  
 Poniższy przykład tworzy nowy <xref:System.IO.FileStream?displayProperty=nameWithType> obiektu z określonej ścieżki. <xref:System.IO.FileStream> Obiekt jest używany do tworzenia <xref:System.Xml.XmlTextWriter> obiektu. <xref:System.Data.DataSet.WriteXmlSchema%2A> Następnie wywoływana jest metoda, za pomocą <xref:System.Xml.XmlTextWriter> obiektu do zapisania schematu na dysku.  
  
 [!code-csharp[Classic WebData DataSet.WriteXmlSchema2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXmlSchema2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/dataset-datatable-dataview/index.md">Przy użyciu zestawów danych w ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.Stream stream, Converter&lt;Type,string&gt; multipleTargetConverter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.Stream stream, class System.Converter`2&lt;class System.Type, string&gt; multipleTargetConverter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::IO::Stream ^ stream, Converter&lt;Type ^, System::String ^&gt; ^ multipleTargetConverter);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.IO.Stream * Converter&lt;Type, string&gt; -&gt; unit" Usage="dataSet.WriteXmlSchema (stream, multipleTargetConverter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="multipleTargetConverter" Type="System.Converter&lt;System.Type,System.String&gt;" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="stream">Element <see cref="T:System.IO.Stream" /> obiektu do zapisu.</param>
        <param name="multipleTargetConverter">Obiekt delegowany, używane do konwersji <see cref="T:System.Type" /> na ciąg.</param>
        <summary>Zapisuje <see cref="T:System.Data.DataSet" /> struktury jako schematu XML do określonego <see cref="T:System.IO.Stream" /> obiektu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.TextWriter writer, Converter&lt;Type,string&gt; multipleTargetConverter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.TextWriter writer, class System.Converter`2&lt;class System.Type, string&gt; multipleTargetConverter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (writer As TextWriter, multipleTargetConverter As Converter(Of Type, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::IO::TextWriter ^ writer, Converter&lt;Type ^, System::String ^&gt; ^ multipleTargetConverter);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.IO.TextWriter * Converter&lt;Type, string&gt; -&gt; unit" Usage="dataSet.WriteXmlSchema (writer, multipleTargetConverter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="multipleTargetConverter" Type="System.Converter&lt;System.Type,System.String&gt;" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="writer">Element <see cref="T:System.IO.TextWriter" /> obiektu do zapisu.</param>
        <param name="multipleTargetConverter">Obiekt delegowany, używane do konwersji <see cref="T:System.Type" /> na ciąg.</param>
        <summary>Zapisuje <see cref="T:System.Data.DataSet" /> struktury jako schematu XML do określonego <see cref="T:System.IO.TextWriter" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (string fileName, Converter&lt;Type,string&gt; multipleTargetConverter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(string fileName, class System.Converter`2&lt;class System.Type, string&gt; multipleTargetConverter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.String,System.Converter{System.Type,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (fileName As String, multipleTargetConverter As Converter(Of Type, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::String ^ fileName, Converter&lt;Type ^, System::String ^&gt; ^ multipleTargetConverter);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : string * Converter&lt;Type, string&gt; -&gt; unit" Usage="dataSet.WriteXmlSchema (fileName, multipleTargetConverter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="multipleTargetConverter" Type="System.Converter&lt;System.Type,System.String&gt;" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="fileName">Nazwa pliku do zapisu.</param>
        <param name="multipleTargetConverter">Obiekt delegowany, używane do konwersji <see cref="T:System.Type" /> na ciąg.</param>
        <summary>Zapisuje <see cref="T:System.Data.DataSet" /> struktury jako schematu XML do pliku.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.Xml.XmlWriter writer, Converter&lt;Type,string&gt; multipleTargetConverter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.Xml.XmlWriter writer, class System.Converter`2&lt;class System.Type, string&gt; multipleTargetConverter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (writer As XmlWriter, multipleTargetConverter As Converter(Of Type, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::Xml::XmlWriter ^ writer, Converter&lt;Type ^, System::String ^&gt; ^ multipleTargetConverter);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.Xml.XmlWriter * Converter&lt;Type, string&gt; -&gt; unit" Usage="dataSet.WriteXmlSchema (writer, multipleTargetConverter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="multipleTargetConverter" Type="System.Converter&lt;System.Type,System.String&gt;" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="writer">Element <see cref="T:System.Xml.XmlWriter" /> obiektu do zapisu.</param>
        <param name="multipleTargetConverter">Obiekt delegowany, używane do konwersji <see cref="T:System.Type" /> na ciąg.</param>
        <summary>Zapisuje <see cref="T:System.Data.DataSet" /> struktury jako schematu XML do określonego <see cref="T:System.Xml.XmlWriter" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>