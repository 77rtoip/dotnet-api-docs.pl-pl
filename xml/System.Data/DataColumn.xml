<Type Name="DataColumn" FullName="System.Data.DataColumn">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c319d3c600dc2e2da64f51a76ba9219295794b79" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30449589" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DataColumn : System.ComponentModel.MarshalByValueComponent" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataColumn extends System.ComponentModel.MarshalByValueComponent" />
  <TypeSignature Language="DocId" Value="T:System.Data.DataColumn" />
  <TypeSignature Language="VB.NET" Value="Public Class DataColumn&#xA;Inherits MarshalByValueComponent" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataColumn : System::ComponentModel::MarshalByValueComponent" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.MarshalByValueComponent</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("ColumnName")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DesignTimeVisible(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DataColumnEditor, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje schemat kolumny <see cref="T:System.Data.DataTable" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataColumn> Jest podstawowym blokiem tworzenia schematu <xref:System.Data.DataTable>. Tworzenie schematu, dodając co najmniej jeden <xref:System.Data.DataColumn> obiekty do <xref:System.Data.DataColumnCollection>. Aby uzyskać więcej informacji, zobacz [Dodawanie kolumn do DataTable](~/docs/framework/data/adonet/dataset-datatable-dataview/adding-columns-to-a-datatable.md).  
  
 Każdy <xref:System.Data.DataColumn> ma <xref:System.Data.DataColumn.DataType%2A> właściwość, która określa rodzaj danych <xref:System.Data.DataColumn> zawiera. Na przykład można ograniczyć typ danych liczb całkowitych, ciągi lub miejsc dziesiętnych. Ponieważ danych, który jest zawarty w <xref:System.Data.DataTable> zwykle scalonego wrócić do oryginalnego źródła danych muszą być zgodne typy danych do tych w źródle danych. Aby uzyskać więcej informacji, zobacz [mapowanie typu danych w ADO.NET](~/docs/framework/data/adonet/data-type-mappings-in-ado-net.md).  
  
 Właściwości, takie jak <xref:System.Data.DataColumn.AllowDBNull%2A>, <xref:System.Data.DataColumn.Unique%2A>, i <xref:System.Data.DataColumn.ReadOnly%2A> put ograniczenia dotyczące wejścia i aktualizowanie danych, co pomaga zagwarantować spójność danych. Można również użyć <xref:System.Data.DataColumn.AutoIncrement%2A>, <xref:System.Data.DataColumn.AutoIncrementSeed%2A>, i <xref:System.Data.DataColumn.AutoIncrementStep%2A> właściwości, aby kontrolować generowania danych. Aby uzyskać więcej informacji na temat <xref:System.Data.DataColumn.AutoIncrement%2A> kolumn, zobacz [Tworzenie kolumny typu AutoIncrement](~/docs/framework/data/adonet/dataset-datatable-dataview/creating-autoincrement-columns.md). Aby uzyskać więcej informacji, zobacz [Definiowanie kluczy podstawowych](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
 Można również upewnić się, że wartości w <xref:System.Data.DataColumn> są unikatowe, tworząc <xref:System.Data.UniqueConstraint> i dodać go do <xref:System.Data.ConstraintCollection> z <xref:System.Data.DataTable> do którego <xref:System.Data.DataColumn> należy. Aby uzyskać więcej informacji, zobacz [ograniczenia DataTable](~/docs/framework/data/adonet/dataset-datatable-dataview/datatable-constraints.md).  
  
 Można utworzyć relacji między <xref:System.Data.DataColumn> Tworzenie obiektów, <xref:System.Data.DataRelation> obiektu i dodać go do <xref:System.Data.DataRelationCollection> z <xref:System.Data.DataSet>.  
  
 Można użyć <xref:System.Data.DataColumn.Expression%2A> właściwość <xref:System.Data.DataColumn> obiekt do obliczenia wartości w kolumnie lub Utwórz kolumnę agregacji. Aby uzyskać więcej informacji, zobacz [Tworzenie kolumn wyrażeń](~/docs/framework/data/adonet/dataset-datatable-dataview/creating-expression-columns.md).  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Data.DataTable> z kilku <xref:System.Data.DataColumn> obiektów.  
  
 [!code-csharp[Classic WebData DataColumn Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Tego typu są bezpieczne dla operacji wielowątkowych odczytu. Wszystkie operacje zapisu należy przeprowadzić synchronizację.</threadsafe>
    <altmember cref="M:System.Data.DataColumnCollection.Add(System.Data.DataColumn)" />
    <altmember cref="T:System.Data.DataColumnCollection" />
    <altmember cref="P:System.Data.DataTable.Constraints" />
    <altmember cref="T:System.Data.ConstraintCollection" />
    <altmember cref="T:System.Windows.Forms.DataGrid" />
    <altmember cref="T:System.Data.DataRow" />
    <altmember cref="T:System.Data.DataTable" />
    <altmember cref="T:System.Data.DataSet" />
    <altmember cref="M:System.Data.DataTable.NewRow" />
    <altmember cref="T:System.Data.DataRowCollection" />
    <altmember cref="T:System.Data.UniqueConstraint" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.DataColumn" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataColumn ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataColumn();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.DataColumn" /> klasy jako typu string.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po utworzeniu <xref:System.Data.DataColumn> obiekt nie ma wartości domyślnej <xref:System.Data.DataColumn.ColumnName%2A> lub <xref:System.Data.DataColumn.Caption%2A>. Po dodaniu go do <xref:System.Data.DataColumnCollection>, nazwę domyślną ("Kolumna1", "Kolumna2" itd.) zostanie wygenerowany, jeśli nie ustawiono nazwy <xref:System.Data.DataColumn.ColumnName%2A>.  
  
   
  
## Examples  
 Poniższy przykład tworzy nowy <xref:System.Data.DataColumn>, ustawia różne właściwości i dodaje go do <xref:System.Data.DataColumnCollection> dla <xref:System.Data.DataTable> obiektu.  
  
 [!code-csharp[Classic WebData DataColumn.DataColumn Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataColumn Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
        <altmember cref="P:System.Data.DataColumn.Caption" />
        <altmember cref="P:System.Data.DataColumn.DefaultValue" />
        <altmember cref="T:System.Data.DataTable" />
        <altmember cref="P:System.Data.DataColumn.DataType" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataColumn (string columnName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string columnName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (columnName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataColumn(System::String ^ columnName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="columnName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="columnName">Ciąg, który reprezentuje nazwę kolumny, która ma zostać utworzony. Jeśli ustawiono <see langword="null" /> lub ciąg pusty (""), podczas dodawania do kolekcji kolumn zostanie określona nazwa domyślna.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.DataColumn" /> klasy jako typu string, przy użyciu nazwy określonej kolumny.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie staje się nazwa specyficzne dla kolumny <xref:System.Data.DataColumn.Caption%2A> wartości właściwości.  
  
   
  
## Examples  
 Poniższy przykład tworzy nowy <xref:System.Data.DataColumn> z określonym <xref:System.Data.DataColumn.ColumnName%2A>.  
  
 [!code-csharp[Classic WebData DataColumn.DataColumn1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataColumn1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
        <altmember cref="P:System.Data.DataColumn.Caption" />
        <altmember cref="P:System.Data.DataColumn.DefaultValue" />
        <altmember cref="T:System.Data.DataTable" />
        <altmember cref="P:System.Data.DataColumn.DataType" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataColumn (string columnName, Type dataType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string columnName, class System.Type dataType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.#ctor(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (columnName As String, dataType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataColumn(System::String ^ columnName, Type ^ dataType);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="columnName" Type="System.String" />
        <Parameter Name="dataType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="columnName">Ciąg, który reprezentuje nazwę kolumny, która ma zostać utworzony. Jeśli ustawiono <see langword="null" /> lub ciąg pusty (""), podczas dodawania do kolekcji kolumn zostanie określona nazwa domyślna.</param>
        <param name="dataType">Obsługiwanej <see cref="P:System.Data.DataColumn.DataType" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.DataColumn" /> przy użyciu określonej kolumny typu danych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład tworzy nowy <xref:System.Data.DataColumn> z określonym <xref:System.Data.DataColumn.ColumnName%2A> i <xref:System.Data.DataColumn.DataType%2A>.  
  
 [!code-csharp[Classic WebData DataColumn.DataColumn2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataColumn2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nie <paramref name="dataType" /> została określona.</exception>
        <altmember cref="P:System.Data.DataColumn.DefaultValue" />
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
        <altmember cref="P:System.Data.DataColumn.Caption" />
        <altmember cref="T:System.Data.DataTable" />
        <altmember cref="P:System.Data.DataColumn.DataType" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataColumn (string columnName, Type dataType, string expr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string columnName, class System.Type dataType, string expr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.#ctor(System.String,System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (columnName As String, dataType As Type, expr As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataColumn(System::String ^ columnName, Type ^ dataType, System::String ^ expr);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="columnName" Type="System.String" />
        <Parameter Name="dataType" Type="System.Type" />
        <Parameter Name="expr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="columnName">Ciąg, który reprezentuje nazwę kolumny, która ma zostać utworzony. Jeśli ustawiono <see langword="null" /> lub ciąg pusty (""), podczas dodawania do kolekcji kolumn zostanie określona nazwa domyślna.</param>
        <param name="dataType">Obsługiwanej <see cref="P:System.Data.DataColumn.DataType" />.</param>
        <param name="expr">Wyrażenie użyte do utworzenia tej kolumny. Aby uzyskać więcej informacji, zobacz <see cref="P:System.Data.DataColumn.Expression" /> właściwości.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.DataColumn" /> przy użyciu określonej nazwy, typu danych i wyrażenie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższym przykładzie tworzona jest kolumną obliczaną.  
  
 [!code-csharp[Classic WebData DataColumn.DataColumn3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataColumn3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nie <paramref name="dataType" /> została określona.</exception>
        <altmember cref="P:System.Data.DataColumn.DefaultValue" />
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
        <altmember cref="P:System.Data.DataColumn.Caption" />
        <altmember cref="T:System.Data.DataTable" />
        <altmember cref="P:System.Data.DataColumn.DataType" />
        <altmember cref="P:System.Data.DataColumn.Expression" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataColumn (string columnName, Type dataType, string expr, System.Data.MappingType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string columnName, class System.Type dataType, string expr, valuetype System.Data.MappingType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.#ctor(System.String,System.Type,System.String,System.Data.MappingType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataColumn(System::String ^ columnName, Type ^ dataType, System::String ^ expr, System::Data::MappingType type);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="columnName" Type="System.String" />
        <Parameter Name="dataType" Type="System.Type" />
        <Parameter Name="expr" Type="System.String" />
        <Parameter Name="type" Type="System.Data.MappingType" />
      </Parameters>
      <Docs>
        <param name="columnName">Ciąg, który reprezentuje nazwę kolumny, która ma zostać utworzony. Jeśli ustawiono <see langword="null" /> lub ciąg pusty (""), podczas dodawania do kolekcji kolumn zostanie określona nazwa domyślna.</param>
        <param name="dataType">Obsługiwanej <see cref="P:System.Data.DataColumn.DataType" />.</param>
        <param name="expr">Wyrażenie użyte do utworzenia tej kolumny. Aby uzyskać więcej informacji, zobacz <see cref="P:System.Data.DataColumn.Expression" /> właściwości.</param>
        <param name="type">Jeden z <see cref="T:System.Data.MappingType" /> wartości.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.DataColumn" /> przy użyciu określonej nazwy typu danych, wyrażenia i wartość, która określa, czy kolumna jest atrybutem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `type` Zestawy argument <xref:System.Data.DataColumn.ColumnMapping%2A> właściwości. Właściwość określa, jak <xref:System.Data.DataColumn> jest mapowany po <xref:System.Data.DataSet> jest przekształcana na dokument XML. Na przykład, jeśli kolumna ma nazwę "fName", a wartość zawiera "Bob", a `type` ma ustawioną wartość `MappingType.Attribute`, XML element będzie następujące:  
  
 \<Name fName = "Bob" / >  
  
 Aby uzyskać więcej informacji o sposobie mapowania kolumn elementów lub atrybutów, zobacz <xref:System.Data.DataColumn.ColumnMapping%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład tworzy kolumny obliczanej.  
  
 [!code-csharp[Classic WebData DataColumn.DataColumn4 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn4 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataColumn4 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn4 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nie <paramref name="dataType" /> została określona.</exception>
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
        <altmember cref="P:System.Data.DataColumn.ColumnMapping" />
        <altmember cref="P:System.Data.DataColumn.Caption" />
        <altmember cref="P:System.Data.DataColumn.DefaultValue" />
        <altmember cref="T:System.Data.DataTable" />
        <altmember cref="P:System.Data.DataColumn.DataType" />
      </Docs>
    </Member>
    <Member MemberName="AllowDBNull">
      <MemberSignature Language="C#" Value="public bool AllowDBNull { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDBNull" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.AllowDBNull" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowDBNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowDBNull { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy wartości null są dozwolone w tej kolumnie dla wierszy, które należą do tej tabeli.</summary>
        <value>
          <see langword="true" /> Jeśli wartości wartości null są dozwolone; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład tworzy nowy <xref:System.Data.DataColumn> i ustawia jej <xref:System.Data.DataColumn.AllowDBNull%2A> właściwości `true`.  
  
 [!code-csharp[Classic WebData DataColumn.AllowDBNull Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.AllowDBNull Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.AllowDBNull Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.AllowDBNull Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.Unique" />
      </Docs>
    </Member>
    <Member MemberName="AutoIncrement">
      <MemberSignature Language="C#" Value="public bool AutoIncrement { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoIncrement" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.AutoIncrement" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoIncrement As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoIncrement { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy wartości w kolumnie zwiększają wartość kolumny dla nowych wierszy dodawanych do tabeli.</summary>
        <value>
          <see langword="true" /> Jeśli wartość kolumny zwiększa się automatycznie. w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli typ tej kolumny nie jest Int16, Int32 lub Int64 gdy ta właściwość jest ustawiona, <xref:System.Data.DataColumn.DataType%2A> właściwości jest traktowany jak Int32. Wyjątek jest generowany, jeśli jest to kolumna obliczana. <xref:System.Data.DataColumn.Expression%2A> Właściwość jest ustawiona. Wartość zwiększany jest używany tylko wtedy, gdy wartość wiersza dla tej kolumny, w przypadku dodania do kolekcji kolumn jest równa wartości domyślnej.  
  
 Można utworzyć nowego przy użyciu wiersza <xref:System.Data.DataRow.ItemArray%2A> właściwość <xref:System.Data.DataRow> klasy i przekazywanie w tablicy wartości. Jest to potencjalny problem dla kolumny z jego <xref:System.Data.DataColumn.AutoIncrement%2A> ustawioną `true`, ponieważ jej wartość jest generowana automatycznie. Aby użyć <xref:System.Data.DataRow.ItemArray%2A> właściwości, miejsce `null` w pozycji w kolumnie w tablicy. Aby uzyskać więcej informacji, zobacz <xref:System.Data.DataRow.ItemArray%2A> właściwość <xref:System.Data.DataRow> klasy.  
  
 Jeśli typem kolumny jest <xref:System.Data.SqlTypes.SqlInt16> lub <xref:System.Data.SqlTypes.SqlInt32>, <xref:System.Data.DataColumn.AutoIncrement%2A> nie będzie działać. Zamiast tego użyj Int16 lub Int32.  
  
 Jeśli typem kolumny jest <xref:System.Data.SqlTypes.SqlInt64> lub <xref:System.Data.SqlTypes.SqlDecimal>, <xref:System.Data.DataColumn.AutoIncrement%2A> będzie działać tylko częściowo. Zamiast tego użyj Int64 lub Decimal.  
  
 Gdy <xref:System.Data.DataColumn.AutoIncrementStep%2A> wartość jest dodawana do bieżącej wartości jest pomijane sprawdzanie przepełnienia.  
  
   
  
## Examples  
 W poniższym przykładzie <xref:System.Data.DataColumn.AutoIncrement%2A>, <xref:System.Data.DataColumn.AutoIncrementSeed%2A>, i <xref:System.Data.DataColumn.AutoIncrementStep%2A> właściwości.  
  
 [!code-csharp[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Kolumna jest kolumną obliczaną.</exception>
        <altmember cref="P:System.Data.DataColumn.AutoIncrementSeed" />
        <altmember cref="P:System.Data.DataColumn.AutoIncrementStep" />
        <altmember cref="P:System.Data.DataColumn.Expression" />
        <altmember cref="P:System.Data.DataRow.ItemArray" />
        <altmember cref="M:System.Data.DataTable.NewRow" />
      </Docs>
    </Member>
    <Member MemberName="AutoIncrementSeed">
      <MemberSignature Language="C#" Value="public long AutoIncrementSeed { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 AutoIncrementSeed" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.AutoIncrementSeed" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoIncrementSeed As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long AutoIncrementSeed { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość początkową dla kolumny, która ma jego <see cref="P:System.Data.DataColumn.AutoIncrement" /> ustawioną właściwość <see langword="true" />. Wartość domyślna to 0.</summary>
        <value>Wartość początkową dla <see cref="P:System.Data.DataColumn.AutoIncrement" /> funkcji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższym przykładzie <xref:System.Data.DataColumn.AutoIncrement%2A>, <xref:System.Data.DataColumn.AutoIncrementSeed%2A>, i <xref:System.Data.DataColumn.AutoIncrementStep%2A> właściwości.  
  
 [!code-csharp[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.AutoIncrement" />
        <altmember cref="P:System.Data.DataColumn.AutoIncrementStep" />
        <altmember cref="P:System.Data.DataColumn.Expression" />
        <altmember cref="P:System.Data.DataRow.ItemArray" />
      </Docs>
    </Member>
    <Member MemberName="AutoIncrementStep">
      <MemberSignature Language="C#" Value="public long AutoIncrementStep { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 AutoIncrementStep" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.AutoIncrementStep" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoIncrementStep As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long AutoIncrementStep { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia przyrost używany w kolumnie z jego <see cref="P:System.Data.DataColumn.AutoIncrement" /> ustawioną właściwość <see langword="true" />.</summary>
        <value>Liczba, w którym wartość kolumny jest automatycznie zwiększany. Domyślnym ustawieniem jest 1.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższym przykładzie <xref:System.Data.DataColumn.AutoIncrement%2A>, <xref:System.Data.DataColumn.AutoIncrementSeed%2A>, i <xref:System.Data.DataColumn.AutoIncrementStep%2A> właściwości.  
  
 [!code-csharp[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Podana wartość jest równa zero.</exception>
        <altmember cref="P:System.Data.DataColumn.AutoIncrement" />
        <altmember cref="P:System.Data.DataColumn.AutoIncrementSeed" />
        <altmember cref="P:System.Data.DataColumn.Expression" />
        <altmember cref="P:System.Data.DataRow.ItemArray" />
      </Docs>
    </Member>
    <Member MemberName="Caption">
      <MemberSignature Language="C#" Value="public string Caption { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Caption" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Caption" />
      <MemberSignature Language="VB.NET" Value="Public Property Caption As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Caption { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia podpis dla kolumny.</summary>
        <value>Podpis kolumny. Jeśli nie jest ustawiona, zwraca <see cref="P:System.Data.DataColumn.ColumnName" /> wartość.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można użyć <xref:System.Data.DataColumn.Caption%2A> właściwość, aby wyświetlić opis lub przyjazną nazwę dla <xref:System.Data.DataColumn>.  
  
   
  
## Examples  
 Poniższy przykład tworzy nową <xref:System.Data.DataTable>. Dodaje następnie trzy <xref:System.Data.DataColumn> obiekty do <xref:System.Data.DataColumnCollection> i ustawia <xref:System.Data.DataColumn.Caption%2A> właściwości dla każdego <xref:System.Data.DataColumn>.  
  
 [!code-csharp[Classic WebData DataColumn.Caption Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.Caption Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.Caption Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.Caption Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
      </Docs>
    </Member>
    <Member MemberName="CheckNotAllowNull">
      <MemberSignature Language="C#" Value="protected internal void CheckNotAllowNull ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void CheckNotAllowNull() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.CheckNotAllowNull" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub CheckNotAllowNull ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void CheckNotAllowNull();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ten element członkowski obsługuje infrastrukturę programu .NET Framework i nie jest przeznaczony do użycia bezpośrednio w kodzie.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckUnique">
      <MemberSignature Language="C#" Value="protected void CheckUnique ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void CheckUnique() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.CheckUnique" />
      <MemberSignature Language="VB.NET" Value="Protected Sub CheckUnique ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void CheckUnique();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ten element członkowski obsługuje infrastrukturę programu .NET Framework i nie jest przeznaczony do użycia bezpośrednio w kodzie.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnMapping">
      <MemberSignature Language="C#" Value="public virtual System.Data.MappingType ColumnMapping { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MappingType ColumnMapping" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.ColumnMapping" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ColumnMapping As MappingType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::MappingType ColumnMapping { System::Data::MappingType get(); void set(System::Data::MappingType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.MappingType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Data.MappingType" /> kolumny.</summary>
        <value>Jeden z <see cref="T:System.Data.MappingType" /> wartości.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataColumn.ColumnMapping%2A> Właściwość określa, jak <xref:System.Data.DataColumn> jest mapowany po <xref:System.Data.DataSet> jest zapisywany jako dokument XML przy użyciu <xref:System.Data.DataSet.WriteXml%2A> metody.  
  
 Na przykład jeśli <xref:System.Data.DataColumn> nosi nazwę "customerID", a jego <xref:System.Data.DataColumn.ColumnMapping%2A> właściwość jest ustawiona na `MappingType.Element`, wartość kolumny utworzy następujący kod XML:  
  
```  
<Customers>  
 <customerID>ALFKI</customerID>  
......  
 </Customers>  
 <Orders>  
 <OrderID>12345</OrderID>  
 <customerID>ALFKI</customerID>  
......  
 </Orders>  
```  
  
 Jednak jeśli tej samej kolumnie jest mapowane na `MappingType.Attribute`, jest generowany następujący kod XML:  
  
```  
<Customers customerID="ALFKI"........more attributes.....>  
 <Order orderID="1234"....more attributes..../>  
 <Order orderID="1234"....more attributes..../>  
...... More orders for this customer  
 </Customers>  
```  
  
 Użyj <xref:System.Data.DataColumn.%23ctor%2A> Konstruktor, który zawiera `type` argument zdefiniuj jak <xref:System.Data.DataColumn> jest mapowany po jego <xref:System.Data.DataSet> jest przekształcana do dokumentu XML.  
  
 <xref:System.Data.DataColumn.ColumnMapping%2A> Właściwość odpowiada argumentu konstruktora `type`.  
  
   
  
## Examples  
 W poniższym przykładzie <xref:System.Data.DataColumn.ColumnMapping%2A> nowy typ właściwości <xref:System.Data.DataColumn>.  
  
 [!code-csharp[Classic WebData DataColumn.ColumnMapping Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ColumnMapping Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ColumnMapping Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ColumnMapping Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnName">
      <MemberSignature Language="C#" Value="public string ColumnName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ColumnName" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.ColumnName" />
      <MemberSignature Language="VB.NET" Value="Public Property ColumnName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ColumnName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę kolumny w <see cref="T:System.Data.DataColumnCollection" />.</summary>
        <value>Nazwa kolumny.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy <xref:System.Data.DataColumn> jest tworzony, go nie ma <xref:System.Data.DataColumn.ColumnName%2A> wartość. Jednakże, gdy <xref:System.Data.DataColumn> jest dodawany do <xref:System.Data.DataColumnCollection> dla <xref:System.Data.DataTable> obiektu, jest on podawany nazwę domyślną ("Kolumna1", "Kolumna2" itd.).  
  
 Domyślnie <xref:System.Data.DataColumn.Caption%2A> ma wartość <xref:System.Data.DataColumn.ColumnName%2A> wartość.  
  
   
  
## Examples  
 Poniższe przykłady pobiera <xref:System.Data.DataColumn.ColumnName%2A> dla każdej kolumny w każdej tabeli w <xref:System.Data.DataSet>. W przykładzie przedstawiono również sposób tworzenia <xref:System.Data.DataColumn> o nowe <xref:System.Data.DataColumn.ColumnName%2A>.  
  
 [!code-csharp[Classic WebData DataColumn.ColumnName Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ColumnName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ColumnName Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ColumnName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Właściwość jest ustawiona na <see langword="null" /> lub ciąg pusty i kolumnę, należy do kolekcji.</exception>
        <exception cref="T:System.Data.DuplicateNameException">Kolumna o tej samej nazwie już istnieje w kolekcji. Nazwa porównania nie jest uwzględniana wielkość liter.</exception>
        <altmember cref="P:System.Data.DataColumn.Caption" />
      </Docs>
    </Member>
    <Member MemberName="DataType">
      <MemberSignature Language="C#" Value="public Type DataType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DataType" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.DataType" />
      <MemberSignature Language="VB.NET" Value="Public Property DataType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ DataType { Type ^ get(); void set(Type ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Data.ColumnTypeConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia typ danych przechowywanych w kolumnie.</summary>
        <value>A <see cref="T:System.Type" /> obiekt, który reprezentuje typ danych kolumny.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ustawienie <xref:System.Data.DataColumn.DataType%2A> wartość jest bardzo ważne, aby gwarantujących prawidłowe tworzenie i aktualizowanie danych w źródle danych.  
  
 <xref:System.Data.DataColumn.DataType%2A> Właściwość obsługuje następujące typy podstawowe danych .NET Framework:  
  
-   <xref:System.Boolean>  
  
-   <xref:System.Byte>  
  
-   <xref:System.Char>  
  
-   <xref:System.DateTime>  
  
-   <xref:System.Decimal>  
  
-   <xref:System.Double>  
  
-   <xref:System.Guid>  
  
-   <xref:System.Int16>  
  
-   <xref:System.Int32>  
  
-   <xref:System.Int64>  
  
-   <xref:System.SByte>  
  
-   <xref:System.Single>  
  
-   <xref:System.String>  
  
-   <xref:System.TimeSpan>  
  
-   <xref:System.UInt16>  
  
-   <xref:System.UInt32>  
  
-   <xref:System.UInt64>  
  
 a także następującego typu tablicy:  
  
-   `Byte[]`  
  
 Wyjątek jest generowany, gdy zmiana tej właściwości po kolumnie rozpoczął przechowywania danych.  
  
 Jeśli <xref:System.Data.DataColumn.AutoIncrement%2A> ustawiono `true` przed ustawieniem <xref:System.Data.DataColumn.DataType%2A> właściwości oraz spróbuj ustawić typ jakikolwiek inny niż typu integer, zostanie wygenerowany wyjątek.  
  
> [!NOTE]
>  Kolumny danych typu `Byte[]` wymaga szczególnego traktowania w niektórych przypadkach, ponieważ w odróżnieniu od podstawowe typy danych .NET Framework jest typem danych odwołania. Jeśli z kolumną zawierającą dane typu `Byte[]` jest używany jako <xref:System.Data.DataTable.PrimaryKey%2A>, lub jako <xref:System.Data.DataView.Sort%2A> lub <xref:System.Data.DataView.RowFilter%2A> klucza dla <xref:System.Data.DataView>, wszelkie zmiany w wartości kolumny muszą obejmować przypisywanie `Byte[]` wartość kolumny do oddzielniewystąpień`Byte[]` obiektu. To przypisanie jest wymagana do wyzwolenia aktualizacji indeksów wewnętrzny używany przez sortowanie, filtrowanie i operacje klucza podstawowego. Jest to zilustrowane na poniższym przykładzie:  
  
```  
byte[] columnValue = (byte[])myDataTable.Rows[0][0];  
byte[] newValue = (byte[])columnValue.Clone();  
newValue[1] = 2;  
myDataTable.Rows[0][0] = newValue;  
```  
  
> [!NOTE]
>  Mimo że można zdefiniować kolumnę wpisywania danych innych niż podstawowe typy danych .NET Framework i `Byte[]`, takiej kolumny będzie traktowany jako typ zdefiniowany przez użytkownika, mogą ulec następujące ograniczenia użycia. (Aby uzyskać więcej informacji dotyczących typów zdefiniowanych przez użytkownika, zobacz [tworzenie i typy Using User-Defined](http://msdn.microsoft.com/library/ec0266d2-7e5b-47e4-938a-85ac9d04fa40).)  
  
-   Kolumna nie może być częścią <xref:System.Data.DataView.RowFilter%2A> lub <xref:System.Data.DataTable.Select%2A> wyrażenia.  
  
-   Jeśli kolumna jest używana jako <xref:System.Data.DataTable.PrimaryKey%2A>, lub jako <xref:System.Data.DataView.Sort%2A> lub <xref:System.Data.DataView>, muszą być traktowane jak pole niezmienne; nie może zostać zmienione danych kolumny, gdy zostało ono dodane do tabeli.  
  
-   Jego <xref:System.Data.DataColumn.ColumnMapping%2A> można ustawić tylko na `MappingType.Element`.  
  
-   Klasa, która implementuje musi być typu danych kolumny muszą być oznaczone <xref:System.SerializableAttribute>, i w razie potrzeby Implementowanie <xref:System.Runtime.Serialization.ISerializable> lub <xref:System.Xml.Serialization.IXmlSerializable> interfejsu.  
  
-   Obsługa śledzenia zmian jest ograniczona. Korzystanie z <xref:System.Data.DataTable> mechanizmu śledzenia zmian dla klasy, klasy, która implementuje typ danych kolumny albo musi implementować <xref:System.ComponentModel.IChangeTracking> interfejsu lub Przejmij na odpowiedzialność za informowanie <xref:System.Data.DataRow> kiedy wartość kolumny została zmodyfikowane, poprzez wywoływanie <xref:System.Data.DataRow.SetModified%2A> na wiersz lub przypisując obiektu wartości kolumny obiektu wartości kolumny oddzielnie skonkretyzowanym.  
  
   
  
## Examples  
 Poniższy przykład umożliwia dodanie kolumny kilka typów danych do <xref:System.Data.DataTable>, a następnie dodaje jeden wiersz w tabeli.  
  
 [!code-csharp[Classic WebData DataColumn.DataType Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataType Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataType Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Kolumna ma już przechowywanych danych.</exception>
        <altmember cref="T:System.Type" />
        <altmember cref="M:System.Type.GetType" />
      </Docs>
    </Member>
    <Member MemberName="DateTimeMode">
      <MemberSignature Language="C#" Value="public System.Data.DataSetDateTime DateTimeMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.DataSetDateTime DateTimeMode" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.DateTimeMode" />
      <MemberSignature Language="VB.NET" Value="Public Property DateTimeMode As DataSetDateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataSetDateTime DateTimeMode { System::Data::DataSetDateTime get(); void set(System::Data::DataSetDateTime value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataSetDateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see langword="DateTimeMode" /> dla kolumny.</summary>
        <value>
          <see cref="T:System.Data.DataSetDateTime" /> Dla określonej kolumny.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataColumn.DateTimeMode%2A> Nie można zmodyfikować po wiersze są dodawane do <xref:System.Data.DataColumn>, z wyjątkiem modyfikowanie z <xref:System.Data.DataSetDateTime.Unspecified> i <xref:System.Data.DataSetDateTime.UnspecifiedLocal> lub na odwrót. Modyfikacja z `UnspecifiedLocal` do `Unspecified` i na odwrót jest dozwolony jako różnica między te dwie opcje jest tylko podczas serializacji i nie ma wpływu na magazynu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultValue">
      <MemberSignature Language="C#" Value="public object DefaultValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DefaultValue" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.DefaultValue" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DefaultValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Data.DefaultValueTypeConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość domyślną dla kolumny, podczas tworzenia nowych wierszy.</summary>
        <value>Wartość odpowiednią do kolumny <see cref="P:System.Data.DataColumn.DataType" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość domyślna to wartość, która jest automatycznie przypisywana do kolumny po <xref:System.Data.DataRow> jest tworzony (na przykład datę i godzinę <xref:System.Data.DataRow> został utworzony.  
  
 Gdy <xref:System.Data.DataColumn.AutoIncrement%2A> ma ustawioną wartość PRAWDA, nie mogą istnieć ma wartości domyślnej.  
  
 Można utworzyć nowego przy użyciu wiersza <xref:System.Data.DataRow.ItemArray%2A> właściwość <xref:System.Data.DataRow> klasy i przekazywanie Metoda tablicy wartości. Jest to potencjalny problem z wartości domyślnej dla kolumny, ponieważ jej wartość jest generowana automatycznie. Aby użyć <xref:System.Data.DataRow.ItemArray%2A> właściwości z kolumny, umieść `null` w pozycji w kolumnie w tablicy. Aby uzyskać więcej informacji, zobacz <xref:System.Data.DataRow.ItemArray%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład tworzy kilka <xref:System.Data.DataColumn> obiekty, które mają różne typy danych i ustawia odpowiednie wartości w każdej kolumnie domyślnych.  
  
 [!code-vb[Classic WebData DataColumn.DefaultValue Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DefaultValue Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Podczas dodawania wiersza, wartość domyślna nie jest wystąpieniem typu danych kolumny.</exception>
        <altmember cref="P:System.Data.DataColumn.DataType" />
        <altmember cref="P:System.Data.DataRow.ItemArray" />
        <altmember cref="P:System.Data.DataColumn.AutoIncrement" />
        <altmember cref="T:System.Data.UniqueConstraint" />
      </Docs>
    </Member>
    <Member MemberName="Expression">
      <MemberSignature Language="C#" Value="public string Expression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Expression" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Expression" />
      <MemberSignature Language="VB.NET" Value="Public Property Expression As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Expression { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wyrażenie używane do filtrowania wierszy, obliczania wartości w kolumnie lub Utwórz kolumnę agregacji.</summary>
        <value>Wyrażenie do obliczenia wartości kolumny lub Utwórz kolumnę agregacji. Zwracany typ wyrażenia jest określany przez <see cref="P:System.Data.DataColumn.DataType" /> kolumny.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użycie jednego <xref:System.Data.DataColumn.Expression%2A> właściwości jest tworzenie kolumn obliczeniowych. Na przykład aby obliczyć wartość podatku, cenie jednostkowej jest mnożona przez stawkę podatku określonego regionu. Ponieważ stawek podatkowych zależą od regionu byłoby niemożliwe Włączanie stawkę podatku pojedynczej kolumny; Zamiast tego wartość jest obliczana przy użyciu <xref:System.Data.DataColumn.Expression%2A> właściwości, jak pokazano w kodzie języka Visual Basic w następującej sekcji:  
  
 DataSet1.Tables("Products").Columns("tax").Expression = "UnitPrice * 0.086"  
  
 Drugi polega na utworzeniu kolumnę agregacji. Podobnie jak obliczonej wartości, wartość zagregowana wykonuje operację na podstawie pełną zestawu wierszy w <xref:System.Data.DataTable>. Prosty przykład jest liczbę zwracanych w zestawie wierszy. Jest to metoda, którą należy użyć, aby określić liczbę transakcji według określonego sprzedawcy, jak pokazano w tym kod Visual Basic:  
  
```  
DataSet1.Tables("Orders").Columns("OrderCount").Expression = "Count(OrderID)"  
```  
  
## <a name="expression-syntax"></a>Składnia wyrażeń  
 Podczas tworzenia wyrażenia użyć <xref:System.Data.DataColumn.ColumnName%2A> właściwości do odwoływania się do kolumny. Na przykład jeśli <xref:System.Data.DataColumn.ColumnName%2A> dla jednej kolumny "UnitPrice" i "Ilość", wyrażenie będzie następujące:  
  
 "UnitPrice * ilość"  
  
> [!NOTE]
>  Jeśli kolumna jest używana w wyrażeniu, wyrażenie jest określane jako zależy od tej kolumny. Jeśli zależnych kolumny zostanie zmieniona lub usunięty, nie jest wyjątek. Zostanie wygenerowany wyjątek podczas uzyskiwania dostępu do kolumny podzielone teraz wyrażenia.  
  
 Podczas tworzenia wyrażenia filtru, należy ująć ciągów w pojedynczy cudzysłów:  
  
 "LastName = 'Nowak'"  
  
 Jeśli nazwa kolumny, która zawiera wszystkie inne niż alfanumeryczne znaki lub rozpoczyna się od cyfry lub (obniżać) zgodny z dowolnym z następujących słów zastrzeżonych, wymaga specjalnej obsługi, zgodnie z opisem w poniższych punktach.  
  
 I  
  
 Między  
  
 Podrzędne  
  
 False  
  
 W  
  
 jest  
  
 Np.  
  
 nie  
  
 Null  
  
 Lub  
  
 Nadrzędny  
  
 True  
  
 Jeśli nazwa kolumny, która spełnia jednego z powyższych warunków, muszą być ujęte w nawiasy kwadratowe, albo lub "" "cudzysłowy (akcent). Na przykład można użyć kolumny o nazwie "Kolumnę #" w wyrażeniu, należy zapisać albo "[kolumnę #]":  
  
 Całkowita liczba * [kolumnę #]  
  
 lub "\`kolumnę #" ":  
  
 Całkowita liczba * \`kolumnę # "  
  
 Jeśli nazwa kolumny jest ujęta w nawiasy kwadratowe, a następnie any "]" i "\\' znaków (ale nie wszystkie inne znaki) w niej należy użyć znaków ucieczki dołączając kreski ułamkowej odwróconej ("\\") znaków. Jeśli nazwa kolumny jest ujęta w znaki akcent nie go może zawierać znaków akcent w nim. Na przykład kolumna o nazwie "[kolumna]\\" będzie zapisany:  
  
 Całkowita liczba * [kolumna [\\]\\\\]  
  
 lub  
  
 Całkowita liczba * \`[kolumna]\\`  
  
## <a name="user-defined-values"></a>Wartości zdefiniowane przez użytkownika  
 Wartości zdefiniowane przez użytkownika może być używana w wyrażeniach ma zostać porównane z wartości w kolumnie. Wartości ciągu, powinna zostać ujęta w znaki apostrofu (i każdy znak pojedynczego cudzysłowu w wartości ciągu musi być zmienione znaczenie, dołączając ją z innego znaku pojedynczego cudzysłowu). Wartości daty powinna zostać ujęta w znaki krzyżyka (#) lub pojedynczych cudzysłowów (') oparte na dostawcę danych. Liczba miejsc dziesiętnych i notacji naukowej są dopuszczalne wartości liczbowych. Na przykład:  
  
 "Imię = 'John'"  
  
 "Cena < = 50,00"  
  
 "Data urodzenia < #1-31/82 #"  
  
 Dla kolumny, które zawierają wartości wyliczenia rzutowania wartości integer — typ danych. Na przykład:  
  
 "EnumColumn = 5"  
  
## <a name="parsing-literal-expressions"></a>Analizowanie wyrażeń literalnych  
 Wszystkie wyrażenia literału muszą być wyrażone w ustawieniach regionalnych Niezmienna kultura. Gdy `DataSet` analizuje i konwertuje wyrażenia dosłowne, zawsze używa Niezmienna kultura nie bieżącej kultury.  
  
 Literały ciągu są identyfikowane w przypadku pojedynczych cudzysłowów wokół wartości. Na przykład:  
  
 'John'  
  
 `Boolean` literały to PRAWDA i FAŁSZ; nie są one podane w wyrażeniach.  
  
 `Integer` literały [+-]? [0-9] + są traktowane jako `System.Int32`, `System.Int64` lub `System.Double`. `System.Double` może spowodować utratę dokładności w zależności od tego, jak duże jest liczba. Na przykład, jeśli liczba w literale jest 2147483650 `DataSet` najpierw próbuje przeprowadzić analizy numeru jako `Int32`. To nie powiedzie się, ponieważ liczba jest za duży. W takim przypadku `DataSet` będzie analizować numer jako `Int64`, która zostanie wykonana pomyślnie. Jeśli literał liczba większa niż maksymalna wartość Int64, `DataSet` będzie analizować literału przy użyciu `Double`.  
  
 Literały rzeczywistego przy użyciu notacji wykładniczej, na przykład 4.42372E-30, są analizować przy użyciu `System.Double`.  
  
 Literały rzeczywistych bez notacji naukowej, ale dziesiętny, są traktowane jako `System.Decimal`. Jeśli liczba przekracza obsługiwany przez wartości maksymalnej lub minimalnej `System.Decimal`, a następnie jest analizowany jako `System.Double`. Na przykład:  
  
 142526.144524 zostanie przekonwertowany na `Decimal`.  
  
 345262.78036719560925667 będzie traktowany jako `Double`.  
  
## <a name="operators"></a>Operatory  
 Łączenia jest dozwolone przy użyciu logicznych AND, OR i nie operatorów. Można użyć nawiasów klauzule grupy i wymusić pierwszeństwo. AND operator ma pierwszeństwo przed innymi operatorami. Na przykład:  
  
 (LastName = 'Smith' lub nazwisko = 'Nowak') I imię = 'John'  
  
 Po utworzeniu wyrażeniach porównania dopuszczalne są następujące operatory:  
  
 \<  
  
 >  
  
 \<=  
  
 >=  
  
 <>  
  
 =  
  
 W  
  
 NP.  
  
 Również obsługiwane są następujące operatory arytmetyczne w wyrażeniach:  
  
 \+ (oprócz)  
  
 \- (odejmowanie)  
  
 \* (mnożenia)  
  
 / (dzielenie)  
  
 % (modulo)  
  
## <a name="string-operators"></a>Operatory ciągów  
 Aby połączyć ciąg, użyj + znak. Wartość <xref:System.Data.DataSet.CaseSensitive%2A> właściwość <xref:System.Data.DataSet> klasy określa, czy porównywanie ciągów jest rozróżniana wielkość liter. Można jednak zmienić tę wartość z <xref:System.Data.DataTable.CaseSensitive%2A> właściwość <xref:System.Data.DataTable> klasy.  
  
## <a name="wildcard-characters"></a>Znaki symboli wieloznacznych  
 Zarówno * i % mogą być używane zamiennie dla symboli wieloznacznych w porównania LIKE. Jeśli ciąg w klauzuli LIKE zawiera * lub %, te znaki, które powinny być ujęte w nawiasy kwadratowe ([]). Jeśli w klauzuli nawiasu, każdy znak nawiasu powinny być ujęte w nawiasy kwadratowe (na przykład [[] lub []]). Symbol wieloznaczny jest dozwolona na początku i na końcu wzorca, lub na końcu wzorca lub na początku wzorca. Na przykład:  
  
 "ItemName takich jak" * produktu\*""  
  
 "ItemName takich jak" * produktu ""  
  
 "ItemName takich jak"produktu *""  
  
 Symbole wieloznaczne są niedozwolone w środku ciągu. Na przykład "t * Testowanie eksploracyjne" jest niedozwolone.  
  
## <a name="parentchild-relation-referencing"></a>Odwoływanie się do relacji nadrzędny/podrzędny  
 W wyrażeniu odwołania mogą tabeli nadrzędnej przez poprzedzenie jej nazwę kolumny z `Parent`. Na przykład `Parent.Price` odwołuje się do kolumny tabeli nadrzędnej o nazwie `Price`.  
  
 Gdy element podrzędny ma więcej niż jeden wiersz nadrzędnej, użyj Parent(RelationName). Element ColumnName. Na przykład Parent(RelationName). Cena odwołuje się do kolumny tabeli nadrzędnej o nazwie cen za pośrednictwem relacji.  
  
 Kolumny w tabeli można odwoływać się w wyrażeniu przez poprzedzenie jej nazwę kolumny z `Child`. Jednak ponieważ relacje podrzędne może zwracać wiele wierszy, musi zawierać odwołanie do kolumny podrzędne w funkcji agregującej. Na przykład `Sum(Child.Price)` zwróci sumy kolumny o nazwie `Price` w tabeli podrzędnej.  
  
 Jeśli tabela ma więcej niż jeden element podrzędny, składnia jest następująca: `Child(RelationName)`. Na przykład, jeśli tabela ma dwie tabele podrzędne o nazwie `Customers` i `Orders`i <xref:System.Data.DataRelation> nosi nazwę obiektu `Customers2Orders`, odwołanie będzie następujące:  
  
 Avg(Child(Customers2Orders).Quantity)  
  
## <a name="aggregates"></a>Agregaty  
 Obsługiwane są następujące typy agregacji:  
  
 Sum (Sum)  
  
 Średni (średnia)  
  
 Min (Minimum)  
  
 MAX (maksymalnie)  
  
 Count (licznik)  
  
 StDev (odchylenie standardowe statystyczne)  
  
 Var (Odchylenie statystyczne).  
  
 Agregacje są wykonywane zwykle wzdłuż relacji. Za pomocą jednego z podanych wcześniej funkcje i kolumny tabeli podrzędnej zgodnie z opisem w odwołujące relacji nadrzędny/podrzędny, który został już wspomniano, należy utworzyć wyrażenie agregujące. Na przykład:  
  
 Avg(Child.Price)  
  
 AVG(child(Orders2Details). Cena)  
  
 Wartość zagregowana można także wykonać na pojedynczą tabelę. Na przykład aby utworzyć podsumowanie liczby w kolumnie o nazwie "Price":  
  
 Sum(price)  
  
> [!NOTE]
>  Jeśli używasz pojedynczej tabeli można utworzyć agregacji nie byłoby nie Grupuj według funkcji. Zamiast tego wszystkie wiersze wyświetla tę samą wartość w kolumnie.  
  
 Jeśli tabela nie posiada wierszy, funkcje agregujące zwróci `null`.  
  
 Typy danych zawsze można ustalić, sprawdzając <xref:System.Data.DataColumn.DataType%2A> właściwość kolumny. Można również przeprowadzić konwersję typów danych przy użyciu funkcji konwersji pokazano w poniższej sekcji.  
  
 Wartość zagregowana można stosować tylko do jednej kolumny i nie inne wyrażenia może być używany wewnątrz wartości zagregowanej.  
  
## <a name="functions"></a>Funkcje  
 Obsługiwane są również następujące funkcje:  
  
 `CONVERT`  
  
|||  
|-|-|  
|Opis|Konwertuje określonego wyrażenia na określony typ platformy .NET Framework.|  
|Składnia|Konwertuj (`expression`, `type`)|  
|Argumenty|`expression` Wyrażenie, do konwersji.<br /><br /> `type` Do którego będzie można przekonwertować wartości na typ .NET Framework.|  
  
 Example: myDataColumn.Expression="Convert(total, 'System.Int32')"  
  
 Wszystkie konwersje są prawidłowe, z następującymi wyjątkami: `Boolean` można przekształcić do i z `Byte`, `SByte`, `Int16`, `Int32`, `Int64`, `UInt16`, `UInt32`, `UInt64`, `String` i samą tylko. `Char` może zostać przekształcone do i z `Int32`, `UInt32`, `String`, a sam tylko. `DateTime` może zostać przekształcone do i z `String` i samą tylko. `TimeSpan` może zostać przekształcone do i z `String` i samą tylko.  
  
 `LEN`  
  
|||  
|-|-|  
|Opis|Pobiera długość ciągu|  
|Składnia|DŁUGOŚĆ (`expression`)|  
|Argumenty|`expression` --Ciąg ma zostać obliczone.|  
  
 Przykład: myDataColumn.Expression="Len(ItemName)"  
  
 `ISNULL`  
  
|||  
|-|-|  
|Opis|Sprawdza, wyrażenia i zwraca albo zaznaczone wyrażenie lub wartość zastępcza.|  
|Składnia|ISNULL (`expression`, `replacementvalue`)|  
|Argumenty|`expression` Wyrażenie, do sprawdzenia.<br /><br /> `replacementvalue` — Jeśli wyrażenie jest `null`, `replacementvalue` jest zwracany.|  
  
 Przykład: myDataColumn.Expression="IsNull (cena, -1)"  
  
 `IIF`  
  
|||  
|-|-|  
|Opis|Pobiera jedną z dwóch wartości w zależności od wyniku wyrażenia logicznego.|  
|Składnia|IIF (`expr`, `truepart`, `falsepart`)|  
|Argumenty|`expr` --Wyrażenie do oceny.<br /><br /> `truepart` — Wartość zwracana, gdy wyrażenie jest prawdziwe.<br /><br /> `falsepart` — Wartość zwracana, jeśli wyrażenie ma wartość false.|  
  
 Przykład: myDataColumn.Expression = "IIF (łącznie > 1000"kosztownych","Witaj")  
  
 `TRIM`  
  
|||  
|-|-|  
|Opis|Usuwa wszystkich spacji wiodących i końcowych pustych znaków, takich jak \r, \n, \t, ""|  
|Składnia|PRZYTNIJ (`expression`)|  
|Argumenty|`expression` --Wyrażenie przycinania.|  
  
 `SUBSTRING`  
  
|||  
|-|-|  
|Opis|Pobiera ciąg podrzędny o określonej długości, zaczynając od określonego punktu w ciągu.|  
|Składnia|SUBSTRING (`expression`, `start`, `length`)|  
|Argumenty|`expression` --Ciąg źródłowy dla podciąg.<br /><br /> `start` — Liczba całkowita, która określa, gdzie uruchamiana podciąg.<br /><br /> `length` — Wartość całkowita określająca długość podciąg.|  
  
 Przykład: myDataColumn.Expression = "SUBSTRING (telefon, 7, 8)"  
  
> [!NOTE]
>  Można resetować <xref:System.Data.DataColumn.Expression%2A> właściwości przez przypisanie wartości null lub pusty ciąg. Jeśli wartość domyślna jest ustawiona na kolumnie expression, wszystkie wcześniej wypełnione wiersze są przypisane wartości domyślne po <xref:System.Data.DataColumn.Expression%2A> właściwość zostanie zresetowana.  
  
   
  
## Examples  
 Poniższy przykład tworzy trzy kolumny w <xref:System.Data.DataTable>. Drugi i trzeci kolumny zawierają wyrażenia; Podatek przy użyciu stawkę podatku zmiennej oblicza drugi i trzeci dodaje wynik obliczeń do wartości pierwszej kolumny. Tabeli wynikowej jest wyświetlany w <xref:System.Windows.Forms.DataGrid> formantu.  
  
 [!code-csharp[Classic WebData DataColumn.Expression Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.Expression Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.Expression Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.Expression Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Data.DataColumn.AutoIncrement" /> Lub <see cref="P:System.Data.DataColumn.Unique" /> właściwość jest ustawiona na <see langword="true" />.</exception>
        <exception cref="T:System.FormatException">Korzystając z funkcji konwersji, wyrażenie ciągu, ale ciąg nie zawiera reprezentację, który może zostać przekonwertowany na parametr typu.</exception>
        <exception cref="T:System.InvalidCastException">Korzystając z funkcji konwersji, żądane rzutowanie jest niemożliwe. Zobacz opis funkcji konwersji w poniższej sekcji, aby uzyskać szczegółowe informacje o możliwych rzutowania.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Korzystając z funkcji SUBSTRING start argument jest spoza zakresu.  
  
 - Lub -  
  
 Korzystając z funkcji SUBSTRING, długość argumentu jest spoza zakresu.</exception>
        <exception cref="T:System.Exception">Korzystając z funkcji LEN lub PRZYCINANIA, wyrażenie nie zostało oszacowane jako ciąg. Dotyczy to również wyrażeń określających <see cref="T:System.Char" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtendedProperties">
      <MemberSignature Language="C#" Value="public System.Data.PropertyCollection ExtendedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.PropertyCollection ExtendedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.ExtendedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExtendedProperties As PropertyCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::PropertyCollection ^ ExtendedProperties { System::Data::PropertyCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.PropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję niestandardowe informacje użytkownika skojarzonego z <see cref="T:System.Data.DataColumn" />.</summary>
        <value>A <see cref="T:System.Data.PropertyCollection" /> niestandardowych informacji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataColumn.ExtendedProperties%2A> Właściwości umożliwia przechowywanie niestandardowych informacji z obiektem. Na przykład mogą być przechowywane przez czas, kiedy należy odświeżyć dane.  
  
 Rozszerzone właściwości musi być typu <xref:System.String>. Właściwości, które nie są typu <xref:System.String> nie są zachowywane podczas <xref:System.Data.DataColumn> jest zapisywany w formacie XML.  
  
   
  
## Examples  
 Poniższy przykład umożliwia dodanie właściwości niestandardowych do <xref:System.Data.PropertyCollection> zwrócony przez <xref:System.Data.DataColumn.ExtendedProperties%2A> właściwości. Drugi przykład pobiera właściwości niestandardowej.  
  
 [!code-csharp[Classic WebData DataColumn.ExtendedProperties Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ExtendedProperties Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ExtendedProperties Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ExtendedProperties Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.PropertyCollection" />
      </Docs>
    </Member>
    <Member MemberName="MaxLength">
      <MemberSignature Language="C#" Value="public int MaxLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxLength" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.MaxLength" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxLength { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia maksymalną długość kolumny tekstowej.</summary>
        <value>Maksymalna długość kolumny w znakach. Jeśli dana kolumna nie ma żadnych maksymalną długość, wartość -1 (ustawienie domyślne).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataColumn.MaxLength%2A> Właściwość jest ignorowana nietekstowych kolumn. A <xref:System.ArgumentException> wyjątek jest zgłaszany w przypadku przypisania <xref:System.Data.DataColumn.MaxLength%2A> z kolumną innych niż ciąg.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia obszar nazw <see cref="T:System.Data.DataColumn" />.</summary>
        <value>Przestrzeń nazw <see cref="T:System.Data.DataColumn" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataColumn.Namespace%2A> Właściwość jest używana podczas odczytywania i zapisywania XML dokumentu do <xref:System.Data.DataTable> w <xref:System.Data.DataSet> przy użyciu <xref:System.Data.DataSet.ReadXml%2A>, <xref:System.Data.DataSet.WriteXml%2A>, <xref:System.Data.DataSet.ReadXmlSchema%2A>, lub <xref:System.Data.DataSet.WriteXmlSchema%2A> metody.  
  
 Przestrzeń nazw dokumentu XML służy do określania zakresu atrybuty i elementy odczytywana do XML <xref:System.Data.DataSet>. Na przykład <xref:System.Data.DataSet> zawiera schemat odczytu dokumentu zawierającego przestrzeni nazw "Moja firma", a próby odczytu danych (z <xref:System.Data.DataSet.ReadXml%2A> metody) z dokumentu, który ma przestrzeń nazw "theirCompany." Dane, które nie odpowiadają istniejący schemat zostanie zignorowany.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Przestrzeń nazw zawiera już dane.</exception>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanging(class System.ComponentModel.PropertyChangedEventArgs pcevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyChanging (pcevent As PropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPropertyChanging(System::ComponentModel::PropertyChangedEventArgs ^ pcevent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcevent" Type="System.ComponentModel.PropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="pcevent">Odwołania do parametru.</param>
        <summary>Ten element członkowski obsługuje infrastrukturę programu .NET Framework i nie jest przeznaczony do użycia bezpośrednio w kodzie.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ordinal">
      <MemberSignature Language="C#" Value="public int Ordinal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Ordinal" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Ordinal" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Ordinal As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Ordinal { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera pozycję (liczony od zera) kolumny w <see cref="T:System.Data.DataColumnCollection" /> kolekcji.</summary>
        <value>Pozycja kolumny. Pobiera wartość -1, jeśli kolumna nie jest elementem członkowskim kolekcji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład zwraca typ kolumny Nazwa, numer i danych kolumny.  
  
 [!code-csharp[Classic WebData DataColumn.Ordinal Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.Ordinal Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.Ordinal Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.Ordinal Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix">
      <MemberSignature Language="C#" Value="public string Prefix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Prefix" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Prefix" />
      <MemberSignature Language="VB.NET" Value="Public Property Prefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Prefix { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia XML prefiks tego aliasów przestrzeni nazw <see cref="T:System.Data.DataTable" />.</summary>
        <value>Prefiks XML <see cref="T:System.Data.DataTable" /> przestrzeni nazw.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.Prefix%2A> Jest używany w dokumencie XML, aby zidentyfikować elementy, które należą do przestrzeni nazw dla <xref:System.Data.DataSet> obiektu (jak ustawione przez <xref:System.Data.DataSet.Namespace%2A> właściwości).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaisePropertyChanging">
      <MemberSignature Language="C#" Value="protected internal void RaisePropertyChanging (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void RaisePropertyChanging(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.RaisePropertyChanging(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub RaisePropertyChanging (name As String)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void RaisePropertyChanging(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Odwołania do parametru.</param>
        <summary>Ten element członkowski obsługuje infrastrukturę programu .NET Framework i nie jest przeznaczony do użycia bezpośrednio w kodzie.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public bool ReadOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.ReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Property ReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ReadOnly { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy kolumna zezwala na zmiany jak wiersz zostanie dodany do tabeli.</summary>
        <value>
          <see langword="true" /> Jeśli kolumna jest tylko do odczytu. w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład tworzy <xref:System.Data.DataColumn> i ustawia jej <xref:System.Data.DataColumn.ReadOnly%2A> właściwości `true`.  
  
 [!code-csharp[Classic WebData DataColumn.ReadOnly Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ReadOnly Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ReadOnly Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ReadOnly Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Właściwość jest ustawiona na <see langword="false" /> dla kolumny obliczanej.</exception>
        <altmember cref="P:System.Data.DataColumn.Unique" />
        <altmember cref="P:System.Data.DataColumn.AutoIncrement" />
      </Docs>
    </Member>
    <Member MemberName="SetOrdinal">
      <MemberSignature Language="C#" Value="public void SetOrdinal (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOrdinal(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.SetOrdinal(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOrdinal (ordinal As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOrdinal(int ordinal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">Określona liczba porządkowa.</param>
        <summary>Zmienia numer lub położenia <see cref="T:System.Data.DataColumn" /> do określonej liczby porządkowej lub pozycji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zmienia numer lub położenia <xref:System.Data.DataColumn> do określonej liczby porządkowej lub pozycji. Jeśli numer porządkowy jest mniejsza niż 0 lub większa niż liczba istniejących kolumn – 1 (większy niż numer ostatniej kolumny) następnie nieprawidłową <xref:System.ArgumentException> jest generowany.  
  
 Jeśli zmienisz numer kolumny kolumna zostanie przeniesiona do nowej pozycji w kolekcji kolumn. Kolumn między poprzedni i nowy numer będzie oznaczenie, aby dopasować nowy numer kolumny.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Table">
      <MemberSignature Language="C#" Value="public System.Data.DataTable Table { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataTable Table" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Table" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Table As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataTable ^ Table { System::Data::DataTable ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Data.DataTable" /> do której należy do kolumny.</summary>
        <value>
          <see cref="T:System.Data.DataTable" /> Który <see cref="T:System.Data.DataColumn" /> należy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład zwraca tabeli nadrzędnej <xref:System.Data.DataColumn> za pośrednictwem jego <xref:System.Data.DataColumn.Table%2A> właściwości.  
  
 [!code-csharp[Classic WebData DataColumn.Table Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.Table Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.Table Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.Table Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.DataTable" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera <see cref="P:System.Data.DataColumn.Expression" /> kolumny, jeśli taka istnieje.</summary>
        <returns>
          <see cref="P:System.Data.DataColumn.Expression" /> Wartość, jeśli właściwość jest ustawiona, a w przeciwnym razie <see cref="P:System.Data.DataColumn.ColumnName" /> właściwości.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Data.DataColumn.ToString%2A> właściwości, aby przywrócić domyślny ciąg każdy element członkowski kolekcji <xref:System.Data.DataColumn> obiektów.  
  
 [!code-csharp[Classic WebData DataColumn.ToString Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ToString Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ToString Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ToString Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.Expression" />
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
      </Docs>
    </Member>
    <Member MemberName="Unique">
      <MemberSignature Language="C#" Value="public bool Unique { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Unique" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Unique" />
      <MemberSignature Language="VB.NET" Value="Public Property Unique As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Unique { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy wartości w każdym wierszu kolumny muszą być unikatowe.</summary>
        <value>
          <see langword="true" /> Jeśli wartość musi być unikatowa. w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jak tej właściwości została zmieniona z false na true, unikatowego ograniczenia zostanie utworzona w tej kolumnie, aby upewnić się, że wartości są unikatowe.  
  
   
  
## Examples  
 W poniższym przykładzie jest tworzony nowy <xref:System.Data.DataColumn>, ustawia jego właściwości i dodaje go do kolekcji kolumn tabeli.  
  
 [!code-csharp[Classic WebData DataColumn.Unique Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.Unique Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.Unique Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.Unique Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Kolumna jest kolumną obliczaną.</exception>
        <altmember cref="P:System.Data.DataColumn.AllowDBNull" />
        <altmember cref="T:System.Data.UniqueConstraint" />
        <altmember cref="P:System.Data.DataTable.Constraints" />
      </Docs>
    </Member>
  </Members>
</Type>