<Type Name="IDataAdapter" FullName="System.Data.IDataAdapter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c3ba188b4aa23926c517bdb170261648720c47e6" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37668923" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDataAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataAdapter" />
  <TypeSignature Language="DocId" Value="T:System.Data.IDataAdapter" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataAdapter" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataAdapter" />
  <TypeSignature Language="F#" Value="type IDataAdapter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Zezwala na obiekt do zaimplementowania elementu DataAdapter i reprezentuje zestaw metod i powiązane działania właściwości mapowania, które są używane do wypełnienia i aktualizowania <see cref="T:System.Data.DataSet" /> i zaktualizować źródło danych.  
  
 <see cref="T:System.Data.IDbDataAdapter" /> wystąpienia są dla źródeł danych, które są (lub podobny) relacyjnych baz danych za pomocą poleceń tekstowych (takich jak Transact-SQL), podczas gdy <see cref="T:System.Data.IDataAdapter" /> wystąpienia można użyć dowolnego typu źródła danych.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.IDataAdapter> Interfejsu pozwala klasie dziedziczącej zaimplementować klasę DataAdapter, co stanowi Most między źródłem danych i <xref:System.Data.DataSet>. Aby uzyskać więcej informacji na temat klasy elementu DataAdapter zobacz [wypełnianie zestawu danych z elementu DataAdapter](~/docs/framework/data/adonet/populating-a-dataset-from-a-dataadapter.md).  
  
 Aplikacja nie tworzy wystąpienie <xref:System.Data.IDataAdapter> interfejsu bezpośrednio, ale implementuje wystąpienia klasy, która dziedziczy <xref:System.Data.IDataAdapter>.  
  
 Klasy, które dziedziczą <xref:System.Data.IDataAdapter> musi implementować dziedziczone elementy członkowskie i zazwyczaj definiują dodatkowe elementy członkowskie, aby dodać funkcje właściwe dla dostawcy. Na przykład <xref:System.Data.IDataAdapter> interfejs definiuje <xref:System.Data.IDataAdapter.Fill%2A> metody, która przyjmuje <xref:System.Data.DataSet> jako parametr. Z kolei <xref:System.Data.OleDb.OleDbDataAdapter> klasa dziedziczy <xref:System.Data.Common.DbDataAdapter.Fill%2A> metody i definiuje również dwie dodatkowe przeciążenia <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> metody, które umożliwiają wykorzystywanie zestawu rekordów ADO obiekt jako parametr.  
  
   
  
## Examples  
 W poniższym przykładzie użyto klasy pochodne <xref:System.Data.SqlClient.SqlCommand>, <xref:System.Data.SqlClient.SqlDataAdapter>, i <xref:System.Data.SqlClient.SqlConnection>, aby wybrać rekordy z bazy danych. Wypełniony <xref:System.Data.DataSet> jest zwracana. Aby to zrobić, metoda jest przekazywana zainicjowane <xref:System.Data.DataSet>, ciąg połączenia i ciągu zapytania, który jest instrukcją języka Transact-SQL ZAZNACZYĆ.  
  
 [!code-csharp[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Podwyższenie poziomu spójności między dostawcy danych .NET Framework, nazwa klasy dziedziczącej, w postaci <paramref name="Prv" /> DataAdapter gdzie <paramref name="Prv" /> jest prefiksem jednolite, biorąc pod uwagę wszystkie klasy w określonej przestrzeni nazw dostawcy danych .NET Framework. Na przykład <paramref name="Sql" /> to prefiks wartości <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> klasy w <see langword="System.Data.SqlClient" /> przestrzeni nazw.  Przy dziedziczeniu z <see cref="T:System.Data.IDataAdapter" /> interfejsu, należy zaimplementować następujących konstruktorów: <list type="table"><listheader><term> elementu </term><description> opis </description></listheader><item><term> PrvDataAdapter() </term><description> inicjuje nowe wystąpienie klasy PrvDataAdapter.  </description></item><item><term> PrvDataAdapter (PrvCommand selectCommand) </term><description> inicjuje nowe wystąpienie klasy PrvDataAdapter przy użyciu określonej instrukcji SQL SELECT.  </description></item><item><term> PrvDataAdapter (selectCommandText ciąg, ciąg selectConnectionString) </term><description> inicjuje nowe wystąpienie klasy PrvDataAdapter przy użyciu instrukcji SELECT i parametry połączenia.  </description></item><item><term> PrvDataAdapter (selectCommandText ciągu, PrvConnection selectConnection) </term><description> inicjuje nowe wystąpienie klasy PrvDataAdapter przy użyciu instrukcji SELECT i obiekt PrvConnection.  </description></item></list></para>
    </block>
  </Docs>
  <Members>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="abstract member Fill : System.Data.DataSet -&gt; int" Usage="iDataAdapter.Fill dataSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">A <see cref="T:System.Data.DataSet" /> umożliwia wypełnienie rekordów i w razie potrzeby schematu.</param>
        <summary>Dodaje lub aktualizuje wierszy w <see cref="T:System.Data.DataSet" /> zgadzać się przy użyciu źródła danych <see cref="T:System.Data.DataSet" /> nazwę, a następnie tworzy <see cref="T:System.Data.DataTable" /> o nazwie "Table".</summary>
        <returns>Liczba wierszy pomyślnie dodane do lub odświeżane w <see cref="T:System.Data.DataSet" />. Nie zawiera wierszy dotyczy instrukcji, które nie zwrócą wierszy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.IDataAdapter.Fill%2A> Pobiera wiersze z źródła danych, przy użyciu instrukcji SELECT, określonego przez skojarzony <xref:System.Data.IDbDataAdapter.SelectCommand%2A> właściwości. Obiekt połączenia skojarzony z instrukcją SELECT musi być prawidłowy, ale nie musi być otwarty. Jeśli połączenie jest zamknięte przed <xref:System.Data.IDataAdapter.Fill%2A> jest wywoływana, jego jest otwarta do pobierania danych, a następnie zamknięty. Jeśli połączenie jest otwarte przed <xref:System.Data.IDataAdapter.Fill%2A> jest wywoływana, pozostaje otwarty.  
  
 <xref:System.Data.IDataAdapter.Fill%2A> Następnie operacja doda wiersze do miejsca docelowego <xref:System.Data.DataTable> obiekty w <xref:System.Data.DataSet>, tworzenie <xref:System.Data.DataTable> obiekty, jeśli ich jeszcze nie istnieją. Podczas tworzenia <xref:System.Data.DataTable> obiektów <xref:System.Data.IDataAdapter.Fill%2A> operacja zazwyczaj tworzy tylko metadane nazwy kolumny. Jednak jeśli <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> właściwość jest ustawiona na `AddWithKey`, również są tworzone odpowiednie klucze podstawowe i ograniczeń.  
  
 Jeśli `SelectCommand` zwraca wyniki OUTER JOIN `DataAdapter` nie ustawia <xref:System.Data.DataTable.PrimaryKey%2A> wartości wynikowe <xref:System.Data.DataTable>. Musisz jawnie zdefiniować klucz podstawowy, aby upewnić się, że zduplikowane wiersze są rozpoznawane prawidłowo. Aby uzyskać więcej informacji, zobacz [Definiowanie kluczy podstawowych](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
 Jeśli <xref:System.Data.IDataAdapter> napotka zduplikowane kolumny podczas wypełniania <xref:System.Data.DataTable>, generuje ona nazwy kolejnych kolumnach, za pomocą wzorca "nazwakolumny1", "nazwakolumny2", "columnname3" i tak dalej. Jeśli dane przychodzące zawiera nazwy kolumn, są umieszczane w <xref:System.Data.DataSet> zgodnie ze wzorcem "Kolumna1", "Column2" i tak dalej. Kiedy wiele zestawów wyników są dodawane do <xref:System.Data.DataSet>, każdy zestaw wyników jest umieszczany w osobnej tabeli. Zestawy wyników dodatkowe są nazywane przez dołączenie wartości całkowitych, do nazwy określonej tabeli (na przykład "Table", "Tabela1", "Tabela2" i tak dalej). Aplikacje należy zachować ostrożność przy użyciu nazw kolumn i tabel, aby upewnić się, że nie występują konflikty z tych wzorców nazewnictwa.  
  
 Po instrukcji SELECT, która jest używana do wypełniania <xref:System.Data.DataSet> zwraca wiele wyników, takich jak batch instrukcji SQL, jeśli jeden z wyników zawiera błąd, wszystkie kolejne wyniki są pominięty i nie zostały dodane do <xref:System.Data.DataSet>.  
  
 Możesz użyć <xref:System.Data.IDataAdapter.Fill%2A> metoda wiele razy w tym samym <xref:System.Data.DataTable>. Jeśli istnieje klucz podstawowy, wiersze przychodzące są scalane z pasujących wierszy, które już istnieją. Jeśli istnieje nie klucza podstawowego, wiersze przychodzące są dołączane do <xref:System.Data.DataTable>.  
  
> [!NOTE]
>  Podczas przetwarzania instrukcji SQL usługi batch, które zwracają wiele wyników, implementacja <xref:System.Data.IDataAdapter.Fill%2A> i <xref:System.Data.IDataAdapter.FillSchema%2A> dostawcy danych .NET Framework pobiera informacje o schemacie dla pierwszego wyniku.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType);" />
      <MemberSignature Language="F#" Value="abstract member FillSchema : System.Data.DataSet * System.Data.SchemaType -&gt; System.Data.DataTable[]" Usage="iDataAdapter.FillSchema (dataSet, schemaType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataSet">
          <see cref="T:System.Data.DataSet" /> Trzeba napełniać schematu ze źródła danych.</param>
        <param name="schemaType">Jedną z <see cref="T:System.Data.SchemaType" /> wartości.</param>
        <summary>Dodaje <see cref="T:System.Data.DataTable" /> o nazwie "Table" do określonego <see cref="T:System.Data.DataSet" /> i konfiguruje schemat do dopasowania w źródle danych na podstawie <see cref="T:System.Data.SchemaType" />.</summary>
        <returns>Tablica <see cref="T:System.Data.DataTable" /> zwróconych obiektów, które zawierają informacje o schemacie ze źródła danych.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.IDataAdapter.FillSchema%2A> Metoda pobiera schematu ze źródła danych przy użyciu <xref:System.Data.IDbDataAdapter.SelectCommand%2A>. Obiekt połączenia skojarzony z <xref:System.Data.IDbDataAdapter.SelectCommand%2A> musi być prawidłowy, ale nie musi być otwarty. Jeśli połączenie jest zamknięte przed <xref:System.Data.IDataAdapter.FillSchema%2A> jest wywoływana, jego jest otwarta do pobierania danych, a następnie zamknięty. Jeśli połączenie jest otwarte przed <xref:System.Data.IDataAdapter.FillSchema%2A> jest wywoływana, pozostaje otwarty.  
  
 A <xref:System.Data.IDataAdapter.FillSchema%2A> operacja spowoduje dodanie <xref:System.Data.DataTable> do miejsca docelowego <xref:System.Data.DataSet>. Następnie dodaje kolumny <xref:System.Data.DataColumnCollection> z <xref:System.Data.DataTable> i konfiguruje następujące opcje <xref:System.Data.DataColumn> właściwości, jeśli nie istnieją w źródle danych:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. Należy ustawić <xref:System.Data.DataColumn.AutoIncrementStep%2A> i <xref:System.Data.DataColumn.AutoIncrementSeed%2A> oddzielnie.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.IDataAdapter.FillSchema%2A> konfiguruje również <xref:System.Data.DataTable.PrimaryKey%2A> i <xref:System.Data.DataTable.Constraints%2A> właściwości, zgodnie z następującymi zasadami:  
  
-   Jeśli co najmniej jedną kolumnę klucza podstawowego są zwracane przez <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, są używane jako kolumny klucza podstawowego dla <xref:System.Data.DataTable>.  
  
-   Jeśli są zwracane nie kolumny klucza podstawowego, ale są unikatowe kolumny, unikatowe kolumny są używane jako klucz podstawowy, jeśli unikatowe kolumny nie dopuszczają wartości. W przypadku dowolnej kolumny dopuszczające wartość null, <xref:System.Data.UniqueConstraint> jest dodawany do <xref:System.Data.ConstraintCollection>, ale <xref:System.Data.DataTable.PrimaryKey%2A> nie ustawiono właściwości.  
  
-   Jeśli zwracane są unikatowe kolumny i kolumny klucza podstawowego, klucz podstawowy są używane jako kolumny klucza podstawowego dla <xref:System.Data.DataTable>.  
  
 Należy pamiętać, że klucze podstawowe i unikatowych ograniczeń są dodawane do <xref:System.Data.ConstraintCollection> zgodnie z poprzednich zasad, ale także inne ograniczenia typów nie są dodawane.  
  
 Jeśli klastrowane unikatowy indeks jest zdefiniowany w kolumnie lub kolumn w tabeli programu SQL Server i ograniczenia klucza podstawowego jest zdefiniowany w osobnym zestawie kolumn, a następnie nazwy kolumn w klastrowanym indeksie zostaną zwrócone. Aby zwrócić nazwę lub nazwy kolumn klucza podstawowego, należy użyć wskazówki zapytania przy użyciu instrukcji SELECT, która określa nazwę indeksu klucza podstawowego. Aby uzyskać więcej informacji na temat sposobu określania wskazówki zapytania, zobacz [wskazówki zapytania (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).  
  
 Jeśli <xref:System.Data.IDataAdapter> napotka zduplikowane kolumny podczas wypełniania <xref:System.Data.DataTable>, generuje ona nazwy kolejnych kolumnach, za pomocą wzorca "nazwakolumny1", "nazwakolumny2", "columnname3" i tak dalej. Jeśli dane przychodzące zawiera nazwy kolumn, są umieszczane w <xref:System.Data.DataSet> zgodnie ze wzorcem "Kolumna1", "Column2" i tak dalej. Kiedy wiele zestawów wyników są dodawane do <xref:System.Data.DataSet>, każdy zestaw wyników jest umieszczany w osobnej tabeli. Zestawy wyników dodatkowe są nazywane przez dołączenie wartości całkowitych, do nazwy określonej tabeli (na przykład "Table", "Tabela1", "Tabela2" i tak dalej). Aplikacje należy zachować ostrożność przy użyciu nazw kolumn i tabel, aby upewnić się, że nie występują konflikty z tych wzorców nazewnictwa.  
  
 <xref:System.Data.IDataAdapter.FillSchema%2A> zwraca żadnych wierszy. Użyj <xref:System.Data.IDataAdapter.Fill%2A> metodę, aby dodać wiersze do <xref:System.Data.DataTable>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />
      </Docs>
    </Member>
    <Member MemberName="GetFillParameters">
      <MemberSignature Language="C#" Value="public System.Data.IDataParameter[] GetFillParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.IDataParameter[] GetFillParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.GetFillParameters" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFillParameters () As IDataParameter()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::IDataParameter ^&gt; ^ GetFillParameters();" />
      <MemberSignature Language="F#" Value="abstract member GetFillParameters : unit -&gt; System.Data.IDataParameter[]" Usage="iDataAdapter.GetFillParameters " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera parametry ustawiony przez użytkownika podczas wykonywania instrukcji SQL SELECT.</summary>
        <returns>Tablica <see cref="T:System.Data.IDataParameter" /> obiektów, które zawiera parametry ustawiony przez użytkownika.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
```  
private static void GetParameters(String connectiongString) {  
           using (SqlConnection conn = new SqlConnection(connectiongString)) {  
              String queryString = "Select [CourseID],[Title],[Credits] from [MySchool].[dbo].[Course] where [Year]=@Year and [Credit]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MissingMappingAction">
      <MemberSignature Language="C#" Value="public System.Data.MissingMappingAction MissingMappingAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MissingMappingAction MissingMappingAction" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.MissingMappingAction" />
      <MemberSignature Language="VB.NET" Value="Public Property MissingMappingAction As MissingMappingAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::MissingMappingAction MissingMappingAction { System::Data::MissingMappingAction get(); void set(System::Data::MissingMappingAction value); };" />
      <MemberSignature Language="F#" Value="member this.MissingMappingAction : System.Data.MissingMappingAction with get, set" Usage="System.Data.IDataAdapter.MissingMappingAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.MissingMappingAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wskazuje lub określa, czy źródło niezamapowane tabele lub kolumny są przekazywane przy użyciu ich nazw źródeł w celu przefiltrowania lub zgłosić błąd.</summary>
        <value>Jedną z <see cref="T:System.Data.MissingMappingAction" /> wartości. Wartość domyślna to <see langword="Passthrough" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.IDataAdapter.TableMappings%2A> Dostarcza głównej mapowanie między zwracane rekordy i <xref:System.Data.DataSet>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Podana wartość nie jest jednym z <see cref="T:System.Data.MissingMappingAction" /> wartości.</exception>
        <altmember cref="P:System.Data.IDataAdapter.MissingSchemaAction" />
      </Docs>
    </Member>
    <Member MemberName="MissingSchemaAction">
      <MemberSignature Language="C#" Value="public System.Data.MissingSchemaAction MissingSchemaAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MissingSchemaAction MissingSchemaAction" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.MissingSchemaAction" />
      <MemberSignature Language="VB.NET" Value="Public Property MissingSchemaAction As MissingSchemaAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::MissingSchemaAction MissingSchemaAction { System::Data::MissingSchemaAction get(); void set(System::Data::MissingSchemaAction value); };" />
      <MemberSignature Language="F#" Value="member this.MissingSchemaAction : System.Data.MissingSchemaAction with get, set" Usage="System.Data.IDataAdapter.MissingSchemaAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.MissingSchemaAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wskazuje lub określa, czy Brak tabel źródłowych, kolumn i ich wzajemne relacje zostaną dodane do schematu zestawu danych, ignorowane, lub spowodować wystąpienie błędu wygenerowany.</summary>
        <value>Jedną z <see cref="T:System.Data.MissingSchemaAction" /> wartości. Wartość domyślna to <see langword="Add" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Podana wartość nie jest jednym z <see cref="T:System.Data.MissingSchemaAction" /> wartości.</exception>
        <altmember cref="P:System.Data.Common.DataAdapter.MissingMappingAction" />
      </Docs>
    </Member>
    <Member MemberName="TableMappings">
      <MemberSignature Language="C#" Value="public System.Data.ITableMappingCollection TableMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.ITableMappingCollection TableMappings" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.TableMappings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TableMappings As ITableMappingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::ITableMappingCollection ^ TableMappings { System::Data::ITableMappingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TableMappings : System.Data.ITableMappingCollection" Usage="System.Data.IDataAdapter.TableMappings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.ITableMappingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wskazuje, jak tabela źródłowa jest mapowany do tabeli zestawu danych.</summary>
        <value>Kolekcja, która zapewnia głównej mapowanie między zwracane rekordy i <see cref="T:System.Data.DataSet" />. Wartość domyślna to pustą kolekcję.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.IDataAdapter> Używa tylko mapowania dla tabeli źródłowej o nazwie "Table". Wszystkie wybierz instrukcje INSERT, usuwania i aktualizacji, które są zwracający dane należy to zrobić za pomocą kolumny spójnego nazewnictwa. Nazwy kolumn zwrócone w rekordach musi być unikatowa, w przeciwnym razie kolumny o takich samych nazwach Zastąp poprzednie dane. Na <xref:System.Data.IDataAdapter.Update%2A>, tylko tabeli mapowany do tabeli źródłowej o nazwie "Table" będą mieć zmian, jego uzgodnione.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Update(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="abstract member Update : System.Data.DataSet -&gt; int" Usage="iDataAdapter.Update dataSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">
          <see cref="T:System.Data.DataSet" /> Używane do aktualizowania źródła danych.</param>
        <summary>Wywołuje odpowiednie instrukcje INSERT, UPDATE lub DELETE dla każdego wstawione, zaktualizowane lub usunąć wiersz w określonym <see cref="T:System.Data.DataSet" /> z <see cref="T:System.Data.DataTable" /> o nazwie "Table".</summary>
        <returns>Liczba pomyślnie zaktualizowanych z <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kiedy aplikacja wywołuje <xref:System.Data.IDataAdapter.Update%2A> metody <xref:System.Data.IDataAdapter> sprawdza <xref:System.Data.DataRow.RowState%2A> właściwości i wykonuje wymagane instrukcje INSERT, UPDATE lub DELETE iteracyjne dla każdego wiersza, na podstawie kolejności indeksy skonfigurowane w <xref:System.Data.DataSet>. Na przykład <xref:System.Data.IDataAdapter.Update%2A> może być wykonywany z powodu kolejności wierszy w instrukcji DELETE, a następnie instrukcji INSERT, a następnie inny instrukcji DELETE, <xref:System.Data.DataTable>.  
  
 Należy pamiętać, że te instrukcje nie są wykonywane jako proces wsadowy; Każdy wiersz jest aktualizowane pojedynczo. Aplikacja może wywołać <xref:System.Data.DataSet.GetChanges%2A> metodę, jeśli musi sterowania sekwencją instrukcji typów (na przykład wstawia przed aktualizacji). Aby uzyskać więcej informacji, zobacz [aktualizowanie źródeł danych za pomocą elementów DataAdapters](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).  
  
 Jeśli nie zostały określone instrukcje INSERT, UPDATE lub DELETE, <xref:System.Data.Common.DataAdapter.Update%2A> metoda generuje wyjątek. Jednakże, możesz utworzyć <xref:System.Data.SqlClient.SqlCommandBuilder> lub <xref:System.Data.OleDb.OleDbCommandBuilder> obiekt, aby automatycznie wygenerować instrukcji SQL dla aktualizacji pojedynczej tabeli, jeśli ustawisz `SelectCommand` właściwości dostawcy danych .NET Framework. Następnie żadnych dodatkowych instrukcji SQL, których nie należy ustawiać są generowane przez CommandBuilder. Tę logikę generowania wymaga informacji o kolumnie klucza znajdować się w <xref:System.Data.DataSet>. Aby uzyskać więcej informacji, zobacz [Generowanie poleceń za pomocą CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 <xref:System.Data.Common.DataAdapter.Update%2A> Metoda pobiera wiersze z tabeli pierwsze mapowania przed przystąpieniem do wykonywania aktualizacji na liście. <xref:System.Data.Common.DataAdapter.Update%2A> Następnie aktualizuje wiersz, używając wartości <xref:System.Data.IDbCommand.UpdatedRowSource%2A> właściwości. Wszystkie dodatkowe wiersze, zwracane są ignorowane.  
  
 Po załadowaniu danych do <xref:System.Data.DataSet>, <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> zdarzenie jest zgłaszane, co pozwala na sprawdzanie uzgodnić <xref:System.Data.DataSet> wiersza i wszystkie dane wyjściowe parametry zwróconemu przez polecenie. Po pomyślnym zaktualizowaniu wiersza zmiany w tym wierszu są akceptowane.  
  
 Korzystając z <xref:System.Data.IDataAdapter.Update%2A>, kolejność wykonywania jest następująca:  
  
1.  Wartości w <xref:System.Data.DataRow> zostaną przeniesione do wartości parametrów.  
  
2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> Zdarzenie jest wywoływane.  
  
3.  Polecenie zostanie wykonane.  
  
4.  Jeśli polecenie jest równa `FirstReturnedRecord`, a następnie pierwszy zwrócony wynik jest umieszczany w <xref:System.Data.DataRow>.  
  
5.  W przypadku parametrów wyjściowych są umieszczane w <xref:System.Data.DataRow>.  
  
6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> Zdarzenie jest wywoływane.  
  
7.  <xref:System.Data.DataRow.AcceptChanges%2A> jest wywoływana.  
  
 Każde polecenie skojarzone z <xref:System.Data.IDataAdapter> zazwyczaj ma kolekcję parametrów skojarzonych z nim. Parametry są zamapowane do bieżącego wiersza za pośrednictwem `SourceColumn` i `SourceVersion` właściwości dostawcy danych .NET Framework `Parameter` klasy. `SourceColumn` odwołuje się do <xref:System.Data.DataTable> kolumny, <xref:System.Data.IDataAdapter> odwołania do uzyskania wartości parametrów dla bieżącego wiersza.  
  
 `SourceColumn` odnosi się do nazwy niezamapowaną kolumnę, zanim wszystkie mapowania tabeli zostały zastosowane. Jeśli `SourceColumn` odwołuje się do nieistniejącej kolumny akcję podejmowaną zależy od jednego z następujących <xref:System.Data.MissingMappingAction> wartości.  
  
|Wartość wyliczenia|Działania podjęte|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Użyj nazwy kolumn źródłowych i nazw tabel w <xref:System.Data.DataSet> Jeśli mapowanie nie jest obecny.|  
|`MissingMappingAction.Ignore`|Element <xref:System.SystemException> jest generowany. Jeśli jawnie ustawiono mapowania, brakuje mapowania dla parametru wejściowego jest zazwyczaj spowodowane błędem.|  
|`MissingMappingAction.Error`|Element <xref:System.SystemException> jest generowany.|  
  
 `SourceColumn` Jest również używana do mapowania wartości dla danych wyjściowych lub parametrów wejściowych/wyjściowych z powrotem do `DataSet`. Wyjątek jest generowany, gdy odwołuje się do nieistniejącej kolumny.  
  
 `SourceVersion` Właściwości dostawcy danych .NET Framework `Parameter` klasy określa, czy użyć `Original`, `Current`, lub `Proposed` wersję wartości kolumny. Ta funkcja jest często używany w oryginalnej wartości mają zostać uwzględnione w klauzuli WHERE w instrukcji UPDATE pod kątem naruszeń optymistycznej współbieżności.  
  
> [!NOTE]
>  Jeśli wystąpi błąd podczas aktualizowania wiersz, jest zgłaszany wyjątek i wykonywania aktualizacji nie jest obsługiwana. Aby kontynuować operację aktualizacji bez generowania wyjątków, gdy wystąpi błąd, należy ustawić <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> właściwości `true` przed wywołaniem <xref:System.Data.Common.DbDataAdapter.Update%2A>. Mogą również odpowiadać błędów na podstawie poszczególnych wierszy w obrębie `RowUpdated` zdarzeń elementu DataAdapter. Aby kontynuować operację aktualizacji bez generowania wyjątku `RowUpdated` zdarzenie, ustaw <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> właściwość <xref:System.Data.Common.RowUpdatedEventArgs> do <xref:System.Data.UpdateStatus.Continue>.  
  
   
  
## Examples  
 W poniższym przykładzie użyto klasy pochodnej <xref:System.Data.OleDb.OleDbDataAdapter>, <xref:System.Data.Common.DataAdapter.Update%2A> źródła danych. W tym przykładzie założono, że utworzono <xref:System.Data.OleDb.OleDbDataAdapter> i <xref:System.Data.DataSet>.  
  
 [!code-csharp[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataAdapter.IDataAdapter.Update Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataAdapter.IDataAdapter.Update Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.DBConcurrencyException">Podjęto próbę wykonania instrukcji INSERT, UPDATE lub DELETE spowodowała zero zmodyfikowanych rekordów.</exception>
      </Docs>
    </Member>
  </Members>
</Type>