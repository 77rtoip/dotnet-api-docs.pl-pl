<Type Name="IDataAdapter" FullName="System.Data.IDataAdapter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="04acc5f938041cbe186142d2bbb5fe676f37af4c" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69122088" /></Metadata><TypeSignature Language="C#" Value="public interface IDataAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataAdapter" />
  <TypeSignature Language="DocId" Value="T:System.Data.IDataAdapter" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataAdapter" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataAdapter" />
  <TypeSignature Language="F#" Value="type IDataAdapter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Umożliwia obiektowi zaimplementowanie elementu DataAdapter i reprezentuje zestaw metod oraz mapowania właściwości powiązanych z akcją, które są używane do wypełniania <see cref="T:System.Data.DataSet" /> i aktualizowania źródła danych.  
  
 <see cref="T:System.Data.IDbDataAdapter" />wystąpienia są dla źródeł danych, które są (lub przypominają) relacyjne bazy danych z poleceniami tekstowymi (na przykład <see cref="T:System.Data.IDataAdapter" /> Transact-SQL), podczas gdy wystąpienia mogą używać dowolnego typu źródła danych.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Interfejs umożliwia dziedziczenie klasy w celu zaimplementowania klasy DataAdapter, która reprezentuje Most między źródłem danych a a <xref:System.Data.DataSet>. <xref:System.Data.IDataAdapter> Aby uzyskać więcej informacji na temat klas DataAdapter, zobacz zapełnianie [zestawu danych z elementu DataAdapter](~/docs/framework/data/adonet/populating-a-dataset-from-a-dataadapter.md).  
  
 Aplikacja nie tworzy wystąpienia <xref:System.Data.IDataAdapter> interfejsu bezpośrednio, ale implementuje wystąpienie klasy, która dziedziczy. <xref:System.Data.IDataAdapter>  
  
 Klasy dziedziczące <xref:System.Data.IDataAdapter> muszą implementować dziedziczone elementy członkowskie i zwykle definiują dodatkowe elementy członkowskie do dodawania funkcji specyficznych dla dostawcy. Na przykład <xref:System.Data.IDataAdapter> Interfejs <xref:System.Data.IDataAdapter.Fill%2A> definiuje metodę, która przyjmuje <xref:System.Data.DataSet> jako parametr. Z kolei <xref:System.Data.OleDb.OleDbDataAdapter> Klasa <xref:System.Data.Common.DbDataAdapter.Fill%2A> dziedziczy metodę, a także definiuje <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> dwa dodatkowe przeciążenia metody, która przyjmuje obiekt zestawu rekordów ADO jako parametr.  
  
   
  
## Examples  
 W poniższym przykładzie zastosowano klasy <xref:System.Data.SqlClient.SqlCommand> <xref:System.Data.SqlClient.SqlDataAdapter>pochodne,,, i <xref:System.Data.SqlClient.SqlConnection>, aby wybrać rekordy z bazy danych. Wypełnione <xref:System.Data.DataSet> pole jest następnie zwracane. W tym celu Metoda jest przenoszona jako zainicjowane <xref:System.Data.DataSet>, ciąg połączenia i ciąg zapytania, który jest instrukcją SELECT języka Transact-SQL.  
  
 [!code-csharp[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Aby podwyższyć poziom spójności między dostawcami danych .NET Framework, nazwij klasę dziedziczenia <paramref name="Prv" /> w formularzu <paramref name="Prv" /> DataAdapter gdzie jest jednolite Prefiks określony dla wszystkich klas w określonej przestrzeni nazw dostawcy danych .NET Framework. Na przykład, <paramref name="Sql" /> jest prefiksem <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> klasy w <see langword="System.Data.SqlClient" /> przestrzeni nazw.  
  
W przypadku dziedziczenia z <see cref="T:System.Data.IDataAdapter" /> interfejsu należy zaimplementować następujące konstruktory: 
 <list type="table"><listheader><term> Element 
 </term><description> Opis 
 </description></listheader><item><term> PrvDataAdapter() 
 </term><description> Inicjuje nowe wystąpienie klasy PrvDataAdapter.  
  
 </description></item><item><term> PrvDataAdapter (PrvCommand selectCommand) 
 </term><description> Inicjuje nowe wystąpienie klasy PrvDataAdapter za pomocą określonej instrukcji SELECT języka SQL.  
  
 </description></item><item><term> PrvDataAdapter (ciąg selectCommandText, ciąg selectConnectionString) 
 </term><description> Inicjuje nowe wystąpienie klasy PrvDataAdapter przy użyciu instrukcji SELECT języka SQL i parametrów połączenia.  
  
 </description></item><item><term> PrvDataAdapter (ciąg selectCommandText, PrvConnection selectConnection) 
 </term><description> Inicjuje nowe wystąpienie klasy PrvDataAdapter przy użyciu instrukcji SELECT języka SQL i obiektu PrvConnection.  
  
 </description></item></list></para></block>
  </Docs>
  <Members>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="abstract member Fill : System.Data.DataSet -&gt; int" Usage="iDataAdapter.Fill dataSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">A <see cref="T:System.Data.DataSet" /> , aby wypełnić przy użyciu rekordów i, w razie potrzeby, schemat.</param>
        <summary>Dodaje lub aktualizuje wiersze w <see cref="T:System.Data.DataSet" /> celu dopasowania ich do źródła danych <see cref="T:System.Data.DataSet" /> przy użyciu <see cref="T:System.Data.DataTable" /> nazwy i tworzy nazwaną tabelę.</summary>
        <returns>Liczba wierszy, które zostały pomyślnie dodane lub odświeżone w <see cref="T:System.Data.DataSet" />. Nie obejmuje to wierszy, na które mają wpływ instrukcje, które nie zwracają wierszy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.IDataAdapter.Fill%2A>Pobiera wiersze ze źródła danych przy użyciu instrukcji SELECT określonej przez skojarzoną <xref:System.Data.IDbDataAdapter.SelectCommand%2A> właściwość. Obiekt połączenia skojarzony z instrukcją SELECT musi być prawidłowy, ale nie musi być otwarty. Jeśli połączenie jest zamknięte przed <xref:System.Data.IDataAdapter.Fill%2A> wywołaniem, zostanie otwarte w celu pobrania danych, a następnie zamknięcia. Jeśli połączenie jest otwarte przed <xref:System.Data.IDataAdapter.Fill%2A> wywołaniem, pozostaje otwarte.  
  
 Następnie operacja dodaje wiersze do obiektów <xref:System.Data.DataTable> docelowych <xref:System.Data.DataTable> w <xref:System.Data.DataSet>, tworząc obiekty, jeśli jeszcze nie istnieją. <xref:System.Data.IDataAdapter.Fill%2A> Podczas tworzenia <xref:System.Data.DataTable> obiektów <xref:System.Data.IDataAdapter.Fill%2A> , operacja zwykle tworzy tylko metadane nazwy kolumny. Jeśli <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> jednak właściwość jest ustawiona na `AddWithKey`, zostaną również utworzone odpowiednie klucze podstawowe i ograniczenia.  
  
 Jeśli zwraca wyniki sprzężenia zewnętrznego `DataAdapter` , obiekt <xref:System.Data.DataTable.PrimaryKey%2A> nie ustawia wartości wynikowej <xref:System.Data.DataTable>. `SelectCommand` Należy jawnie zdefiniować klucz podstawowy, aby upewnić się, że zduplikowane wiersze są prawidłowo rozpoznawane. Aby uzyskać więcej informacji, zobacz [Definiowanie kluczy podstawowych](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
 Jeśli napotka zduplikowane kolumny podczas <xref:System.Data.DataTable>wypełniania, generuje nazwy dla kolejnych kolumn, używając wzorca "nazwakolumny1", "nazwakolumny2", "columnname3" i tak dalej. <xref:System.Data.IDataAdapter> Jeśli dane przychodzące zawierają nienazwane kolumny, są one umieszczane <xref:System.Data.DataSet> zgodnie ze wzorcem "Kolumna1", "Kolumna2" i tak dalej. Gdy wiele zestawów wyników zostanie dodanych do <xref:System.Data.DataSet>, każdy zestaw wyników zostanie umieszczony w oddzielnej tabeli. Dodatkowe zestawy wyników są nazywane przez dołączenie wartości całkowitych do określonej nazwy tabeli (na przykład "Table", "Tabela1", "Tabela2" itd.). W przypadku używania nazw kolumn i tabel w aplikacjach należy zachować ostrożność, aby upewnić się, że nie występują konflikty z tymi wzorcami nazewnictwa.  
  
 Gdy instrukcja SELECT, która jest używana do wypełniania <xref:System.Data.DataSet> zwraca wiele wyników, takich jak instrukcja wsadowa SQL, jeśli jeden z wyników zawiera błąd, wszystkie następne wyniki są pomijane i nie zostaną dodane <xref:System.Data.DataSet>do.  
  
 Można użyć <xref:System.Data.IDataAdapter.Fill%2A> metody wiele razy w tym samym <xref:System.Data.DataTable>czasie. Jeśli istnieje klucz podstawowy, wiersze przychodzące są scalane z pasującymi wierszami, które już istnieją. Jeśli klucz podstawowy nie istnieje, wiersze przychodzące są dołączane do <xref:System.Data.DataTable>.  
  
> [!NOTE]
>  Podczas obsługi instrukcji SQL Part, które zwracają wiele wyników, implementacja <xref:System.Data.IDataAdapter.Fill%2A> i <xref:System.Data.IDataAdapter.FillSchema%2A> dla .NET Framework dostawcy danych pobiera informacje o schemacie tylko dla pierwszego wyniku.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType);" />
      <MemberSignature Language="F#" Value="abstract member FillSchema : System.Data.DataSet * System.Data.SchemaType -&gt; System.Data.DataTable[]" Usage="iDataAdapter.FillSchema (dataSet, schemaType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataSet"><see cref="T:System.Data.DataSet" /> Do wypełnienia schematem ze źródła danych.</param>
        <param name="schemaType">Jedna z <see cref="T:System.Data.SchemaType" /> wartości.</param>
        <summary>Dodaje nazwane "Tabela" do określonego <see cref="T:System.Data.DataSet" /> i konfiguruje schemat tak, aby był zgodny ze źródłem danych na podstawie określonego <see cref="T:System.Data.SchemaType" />. <see cref="T:System.Data.DataTable" /></summary>
        <returns>Tablica <see cref="T:System.Data.DataTable" /> obiektów, które zawierają informacje o schemacie zwrócone ze źródła danych.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda pobiera schemat ze źródła danych <xref:System.Data.IDbDataAdapter.SelectCommand%2A>przy użyciu. <xref:System.Data.IDataAdapter.FillSchema%2A> Obiekt połączenia skojarzony z elementem <xref:System.Data.IDbDataAdapter.SelectCommand%2A> musi być prawidłowy, ale nie musi być otwarty. Jeśli połączenie jest zamknięte przed <xref:System.Data.IDataAdapter.FillSchema%2A> wywołaniem, zostanie otwarte w celu pobrania danych, a następnie zamknięcia. Jeśli połączenie jest otwarte przed <xref:System.Data.IDataAdapter.FillSchema%2A> wywołaniem, pozostaje otwarte.  
  
 Operacja dodaje do miejsca docelowego <xref:System.Data.DataSet>. <xref:System.Data.DataTable> <xref:System.Data.IDataAdapter.FillSchema%2A> Następnie dodaje kolumny do <xref:System.Data.DataColumnCollection> <xref:System.Data.DataTable> i konfiguruje następujące <xref:System.Data.DataColumn> właściwości, jeśli istnieją one w źródle danych:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. Należy ustawić <xref:System.Data.DataColumn.AutoIncrementStep%2A> i <xref:System.Data.DataColumn.AutoIncrementSeed%2A> osobno.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.IDataAdapter.FillSchema%2A>Ponadto konfiguruje <xref:System.Data.DataTable.PrimaryKey%2A> właściwości <xref:System.Data.DataTable.Constraints%2A> i zgodnie z następującymi regułami:  
  
-   Jeśli co najmniej jedna kolumna klucza podstawowego jest zwracana przez <xref:System.Data.IDbDataAdapter.SelectCommand%2A>program, są one używane jako kolumny <xref:System.Data.DataTable>klucza podstawowego.  
  
-   Jeśli nie zostaną zwrócone żadne kolumny klucza podstawowego, ale unikatowe kolumny, unikatowe kolumny są używane jako klucz podstawowy, jeśli wszystkie unikatowe kolumny nie dopuszczają wartości null. Jeśli którakolwiek z kolumn dopuszcza wartość null, <xref:System.Data.UniqueConstraint> jest dodawana <xref:System.Data.ConstraintCollection>do, ale <xref:System.Data.DataTable.PrimaryKey%2A> właściwość nie jest ustawiona.  
  
-   W przypadku zwrócenia obu kolumn klucza podstawowego i unikatowych kolumn kolumny klucza podstawowego są używane jako kolumny <xref:System.Data.DataTable>klucza podstawowego.  
  
 Należy zauważyć, że klucze podstawowe i unikatowe ograniczenia są dodawane <xref:System.Data.ConstraintCollection> do zasad zgodnie z poprzednimi regułami, ale inne typy ograniczeń nie są dodawane.  
  
 Jeśli unikatowy indeks klastrowany jest zdefiniowany w kolumnie lub kolumnach w tabeli SQL Server i ograniczenie Primary Key jest zdefiniowane w oddzielnym zestawie kolumn, zostaną zwrócone nazwy kolumn w indeksie klastrowanym. Aby zwrócić nazwę lub nazwy kolumn klucza podstawowego, użyj wskazówki zapytania z instrukcją SELECT, która określa nazwę indeksu klucza podstawowego. Aby uzyskać więcej informacji na temat sposobu określania wskazówek zapytania, zobacz [Wskazówka zapytania (Transact-SQL)](https://msdn.microsoft.com/library/ms181714.aspx).  
  
 Jeśli napotka zduplikowane kolumny podczas <xref:System.Data.DataTable>wypełniania, generuje nazwy dla kolejnych kolumn, używając wzorca "nazwakolumny1", "nazwakolumny2", "columnname3" i tak dalej. <xref:System.Data.IDataAdapter> Jeśli dane przychodzące zawierają nienazwane kolumny, są one umieszczane <xref:System.Data.DataSet> zgodnie ze wzorcem "Kolumna1", "Kolumna2" i tak dalej. Gdy wiele zestawów wyników zostanie dodanych do <xref:System.Data.DataSet>, każdy zestaw wyników zostanie umieszczony w oddzielnej tabeli. Dodatkowe zestawy wyników są nazywane przez dołączenie wartości całkowitych do określonej nazwy tabeli (na przykład "Table", "Tabela1", "Tabela2" itd.). W przypadku używania nazw kolumn i tabel w aplikacjach należy zachować ostrożność, aby upewnić się, że nie występują konflikty z tymi wzorcami nazewnictwa.  
  
 <xref:System.Data.IDataAdapter.FillSchema%2A>nie zwraca żadnych wierszy. Użyj metody <xref:System.Data.IDataAdapter.Fill%2A> , aby dodać wiersze <xref:System.Data.DataTable>do.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />
      </Docs>
    </Member>
    <Member MemberName="GetFillParameters">
      <MemberSignature Language="C#" Value="public System.Data.IDataParameter[] GetFillParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.IDataParameter[] GetFillParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.GetFillParameters" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFillParameters () As IDataParameter()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::IDataParameter ^&gt; ^ GetFillParameters();" />
      <MemberSignature Language="F#" Value="abstract member GetFillParameters : unit -&gt; System.Data.IDataParameter[]" Usage="iDataAdapter.GetFillParameters " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera parametry ustawione przez użytkownika podczas wykonywania instrukcji SELECT języka SQL.</summary>
        <returns>Tablica <see cref="T:System.Data.IDataParameter" /> obiektów, która zawiera parametry ustawione przez użytkownika.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
```  
private static void GetParameters(String connectionString) {  
           using (SqlConnection conn = new SqlConnection(connectionString)) {  
              String queryString = "Select [CourseID],[Title],[Credits] from [MySchool].[dbo].[Course] where [Year]=@Year and [Credits]>=@Credits";   
              SqlParameter year = new SqlParameter("@Year", 2012);   
              SqlParameter credits = new SqlParameter("@Credits", SqlDbType.Int, 4, "Credits");   
              credits.Value = 4; SqlCommand command = new SqlCommand(queryString, conn);   
              command.Parameters.Add(year);   
              command.Parameters.Add(credits);   
              IDbDataAdapter mySchool = new SqlDataAdapter(command);   
              IDataParameter[] parameters = mySchool.GetFillParameters();  
              Console.WriteLine("{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}", "ParameterName", "SourceColumn", "Direction", "DbType", "Value");   
              foreach (IDataParameter parameter in parameters) {   
                 Console.WriteLine("{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}", parameter.ParameterName, parameter.SourceColumn, parameter.Direction, parameter.DbType, parameter.Value);   
              }  
           }  
        }  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MissingMappingAction">
      <MemberSignature Language="C#" Value="public System.Data.MissingMappingAction MissingMappingAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MissingMappingAction MissingMappingAction" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.MissingMappingAction" />
      <MemberSignature Language="VB.NET" Value="Public Property MissingMappingAction As MissingMappingAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::MissingMappingAction MissingMappingAction { System::Data::MissingMappingAction get(); void set(System::Data::MissingMappingAction value); };" />
      <MemberSignature Language="F#" Value="member this.MissingMappingAction : System.Data.MissingMappingAction with get, set" Usage="System.Data.IDataAdapter.MissingMappingAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.MissingMappingAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wskazuje lub określa, czy niezamapowane tabele źródłowe lub kolumny są przenoszone wraz z ich nazwami źródłowymi, aby można było filtrować lub zgłosić błąd.</summary>
        <value>Jedna z <see cref="T:System.Data.MissingMappingAction" /> wartości. Wartość domyślna to <see langword="Passthrough" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość zawiera mapowanie wzorca między zwróconymi rekordami <xref:System.Data.DataSet>i. <xref:System.Data.IDataAdapter.TableMappings%2A>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ustawiona wartość nie jest jedną z <see cref="T:System.Data.MissingMappingAction" /> wartości.</exception>
        <altmember cref="P:System.Data.IDataAdapter.MissingSchemaAction" />
      </Docs>
    </Member>
    <Member MemberName="MissingSchemaAction">
      <MemberSignature Language="C#" Value="public System.Data.MissingSchemaAction MissingSchemaAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MissingSchemaAction MissingSchemaAction" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.MissingSchemaAction" />
      <MemberSignature Language="VB.NET" Value="Public Property MissingSchemaAction As MissingSchemaAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::MissingSchemaAction MissingSchemaAction { System::Data::MissingSchemaAction get(); void set(System::Data::MissingSchemaAction value); };" />
      <MemberSignature Language="F#" Value="member this.MissingSchemaAction : System.Data.MissingSchemaAction with get, set" Usage="System.Data.IDataAdapter.MissingSchemaAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.MissingSchemaAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wskazuje lub określa, czy brakujące tabele źródłowe, kolumny i ich relacje są dodawane do schematu zestawu danych, ignorowane lub powodują wystąpienie błędu.</summary>
        <value>Jedna z <see cref="T:System.Data.MissingSchemaAction" /> wartości. Wartość domyślna to <see langword="Add" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Ustawiona wartość nie jest jedną z <see cref="T:System.Data.MissingSchemaAction" /> wartości.</exception>
        <altmember cref="P:System.Data.Common.DataAdapter.MissingMappingAction" />
      </Docs>
    </Member>
    <Member MemberName="TableMappings">
      <MemberSignature Language="C#" Value="public System.Data.ITableMappingCollection TableMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.ITableMappingCollection TableMappings" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.TableMappings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TableMappings As ITableMappingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::ITableMappingCollection ^ TableMappings { System::Data::ITableMappingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TableMappings : System.Data.ITableMappingCollection" Usage="System.Data.IDataAdapter.TableMappings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.ITableMappingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wskazuje, w jaki sposób tabela źródłowa jest mapowana na tabelę zestawu danych.</summary>
        <value>Kolekcja, która zapewnia mapowanie wzorca między zwróconymi rekordami i <see cref="T:System.Data.DataSet" />. Wartość domyślna jest pustą kolekcją.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.IDataAdapter> Używa tylko mapowań tabeli źródłowej o nazwie "Table". Wszystkie instrukcje SELECT, INSERT, DELETE i UPDATE zwracające dane muszą to zrobić przy użyciu spójnego nazewnictwa kolumn. Nazwy kolumn zwracanych w rekordach muszą być unikatowe, w przeciwnym razie kolumny ze zduplikowanymi nazwami zastępują poprzednie dane. W <xref:System.Data.IDataAdapter.Update%2A>systemie uzgodniono zmiany tylko w tabeli zamapowanej na tabelę źródłową o nazwie "Tabela".  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Update(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="abstract member Update : System.Data.DataSet -&gt; int" Usage="iDataAdapter.Update dataSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet"><see cref="T:System.Data.DataSet" /> Służy do aktualizowania źródła danych.</param>
        <summary>Wywołuje odpowiednie instrukcje INSERT, Update lub DELETE dla wszystkich wstawionych, zaktualizowanych lub usuniętych wierszy w określonym <see cref="T:System.Data.DataSet" /> <see cref="T:System.Data.DataTable" /> z nazwanego "tabeli".</summary>
        <returns>Liczba wierszy, które zostały pomyślnie zaktualizowane z <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy aplikacja wywołuje <xref:System.Data.IDataAdapter.Update%2A> metodę <xref:System.Data.IDataAdapter> , bada <xref:System.Data.DataRow.RowState%2A> Właściwość i wykonuje wymagane instrukcje INSERT, Update lub DELETE w sposób iteracyjny dla każdego wiersza, na podstawie kolejności indeksów skonfigurowanych w <xref:System.Data.DataSet>. Na przykład <xref:System.Data.IDataAdapter.Update%2A> może wykonać instrukcję delete, po której następuje instrukcja INSERT, a następnie inną instrukcję delete ze względu na kolejność wierszy <xref:System.Data.DataTable>w.  
  
 Należy pamiętać, że te instrukcje nie są wykonywane jako proces wsadowy; Każdy wiersz jest aktualizowany pojedynczo. Aplikacja może wywołać metodę, <xref:System.Data.DataSet.GetChanges%2A> Jeśli musisz kontrolować sekwencję typów instrukcji (na przykład wstawia przed aktualizacjami). Aby uzyskać więcej informacji, zobacz [Aktualizowanie źródeł danych za pomocą kart](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)DataAdapters.  
  
 Jeśli instrukcja INSERT, Update lub DELETE nie została określona, <xref:System.Data.Common.DataAdapter.Update%2A> Metoda generuje wyjątek. Można jednak utworzyć <xref:System.Data.SqlClient.SqlCommandBuilder> obiekt lub <xref:System.Data.OleDb.OleDbCommandBuilder> , aby automatycznie generować instrukcje SQL dla `SelectCommand` aktualizacji z jednej tabeli, jeśli ustawisz właściwość .NET Framework dostawcy danych. Następnie wszystkie dodatkowe instrukcje SQL, które nie są ustawione, są generowane przez CommandBuilder. Ta logika generowania wymaga, <xref:System.Data.DataSet>aby informacje o kolumnie klucza znajdowały się w. Aby uzyskać więcej informacji, zobacz [Generowanie poleceń z CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 <xref:System.Data.Common.DataAdapter.Update%2A> Metoda pobiera wiersze z tabeli wymienionej w pierwszym mapowaniu przed wykonaniem aktualizacji. Następnie aktualizuje wiersz przy użyciu wartości <xref:System.Data.IDbCommand.UpdatedRowSource%2A> właściwości. <xref:System.Data.Common.DataAdapter.Update%2A> Wszystkie zwracane wiersze dodatkowe są ignorowane.  
  
 Po załadowaniu danych z powrotem do programu <xref:System.Data.DataSet> <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> zdarzenie jest zgłaszane, umożliwiając użytkownikowi inspekcję uzgodnionego <xref:System.Data.DataSet> wiersza i parametrów wyjściowych zwracanych przez polecenie. Po pomyślnym zaktualizowaniu wiersza są akceptowane zmiany w tym wierszu.  
  
 W przypadku <xref:System.Data.IDataAdapter.Update%2A>korzystania z programu kolejność wykonywania jest następująca:  
  
1.  Wartości z <xref:System.Data.DataRow> są przenoszone do wartości parametrów.  
  
2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> Zdarzenie jest zgłaszane.  
  
3.  Wykonuje polecenie.  
  
4.  Jeśli polecenie jest ustawione na `FirstReturnedRecord`, wówczas pierwszy zwrócony wynik zostanie umieszczony <xref:System.Data.DataRow>w.  
  
5.  Jeśli istnieją parametry wyjściowe, są one umieszczane w <xref:System.Data.DataRow>.  
  
6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> Zdarzenie jest zgłaszane.  
  
7.  <xref:System.Data.DataRow.AcceptChanges%2A>jest wywoływana.  
  
 Każde polecenie skojarzone z <xref:System.Data.IDataAdapter> zazwyczaj ma skojarzoną kolekcję parametrów. Parametry są mapowane do bieżącego wiersza za pomocą `SourceColumn` właściwości i `SourceVersion` `Parameter` klasy .NET Framework dostawcy danych. `SourceColumn`odwołuje się <xref:System.Data.DataTable> do kolumny <xref:System.Data.IDataAdapter> , która zawiera odwołania do uzyskiwania wartości parametrów dla bieżącego wiersza.  
  
 `SourceColumn`odwołuje się do niemapowanej nazwy kolumny przed zastosowaniem jakichkolwiek mapowań tabel. Jeśli `SourceColumn` odwołuje się do nieistniejącej kolumny, podejmowana akcja zależy od jednej z następujących <xref:System.Data.MissingMappingAction> wartości.  
  
|Wartość wyliczenia|Podjęta akcja|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Użyj nazw kolumn źródłowych i nazw tabel w <xref:System.Data.DataSet> przypadku braku mapowania.|  
|`MissingMappingAction.Ignore`|<xref:System.SystemException> Jest generowany. Gdy mapowania są jawnie ustawione, brakujące mapowanie dla parametru wejściowego jest zwykle spowodowane błędem.|  
|`MissingMappingAction.Error`|<xref:System.SystemException> Jest generowany.|  
  
 Właściwość służy również do mapowania wartości parametrów danych wyjściowych lub wejściowych/wyjściowych z powrotem `DataSet`do. `SourceColumn` Wyjątek jest generowany, jeśli odwołuje się do nieistniejącej kolumny.  
  
 `SourceVersion` Właściwość klasy`Parameter` dostawcy danych .NET Framework `Original`określa, czy należy użyć wartości kolumny, `Current`lub `Proposed` . Ta funkcja jest często używana do uwzględniania oryginalnych wartości w klauzuli WHERE instrukcji UPDATE w celu sprawdzenia optymistycznych naruszeń współbieżności.  
  
> [!NOTE]
>  Jeśli wystąpi błąd podczas aktualizowania wiersza, zgłaszany jest wyjątek, a wykonanie aktualizacji nie jest kontynuowane. Aby kontynuować operację aktualizacji bez generowania wyjątków w przypadku napotkania błędu, należy ustawić <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> właściwość na `true` przed wywołaniem <xref:System.Data.Common.DbDataAdapter.Update%2A>. Możesz także odpowiedzieć na błędy w poszczególnych wierszach w ramach `RowUpdated` zdarzenia DataAdapter. Aby kontynuować operację aktualizacji bez generowania `RowUpdated` wyjątku w ramach zdarzenia, <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> ustaw właściwość <xref:System.Data.Common.RowUpdatedEventArgs> na <xref:System.Data.UpdateStatus.Continue>.  
  
   
  
## Examples  
 Poniższy przykład używa klasy <xref:System.Data.OleDb.OleDbDataAdapter>pochodnej, do <xref:System.Data.Common.DataAdapter.Update%2A> źródła danych. <xref:System.Data.OleDb.OleDbDataAdapter> W<xref:System.Data.DataSet>tym przykładzie przyjęto założenie, że utworzono i.  
  
 [!code-csharp[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataAdapter.IDataAdapter.Update Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataAdapter.IDataAdapter.Update Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.DBConcurrencyException">Próba wykonania instrukcji INSERT, UPDATE lub DELETE spowodowało utratę rekordów, których dotyczy.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
