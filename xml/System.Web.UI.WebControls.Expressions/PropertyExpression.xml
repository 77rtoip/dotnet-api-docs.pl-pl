<Type Name="PropertyExpression" FullName="System.Web.UI.WebControls.Expressions.PropertyExpression">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a74a7e2439e0dafdb0808ef059eed5544de742c2" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69402192" /></Metadata><TypeSignature Language="C#" Value="public class PropertyExpression : System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PropertyExpression extends System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.Expressions.PropertyExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class PropertyExpression&#xA;Inherits ParameterDataSourceExpression" />
  <TypeSignature Language="C++ CLI" Value="public ref class PropertyExpression : System::Web::UI::WebControls::Expressions::ParameterDataSourceExpression" />
  <TypeSignature Language="F#" Value="type PropertyExpression = class&#xA;    inherit ParameterDataSourceExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zapewnia sposób tworzenia <see langword="Where" /> klauzul z parametrów <see cref="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" /> w kolekcji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasa jest używana <xref:System.Web.UI.WebControls.QueryExtender> z kontrolką do filtrowania danych w polach danych. <xref:System.Web.UI.WebControls.Expressions.PropertyExpression> <xref:System.Web.UI.WebControls.Expressions.PropertyExpression> Klasa porównuje wartość właściwości kolumny z określoną wartością. Na przykład można porównać wartość logiczną z wartością w kolumnie wycofane produkty tabeli Products w bazie danych.  
  
 Klasa tworzy porównanie równości (= =) dla wartości poszczególnych parametrów i odpowiadającej jej właściwości <xref:System.Linq.IQueryable> obiektu danych. <xref:System.Web.UI.WebControls.Expressions.PropertyExpression> Jeśli podano więcej niż jeden parametr, parametry są łączone za pomocą operatora logicznego `AND` . Parametry, które zawierają wartość pustą, nie są dodawane `Where` do klauzuli.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak wyszukiwać tabelę Products bazy danych AdventureWorks dla produktów, których `MakeFlag` Właściwość (kolumna logiczna) jest ustawiona na. `true` Parametr wartość logiczna jest ustawiany w polu wyboru. Wynik zapytania zwracanego z <xref:System.Web.UI.WebControls.LinqDataSource> formantu jest wyświetlany <xref:System.Web.UI.WebControls.GridView> w kontrolce.  
  
 Ten przykład kodu jest częścią większego przykładu, który jest dostępny [w instruktażu: Filtrowanie danych na stronie sieci Web przy użyciu składni](https://msdn.microsoft.com/library/b305ae31-1a1b-4d07-a678-51457c17614f)deklaracyjnej.  
  
  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/b93e32b9-af41-4539-a009-6cbbe809c702">QueryExtender — informacje o formancie serwera sieci Web</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.PropertyExpression.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyExpression();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.WebControls.Expressions.PropertyExpression" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetQueryable">
      <MemberSignature Language="C#" Value="public override System.Linq.IQueryable GetQueryable (System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.IQueryable GetQueryable(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.PropertyExpression.GetQueryable(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetQueryable (source As IQueryable) As IQueryable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Linq::IQueryable ^ GetQueryable(System::Linq::IQueryable ^ source);" />
      <MemberSignature Language="F#" Value="override this.GetQueryable : System.Linq.IQueryable -&gt; System.Linq.IQueryable" Usage="propertyExpression.GetQueryable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" />
      </Parameters>
      <Docs>
        <param name="source">Obiekt, który ma być używany w zapytaniu.</param>
        <summary>Stosuje Obiekt przy użyciu określonego <see cref="T:System.Linq.IQueryable" /> obiektu źródła danych. <see cref="T:System.Web.UI.WebControls.Expressions.PropertyExpression" /></summary>
        <returns>Wystąpienie obiektu, do którego zastosowano wyrażenia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda łączy określony <xref:System.Linq.IQueryable> obiekt z wyrażeniami <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> w kolekcji przy użyciu operatora logicznego `AND` .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
