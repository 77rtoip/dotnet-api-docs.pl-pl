<Type Name="MethodExpression" FullName="System.Web.UI.WebControls.Expressions.MethodExpression">
  <Metadata><Meta Name="ms.openlocfilehash" Value="18f5a5cc687c76ffbdde27195ed9789b21921d2f" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69402253" /></Metadata><TypeSignature Language="C#" Value="public class MethodExpression : System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MethodExpression extends System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.Expressions.MethodExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class MethodExpression&#xA;Inherits ParameterDataSourceExpression" />
  <TypeSignature Language="C++ CLI" Value="public ref class MethodExpression : System::Web::UI::WebControls::Expressions::ParameterDataSourceExpression" />
  <TypeSignature Language="F#" Value="type MethodExpression = class&#xA;    inherit ParameterDataSourceExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Umożliwia określenie niestandardowego zapytania LINQ zdefiniowanego w metodzie.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.QueryExtender> Kontrolka obsługuje niestandardowe zapytania LINQ. Można zdefiniować niestandardowe zapytanie LINQ w metodzie i użyć <xref:System.Web.UI.WebControls.Expressions.MethodExpression> opcji filtru, aby wywołać zapytanie <xref:System.Web.UI.WebControls.QueryExtender> w kontrolce.  
  
 Metoda, która zawiera niestandardowe zapytanie LINQ, musi spełniać następujące kryteria:  
  
-   Metoda musi być statyczna (`Shared` w Visual Basic). Pierwszy parametr musi być <xref:System.Linq.IQueryable%601> obiektem lub. <xref:System.Collections.Generic.IEnumerable%601> Metoda może mieć więcej niż jeden parametr.  
  
-   Wartość zwracana nie może zmienić typu <xref:System.Linq.IQueryable%601> lub <xref:System.Collections.Generic.IEnumerable%601> , który jest wysyłany do zapytania.  
  
 <xref:System.Web.UI.WebControls.Expressions.MethodExpression> Wyszukuje metodę, która zawiera zapytanie w następującej kolejności:  
  
1.  Jeśli właściwość jest określona <xref:System.Web.UI.WebControls.QueryExtender> w kontrolce, <xref:System.Web.UI.WebControls.Expressions.MethodExpression> obiekt szuka metody w określonym typie. <xref:System.Web.UI.WebControls.Expressions.MethodExpression.TypeName%2A>  
  
2.  Jeśli źródło danych implementuje <xref:System.Web.DynamicData.IDynamicDataSource>metodę, metoda szuka metody dla typu kontekstu (<xref:System.Data.Linq.DataContext> lub <xref:System.Data.Objects.ObjectContext> obiektu).  
  
3.  Metoda poszukuje metody w kontrolce szablonu, w klasie podstawowej strony lub w kontrolce użytkownika.  
  
 Klasa jest taka <xref:System.Web.UI.WebControls.Expressions.CustomExpression> sama jak Klasa, z tą różnicą, że wyrażenie metody jest wykonywane w odpowiedzi na wywołanie metody, a wyrażenie niestandardowe jest wykonywane w odpowiedzi na zdarzenie. <xref:System.Web.UI.WebControls.Expressions.MethodExpression>  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak przeszukać pole ListPrice tabeli Products w bazie danych AdventureWorks dla produktów, które mają Cennik 400 lub więcej. Ten przykład pokazuje, jak utworzyć niestandardowe zapytanie LINQ w metodzie w kodzie strony i jak wywołać metodę w <xref:System.Web.UI.WebControls.QueryExtender> kontrolce.  
  
```vb  
Public Shared Function FilterStandardPrice(ByVal query As _  
        IQueryable(Of Product)) As IQueryable(Of Product)  
        Return From p In query _  
            Where p.ListPrice >= 400 _  
            Select p  
    End Function  
```  
  
```csharp  
public static IQueryable<Product>   
        FilterStandardPrice(IQueryable<Product> query)  
{  
        return from p in query  
                  where p.ListPrice >= 400  
                  select p;  
  
    }  
```  
  
 Poniższy przykład pokazuje, jak wywołać metodę na stronie.  
  
```  
<html>  
<head runat="server">  
  <title>Custom Filter</title>  
</head>  
<body>  
  <form id="form1" runat="server">  
    <asp:LinqDataSource ID="LinqDataSource1" runat="server"   
        ContextTypeName="AdventureworksDataContext" EntityTypeName=""   
        TableName="Products">  
    </asp:LinqDataSource>  
  
    <asp:QueryExtender ID="QueryExtender1" runat="server"   
        TargetControlID="LinqDataSource1">  
      <asp:MethodExpression MethodName="FilterStandardPrice" >  
      </asp:MethodExpression>  
    </asp:QueryExtender>  
  
    <asp:GridView ID="GridView1" runat="server"   
        DataSourceID="LinqDataSource1"   
        DataKeyNames="ProductID"   
    </asp:GridView>  
  </form>  
</body>  
</html>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MethodExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.MethodExpression.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MethodExpression();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.WebControls.Expressions.MethodExpression" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetQueryable">
      <MemberSignature Language="C#" Value="public override System.Linq.IQueryable GetQueryable (System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.IQueryable GetQueryable(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.MethodExpression.GetQueryable(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetQueryable (source As IQueryable) As IQueryable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Linq::IQueryable ^ GetQueryable(System::Linq::IQueryable ^ source);" />
      <MemberSignature Language="F#" Value="override this.GetQueryable : System.Linq.IQueryable -&gt; System.Linq.IQueryable" Usage="methodExpression.GetQueryable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" />
      </Parameters>
      <Docs>
        <param name="source">Kontrolka źródła danych do użycia.</param>
        <summary>Rozpoznaje wyrażenie przy użyciu określonego <see cref="T:System.Linq.IQueryable" /> obiektu.</summary>
        <returns>Wystąpienie <see cref="T:System.Linq.IQueryable" /> obiektu, które zostało użyte do rozpoznania wyrażenia.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Kontrola źródła danych <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Nie znaleziono metody.  
  
—lub— 
Metoda nie jest statyczna.  
  
—lub— 
Typ pożądanego <see langword="IQueryable&lt;T&gt;" /> obiektu został zmieniony.</exception>
      </Docs>
    </Member>
    <Member MemberName="IgnoreIfNotFound">
      <MemberSignature Language="C#" Value="public bool IgnoreIfNotFound { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreIfNotFound" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Expressions.MethodExpression.IgnoreIfNotFound" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreIfNotFound As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreIfNotFound { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreIfNotFound : bool with get, set" Usage="System.Web.UI.WebControls.Expressions.MethodExpression.IgnoreIfNotFound" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy wyrażenie ma być ignorowane.</summary>
        <value><see langword="true" />Jeśli wyrażenie jest ignorowane; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Expressions.MethodExpression> Obiekt wyszukuje metodę, która zawiera zapytanie w określonych lokalizacjach i wyszukuje w określonej kolejności. Możesz ustawić tę właściwość `false` na, aby zgłosić wyjątek, <xref:System.Web.UI.WebControls.Expressions.CustomExpression> Jeśli obiekt nie odnajdzie metody zawierającej LINQ.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MethodName">
      <MemberSignature Language="C#" Value="public string MethodName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MethodName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Expressions.MethodExpression.MethodName" />
      <MemberSignature Language="VB.NET" Value="Public Property MethodName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MethodName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MethodName : string with get, set" Usage="System.Web.UI.WebControls.Expressions.MethodExpression.MethodName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę metody, która zawiera niestandardowe zapytanie LINQ.</summary>
        <value>Nazwa metody zawierającej niestandardowe zapytanie LINQ.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Expressions.MethodExpression> Obiekt umożliwia wywołanie niestandardowej kwerendy LINQ zdefiniowanej w metodzie. Należy określić metodę w <xref:System.Web.UI.WebControls.QueryExtender> kontrolce na stronie.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, `FilterStandardPrice` jak określić metodę <xref:System.Web.UI.WebControls.QueryExtender> w kontrolce. Niestandardowe zapytanie LINQ jest zdefiniowane w `FilterStandardPrice` metodzie.  
  
```  
<asp:QueryExtender ID="QueryExtender1" runat="server"   
    TargetControlID="LinqDataSource1">  
  <asp:MethodExpression MethodName="FilterStandardPrice">  
  </asp:MethodExpression>  
  </asp:QueryExtender>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public string TypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Expressions.MethodExpression.TypeName" />
      <MemberSignature Language="VB.NET" Value="Public Property TypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TypeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TypeName : string with get, set" Usage="System.Web.UI.WebControls.Expressions.MethodExpression.TypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia klasę, której metoda zawiera zapytanie niestandardowe.</summary>
        <value>Klasa, do której należy ta metoda.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasa umożliwia określenie niestandardowego wyrażenia dla źródła danych <xref:System.Web.UI.WebControls.QueryExtender> w formancie. <xref:System.Web.UI.WebControls.Expressions.MethodExpression> Możesz użyć <xref:System.Web.UI.WebControls.Expressions.MethodExpression.TypeName%2A> właściwości, aby określić klasę, do której należy Metoda.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
