<Type Name="CustomExpression" FullName="System.Web.UI.WebControls.Expressions.CustomExpression">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3a285c0372bbcfd060ad840de077b41f230b12de" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69402305" /></Metadata><TypeSignature Language="C#" Value="public class CustomExpression : System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CustomExpression extends System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.Expressions.CustomExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class CustomExpression&#xA;Inherits ParameterDataSourceExpression" />
  <TypeSignature Language="C++ CLI" Value="public ref class CustomExpression : System::Web::UI::WebControls::Expressions::ParameterDataSourceExpression" />
  <TypeSignature Language="F#" Value="type CustomExpression = class&#xA;    inherit ParameterDataSourceExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true, "Parameters")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Umożliwia określenie niestandardowego zapytania LINQ, które jest wywoływane w odpowiedzi na zdarzenie.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasa jest używana <xref:System.Web.UI.WebControls.QueryExtender> z kontrolką. <xref:System.Web.UI.WebControls.Expressions.CustomExpression> <xref:System.Web.UI.WebControls.QueryExtender> Kontrolka obsługuje różne opcje, których można użyć do filtrowania danych. <xref:System.Web.UI.WebControls.QueryExtender> Kontrolka obsługuje filtry, które umożliwiają wyszukiwanie ciągów, wyszukiwanie wartości między określonym zakresem, porównywanie wartości właściwości w tabeli z określoną wartością i sortowanie danych. Te opcje są dostępne jako wyrażenia LINQ w <xref:System.Web.UI.WebControls.QueryExtender> kontrolce. Możesz użyć tych wyrażeń filtrów lub podać wyrażenie niestandardowe, którego można użyć w <xref:System.Web.UI.WebControls.QueryExtender> formancie. <xref:System.Web.UI.WebControls.Expressions.CustomExpression> Klasa umożliwia określenie niestandardowego wyrażenia w aplikacji i wywołanie go w procedurze obsługi zdarzeń.  
  
> [!NOTE]
>  Można podać niestandardowe zapytanie, które jest wywoływane przez metodę zamiast procedury obsługi zdarzeń przy użyciu <xref:System.Web.UI.WebControls.Expressions.MethodExpression> klasy.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, <xref:System.Web.UI.WebControls.Expressions.CustomExpression> jak utworzyć obiekt, który jest używany <xref:System.Web.UI.WebControls.QueryExtender> przez formant. Wyrażenie niestandardowe wywołuje `FilterProducts` metodę, która zawiera niestandardowe wyrażenie LINQ. Wynik operacji filtrowania jest wyświetlany w <xref:System.Web.UI.WebControls.GridView> kontrolce.  
  
  
  
 Poniższy przykład pokazuje procedurę obsługi zdarzeń, która zawiera niestandardowe zapytanie LINQ. Wyrażenie filtruje tabelę produktów w bazie danych AdventureWorks i wyświetla produkty z cennikiem większym niż lub równym $3 500,00.  
  
 [!code-csharp[QueryExtenderCustomFiltering#2](~/samples/snippets/csharp/VS_Snippets_WebNet/queryextendercustomfiltering/cs/queryextendercustomfiltering.cs#2)]
 [!code-vb[QueryExtenderCustomFiltering#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/queryextendercustomfiltering/vb/queryextendercustomfiltering.vb#2)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/b93e32b9-af41-4539-a009-6cbbe809c702">QueryExtender — informacje o formancie serwera sieci Web</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CustomExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.CustomExpression.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CustomExpression();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.WebControls.Expressions.CustomExpression" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetQueryable">
      <MemberSignature Language="C#" Value="public override System.Linq.IQueryable GetQueryable (System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.IQueryable GetQueryable(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.CustomExpression.GetQueryable(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetQueryable (source As IQueryable) As IQueryable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Linq::IQueryable ^ GetQueryable(System::Linq::IQueryable ^ source);" />
      <MemberSignature Language="F#" Value="override this.GetQueryable : System.Linq.IQueryable -&gt; System.Linq.IQueryable" Usage="customExpression.GetQueryable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" />
      </Parameters>
      <Docs>
        <param name="source">Źródło danych używane przez <see cref="T:System.Linq.IQueryable" /> obiekt.</param>
        <summary>Zapewnia dostęp do zmodyfikowanego <see cref="T:System.Linq.IQueryable" /> obiektu używanego przez źródło danych.</summary>
        <returns>Wystąpienie zmodyfikowanego źródła danych.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Querying">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.Expressions.CustomExpressionEventArgs&gt; Querying;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.Expressions.CustomExpressionEventArgs&gt; Querying" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.Expressions.CustomExpression.Querying" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Querying As EventHandler(Of CustomExpressionEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::Expressions::CustomExpressionEventArgs ^&gt; ^ Querying;" />
      <MemberSignature Language="F#" Value="member this.Querying : EventHandler&lt;System.Web.UI.WebControls.Expressions.CustomExpressionEventArgs&gt; " Usage="member this.Querying : System.EventHandler&lt;System.Web.UI.WebControls.Expressions.CustomExpressionEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.Expressions.CustomExpressionEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, <see cref="T:System.Linq.IQueryable" /> gdy wartość źródła danych jest ustawiona.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Expressions.CustomExpression> Obiekt umożliwia określenie niestandardowego wyrażenia w programie obsługi zdarzeń.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
