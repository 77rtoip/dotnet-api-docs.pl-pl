<Type Name="Timer" FullName="System.Timers.Timer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d9b8ff2e88998ea911ef3de2729af2df406ec0ee" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58702541" /></Metadata><TypeSignature Language="C#" Value="public class Timer : System.ComponentModel.Component, System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Timer extends System.ComponentModel.Component implements class System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="DocId" Value="T:System.Timers.Timer" />
  <TypeSignature Language="VB.NET" Value="Public Class Timer&#xA;Inherits Component&#xA;Implements ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer : System::ComponentModel::Component, System::ComponentModel::ISupportInitialize" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit Component&#xA;    interface ISupportInitialize" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-3.0;netstandard-2.1">
      <AttributeName>System.ComponentModel.DefaultEvent("Elapsed")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-3.0;netstandard-2.1">
      <AttributeName>System.ComponentModel.DefaultProperty("Interval")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Generuje zdarzenie po Ustaw interwał, z opcją do generowania zdarzeń cyklicznych.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Timers.Timer> Składnik to czasomierza na serwerze, który wywołuje <xref:System.Timers.Timer.Elapsed> zdarzenie w aplikacji po liczbę milisekund w <xref:System.Timers.Timer.Interval%2A> upłynął właściwości. Można skonfigurować <xref:System.Timers.Timer> obiektu, aby zgłosić zdarzenie, tylko raz lub wielokrotnie przy użyciu <xref:System.Timers.Timer.AutoReset%2A> właściwości. Zazwyczaj <xref:System.Timers.Timer> obiekt nie został zadeklarowany na poziomie klasy, tak aby pozostaje w zakresie, tak długo, jak jest to konieczne. Może następnie obsłużyć jego <xref:System.Timers.Timer.Elapsed> zdarzenia w celu zapewnienia zwykłego przetwarzania. Załóżmy na przykład, posiadasz serwera o krytycznym znaczeniu, które muszą być przechowywane systemem 24 godziny na dobę, 7 dni w tygodniu. Można utworzyć usługę, która używa <xref:System.Timers.Timer> obiekt, aby okresowo Sprawdź serwer i upewnij się, że system działa. Jeśli system nie odpowiada, usługa może spróbować ponownie uruchomić serwer lub Powiadom administratora.  
  
> [!IMPORTANT]
> <xref:System.Timers.Timer> Klasy nie jest dostępna dla wszystkich implementacje platformy .NET i wersji, takich jak .NET Standard w wersji 1.6 i niższych wersji.
> W takich przypadkach można użyć <xref:System.Threading.Timer?displayProperty=nameWithType> klasy zamiast tego.
  
 Ten typ implementuje <xref:System.IDisposable> interfejsu. Po zakończeniu przy użyciu typu bezpośrednio lub pośrednio należy usunąć z niej. Do usuwania tego typu, należy wywołać jej <xref:System.IDisposable.Dispose%2A> method in Class metoda `try` / `catch` bloku. Aby usunąć ją pośrednio, użyj konstrukcją języka pierwszej klasy takiej jak `using` (w języku C#) lub `Using` (w języku Visual Basic). Aby uzyskać więcej informacji, zobacz sekcję "Przy użyciu obiektu który implementuje interfejs IDisposable" w <xref:System.IDisposable> interfejsu.  
  
 Na serwerze <xref:System.Timers.Timer?displayProperty=nameWithType> klasy jest przeznaczony do użytku z wątków roboczych w środowisku wielowątkowym. Czasomierze serwera można poruszać się między wątków do obsługi wpuszczonych <xref:System.Timers.Timer.Elapsed> zdarzeń, wynikowa dokładność więcej niż Windows czasomierzy w podnoszonego zdarzenia w czasie.  
  
 <xref:System.Timers.Timer?displayProperty=nameWithType> Składnik wywołuje <xref:System.Timers.Timer.Elapsed> , oparte na zdarzeniach na wartości (w milisekundach) <xref:System.Timers.Timer.Interval%2A> właściwości. Może obsługiwać to zdarzenie w celu wykonywania przetwarzania, których potrzebujesz. Na przykład załóżmy, że masz aplikację sprzedaży online, która stale wysyła zamówień sprzedaży z bazą danych. Usługa, która kompiluje instrukcje dotyczące wysyłania działa w zadaniu wsadowym zamówienia, a nie indywidualnie przetwarzania każdego zamówienia. Można użyć <xref:System.Timers.Timer> można uruchomić wsadowo co 30 minut.  
  
> [!IMPORTANT]
>  Klasa System.Timers.Timer ma taką samą rozdzielczość zegara systemowego. Oznacza to, że <xref:System.Timers.Timer.Elapsed> zdarzenia będą uruchamiane w odstępach czasu zdefiniowanych przez rozdzielczość zegara systemowego, jeśli <xref:System.Timers.Timer.Interval%2A> właściwość jest mniejsza od rozdzielczości zegara systemowego. Aby uzyskać więcej informacji, zobacz <xref:System.Timers.Timer.Interval%2A> właściwości.  
  
 Gdy <xref:System.Timers.Timer.AutoReset%2A> jest ustawiona na `false`, <xref:System.Timers.Timer?displayProperty=nameWithType> obiektu zgłasza <xref:System.Timers.Timer.Elapsed> zdarzeń tylko raz, po pierwszym <xref:System.Timers.Timer.Interval%2A> upłynął. Aby zachować wywoływanie <xref:System.Timers.Timer.Elapsed> zdarzeń regularnie w odstępach czasu zdefiniowanych przez <xref:System.Timers.Timer.Interval%2A>ustaw <xref:System.Timers.Timer.AutoReset%2A> do `true`, która jest wartością domyślną.  
  
 <xref:System.Timers.Timer> Składnika przechwytuje i pomija wszystkie wyjątki generowane przez programy obsługi zdarzeń dla <xref:System.Timers.Timer.Elapsed> zdarzeń. Jest to zachowanie może ulec zmianie w przyszłych wersjach programu .NET Framework. Należy jednak pamiętać, że nie jest to prawdą programu obsługi zdarzeń, które są wykonywane asynchronicznie i obejmują `await` — operator (w języku C#) lub `Await` operatora (Visual Basic). Wyjątki zgłaszane w tych programów obsługi zdarzeń jest propagowany z powrotem do wywołanego wątku, tak jak pokazano w poniższym przykładzie. Aby uzyskać więcej informacji na temat wyjątki zgłaszane w metodach asynchronicznych, zobacz [wyjątków](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).  
  
 [!code-csharp[System.Timers.Timer#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/AsyncHandlerEx1.cs#3)]
 [!code-vb[System.Timers.Timer#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/AsyncHandlerEx1.vb#3)]  
  
 Jeśli <xref:System.Timers.Timer.SynchronizingObject%2A> właściwość `null`, <xref:System.Timers.Timer.Elapsed> zdarzenie jest zgłaszane w <xref:System.Threading.ThreadPool> wątku. Jeśli przetwarzanie <xref:System.Timers.Timer.Elapsed> zdarzeń, jest dostępna więcej niż <xref:System.Timers.Timer.Interval%2A>, zdarzenie może zostać wywołane ponownie na innym <xref:System.Threading.ThreadPool> wątku. W takiej sytuacji program obsługi zdarzeń powinny być współużytkowane.  
  
> [!NOTE]
>  Metoda obsługi zdarzeń mogą być uruchamiane w jednym wątku, w tym samym czasie, który wywołuje inny wątek <xref:System.Timers.Timer.Stop%2A> metody lub zestawy <xref:System.Timers.Timer.Enabled%2A> właściwość `false`. Może to spowodować <xref:System.Timers.Timer.Elapsed> zdarzenie jest wywoływane po Czasomierz został zatrzymany. Przykład kodu dla <xref:System.Timers.Timer.Stop%2A> metoda pokazano jeden ze sposobów, aby uniknąć tej sytuacji wyścigu.  
  
 Nawet jeśli <xref:System.Timers.Timer.SynchronizingObject%2A> nie jest `null`, <xref:System.Timers.Timer.Elapsed> zdarzenia mogą wystąpić po wywołaniu <xref:System.Timers.Timer.Dispose%2A> lub <xref:System.Timers.Timer.Stop%2A> metody lub po ustawieniu <xref:System.Timers.Timer.Enabled%2A> właściwości `false`, ponieważ sygnał do podniesienia <xref:System.Timers.Timer.Elapsed> zdarzenia jest zawsze umieszczany w kolejce do wykonania w wątku puli wątków. Jednym ze sposobów, aby rozwiązać sytuacja wyścigu jest ustawiona flaga, która informuje program obsługi zdarzeń dla <xref:System.Timers.Timer.Elapsed> zdarzenie, aby zignorować kolejnych zdarzeń.  
  
 Jeśli używasz <xref:System.Timers.Timer?displayProperty=nameWithType> klasy za pomocą elementu interfejsu użytkownika, takie jak formularza lub formantu, bez pogarszania czasomierza na ten element interfejsu użytkownika, przypisz formularza lub formantu, który zawiera <xref:System.Timers.Timer> do <xref:System.Timers.Timer.SynchronizingObject%2A> właściwość tak, aby zdarzenia przekazywane do wątku interfejsu użytkownika.  
  
 Aby uzyskać listę domyślnych wartości właściwości wystąpienia <xref:System.Timers.Timer>, zobacz <xref:System.Timers.Timer.%23ctor%2A> konstruktora.  
  
> [!TIP]
>  Należy pamiętać, że .NET zawiera cztery klasy o nazwie `Timer`, każdy z której oferuje różne funkcje:  
>   
> - <xref:System.Timers.Timer?displayProperty=nameWithType> (w tym temacie): uruchamia zdarzenie w regularnych odstępach czasu. Klasa jest przeznaczone do użytku jako na serwerze lub składnik usługi w środowisku wielowątkowym. go nie ma interfejsu użytkownika i nie jest widoczny w czasie wykonywania.  
> - <xref:System.Threading.Timer?displayProperty=nameWithType>: wykonuje metodę pojedynczego wywołania zwrotnego w wątku z puli wątków w regularnych odstępach czasu. Metoda wywołania zwrotnego jest określona, gdy czasomierz zostanie uruchomiony i nie można zmienić. Podobnie jak <xref:System.Timers.Timer?displayProperty=nameWithType> klasy, ta klasa jest przeznaczona do użytku jako składnik serwera lub usługi w środowisku wielowątkowym; nie ma interfejsu użytkownika, a nie jest widoczny w czasie wykonywania.  
> - <xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (Tylko program .NET framework): składnik Windows Forms, który uruchamia zdarzenie w regularnych odstępach czasu. Składnik nie ma interfejsu użytkownika i jest przeznaczony do użytku w środowisku apartamentem.  
> - <xref:System.Web.UI.Timer?displayProperty=nameWithType> (Tylko program .NET framework): składnik ASP.NET, który wykonuje ogłaszania zwrotnego asynchronicznego lub synchronicznego strony sieci web w regularnych odstępach czasu.  

## Examples  
 Poniższy przykład tworzy wystąpienie `System.Timers.Timer` obiektu, który jest uruchamiany jego <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> zdarzeń co 2 sekundy (2000 MS), ustawia program obsługi zdarzeń dla zdarzenia, a następnie uruchamia czasomierz. Obsługa zdarzeń wyświetla wartość <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> właściwość każdorazowo, jest zgłaszany.  
  
 [!code-csharp[System.Timers.Timer#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer2a.cs#2)]
 [!code-vb[System.Timers.Timer#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer2a.vb#2)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Wszystkie publiczne <see langword="static" /> elementy członkowskie tego typu są bezpieczne dla wątków. Wystąpienia elementów członkowskich nie dają gwarancji bezpieczeństwa wątków.</threadsafe>
    <altmember cref="P:System.Timers.Timer.AutoReset" />
    <altmember cref="P:System.Timers.Timer.Interval" />
    <altmember cref="E:System.Timers.Timer.Elapsed" />
    <altmember cref="M:System.Timers.Timer.#ctor" />
    <altmember cref="T:System.Threading.Timer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Timers.Timer" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Timers.Timer" /> klasy i ustawia wszystkie właściwości do wartości początkowych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W poniższej tabeli przedstawiono początkowe wartości właściwości wystąpienia <xref:System.Timers.Timer>.  
  
|Właściwość|Wartość początkowa|  
|--------------|-------------------|  
|<xref:System.Timers.Timer.AutoReset%2A>|`true`|  
|<xref:System.Timers.Timer.Enabled%2A>|`false`|  
|<xref:System.Timers.Timer.Interval%2A>|100 MS|  
|<xref:System.Timers.Timer.SynchronizingObject%2A>|Odwołanie o wartości null (`Nothing` w języku Visual Basic).|  
  
   
  
## Examples  
 Poniższy przykład tworzy wystąpienie <xref:System.Timers.Timer> obiektu, który jest uruchamiany jego <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> zdarzeń co 2 sekundy (2000 MS), ustawia program obsługi zdarzeń dla zdarzenia, a następnie uruchamia czasomierz. Obsługa zdarzeń wyświetla wartość <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> właściwość każdorazowo, jest zgłaszany.  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.SynchronizingObject" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (double interval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 interval) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.#ctor(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (interval As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(double interval);" />
      <MemberSignature Language="F#" Value="new System.Timers.Timer : double -&gt; System.Timers.Timer" Usage="new System.Timers.Timer interval" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="interval" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="interval">Czas w milisekundach między zdarzeniami. Wartość musi być większa od zera i mniejszy niż lub równe <see cref="F:System.Int32.MaxValue" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Timers.Timer" /> klasy i zestawy <see cref="P:System.Timers.Timer.Interval" /> właściwość określoną liczbę milisekund.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor ustawia <xref:System.Timers.Timer.Interval%2A> właściwości nowego wystąpienia czasomierza, ale nie uwzględnia czasomierza.  
  
   
  
## Examples  
 Poniższy przykład tworzy wystąpienie <xref:System.Timers.Timer> obiektu, który jest uruchamiany jego <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> zdarzeń co 2 sekundy (2000 MS), ustawia program obsługi zdarzeń dla zdarzenia, a następnie uruchamia czasomierz. Obsługa zdarzeń wyświetla wartość <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> właściwość każdorazowo, jest zgłaszany.  
  
 [!code-csharp[System.Timers.Timer#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/AsyncHandlerEx1.cs#3)]
 [!code-vb[System.Timers.Timer#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/AsyncHandlerEx1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Wartość <paramref name="interval" /> parametr jest mniejsza lub równa zero, lub większa od <see cref="F:System.Int32.MaxValue" />.</exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="AutoReset">
      <MemberSignature Language="C#" Value="public bool AutoReset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoReset" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.AutoReset" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoReset As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoReset { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoReset : bool with get, set" Usage="System.Timers.Timer.AutoReset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("Indicates whether the timer will be restarted when it is enabled.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Timers.TimersDescription("TimerAutoReset")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość logiczna wskazującą czy <see cref="T:System.Timers.Timer" /> powinny wywoływać <see cref="E:System.Timers.Timer.Elapsed" /> zdarzeń tylko raz (<see langword="false" />) lub wielokrotnie (<see langword="true" />).</summary>
        <value><see langword="true" /> Jeśli <see cref="T:System.Timers.Timer" /> powinny wywoływać <see cref="E:System.Timers.Timer.Elapsed" /> zdarzeń każdorazowo czasu; <see langword="false" /> Jeśli go, powinny wywoływać <see cref="E:System.Timers.Timer.Elapsed" /> zdarzeń tylko raz, po raz pierwszy czasu. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Timers.Timer> jest już włączona po <xref:System.Timers.Timer.Start%2A> metoda jest wywoływana, interwał zostanie zresetowana. Jeśli <xref:System.Timers.Timer.AutoReset%2A> jest `false`, <xref:System.Timers.Timer.Start%2A> można wywołać metody, aby ponownie uruchomić liczba.  
  
 Interwał resetowania wpływa na kiedy <xref:System.Timers.Timer.Elapsed> zdarzenie jest wywoływane. Na przykład, jeśli ustawić interwał wynoszący 5 sekund, a następnie ustaw <xref:System.Timers.Timer.Enabled%2A> właściwości `true`, licznik rozpoczyna się od czasu <xref:System.Timers.Timer.Enabled%2A> jest ustawiona. Jeśli zresetujesz interwał to 10 sekund po 3 sekundach, liczba <xref:System.Timers.Timer.Elapsed> zdarzenie jest wywoływane po raz pierwszy 13 sekundach, po <xref:System.Timers.Timer.Enabled%2A> właściwość `true`.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Timers.Timer> którego <xref:System.Timers.Timer.Elapsed> generowane zdarzenie po 1,5 s. Jego obsługa zdarzeń wyświetla "Hello World!" w konsoli.  
  
 [!code-cpp[Classic Timer.Timer1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer.Timer1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/CS/source.cs#1)]
 [!code-vb[Classic Timer.Timer1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberSignature Language="F#" Value="abstract member BeginInit : unit -&gt; unit&#xA;override this.BeginInit : unit -&gt; unit" Usage="timer.BeginInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rozpoczyna się zainicjowanie środowiska wykonawczego <see cref="T:System.Timers.Timer" /> używanego w formularzu lub przez inny składnik.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] Projekt środowiska korzystania z tej metody można uruchomić inicjowania składnika, który jest używany w formularzu lub przez inny składnik. <xref:System.Timers.Timer.EndInit%2A> Metoda kończy się inicjowanie. Za pomocą <xref:System.Timers.Timer.BeginInit%2A> i <xref:System.Timers.Timer.EndInit%2A> metody zapobiega używana przed pełnym zainicjowaniem formantu.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.EndInit" />
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="timer.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia zasoby używane przez <see cref="T:System.Timers.Timer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Timers.Timer.Close%2A> Metoda z kolei wywołuje `Dispose` metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="timer.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><see langword="true" /> Aby zwolnić zasoby zarządzane i niezarządzane; <see langword="false" /> aby zwolnić tylko niezarządzane zasoby.</param>
        <summary>Zwalnia wszelkie zasoby używane przez bieżące <see cref="T:System.Timers.Timer" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Elapsed">
      <MemberSignature Language="C#" Value="public event System.Timers.ElapsedEventHandler Elapsed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Timers.ElapsedEventHandler Elapsed" />
      <MemberSignature Language="DocId" Value="E:System.Timers.Timer.Elapsed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Elapsed As ElapsedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Timers::ElapsedEventHandler ^ Elapsed;" />
      <MemberSignature Language="F#" Value="member this.Elapsed : System.Timers.ElapsedEventHandler " Usage="member this.Elapsed : System.Timers.ElapsedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("Occurs when the Interval has elapsed.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Timers.TimersDescription("TimerIntervalElapsed")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Timers.ElapsedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy on upłynie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Timers.Timer.Elapsed> Zdarzenie jest zgłaszane w przypadku <xref:System.Timers.Timer.Enabled%2A> właściwość `true` i przedział czasu (w milisekundach), zdefiniowane przez <xref:System.Timers.Timer.Interval%2A> upłynie właściwości. Jeśli <xref:System.Timers.Timer.AutoReset%2A> właściwość `true`, zdarzenie jest wywoływane wielokrotnie w odstępach czasu zdefiniowanych przez <xref:System.Timers.Timer.Interval%2A> właściwości; w przeciwnym razie zdarzenie jest zgłaszane tylko raz, po raz pierwszy <xref:System.Timers.Timer.Interval%2A> wartość upłynie.  
  
 Jeśli <xref:System.Timers.Timer.Interval%2A> jest ustawiany po <xref:System.Timers.Timer> została uruchomiona, zostanie zresetowany. Na przykład, jeśli ustawić interwał wynoszący 5 sekund, a następnie ustaw <xref:System.Timers.Timer.Enabled%2A> do `true`, licznik rozpoczyna się od czasu <xref:System.Timers.Timer.Enabled%2A> jest ustawiona. Jeśli zresetujesz interwał to 10 sekund po 3 sekundach, liczba <xref:System.Timers.Timer.Elapsed> zdarzenie jest wywoływane po raz pierwszy 13 sekundach, po <xref:System.Timers.Timer.Enabled%2A> została ustawiona na `true`.  
  
 Jeśli <xref:System.Timers.Timer.SynchronizingObject%2A> właściwość `null`, <xref:System.Timers.Timer.Elapsed> zdarzenie jest zgłaszane w <xref:System.Threading.ThreadPool> wątku. Jeśli przetwarzanie <xref:System.Timers.Timer.Elapsed> zdarzeń, jest dostępna więcej niż <xref:System.Timers.Timer.Interval%2A>, zdarzenie może zostać wywołane ponownie na innym <xref:System.Threading.ThreadPool> wątku. W takiej sytuacji program obsługi zdarzeń powinny być współużytkowane.  
  
> [!NOTE]
>  Metoda obsługi zdarzeń mogą być uruchamiane w jednym wątku, w tym samym czasie, który wywołuje inny wątek <xref:System.Timers.Timer.Stop%2A> metody lub zestawy <xref:System.Timers.Timer.Enabled%2A> właściwość `false`. Może to spowodować <xref:System.Timers.Timer.Elapsed> zdarzenie jest wywoływane po Czasomierz został zatrzymany. Przykład kodu dla <xref:System.Timers.Timer.Stop%2A> metoda pokazano jeden ze sposobów, aby uniknąć tej sytuacji wyścigu.  
  
 Nawet jeśli <xref:System.Timers.Timer.SynchronizingObject%2A> nie jest `null`, <xref:System.Timers.Timer.Elapsed> zdarzenia mogą wystąpić po wywołaniu <xref:System.Timers.Timer.Dispose%2A> lub <xref:System.Timers.Timer.Stop%2A> metody lub po ustawieniu <xref:System.Timers.Timer.Enabled%2A> właściwości `false`, ponieważ sygnał do podniesienia <xref:System.Timers.Timer.Elapsed> zdarzenia jest zawsze umieszczany w kolejce do wykonania w wątku puli wątków. Jednym ze sposobów, aby rozwiązać sytuacja wyścigu jest ustawiona flaga, która informuje program obsługi zdarzeń dla <xref:System.Timers.Timer.Elapsed> zdarzenie, aby zignorować kolejnych zdarzeń.  
  
 <xref:System.Timers.Timer> Składnika przechwytuje i pomija wszystkie wyjątki generowane przez programy obsługi zdarzeń dla <xref:System.Timers.Timer.Elapsed> zdarzeń. Jest to zachowanie może ulec zmianie w przyszłych wersjach programu .NET Framework.  
  
   
  
## Examples  
 Poniższy przykład tworzy wystąpienie <xref:System.Timers.Timer> obiektu, który jest uruchamiany jego <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> zdarzeń co 2 sekundy (2000 MS), ustawia program obsługi zdarzeń dla zdarzenia, a następnie uruchamia czasomierz. Obsługa zdarzeń wyświetla wartość <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> właściwość każdorazowo, jest zgłaszany.  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
        <altmember cref="T:System.Timers.ElapsedEventArgs" />
        <altmember cref="T:System.Timers.ElapsedEventHandler" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Timers.Timer.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("Indicates whether the timer is enabled to fire events at a defined interval.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Timers.TimersDescription("TimerEnabled")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą czy <see cref="T:System.Timers.Timer" /> powinny wywoływać <see cref="E:System.Timers.Timer.Elapsed" /> zdarzeń.</summary>
        <value><see langword="true" /> Jeśli <see cref="T:System.Timers.Timer" /> powinny wywoływać <see cref="E:System.Timers.Timer.Elapsed" /> zdarzenia; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ustawienie <xref:System.Timers.Timer.Enabled%2A> do `true` jest taka sama jak wywołanie <xref:System.Timers.Timer.Start%2A>, podczas gdy ustawienie <xref:System.Timers.Timer.Enabled%2A> do `false` jest taka sama jak wywołania <xref:System.Timers.Timer.Stop%2A>.  
  
> [!NOTE]
>  Sygnał do pozyskania <xref:System.Timers.Timer.Elapsed> zdarzeń jest zawsze w kolejce do wykonania na <xref:System.Threading.ThreadPool> wątku. Może to spowodować <xref:System.Timers.Timer.Elapsed> zdarzenie jest wywoływane po <xref:System.Timers.Timer.Enabled%2A> właściwość jest ustawiona na `false`. Przykład kodu dla <xref:System.Timers.Timer.Stop%2A> metoda pokazano jeden ze sposobów obejścia tego wyścigu.  
  
 Jeśli <xref:System.Timers.Timer.Enabled%2A> jest ustawiona na `true` i <xref:System.Timers.Timer.AutoReset%2A> ustawiono `false`, <xref:System.Timers.Timer> zgłasza <xref:System.Timers.Timer.Elapsed> upływa zdarzeń tylko raz, po raz pierwszy interwał.  
  
 Jeśli ustawiono interwał po <xref:System.Timers.Timer> została uruchomiona, zostanie zresetowany. Na przykład, jeśli ustawić interwał wynoszący 5 sekund, a następnie ustaw <xref:System.Timers.Timer.Enabled%2A> właściwości `true`, licznik rozpoczyna się od czasu <xref:System.Timers.Timer.Enabled%2A> jest ustawiona. Jeśli zresetujesz interwał to 10 sekund po 3 sekundach, liczba <xref:System.Timers.Timer.Elapsed> zdarzenie jest wywoływane po raz pierwszy 13 sekundach, po <xref:System.Timers.Timer.Enabled%2A> została ustawiona na `true`.  
  
> [!NOTE]
>  Ustaw niektórych projektantów wizualnych, takich jak w programie Microsoft Visual Studio <xref:System.Timers.Timer.Enabled%2A> właściwości `true` podczas wstawiania nowego <xref:System.Timers.Timer>.  
  
   
  
## Examples  
 Poniższy przykład tworzy wystąpienie <xref:System.Timers.Timer> obiektu, który jest uruchamiany jego <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> zdarzeń co 2 sekundy (2000 MS), ustawia program obsługi zdarzeń dla zdarzenia, a następnie uruchamia czasomierz. Obsługa zdarzeń wyświetla wartość <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> właściwość każdorazowo, jest zgłaszany.  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Nie można ustawić tę właściwość, ponieważ Czasomierz został usunięty.</exception>
        <exception cref="T:System.ArgumentException"><see cref="P:System.Timers.Timer.Interval" /> Właściwość została ustawiona na wartość większą niż <see cref="F:System.Int32.MaxValue" /> przed włączeniem czasomierza.</exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="M:System.Timers.Timer.Stop" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberSignature Language="F#" Value="abstract member EndInit : unit -&gt; unit&#xA;override this.EndInit : unit -&gt; unit" Usage="timer.EndInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Kończy się zainicjowanie środowiska wykonawczego <see cref="T:System.Timers.Timer" /> używanego w formularzu lub przez inny składnik.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] Projekt środowiska korzystania z tej metody do zakończenia inicjowania składnika, który jest używany w formularzu lub przez inny składnik. <xref:System.Timers.Timer.BeginInit%2A> Metoda uruchamia inicjowania. Za pomocą <xref:System.Timers.Timer.BeginInit%2A> i <xref:System.Timers.Timer.EndInit%2A> metody zapobiega używana przed pełnym zainicjowaniem formantu.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Timers.Timer.BeginInit" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public double Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Interval" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Interval { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Interval : double with get, set" Usage="System.Timers.Timer.Interval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DefaultValue(100)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.SettingsBindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("The number of milliseconds between timer events.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.RecommendedAsConfigurable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Timers.TimersDescription("TimerInterval")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia interwał wyrażony w milisekundach, od którego należy podnieść <see cref="E:System.Timers.Timer.Elapsed" /> zdarzeń.</summary>
        <value>Czas w milisekundach między <see cref="E:System.Timers.Timer.Elapsed" /> zdarzenia. Wartość musi być większa od zera i mniejszy niż lub równe <see cref="F:System.Int32.MaxValue" />. Wartość domyślna to 100 milisekund.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć <xref:System.Timers.Timer.Interval%2A> własność, aby określić częstotliwość, z jaką <xref:System.Timers.Timer.Elapsed> jest wyzwalane zdarzenie. Ponieważ <xref:System.Timers.Timer> klasy zależy od zegara systemowego, ma taką samą rozdzielczość zegara systemowego. Oznacza to, że <xref:System.Timers.Timer.Elapsed> zdarzenia będą uruchamiane w odstępach czasu zdefiniowanych przez rozdzielczość zegara systemowego, jeśli <xref:System.Timers.Timer.Interval%2A> właściwość jest mniejsza od rozdzielczości zegara systemowego. Poniższy przykład ustawia <xref:System.Timers.Timer.Interval%2A> właściwość 5 milisekund. Kiedy uruchomiona na [!INCLUDE[win7](~/includes/win7-md.md)] systemu, w których zegar systemowy ma rozdzielczość około 15 milisekund, generowane zdarzenie, co około 15 milisekund, a nie co 5 milisekund.  
  
 [!code-csharp[System.Timers.Timer.Interval#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/interval2.cs#1)]
 [!code-vb[System.Timers.Timer.Interval#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/interval2.vb#1)]  
  
 Można określić rozdzielczość zegara systemowego w bieżącym systemie, można użyć następującego kodu:  
  
 [!code-csharp[System.Timers.Timer.Interval#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/resolution1.cs#2)]
 [!code-vb[System.Timers.Timer.Interval#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/resolution1.vb#2)]  
  
 Jeśli aplikacja wymaga większej rozdzielczości niż oferowane przez <xref:System.Timers.Timer> klasy lub zegar systemowy, używaj wysokiej rozdzielczości multimediów czasomierzy; zobacz [jak: Wykorzystaj właściwość czasomierza o wysokiej rozdzielczości](https://msdn.microsoft.com/library/aa964692.aspx).  
  
 Jeśli ustawiono interwał po <xref:System.Timers.Timer> została uruchomiona, zostanie zresetowany. Na przykład, jeśli ustawić interwał wynoszący 5 sekund, a następnie ustaw <xref:System.Timers.Timer.Enabled%2A> właściwości `true`, licznik rozpoczyna się od czasu <xref:System.Timers.Timer.Enabled%2A> jest ustawiona. Jeśli zresetujesz interwał to 10 sekund po 3 sekundach, liczba <xref:System.Timers.Timer.Elapsed> zdarzenie jest wywoływane po raz pierwszy 13 sekundach, po <xref:System.Timers.Timer.Enabled%2A> została ustawiona na `true`.  
  
 Jeśli <xref:System.Timers.Timer.Enabled%2A> jest ustawiona na `true` i <xref:System.Timers.Timer.AutoReset%2A> ustawiono `false`, <xref:System.Timers.Timer> zgłasza <xref:System.Timers.Timer.Elapsed> upływa zdarzeń tylko raz, po raz pierwszy interwał. <xref:System.Timers.Timer.Enabled%2A> następnie jest ustawiona na `false`.  
  
> [!NOTE]
>  Jeśli <xref:System.Timers.Timer.Enabled%2A> i <xref:System.Timers.Timer.AutoReset%2A> są ustawione na `false`, i czasomierza wcześniej została włączona, ustawienie <xref:System.Timers.Timer.Interval%2A> powoduje, że właściwość <xref:System.Timers.Timer.Elapsed> zdarzenia raz, tak jakby <xref:System.Timers.Timer.Enabled%2A> właściwość ma wartość `true`. Aby ustawić interwał bez wywoływania zdarzenia, można tymczasowo ustawić <xref:System.Timers.Timer.Enabled%2A> właściwości `true`ustaw <xref:System.Timers.Timer.Interval%2A> właściwość interwał żądany czas, a następnie od razu ustaw <xref:System.Timers.Timer.Enabled%2A> właściwości z powrotem do `false`.  
  
   
  
## Examples  
 Poniższy przykład tworzy wystąpienie <xref:System.Timers.Timer> obiektu, który jest uruchamiany jego <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> zdarzeń co 2 sekundy (2000 MS), ustawia program obsługi zdarzeń dla zdarzenia, a następnie uruchamia czasomierz. Obsługa zdarzeń wyświetla wartość <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> właściwość każdorazowo, jest zgłaszany.  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Interwał jest mniejsza lub równa zero.  
  
—lub— 
Interwał jest większa niż <see cref="F:System.Int32.MaxValue" />, a licznik czasu jest aktualnie włączone. (Jeśli czasomierz nie jest obecnie włączona, jest zgłaszany żaden wyjątek, dopóki nie zostanie ono włączone.)</exception>
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Site" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Site As ISite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::ISite ^ Site { System::ComponentModel::ISite ^ get(); void set(System::ComponentModel::ISite ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Site : System.ComponentModel.ISite with get, set" Usage="System.Timers.Timer.Site" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia witryny, która jest powiązywana <see cref="T:System.Timers.Timer" /> z jego kontenerem w trybie projektowania.</summary>
        <value><see cref="T:System.ComponentModel.ISite" /> Interfejs reprezentujący witryny, która jest powiązywana <see cref="T:System.Timers.Timer" /> obiekt z jego kontenerem.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Powiązania witryny <xref:System.ComponentModel.Component> do <xref:System.ComponentModel.Container> i umożliwić komunikację między nimi, dzięki czemu kontener, aby zarządzać jego składniki.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="timer.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rozpoczyna się wywoływanie <see cref="E:System.Timers.Timer.Elapsed" /> zdarzeń, ustawiając <see cref="P:System.Timers.Timer.Enabled" /> do <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Timers.Timer.Start%2A> nosi nazwę i <xref:System.Timers.Timer.AutoReset%2A> ustawiono `false`, <xref:System.Timers.Timer> zgłasza <xref:System.Timers.Timer.Elapsed> upływa zdarzeń tylko raz, po raz pierwszy interwał. Jeśli <xref:System.Timers.Timer.Start%2A> nosi nazwę i <xref:System.Timers.Timer.AutoReset%2A> jest `true`, <xref:System.Timers.Timer> zgłasza <xref:System.Timers.Timer.Elapsed> czas trwania zdarzenia pierwszy interwał upływa i nadal zgłaszać zdarzenia w określonym przedziale czasu.  
  
 Możesz także uruchomić czasu, przez ustawienie <xref:System.Timers.Timer.Enabled%2A> do `true`.  
  
> [!NOTE]
>  Jeśli <xref:System.Timers.Timer.AutoReset%2A> jest `false`, <xref:System.Timers.Timer.Start%2A> można wywołać metody, aby ponownie uruchomić liczba.  
  
 Wywołanie <xref:System.Timers.Timer.Start%2A> metoda po włączeniu Czasomierz nie ma wpływu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><see cref="T:System.Timers.Timer" /> Utworzeniu interwał równy lub większy niż <see cref="F:System.Int32.MaxValue" /> + 1 lub równa przerwą mniejsza od zera.</exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Stop" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="timer.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zatrzymuje wywołanie <see cref="E:System.Timers.Timer.Elapsed" /> zdarzeń, ustawiając <see cref="P:System.Timers.Timer.Enabled" /> do <see langword="false" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można je również zatrzymać czasu, przez ustawienie <xref:System.Timers.Timer.Enabled%2A> do `false`.  
  
> [!NOTE]
>  Sygnał do pozyskania <xref:System.Timers.Timer.Elapsed> zdarzeń jest zawsze w kolejce do wykonania na <xref:System.Threading.ThreadPool> wątku, dlatego metoda obsługi zdarzeń mogą być uruchamiane w jednym wątku, w tym samym czasie, po wywołaniu <xref:System.Timers.Timer.Stop%2A> metoda uruchamia się na inny wątek. Może to spowodować <xref:System.Timers.Timer.Elapsed> zdarzenie jest wywoływane po wykonaniu <xref:System.Timers.Timer.Stop%2A> metoda jest wywoływana. Przykładowy kod, w następnej sekcji przedstawia jeden ze sposobów obejścia sytuacja wyścigu.  
  
   
  
## Examples  
 Poniższy przykład tworzy wystąpienie `System.Timers.Timer` obiektu, który jest uruchamiany jego <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> zdarzeń co 2 sekundy (2000 MS), ustawia program obsługi zdarzeń dla zdarzenia, a następnie uruchamia czasomierz. Obsługa zdarzeń wyświetla wartość <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> właściwość każdorazowo, jest zgłaszany. Gdy użytkownik naciśnie klawisz Enter, aplikacja wywołuje <xref:System.Timers.Timer.Stop%2A> metoda przed zakończeniem aplikacji.  
  
 [!code-csharp[System.Timers.Timer#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer2a.cs#2)]
 [!code-vb[System.Timers.Timer#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer2a.vb#2)]  
  
 Poniższy przykładowy kod przedstawia sposób zapobiec wątek, który wywołuje <xref:System.Timers.Timer.Stop%2A> metody z kontynuując do aktualnie wykonywanych <xref:System.Timers.Timer.Elapsed> zakończenia zdarzenia, a także uniknąć dwóch <xref:System.Timers.Timer.Elapsed> zdarzenia z wykonywania programu obsługi zdarzeń w tym samym czas (często określanymi jako współużytkowania wątkowości).  
  
 Przykład wykonuje 100 przebiegów testów. Każdorazowo, gdy test jest uruchomiony, czasomierz zostanie uruchomiony przy użyciu interwału wynoszącego 150 milisekund. Obsługa zdarzeń używa <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> metodę symulacji zadanie, które losowo zmienia się w długości od 50 do 200 ms. Metoda testowa również rozpoczyna się wątek kontroli, który oczekuje na sekundę, a następnie zatrzymuje czasomierz. Jeśli zdarzenie jest obsługiwane podczas kontroli wątku zatrzymuje timer, wątek kontroli musi czekać do momentu zakończenia zdarzenia przed kontynuowaniem.  
  
 <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> Przeciążenie metody jest używana w celu uniknięcia współużytkowania wątkowości i uniemożliwić wątek kontroli kontynuowana do czasu zakończenia wykonywania zdarzenia. Obsługa zdarzeń używa <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> metodę, aby ustawić kontrolkę zmiennej na wartość 1, ale tylko wtedy, gdy ta wartość wynosi obecnie zero. To jest operacją niepodzielną. Jeśli wartość zwracana wynosi zero, 1 została ustawiona zmienna sterowania, a następnie przechodzi przez program obsługi zdarzeń. Jeśli wartość zwracana jest różna od zera, zdarzenie jest po prostu odrzucone w celu uniknięcia ponownego rozpoczęcia. (Gdyby konieczne, aby wykonać każde zdarzenie <xref:System.Threading.Monitor> klasy będzie lepszy sposób, aby zsynchronizować zdarzenia.) Po zakończeniu program obsługi zdarzeń, ustawia zmienna sterująca powrót do zera. Przykład rejestruje łączna liczba zdarzeń, które wykonywane, które zostały odrzucone z powodu współużytkowania wątkowości, a które wystąpiły po <xref:System.Timers.Timer.Stop%2A> metoda została wywołana.  
  
 Wątek kontroli używa <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> metodę, aby ustawić zmienną na wartość -1 (minus jeden), ale tylko wtedy, gdy ta wartość wynosi obecnie zero. Jeśli niepodzielnych operacji zwraca różna od zera, zdarzenie jest w trakcie wykonywania. Wątek kontroli czeka i próbuje ponownie. Przykład zlicza liczbę przypadków, gdy trzeba było oczekiwać na zdarzenie zakończyć wątek kontroli.  
  
 [!code-csharp[Timer.Stop#1](~/samples/snippets/csharp/VS_Snippets_CLR/Timer.Stop/CS/source.cs#1)]
 [!code-vb[Timer.Stop#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Timer.Stop/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="SynchronizingObject">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISynchronizeInvoke SynchronizingObject" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.SynchronizingObject" />
      <MemberSignature Language="VB.NET" Value="Public Property SynchronizingObject As ISynchronizeInvoke" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::ISynchronizeInvoke ^ SynchronizingObject { System::ComponentModel::ISynchronizeInvoke ^ get(); void set(System::ComponentModel::ISynchronizeInvoke ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizingObject : System.ComponentModel.ISynchronizeInvoke with get, set" Usage="System.Timers.Timer.SynchronizingObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("The object used to marshal the event handler calls issued when an interval has elapsed.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Timers.TimersDescription("TimerSynchronizingObject")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISynchronizeInvoke</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia obiekt używany do organizowania wywołań programu obsługi zdarzeń, które są wydawane po upływie interwału.</summary>
        <value><see cref="T:System.ComponentModel.ISynchronizeInvoke" /> Reprezentujący obiekt używany do organizowania wywołania programu obsługi zdarzeń, które są wydawane po upływie interwału. Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy <xref:System.Timers.Timer.SynchronizingObject%2A> jest `null`, metoda, która obsługuje <xref:System.Timers.Timer.Elapsed> zdarzenie jest wywoływane w wątku z puli wątków systemu. Aby uzyskać więcej informacji na temat pul wątków systemu, zobacz <xref:System.Threading.ThreadPool>.  
  
 Gdy <xref:System.Timers.Timer.Elapsed> zdarzenie jest obsługiwane przez visual składnika Windows Forms, takie jak przycisk, dostęp do składnika w za pośrednictwem puli wątków systemu może wynik, wyjątek lub po prostu mogą nie działać. Należy unikać ten efekt, ustawiając <xref:System.Timers.Timer.SynchronizingObject%2A> do składnika Windows Forms, co powoduje, że metoda, która obsługuje <xref:System.Timers.Timer.Elapsed> zdarzenie ma być wywołane na tym samym wątku, który składnik został utworzony na.  
  
> [!NOTE]
>  Nawet wtedy, gdy <xref:System.Timers.Timer.SynchronizingObject%2A> właściwość nie jest `null`, <xref:System.Timers.Timer.Elapsed> zdarzenia może wystąpić po <xref:System.Timers.Timer.Dispose%2A> lub <xref:System.Timers.Timer.Stop%2A> wywołano metodę lub po <xref:System.Timers.Timer.Enabled%2A> została ustawiona właściwość `false`, ponieważ sygnału, aby wywołać <xref:System.Timers.Timer.Elapsed> zdarzenie jest zawsze w kolejce do wykonania w wątku z puli wątków. Jednym ze sposobów, aby rozwiązać sytuacja wyścigu jest ustawiona flaga, która informuje program obsługi zdarzeń dla <xref:System.Timers.Timer.Elapsed> zdarzenie, aby zignorować kolejnych zdarzeń.  
  
 Jeśli <xref:System.Timers.Timer> jest używany w programie Visual Studio za pomocą projektanta Windows Forms <xref:System.Timers.Timer.SynchronizingObject%2A> jest automatycznie ustawiana na formant, który zawiera <xref:System.Timers.Timer>. Na przykład jeśli umieścisz <xref:System.Timers.Timer> w Projektancie dla `Form1` (który dziedziczy z <xref:System.Windows.Forms.Form>), <xref:System.Timers.Timer.SynchronizingObject%2A> właściwość <xref:System.Timers.Timer> jest ustawiona na wystąpienie `Form1`.  
  
   
  
## Examples  
 Poniższy przykład jest aplikacji Windows Forms, która służy jako bardzo prostego pliku edytora tekstów. Gdy nie został zapisany tekst w polu tekstowym, aplikacja prosi użytkownika w odstępach jednej minuty czy chce zapisać zawartości pola tekstowego.  Aby to zrobić, <xref:System.Timers.Timer.Interval%2A> właściwość jest ustawiona na jednej minuty (60 000 milisekund), a <xref:System.Timers.Timer.SynchronizingObject%2A> właściwość jest ustawiona na <xref:System.Windows.Forms.Form> obiektu.  
  
 [!code-csharp[System.Timers.Timer.SynchronizingObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Timers.Timer.SynchronizingObject/cs/Form1.cs#1)]
 [!code-vb[System.Timers.Timer.SynchronizingObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Timers.Timer.SynchronizingObject/vb/Form1.vb#1)]  
  
 Przykład wymaga, Dodaj następujące formanty do formularza:  
  
-   A <xref:System.Windows.Forms.TextBox> formantu o nazwie `TextBox1` (domyślnej nazwy).  
  
-   A <xref:System.Windows.Forms.Button> formantu o nazwie `Button1` (domyślnej nazwy).  
  
-   A <xref:System.Windows.Forms.SaveFileDialog> formantu o nazwie `SaveSaveFileDialog1` (domyślnej nazwy).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
        <altmember cref="T:System.ComponentModel.ISynchronizeInvoke" />
        <altmember cref="T:System.Threading.ThreadPool" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
  </Members>
</Type>