<Type Name="TypeProvider" FullName="System.Workflow.ComponentModel.Compiler.TypeProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4c6bab770bf512fd01245bce3774aefbdf9d0db4" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69430712" /></Metadata><TypeSignature Language="C#" Value="public sealed class TypeProvider : IDisposable, IServiceProvider, System.Workflow.ComponentModel.Compiler.ITypeProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TypeProvider extends System.Object implements class System.IDisposable, class System.IServiceProvider, class System.Workflow.ComponentModel.Compiler.ITypeProvider" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.ComponentModel.Compiler.TypeProvider" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TypeProvider&#xA;Implements IDisposable, IServiceProvider, ITypeProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeProvider sealed : IDisposable, IServiceProvider, System::Workflow::ComponentModel::Compiler::ITypeProvider" />
  <TypeSignature Language="F#" Value="type TypeProvider = class&#xA;    interface ITypeProvider&#xA;    interface IServiceProvider&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IServiceProvider</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Workflow.ComponentModel.Compiler.ITypeProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Implementacja programu <see cref="T:System.Workflow.ComponentModel.Compiler.ITypeProvider" /> działa jako kontener typów we wskazanych zestawach i jednostkach kompilowania kodu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 Ta <xref:System.Workflow.ComponentModel.Compiler.ITypeProvider> implementacja, oprócz obsługi skompilowanych zestawów (<xref:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssembly%2A> i <xref:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssemblyReference%2A> metod), może obsługiwać typy, które nie zostały jeszcze skompilowane (<xref:System.Workflow.ComponentModel.Compiler.TypeProvider.AddCodeCompileUnit%2A>). Ograniczona implementacja <xref:System.Type?displayProperty=nameWithType> jest zwracana dla typów, do których odwołuje się użycie <xref:System.CodeDom.CodeCompileUnit>.  
  
> [!NOTE]
>  <xref:System.Workflow.ComponentModel.Compiler.TypeProvider>zwraca tylko typy publiczne z zestawów, do których istnieją odwołania, oraz typy publiczne i niepubliczne z zestawów lokalnych.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeProvider (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.#ctor(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (serviceProvider As IServiceProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeProvider(IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="new System.Workflow.ComponentModel.Compiler.TypeProvider : IServiceProvider -&gt; System.Workflow.ComponentModel.Compiler.TypeProvider" Usage="new System.Workflow.ComponentModel.Compiler.TypeProvider serviceProvider" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">Hermetyzowane <see cref="T:System.IServiceProvider" /> dla tego wystąpienia.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Workflow.ComponentModel.Compiler.TypeProvider" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje, jak utworzyć nowe wystąpienie <xref:System.Workflow.ComponentModel.Compiler.TypeProvider> klasy.  Ten przykład kodu jest częścią przykładu zestawu SDK BasicDesignerHosting z pliku WorkflowLoader.cs. Aby uzyskać więcej informacji, zobacz temat podstawowe informacje o [hostingu projektanta](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms741708(v=vs.90)).  
  
 [!code-csharp[WF_Samples#256](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#256)]
 [!code-vb[WF_Samples#256](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#256)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssembly">
      <MemberSignature Language="C#" Value="public void AddAssembly (System.Reflection.Assembly assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAssembly(class System.Reflection.Assembly assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssembly(System.Reflection.Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAssembly(System::Reflection::Assembly ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.AddAssembly : System.Reflection.Assembly -&gt; unit" Usage="typeProvider.AddAssembly assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="assembly">, <see cref="P:System.Type.Assembly" /> Aby dodać odwołanie do.</param>
        <summary>Dodaje już załadowany zestaw. Jest on odpowiedzialny za załadowanie zestawu i <see cref="T:System.Workflow.ComponentModel.Compiler.TypeProvider" /> zawiera typy z tego zestawu, gdy <see cref="Overload:System.Workflow.ComponentModel.Compiler.TypeProvider.GetType" /> jest wywoływana.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="assembly" />jest odwołaniem o wartości null <see langword="Nothing" />(Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="AddAssemblyReference">
      <MemberSignature Language="C#" Value="public void AddAssemblyReference (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAssemblyReference(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssemblyReference(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAssemblyReference (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAssemblyReference(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.AddAssemblyReference : string -&gt; unit" Usage="typeProvider.AddAssemblyReference path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Ścieżka <see cref="P:System.Type.Assembly" /> do dodania.</param>
        <summary>Dodaje odwołanie <see cref="P:System.Type.Assembly" /> do listy wewnętrznej. Ten zestaw jest używany do <see cref="T:System.Type" /> wyszukiwania <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetType(System.String)" /> w metodzie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje, jak utworzyć nowe wystąpienie <xref:System.Workflow.ComponentModel.Compiler.TypeProvider> klasy i <xref:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssemblyReference%2A> uruchomić metodę. Ten przykład kodu jest częścią przykładu zestawu SDK BasicDesignerHosting z pliku WorkflowLoader.cs. Aby uzyskać więcej informacji, zobacz temat podstawowe informacje o [hostingu projektanta](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms741708(v=vs.90)).  
  
 [!code-csharp[Wf_samples#256](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#256)]
 [!code-vb[Wf_samples#256](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#256)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" />jest odwołaniem o wartości null <see langword="Nothing" />(Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="AddCodeCompileUnit">
      <MemberSignature Language="C#" Value="public void AddCodeCompileUnit (System.CodeDom.CodeCompileUnit codeCompileUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCodeCompileUnit(class System.CodeDom.CodeCompileUnit codeCompileUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddCodeCompileUnit(System.CodeDom.CodeCompileUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddCodeCompileUnit(System::CodeDom::CodeCompileUnit ^ codeCompileUnit);" />
      <MemberSignature Language="F#" Value="member this.AddCodeCompileUnit : System.CodeDom.CodeCompileUnit -&gt; unit" Usage="typeProvider.AddCodeCompileUnit codeCompileUnit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codeCompileUnit" Type="System.CodeDom.CodeCompileUnit" />
      </Parameters>
      <Docs>
        <param name="codeCompileUnit"><see cref="T:System.CodeDom.CodeCompileUnit" /> Do dodania.</param>
        <summary>Dodaje odwołanie <see cref="T:System.CodeDom.CodeCompileUnit" /> do listy wewnętrznej. Jest <see cref="T:System.CodeDom.CodeCompileUnit" /> on używany <see cref="T:System.Type" /> do wyszukiwania w <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetType(System.String)" /> metodzie.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="codeCompileUnit" />jest odwołaniem o wartości null <see langword="Nothing" />(Visual Basic).</exception>
        <exception cref="T:System.ArgumentException"><paramref name="codeCompileUnit" />istnieje już odwołanie w tym wystąpieniu.</exception>
      </Docs>
    </Member>
    <Member MemberName="AssemblyNameResolver">
      <MemberSignature Language="C#" Value="public Func&lt;Type,string&gt; AssemblyNameResolver { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Func`2&lt;class System.Type, string&gt; AssemblyNameResolver" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Compiler.TypeProvider.AssemblyNameResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property AssemblyNameResolver As Func(Of Type, String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Func&lt;Type ^, System::String ^&gt; ^ AssemblyNameResolver { Func&lt;Type ^, System::String ^&gt; ^ get(); void set(Func&lt;Type ^, System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AssemblyNameResolver : Func&lt;Type, string&gt; with get, set" Usage="System.Workflow.ComponentModel.Compiler.TypeProvider.AssemblyNameResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;System.Type,System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia delegata, który odwołuje się do metody z jednym parametrem i jedną wartością zwracaną, która zwraca nazwę wyświetlaną zestawu, do której należy określony typ.</summary>
        <value>Delegat odwołujący się do metody z jednym parametrem i jedną zwracaną wartością zwracającą nazwę wyświetlaną zestawu, do której należy określony typ.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="typeProvider.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszystkie zasoby używane przez <see cref="T:System.Workflow.ComponentModel.Compiler.TypeProvider" />program.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAssemblyName">
      <MemberSignature Language="C#" Value="public string GetAssemblyName (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAssemblyName(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetAssemblyName(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAssemblyName(Type ^ type);" />
      <MemberSignature Language="F#" Value="member this.GetAssemblyName : Type -&gt; string" Usage="typeProvider.GetAssemblyName type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="type">Typ, którego nazwa zestawu ma zostać pobrana.</param>
        <summary>Zwraca nazwę wyświetlaną zestawu, w którym zadeklarowany jest określony typ.</summary>
        <returns>Nazwa wyświetlana zestawu zestawu, w którym zadeklarowany jest określony typ.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumNames">
      <MemberSignature Language="C#" Value="public static string[] GetEnumNames (Type enumType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetEnumNames(class System.Type enumType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetEnumNames(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetEnumNames (enumType As Type) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetEnumNames(Type ^ enumType);" />
      <MemberSignature Language="F#" Value="static member GetEnumNames : Type -&gt; string[]" Usage="System.Workflow.ComponentModel.Compiler.TypeProvider.GetEnumNames enumType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="enumType">Typ, z którego mają zostać uzyskane nazwy.</param>
        <summary>Dostarcza tablicę ciągów, która zawiera nazwy dla określonych <see cref="T:System.Enum" /> w kolejności indeksowanej.</summary>
        <returns>Nazwy określone <see cref="T:System.Enum" /> w kolejności indeksowanej.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="enumType" />jest odwołaniem o wartości null <see langword="Nothing" />(Visual Basic).</exception>
        <exception cref="T:System.ArgumentException"><paramref name="enumType" />Nie <see cref="T:System.Enum" />jest.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEventHandlerType">
      <MemberSignature Language="C#" Value="public static Type GetEventHandlerType (System.Reflection.EventInfo eventInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetEventHandlerType(class System.Reflection.EventInfo eventInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetEventHandlerType(System.Reflection.EventInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetEventHandlerType(System::Reflection::EventInfo ^ eventInfo);" />
      <MemberSignature Language="F#" Value="static member GetEventHandlerType : System.Reflection.EventInfo -&gt; Type" Usage="System.Workflow.ComponentModel.Compiler.TypeProvider.GetEventHandlerType eventInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventInfo" Type="System.Reflection.EventInfo" />
      </Parameters>
      <Docs>
        <param name="eventInfo">W <see cref="T:System.Reflection.EventInfo" /> celu<see cref="T:System.EventHandler" /> uzyskania typu.</param>
        <summary><see cref="T:System.Type" /> Pobiera z,<see cref="T:System.Reflection.EventInfo" />nadanyodwołaniedo <see cref="T:System.EventHandler" />.</summary>
        <returns><see cref="T:System.Reflection.EventInfo" />Obiektu <see cref="T:System.Type" /> ,wodniesieniudo<see cref="T:System.EventHandler" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="eventInfo" />jest odwołaniem o wartości null <see langword="Nothing" />(Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="public object GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetService (serviceType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetService(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="abstract member GetService : Type -&gt; obj&#xA;override this.GetService : Type -&gt; obj" Usage="typeProvider.GetService serviceType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IServiceProvider.GetService(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType"><see cref="T:System.Type" /> Usługa<see cref="T:System.Object" /> , którą należy podać.</param>
        <summary>Pobiera, <see cref="T:System.Type" />który zapewnia wydaną usługę. <see cref="T:System.Object" /></summary>
        <returns>Zapewnia wydaną usługę <see cref="T:System.Type" />. <see cref="T:System.Object" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli hermetyzowane <xref:System.IServiceProvider> skojarzone z tym wystąpieniem jest odwołaniem o wartości`Nothing` null (w Visual Basic), zwracane jest`Nothing`odwołanie o wartości null ().  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetType">
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Type" /> Pobiera z nazwy kwalifikowanego typu przekazaną przez wyszukiwanie odwołań do zestawów i dodanych jednostek kompilacji kodu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType (name As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetType(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.GetType : string -&gt; Type" Usage="typeProvider.GetType name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Workflow.ComponentModel.Compiler.ITypeProvider.GetType(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nazwa typu.</param>
        <summary>Pobiera typ z zestawu zestawów <see langword="TypeProvider" /> dodanych do za pomocą <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssembly(System.Reflection.Assembly)" />, <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssemblyReference(System.String)" />lub <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddCodeCompileUnit(System.CodeDom.CodeCompileUnit)" />.</summary>
        <returns>Żądana <see cref="T:System.Type" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nazwa nie jest rozpoznawalna w pamięci podręcznej zestawów i skompilowanych jednostkach tego wystąpienia, zwracane jest odwołanie o `Nothing`wartości null (Visual Basic). Wywoływanie tego przeciążenia jest takie samo jak wywołanie dwóch przeciążeń parametrów z wartością parametru `throwOnError` ustawioną na. `true`  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" />jest odwołaniem o wartości<see langword="Nothing" /> null (w Visual Basic)</exception>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType (string name, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType(string name, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetType(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType (name As String, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetType(System::String ^ name, bool throwOnError);" />
      <MemberSignature Language="F#" Value="override this.GetType : string * bool -&gt; Type" Usage="typeProvider.GetType (name, throwOnError)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Workflow.ComponentModel.Compiler.ITypeProvider.GetType(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">Nazwa typu.</param>
        <param name="throwOnError">Wartość wskazująca, czy zgłaszać wyjątek, jeśli <paramref name="name" /> nie można go rozpoznać.</param>
        <summary>Pobiera typ z zestawu zestawów <see langword="TypeProvider" /> dodanych do za pomocą <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssembly(System.Reflection.Assembly)" />, <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssemblyReference(System.String)" />lub <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddCodeCompileUnit(System.CodeDom.CodeCompileUnit)" />.</summary>
        <returns>Żądana <see cref="T:System.Type" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie można rozpoznać nazwy w pamięci podręcznej zestawów i skompilowanych jednostkach tego wystąpienia, zwracane jest odwołanie o`Nothing`wartości null (); w przypadku, `throwOnError` gdy `false`jest to.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" />jest odwołaniem o wartości<see langword="Nothing" /> null (w Visual Basic)</exception>
        <exception cref="T:System.Exception"><paramref name="name" />nie jest rozpoznawalny i <paramref name="throwOnError" /> jest <see langword="true" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypes">
      <MemberSignature Language="C#" Value="public Type[] GetTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetTypes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypes () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetTypes();" />
      <MemberSignature Language="F#" Value="abstract member GetTypes : unit -&gt; Type[]&#xA;override this.GetTypes : unit -&gt; Type[]" Usage="typeProvider.GetTypes " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Workflow.ComponentModel.Compiler.ITypeProvider.GetTypes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy tablicę zawierającą wszystkie <see cref="T:System.Type" /> znane do tego wystąpienia.</summary>
        <returns>Tablica, która zawiera wszystkie <see cref="T:System.Type" /> znane do tego wystąpienia.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Reflection.ReflectionTypeLoadException">Nie <see cref="T:System.Type" /> można załadować żadnego z nich.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsAssignable">
      <MemberSignature Language="C#" Value="public static bool IsAssignable (Type toType, Type fromType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsAssignable(class System.Type toType, class System.Type fromType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.IsAssignable(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsAssignable (toType As Type, fromType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsAssignable(Type ^ toType, Type ^ fromType);" />
      <MemberSignature Language="F#" Value="static member IsAssignable : Type * Type -&gt; bool" Usage="System.Workflow.ComponentModel.Compiler.TypeProvider.IsAssignable (toType, fromType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toType" Type="System.Type" />
        <Parameter Name="fromType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="toType">Element docelowy <see cref="T:System.Type" /> przypisania.</param>
        <param name="fromType">Źródło <see cref="T:System.Type" /> przypisania.</param>
        <summary>Wskazuje, czy jeden typ może być bezpiecznie przypisany do innego typu.</summary>
        <returns><see langword="true" />Jeśli przypisanie można bezpiecznie wykonać; w <see langword="false" />przeciwnym razie.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnum">
      <MemberSignature Language="C#" Value="public static bool IsEnum (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsEnum(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.IsEnum(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsEnum(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member IsEnum : Type -&gt; bool" Usage="System.Workflow.ComponentModel.Compiler.TypeProvider.IsEnum type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><see cref="T:System.Type" /> Do przetestowania.</param>
        <summary>Wskazuje, <see cref="T:System.Type" /> czy jest typu <see cref="T:System.Enum" /> .</summary>
        <returns><see langword="true" /><see cref="T:System.Type" /> Jeśli <see langword="false" />jest ;wprzeciwnymrazie.<see cref="T:System.Enum" /></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="type" />jest odwołaniem o wartości<see langword="Nothing" /> null (w Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="IsSubclassOf">
      <MemberSignature Language="C#" Value="public static bool IsSubclassOf (Type subclass, Type superClass);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSubclassOf(class System.Type subclass, class System.Type superClass) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.IsSubclassOf(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSubclassOf (subclass As Type, superClass As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSubclassOf(Type ^ subclass, Type ^ superClass);" />
      <MemberSignature Language="F#" Value="static member IsSubclassOf : Type * Type -&gt; bool" Usage="System.Workflow.ComponentModel.Compiler.TypeProvider.IsSubclassOf (subclass, superClass)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subclass" Type="System.Type" />
        <Parameter Name="superClass" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="subclass"><see cref="T:System.Type" /> Testowany jako Klasa pochodna.</param>
        <param name="superClass"><see cref="T:System.Type" /> Testowany jako Klasa.</param>
        <summary>Wskazuje, czy <see cref="T:System.Type" /> element jest klasą pochodną <see cref="T:System.Type" /> innej.</summary>
        <returns><see langword="true" />Jeśli przetestowana relacja jest prawdziwa; w <see langword="false" />przeciwnym razie.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSupportedProperty">
      <MemberSignature Language="C#" Value="public bool IsSupportedProperty (System.Reflection.PropertyInfo property, object declaringInstance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsSupportedProperty(class System.Reflection.PropertyInfo property, object declaringInstance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.IsSupportedProperty(System.Reflection.PropertyInfo,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsSupportedProperty (property As PropertyInfo, declaringInstance As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsSupportedProperty(System::Reflection::PropertyInfo ^ property, System::Object ^ declaringInstance);" />
      <MemberSignature Language="F#" Value="member this.IsSupportedProperty : System.Reflection.PropertyInfo * obj -&gt; bool" Usage="typeProvider.IsSupportedProperty (property, declaringInstance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.Reflection.PropertyInfo" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="declaringInstance" Type="System.Object" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="property">Właściwość do rozwiązania.</param>
        <param name="declaringInstance">Wystąpienie, w którym zadeklarowana jest określona właściwość.</param>
        <summary>Zwraca wartość określającą, czy określona właściwość jest obsługiwana w elemencie docelowym [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].</summary>
        <returns><see langword="true" />Jeśli określona właściwość jest obsługiwana w elemencie docelowym [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]; <see langword="false" />w przeciwnym razie.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSupportedPropertyResolver">
      <MemberSignature Language="C#" Value="public Func&lt;System.Reflection.PropertyInfo,object,bool&gt; IsSupportedPropertyResolver { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Func`3&lt;class System.Reflection.PropertyInfo, object, bool&gt; IsSupportedPropertyResolver" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Compiler.TypeProvider.IsSupportedPropertyResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property IsSupportedPropertyResolver As Func(Of PropertyInfo, Object, Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Func&lt;System::Reflection::PropertyInfo ^, System::Object ^, bool&gt; ^ IsSupportedPropertyResolver { Func&lt;System::Reflection::PropertyInfo ^, System::Object ^, bool&gt; ^ get(); void set(Func&lt;System::Reflection::PropertyInfo ^, System::Object ^, bool&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.IsSupportedPropertyResolver : Func&lt;System.Reflection.PropertyInfo, obj, bool&gt; with get, set" Usage="System.Workflow.ComponentModel.Compiler.TypeProvider.IsSupportedPropertyResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;System.Reflection.PropertyInfo,System.Object,System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia delegata, który odwołuje się do metody z dwoma parametrami i jedną wartością zwracaną, która określa, czy określona [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]właściwość jest obsługiwana w elemencie docelowym.</summary>
        <value>Delegat odwołujący się do metody z dwoma parametrami i jedną wartością zwracaną, która określa, czy określona właściwość jest [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]obsługiwana w elemencie docelowym.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LocalAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly LocalAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Compiler.TypeProvider.LocalAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalAssembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Assembly ^ LocalAssembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalAssembly : System.Reflection.Assembly" Usage="System.Workflow.ComponentModel.Compiler.TypeProvider.LocalAssembly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Workflow.ComponentModel.Compiler.ITypeProvider.LocalAssembly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość reprezentującą lokalnie zdefiniowane <see cref="T:System.Reflection.Assembly" /> dla tego wystąpienia.</summary>
        <value>Zdefiniowane <see cref="T:System.Reflection.Assembly" /> lokalnie dla tego wystąpienia.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferencedAssemblies">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;System.Reflection.Assembly&gt; ReferencedAssemblies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;class System.Reflection.Assembly&gt; ReferencedAssemblies" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Compiler.TypeProvider.ReferencedAssemblies" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReferencedAssemblies As ICollection(Of Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::ICollection&lt;System::Reflection::Assembly ^&gt; ^ ReferencedAssemblies { System::Collections::Generic::ICollection&lt;System::Reflection::Assembly ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReferencedAssemblies : System.Collections.Generic.ICollection&lt;System.Reflection.Assembly&gt;" Usage="System.Workflow.ComponentModel.Compiler.TypeProvider.ReferencedAssemblies" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Workflow.ComponentModel.Compiler.ITypeProvider.ReferencedAssemblies</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;System.Reflection.Assembly&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję wszystkich zestawów, do których odwołuje <see cref="T:System.Type" />się.</summary>
        <value>Kolekcja wszystkich zestawów, do których odwołuje <see cref="T:System.Type" />się.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RefreshCodeCompileUnit">
      <MemberSignature Language="C#" Value="public void RefreshCodeCompileUnit (System.CodeDom.CodeCompileUnit codeCompileUnit, EventHandler refresher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RefreshCodeCompileUnit(class System.CodeDom.CodeCompileUnit codeCompileUnit, class System.EventHandler refresher) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.RefreshCodeCompileUnit(System.CodeDom.CodeCompileUnit,System.EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RefreshCodeCompileUnit(System::CodeDom::CodeCompileUnit ^ codeCompileUnit, EventHandler ^ refresher);" />
      <MemberSignature Language="F#" Value="member this.RefreshCodeCompileUnit : System.CodeDom.CodeCompileUnit * EventHandler -&gt; unit" Usage="typeProvider.RefreshCodeCompileUnit (codeCompileUnit, refresher)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codeCompileUnit" Type="System.CodeDom.CodeCompileUnit" />
        <Parameter Name="refresher" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="codeCompileUnit"><see cref="T:System.CodeDom.CodeCompileUnit" /> Do odświeżania przy użyciu.</param>
        <param name="refresher"><see cref="T:System.EventHandler" /> Do delegata tego zdarzenia.</param>
        <summary><see cref="T:System.CodeDom.CodeCompileUnit" /> Aktualizuje odwołanie skojarzone z tym wystąpieniem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest <xref:System.Workflow.ComponentModel.Compiler.TypeProvider.TypesChanged> wywoływane, gdy ta metoda jest wywoływana.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="codeCompileUnit" />jest odwołaniem o wartości<see langword="Nothing" /> null (w Visual Basic).</exception>
        <exception cref="T:System.ArgumentException">To wystąpienie już odwołuje się <see cref="T:System.CodeDom.CodeCompileUnit" />do tematu.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAssembly">
      <MemberSignature Language="C#" Value="public void RemoveAssembly (System.Reflection.Assembly assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAssembly(class System.Reflection.Assembly assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.RemoveAssembly(System.Reflection.Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAssembly(System::Reflection::Assembly ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.RemoveAssembly : System.Reflection.Assembly -&gt; unit" Usage="typeProvider.RemoveAssembly assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="assembly"><see cref="T:System.Reflection.Assembly" /> Do usunięcia z tego wystąpienia.</param>
        <summary>Usuwa wszystkie odwołania do tematu <see cref="T:System.Reflection.Assembly" /> z tego wystąpienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest <xref:System.Workflow.ComponentModel.Compiler.TypeProvider.TypesChanged> wywoływane, gdy ta metoda jest wywoływana.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="assembly" />jest odwołaniem o wartości<see langword="Nothing" /> null (w Visual Basic)</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAssemblyReference">
      <MemberSignature Language="C#" Value="public void RemoveAssemblyReference (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAssemblyReference(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.RemoveAssemblyReference(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAssemblyReference (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAssemblyReference(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.RemoveAssemblyReference : string -&gt; unit" Usage="typeProvider.RemoveAssemblyReference path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Ścieżka <see cref="T:System.Reflection.Assembly" /> do usunięcia.</param>
        <summary>Usuwa odwołanie oparte <see cref="T:System.Reflection.Assembly" /> na ścieżce z tego wystąpienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest <xref:System.Workflow.ComponentModel.Compiler.TypeProvider.TypesChanged> wywoływane, gdy ta metoda jest wywoływana.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" />jest odwołaniem o wartości<see langword="Nothing" /> null (w Visual Basic)</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveCodeCompileUnit">
      <MemberSignature Language="C#" Value="public void RemoveCodeCompileUnit (System.CodeDom.CodeCompileUnit codeCompileUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveCodeCompileUnit(class System.CodeDom.CodeCompileUnit codeCompileUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.RemoveCodeCompileUnit(System.CodeDom.CodeCompileUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveCodeCompileUnit(System::CodeDom::CodeCompileUnit ^ codeCompileUnit);" />
      <MemberSignature Language="F#" Value="member this.RemoveCodeCompileUnit : System.CodeDom.CodeCompileUnit -&gt; unit" Usage="typeProvider.RemoveCodeCompileUnit codeCompileUnit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codeCompileUnit" Type="System.CodeDom.CodeCompileUnit" />
      </Parameters>
      <Docs>
        <param name="codeCompileUnit"><see cref="T:System.CodeDom.CodeCompileUnit" /> Do usunięcia.</param>
        <summary>Usuwa wszystkie odwołania do tematu <see cref="T:System.CodeDom.CodeCompileUnit" /> z tego wystąpienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest <xref:System.Workflow.ComponentModel.Compiler.TypeProvider.TypesChanged> wywoływane, gdy ta metoda jest wywoływana.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="codeCompileUnit" />jest odwołaniem o wartości<see langword="Nothing" /> null (w Visual Basic)</exception>
      </Docs>
    </Member>
    <Member MemberName="SetLocalAssembly">
      <MemberSignature Language="C#" Value="public void SetLocalAssembly (System.Reflection.Assembly assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetLocalAssembly(class System.Reflection.Assembly assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Compiler.TypeProvider.SetLocalAssembly(System.Reflection.Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetLocalAssembly(System::Reflection::Assembly ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.SetLocalAssembly : System.Reflection.Assembly -&gt; unit" Usage="typeProvider.SetLocalAssembly assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="assembly"><see cref="T:System.Reflection.Assembly" /> Używane do ustawiania tej wartości</param>
        <summary>Ustawia wartość elementu lokalnego <see cref="T:System.Reflection.Assembly" /> do odwołania. <see cref="T:System.Reflection.Assembly" /></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest <xref:System.Workflow.ComponentModel.Compiler.TypeProvider.TypesChanged> wywoływane, gdy ta metoda jest wywoływana. Wywołaj <xref:System.Workflow.ComponentModel.Compiler.TypeProvider.SetLocalAssembly%28System.Reflection.Assembly%29> przed wywołaniem <xref:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssembly%28System.Reflection.Assembly%29> w przeciwnym razie nie <xref:System.Workflow.ComponentModel.Compiler.TypeProvider>ma wpływu na.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeLoadErrors">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;object,Exception&gt; TypeLoadErrors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;object, class System.Exception&gt; TypeLoadErrors" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Compiler.TypeProvider.TypeLoadErrors" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeLoadErrors As IDictionary(Of Object, Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IDictionary&lt;System::Object ^, Exception ^&gt; ^ TypeLoadErrors { System::Collections::Generic::IDictionary&lt;System::Object ^, Exception ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeLoadErrors : System.Collections.Generic.IDictionary&lt;obj, Exception&gt;" Usage="System.Workflow.ComponentModel.Compiler.TypeProvider.TypeLoadErrors" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Workflow.ComponentModel.Compiler.ITypeProvider.TypeLoadErrors</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.Object,System.Exception&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wyjątki błędów ładowania, które są <see cref="T:System.Object" /> poprzedzone przez, który <see cref="T:System.Exception" />powoduje. <see cref="T:System.Collections.IDictionary" /></summary>
        <value>Wystąpił <see cref="T:System.Collections.IDictionary" /> wyjątek <see cref="T:System.Object" /> z błędami załadunkowymi, które <see cref="T:System.Exception" />powoduje.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zaktualizowana, odłączona <xref:System.Collections.IDictionary> jest tworzona dla każdego odwołania do tej właściwości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeLoadErrorsChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TypeLoadErrorsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TypeLoadErrorsChanged" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.ComponentModel.Compiler.TypeProvider.TypeLoadErrorsChanged" />
      <MemberSignature Language="VB.NET" Value="Public Event TypeLoadErrorsChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ TypeLoadErrorsChanged;" />
      <MemberSignature Language="F#" Value="member this.TypeLoadErrorsChanged : EventHandler " Usage="member this.TypeLoadErrorsChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Workflow.ComponentModel.Compiler.ITypeProvider.TypeLoadErrorsChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy kolekcja <see cref="P:System.Workflow.ComponentModel.Compiler.TypeProvider.TypeLoadErrors" /> zostanie zmodyfikowana.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypesChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TypesChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TypesChanged" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.ComponentModel.Compiler.TypeProvider.TypesChanged" />
      <MemberSignature Language="VB.NET" Value="Public Event TypesChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ TypesChanged;" />
      <MemberSignature Language="F#" Value="member this.TypesChanged : EventHandler " Usage="member this.TypesChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Workflow.ComponentModel.Compiler.ITypeProvider.TypesChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy kolekcja zdefiniowanych typów zostanie zmodyfikowana.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
