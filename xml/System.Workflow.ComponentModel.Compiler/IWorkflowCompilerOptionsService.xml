<Type Name="IWorkflowCompilerOptionsService" FullName="System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bcd87cd4f5b340f2cd5f117cbea8a5b4f56b979d" />
    <Meta Name="ms.sourcegitcommit" Value="1b899505ed6d42225f2b3c9150bfdc080d0d1f9b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/28/2018" />
    <Meta Name="ms.locfileid" Value="32089968" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IWorkflowCompilerOptionsService" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWorkflowCompilerOptionsService" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWorkflowCompilerOptionsService" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWorkflowCompilerOptionsService" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Definiuje interfejs implementowany przez środowisko hostingu projektanta przepływów pracy i kompilatora, aby podać informacje specyficzne dla środowiska kompilacji podczas sprawdzania poprawności i kompilacja procesów.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CheckTypes">
      <MemberSignature Language="C#" Value="public bool CheckTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckTypes" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.CheckTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CheckTypes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CheckTypes { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy typy są sprawdzane.</summary>
        <value>
          <see langword="true" /> Jeśli typy są zaznaczone, w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas fazy weryfikacji kompilacji przepływu pracy dokument źródłowy przepływu pracy zostało odrzucone, jeśli <xref:System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.CheckTypes%2A> właściwość jest `true` i przepływu pracy lub reguły towarzyszącego pliku bezpośrednio żadnych typów .NET Framework nie występują na liście odwołań typy autoryzowanych. Lista typów autoryzowanych jest dokumentu XML, gdzie każdy wpis wskazuje `Assembly`, `Namespace`, `TypeName`i `Authorized` {`true` lub `false`} wskaźnika. Ta klasa odpowiada wpis na liście. Należy również zauważyć, możliwość oznaczenia znak wieloznaczny, do dołączania lub wykluczania pełną przestrzeni nazw. Na przykład za pomocą `Type="System.*"` obejmuje wszystkie typy w <xref:System>, łącznie z typów zawartych w przestrzeniach nazw podrzędnych.  
  
 Korzystanie z listą typów autoryzowanych jest kontrolowany przez <xref:System.Workflow.ComponentModel.Compiler.WorkflowCompiler> opcji **/checktypes** lub za pomocą <xref:System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.CheckTypes%2A> właściwości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Language">
      <MemberSignature Language="C#" Value="public string Language { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Language" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.Language" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Language As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Language { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera język programowania używany przez środowisko, takiego jak Visual Studio podczas kompilowania przepływu pracy.</summary>
        <value>Nazwa języka programowania, używany przez środowisko deweloperskie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład przedstawia implementację `Language` właściwości. W tym przykładzie jest z próbki śledzenia SDK projektanta profilu. Aby uzyskać więcej informacji, zobacz [śledzenia przykładowy projektanta profil](http://msdn.microsoft.com/library/a280199c-3000-4148-ac63-cb5aaeac07c8).  
  
 [!code-csharp[WF_Samples#123](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#123)]
 [!code-vb[WF_Samples#123](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#123)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RootNamespace">
      <MemberSignature Language="C#" Value="public string RootNamespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RootNamespace" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.RootNamespace" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RootNamespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RootNamespace { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera głównej przestrzeni nazw, ustaw dla projektu.</summary>
        <value>Nazwa głównej przestrzeni nazw.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość jest używana w środowisku kompilacji Visual Basic do przekazania do kompilatora projektu głównej przestrzeni nazw.  
  
   
  
## Examples  
 Poniższy przykład przedstawia implementację `RootNamespace` właściwości. W tym przykładzie jest z próbki śledzenia SDK projektanta profilu. Aby uzyskać więcej informacji, zobacz [śledzenia przykładowy projektanta profil](http://msdn.microsoft.com/library/a280199c-3000-4148-ac63-cb5aaeac07c8).  
  
 [!code-csharp[Wf_samples#122](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#122)]
 [!code-vb[Wf_samples#122](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#122)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>