<Type Name="DirectoryEntries" FullName="System.DirectoryServices.DirectoryEntries">
  <Metadata><Meta Name="ms.openlocfilehash" Value="13daa356e81ecdcce39cb8f0545f958bca5f5815" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69383555" /></Metadata><TypeSignature Language="C#" Value="public class DirectoryEntries : System.Collections.IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DirectoryEntries extends System.Object implements class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.DirectoryServices.DirectoryEntries" />
  <TypeSignature Language="VB.NET" Value="Public Class DirectoryEntries&#xA;Implements IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="public ref class DirectoryEntries : System::Collections::IEnumerable" />
  <TypeSignature Language="F#" Value="type DirectoryEntries = class&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.DirectoryServices</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Zawiera kolekcję <see cref="T:System.DirectoryServices.DirectoryEntry" /> obiektów.</summary>
    <remarks>To be added.</remarks>
    <permission cref="T:System.DirectoryServices.DirectoryServicesPermission"><see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></permission>
    <altmember cref="T:System.DirectoryServices.DirectoryEntry" />
    <altmember cref="P:System.DirectoryServices.DirectoryEntry.Children" />
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.DirectoryEntry Add (string name, string schemaClassName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.DirectoryServices.DirectoryEntry Add(string name, string schemaClassName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntries.Add(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (name As String, schemaClassName As String) As DirectoryEntry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::DirectoryServices::DirectoryEntry ^ Add(System::String ^ name, System::String ^ schemaClassName);" />
      <MemberSignature Language="F#" Value="member this.Add : string * string -&gt; System.DirectoryServices.DirectoryEntry" Usage="directoryEntries.Add (name, schemaClassName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.DirectoryEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="schemaClassName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nazwa nowego wpisu.</param>
        <param name="schemaClassName">Nazwa schematu, który jest używany dla nowego wpisu.</param>
        <summary>Tworzy nowy wpis w kontenerze.</summary>
        <returns><see cref="T:System.DirectoryServices.DirectoryEntry" /> Obiekt, który reprezentuje nowy wpis.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Należy wywołać <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> metodę dla nowego wpisu, aby utworzyć trwały. Po wywołaniu tej metody można ustawić obowiązkowe wartości właściwości dla nowego wpisu. Każdy dostawca ma inne wymagania dotyczące właściwości, które należy ustawić przed wywołaniem <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> metody. Jeśli te wymagania nie są spełnione, dostawca może zgłosić wyjątek. Skontaktuj się z dostawcą, aby określić, które właściwości muszą zostać ustawione przed zatwierdzeniem zmian.  
  
   
  
## Examples  
 Poniższy przykład Visual Basic .NET tworzy nowy <xref:System.DirectoryServices.DirectoryEntry> obiekt z określoną ścieżką, a następnie tworzy nowy wpis w kontenerze i zapisuje go.  
  
```vb  
Dim strPath As String = "IIS://localhost/W3SVC/1/Root"  
' Create a new 'DirectoryEntry' object with the given path.  
Dim myDE As New DirectoryEntry(strPath)  
Dim myEntries As DirectoryEntries = myDE.Children  
' Create a new entry 'Sample' in the container.  
Dim myDirectoryEntry As DirectoryEntry = myEntries.Add("CN=Sample", myDE.SchemaClassName)  
' Save changes of entry in the 'Active Directory Domain Services'.  
myDirectoryEntry.CommitChanges()  
Console.WriteLine(myDirectoryEntry.Name + " entry is created in container.")  
```  
  
 Poniższy C# przykład tworzy nowy <xref:System.DirectoryServices.DirectoryEntry> obiekt z określoną ścieżką, a następnie tworzy nowy wpis w kontenerze i zapisuje go.  
  
```csharp  
String strPath = "IIS://localhost/W3SVC/1/Root";  
  
// Create a new 'DirectoryEntry' object with the given path.  
DirectoryEntry myDE = new DirectoryEntry(strPath);  
DirectoryEntries myEntries = myDE.Children;  
  
// Create a new entry 'Sample' in the container.  
DirectoryEntry myDirectoryEntry =   
   myEntries.Add("CN=Sample", myDE.SchemaClassName);  
// Save changes of entry in the 'Active Directory Domain Services'.  
myDirectoryEntry.CommitChanges();  
Console.WriteLine (myDirectoryEntry.Name + " entry is created in container.");  
```  
  
 Poniższy C++ przykład tworzy nowy <xref:System.DirectoryServices.DirectoryEntry> obiekt z określoną ścieżką, a następnie tworzy nowy wpis w kontenerze i zapisuje go.  
  
```cpp  
String* strPath = S"IIS://localhost/W3SVC/1/Root";  
  
// Create a new 'DirectoryEntry' object with the given path.  
DirectoryEntry* myDE = new DirectoryEntry(strPath);  
DirectoryEntries* myEntries = myDE->Children;  
  
// Create a new entry 'Sample' in the container.  
DirectoryEntry* myDirectoryEntry = myEntries->Add(S"CN=Sample", myDE->SchemaClassName);  
// Save changes of entry in the 'Active Directory Domain Services'.  
myDirectoryEntry->CommitChanges();  
Console::WriteLine("{0} entry is created in container.", myDirectoryEntry->Name);  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Runtime.InteropServices.COMException">Wystąpił błąd podczas wywołania do źródłowego interfejsu.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Find">
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca element członkowski tej kolekcji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.DirectoryEntry Find (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.DirectoryServices.DirectoryEntry Find(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntries.Find(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (name As String) As DirectoryEntry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::DirectoryServices::DirectoryEntry ^ Find(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.Find : string -&gt; System.DirectoryServices.DirectoryEntry" Usage="directoryEntries.Find name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.DirectoryEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Zawiera nazwę obiektu podrzędnego, który ma zostać wyszukany.</param>
        <summary>Zwraca element członkowski tej kolekcji o podanej nazwie.</summary>
        <returns><see cref="T:System.DirectoryServices.DirectoryEntry" /> Reprezentujący obiekt podrzędny, który został znaleziony.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli obiekty podrzędne różnych typów mają taką samą nazwę, zwracany jest pierwszy pasujący obiekt podrzędny.  
  
> [!NOTE]
>  Dostawca Internet Information Services (IIS) nie obsługuje tej metody. Użyj przeciążonej <xref:System.DirectoryServices.DirectoryEntries.Find%2A> metody i określ pusty ciąg ("") `schemaClassName` dla parametru.  
>   
>  Jeśli nie zostanie znaleziony pasujący wynik, <xref:System.DirectoryServices.DirectoryServicesCOMException> zostanie zgłoszony kod błędu 0x2030.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Obiekt Active Directory Domain Services nie jest kontenerem.</exception>
        <exception cref="T:System.Runtime.InteropServices.COMException">Wystąpił błąd podczas wywołania do źródłowego interfejsu.</exception>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.DirectoryEntry Find (string name, string schemaClassName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.DirectoryServices.DirectoryEntry Find(string name, string schemaClassName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntries.Find(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (name As String, schemaClassName As String) As DirectoryEntry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::DirectoryServices::DirectoryEntry ^ Find(System::String ^ name, System::String ^ schemaClassName);" />
      <MemberSignature Language="F#" Value="member this.Find : string * string -&gt; System.DirectoryServices.DirectoryEntry" Usage="directoryEntries.Find (name, schemaClassName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.DirectoryEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="schemaClassName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nazwa podrzędnego obiektu katalogu, który ma zostać wyszukany.</param>
        <param name="schemaClassName">Nazwa klasy podrzędnego obiektu katalogu, który ma zostać wyszukany.</param>
        <summary>Zwraca element członkowski tej kolekcji o określonej nazwie i określonym typie.</summary>
        <returns><see cref="T:System.DirectoryServices.DirectoryEntry" /> Obiekt, który reprezentuje obiekt podrzędny, który został znaleziony.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie zostanie znaleziony pasujący wynik, <xref:System.DirectoryServices.DirectoryServicesCOMException> zostanie zgłoszony kod błędu 0x2030.  
  
   
  
## Examples  
 Poniższy przykład Visual Basic .NET tworzy nowy <xref:System.DirectoryServices.DirectoryEntry> obiekt o określonej ścieżce, a następnie tworzy nowy wpis w kontenerze i zapisuje go. Próbuje pobrać nowo utworzony wpis.  
  
```vb  
Try  
     Dim myEntry1 As DirectoryEntry  
     Dim myEntry2 As DirectoryEntry  
     Dim strPath As String = "LDAP://DC=fabrikam,DC=com"  
  
     ' Create a 'DirectoryEntry' object with the given path.  
     Dim myDE As New DirectoryEntry(strPath)  
     Dim myEntries As DirectoryEntries = myDE.Children  
  
     ' Create a new entry in the container.  
     myEntry1 = myEntries.Add("CN=Sample Entry", myDE.SchemaClassName)  
     ' Save changes in the 'Active Directory Domain Services' store.  
     myEntry1.CommitChanges()  
  
     ' Find a child in the 'DirectoryEntries' collection which has the   
     ' specified name and type.  
     myEntry2 = myEntries.Find("CN=Sample Entry", myDE.SchemaClassName)  
     Console.WriteLine(myEntry2.Name + " is found in container.")  
  
     Catch e As Exception  
          Console.WriteLine("The following exception was raised : {0}", e.Message.ToString())  
     End Try  
```  
  
 Poniższy C# przykład pokazuje, jak utworzyć nowy <xref:System.DirectoryServices.DirectoryEntry> obiekt o określonej ścieżce, a następnie tworzy nowy wpis w kontenerze i zapisuje go. Próbuje pobrać nowo utworzony wpis.  
  
```csharp  
using System;  
using System.DirectoryServices;   
  
class MyClass1  
{  
   static void Main()  
   {  
      try  
      {          
         DirectoryEntry myEntry1;  
         DirectoryEntry myEntry2;  
         String strPath = "LDAP://DC=fabrikam,DC=com";  
  
         // Create a 'DirectoryEntry' object with the given path.  
         DirectoryEntry myDE = new DirectoryEntry(strPath);  
         DirectoryEntries myEntries = myDE.Children;  
  
         // Create a new entry in the container.  
         myEntry1 = myEntries.Add("CN=Sample Entry",myDE.SchemaClassName);  
         // Save changes in the 'Active Directory Domain Services' store.  
         myEntry1.CommitChanges();  
  
         // Find a child in the 'DirectoryEntries' collection which has the   
         // specified name and type.  
         myEntry2 = myEntries.Find("CN=Sample Entry",myDE.SchemaClassName);  
         Console.WriteLine (myEntry2.Name + " is found in container.");  
  
      }  
      catch(Exception e)  
      {  
         Console.WriteLine("The following exception was raised : {0}",e.Message);  
      }  
   }  
}  
  
```  
  
 Poniższy C++ przykład tworzy nowy <xref:System.DirectoryServices.DirectoryEntry> obiekt o określonej ścieżce, a następnie tworzy nowy wpis w kontenerze i zapisuje go. Próbuje pobrać nowy wpis.  
  
```cpp  
#using <mscorlib.dll>  
#using <System.dll>  
#using <System.Directoryservices.dll>  
  
using namespace System;  
using namespace System::DirectoryServices;   
  
int main() {  
    try {          
        DirectoryEntry* myEntry1;  
        DirectoryEntry* myEntry2;  
        String* strPath = S"LDAP://DC=fabrikam,DC=com";  
  
        // Create a 'DirectoryEntry' object with the given path.  
        DirectoryEntry* myDE = new DirectoryEntry(strPath);  
        DirectoryEntries* myEntries = myDE->Children;  
  
        // Create a new entry in the container.  
        myEntry1 = myEntries->Add(S"CN=Sample Entry", myDE->SchemaClassName);  
        // Save changes in the 'Active Directory Domain Services' store.  
        myEntry1->CommitChanges();  
  
        // Find a child in the 'DirectoryEntries' collection which has the   
        // specified name and type.  
        myEntry2 = myEntries->Find(S"CN=Sample Entry", myDE->SchemaClassName);  
        Console::WriteLine ("{0} is found in container.", myEntry2->Name);  
    } catch(Exception* e) {  
        Console::WriteLine("The following exception was raised : {0}", e->Message);  
    }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Obiekt Active Directory Domain Services nie jest kontenerem.</exception>
        <exception cref="T:System.Runtime.InteropServices.COMException">Wystąpił błąd podczas wywołania do źródłowego interfejsu.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntries.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="directoryEntries.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca moduł wyliczający, który dokonuje iteracji w kolekcji.</summary>
        <returns><see cref="T:System.Collections.IEnumerator" /> Obiekt, którego można użyć do iteracji w kolekcji.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.DirectoryServices.DirectoryEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.DirectoryServices.DirectoryEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntries.Remove(System.DirectoryServices.DirectoryEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (entry As DirectoryEntry)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::DirectoryServices::DirectoryEntry ^ entry);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.DirectoryServices.DirectoryEntry -&gt; unit" Usage="directoryEntries.Remove entry" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.DirectoryServices.DirectoryEntry" />
      </Parameters>
      <Docs>
        <param name="entry">Nazwa <see cref="T:System.DirectoryServices.DirectoryEntry" /> obiektu do usunięcia.</param>
        <summary>Usuwa element członkowski tej kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli wpis do usunięcia jest kontenerem, kontener musi być pusty. Aby usunąć kontener i wszystkie jego elementy podrzędne, użyj <xref:System.DirectoryServices.DirectoryEntry.DeleteTree%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład Visual Basic .NET tworzy nowy <xref:System.DirectoryServices.DirectoryEntry> obiekt o określonej ścieżce, a następnie tworzy nowy wpis w kontenerze i zapisuje go. Na koniec Pobiera nowy wpis i usuwa go.  
  
```vb  
Imports System  
Imports System.DirectoryServices  
  
Class MyClass1  
   Shared Sub Main()  
      Try  
         Dim strPath As String = "IIS://localhost/W3SVC/1/Root"  
         Dim strName As String = ""  
  
         ' Create a new 'DirectoryEntry' object with the given path.  
         Dim myDE As New DirectoryEntry(strPath)  
         Dim myEntries As DirectoryEntries = myDE.Children  
  
         ' Create a new entry 'Sample' in the container.  
         Dim myDirectoryEntry As DirectoryEntry = myEntries.Add("Sample", myDE.SchemaClassName)  
         ' Save changes of entry in the 'Active Directory Domain Services'.  
         myDirectoryEntry.CommitChanges()  
         Console.WriteLine(myDirectoryEntry.Name + " entry is created in container.")  
  
         ' Find 'Sample' entry in container.  
         myDirectoryEntry = myEntries.Find("Sample", myDE.SchemaClassName)  
         Console.WriteLine(myDirectoryEntry.Name + " found in container.")  
         ' Remove 'Sample' entry from container.  
         strName = myDirectoryEntry.Name  
         myEntries.Remove(myDirectoryEntry)  
         Console.WriteLine(strName + " entry is removed from container.")  
  
      Catch e As Exception  
         Console.WriteLine("The following exception was raised : {0}", e.Message.ToString())  
      End Try  
   End Sub 'Main  
End Class 'MyClass1  
  
```  
  
 Poniższy C# przykład tworzy nowy <xref:System.DirectoryServices.DirectoryEntry> obiekt o określonej ścieżce, a następnie tworzy nowy wpis w kontenerze i zapisuje go. Na koniec Pobiera nowy wpis i usuwa go.  
  
```csharp  
using System;  
using System.DirectoryServices;   
  
class MyClass1  
{  
   static void Main()  
   {  
      try  
      {  
         String strPath = "IIS://localhost/W3SVC/1/Root";  
         String strName = "";  
  
         // Create a new 'DirectoryEntry' object with the given path.  
         DirectoryEntry myDE = new DirectoryEntry(strPath);  
         DirectoryEntries myEntries = myDE.Children;  
  
         // Create a new entry 'Sample' in the container.  
         DirectoryEntry myDirectoryEntry =   
            myEntries.Add("Sample", myDE.SchemaClassName);  
         // Save changes of entry in the 'Active Directory Domain Services'.  
         myDirectoryEntry.CommitChanges();  
         Console.WriteLine (myDirectoryEntry.Name +   
            " entry is created in container.");  
  
         // Find 'Sample' entry in container.  
         myDirectoryEntry = myEntries.Find("Sample", myDE.SchemaClassName);  
         Console.WriteLine(myDirectoryEntry.Name + " found in container.");  
         // Remove 'Sample' entry from container.  
         strName = myDirectoryEntry.Name;  
         myEntries.Remove(myDirectoryEntry);  
         Console.WriteLine(strName+ " entry is removed from container.");  
  
      }  
      catch(Exception e)  
      {  
         Console.WriteLine("The following exception was raised : {0}",  
            e.Message);  
      }  
   }  
}  
  
```  
  
 Poniższy C++ przykład tworzy nowy <xref:System.DirectoryServices.DirectoryEntry> obiekt o określonej ścieżce, a następnie tworzy nowy wpis w kontenerze i zapisuje go. Na koniec Pobiera nowy wpis i usuwa go.  
  
```cpp  
#using <mscorlib.dll>  
#using <System.dll>  
#using <System.Directoryservices.dll>  
  
using namespace System;  
using namespace System::DirectoryServices;   
  
int main() {  
    try {  
        String* strPath = S"IIS://localhost/W3SVC/1/Root";  
        String* strName = S"";  
  
        // Create a new 'DirectoryEntry' object with the given path.  
        DirectoryEntry* myDE = new DirectoryEntry(strPath);  
        DirectoryEntries* myEntries = myDE->Children;  
  
        // Create a new entry 'Sample' in the container.  
        DirectoryEntry* myDirectoryEntry =  myEntries->Add(S"Sample", myDE->SchemaClassName);  
        // Save changes of entry in the 'Active Directory Domain Services'.  
        myDirectoryEntry->CommitChanges();  
        Console::WriteLine(S"{0} entry is created in container.", myDirectoryEntry->Name);  
  
        // Find 'Sample' entry in container.  
        myDirectoryEntry = myEntries->Find(S"Sample", myDE->SchemaClassName);  
        Console::WriteLine(S"{0} found in container.", myDirectoryEntry->Name);  
        // Remove 'Sample' entry from container.  
        strName = myDirectoryEntry->Name;  
        myEntries->Remove(myDirectoryEntry);  
        Console::WriteLine(S"{0} entry is removed from container.", strName);  
    } catch(Exception* e) {  
        Console::WriteLine(S"The following exception was raised : {0}", e->Message);  
    }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Runtime.InteropServices.COMException">Wystąpił błąd podczas wywołania do źródłowego interfejsu.</exception>
      </Docs>
    </Member>
    <Member MemberName="SchemaFilter">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.SchemaNameCollection SchemaFilter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.DirectoryServices.SchemaNameCollection SchemaFilter" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntries.SchemaFilter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SchemaFilter As SchemaNameCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::DirectoryServices::SchemaNameCollection ^ SchemaFilter { System::DirectoryServices::SchemaNameCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SchemaFilter : System.DirectoryServices.SchemaNameCollection" Usage="System.DirectoryServices.DirectoryEntries.SchemaFilter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.SchemaNameCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera schematy, które określają, które obiekty podrzędne znajdują się w kolekcji.</summary>
        <value>Element <see cref="T:System.DirectoryServices.SchemaNameCollection" /> określający, które obiekty podrzędne są zawarte <see cref="T:System.DirectoryServices.DirectoryEntries" /> w wystąpieniu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DirectoryServices.DirectoryEntries.SchemaFilter%2A> Jeśli właściwość jest pusta, obiekty podrzędne wszystkich typów są widoczne w kolekcji; w przeciwnym razie widoczne są tylko te z określonych typów.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
